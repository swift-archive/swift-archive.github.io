<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>October  4, 2016 at 10:00:00am</p></header><div class="content"><p>I agree about exhaustiveness checks being very useful. There was a suggestion for `switch?` implicitly adding `default: break`, `switch!` implicitly adding `default: fatalError()`, and `switch` remaining as it is now. I think that’s a great compromise, would you be in favor of that?<br></p><p>&gt; -1. The “default: break” is not only not difficult to write, it clearly communicates the programmer’s intent to only handle a subset of the cases. Without it, it is impossible to know whether that was intended, or by accident. Furthermore, the exhaustiveness by default can catch many mistakes, including after an additional case is added to an enum.<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; &gt; On Oct 3, 2016, at 5:14 AM, Adrian Zubarev via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; I know that there is this note in Commonly Rejected Changes&lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt; &gt; <br>&gt; &gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; &gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt; &gt; <br>&gt; &gt; I’d like to know why switches must be exhaustive.<br>&gt; &gt; <br>&gt; &gt; switch someValue {<br>&gt; &gt; <br>&gt; &gt; case …:<br>&gt; &gt; // Do something<br>&gt; &gt; <br>&gt; &gt; case …:<br>&gt; &gt; // Do something else<br>&gt; &gt; <br>&gt; &gt; default:<br>&gt; &gt; () // useless nop; do nothing when no pattern matched<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; // VS:<br>&gt; &gt; <br>&gt; &gt; if case … {<br>&gt; &gt; <br>&gt; &gt; } else if case … {<br>&gt; &gt; <br>&gt; &gt; } else if case … {<br>&gt; &gt; <br>&gt; &gt; } // No need for `else`<br>&gt; &gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; --<br>&gt; &gt; Adrian Zubarev<br>&gt; &gt; Sent with Airmail<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October  4, 2016 at 02:00:00pm</p></header><div class="content"><p>There is a plausible argument for `switch!`, because it is not possible for<br>the compiler to prove exhaustiveness in all circumstances where you might<br>know it to be the case.<br></p><p>However, I&#39;d be very against `switch?`: it undermines the exhaustiveness<br>guarantee of the switch statement and is wholly inconsistent with Swift<br>usage of `?`, which indicates the possibility of an Optional. We simply<br>don&#39;t need a new spelling for `default: break`.<br>On Tue, Oct 4, 2016 at 3:35 AM Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I agree about exhaustiveness checks being very useful. There was a<br>&gt; suggestion for `switch?` implicitly adding `default: break`, `switch!`<br>&gt; implicitly adding `default: fatalError()`, and `switch` remaining as it is<br>&gt; now. I think that’s a great compromise, would you be in favor of that?<br>&gt;<br>&gt; &gt; -1. The “default: break” is not only not difficult to write, it clearly<br>&gt; communicates the programmer’s intent to only handle a subset of the cases.<br>&gt; Without it, it is impossible to know whether that was intended, or by<br>&gt; accident. Furthermore, the exhaustiveness by default can catch many<br>&gt; mistakes, including after an additional case is added to an enum.<br>&gt; &gt;<br>&gt; &gt; Charles<br>&gt; &gt;<br>&gt; &gt; &gt; On Oct 3, 2016, at 5:14 AM, Adrian Zubarev via<br>&gt; swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I know that there is this note in Commonly Rejected Changes&lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br>&gt; &gt;:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Remove support for default: in switch and just use case _:: default is<br>&gt; widely used, case _ is too magical, and default is widely precedented in<br>&gt; many C family languages.<br>&gt; &gt; &gt; I really like to use the switch instead of if case for pattern<br>&gt; matching, just because it’s neat block design. I do not want to remove<br>&gt; default from switches because it’s a must have and powerful feature.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I’d like to know why switches must be exhaustive.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; switch someValue {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; case …:<br>&gt; &gt; &gt; // Do something<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; case …:<br>&gt; &gt; &gt; // Do something else<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; default:<br>&gt; &gt; &gt; () // useless nop; do nothing when no pattern matched<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; // VS:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; if case … {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; } else if case … {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; } else if case … {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; } // No need for `else`<br>&gt; &gt; &gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; Adrian Zubarev<br>&gt; &gt; &gt; Sent with Airmail<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution&lt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/7c03974f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>October  4, 2016 at 05:00:00pm</p></header><div class="content"><p>I think I agree with you. The postfix `!` operator is always shorthand for `fatalError()` (and some more syntax), and it would fit nicely with `default: fatalError()`.<br></p><p>The Swift usage of `?` is indeed different than `default: break` would do, so `switch?` wouldn’t convey the right message. I hadn’t given it enough thought. I still think a shorthand for `default: break` would be _nice_, but it surely shouldn’t change the `?` consistency, it also shouldn’t replace the current `switch` (as exhaustiveness is very useful) and it’s probably not worth introducing new syntax for.<br></p><p>&gt; On 4 Oct 2016, at 16:36, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; There is a plausible argument for `switch!`, because it is not possible for the compiler to prove exhaustiveness in all circumstances where you might know it to be the case.<br>&gt; <br>&gt; However, I&#39;d be very against `switch?`: it undermines the exhaustiveness guarantee of the switch statement and is wholly inconsistent with Swift usage of `?`, which indicates the possibility of an Optional. We simply don&#39;t need a new spelling for `default: break`.<br>&gt; On Tue, Oct 4, 2016 at 3:35 AM Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I agree about exhaustiveness checks being very useful. There was a suggestion for `switch?` implicitly adding `default: break`, `switch!` implicitly adding `default: fatalError()`, and `switch` remaining as it is now. I think that’s a great compromise, would you be in favor of that?<br>&gt; <br>&gt; &gt; -1. The “default: break” is not only not difficult to write, it clearly communicates the programmer’s intent to only handle a subset of the cases. Without it, it is impossible to know whether that was intended, or by accident. Furthermore, the exhaustiveness by default can catch many mistakes, including after an additional case is added to an enum.<br>&gt; &gt;<br>&gt; &gt; Charles<br>&gt; &gt;<br>&gt; &gt; &gt; On Oct 3, 2016, at 5:14 AM, Adrian Zubarev via swift-evolution&lt;swift-evolution at swift.org &lt;http://swift.org/&gt;&gt;wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I know that there is this note in Commonly Rejected Changes&lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;&gt;:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; &gt; &gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I’d like to know why switches must be exhaustive.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; switch someValue {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; case …:<br>&gt; &gt; &gt; // Do something<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; case …:<br>&gt; &gt; &gt; // Do something else<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; default:<br>&gt; &gt; &gt; () // useless nop; do nothing when no pattern matched<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; // VS:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; if case … {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; } else if case … {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; } else if case … {<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; } // No need for `else`<br>&gt; &gt; &gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; Adrian Zubarev<br>&gt; &gt; &gt; Sent with Airmail<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org &lt;http://swift.org/&gt;&lt;mailto:swift-evolution &lt;mailto:swift-evolution&gt; at swift.org &lt;http://swift.org/&gt;&gt;<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/dc13e029/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October  5, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 4 Oct 2016, at 16:30, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think I agree with you. The postfix `!` operator is always shorthand for `fatalError()` (and some more syntax), and it would fit nicely with `default: fatalError()`.<br>&gt; <br>&gt; The Swift usage of `?` is indeed different than `default: break` would do, so `switch?` wouldn’t convey the right message. I hadn’t given it enough thought. I still think a shorthand for `default: break` would be _nice_, but it surely shouldn’t change the `?` consistency, it also shouldn’t replace the current `switch` (as exhaustiveness is very useful) and it’s probably not worth introducing new syntax for.<br>&gt; <br>&gt;&gt; On 4 Oct 2016, at 16:36, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; There is a plausible argument for `switch!`, because it is not possible for the compiler to prove exhaustiveness in all circumstances where you might know it to be the case.<br>&gt;&gt; <br>&gt;&gt; However, I&#39;d be very against `switch?`: it undermines the exhaustiveness guarantee of the switch statement and is wholly inconsistent with Swift usage of `?`, which indicates the possibility of an Optional. We simply don&#39;t need a new spelling for `default: break`.<br></p><p>I agree with Tim; I&#39;m a +1 for switch! for a convenient means of erroring out, but I think switch? is a bit too different from normal usage of the question-mark.<br></p><p>One other alternative might be if there could be some kind of switch else syntax, kind of like a guard statement, allowing options on what to do? Only problem is how best to structure it, as the use of break might confusing as to its scope, like so:<br></p><p>	switch(foo) else break { // Break from the switch, or the enclosing block?<br></p><p>So I&#39;m not 100% on that. But it would mean that switch! would be a shorthand for switch else fatalError().<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161005/e0827abd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>October  5, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 8:29 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 4 Oct 2016, at 16:30, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think I agree with you. The postfix `!` operator is always shorthand for `fatalError()` (and some more syntax), and it would fit nicely with `default: fatalError()`.<br>&gt;&gt; <br>&gt;&gt; The Swift usage of `?` is indeed different than `default: break` would do, so `switch?` wouldn’t convey the right message. I hadn’t given it enough thought. I still think a shorthand for `default: break` would be _nice_, but it surely shouldn’t change the `?` consistency, it also shouldn’t replace the current `switch` (as exhaustiveness is very useful) and it’s probably not worth introducing new syntax for.<br>&gt;&gt; <br>&gt;&gt;&gt; On 4 Oct 2016, at 16:36, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is a plausible argument for `switch!`, because it is not possible for the compiler to prove exhaustiveness in all circumstances where you might know it to be the case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I&#39;d be very against `switch?`: it undermines the exhaustiveness guarantee of the switch statement and is wholly inconsistent with Swift usage of `?`, which indicates the possibility of an Optional. We simply don&#39;t need a new spelling for `default: break`.<br>&gt; <br>&gt; I agree with Tim; I&#39;m a +1 for switch! for a convenient means of erroring out, but I think switch? is a bit too different from normal usage of the question-mark.<br>&gt; <br>&gt; One other alternative might be if there could be some kind of switch else syntax, kind of like a guard statement, allowing options on what to do? Only problem is how best to structure it, as the use of break might confusing as to its scope, like so:<br>&gt; <br>&gt; 	switch(foo) else break { // Break from the switch, or the enclosing block?<br>&gt; <br>&gt; So I&#39;m not 100% on that. But it would mean that switch! would be a shorthand for switch else fatalError().<br></p><p>I will courteously jump in with a -1 for both switch! and switch?. I get how pretty they are at first glance:  they have symmetry with existing constructs. However:<br></p><p>* I doubt they&#39;ll be used much and I don&#39;t think something should be added to the language without measurable and consequential benefits.<br></p><p>* I don&#39;t think <br></p><p>    `default: fatalError() // this should never happen, cases are exhaustive` <br></p><p>is a burden to type, in fact, I like how self-documenting it is, even if the compiler sometimes guesses wrong -- in fact, I think the compiler *should* guess wrong, especially on especially oddball case sets like `(.min ..&lt; 0)` and `(0 ... .max)`, let alone cases where you only want the even values within those ranges.<br></p><p>* I do think that visually scanning for switch variants places a burden on code readability. Unlike try? and try!, the switch!? statement will likely be lines and lines away from where it impacts code. The place that best means &quot;this should never happen, cases are exhaustive&quot; is the default case.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161005/068da917/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>October  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 5 Oct 2016, at 15:29, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I agree with Tim; I&#39;m a +1 for switch! for a convenient means of erroring out, but I think switch? is a bit too different from normal usage of the question-mark.<br>&gt; <br>&gt; One other alternative might be if there could be some kind of switch else syntax, kind of like a guard statement, allowing options on what to do? Only problem is how best to structure it, as the use of break might confusing as to its scope, like so:<br>&gt; <br>&gt; 	switch(foo) else break { // Break from the switch, or the enclosing block?<br></p><p>We already have that in default, The syntax is different, but at least the meaning of break is unambiguous.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
