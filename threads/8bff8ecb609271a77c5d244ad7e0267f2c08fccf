<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 22, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins now and runs through June 29. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 23, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. As I was all along during the discussion here, I find the ability to automatically filter the sequence using where as useful and a nice language feature. I do not find the syntax confusing, on the other hand the alternatively suggested replacement with &quot;if&quot; is confusing to me.<br></p><p>IMHO the frequency of use is not a very good point since as I&#39;ve mentioned during the discussion, the fact that it&#39;s not very used in popular Swift repositories may be partially given that this feature isn&#39;t documented well - the Swift Programming Language book on Swift.org doesn&#39;t mention this and neither does any material on developer.apple.com.<br></p><p>It was pointed out that neither does the stdlib use it frequently, but that&#39;s quite a specific piece of work, not reflecting the common use cases.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read + discussion.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>Yes, I’m all for removing this syntax which seems to confuse people with what it actually does. Having to write more explicit code with a `guard` or `.filter` is better than people unexpectedly creating bugs.<br></p><p>I’d say remove it for Swift 3, allowing a potential replacement for this functionality to be an addition and not a breaking change. It’s kind of like pruning a tree back to prepare it for new growth.<br></p><p>(I like Xiaodi’s suggestion of replacing `where` with `if`, but I imagine that would be a separate proposal, but interested in hear other’s thoughts on it, although I’ve probably missed some in the discussion.)<br></p><p>Patrick<br></p><p>&gt; On 23 Jun 2016, at 2:12 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins now and runs through June 29. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>June 22, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br>-1. It removes a feature that I love about Swift.<br>When `for;;;` was removed, I thought to my self , we have `where` to help on tricky situations. <br>Removing `where` would make working with for loops more terse. <br>I do not like using guards in my for loops; I would rather use the old for;; than to use guards.<br>Guards are just not the way I think about loops in general. (Plus I think they are ugly)<br></p><p>It makes sense why SE-0099 removed `where`. We got a whole lot more functionality by giving up `where`. <br>This proposal SE-0105 is taking away functionality by forcing guards continues and breaks. <br>There is not additional functionality being suggested other than forcing one way of doing things. <br></p><p>I don’t think renaming where to `if` helps any. I don’t like the idea even though I love the way python uses it. <br>Using `if` instead of `where` will overload yet another pattern on top of `if`. (if case, if let, if var, if if if)<br></p><p>I want more features to be added to &#39;for in whee’ loops, not them being taken way. <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>nope. <br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>don’t think so. <br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>python. <br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I followed the proposal and discussions.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>June 23, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>Negative.<br></p><p>The “Motivation” logic seems incongruent possibly even contradictory.<br>The where syntax is cited as “… rarely used, [and] hard to discover ….”<br>while simultaneously a source of confusion to new developers. Taking<br>both statements together this proposal seems to be aimed at a sub-set of<br>a sub-set of developers. That alone would tell me this is a problem that<br>is not significant enough to warrant a change to Swift.<br></p><p>Unfortunately the statistics provided in the proposal heavily weigh<br>open-source Swift code and discount code written in closed-source<br>applications. My intuition, based on the volume of feedback provided on<br>the swift-evolution mailing list, tells me there is likely to be some<br>practical Swift code written in closed-source and enterprise<br>applications that is not being equally counted by the proposal<br>statistics. While the intent of the argument, that the syntax is not<br>widely used, is warranted I question these statistics and methods.<br></p><p>Additionally in the “confusion of use” example the `while` loop would<br>seem to be a moot point. It is my understanding that SE-0099 has already<br>removed the inconsistent `while` condition. Assuming that is true, it is<br>hard to believe that future new developers are going to be confused by a<br>syntax that they are unable to experience or use. If this assumption is<br>incorrect than I&#39;d argue the correct course of action is to remove the<br>`while` loop behavior rather than for-in behavior.<br></p><p>Moving to more concrete code based examples. The introduction<br>effectively states that the proposal means to enforce a coding style or<br>convention by removal of another. This seems like something that should<br>be enforced by a linting tool, not the Swift compiler. To put a point on<br>this, I looked at one snippet of code cited in the “Frequency of Use”<br>section as a concrete example of what code would look like before and<br>after accepting the proposal [1].<br></p><p>Before:<br></p><p>/// Returns the greatest argument passed.<br>///<br>/// If there are multiple equal greatest arguments, returns the last<br>one.<br>public func max&lt;T : Comparable&gt;(_ x: T, _ y: T, _ z: T, _ rest: T...) -&gt;<br>T {<br>  var maxValue = max(max(x, y), z)<br>  // In case `value == maxValue`, we pick `value`. See min(_:_:).<br>  for value in rest where value &gt;= maxValue {<br>    maxValue = value<br>  }<br>  return maxValue<br>}<br></p><p>After:<br></p><p>/// Returns the greatest argument passed.<br>///<br>/// If there are multiple equal greatest arguments, returns the last<br>one.<br>public func max&lt;T : Comparable&gt;(_ x: T, _ y: T, _ z: T, _ rest: T...) -&gt;<br>T {<br>  var maxValue = max(max(x, y), z)<br>  // In case `value == maxValue`, we pick `value`. See min(_:_:).<br>  for value in rest {<br>    guard value &gt;= maxValue else { continue }<br>    maxValue = value<br>  }<br>  return maxValue<br>}<br></p><p>It is not obvious to me how removing the `where` and adding the `guard`<br>“reduce[d] cognitive burden when interpreting intent”. Frankly in my<br>estimation it increased it. Now the for-in loop declaration has to be<br>read along with the trailing `guard` to interpret the intent of the<br>loop. I concede it is possible I just do not understand what is meant by<br>cognitive burden when interpreting intent. But I cannot shake the<br>feeling the argument is specious.<br></p><p>At this point I would like to draw attention to the fact that both the<br>“Before” and “After” syntax are fully supported in Swift right now. If<br>one is preferred by a developer as clearer both options are available.<br>And as I pointed out earlier could be enforced by a linting tool.<br></p><p>The motivation provided for the removal of the feature would seem to be<br>applicable to any number of existing Swift features. Not least of which<br>is the pattern matching for-in loop.<br></p><p>enum Thing { case One; case Two; case Three; case Four }<br>let foo: [Thing] = [.One, .Two, .One, .Three, .Four, .One]<br>for case .One in foo { print(&quot;Found a .One&quot;) }<br></p><p>I feel confident that most (all?) of the motivations applied by this<br>proposal would be equally applicable to the example pattern matching<br>for-in loop above. Especially the strongest of those arguments,<br>specifically that it elevates one style, the  `continue` on condition,<br>above other related styles.<br></p><p>[1]<br>https://github.com/apple/swift/blob/a51aa91032ff7ba13bdc883122f4e8868aee6413/stdlib/public/core/Algorithm.swift#L47-54<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. In fact, I think that even the proposal itself says as much. The<br>proposal indicates it means to deprecate an available coding style. It<br>seems to me, as much as is practicable, style changes should be enforced<br>by something other than the Swift compiler.<br></p><p>The proposed `guard` syntax is complete today and is available as a<br>“work-around” for any of the conditions not elevated by this existing<br>Swift syntactic sugar feature.<br></p><p>Of course, other alternatives could be considered, such as expanding<br>this behavior to include `while`, `unless` and `until`. Though that<br>change seems pre-mature. A more pragmatic approach, since the change<br>would be additive, would be to defer until after Swift 3.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. Swift.org [1] lists as one of the “additional” features of the<br>language “Fast and concise iteration over a range or collection”.<br>Removing this feature does little to positively augment that feature.<br></p><p>Swift is opinionated. This is a good thing. It should have strong<br>opinions about safe, fast and expressive code. I do not believe the<br>existing for-in where clause syntax violates any of those features.<br>Furthermore it does nothing to increase the joy of writing Swift code<br>(an explicitly stated goal of Swift [1]).<br></p><p>[1] https://swift.org/about/<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve never experienced this syntax in other languages. Though, coming<br>from C, it is a welcome improvement over that language’s syntax and<br>provides a lot of practical value. <br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A fairly in-depth study. I looked at code that I have access to inside<br>of my work environment (as well as refactoring some for-in loops). I<br>also actively participated in the discussion on the swift-evolution<br>mailing lists. <br></p><p>Additionally, I discussed with co-workers and spouse. These discussions<br>were especially illuminating to me. Because many of my co-workers, as<br>well as my spouse, while being professional software developers, have<br>never worked with Swift. Not a single person I was able to discuss the<br>topic with was confused by the existing syntax regardless of their<br>experience level with Swift. Most shared confusion as to why the<br>proposed `guard` syntax was considered better at all. Most found `guard`<br>in and of itself to be more confusing than `where` combined with for-in.<br>Though it does strongly color my opinion of these changes it is, of<br>course, purely anecdotal.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 23, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 7:42 AM, Ryan Lovelett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No. In fact, I think that even the proposal itself says as much. The<br>&gt; proposal indicates it means to deprecate an available coding style. It<br>&gt; seems to me, as much as is practicable, style changes should be enforced<br>&gt; by something other than the Swift compiler.<br>&gt; <br></p><p>I in no way intended the proposal to &quot;say as much&quot;.<br></p><p>As syntactic sugar, the filtering syntax is <br>rarely used in published deployed code, <br>hard to discover (although I like others have taught it to promote its visibility),<br>elevates one style (continue if false) above others (continue if false, break if true, break if false), which are not expressible using similar shorthand,<br>introduces a fluent style that discourages design comments at the point of use,<br>can be difficult to breakpoint during debugging. <br></p><p>I think these are significant issues.<br></p><p>The recommended alternative (using a separate guard) addresses all these points: better commenting, better breakpointing and debugging, and fully covers the domain of filtering and early exiting. If chaining is desired, using filter and prefix(while:) address all conditions, allow better commenting, etc, and are more self-documenting.<br></p><p>&gt; On Jun 23, 2016, at 9:07 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; The fact that some users may be confused by this terminology is not a reason to remove it from the language. Some users will be confused by many concepts in programming languages. If that means this is considered an &quot;advanced&quot; feature, so be it. We should be able to have a language that has both basic features and advanced features, and when a new developer comes across a feature they don&#39;t understand, they learn it, and then they know it. This is not an insurmountable problem.<br></p><p>For the advanced user, filter and prefix are more customizable and provide greater coverage of cases involving fine control over sequences.<br></p><p>&gt; On Jun 23, 2016, at 3:02 AM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I just taught this to a class of newbies last week and exactly zero of them had trouble with it.  I told my TA that we were debating removing it, and he was horrified.  “It is one of the best features of Swift!” he said.  I agree.  It is one of the things which gives Swift character and makes it fun.<br></p><p>I have also taught this construct, which is always a counterpoint to discoverability issues.<br></p><p>If you step back and ask: &quot;If this feature were not in the language already, would it be added?&quot;, we would have to discuss why &quot;positive filtering&quot; should be prioritized as it is and if we include it, what syntax would least confuse users encountering it for the first time. Surrounded as I am by learner-developers, I recognize that this is a real stumbling block -- no matter how ubiquitous it is in SQL, for example -- and have provided examples of both new and experienced developers being confused. <br></p><p>For any feature to be included, it should provide measurable benefits, fix a real problem, be named well, be discoverable, and provide non-trivial utility. I think &quot;where&quot;, while convenient for a very narrow case of use, fails these tests.<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/37670c3c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>June 23, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;       * What is your evaluation of the proposal?<br> <br>-1. I don&#39;t think this is really a big deal, but I find where clauses on<br>for loops to be very elegant, and I&#39;m not convinced by any of the<br>arguments for why they should go away.<br> <br>I&#39;m especially not convinced by the argument over the behavior itself<br>being confusing, e.g. the fact that it&#39;s equivalent to a continue rather<br>than a break. You know what else is equivalent to a continue that this<br>proposal isn&#39;t modifying? `for case pattern in`. If the refutable<br>pattern does not match, the element is skipped and the for loop<br>continues to the next. This is precisely how the `where` clause works<br>(and it&#39;s no surprise that the two were introduced at the same time). So<br>the argument that says we should remove `where` in favor of explicit guard-<br>continues also implies that we should remove `for case pattern in`,<br>which I would strongly disagree with.<br> <br>&gt;       * Is the problem being addressed significant enough to warrant a<br>&gt;         change to Swift?<br> <br>I don&#39;t think so. As the proposal argues, this feature is not very widely-<br>used, at least within open-source code (though as others have pointed<br>out, there&#39;s no data on how much it&#39;s used in closed-source code, and<br>it&#39;s plausible that there is far more closed-source Swift code than open-<br>source). Since it&#39;s not widely-used in public, the arguments for<br>removing it aren&#39;t very significant. And the people who do use it tend<br>to like the feature. And I agree with the people who have pointed out<br>that it&#39;s not the Swift compiler&#39;s job to enforce a single coding style.<br> <br>&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;   reading, or an in-depth study?<br> <br>Reading the proposal and this review thread.<br> <br>On Thu, Jun 23, 2016, at 10:25 AM, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jun 23, 2016, at 7:42 AM, Ryan Lovelett via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a<br>&gt;&gt;&gt; change to Swift?<br>&gt;&gt;<br>&gt;&gt; No. In fact, I think that even the proposal itself says as much. The<br>&gt;&gt; proposal indicates it means to deprecate an available coding<br>&gt;&gt; style. It<br>&gt;&gt; seems to me, as much as is practicable, style changes should be<br>&gt;&gt; enforced<br>&gt;&gt; by something other than the Swift compiler.<br>&gt;&gt;<br>&gt;<br>&gt; I in no way intended the proposal to &quot;say as much&quot;.<br>&gt;<br>&gt; As syntactic sugar, the filtering syntax is<br>&gt;  * rarely used in published deployed code,<br> <br>With no info on how often it&#39;s used in closed-source code. Just<br>looking at a single closed-source project (the Postmates app), we use<br>the where clause on for loops 7 times, which is more than your<br>proposal says the stdlib and a random sampling of open source projects<br>uses combined. And this is just one project, so who knows how much<br>it&#39;s used in other projects.<br> <br>&gt;  * hard to discover (although I like others have taught it to promote<br>&gt;    its visibility),<br> <br>If there&#39;s an educational issue here, that should be addressed in the<br>documentation (i.e. the book), rather than by removing the feature.<br> <br>&gt;  * elevates one style (continue if false) above others (continue if<br>&gt;    false, break if true, break if false), which are not expressible<br>&gt;    using similar shorthand,<br> <br>I completely disagree. Removing this feature is elevating one style (guard-<br>continue) over another. Keeping the feature is not making any judgement<br>call about style whatsoever. And as I said above, `for case pattern in`<br>already has the continue-if-unmatched behavior, so removing this feature<br>does not mean the for loop no longer has a way to assume continue.<br> <br>&gt;  * introduces a fluent style that discourages design comments at the<br>&gt;    point of use,<br> <br>You can comment where clauses. Just put it on a new line.<br> <br>&gt;  * can be difficult to breakpoint during debugging.<br> <br>This can be said about a lot of things. If I want to breakpoint my where<br>clause, I can convert it to a guard-continue. Although first I&#39;d try<br>putting the clause on its own line and seeing if lldb is smart enough to<br>then break just on the where clause.<br> <br>&gt; I think these are significant issues.<br>&gt;<br>&gt; The recommended alternative (using a separate guard) addresses all<br>&gt; these points: better commenting, better breakpointing and debugging,<br>&gt; and fully covers the domain of filtering and early exiting. If<br>&gt; chaining is desired, using filter and prefix(while:) address all<br>&gt; conditions, allow better commenting, etc, and are more self-<br>&gt; documenting.<br> <br>You can already use a separate guard. The existence of the where clause<br>on a for loop does not in any way detract from the ability to use a<br>separate guard.<br> <br>&gt;&gt; On Jun 23, 2016, at 9:07 AM, Tony Allevato via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt; The fact that some users may be confused by this terminology is not a<br>&gt;&gt; reason to remove it from the language. Some users will be confused by<br>&gt;&gt; many concepts in programming languages. If that means this is<br>&gt;&gt; considered an &quot;advanced&quot; feature, so be it. We should be able to have<br>&gt;&gt; a language that has both basic features and advanced features, and<br>&gt;&gt; when a new developer comes across a feature they don&#39;t understand,<br>&gt;&gt; they learn it, and then they know it. This is not an insurmountable<br>&gt;&gt; problem.<br>&gt; For the advanced user, filter and prefix are more customizable and<br>&gt; provide greater coverage of cases involving fine control over<br>&gt; sequences.<br> <br>Then use them when appropriate. In many cases the where clause is<br>sufficient and more elegant. Using filter and prefix also introduce the<br>hazard of forgetting to add &quot;.lazy&quot;, which means you&#39;re allocating a new<br>array when you don&#39;t need to.<br> <br>&gt;&gt; On Jun 23, 2016, at 3:02 AM, Jonathan Hull via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt; I just taught this to a class of newbies last week and exactly zero<br>&gt;&gt; of them had trouble with it.  I told my TA that we were debating<br>&gt;&gt; removing it, and he was horrified.  “It is one of the best features<br>&gt;&gt; of Swift!” he said.  I agree.  It is one of the things which gives<br>&gt;&gt; Swift character and makes it fun.<br>&gt; I have also taught this construct, which is always a counterpoint to<br>&gt; discoverability issues.<br>&gt;<br>&gt; If you step back and ask: &quot;If this feature were not in the language<br>&gt; already, would it be added?&quot;, we would have to discuss why &quot;positive<br>&gt; filtering&quot; should be prioritized as it is and if we include it, what<br>&gt; syntax would least confuse users encountering it for the first time.<br>&gt; Surrounded as I am by learner-developers, I recognize that this is a<br>&gt; real stumbling block -- no matter how ubiquitous it is in SQL, for<br>&gt; example -- and have provided examples of both new and experienced<br>&gt; developers being confused.<br> <br>The feature wasn&#39;t in the language, and it was added. The previous<br>examples of &quot;if this feature were not in the language already&quot; questions<br>were all about pre-1.0 features. This feature was added later (IIRC in<br>Swift 2). And as I said above, this feature complements the `for case<br>pattern in` behavior. `for case pattern in` lets you skip elements based<br>on a refutable pattern, and `where` lets you skip elements based on a<br>boolean condition.<br> <br>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/872bffb2/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. &#39;where&#39; in &#39;for-in&#39; loop is very handy and clear construction, it is <br>similar to well-known &#39;WHERE&#39; clause in SQL which acts the same way : it <br>filters records, not returning just first found record.<br>&#39;where&#39;/&#39;Where()&#39; in LINQ in C# works the same way(filter),<br>&#39;where&#39; in Ruby on Rails &quot;result of filtering the current relation <br>according to the conditions in the arguments.&quot;<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. The proposal removes very handy feature without strong reason for this <br>and without suggesting good alternative (I think using of guard-continue is <br>not a good alternative).<br></p><p>IMO to remove where in &#39;for-in&#39; loop we need to suggest new construction to <br>handy iterate sequences/collections with filtering and probably other handy <br>features.<br>I probably could understand the proposal in case we (and core team) are <br>planing such new construction (for example like LINQ in C#) and for this we <br>need to remove &#39;where&#39; in &#39;for-in&#39;. But for this moment, I don&#39;t hear if <br>there is such plans and when probably such construction could be <br>implemented. (And in any case I don&#39;t think &#39;where&#39; in &#39;for-in&#39; will be any <br>kind of stopper for new construction where &#39;where&#39; will be also used).<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think no. I feel this like step back to C.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read all the discussion thread and proposal, participated in discussions.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 23, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1.  It removes a useful feature.  Swift 3 has already removed enough and the argument in this case feels pretty weak to me.  <br></p><p>I have no doubt that *some* people are confused by this feature, but that will be the case for any feature.  This feature is very similar to features in many other languages.  The potential for confusion here seems pretty low for anyone familiar with SQL, list comprehensions, etc.  Those who aren’t familiar with this construct may be delighted once they learn how it works.  If this was an entirely novel programming language feature I might be more sympathetic to the learnability / potential for confusion argument, but it isn’t and the argument in this case is weak IMO.<br></p><p>The style argument is also weak.  The Swift compiler is *not* the right place to enforce style.  Other proposals attempting to enforce style rules have been rejected and this one should as well.<br></p><p>The argument that `guard` is a more complete replacement is true, but it also completely disregards the fact that filtering is by far the most commonly desired behavior.  Swift embraces syntactic sugar for common cases in many places.  In that respect this feature fits the language very well.  Moving the condition into the loop and requiring explicit control flow is significantly *less* clear and readable IMO.<br></p><p>The argument that this feature is not commonly used only considers a relatively small amount of code in very specific domains.  It does not provide any analysis of *why* this might be the case.  The findings could be due to the domains in question or stylistic preferences of the authors of the code in question.  I’ll concede that the authors of the standard library and Carthage are probably familiar with this feature, but outside of this context the feature may still be relatively unknown.  Removing a feature on grounds that it is not commonly used without an analysis of *why* is a bad idea, especially in a relatively new language like Swift where many programmers it is targeting are just starting to learn the language.<br></p><p>Finally, I think “breakage fatigue” in Swift 3 is a valid concern.  We are making major changes and removing several conveniences.  We should not do this more than necessary.  This change does not feel necessary.<br></p><p>It may be possible to improve this feature or replace it with something more powerful down the road, but we should not speculatively remove it now on grounds that we might do that later. <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.  It removes a very Swifty (IMO) convenience feature without a compelling reason to do so.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have used languages both with and without features similar to `for in where`.  This is a very nice feature in languages that have it.  I would be disappointed to see Swift remove it without replacing it with something more powerful.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed the discussion thread, read the proposal, read the reviews, etc.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>July  1, 2016 at 05:00:00pm</p></header><div class="content"><p>-1 for the same reasons cited by Tony Allevato, Matthew Johnson, Vladimir.S and Ryan Lovelett.<br></p><p>IMO the arguments brought forth are weak, especially concerning readability, understandability and usage. The statistics provided to demonstrate that the feature is not often used don&#39;t tell us anything about the reasons why and I would guess that a prominent reason might be that the feature is not well known because it is is not part of the introductinary documentation. <br></p><p>Extending this feature to something more powerful like Scala&#39;s for-expressions or LINQ&#39;s similar constructs should be backwards compatible with the current usage of `where` IMO.<br></p><p>-Thorsten <br></p><p>&gt; Am 23.06.2016 um 16:43 schrieb Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt;    * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1.  It removes a useful feature.  Swift 3 has already removed enough and the argument in this case feels pretty weak to me.  <br>&gt; <br>&gt; I have no doubt that *some* people are confused by this feature, but that will be the case for any feature.  This feature is very similar to features in many other languages.  The potential for confusion here seems pretty low for anyone familiar with SQL, list comprehensions, etc.  Those who aren’t familiar with this construct may be delighted once they learn how it works.  If this was an entirely novel programming language feature I might be more sympathetic to the learnability / potential for confusion argument, but it isn’t and the argument in this case is weak IMO.<br>&gt; <br>&gt; The style argument is also weak.  The Swift compiler is *not* the right place to enforce style.  Other proposals attempting to enforce style rules have been rejected and this one should as well.<br>&gt; <br>&gt; The argument that `guard` is a more complete replacement is true, but it also completely disregards the fact that filtering is by far the most commonly desired behavior.  Swift embraces syntactic sugar for common cases in many places.  In that respect this feature fits the language very well.  Moving the condition into the loop and requiring explicit control flow is significantly *less* clear and readable IMO.<br>&gt; <br>&gt; The argument that this feature is not commonly used only considers a relatively small amount of code in very specific domains.  It does not provide any analysis of *why* this might be the case.  The findings could be due to the domains in question or stylistic preferences of the authors of the code in question.  I’ll concede that the authors of the standard library and Carthage are probably familiar with this feature, but outside of this context the feature may still be relatively unknown.  Removing a feature on grounds that it is not commonly used without an analysis of *why* is a bad idea, especially in a relatively new language like Swift where many programmers it is targeting are just starting to learn the language.<br>&gt; <br>&gt; Finally, I think “breakage fatigue” in Swift 3 is a valid concern.  We are making major changes and removing several conveniences.  We should not do this more than necessary.  This change does not feel necessary.<br>&gt; <br>&gt; It may be possible to improve this feature or replace it with something more powerful down the road, but we should not speculatively remove it now on grounds that we might do that later. <br>&gt; <br>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No.<br>&gt; <br>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; No.  It removes a very Swifty (IMO) convenience feature without a compelling reason to do so.<br>&gt; <br>&gt;&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I have used languages both with and without features similar to `for in where`.  This is a very nice feature in languages that have it.  I would be disappointed to see Swift remove it without replacing it with something more powerful.<br>&gt; <br>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I followed the discussion thread, read the proposal, read the reviews, etc.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>On Wed, Jun 22, 2016 at 9:12 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins<br>&gt; now and runs through June 29. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>-1000. This is one of the features of Swift that I feel is incredibly<br>elegant and unique, providing a way to do basic filtering and iteration<br>without having to worry about lazy filtering or control flow statements.<br></p><p><br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>No—in fact, there is no problem. The &quot;where&quot; notation is perfectly grounded<br>in mathematics and set theory and its meaning is clear.  &quot;for x in y where<br>z&quot; reads almost exactly like the set notation &quot;{x ∈ y | z}&quot; does aloud.<br></p><p>The fact that some users may be confused by this terminology is not a<br>reason to remove it from the language. Some users will be confused by many<br>concepts in programming languages. If that means this is considered an<br>&quot;advanced&quot; feature, so be it. We should be able to have a language that has<br>both basic features and advanced features, and when a new developer comes<br>across a feature they don&#39;t understand, they learn it, and then they know<br>it. This is not an insurmountable problem.<br></p><p>IIRC, this proposal was a follow-up to the removal of &quot;where&quot; in &quot;if&quot;<br>statements, but the two uses of the term are unrelated. In &quot;if&quot; statements,<br>&quot;where&quot; was used to separate let-bindings from other parts of the<br>conditional—it was not a filter over a collection and did not correspond to<br>existing mathematical terms of art. That&#39;s not the case here, and it feels<br>like surface-level consistency for consistency&#39;s sake.<br></p><p><br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>No. The alternatives are worse, IMO:<br></p><p>* Putting if/guard and continue at the front of the loop is more clutter<br>and expresses the concept in terms of control flow instead of sequence<br>filtration, when the latter is closer to expressing the semantics of what<br>the loop is doing. I would argue that it increases the mental load because<br>now I have to parse an &quot;if&quot; or a &quot;guard&quot;, the condition, and the &quot;continue&quot;<br>to make sure that it&#39;s doing exactly what it&#39;s doing (and the fact that<br>&quot;guard&quot; could be used here means there is implicit negation that I have to<br>parse on top of that), whereas &quot;where foo&quot; is right there and immediately<br>unambiguous.<br></p><p>* Using .filter() many times requires that .lazy also be used in order to<br>be performant. In many cases, writing the naïve .filter() line will return<br>a new copied collection and users are likely to accidentally write code<br>that is slower than it should be.<br></p><p>The fact that it only elevates one particular control flow construct (&quot;if x<br>else continue&quot;) doesn&#39;t seem relevant. It&#39;s a common case and the language<br>should simplify common cases when possible. As a matter of fact, I would<br>also be supportive of the &quot;for x in y while z&quot; that some other people have<br>offered for the same reason. While it&#39;s less based on set theory than<br>&quot;where&quot;, it optimizes another common case.<br></p><p><br></p><p>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br></p><p>        * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Read the proposal and followed the earlier discussion threads.<br></p><p><br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/7d196acb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br></p><p>   * Is the problem being addressed significant enough to warrant a change to Swift?<br>It&#39;s a small change, but it would improve readability a little. <br></p><p>   * Does this proposal fit well with the feel and direction of Swift?<br>Yes, e.g. when using .filter on the sequence being iterated over as an alternative, the code reads a bit more functional. <br></p><p>   * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>No<br></p><p>   * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A few minutes for reading the proposal.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 23, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins now and runs through June 29. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>Huge -1.<br></p><p>In my opinion, structuring for-loops to take advantage of “where” can turn a confusing or difficult filtering rule into a SQL-like declarative statement that’s easier to read and easier to reason about.<br></p><p>The proposal seems to make an assumption that using where conditions makes the logic impenetrable since I believe there’s an underlying assumption that it is common to chain 3 or 4 or 5 conditions there. In my experience, that is very much NOT the case. In fact I would argue that the syntax of “where” and the way it is structured encourages brevity and clarification of intent in ways that a list of guards and ifs cannot because a bunch of guard/if statements has no syntactic pressure limiting their proliferation in the loop’s body whereas the “where” construct does.<br></p><p>Usage metrics are not a strong argument to me. I know that argument was also partially used to support removal of C-style for-loops (a decision with which I strongly support), but in that case I feel there were many other good supporting arguments in play. In the case of removing “where”, it seems the primary argument is usage stats pulled from a few open source projects (some of which may even have code predating the introduction of “where” on for loops) and some anecdotal suggestions that it might be confusing the very first time someone encounters it without having read the documentation beforehand. The latter argument is very weak, IMO, because as far as I can tell, there is zero evidence (not even anecdotal) that once a person learns how “for-where” works that there is ever confusion about it again or that it is ever a source of bugs as a result of confusion.<br></p><p>If this proposal was for replacing for-where with a full fledged Python-ish list comprehension kind of construct, then I might have a different opinion. As it is, it’s in favor of removing the closest thing we have to them and replacing it with nothing.<br></p><p>I could imagine supporting an *adjustment* to for-where’s syntax to this, for example:<br></p><p>for x where x &lt; 42 in sequence {<br>}<br></p><p>However it seemed the discussion was centered almost exclusively around the idea of just getting rid of it rather than trying to fix any of the perceived flaws it may have.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t even agree there’s a problem to solve here.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve used many languages without for-where. After using Swift and for-where, I no longer like those languages as much.<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I was a reasonably active participant in the discussion for a time.<br></p><p><br>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>I am -0.5 on removing the where clause. I will note that removing it now -<br>given the appearing limited usage - shouldn&#39;t cause a large disruption to<br>most users. It may allow us time to think more about it and things related<br>to it since it can be added back at a later point without breaking swift 3<br>users.<br></p><p>I personally was bitten by misusing where with a for-in, I had the mental<br>model that it would abort the loop. To be honest I am not sure why I had<br>that mental model given long history with SQL where clause and using where<br>heavily in switch case statements (e.g. acts as a filter). I think for some<br>uses I had an assumption that the optimizer could prove that the where<br>would in fact always filter past a certain loop point and that may have<br>screwed up my mental model in the general case.<br></p><p>If you make such a mistake with where you may never know because from a<br>line debugging perspective your loop content never gets executed if the<br>where is violated yet you may still be looping (possibly causing<br>destructive consumption or a performance issue).<br></p><p>With that said I do find the syntax fairly clean and helpful when using<br>for-in (if not abused by chaining many together). I don&#39;t have a better<br>name for it, if it stays around I think it should stay named where to align<br>with where in other constructs in the language.<br></p><p>I do think for completeness we should consider adding &#39;until&#39; for abort<br>looping case. We should also consider moving the location of the where (and<br>potential until) on the other side of &#39;in&#39;.<br></p><p>One negative to this syntax (assuming not abused) is not being able to<br>probe things with a line based debugger. Of course many compact constructs<br>in the language are that way. ...maybe someday lldb and Xcode could allow<br>for statement scoped breakpoints<br></p><p>-Shawn<br></p><p>On Wed, Jun 22, 2016 at 9:12 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins<br>&gt; now and runs through June 29. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/ea49e96a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>-1 Where provides a nice clarity when distinguishing the clauses from the<br>optional binding<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 23 June 2016 at 16:59, Shawn Erickson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I am -0.5 on removing the where clause. I will note that removing it now -<br>&gt; given the appearing limited usage - shouldn&#39;t cause a large disruption to<br>&gt; most users. It may allow us time to think more about it and things related<br>&gt; to it since it can be added back at a later point without breaking swift 3<br>&gt; users.<br>&gt;<br>&gt; I personally was bitten by misusing where with a for-in, I had the mental<br>&gt; model that it would abort the loop. To be honest I am not sure why I had<br>&gt; that mental model given long history with SQL where clause and using where<br>&gt; heavily in switch case statements (e.g. acts as a filter). I think for some<br>&gt; uses I had an assumption that the optimizer could prove that the where<br>&gt; would in fact always filter past a certain loop point and that may have<br>&gt; screwed up my mental model in the general case.<br>&gt;<br>&gt; If you make such a mistake with where you may never know because from a<br>&gt; line debugging perspective your loop content never gets executed if the<br>&gt; where is violated yet you may still be looping (possibly causing<br>&gt; destructive consumption or a performance issue).<br>&gt;<br>&gt; With that said I do find the syntax fairly clean and helpful when using<br>&gt; for-in (if not abused by chaining many together). I don&#39;t have a better<br>&gt; name for it, if it stays around I think it should stay named where to align<br>&gt; with where in other constructs in the language.<br>&gt;<br>&gt; I do think for completeness we should consider adding &#39;until&#39; for abort<br>&gt; looping case. We should also consider moving the location of the where (and<br>&gt; potential until) on the other side of &#39;in&#39;.<br>&gt;<br>&gt; One negative to this syntax (assuming not abused) is not being able to<br>&gt; probe things with a line based debugger. Of course many compact constructs<br>&gt; in the language are that way. ...maybe someday lldb and Xcode could allow<br>&gt; for statement scoped breakpoints<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt; On Wed, Jun 22, 2016 at 9:12 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins<br>&gt;&gt; now and runs through June 29. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt;&gt; When writing your review, here are some questions you might want to answer<br>&gt;&gt; in your review:<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of<br>&gt;&gt; Swift?<br>&gt;&gt;         * If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/74291f13/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>June 23, 2016 at 12:00:00pm</p></header><div class="content"><p>-1<br></p><p>An important goal in Swift is “clarity at the point of use,” it appears in the API Design Guidelines as one of the fundamentals, but also pervades the design of the Swift language itself.<br></p><p>I think that removing the `where` clause from Swift’s `for` loops will reduce clarity of intent for many programmers.<br></p><p>It may be that `for`/`where` and `for`/`guard`/`continue` express the same result for the compiler, but an identical compiled output does not necessarily equate to an identical intent on behalf of the programmer. I do not believe that it has ever been a Swift goal that “there is only way one way to do it.”<br></p><p>Please consider the following example code:<br></p><p>  for line in lines where !line.isEmpty() {<br>    …<br>  }<br></p><p>The intent of this code is clear to the reader. A set of lines from a line is being iterated, and filtered such that the code within the loop is only operating on those that are not empty. This is a fairly common pattern when working with files, for example. It may be that the code within the loop would work perfectly well even in the case of empty lines, the programmer simply does not wish to consider them.<br></p><p>Filtered iteration is a common pattern throughout programming, other uses include things like iterating the set of “updated objects” in Core Data, etc.<br></p><p>Now consider the equivalent avoiding a `where` clause, and replacing it with `guard`:<br></p><p>  for line in lines {<br>    guard !line.isEmpty() else { continue }<br>    …<br>  }<br></p><p>To the compiler it is the same code, but to the programmer this may have a very different intent.<br></p><p>`guard` in Swift is _not_ simply a generic `unless` statement, the name was chosen very specifically and less harsh names rejected. `guard` belongs closer to the family of `assert` and `precondition` than it does to `if`. `guard` is used to provide an expression of pattern that *must* be true for the code following it to operate without error or other unintended side-effects. This is why the `else` block must, in some way, exit the containing scope of the `guard`.<br></p><p>In first example the code makes it clear, to me, that it is normal for the set of lines to contain non-empty, and empty lines. But in the second example, to me, the code makes it clear that non-empty lines are not expected in the set, and would cause the code to error if they were present; the code guards against this by stepping over them—following Postel’s Law.<br></p><p>My opinion would be that the correct way of preserving the intent of the first example would be either:<br></p><p>  for line in lines {<br>    if !line.isEmpty() {<br>      …<br>    }<br>  }<br></p><p>or:<br></p><p>  for line in lines.lazy.filter({ !$0.isEmpty() }) {<br>    …<br>  }<br></p><p>The second case is particularly troubling here because it’s “hard to get right” from a performance point of view. The clarity of `for`/`where` wins over all of these.<br></p><p>Scott<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>June 23, 2016 at 12:00:00pm</p></header><div class="content"><p>A separate point I would make, aside from my previous long-winded comment about clarity, is that the “confusion of use” in this proposal has already been corrected by SE-0099 which has removed `where` clauses from optional-binding and case-conditions.<br></p><p>Scott<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 23, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 23 Jun 2016, at 05:12, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I&#39;m against it. While I sympathise with some of the reasons behind it, I feel there are better solutions than removing this feature, and that at the very least doing so now would be premature as we have yet to see how removing where from conditionals will impact people&#39;s grasp of it on for loops. (currently confusion stems from the ambiguity compared to while where).<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don&#39;t believe so; I think that the justification for removing the feature needs to be stronger than it is, and that other solutions may have better merit.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I feel not; personally I find where more Swift-y than using .filter() or if/guard continue, but this appears to be highly subjective.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated quite a bit in the discussion.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June 23, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Le 23 juin 2016 à 00:12, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins now and runs through June 29. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br>&gt; <br></p><p>&gt;    * What is your evaluation of the proposal?<br></p><p>+0.5<br></p><p>The &#39;where&#39; is a nice sugar for people familiar with SQL but doesn&#39;t seem to hold its ground. Without &#39;where&#39; nor &#39;guard&#39;, something like:<br></p><p>for element in collection where condition(element) { doSomething(element) }<br></p><p>is/could be<br></p><p>for element in collection { if condition(element) { doSomething(element) } }<br></p><p>Beside the extra curly brace there isn&#39;t much difference in the clarity of the message, rendering the sugar not as sweet as it sound.<br></p><p>Also the &#39;where&#39; is not available to the other loop structure: &#39;while&#39;, &#39;repeat&#39;, &#39;do&#39;. For these one have to rely on &#39;if&#39; and &#39;guard&#39;. &quot;Forcing&quot; the use of &#39;if&#39; and &#39;guard&#39; in all loop structure would provide uniformity.<br></p><p>The fix-it should probably used the nested &#39;for { if { } }&#39; as its the syntax matching more closely what was written, at the cost of one ident level, and missing an opportunity to advertise a usage of &#39;guard&#39;<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, &#39;where&#39; is not confusing; it&#39;s the &#39;while binding where&#39; and the &#39;for .. In infiniteSequence where ..&#39; which are.<br>Yes, &#39;where&#39; (in &#39;for .. in&#39;) is pointless and if it did not currently exist would likely never be approved as an addition to the language due to its narrow field of operation.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>&#39;for .. in .. where&#39;<br>Has a Swift like syntax<br>Is a sugar with limited scope which doesn&#39;t pull its weight, so is not Swift like<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Never used &#39;where&#39; attached to directly to a loop.<br>Extensive use of SQL-like queries.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Closely followed the thread as I originally feared the disappearance of this nice construct. Tried and failed to understand how the syntax can be seen as confusing.<br></p><p>Dany<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>June 24, 2016 at 07:00:00am</p></header><div class="content"><p>-1 for the reasons already brought up. <br></p><p>I would also point out that half the biasing argument is extremely questionable: yes, for-in-where is “biased” in favor of “visit-if” and not &quot;visit-unless”, but this form of “bias” is inevitable unless you start multiplying keywords (to have one for each “polarity”).<br></p><p>Note that, e.g., `guard` is also biased in a particular direction — we have `guard $conditionThatMustBeTrue` but not `unless $conditionThatShouldNotBeFalse` — and although this choice *does* make sense (due to let-binding being a success-case), it *is* otherwise backwards from traditional guard clauses (which were usually `if $exitCondition { $exit }`, which is the opposite polarity from how `guard` works).<br></p><p>So unless you want to have 2 of every control-flow keyword, whenever you have just one of each you just have to learn the “polarity&quot; of each…this seems inevitable. Also note that even if you *did* go for 2-of-each, picking names that are sufficiently self-evident is harder than it looks, so in practice you’d almost certainly still have to wind up learning at least one of them, if not both.<br></p><p>Additionally, I would point `for-in-where` has some unique aspects that would complicate taking the “remove today to improve tomorrow” approach (as has been done with some other features like splatting).<br></p><p>Specifically, using for-in-where is a stylistic decision, and although translating its uses *to* `guard-continue` form can be done mechanically, translating `guard-continue` *back* to the (successor of) `for-in-where` in a stylistically-appropriate way seems much harder to mechanize…so if it was dropped for later, improved reinstatement, the temporary dropping might result in losing a lot of the original human stylistic choice, which IMHO is useful evidence of the original human intent.<br></p><p>&gt; On Jun 22, 2016, at 11:12 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins now and runs through June 29. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 24, 2016 at 07:00:00pm</p></header><div class="content"><p>-1<br> <br></p><p> <br>I&#39;ve followed this discussion since the beginning, and I feel the usage is clear given that for...in is a *data-driven* loop<br> <br></p><p> <br>I wouldn&#39;t mind renaming to &quot;if&quot; if there is some confusion, but I think we use &quot;where&quot; consistently in the language (and Dave Abrahams proposal for closure argument names takes this further), so could be argued that it&#39;s already clear.<br> <br></p><p> <br>Perhaps we should use &quot;where&quot; consistently for data-filtering operations, and possibly rename the generic constraint specifier. If we wanted to be really rigorously consistent.<br> <br></p><p> <br>Karl<br> <br></p><p> <br> <br> Sent from my new   Email (https://itunes.apple.com/app/apple-store/id922793622?pt=814382&amp;mt=8&amp;ct=my_new_email)<br> <br> <br> <br> <br></p><p> <br> <br>&gt;  <br>&gt; On Jun 23, 2016 at 6:12 AM,  &lt;Chris Lattner via swift-evolution (mailto:swift-evolution at swift.org)&gt;  wrote:<br>&gt;  <br>&gt;  <br>&gt;  <br>&gt;  Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0105: Removing Where Clauses from For-In Loops&quot; begins now and runs  through June 29. (x-apple-data-detectors://1)  The proposal is available here:<br>&gt;<br>&gt;   https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.md (https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.mdReviews)<br>&gt;<br>&gt; Reviews (https://github.com/apple/swift-evolution/blob/master/proposals/0105-remove-where-from-forin-loops.mdReviews)  are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;   https://lists.swift.org/mailman/listinfo/swift-evolution (https://lists.swift.org/mailman/listinfo/swift-evolutionor)<br>&gt;<br>&gt; or (https://lists.swift.org/mailman/listinfo/swift-evolutionor), if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve  the proposal (x-apple-data-detectors://4)  under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;<br>&gt;  * What is your evaluation of the proposal?<br>&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;  * Does this proposal fit well with the feel and direction of Swift?<br>&gt;  * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;   https://github.com/apple/swift-evolution/blob/master/process.md (https://github.com/apple/swift-evolution/blob/master/process.mdThank)<br>&gt;<br>&gt; Thank (https://github.com/apple/swift-evolution/blob/master/process.mdThank)  you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing  list (mailto:listswift-evolution at swift.orghttps)<br>&gt; swift-evolution at swift.org (mailto:listswift-evolution at swift.orghttps)<br>&gt; https (mailto:listswift-evolution at swift.orghttps)://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;          <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/be152fdb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 24, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 11:26 AM, Karl Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I&#39;ve followed this discussion since the beginning, and I feel the usage is clear given that for...in is a *data-driven* loop<br>&gt; <br>&gt; I wouldn&#39;t mind renaming to &quot;if&quot; if there is some confusion, but I think we use &quot;where&quot; consistently in the language (and Dave Abrahams proposal for closure argument names takes this further), so could be argued that it&#39;s already clear.<br>&gt; <br>&gt; Perhaps we should use &quot;where&quot; consistently for data-filtering operations, and possibly rename the generic constraint specifier. If we wanted to be really rigorously consistent.<br>&gt; <br>&gt; Karl<br></p><p>I&#39;d much rather keep `where` for protocol constraints and rename data-filtering in for-in if kept. My suggestions in the proposal are &quot;if&quot;, &quot;unless&quot;, &quot;until&quot;, and &quot;while&quot;. <br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016, at 11:03 AM, Erica Sadun via swift-evolution wrote:<br>&gt; <br>&gt; &gt; On Jun 24, 2016, at 11:26 AM, Karl Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; -1<br>&gt; &gt; <br>&gt; &gt; I&#39;ve followed this discussion since the beginning, and I feel the usage is clear given that for...in is a *data-driven* loop<br>&gt; &gt; <br>&gt; &gt; I wouldn&#39;t mind renaming to &quot;if&quot; if there is some confusion, but I think we use &quot;where&quot; consistently in the language (and Dave Abrahams proposal for closure argument names takes this further), so could be argued that it&#39;s already clear.<br>&gt; &gt; <br>&gt; &gt; Perhaps we should use &quot;where&quot; consistently for data-filtering operations, and possibly rename the generic constraint specifier. If we wanted to be really rigorously consistent.<br>&gt; &gt; <br>&gt; &gt; Karl<br>&gt; <br>&gt; I&#39;d much rather keep `where` for protocol constraints and rename data-filtering in for-in if kept. My suggestions in the proposal are &quot;if&quot;, &quot;unless&quot;, &quot;until&quot;, and &quot;while&quot;. <br></p><p>None of these keywords make sense as a replacement.<br></p><p>if - This only makes sense if it&#39;s a condition that&#39;s checked before the loop starts and causes the entire loop to be skipped.<br>unless - This has the same problem as if, though it inverts the boolean condition.<br>until - This keyword implies that iteration stops when the condition fails, which is a change in behavior from the where clause (and IMO less useful than the current where behavior).<br>while - Same as until, though it inverts the boolean condition.<br></p><p>I really think we should just keep the where here. I don&#39;t think there&#39;s any problem using it both here and in protocol constraints. It means basically the same thing in both cases, that the thing being modified applies to all cases (e.g. all types, or all elements of the sequence) where the condition holds true.<br></p><p>-Kevin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 24, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 5:33 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 24, 2016, at 11:03 AM, Erica Sadun via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 24, 2016, at 11:26 AM, Karl Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve followed this discussion since the beginning, and I feel the usage is clear given that for...in is a *data-driven* loop<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wouldn&#39;t mind renaming to &quot;if&quot; if there is some confusion, but I think we use &quot;where&quot; consistently in the language (and Dave Abrahams proposal for closure argument names takes this further), so could be argued that it&#39;s already clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps we should use &quot;where&quot; consistently for data-filtering operations, and possibly rename the generic constraint specifier. If we wanted to be really rigorously consistent.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Karl<br>&gt;&gt; <br>&gt;&gt; I&#39;d much rather keep `where` for protocol constraints and rename data-filtering in for-in if kept. My suggestions in the proposal are &quot;if&quot;, &quot;unless&quot;, &quot;until&quot;, and &quot;while&quot;. <br>&gt; <br>&gt; None of these keywords make sense as a replacement.<br>&gt; <br>&gt; if - This only makes sense if it&#39;s a condition that&#39;s checked before the loop starts and causes the entire loop to be skipped.<br>&gt; unless - This has the same problem as if, though it inverts the boolean condition.<br>&gt; until - This keyword implies that iteration stops when the condition fails, which is a change in behavior from the where clause (and IMO less useful than the current where behavior).<br>&gt; while - Same as until, though it inverts the boolean condition.<br>&gt; <br>&gt; I really think we should just keep the where here. I don&#39;t think there&#39;s any problem using it both here and in protocol constraints. It means basically the same thing in both cases, that the thing being modified applies to all cases (e.g. all types, or all elements of the sequence) where the condition holds true.<br></p><p>As detailed in the proposal, the keywords cover the space of continue false, continue true,  break true, break false.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/bae055a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; As detailed in the proposal, the keywords cover the space of continue false, continue true,  break true, break false.<br></p><p>But the goal of covering all four of these options is arbitrary and inconsistent with the rest of the language. Moreover, it&#39;s arbitrary and inconsistent in a way that inflates the apparent magnitude of the problem.<br></p><p>Firstly: There is no need whatsoever for both &quot;true&quot; and &quot;false&quot; versions of each condition. Swift doesn&#39;t have `if` and `unless`, or `guard` and `prevent`, or `while` and `until`. It expects you to use the not operator or reverse the sense of your comparisons (`!=` instead of `==`, `&gt;=` instead of `&lt;`, etc.). We can do the same thing here. If `if !` is good enough, then so is `where !`.<br></p><p>Secondly: Yes, `where` and `while` are both available as list operations (`filter` and `prefix(while:)`), but so are `map` and `sorted`, and nobody is suggesting we need those as keywords. (Well, some people have suggested some additional `for` keywords, but they&#39;re wrong.) If we feel that `where` is special, there&#39;s nothing wrong with offering only `where`.<br></p><p>And I *would* argue that `where` is special. It&#39;s special because skipping an element feels less like control flow than terminating a loop. It&#39;s special because `where` is not order-dependent, but `while` is. It&#39;s special because terminating the loop is a more drastic action. It&#39;s special because the `continue` keyword is less clear than the `break` keyword, but is considered an inviolable term of art. It&#39;s special because I suspect (but admittedly cannot prove) that `continue` is more frequently used at the top of a loop, controlled by a single conditional statement based on a side-effect-free boolean operation, than `break`.<br></p><p>Think of it this way: We have not accepted the often-proposed `else`-less `guard`, but if we did, there is broad agreement that, absent an &quot;always `return`&quot; rule for simplicity, the most obvious body to infer inside a loop is `continue`. There are reasons for that, and they&#39;re the exact same reasons we support `where` but not `while`.<br></p><p>* * *<br></p><p>My review of this proposal follows.<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think the motivation is weak and do not find it compelling.<br></p><p>The &quot;elevates one style above other related styles&quot; motivation fails to convince me for the reasons described above; &quot;difficult to document separately at its point of use&quot; can be addressed simply by adding a newline before the `where` clause; &quot;hard to breakpoint and debug&quot; is true of any expression, and is easily addressed by extracting that expression into an inner function; and &quot;rarely used&quot; is, in my opinion, more a result of how it is taught and documented than of how useful it is.<br></p><p>In my opinion, the *only* valid argument cited for the removal of `where` is that learners sometimes misunderstand it. I&#39;m very sympathetic to learners, and I would like to improve their experience with this feature. But there are many other ways to help them, like:<br></p><p>* Making sure that &quot;The Swift Programming Language&quot; teaches the use of `for`/`where`.<br></p><p>* Adding help content for language keywords to Xcode and Swift Playgrounds.<br></p><p>* Making syntax adjustments that might improve clarity, like my suggestion that putting the `where` clause next to the variable might clarify that you are filtering the values which will be seen inside the loop.<br></p><p>* Changing the keyword, if a better keyword can be found.<br></p><p>But at this point, measures like these have not been tried, and I have not heard convincing arguments that they will not work.<br></p><p>Meanwhile, the proposal does not address the problems it causes, suggest that they *should* be addressed in a future proposal, or even acknowledge that there *are* any problems. If `where` is removed, none of its alternatives are nearly as good:<br></p><p>* `guard`/`else`/`continue` clutters the logic with completely avoidable boilerplate.<br></p><p>More worryingly, it obscures the intent: &quot;Skip elements like this&quot; becomes &quot;Elements must be like this, and if they&#39;re not, go to the next element&quot;. Converting a meaning into mechanical instructions to achieve it is not an improvement. If we wanted to do that, we could dispose of `for`/`in` entirely and replace it with:<br></p><p>	var iterator = collection.makeIterator()<br>	while let elem = iterator.next() { … }<br></p><p>Folks who wrote AppKit code on Tiger would feel right at home.<br></p><p>* `filter(suchThat:)` (or whatever we call it) is dramatically less efficient and has syntactic issues with that particular slot because trailing closures are unavailable.<br></p><p>* `lazy.filter(suchThat:)` lies on a narrow golden path (it&#39;s all too easy to forget the `lazy`) and still has the same syntactic issues as a plain `filter`.<br></p><p>We retired `where` clauses from `if` statements because they were a grammatical hack, an unnatural usage forced on us by the desire to support a feature (multiple optional bindings or pattern matches per keyword) that, in hindsight, we realized was less important. There is no similar consideration driving this proposal. Instead, the justification offered is essentially a series of style complaints and an argument that, if you don&#39;t try to teach the feature and you don&#39;t try to improve it, some people sometimes guess its meaning incorrectly. That&#39;s just not enough.<br></p><p>For the reasons above, I urge the core team to reject this proposal.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Quite possibly. But removing `for`/`in`/`where` is an overreaction. When your arm is broken, you put a cast on it; you don&#39;t cut it off.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes in that it&#39;s a clean-up attempt, but no in that it forces additional boilerplate.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>`for`/`in`/`where` is necessitated by circumstances that are somewhat unique to Swift among the languages I&#39;ve used, so I don&#39;t really have a basis for comparison.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated pretty heavily in previous discussions.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
