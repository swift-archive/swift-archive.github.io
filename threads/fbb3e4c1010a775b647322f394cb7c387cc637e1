<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Self.withoutSpecialization</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  2, 2016 at 08:00:00am</p></header><div class="content"><p>on Fri Jul 01 2016, &quot;T.J. Usiyan via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Bump<br>&gt;<br>&gt; On Fri, Jul 1, 2016 at 11:56 AM, T.J. Usiyan<br>&gt; &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ## The Issue<br>&gt;&gt; Given<br>&gt;&gt; ``` swift<br>&gt;&gt; public protocol Zipper1D : CustomStringConvertible {<br>&gt;&gt;     associatedtype Element<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; We can almost write a `flatMap`  which keeps the general identity of self<br>&gt;&gt; and swaps out the Element in the output.<br>&gt;&gt;<br>&gt;&gt; ``` swift<br>&gt;&gt; func flatMap&lt;<br>&gt;&gt;         NewElement, SegmentOfResult : Collection, Output : Zipper1D where<br>&gt;&gt;         SegmentOfResult.Iterator.Element == NewElement, Output.Element ==<br>&gt;&gt; NewElement&gt;<br>&gt;&gt;         (_ transform: @noescape (Element) throws -&gt; SegmentOfResult)<br>&gt;&gt; rethrows -&gt; Output<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; ## The Proposal<br>&gt;&gt; I propose that we allow `Type.withoutSpecialization`<br>&gt;&gt;<br>&gt;&gt; ``` swift<br>&gt;&gt; func flatMap&lt;<br>&gt;&gt;         NewElement, SegmentOfResult : Collection, Output : Zipper1D where<br>&gt;&gt;         SegmentOfResult.Iterator.Element == NewElement, Output.Element ==<br>&gt;&gt; NewElement, Output.withoutSpecialization == Self.withoutSepcialization&gt;<br>&gt;&gt;         (_ transform: @noescape (Element) throws -&gt; SegmentOfResult)<br>&gt;&gt; rethrows -&gt; Output<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I recognize that generic protocols are another possible solution to this<br>&gt;&gt; problem. I am pitching this because of how much closer this idea seems to<br>&gt;&gt; being realized.<br></p><p>The right answer to this problem is something called “higher-kinded<br>types,” which are interesting to contemplate for the future, but most<br>definitely out-of-scope at the moment.<br></p><p>Cheers,<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Pitch] Self.withoutSpecialization</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>July  2, 2016 at 12:00:00pm</p></header><div class="content"><p>I periodically kill all hope that we might get higher-kinded-types, just to<br>remain sane.<br></p><p>It&#39;s interesting that you would make them sound like a possibility though,<br>since Mr Widmann said something about you declaring them intractable for<br>some reason or another.<br></p><p>Well, this attempt to get them by hook or crook failed, but I won&#39;t let<br>that get me down. No. No I won&#39;t.<br></p><p>On Sat, Jul 2, 2016 at 11:40 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; on Fri Jul 01 2016, &quot;T.J. Usiyan via swift-evolution&quot; &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Bump<br>&gt; &gt;<br>&gt; &gt; On Fri, Jul 1, 2016 at 11:56 AM, T.J. Usiyan<br>&gt; &gt; &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## The Issue<br>&gt; &gt;&gt; Given<br>&gt; &gt;&gt; ``` swift<br>&gt; &gt;&gt; public protocol Zipper1D : CustomStringConvertible {<br>&gt; &gt;&gt;     associatedtype Element<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; We can almost write a `flatMap`  which keeps the general identity of<br>&gt; self<br>&gt; &gt;&gt; and swaps out the Element in the output.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ``` swift<br>&gt; &gt;&gt; func flatMap&lt;<br>&gt; &gt;&gt;         NewElement, SegmentOfResult : Collection, Output : Zipper1D<br>&gt; where<br>&gt; &gt;&gt;         SegmentOfResult.Iterator.Element == NewElement, Output.Element<br>&gt; ==<br>&gt; &gt;&gt; NewElement&gt;<br>&gt; &gt;&gt;         (_ transform: @noescape (Element) throws -&gt; SegmentOfResult)<br>&gt; &gt;&gt; rethrows -&gt; Output<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## The Proposal<br>&gt; &gt;&gt; I propose that we allow `Type.withoutSpecialization`<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ``` swift<br>&gt; &gt;&gt; func flatMap&lt;<br>&gt; &gt;&gt;         NewElement, SegmentOfResult : Collection, Output : Zipper1D<br>&gt; where<br>&gt; &gt;&gt;         SegmentOfResult.Iterator.Element == NewElement, Output.Element<br>&gt; ==<br>&gt; &gt;&gt; NewElement, Output.withoutSpecialization == Self.withoutSepcialization&gt;<br>&gt; &gt;&gt;         (_ transform: @noescape (Element) throws -&gt; SegmentOfResult)<br>&gt; &gt;&gt; rethrows -&gt; Output<br>&gt; &gt;&gt; ```<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I recognize that generic protocols are another possible solution to this<br>&gt; &gt;&gt; problem. I am pitching this because of how much closer this idea seems<br>&gt; to<br>&gt; &gt;&gt; being realized.<br>&gt;<br>&gt; The right answer to this problem is something called “higher-kinded<br>&gt; types,” which are interesting to contemplate for the future, but most<br>&gt; definitely out-of-scope at the moment.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/2049d5e1/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
