<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/19e063a2e39db5f58ed5ab02d14c1879?s=50"></div><header><strong>[Proposal Idea] catching functions for composable and cps error handling</strong> from <string>Matthew Johnson</string> &lt;musical.matthew at mac.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>I came up with an interesting idea last night that might be a natural enhancement to Swift’s current error handling.  I’m curious to see whether others think it is worth pursuing or not.<br></p><p>There are two motivating examples for this.  It could provide the obvious way to flow errors through code written in continuation passing style (whether asynchronous or not).  It could also provide a way to abstract over common error handling code.<br></p><p>The basic idea is to allow catching functions that would be a complement to throwing functions.  Catching functions would have one or more catch blocks at the top level and could also accept arguments:<br></p><p>func handler(int i: Int, str: String) catches {<br>  // i and str are in scope<br>} catch VendingMachineError.InvalidSelection {<br>  // i and str are not in scope<br>} catch VendingMachineError.OutOfStock {<br>  // i and str are not in scope<br>}<br></p><p><br>The function could be called as normal: <br>handler(int: 1, str: “”)  <br></p><p>In this case the body would be executed.<br></p><p>The function could also be called with a “catch” clause: <br>handler(catch VendingMachineError.InvalidSelection)<br></p><p>In this case the top level catch clauses would be evaluated as if they part of a do-catch statement in which an error was thrown.<br></p><p>Note that there is no colon after the `catch` in the function call.  This would avoid conflicting with a potential argument named catch and would also call attention to the fact that it is not a normal argument.  I don’t think 	`throw` would be appropriate here as that could be ambiguous if the function containing the call to `handler` was a throwing function and also because an error would not be thrown up the stack, but rather caught directly by `handler`.<br></p><p>It may be worthwhile to consider requiring a catching function to handle all errors if it wishes to return a value so that it is able to return a value when catching an error no matter what the error is.  <br></p><p>Alternatively, (and maybe more interesting) since the compiler knows at the call site whether the function was provided regular arguments or an error to catch these two cases could be handled independently, with the body returning a value and the result of a “catching” call returning a value indicating whether the error was handled or not (or something similar).<br></p><p><br>Here is how this would look when it is applied to the motivating examples.  <br></p><p>First is a cps example using a catching closure.<br></p><p>// @exhaustive requires the catching function to catch all errors<br>func cps(then: Int -&gt; () @exhaustive catches) {<br>  if (checkSomeState) {<br>    then(42)<br>  } else {<br>    then(catch VendingMachineError.InvalidSelection)<br>  }<br>}<br></p><p>cps() { i: Int in<br>  // do some work using i<br>} catch VendingMachineError.InvalidSelection {<br>  // handle the error, i is not in scope<br>} catch VendingMachineError.OutOfStock {<br>  // handle the error, i is not in scope<br>} catch {<br>  // handle all other errors<br>}<br></p><p>Second is an example showing how this could be used to abstract over error handling logic:<br></p><p>func handler() catches {<br>catch VendingMachineError.InvalidSelection {<br>  // some common code handling InvalidSelection<br>catch VendingMachineError.OutOfStock {<br>  // some common code handling OutOfStock<br>// handle some other cases as well<br>}<br></p><p>func doSomething() {<br></p><p>  do {<br></p><p>    try someThrowingFunction()<br></p><p>  } catch handler { // compiler inserts call: handler(catch errorThatWasThrown)<br></p><p>    // not sure if a body would make sense here<br>    // if it does it would only be executed when handler actually handled the error<br></p><p>  // we only proceed to the next case if handler did not handle the error<br>  } catch VendingMachineError.InsufficientFunds(let coinsNeeded) {<br></p><p>  // we can provide arguments to the error handling logic by calling a function that returns a catching closure<br>  } catch someFunctionReturningAClosureThatCatches(arg: someValueDeterminingHowToHandleErrors)<br>  }<br></p><p>}<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/3db6dcad/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
