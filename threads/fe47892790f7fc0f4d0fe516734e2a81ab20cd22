<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February 25, 2016 at 01:00:00pm</p></header><div class="content"><p>Premise: there are multiple ways of describing control-/data-flow when a<br>function is called:<br></p><p>    func x() *-&gt; T*   // x returns a value, of type T, to the caller<br>    func x() *throws*  // x may throw an error to the caller<br>    func x() *throws -&gt; T*  // x may throw an error, and also return a value<br>    func x(...) *rethrows* ... // if a closure argument can throw an error,<br>x may also throw<br>    *@noreturn* func x()  // x never returns to the caller<br></p><p>&quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; /<br>&quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br></p><p>IMO this calls for consistency: whatever happens &quot;after&quot; the function is<br>called should appear &quot;after&quot; the parameter list.<br></p><p>    func x() *noreturn* {<br>        ...<br>    }<br></p><p><br>Thoughts?<br></p><p>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/fe47cd22/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 1:44 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Premise: there are multiple ways of describing control-/data-flow when a function is called:<br>&gt; <br>&gt;     func x() -&gt; T   // x returns a value, of type T, to the caller<br>&gt;     func x() throws  // x may throw an error to the caller<br>&gt;     func x() throws -&gt; T  // x may throw an error, and also return a value<br>&gt;     func x(...) rethrows ... // if a closure argument can throw an error, x may also throw<br>&gt;     @noreturn func x()  // x never returns to the caller<br>&gt; <br>&gt; &quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; / &quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br>&gt; <br>&gt; IMO this calls for consistency: whatever happens &quot;after&quot; the function is called should appear &quot;after&quot; the parameter list.<br>&gt; <br>&gt;     func x() noreturn {<br>&gt;         ...<br>&gt;     }<br>&gt; <br>&gt; <br>&gt; Thoughts?<br></p><p>We really don&#39;t even need a special syntactic form or attribute for &#39;no return&#39; at all. We could provide a standard unconstructible type:<br></p><p>public /*closed*/ enum NoReturn {}<br></p><p>and it would be impossible for a function that returns NoReturn to return normally.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/5084def8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 25, 2016 at 11:00:00pm</p></header><div class="content"><p>Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br></p><p>— Radek<br></p><p>&gt; On 25 Feb 2016, at 23:12, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 25, 2016, at 1:44 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Premise: there are multiple ways of describing control-/data-flow when a function is called:<br>&gt;&gt; <br>&gt;&gt;     func x() -&gt; T   // x returns a value, of type T, to the caller<br>&gt;&gt;     func x() throws  // x may throw an error to the caller<br>&gt;&gt;     func x() throws -&gt; T  // x may throw an error, and also return a value<br>&gt;&gt;     func x(...) rethrows ... // if a closure argument can throw an error, x may also throw<br>&gt;&gt;     @noreturn func x()  // x never returns to the caller<br>&gt;&gt; <br>&gt;&gt; &quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; / &quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br>&gt;&gt; <br>&gt;&gt; IMO this calls for consistency: whatever happens &quot;after&quot; the function is called should appear &quot;after&quot; the parameter list.<br>&gt;&gt; <br>&gt;&gt;     func x() noreturn {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt; <br>&gt; We really don&#39;t even need a special syntactic form or attribute for &#39;no return&#39; at all. We could provide a standard unconstructible type:<br>&gt; <br>&gt; public /*closed*/ enum NoReturn {}<br>&gt; <br>&gt; and it would be impossible for a function that returns NoReturn to return normally.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/9e4e6e54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br></p><p>There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 25, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 25 Feb 2016, at 23:40, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt; <br>&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br>&gt; <br>&gt; -Joe<br></p><p><br>The magic is somewhere else. Calling a @noreturn function allows you to do things you can’t otherwise do:<br></p><p>func foo() -&gt; Int {<br>	fatalError()<br>}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 2:43 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 23:40, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt;&gt; <br>&gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; <br>&gt; The magic is somewhere else. Calling a @noreturn function allows you to do things you can’t otherwise do:<br>&gt; <br>&gt; func foo() -&gt; Int {<br>&gt; 	fatalError()<br>&gt; }<br></p><p>I see. The unreachable code check arguably ought to also accept this if fatalError returns any uninhabited type, since it&#39;ll never be able return if that&#39;s the case.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 25, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 25 Feb 2016, at 23:47, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 2:43 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 25 Feb 2016, at 23:40, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The magic is somewhere else. Calling a @noreturn function allows you to do things you can’t otherwise do:<br>&gt;&gt; <br>&gt;&gt; func foo() -&gt; Int {<br>&gt;&gt; 	fatalError()<br>&gt;&gt; }<br>&gt; <br>&gt; I see. The unreachable code check arguably ought to also accept this if fatalError returns any uninhabited type, since it&#39;ll never be able return if that&#39;s the case.<br>&gt; <br>&gt; -Joe<br></p><p>Would that actually be useful today? (i.e. aside from your idea) To me, having a NoReturn return type seems more magic and less obvious than an attribute.<br></p><p>— Radek<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February 25, 2016 at 02:00:00pm</p></header><div class="content"><p>I also want to start a discussion (in a separate thread) about allowing<br>@noreturn functions to &quot;return&quot; any type, so that the unreachable code<br>checks can allow you to do things like &quot;let value = fatalError()&quot;. For this<br>sort of thing, I think it&#39;s nice that noreturn is not an actual uninhabited<br>type, but has special meaning w.r.t. control flow, and could in fact be<br>part of the type signature.<br></p><p>Jacob<br></p><p>On Thu, Feb 25, 2016 at 2:51 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>wrote:<br></p><p>&gt; &gt; On 25 Feb 2016, at 23:47, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Feb 25, 2016, at 2:43 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On 25 Feb 2016, at 23:40, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;<br>&gt; radexpl at gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a<br>&gt; magic type that changes how the compiler treats your method, rather than a<br>&gt; rather explicit *attribute* on the method…<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type,<br>&gt; you can&#39;t return.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Joe<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The magic is somewhere else. Calling a @noreturn function allows you to<br>&gt; do things you can’t otherwise do:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; func foo() -&gt; Int {<br>&gt; &gt;&gt;      fatalError()<br>&gt; &gt;&gt; }<br>&gt; &gt;<br>&gt; &gt; I see. The unreachable code check arguably ought to also accept this if<br>&gt; fatalError returns any uninhabited type, since it&#39;ll never be able return<br>&gt; if that&#39;s the case.<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt;<br>&gt; Would that actually be useful today? (i.e. aside from your idea) To me,<br>&gt; having a NoReturn return type seems more magic and less obvious than an<br>&gt; attribute.<br>&gt;<br>&gt; — Radek<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/99701683/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 25, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 2:51 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 23:47, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 2:43 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 25 Feb 2016, at 23:40, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The magic is somewhere else. Calling a @noreturn function allows you to do things you can’t otherwise do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo() -&gt; Int {<br>&gt;&gt;&gt; 	fatalError()<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I see. The unreachable code check arguably ought to also accept this if fatalError returns any uninhabited type, since it&#39;ll never be able return if that&#39;s the case.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; Would that actually be useful today? (i.e. aside from your idea) To me, having a NoReturn return type seems more magic and less obvious than an attribute.<br></p><p>I admit I might be hopelessly in the language implementor&#39;s bubble here. From a semantic perspective, returning any uninhabited type (it doesn&#39;t need to be a specific one) feels less magic to me than having a special attribute or syntactic form for &#39;no return&#39;, since it achieves the desired semantics without additional language features. It also composes obviously with other aspects of function types like `throws` and currying (should we decide to add it back), whereas a special form needs to explicitly describe its interaction with those features.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>February 26, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 3:07 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 25, 2016, at 2:51 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 25 Feb 2016, at 23:47, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 25, 2016, at 2:43 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 25 Feb 2016, at 23:40, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The magic is somewhere else. Calling a @noreturn function allows you to do things you can’t otherwise do:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func foo() -&gt; Int {<br>&gt;&gt;&gt;&gt; 	fatalError()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I see. The unreachable code check arguably ought to also accept this if fatalError returns any uninhabited type, since it&#39;ll never be able return if that&#39;s the case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; Would that actually be useful today? (i.e. aside from your idea) To me, having a NoReturn return type seems more magic and less obvious than an attribute.<br>&gt; <br>&gt; I admit I might be hopelessly in the language implementor&#39;s bubble here. From a semantic perspective, returning any uninhabited type (it doesn&#39;t need to be a specific one) feels less magic to me than having a special attribute or syntactic form for &#39;no return&#39;, since it achieves the desired semantics without additional language features. It also composes obviously with other aspects of function types like `throws` and currying (should we decide to add it back), whereas a special form needs to explicitly describe its interaction with those features.<br></p><p><br>This makes perfect sense to me:<br>func x() noreturn throws -&gt; T<br></p><p>It could override a function that is not noreturn.<br></p><p>But it isn’t nearly common enough to warrant a qualifying keyword. Just from a language documentation perspective I would leave @noreturn as an attribute even though it’s technically part of the type.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/89e323ca/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February 26, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Le 25 févr. 2016 à 23:40, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt; <br>&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br></p><p>Just curious about how you would implement such function if there is no compile magic ?<br></p><p>How do you tell the compiler is it not an error that your function never return while it is declared to return something ?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 26, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 11:39 PM, Jean-Daniel Dupas &lt;mailing at xenonium.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 25 févr. 2016 à 23:40, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a magic type that changes how the compiler treats your method, rather than a rather explicit *attribute* on the method…<br>&gt;&gt; <br>&gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type, you can&#39;t return.<br>&gt; <br>&gt; Just curious about how you would implement such function if there is no compile magic ?<br>&gt; <br>&gt; How do you tell the compiler is it not an error that your function never return while it is declared to return something ?<br></p><p>The compiler can tell statically that a closed, empty enum type is uninhabited, and thereby figure out that it&#39;s impossible for a function returning an uninhabited type can&#39;t possibly return.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 27, 2016 at 07:00:00am</p></header><div class="content"><p>The NoReturn type would have to be a bottom type so that a method returning<br>an X could be overridden with NoReturn. I think that would be compiler<br>magic in Swift rather than an enum you couldn&#39;t instantiate. +1 to changing<br>to a type rather than an annotation, it reads a lot better to me.<br></p><p>On Saturday, 27 February 2016, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Feb 25, 2016, at 11:39 PM, Jean-Daniel Dupas &lt;mailing at xenonium.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; Le 25 févr. 2016 à 23:40, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; a écrit :<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Feb 25, 2016, at 2:40 PM, Radosław Pietruszewski &lt;radexpl at gmail.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Ah, that’s a neat idea! Not sure it’s an improvement though to have a<br>&gt; magic type that changes how the compiler treats your method, rather than a<br>&gt; rather explicit *attribute* on the method…<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There&#39;s no magic. If you can&#39;t construct a value of your return type,<br>&gt; you can&#39;t return.<br>&gt; &gt;<br>&gt; &gt; Just curious about how you would implement such function if there is no<br>&gt; compile magic ?<br>&gt; &gt;<br>&gt; &gt; How do you tell the compiler is it not an error that your function never<br>&gt; return while it is declared to return something ?<br>&gt;<br>&gt; The compiler can tell statically that a closed, empty enum type is<br>&gt; uninhabited, and thereby figure out that it&#39;s impossible for a function<br>&gt; returning an uninhabited type can&#39;t possibly return.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/77e156f1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 25, 2016 at 11:00:00pm</p></header><div class="content"><p>The difference though is that throws/rethrows is a part of type signature, @noreturn isn’t and has no reason to be AFAICT. It’s just an attribute of the method…<br></p><p>— Radek<br></p><p>&gt; On 25 Feb 2016, at 22:44, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Premise: there are multiple ways of describing control-/data-flow when a function is called:<br>&gt; <br>&gt;     func x() -&gt; T   // x returns a value, of type T, to the caller<br>&gt;     func x() throws  // x may throw an error to the caller<br>&gt;     func x() throws -&gt; T  // x may throw an error, and also return a value<br>&gt;     func x(...) rethrows ... // if a closure argument can throw an error, x may also throw<br>&gt;     @noreturn func x()  // x never returns to the caller<br>&gt; <br>&gt; &quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; / &quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br>&gt; <br>&gt; IMO this calls for consistency: whatever happens &quot;after&quot; the function is called should appear &quot;after&quot; the parameter list.<br>&gt; <br>&gt;     func x() noreturn {<br>&gt;         ...<br>&gt;     }<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Jacob<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/ef1ae198/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 25, 2016 at 03:00:00pm</p></header><div class="content"><p>&quot;noreturn&quot; is a part of a type signature; a @noreturn method cannot be overridden by a method that isn&#39;t @noreturn*, and you could have a closure that&#39;s guaranteed to not return.<br></p><p>* This isn&#39;t true in Objective-C, but it is in Swift.<br></p><p>Jordan<br></p><p>&gt; On Feb 25, 2016, at 14:38, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The difference though is that throws/rethrows is a part of type signature, @noreturn isn’t and has no reason to be AFAICT. It’s just an attribute of the method…<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 22:44, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Premise: there are multiple ways of describing control-/data-flow when a function is called:<br>&gt;&gt; <br>&gt;&gt;     func x() -&gt; T   // x returns a value, of type T, to the caller<br>&gt;&gt;     func x() throws  // x may throw an error to the caller<br>&gt;&gt;     func x() throws -&gt; T  // x may throw an error, and also return a value<br>&gt;&gt;     func x(...) rethrows ... // if a closure argument can throw an error, x may also throw<br>&gt;&gt;     @noreturn func x()  // x never returns to the caller<br>&gt;&gt; <br>&gt;&gt; &quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; / &quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br>&gt;&gt; <br>&gt;&gt; IMO this calls for consistency: whatever happens &quot;after&quot; the function is called should appear &quot;after&quot; the parameter list.<br>&gt;&gt; <br>&gt;&gt;     func x() noreturn {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/2da58fa2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 26, 2016 at 12:00:00am</p></header><div class="content"><p>I stand corrected! In this case, I change my position.<br></p><p>`func x() noreturn { … }` isn’t that bad on a second look.<br></p><p>— Radek<br></p><p>&gt; On 26 Feb 2016, at 00:04, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; &quot;noreturn&quot; is a part of a type signature; a @noreturn method cannot be overridden by a method that isn&#39;t @noreturn*, and you could have a closure that&#39;s guaranteed to not return.<br>&gt; <br>&gt; * This isn&#39;t true in Objective-C, but it is in Swift.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 14:38, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The difference though is that throws/rethrows is a part of type signature, @noreturn isn’t and has no reason to be AFAICT. It’s just an attribute of the method…<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 25 Feb 2016, at 22:44, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Premise: there are multiple ways of describing control-/data-flow when a function is called:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func x() -&gt; T   // x returns a value, of type T, to the caller<br>&gt;&gt;&gt;     func x() throws  // x may throw an error to the caller<br>&gt;&gt;&gt;     func x() throws -&gt; T  // x may throw an error, and also return a value<br>&gt;&gt;&gt;     func x(...) rethrows ... // if a closure argument can throw an error, x may also throw<br>&gt;&gt;&gt;     @noreturn func x()  // x never returns to the caller<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; / &quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IMO this calls for consistency: whatever happens &quot;after&quot; the function is called should appear &quot;after&quot; the parameter list.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func x() noreturn {<br>&gt;&gt;&gt;         ...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/8615e540/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 25, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 1:44 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Premise: there are multiple ways of describing control-/data-flow when a function is called:<br>&gt; <br>&gt;     func x() -&gt; T   // x returns a value, of type T, to the caller<br>&gt;     func x() throws  // x may throw an error to the caller<br>&gt;     func x() throws -&gt; T  // x may throw an error, and also return a value<br>&gt;     func x(...) rethrows ... // if a closure argument can throw an error, x may also throw<br>&gt;     @noreturn func x()  // x never returns to the caller<br>&gt; <br>&gt; &quot;noreturn&quot; is currently spelled as an attribute, but like &quot;throws&quot; / &quot;rethrows&quot; / &quot;-&gt; T&quot;, it&#39;s really describing how control flow works.<br>&gt; <br>&gt; IMO this calls for consistency: whatever happens &quot;after&quot; the function is called should appear &quot;after&quot; the parameter list.<br>&gt; <br>&gt;     func x() noreturn {<br>&gt;         ...<br>&gt;     }<br>&gt; <br>&gt; <br>&gt; Thoughts?<br></p><p>This would require taking noreturn as a keyword (so we could use it in the type grammar).  @noreturn is uncommon enough to be not worth doing that IMO.  It is also non-primal to the decl it is modifying, which makes it a perfect attribute.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/075a20ba/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
