<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June  4, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of the revised proposal SE-0089: &quot;Renaming String.init&lt;T&gt;(_: T)&quot; begins now and runs through June 7. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June  4, 2016 at 01:00:00pm</p></header><div class="content"><p>(updating my evaluation of the first version of this proposal)<br></p><p><br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>+1, because:<br>  - I believe the default/generic &quot;printing&quot; initializer is not commonly<br>used (at least, not on purpose).<br>  - The new argument label clearly indicates what the initializer does.<br>  - The &quot;lossless&quot; protocol will be a welcome addition for<br>serialization/deserialization code, and it makes the replacement init(_:)<br>API very clear in its behavior.<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>Yes.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>Yes, it fits well with the API guidelines.<br></p><p><br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>N/A<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>Reviewed the initial proposal, followed and participated in the ensuing<br>discussion, and glanced at this second draft to remind myself of the final<br>changes.<br></p><p>- Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160604/9b9e84ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June  4, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 4, 2016, at 15:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;   - The &quot;lossless&quot; protocol will be a welcome addition for serialization/deserialization code, and it makes the replacement init(_:) API very clear in its behavior.<br></p><p>Speaking of which, would &quot;Serializable&quot; be a better name for the protocol? I don&#39;t recall whether anyone&#39;s already asked.<br></p><p>- Dave Sweeris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>June  5, 2016 at 03:00:00pm</p></header><div class="content"><p>The issue I think is that it would open up serialisation for all sorts of formats, which is a much larger problem in itself, whereas this can just focus on a user-defined ‘lossless’ string.<br></p><p>Patrick<br></p><p>&gt; On 5 Jun 2016, at 1:25 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 4, 2016, at 15:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;  - The &quot;lossless&quot; protocol will be a welcome addition for serialization/deserialization code, and it makes the replacement init(_:) API very clear in its behavior.<br>&gt; <br>&gt; Speaking of which, would &quot;Serializable&quot; be a better name for the protocol? I don&#39;t recall whether anyone&#39;s already asked.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June  5, 2016 at 05:00:00am</p></header><div class="content"><p>Good point<br></p><p>Sent from my iPhone<br></p><p>&gt; On Jun 5, 2016, at 00:16, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt; <br>&gt; The issue I think is that it would open up serialisation for all sorts of formats, which is a much larger problem in itself, whereas this can just focus on a user-defined ‘lossless’ string.<br>&gt; <br>&gt; Patrick<br>&gt; <br>&gt;&gt; On 5 Jun 2016, at 1:25 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 4, 2016, at 15:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - The &quot;lossless&quot; protocol will be a welcome addition for serialization/deserialization code, and it makes the replacement init(_:) API very clear in its behavior.<br>&gt;&gt; <br>&gt;&gt; Speaking of which, would &quot;Serializable&quot; be a better name for the protocol? I don&#39;t recall whether anyone&#39;s already asked.<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June  6, 2016 at 05:00:00pm</p></header><div class="content"><p>In this case not just &quot;Serializable&quot; but &quot;StringSerializable&quot;, no?<br></p><p>On 05.06.2016 6:25, David Sweeris via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jun 4, 2016, at 15:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;   - The &quot;lossless&quot; protocol will be a welcome addition for serialization/deserialization code, and it makes the replacement init(_:) API very clear in its behavior.<br>&gt;<br>&gt; Speaking of which, would &quot;Serializable&quot; be a better name for the protocol? I don&#39;t recall whether anyone&#39;s already asked.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June  6, 2016 at 05:00:00pm</p></header><div class="content"><p>The question regarding FloatingPoint.<br></p><p>Now we have:<br>var float = 1.0/3.0<br>var s = &quot;\(float)&quot;<br>print(s) // 0.333333333333333<br></p><p>What we&#39;ll have after the proposal implemented?<br></p><p>As stated in proposal: Standard library types to conform -&gt; The following <br>standard library types and protocols should be changed to conform to <br>LosslessStringConvertible -&gt; &quot;FP types should be able to conform. There are <br>algorithms that are guaranteed to turn IEEE floating point values into a <br>decimal representation in a reversible way. I don’t think we care about NaN <br>payloads, but an encoding could be created for them as well.&quot;<br></p><p>So, are we going to change what representation the float value will have as <br>result of string interpolation? If so, how to &#39;get&#39; this old plain <br>&quot;0.333333333333333&quot; ?<br></p><p>On 04.06.2016 21:24, Chris Lattner via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of the revised proposal SE-0089: &quot;Renaming String.init&lt;T&gt;(_: T)&quot; begins now and runs through June 7. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>June  6, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sat, Jun 4, 2016, at 11:24 AM, Chris Lattner via swift-evolution wrote:<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1 in general, but I still think String.init(describing:) is annoyingly long and would prefer String.init(from:).<br></p><p>Also, I&#39;m a little concerned by this bit:<br></p><p>&gt; As a performance optimization, the implementation of the string literal interpolation syntax will be changed to prefer the unlabeled initializer when interpolating a type that is LosslessStringConvertible or that otherwise has an unlabeled String initializer, but use the String.init&lt;T&gt;(describing: T) initializer if not.<br></p><p>Right now string interpolation is done via the StringInterpolationConvertible protocol, and in particular the implementation for String contains<br></p><p>  public init&lt;T&gt;(stringInterpolationSegment expr: T) {<br>    self = String(expr)<br>  }<br></p><p>This implementation could be changed to test for LosslessStringConvertible, but there&#39;s no way to test for &quot;Does String have an unlabelled initializer that accepts type T?&quot;, so the only way to implement this proposed optimization is by adding extra compiler magic.<br></p><p>I&#39;m also not convinced that this is a performance optimization at all. It seems reasonable to expect that the unlabeled initializer would basically be sugar for calling the labeled initializer (or accessing the description property directly), which means there&#39;s no performance benefit to calling the unlabeled initializer. I can&#39;t think of any good reason for a type to implement an unlabeled String initializer that&#39;s more efficient than its implementation of CustomStringConvertible or Streamable.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading of the current proposal, and I participated in the original review.<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
