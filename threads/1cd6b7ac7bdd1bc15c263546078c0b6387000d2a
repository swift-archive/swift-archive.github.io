<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>generic typealias inside generic type</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 17, 2016 at 09:00:00pm</p></header><div class="content"><p>Please consider this code:<br></p><p>struct Foo&lt;T&gt; {<br>     typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br></p><p>     func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>         return Foo&lt;Group&lt;U,V&gt;&gt;()<br>     }<br>}<br></p><p>It will not compile:<br>cannot specialize non-generic type &#39;(key: Key, group: [Value])&#39;<br></p><p>But this will work as expected:<br></p><p>typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br></p><p>struct Foo&lt;T&gt; {<br>     func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>         return Foo&lt;Group&lt;U,V&gt;&gt;()<br>     }<br>}<br></p><p>Shouldn&#39;t we be able to work with Group typealias inside Foo&lt;T&gt; without <br>problems as it has no any relationship to generic type T ? Or I&#39;m missing <br>something?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>generic typealias inside generic type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 18, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 17, 2016, at 11:06 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please consider this code:<br>&gt; <br>&gt; struct Foo&lt;T&gt; {<br>&gt;    typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br>&gt; <br>&gt;    func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>&gt;        return Foo&lt;Group&lt;U,V&gt;&gt;()<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; It will not compile:<br>&gt; cannot specialize non-generic type &#39;(key: Key, group: [Value])&#39;<br>&gt; <br>&gt; But this will work as expected:<br>&gt; <br>&gt; typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br>&gt; <br>&gt; struct Foo&lt;T&gt; {<br>&gt;    func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>&gt;        return Foo&lt;Group&lt;U,V&gt;&gt;()<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; Shouldn&#39;t we be able to work with Group typealias inside Foo&lt;T&gt; without problems as it has no any relationship to generic type T ? Or I&#39;m missing something?<br></p><p>Yes, this should work, it is a bug in the compiler.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>generic typealias inside generic type</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 20, 2016 at 02:00:00pm</p></header><div class="content"><p>On 19.06.2016 7:52, Chris Lattner wrote:<br>&gt;<br>&gt;&gt; On Jun 17, 2016, at 11:06 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Please consider this code:<br>&gt;&gt;<br>&gt;&gt; struct Foo&lt;T&gt; {<br>&gt;&gt;    typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br>&gt;&gt;<br>&gt;&gt;    func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>&gt;&gt;        return Foo&lt;Group&lt;U,V&gt;&gt;()<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; It will not compile:<br>&gt;&gt; cannot specialize non-generic type &#39;(key: Key, group: [Value])&#39;<br>&gt;&gt;<br>&gt;&gt; But this will work as expected:<br>&gt;&gt;<br>&gt;&gt; typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br>&gt;&gt;<br>&gt;&gt; struct Foo&lt;T&gt; {<br>&gt;&gt;    func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>&gt;&gt;        return Foo&lt;Group&lt;U,V&gt;&gt;()<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Shouldn&#39;t we be able to work with Group typealias inside Foo&lt;T&gt; without problems as it has no any relationship to generic type T ? Or I&#39;m missing something?<br>&gt;<br>&gt; Yes, this should work, it is a bug in the compiler.<br></p><p>Reported. SR-1832<br></p><p>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>generic typealias inside generic type</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 20, 2016 at 04:00:00pm</p></header><div class="content"><p>On 19.06.2016 7:52, Chris Lattner wrote:<br>&gt;<br>&gt;&gt; On Jun 17, 2016, at 11:06 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Please consider this code:<br>&gt;&gt;<br>&gt;&gt; struct Foo&lt;T&gt; {<br>&gt;&gt;    typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br>&gt;&gt;<br>&gt;&gt;    func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>&gt;&gt;        return Foo&lt;Group&lt;U,V&gt;&gt;()<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; It will not compile:<br>&gt;&gt; cannot specialize non-generic type &#39;(key: Key, group: [Value])&#39;<br>&gt;&gt;<br>&gt;&gt; But this will work as expected:<br>&gt;&gt;<br>&gt;&gt; typealias Group&lt;Key,Value&gt; = (key:Key, group:[Value])<br>&gt;&gt;<br>&gt;&gt; struct Foo&lt;T&gt; {<br>&gt;&gt;    func bar&lt;U,V&gt;(u: U, v: V) -&gt; Foo&lt;Group&lt;U,V&gt;&gt; {<br>&gt;&gt;        return Foo&lt;Group&lt;U,V&gt;&gt;()<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Shouldn&#39;t we be able to work with Group typealias inside Foo&lt;T&gt; without problems as it has no any relationship to generic type T ? Or I&#39;m missing something?<br>&gt;<br>&gt; Yes, this should work, it is a bug in the compiler.<br></p><p>Btw, should we be able to refer such nested type (outside the Foo <br>declaration) just as Foo.Group&lt;K,V&gt; i.e. without providing generic type for <br>Foo like Foo&lt;Int&gt;.Group&lt;K,V&gt; ?<br></p><p>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
