<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May  1, 2016 at 11:00:00am</p></header><div class="content"><p>Generally, pattern binding in `if` looks like this:<br></p><p>if case *pattern* = *expression* { ... }<br></p><p>Pattern binding for optionals is currently usable as both of:<br></p><p>if case let .some(x) = y { ... }<br>if case let x? = y { ... }<br></p><p>Now, there is also an older optional-specific hack:<br></p><p>if let x = y { ... }<br></p><p>In terms of pattern binding, it should always be true, and it&#39;s illogical<br>inside `if`.<br></p><p>I suggest:<br>1) Remove optional pattern binding<br>2) Remove `case` in `if` pattern binding<br></p><p>Really, `case` should be an attribute of `switch`, not `if`.<br></p><p>Pattern binding for optionals will look like:<br></p><p>if let x? = y { ... }<br></p><p>It will become more explicit and consistent with the rest of the language.<br></p><p>We need to hurry until Swift 3 lands!<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160501/d659d31d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May  1, 2016 at 11:00:00am</p></header><div class="content"><p>Generally I&#39;m in favor of something like this.<br></p><p>But if &quot;case&quot; is removed, doesn&#39;t that introduce an ambiguity? In an<br>admittedly contrived pathological case, you could have an &quot;=&quot; operator<br>which returns a Bool; then &quot;if .someCase = myvar&quot; would be ambiguous.<br></p><p>Jacob<br></p><p>On Sun, May 1, 2016 at 1:12 AM, Антон Жилин &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; Generally, pattern binding in `if` looks like this:<br>&gt;<br>&gt; if case *pattern* = *expression* { ... }<br>&gt;<br>&gt; Pattern binding for optionals is currently usable as both of:<br>&gt;<br>&gt; if case let .some(x) = y { ... }<br>&gt; if case let x? = y { ... }<br>&gt;<br>&gt; Now, there is also an older optional-specific hack:<br>&gt;<br>&gt; if let x = y { ... }<br>&gt;<br>&gt; In terms of pattern binding, it should always be true, and it&#39;s illogical<br>&gt; inside `if`.<br>&gt;<br>&gt; I suggest:<br>&gt; 1) Remove optional pattern binding<br>&gt; 2) Remove `case` in `if` pattern binding<br>&gt;<br>&gt; Really, `case` should be an attribute of `switch`, not `if`.<br>&gt;<br>&gt; Pattern binding for optionals will look like:<br>&gt;<br>&gt; if let x? = y { ... }<br>&gt;<br>&gt; It will become more explicit and consistent with the rest of the language.<br>&gt;<br>&gt; We need to hurry until Swift 3 lands!<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160501/8b967d56/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Pattern binding for optionals will look like:<br>&gt; <br>&gt; if let x? = y { ... }<br></p><p>I suggested precisely this in February. The core team shot it down:<br></p><p>&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br></p><p><br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br></p><p>Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt; <br>&gt;&gt; if let x? = y { ... }<br>&gt; <br>&gt; I suggested precisely this in February. The core team shot it down:<br>&gt; <br>&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt; <br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt; <br>&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br></p><p>Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br></p><p>(I’m not actually core team, but I was around for the experiment.)<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May  2, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let x? = y { ... }<br>&gt;&gt; <br>&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt;&gt; <br>&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt;&gt; <br>&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt; <br>&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br></p><p>Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 11:00:00am</p></header><div class="content"><p>On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt;&gt; <br>&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br>&gt; <br>&gt; Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br></p><p>I understand that you (and probably a ton of other people on this list) feel that way, but I disagree pretty strongly.  I think we have the right design here.<br></p><p>Context: As was mentioned up-thread, in the Swift 2 development cycle, we significantly extended pattern matching (this is when we added ‘if case’, etc).  One of the things we implemented - but then backed out - was exactly the proposal above. We did this because we found it to be the *wrong* thing to do.<br></p><p>The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br></p><p>Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br></p><p>Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May  2, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 11:47 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br>&gt;&gt; <br>&gt;&gt; Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br>&gt; <br>&gt; I understand that you (and probably a ton of other people on this list) feel that way, but I disagree pretty strongly.  I think we have the right design here.<br>&gt; <br>&gt; Context: As was mentioned up-thread, in the Swift 2 development cycle, we significantly extended pattern matching (this is when we added ‘if case’, etc).  One of the things we implemented - but then backed out - was exactly the proposal above. We did this because we found it to be the *wrong* thing to do.<br>&gt; <br>&gt; The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br>&gt; <br>&gt; Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br>&gt; <br>&gt; Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br></p><p>I understand what you&#39;re saying here, but I don&#39;t think your conclusions follow.  You wouldn&#39;t teach &quot;if let x? = whatever&quot; as an aspect of a generic pattern-matching feature just because &quot;x?&quot; happens to be a pattern.  You would still introduce it as magic for dealing with optionals, and the syntax would nicely reinforce a general impression that &quot;? is how I deal with optionals&quot;.  Instead, it feels more magical because nothing about the syntax suggests optionals; it&#39;s just something you have to know.<br></p><p>Meanwhile the &quot;if let&quot; syntax has proven to compose poorly, and in particular it makes compound conditions unnecessarily limited/awkward because you can&#39;t bind a non-optional value and then test something about it without doing something like &quot;if let x = Optional(whatever) where x.isBeautiful&quot;.<br></p><p>Anyway, like I said, I don&#39;t think it&#39;s something we can change.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May  2, 2016 at 10:00:00pm</p></header><div class="content"><p>I absolutely agree with John, and I think, we should push this through<br>evolution process.<br></p><p>That old voting wasn&#39;t public, or &quot;official&quot;.<br>I insist that we decide this via a formal review. Even if it means that the<br>proposal will be explicitly rejected.<br></p><p>- Anton<br></p><p>2016-05-02 22:07 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br></p><p>&gt; &gt; On May 2, 2016, at 11:47 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt; On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are<br>&gt; unwrapped too often for people to be comfortable writing &quot;if let name? =<br>&gt; optionalCondition&quot;.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but<br>&gt; they&#39;re the ones with implementation experience; all I have is an elegant<br>&gt; idea.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add<br>&gt; it to the frequently-suggested list.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once<br>&gt; we made it, it was really hard to back out.<br>&gt; &gt;<br>&gt; &gt; I understand that you (and probably a ton of other people on this list)<br>&gt; feel that way, but I disagree pretty strongly.  I think we have the right<br>&gt; design here.<br>&gt; &gt;<br>&gt; &gt; Context: As was mentioned up-thread, in the Swift 2 development cycle,<br>&gt; we significantly extended pattern matching (this is when we added ‘if<br>&gt; case’, etc).  One of the things we implemented - but then backed out - was<br>&gt; exactly the proposal above. We did this because we found it to be the<br>&gt; *wrong* thing to do.<br>&gt; &gt;<br>&gt; &gt; The reason is simple: most developers don’t grok pattern matching.<br>&gt; Particularly for people new to swift, “if let” is taught as a magic for<br>&gt; dealing with optionals (which it is). This is a very useful mechanic when<br>&gt; working in Swift, and this way of thinking is fine.  Optionals are very<br>&gt; prominent, and having special sugar for dealing with them is important,<br>&gt; even as people grow to become swift experts in time.<br>&gt; &gt;<br>&gt; &gt; Going with the proposal would definitely simplify the language (&#39;if<br>&gt; case’ could probably go away), but would force everyone, all the time, to<br>&gt; think about pattern matching.  This would be a barrier to entry that many<br>&gt; programmers should never have to face.  The fact that many people don’t<br>&gt; think about things in terms of pattern matching is the root cause for the<br>&gt; comments about “it seems weird that the question mark is on the LHS of the<br>&gt; assignment”.<br>&gt; &gt;<br>&gt; &gt; Finally, some may argue that making pattern matching more prominent<br>&gt; would help teach pattern matching and get more people to use it.  That may<br>&gt; be true, but our goal here is to build a pragmatic language that helps<br>&gt; people get things done, not push to one specific language feature.  I<br>&gt; personally love pattern matching (and was the one who drove and implemented<br>&gt; the Swift 2 pattern matching enhancements), but it is an esoteric and<br>&gt; special case feature.  It makes sense for it to be “buried” under “if<br>&gt; case”: those who are unfamiliar with the syntax have something they can<br>&gt; google for.<br>&gt;<br>&gt; I understand what you&#39;re saying here, but I don&#39;t think your conclusions<br>&gt; follow.  You wouldn&#39;t teach &quot;if let x? = whatever&quot; as an aspect of a<br>&gt; generic pattern-matching feature just because &quot;x?&quot; happens to be a<br>&gt; pattern.  You would still introduce it as magic for dealing with optionals,<br>&gt; and the syntax would nicely reinforce a general impression that &quot;? is how I<br>&gt; deal with optionals&quot;.  Instead, it feels more magical because nothing about<br>&gt; the syntax suggests optionals; it&#39;s just something you have to know.<br>&gt;<br>&gt; Meanwhile the &quot;if let&quot; syntax has proven to compose poorly, and in<br>&gt; particular it makes compound conditions unnecessarily limited/awkward<br>&gt; because you can&#39;t bind a non-optional value and then test something about<br>&gt; it without doing something like &quot;if let x = Optional(whatever) where<br>&gt; x.isBeautiful&quot;.<br>&gt;<br>&gt; Anyway, like I said, I don&#39;t think it&#39;s something we can change.<br>&gt;<br>&gt; John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/6be92051/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 12:13 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; I absolutely agree with John, and I think, we should push this through evolution process.<br>&gt; <br>&gt; That old voting wasn&#39;t public, or &quot;official&quot;.<br>&gt; I insist that we decide this via a formal review. Even if it means that the proposal will be explicitly rejected.<br></p><p>You are welcome to submit an evolution proposal.  If we think it&#39;s in good shape, we&#39;ll put it through review.<br></p><p>However, it not a goal of the evolution process to retroactively approve the entire language design.  Just because a decision was made before the public evolution process started doesn&#39;t mean the decision is unofficial or illegitimate.<br></p><p>John.<br></p><p>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-02 22:07 GMT+03:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt; &gt; On May 2, 2016, at 11:47 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; &gt; On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br>&gt; &gt;<br>&gt; &gt; I understand that you (and probably a ton of other people on this list) feel that way, but I disagree pretty strongly.  I think we have the right design here.<br>&gt; &gt;<br>&gt; &gt; Context: As was mentioned up-thread, in the Swift 2 development cycle, we significantly extended pattern matching (this is when we added ‘if case’, etc).  One of the things we implemented - but then backed out - was exactly the proposal above. We did this because we found it to be the *wrong* thing to do.<br>&gt; &gt;<br>&gt; &gt; The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br>&gt; &gt;<br>&gt; &gt; Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br>&gt; &gt;<br>&gt; &gt; Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br>&gt; <br>&gt; I understand what you&#39;re saying here, but I don&#39;t think your conclusions follow.  You wouldn&#39;t teach &quot;if let x? = whatever&quot; as an aspect of a generic pattern-matching feature just because &quot;x?&quot; happens to be a pattern.  You would still introduce it as magic for dealing with optionals, and the syntax would nicely reinforce a general impression that &quot;? is how I deal with optionals&quot;.  Instead, it feels more magical because nothing about the syntax suggests optionals; it&#39;s just something you have to know.<br>&gt; <br>&gt; Meanwhile the &quot;if let&quot; syntax has proven to compose poorly, and in particular it makes compound conditions unnecessarily limited/awkward because you can&#39;t bind a non-optional value and then test something about it without doing something like &quot;if let x = Optional(whatever) where x.isBeautiful&quot;.<br>&gt; <br>&gt; Anyway, like I said, I don&#39;t think it&#39;s something we can change.<br>&gt; <br>&gt; John.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/d748bc42/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 1:19 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On May 2, 2016, at 12:13 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt; I absolutely agree with John, and I think, we should push this through evolution process.<br>&gt;&gt; <br>&gt;&gt; That old voting wasn&#39;t public, or &quot;official&quot;.<br>&gt;&gt; I insist that we decide this via a formal review. Even if it means that the proposal will be explicitly rejected.<br>&gt; <br>&gt; You are welcome to submit an evolution proposal.  If we think it&#39;s in good shape, we&#39;ll put it through review.<br></p><p>Unless there is some “new information”, I don’t see any reason to waste the communities time on this.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/89a2e0f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 2:35 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; On May 2, 2016, at 1:19 PM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 2, 2016, at 12:13 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; I absolutely agree with John, and I think, we should push this through evolution process.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That old voting wasn&#39;t public, or &quot;official&quot;.<br>&gt;&gt;&gt; I insist that we decide this via a formal review. Even if it means that the proposal will be explicitly rejected.<br>&gt;&gt; <br>&gt;&gt; You are welcome to submit an evolution proposal.  If we think it&#39;s in good shape, we&#39;ll put it through review.<br>&gt; <br>&gt; Unless there is some “new information”, I don’t see any reason to waste the communities time on this.<br></p><p>Fair enough.<br></p><p>John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/c388b1b1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 11:00:00pm</p></header><div class="content"><p>John,<br></p><p>When the core team implemented the `if let x? = y` experiment and later backtracked, were you enthusiastic about it? The way Jordan puts it &quot;Yeah, as nice as it sounds, it didn’t work out in practice.” sounds very definite, as if it was an obvious and unanimous decision to backtrack.<br></p><p>I think I’m more of Chris’ opinion, but I’d like to understand your point of view better.<br></p><p>David.<br></p><p>&gt; On 02 May 2016, at 21:07, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On May 2, 2016, at 11:47 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br>&gt;&gt; <br>&gt;&gt; I understand that you (and probably a ton of other people on this list) feel that way, but I disagree pretty strongly.  I think we have the right design here.<br>&gt;&gt; <br>&gt;&gt; Context: As was mentioned up-thread, in the Swift 2 development cycle, we significantly extended pattern matching (this is when we added ‘if case’, etc).  One of the things we implemented - but then backed out - was exactly the proposal above. We did this because we found it to be the *wrong* thing to do.<br>&gt;&gt; <br>&gt;&gt; The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br>&gt;&gt; <br>&gt;&gt; Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br>&gt;&gt; <br>&gt;&gt; Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br>&gt; <br>&gt; I understand what you&#39;re saying here, but I don&#39;t think your conclusions follow.  You wouldn&#39;t teach &quot;if let x? = whatever&quot; as an aspect of a generic pattern-matching feature just because &quot;x?&quot; happens to be a pattern.  You would still introduce it as magic for dealing with optionals, and the syntax would nicely reinforce a general impression that &quot;? is how I deal with optionals&quot;.  Instead, it feels more magical because nothing about the syntax suggests optionals; it&#39;s just something you have to know.<br>&gt; <br>&gt; Meanwhile the &quot;if let&quot; syntax has proven to compose poorly, and in particular it makes compound conditions unnecessarily limited/awkward because you can&#39;t bind a non-optional value and then test something about it without doing something like &quot;if let x = Optional(whatever) where x.isBeautiful&quot;.<br>&gt; <br>&gt; Anyway, like I said, I don&#39;t think it&#39;s something we can change.<br>&gt; <br>&gt; John.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 2:17 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; John,<br>&gt; <br>&gt; When the core team implemented the `if let x? = y` experiment and later backtracked, were you enthusiastic about it? The way Jordan puts it &quot;Yeah, as nice as it sounds, it didn’t work out in practice.” sounds very definite, as if it was an obvious and unanimous decision to backtrack.<br></p><p>I wouldn&#39;t say it &quot;didn&#39;t work out in practice.&quot;  It&#39;s not like we ran into some design/implementation hurdle that we weren&#39;t expecting.  We had adopters who were annoyed at having to make a pervasive change by hand that they felt wasn&#39;t an improvement.  I felt then (and continue to feel) that it would have been fine if we had spelled it with a question mark to begin with; but since we didn&#39;t, it was seen as a pointless regression in the amount of punctuation in Swift code, which was a very sensitive topic at the time.<br></p><p>And you know, that&#39;s okay.  Language design is design, not art; our goal here is to make a great tool that helps people, not to make a perfect self-consistent expression of an idea.  If we can do both, wonderful, but if we can&#39;t, well, it&#39;s pretty nice to have users.<br></p><p>John.<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>May  2, 2016 at 09:00:00pm</p></header><div class="content"><p>Question coming of a pure curiosity, although somewhat related: isn’t the fact that the Optional is an enum just an implementation detail? I thought this was the case.<br></p><p>From this perspective `if let value = optional` is and will stay an optional-only syntax regardless of the implementation. `if case let .some(value) = optional` is just a special case of applying the pattern matching, which is related to the Optional type only via the current implementation.<br></p><p><br>Cheers,<br>Krzysztof<br></p><p>On 2 May 2016 at 20:47:49, Chris Lattner via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;  <br>&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt;&gt;  <br>&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br>&gt;  <br>&gt; Yeah. My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br></p><p>I understand that you (and probably a ton of other people on this list) feel that way, but I disagree pretty strongly. I think we have the right design here.<br></p><p>Context: As was mentioned up-thread, in the Swift 2 development cycle, we significantly extended pattern matching (this is when we added ‘if case’, etc). One of the things we implemented - but then backed out - was exactly the proposal above. We did this because we found it to be the *wrong* thing to do.<br></p><p>The reason is simple: most developers don’t grok pattern matching. Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine. Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br></p><p>Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching. This would be a barrier to entry that many programmers should never have to face. The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br></p><p>Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it. That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature. I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature. It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br></p><p>-Chris<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/ea6788d5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May  2, 2016 at 09:00:00pm</p></header><div class="content"><p>I totally agree with you. I think there are many things that are really well-designed in Swift 2 currently, and most things should stay the way they are. I felt that it is really easy to learn (compared to other languages like, e.g. Perl or Haskell at least) and that the code usually works as expected, without great surprises. (But I cannot write a proposal, listing all the stuff from Swift 2.2 that I want to remain unchanged, can I? ;-)<br></p><p>I think using a programming language shouldn&#39;t be an intelligence test as there are already enough ways that intelligent people can prove their abilities. Anyways, I like Haskell much, although it is much more complicated, because I think that it is also very powerful. But writing `if let x? = y` instead of `if let x = y` doesn&#39;t seem to make Swift any more powerful than it already is. And since there is already an `if case` if you really want to do pattern matching (I didn&#39;t know that), I think there is even less reason to change the `if let` construct. It also optimizes my mental code parsing speed if I can hard-wire the fact that `if let` and `guard let` relates to optional binding.<br></p><p>just my 2 cents<br></p><p>-Michael<br></p><p>&gt; Am 02.05.2016 um 20:47 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; On May 2, 2016, at 11:12 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 2, 2016, at 9:39 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 1, 2016, at 13:09, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if let x? = y { ... }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I suggested precisely this in February. The core team shot it down:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We tried this* and got a lot of negative feedback. Optionals are unwrapped too often for people to be comfortable writing &quot;if let name? = optionalCondition&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160201/008964.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having said that, this still seems like a good idea to me, but they&#39;re the ones with implementation experience; all I have is an elegant idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, as nice as it sounds, it didn’t work out in practice. I’ll add it to the frequently-suggested list.<br>&gt;&gt; <br>&gt;&gt; Yeah.  My take on it is that &#39;if let&#39; was probably a mistake, but once we made it, it was really hard to back out.<br>&gt; <br>&gt; I understand that you (and probably a ton of other people on this list) feel that way, but I disagree pretty strongly.  I think we have the right design here.<br>&gt; <br>&gt; Context: As was mentioned up-thread, in the Swift 2 development cycle, we significantly extended pattern matching (this is when we added ‘if case’, etc).  One of the things we implemented - but then backed out - was exactly the proposal above. We did this because we found it to be the *wrong* thing to do.<br>&gt; <br>&gt; The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br>&gt; <br>&gt; Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br>&gt; <br>&gt; Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br>&gt; <br>&gt; Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br>&gt; <br>&gt; Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br>&gt; <br>My issue is that while one needs to have a special behavior in this case to combine conditional logic and variable assignment, the current shorthand is nonintuitive/inconsistent. The current syntax makes it look like you are saying “let y=x”, and that now assignment has different behaviors if you are inside or outside a conditional. Why does assignment sometime cast off optionality?<br></p><p>let x:Optional = 1 // x: Int? = 1<br></p><p>if let y = x { <br>     print(y.dynamicType) // Int<br>} <br>let y = x<br>print(y.dynamicType) // Optional&lt;Int&gt;<br></p><p>If there were a syntax like “if let y = some x”, then it would be clear that there is more to this statement than an assignment, it would make it clearer why you can’t cast off optionality on other assignments, as well as possibly being a segue to learning about full pattern matching.<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/a46c4dde/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 1:08 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The reason is simple: most developers don’t grok pattern matching.  Particularly for people new to swift, “if let” is taught as a magic for dealing with optionals (which it is). This is a very useful mechanic when working in Swift, and this way of thinking is fine.  Optionals are very prominent, and having special sugar for dealing with them is important, even as people grow to become swift experts in time.<br>&gt;&gt; <br>&gt;&gt; Going with the proposal would definitely simplify the language (&#39;if case’ could probably go away), but would force everyone, all the time, to think about pattern matching.  This would be a barrier to entry that many programmers should never have to face.  The fact that many people don’t think about things in terms of pattern matching is the root cause for the comments about “it seems weird that the question mark is on the LHS of the assignment”.<br>&gt;&gt; <br>&gt;&gt; Finally, some may argue that making pattern matching more prominent would help teach pattern matching and get more people to use it.  That may be true, but our goal here is to build a pragmatic language that helps people get things done, not push to one specific language feature.  I personally love pattern matching (and was the one who drove and implemented the Swift 2 pattern matching enhancements), but it is an esoteric and special case feature.  It makes sense for it to be “buried” under “if case”: those who are unfamiliar with the syntax have something they can google for.<br>&gt;&gt; <br>&gt; My issue is that while one needs to have a special behavior in this case to combine conditional logic and variable assignment, the current shorthand is nonintuitive/inconsistent. The current syntax makes it look like you are saying “let y=x”, and that now assignment has different behaviors if you are inside or outside a conditional. Why does assignment sometime cast off optionality?<br>&gt; <br>&gt; let x:Optional = 1 // x: Int? = 1<br>&gt; <br>&gt; if let y = x { <br>&gt;      print(y.dynamicType) // Int<br>&gt; } <br>&gt; let y = x<br>&gt; print(y.dynamicType) // Optional&lt;Int&gt;<br>&gt; <br>&gt; If there were a syntax like “if let y = some x”, then it would be clear that there is more to this statement than an assignment, it would make it clearer why you can’t cast off optionality on other assignments, as well as possibly being a segue to learning about full pattern matching.<br>&gt; <br>&gt; -DW<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>This to me is the most bizarre thing about the if-let construct. Elsewhere in the language ? indicates conditional unwrapping.<br></p><p>This would make more sense to me:<br></p><p>if let y = x? { <br>     print(y.dynamicType) // Int<br>} <br></p><p>My issue with the proposed pattern matching syntax is that it looks like assignment, which I think confuses people. This is one thing that the current case syntax helps to mitigate.<br></p><p>if let y? = x { <br>     print(y.dynamicType) // Int<br>}<br></p><p>Not that I’m suggesting this exactly, but the for-loop syntax works well. Maybe there is a more clear pattern matching syntax?<br></p><p>if let y? in x { <br>     print(y.dynamicType) // Int<br>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/aa0bd5d3/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May  2, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 1 May 2016, at 09:12, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Pattern binding for optionals will look like:<br>&gt; <br>&gt; if let x? = y { … }<br></p><p>Would take a little getting used to, but I think I’d be fine with it, as the way things are now is inconsistent with regular assignments (which remain optional).<br></p><p>My only concern is why the question mark on the left hand side? I don’t really have any concrete reason against it, but it just feels kind of odd to me, I’m just hoping for some reasoning why some of the alternatives aren’t better fits like:<br></p><p>	if let x = y? { … } // More like optional chaining, which is familiar as an “if non-nil proceed” behaviour<br>	if let x ?= y { … } // More obviously a special type of assignment that could fail if y is nil<br></p><p>Again, I’m in favour, I’m just curious why the mentioned format, were others considered previously, or is just because that’s how the case-keyword form does it? (I don’t use it as I’ve never liked that form, and it doesn’t seem that well known anyway).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/50d2cc56/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Currently,<br></p><p>if case let x? = y { ... }<br></p><p>is a sugared version of:<br></p><p>if case let .some(x) = y { ... }<br></p><p>which is in turn a sugared version of:<br></p><p>if case .some(let x) = y { ... }<br></p><p>Pattern matching in `if` works like this: left hand side of `=` contains<br>supposed structure of value at right hand side.<br>If we omit `case`, we get:<br></p><p>if let x? = y { ... }<br></p><p>Another example: checks if tuple contains two `.some`:<br></p><p>if let (x?, y?) = z { ... }<br></p><p>- Anton<br></p><p>2016-05-02 13:25 GMT+03:00 Haravikk &lt;swift-evolution at haravikk.me&gt;:<br></p><p>&gt;<br>&gt; On 1 May 2016, at 09:12, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;<br>&gt; Pattern binding for optionals will look like:<br>&gt;<br>&gt; if let x? = y { … }<br>&gt;<br>&gt;<br>&gt; Would take a little getting used to, but I think I’d be fine with it, as<br>&gt; the way things are now is inconsistent with regular assignments (which<br>&gt; remain optional).<br>&gt;<br>&gt; My only concern is why the question mark on the left hand side? I don’t<br>&gt; really have any concrete reason against it, but it just feels kind of odd<br>&gt; to me, I’m just hoping for some reasoning why some of the alternatives<br>&gt; aren’t better fits like:<br>&gt;<br>&gt; if let x = y? { … } // More like optional chaining, which is familiar as<br>&gt; an “if non-nil proceed” behaviour<br>&gt; if let x ?= y { … } // More obviously a special type of assignment that<br>&gt; could fail if y is nil<br>&gt;<br>&gt; Again, I’m in favour, I’m just curious why the mentioned format, were<br>&gt; others considered previously, or is just because that’s how the<br>&gt; case-keyword form does it? (I don’t use it as I’ve never liked that form,<br>&gt; and it doesn’t seem that well known anyway).<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/fe43b5a0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Idea] Remove optional pattern binding</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Ah, I’m just thinking about it in terms of too narrow a case, that makes sense! Put me down as a +1 for the change and solution then.<br></p><p>&gt; On 2 May 2016, at 11:56, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Currently,<br>&gt; <br>&gt; if case let x? = y { ... }<br>&gt; <br>&gt; is a sugared version of:<br>&gt; <br>&gt; if case let .some(x) = y { ... }<br>&gt; <br>&gt; which is in turn a sugared version of:<br>&gt; <br>&gt; if case .some(let x) = y { ... }<br>&gt; <br>&gt; Pattern matching in `if` works like this: left hand side of `=` contains supposed structure of value at right hand side.<br>&gt; If we omit `case`, we get:<br>&gt; <br>&gt; if let x? = y { ... }<br>&gt; <br>&gt; Another example: checks if tuple contains two `.some`:<br>&gt; <br>&gt; if let (x?, y?) = z { ... }<br>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-02 13:25 GMT+03:00 Haravikk &lt;swift-evolution at haravikk.me &lt;mailto:swift-evolution at haravikk.me&gt;&gt;:<br>&gt; <br>&gt;&gt; On 1 May 2016, at 09:12, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Pattern binding for optionals will look like:<br>&gt;&gt; <br>&gt;&gt; if let x? = y { … }<br>&gt; <br>&gt; Would take a little getting used to, but I think I’d be fine with it, as the way things are now is inconsistent with regular assignments (which remain optional).<br>&gt; <br>&gt; My only concern is why the question mark on the left hand side? I don’t really have any concrete reason against it, but it just feels kind of odd to me, I’m just hoping for some reasoning why some of the alternatives aren’t better fits like:<br>&gt; <br>&gt; 	if let x = y? { … } // More like optional chaining, which is familiar as an “if non-nil proceed” behaviour<br>&gt; 	if let x ?= y { … } // More obviously a special type of assignment that could fail if y is nil<br>&gt; <br>&gt; Again, I’m in favour, I’m just curious why the mentioned format, were others considered previously, or is just because that’s how the case-keyword form does it? (I don’t use it as I’ve never liked that form, and it doesn’t seem that well known anyway).<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/f0031980/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
