<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Selector for current method</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>November 14, 2016 at 12:00:00am</p></header><div class="content"><p>Hi there!<br></p><p>in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br></p><p>Example:<br></p><p>class DirectoryListingStub: DirectoryListing {<br></p><p>    var cannedOutput: [Selector: Any?] = [<br>        #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>    ]<br></p><p>    dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>        let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>        return cannedOutput[selector] as!  [URL]<br>    }<br></p><p>}<br></p><p>Problem: I had to specify #selector twice.<br></p><p>I though I’d be able to use #function but:<br></p><p>#selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>#function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br></p><p>It’d be great if #selector (without arguments) returned the current selector.<br></p><p>Or am I missing something?<br></p><p>R+<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Selector for current method</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>November 13, 2016 at 07:00:00pm</p></header><div class="content"><p>NSSelectorFromString(#function) works just fine for this already.<br></p><p>&gt; On Nov 13, 2016, at 6:50 PM, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there!<br>&gt; <br>&gt; in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; class DirectoryListingStub: DirectoryListing {<br>&gt; <br>&gt;    var cannedOutput: [Selector: Any?] = [<br>&gt;        #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;    ]<br>&gt; <br>&gt;    dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;        let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>&gt;        return cannedOutput[selector] as!  [URL]<br>&gt;    }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; Problem: I had to specify #selector twice.<br>&gt; <br>&gt; I though I’d be able to use #function but:<br>&gt; <br>&gt; #selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>&gt; #function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br>&gt; <br>&gt; It’d be great if #selector (without arguments) returned the current selector.<br>&gt; <br>&gt; Or am I missing something?<br>&gt; <br>&gt; R+<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Selector for current method</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>November 14, 2016 at 10:00:00am</p></header><div class="content"><p>On 14 Nov 2016, at 01:01, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; NSSelectorFromString(#function) works just fine for this already.<br></p><p>Hi Robert,<br></p><p>it doesn’t work.<br></p><p>NSSelectorFromString(#function)<br>… returns &quot;contentsOfDirectory(at:includingPropertiesForKeys:options:)&quot;<br></p><p>#selector(DirectoryListingMock.contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>… returns &quot;contentsOfDirectoryAt:includingPropertiesForKeys:options:error:&quot;<br></p><p>In other words, &quot;NSSelectorFromString(#function)” returns Swift function name, not selector like _cmd or #selector does.<br></p><p>R+<br></p><p>&gt; <br>&gt;&gt; On Nov 13, 2016, at 6:50 PM, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi there!<br>&gt;&gt; <br>&gt;&gt; in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br>&gt;&gt; <br>&gt;&gt; Example:<br>&gt;&gt; <br>&gt;&gt; class DirectoryListingStub: DirectoryListing {<br>&gt;&gt; <br>&gt;&gt;   var cannedOutput: [Selector: Any?] = [<br>&gt;&gt;       #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;&gt;   ]<br>&gt;&gt; <br>&gt;&gt;   dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;&gt;       let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>&gt;&gt;       return cannedOutput[selector] as!  [URL]<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Problem: I had to specify #selector twice.<br>&gt;&gt; <br>&gt;&gt; I though I’d be able to use #function but:<br>&gt;&gt; <br>&gt;&gt; #selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>&gt;&gt; #function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br>&gt;&gt; <br>&gt;&gt; It’d be great if #selector (without arguments) returned the current selector.<br>&gt;&gt; <br>&gt;&gt; Or am I missing something?<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Selector for current method</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November 14, 2016 at 11:00:00am</p></header><div class="content"><p>This doesn’t seem unreasonable, but I’m not sure if that makes it reasonable. :-) What’s your use case? The stripped-down code seems like it could use any unique key, including #function.<br></p><p>Jordan<br></p><p><br>&gt; On Nov 13, 2016, at 15:50, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there!<br>&gt; <br>&gt; in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; class DirectoryListingStub: DirectoryListing {<br>&gt; <br>&gt;    var cannedOutput: [Selector: Any?] = [<br>&gt;        #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;    ]<br>&gt; <br>&gt;    dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;        let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>&gt;        return cannedOutput[selector] as!  [URL]<br>&gt;    }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; Problem: I had to specify #selector twice.<br>&gt; <br>&gt; I though I’d be able to use #function but:<br>&gt; <br>&gt; #selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>&gt; #function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br>&gt; <br>&gt; It’d be great if #selector (without arguments) returned the current selector.<br>&gt; <br>&gt; Or am I missing something?<br>&gt; <br>&gt; R+<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Selector for current method</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>November 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Jordan,<br></p><p>&gt; The stripped-down code seems like it could use any unique key, including #function.<br></p><p><br>That would work only if #function could be used with an argument just like #selector:<br></p><p>class DirectoryListingStub: DirectoryListing {<br></p><p>   var cannedOutput: [Selector: Any?] = [<br>       #function(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>   ]<br></p><p>   func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>       return cannedOutput[#function] as! [URL]<br>   }<br></p><p>}<br></p><p>Obviously, this doesn’t work as #function takes no arguments.<br></p><p>There&#39;s no way to get #selector for the current method. And there’s no way to get #function for arbitrary method.<br></p><p>R+<br></p><p>&gt; On 14 Nov 2016, at 20:07, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; This doesn’t seem unreasonable, but I’m not sure if that makes it reasonable. :-) What’s your use case? The stripped-down code seems like it could use any unique key, including #function.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Nov 13, 2016, at 15:50, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi there!<br>&gt;&gt; <br>&gt;&gt; in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br>&gt;&gt; <br>&gt;&gt; Example:<br>&gt;&gt; <br>&gt;&gt; class DirectoryListingStub: DirectoryListing {<br>&gt;&gt; <br>&gt;&gt;   var cannedOutput: [Selector: Any?] = [<br>&gt;&gt;       #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;&gt;   ]<br>&gt;&gt; <br>&gt;&gt;   dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;&gt;       let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>&gt;&gt;       return cannedOutput[selector] as!  [URL]<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Problem: I had to specify #selector twice.<br>&gt;&gt; <br>&gt;&gt; I though I’d be able to use #function but:<br>&gt;&gt; <br>&gt;&gt; #selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>&gt;&gt; #function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br>&gt;&gt; <br>&gt;&gt; It’d be great if #selector (without arguments) returned the current selector.<br>&gt;&gt; <br>&gt;&gt; Or am I missing something?<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Selector for current method</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November 15, 2016 at 09:00:00am</p></header><div class="content"><p>Sorry, I see that #function doesn’t work as a drop-in replacement for #selector. What I’m wondering is what you’re actually using this all for. It seems rare to have a dictionary keyed by the name of a function (but not its arguments) and rarer still to need to prepopulate that dictionary. The only use case I can think of is some generalized mock object, but even then I wonder how useful it is in practice.<br></p><p>(Per the original request, remember too that many Swift methods do not have selectors, since they are not exposed to Objective-C.)<br></p><p>Jordan<br></p><p><br>&gt; On Nov 15, 2016, at 03:47, Rudolf Adamkovič &lt;salutis at me.com&gt; wrote:<br>&gt; <br>&gt; Hi Jordan,<br>&gt; <br>&gt;&gt; The stripped-down code seems like it could use any unique key, including #function.<br>&gt; <br>&gt; <br>&gt; That would work only if #function could be used with an argument just like #selector:<br>&gt; <br>&gt; class DirectoryListingStub: DirectoryListing {<br>&gt; <br>&gt;   var cannedOutput: [Selector: Any?] = [<br>&gt;       #function(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;   ]<br>&gt; <br>&gt;   func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;       return cannedOutput[#function] as! [URL]<br>&gt;   }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; Obviously, this doesn’t work as #function takes no arguments.<br>&gt; <br>&gt; There&#39;s no way to get #selector for the current method. And there’s no way to get #function for arbitrary method.<br>&gt; <br>&gt; R+<br>&gt; <br>&gt;&gt; On 14 Nov 2016, at 20:07, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This doesn’t seem unreasonable, but I’m not sure if that makes it reasonable. :-) What’s your use case? The stripped-down code seems like it could use any unique key, including #function.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 13, 2016, at 15:50, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi there!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class DirectoryListingStub: DirectoryListing {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  var cannedOutput: [Selector: Any?] = [<br>&gt;&gt;&gt;      #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;&gt;&gt;  ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;&gt;&gt;      let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>&gt;&gt;&gt;      return cannedOutput[selector] as!  [URL]<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Problem: I had to specify #selector twice.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I though I’d be able to use #function but:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>&gt;&gt;&gt; #function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’d be great if #selector (without arguments) returned the current selector.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or am I missing something?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; R+<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161115/2f5b86b9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Selector for current method</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>November 16, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; What I’m wondering is what you’re actually using this all for.<br></p><p><br>For example, when testing with Quick (popular testing framework), one can describe a function:<br></p><p>describe(“player.play()”) {<br>    ...<br>}<br></p><p>If #function worked like #selector, we could do:<br></p><p>describe(#function(Player.play())) {<br>    ...<br>}<br></p><p>This would be safe and refactoring friendly.<br></p><p>P.S. I could do this with #selector but that would require @objc/dynamic which is not ideal.<br></p><p>R+<br></p><p>&gt; On 15 Nov 2016, at 18:02, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Sorry, I see that #function doesn’t work as a drop-in replacement for #selector. What I’m wondering is what you’re actually using this all for. It seems rare to have a dictionary keyed by the name of a function (but not its arguments) and rarer still to need to prepopulate that dictionary. The only use case I can think of is some generalized mock object, but even then I wonder how useful it is in practice.<br>&gt; <br>&gt; (Per the original request, remember too that many Swift methods do not have selectors, since they are not exposed to Objective-C.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Nov 15, 2016, at 03:47, Rudolf Adamkovič &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Jordan,<br>&gt;&gt; <br>&gt;&gt;&gt; The stripped-down code seems like it could use any unique key, including #function.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That would work only if #function could be used with an argument just like #selector:<br>&gt;&gt; <br>&gt;&gt; class DirectoryListingStub: DirectoryListing {<br>&gt;&gt; <br>&gt;&gt;   var cannedOutput: [Selector: Any?] = [<br>&gt;&gt;       #function(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;&gt;   ]<br>&gt;&gt; <br>&gt;&gt;   func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;&gt;       return cannedOutput[#function] as! [URL]<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Obviously, this doesn’t work as #function takes no arguments.<br>&gt;&gt; <br>&gt;&gt; There&#39;s no way to get #selector for the current method. And there’s no way to get #function for arbitrary method.<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; <br>&gt;&gt;&gt; On 14 Nov 2016, at 20:07, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This doesn’t seem unreasonable, but I’m not sure if that makes it reasonable. :-) What’s your use case? The stripped-down code seems like it could use any unique key, including #function.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 13, 2016, at 15:50, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi there!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; in Swift 3, we now have #selector and #keyPath yet there’s still no _cmd like we have in Objective-C.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; class DirectoryListingStub: DirectoryListing {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  var cannedOutput: [Selector: Any?] = [<br>&gt;&gt;&gt;&gt;      #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:)): nil<br>&gt;&gt;&gt;&gt;  ]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  dynamic func contentsOfDirectory(at url: URL, includingPropertiesForKeys keys: [URLResourceKey]?, options: FileManager.DirectoryEnumerationOptions) throws -&gt; [URL] {<br>&gt;&gt;&gt;&gt;      let selector = #selector(contentsOfDirectory(at:includingPropertiesForKeys:options:))<br>&gt;&gt;&gt;&gt;      return cannedOutput[selector] as!  [URL]<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Problem: I had to specify #selector twice.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I though I’d be able to use #function but:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #selector = contentsOfDirectoryAt:includingPropertiesForKeys:options:error:<br>&gt;&gt;&gt;&gt; #function = contentsOfDirectory(at:includingPropertiesForKeys:options:)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’d be great if #selector (without arguments) returned the current selector.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or am I missing something?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; R+<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161116/a53036fb/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>Selector for current method</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>November 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Nov 14, 2016, at 11:07 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This doesn’t seem unreasonable, but I’m not sure if that makes it reasonable. :-) What’s your use case? The stripped-down code seems like it could use any unique key, including #function.<br>&gt; <br>&gt; Jordan<br></p><p><br>One use case for bare `#selector` would be in patterns like NSTextViewDelegate’s -textView:doCommandBySelector:, where there are many call sites that need to pass the selector (and thus are open to copy-paste errors). I could imagine having a helper to make this less error prone and less verbose:<br></p><p>class SomeView : NSView {<br>	private func validate(selector: Selector = #selector, action: (Void) -&gt; Void) -&gt; Bool {<br>		guard checkDelegate(selector) else {<br>			return<br>		}<br>		action()<br>	}<br></p><p>	@objc func action1(_ sender: AnyObject?) {<br>		validate {<br>		    // do action<br>		}<br>	}<br></p><p>	...<br></p><p>	@objc func actionN(_ sender: AnyObject?) {<br>		validate {<br>		    // do action<br>		}<br>	}<br></p><p>}<br></p><p>-tim<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
