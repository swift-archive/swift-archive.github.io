<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  7, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0136: Memory Layout of Values&quot; begins now and runs<br>through August 9th. Apologies for the short review period, but we are<br>running up against the Swift 3 deadline. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0136-memory-layout-of-values.md<br></p><p>Reviews are an important part of the Swift evolution process. All<br>reviews should be sent to the swift-evolution<br>mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review<br>through constructive criticism and contribute to the direction of<br>Swift. When writing your review, here are some questions you might<br>want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a<br>          change to Swift?<br>	* Does this proposal fit well with the feel and direction of<br>          Swift?<br>	* If you have used other languages or libraries with a similar <br>          feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a<br>          quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>Dave Abrahams<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August  8, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>Although if I was nitpicking I prefer the name “ofInstance” (as in the stdlib private function) to “ofValue”. <br></p><p>What is the standard nomenclature? Whereas I would distinguish between “objects/instances” and “values”, I’ve started referring to all Swift things as “objects” and “instances”, even if they are value types.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;          change to Swift?<br></p><p>Yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;          Swift?<br></p><p>Yes<br></p><p>&gt; 	* If you have used other languages or libraries with a similar <br>&gt;          feature, how do you feel that this proposal compares to those?<br></p><p>I think the metatype system needs revising for Swift &gt;3.0, but given time constraints this is the best solution<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;          quick reading, or an in-depth study?<br></p><p>Followed prior discussion, read proposal<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; Dave Abrahams<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>August  7, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 from me. I followed the discussion and read the proposal. It seems like<br>a fairly straightforward solution to the problem.<br></p><p>On Sun, Aug 7, 2016 at 9:03 PM, Karl via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;<br>&gt; +1<br>&gt;<br>&gt; Although if I was nitpicking I prefer the name “ofInstance” (as in the<br>&gt; stdlib private function) to “ofValue”.<br>&gt;<br>&gt; What is the standard nomenclature? Whereas I would distinguish between<br>&gt; “objects/instances” and “values”, I’ve started referring to all Swift<br>&gt; things as “objects” and “instances”, even if they are value types.<br>&gt;<br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt; &gt;          change to Swift?<br>&gt;<br>&gt; Yes<br>&gt;<br>&gt; &gt;       * Does this proposal fit well with the feel and direction of<br>&gt; &gt;          Swift?<br>&gt;<br>&gt; Yes<br>&gt;<br>&gt; &gt;       * If you have used other languages or libraries with a similar<br>&gt; &gt;          feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I think the metatype system needs revising for Swift &gt;3.0, but given time<br>&gt; constraints this is the best solution<br>&gt;<br>&gt; &gt;       * How much effort did you put into your review? A glance, a<br>&gt; &gt;          quick reading, or an in-depth study?<br>&gt;<br>&gt; Followed prior discussion, read proposal<br>&gt;<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt;       https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; Dave Abrahams<br>&gt; &gt; Review Manager<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/a5799fe3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  7, 2016 at 07:00:00pm</p></header><div class="content"><p>on Sun Aug 07 2016, Karl &lt;razielim-AT-gmail.com&gt; wrote:<br></p><p>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;<br>&gt; +1<br>&gt;<br>&gt; Although if I was nitpicking I prefer the name “ofInstance” (as in the<br>&gt; stdlib private function) to “ofValue”.<br></p><p>The problem with “ofInstance” is that a class instance will be reported<br>to be the same size as Int.  Most people think of a class instance as<br>the place where its stored properties live, not the reference.<br></p><p>&gt;<br>&gt; What is the standard nomenclature? Whereas I would distinguish between<br>&gt; “objects/instances” and “values”, I’ve started referring to all Swift<br>&gt; things as “objects” and “instances”, even if they are value types.<br>&gt;<br>&gt;<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;&gt;          change to Swift?<br>&gt;<br>&gt; Yes<br>&gt;<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;&gt;          Swift?<br>&gt;<br>&gt; Yes<br>&gt;<br>&gt;&gt; 	* If you have used other languages or libraries with a similar <br>&gt;&gt;          feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I think the metatype system needs revising for Swift &gt;3.0, but given<br>&gt; time constraints this is the best solution<br>&gt;<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;&gt;          quick reading, or an in-depth study?<br>&gt;<br>&gt; Followed prior discussion, read proposal<br>&gt;<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Dave Abrahams<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>August  7, 2016 at 10:00:00pm</p></header><div class="content"><p>Can someone quickly explain what this new API does compared to what SE-101 had?<br></p><p>I&#39;m trying hard to see what&#39;s being added here but my brain isn&#39;t working<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Aug 7, 2016, at 10:18 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Aug 07 2016, Karl &lt;razielim-AT-gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; Although if I was nitpicking I prefer the name “ofInstance” (as in the<br>&gt;&gt; stdlib private function) to “ofValue”.<br>&gt; <br>&gt; The problem with “ofInstance” is that a class instance will be reported<br>&gt; to be the same size as Int.  Most people think of a class instance as<br>&gt; the place where its stored properties live, not the reference.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; What is the standard nomenclature? Whereas I would distinguish between<br>&gt;&gt; “objects/instances” and “values”, I’ve started referring to all Swift<br>&gt;&gt; things as “objects” and “instances”, even if they are value types.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a<br>&gt;&gt;&gt;         change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes<br>&gt;&gt; <br>&gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of<br>&gt;&gt;&gt;         Swift?<br>&gt;&gt; <br>&gt;&gt; Yes<br>&gt;&gt; <br>&gt;&gt;&gt;    * If you have used other languages or libraries with a similar <br>&gt;&gt;&gt;         feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; I think the metatype system needs revising for Swift &gt;3.0, but given<br>&gt;&gt; time constraints this is the best solution<br>&gt;&gt; <br>&gt;&gt;&gt;    * How much effort did you put into your review? A glance, a<br>&gt;&gt;&gt;         quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; Followed prior discussion, read proposal<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dave Abrahams<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  7, 2016 at 09:00:00pm</p></header><div class="content"><p>On Sun, Aug 7, 2016 at 9:31 PM, Brandon Knope via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Can someone quickly explain what this new API does compared to what SE-101<br>&gt; had?<br>&gt;<br>&gt; I&#39;m trying hard to see what&#39;s being added here but my brain isn&#39;t working<br>&gt;<br>&gt; Brandon<br>&gt;<br></p><p>The text of SE-0101 was never updated to reflect the core team&#39;s decision,<br>which was that MemoryLayout was to be an enum with no cases and without the<br>suggested `of(_:)` functions. This proposal is to restore the `of(_:)`<br>functions, but it incorporates recent discussion as to the most appropriate<br>spelling for them.<br></p><p>Sent from my iPad<br>&gt;<br>&gt; &gt; On Aug 7, 2016, at 10:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Sun Aug 07 2016, Karl &lt;razielim-AT-gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; +1<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Although if I was nitpicking I prefer the name “ofInstance” (as in the<br>&gt; &gt;&gt; stdlib private function) to “ofValue”.<br>&gt; &gt;<br>&gt; &gt; The problem with “ofInstance” is that a class instance will be reported<br>&gt; &gt; to be the same size as Int.  Most people think of a class instance as<br>&gt; &gt; the place where its stored properties live, not the reference.<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; What is the standard nomenclature? Whereas I would distinguish between<br>&gt; &gt;&gt; “objects/instances” and “values”, I’ve started referring to all Swift<br>&gt; &gt;&gt; things as “objects” and “instances”, even if they are value types.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a<br>&gt; &gt;&gt;&gt;         change to Swift?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Yes<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of<br>&gt; &gt;&gt;&gt;         Swift?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Yes<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;    * If you have used other languages or libraries with a similar<br>&gt; &gt;&gt;&gt;         feature, how do you feel that this proposal compares to those?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think the metatype system needs revising for Swift &gt;3.0, but given<br>&gt; &gt;&gt; time constraints this is the best solution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;    * How much effort did you put into your review? A glance, a<br>&gt; &gt;&gt;&gt;         quick reading, or an in-depth study?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Followed prior discussion, read proposal<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Thank you,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Dave Abrahams<br>&gt; &gt;&gt;&gt; Review Manager<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; -Dave<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/a5ad8c5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>August  7, 2016 at 10:00:00pm</p></header><div class="content"><p>Yes but:<br></p><p>extension MemoryLayout {<br>  @_transparent<br>  public static func size(ofValue _: T) -&gt; Int {<br>    return MemoryLayout.size<br>  }<br>  @_transparent<br>  public static func stride(ofValue _: T) -&gt; Int {<br>    return MemoryLayout.stride<br>  }<br>  @_transparent<br>  public static func alignment(ofValue _: T) -&gt; Int {<br>    return MemoryLayout.alignment<br>Vs<br></p><p>public struct MemoryLayout&lt;T&gt; { <br>     public static var size: Int { return _sizeof(T) } <br>     public static var stride: Int { return _strideof(T) } <br>     public static var alignment: Int { return _alignof(T) }<br>}<br></p><p>I see the obvious difference between the two in their names and signature, but what is the need for both?<br></p><p>It looks duplicated for the most part, so some clarification would be nice. <br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Aug 7, 2016, at 10:44 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Sun, Aug 7, 2016 at 9:31 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Can someone quickly explain what this new API does compared to what SE-101 had?<br>&gt;&gt; <br>&gt;&gt; I&#39;m trying hard to see what&#39;s being added here but my brain isn&#39;t working<br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt; <br>&gt; The text of SE-0101 was never updated to reflect the core team&#39;s decision, which was that MemoryLayout was to be an enum with no cases and without the suggested `of(_:)` functions. This proposal is to restore the `of(_:)` functions, but it incorporates recent discussion as to the most appropriate spelling for them.<br>&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; &gt; On Aug 7, 2016, at 10:18 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; on Sun Aug 07 2016, Karl &lt;razielim-AT-gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; +1<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Although if I was nitpicking I prefer the name “ofInstance” (as in the<br>&gt;&gt; &gt;&gt; stdlib private function) to “ofValue”.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The problem with “ofInstance” is that a class instance will be reported<br>&gt;&gt; &gt; to be the same size as Int.  Most people think of a class instance as<br>&gt;&gt; &gt; the place where its stored properties live, not the reference.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; What is the standard nomenclature? Whereas I would distinguish between<br>&gt;&gt; &gt;&gt; “objects/instances” and “values”, I’ve started referring to all Swift<br>&gt;&gt; &gt;&gt; things as “objects” and “instances”, even if they are value types.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; &gt;&gt;&gt;         change to Swift?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Yes<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of<br>&gt;&gt; &gt;&gt;&gt;         Swift?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Yes<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;    * If you have used other languages or libraries with a similar<br>&gt;&gt; &gt;&gt;&gt;         feature, how do you feel that this proposal compares to those?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I think the metatype system needs revising for Swift &gt;3.0, but given<br>&gt;&gt; &gt;&gt; time constraints this is the best solution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;    * How much effort did you put into your review? A glance, a<br>&gt;&gt; &gt;&gt;&gt;         quick reading, or an in-depth study?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Followed prior discussion, read proposal<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Thank you,<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Dave Abrahams<br>&gt;&gt; &gt;&gt;&gt; Review Manager<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; -Dave<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160807/c3bbc2bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  7, 2016 at 08:00:00pm</p></header><div class="content"><p>on Sun Aug 07 2016, Brandon Knope &lt;bknope-AT-me.com&gt; wrote:<br></p><p>&gt; Yes but:<br>&gt;<br>&gt; extension MemoryLayout {<br>&gt;   @_transparent<br>&gt;   public static func size(ofValue _: T) -&gt; Int {<br>&gt;     return MemoryLayout.size<br>&gt;   }<br>&gt;   @_transparent<br>&gt;   public static func stride(ofValue _: T) -&gt; Int {<br>&gt;     return MemoryLayout.stride<br>&gt;   }<br>&gt;   @_transparent<br>&gt;   public static func alignment(ofValue _: T) -&gt; Int {<br>&gt;     return MemoryLayout.alignment<br>&gt; Vs<br>&gt;<br>&gt; public struct MemoryLayout&lt;T&gt; { <br>&gt;      public static var size: Int { return _sizeof(T) } <br>&gt;      public static var stride: Int { return _strideof(T) } <br>&gt;      public static var alignment: Int { return _alignof(T) }<br>&gt; }<br>&gt;<br>&gt; I see the obvious difference between the two in their names and signature, but what is the need for both?<br>&gt;<br>&gt; It looks duplicated for the most part, so some clarification would be nice. <br></p><p>The use case is this: you have a value, but you don&#39;t have its type at<br>compile-time, and you want memory layout information.  For example, it<br>might be the result of<br></p><p>     let x = (0..&lt;20).reversed().lazy.map { $0 * 3 }<br></p><p>(which has a horrible type you wouldn&#39;t want to spell out) and you want<br>to know the size of the instance x.<br></p><p>     MemoryLayout.size(ofValue: x)<br></p><p>will work here.  Getting a type to pass in the angle brackets requires<br>jumping through lots of hoops and is easy to get wrong.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  8, 2016 at 04:00:00am</p></header><div class="content"><p>I should add, it serves to clarify intention to the reader as well. Take,<br>for instance:<br></p><p>let array = [0, 1, 2]<br>let x = strideofValue(array[0]) // using the Swift 2 name<br>// stdlib testing code actually does something like this at one point<br></p><p>A reader can see on inspection that x is the correct increment for<br>advancing through the raw bytes of the array. If I edit the first line to<br>`let array = [0, 1.5, 2]`, x is still appropriate for that use on 32-bit<br>systems. And if I tried to use x to advance through the bytes of a<br>different array2, it would definitely prompt a reader to take a second look<br>at the code.<br></p><p>Of course, it is trivial to rewrite the second line as `let x =<br>MemoryLayout&lt;Int&gt;.stride` and to adjust if the type of array changes. But<br>combine that with a scenario such as Dave&#39;s, and it can be much more<br>difficult for a reader to discern whether the code is asking for the memory<br>layout properties of the right type.<br></p><p>On Sun, Aug 7, 2016 at 10:21 PM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Sun Aug 07 2016, Brandon Knope &lt;bknope-AT-me.com&gt; wrote:<br>&gt;<br>&gt; &gt; Yes but:<br>&gt; &gt;<br>&gt; &gt; extension MemoryLayout {<br>&gt; &gt;   @_transparent<br>&gt; &gt;   public static func size(ofValue _: T) -&gt; Int {<br>&gt; &gt;     return MemoryLayout.size<br>&gt; &gt;   }<br>&gt; &gt;   @_transparent<br>&gt; &gt;   public static func stride(ofValue _: T) -&gt; Int {<br>&gt; &gt;     return MemoryLayout.stride<br>&gt; &gt;   }<br>&gt; &gt;   @_transparent<br>&gt; &gt;   public static func alignment(ofValue _: T) -&gt; Int {<br>&gt; &gt;     return MemoryLayout.alignment<br>&gt; &gt; Vs<br>&gt; &gt;<br>&gt; &gt; public struct MemoryLayout&lt;T&gt; {<br>&gt; &gt;      public static var size: Int { return _sizeof(T) }<br>&gt; &gt;      public static var stride: Int { return _strideof(T) }<br>&gt; &gt;      public static var alignment: Int { return _alignof(T) }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; I see the obvious difference between the two in their names and<br>&gt; signature, but what is the need for both?<br>&gt; &gt;<br>&gt; &gt; It looks duplicated for the most part, so some clarification would be<br>&gt; nice.<br>&gt;<br>&gt; The use case is this: you have a value, but you don&#39;t have its type at<br>&gt; compile-time, and you want memory layout information.  For example, it<br>&gt; might be the result of<br>&gt;<br>&gt;      let x = (0..&lt;20).reversed().lazy.map { $0 * 3 }<br>&gt;<br>&gt; (which has a horrible type you wouldn&#39;t want to spell out) and you want<br>&gt; to know the size of the instance x.<br>&gt;<br>&gt;      MemoryLayout.size(ofValue: x)<br>&gt;<br>&gt; will work here.  Getting a type to pass in the angle brackets requires<br>&gt; jumping through lots of hoops and is easy to get wrong.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/5c69a4b3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>August  8, 2016 at 08:00:00am</p></header><div class="content"><p>I feel so incredibly silly :facepalm:<br></p><p>Thank you...it&#39;s obvious now<br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Aug 7, 2016, at 11:21 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Sun Aug 07 2016, Brandon Knope &lt;bknope-AT-me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes but:<br>&gt;&gt; <br>&gt;&gt; extension MemoryLayout {<br>&gt;&gt;  @_transparent<br>&gt;&gt;  public static func size(ofValue _: T) -&gt; Int {<br>&gt;&gt;    return MemoryLayout.size<br>&gt;&gt;  }<br>&gt;&gt;  @_transparent<br>&gt;&gt;  public static func stride(ofValue _: T) -&gt; Int {<br>&gt;&gt;    return MemoryLayout.stride<br>&gt;&gt;  }<br>&gt;&gt;  @_transparent<br>&gt;&gt;  public static func alignment(ofValue _: T) -&gt; Int {<br>&gt;&gt;    return MemoryLayout.alignment<br>&gt;&gt; Vs<br>&gt;&gt; <br>&gt;&gt; public struct MemoryLayout&lt;T&gt; { <br>&gt;&gt;     public static var size: Int { return _sizeof(T) } <br>&gt;&gt;     public static var stride: Int { return _strideof(T) } <br>&gt;&gt;     public static var alignment: Int { return _alignof(T) }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I see the obvious difference between the two in their names and signature, but what is the need for both?<br>&gt;&gt; <br>&gt;&gt; It looks duplicated for the most part, so some clarification would be nice. <br>&gt; <br>&gt; The use case is this: you have a value, but you don&#39;t have its type at<br>&gt; compile-time, and you want memory layout information.  For example, it<br>&gt; might be the result of<br>&gt; <br>&gt;     let x = (0..&lt;20).reversed().lazy.map { $0 * 3 }<br>&gt; <br>&gt; (which has a horrible type you wouldn&#39;t want to spell out) and you want<br>&gt; to know the size of the instance x.<br>&gt; <br>&gt;     MemoryLayout.size(ofValue: x)<br>&gt; <br>&gt; will work here.  Getting a type to pass in the angle brackets requires<br>&gt; jumping through lots of hoops and is easy to get wrong.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>August  8, 2016 at 02:00:00pm</p></header><div class="content"><p>Honestly, I prefer old &#39;size(of:)&#39; and &#39;size(ofValue:)&#39; to new<br>&#39;MemoryLayout&#39;.<br>I actually voted against that proposal. Without it, we wouldn&#39;t have<br>problems we have now.<br>But it&#39;s obvious now that it&#39;s just a formality to complete the transition.<br>Sadly.<br></p><p>&gt; I see the obvious difference between the two in their names and<br>signature, but what is the *need* for both?<br>&gt; It looks duplicated for the most part, so some clarification would be<br>nice.<br></p><p>Brandon, if &#39;T&#39; is a supertype, then &#39;size(ofValue:T)&#39; returns size of<br>specific type of its parameter:<br>let anything: Any = UInt16(0)<br>size(ofValue: anything)  //=&gt; 2<br>Believe it or not, some people need that functionality :P<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/92d6218d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  8, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Aug 08 2016, Anton Zhilin &lt;antonyzhilin-AT-gmail.com&gt; wrote:<br></p><p>&gt; Honestly, I prefer old &#39;size(of:)&#39; and &#39;size(ofValue:)&#39; to new<br>&gt; &#39;MemoryLayout&#39;.<br>&gt; I actually voted against that proposal. Without it, we wouldn&#39;t have<br>&gt; problems we have now.<br></p><p>We&#39;d have different problems:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md#motivation<br></p><p>The “problems we have now” come from over-eager removal of<br>functionality; they have nothing to do with whether the syntax uses free<br>functions or static methods/properties.<br></p><p>&gt; But it&#39;s obvious now that it&#39;s just a formality to complete the<br>&gt; transition.  Sadly.<br></p><p>I&#39;m very sorry that you&#39;re disappointed in the result, but there *was* a<br>review; your preferences might have had an impact, had they been aired<br>there.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>August  8, 2016 at 01:00:00pm</p></header><div class="content"><p>Just for the record: I like MemoryLayout. <br></p><p>I just had a mental lapse or something. Hopefully it is just me and not others when they first see the API 😂<br></p><p>Brandon <br></p><p>&gt; On Aug 8, 2016, at 1:16 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Mon Aug 08 2016, Anton Zhilin &lt;antonyzhilin-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Honestly, I prefer old &#39;size(of:)&#39; and &#39;size(ofValue:)&#39; to new<br>&gt;&gt; &#39;MemoryLayout&#39;.<br>&gt;&gt; I actually voted against that proposal. Without it, we wouldn&#39;t have<br>&gt;&gt; problems we have now.<br>&gt; <br>&gt; We&#39;d have different problems:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md#motivation<br>&gt; <br>&gt; The “problems we have now” come from over-eager removal of<br>&gt; functionality; they have nothing to do with whether the syntax uses free<br>&gt; functions or static methods/properties.<br>&gt; <br>&gt;&gt; But it&#39;s obvious now that it&#39;s just a formality to complete the<br>&gt;&gt; transition.  Sadly.<br>&gt; <br>&gt; I&#39;m very sorry that you&#39;re disappointed in the result, but there *was* a<br>&gt; review; your preferences might have had an impact, had they been aired<br>&gt; there.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August  9, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 8 Aug 2016, at 04:18, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sun Aug 07 2016, Karl &lt;razielim-AT-gmail.com &lt;http://razielim-at-gmail.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; Although if I was nitpicking I prefer the name “ofInstance” (as in the<br>&gt;&gt; stdlib private function) to “ofValue”.<br>&gt; <br>&gt; The problem with “ofInstance” is that a class instance will be reported<br>&gt; to be the same size as Int.  Most people think of a class instance as<br>&gt; the place where its stored properties live, not the reference.<br></p><p>Is there a way to get the size of the stored properties? I had a look but couldn’t find one.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/9a1ef255/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August  8, 2016 at 02:00:00pm</p></header><div class="content"><p>On Sun, Aug 7, 2016, at 11:18 AM, Dave Abrahams via swift-evolution wrote:<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;           change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;           Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar <br>&gt;           feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;           quick reading, or an in-depth study?<br></p><p>A quick reading of the proposal and review thread to date.<br></p><p>-Kevin Ballard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>August  8, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br>+0.5<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;          change to Swift?<br></p><p>Almost<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;          Swift?<br></p><p>I am not totally happy with the whole MemoryLayout solution, but having standard API to obtain memory layout of values is better than not having it.<br></p><p>&gt; 	* How much effort did you put into your review? <br></p><p>quick reading<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160808/b1748878/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August  9, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Aug 7, 2016, at 11:18 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I don&#39;t think that making this public is so urgent that we need to approve it after the deadline.<br></p><p>I suspect that a syntax for talking about the types associated with a variable will emerge from the enhanced existential proposals. If one does, we will be able to use it here:<br></p><p>	MemoryLayout&lt;pointer.Pointee&gt;.size<br>	MemoryLayout&lt;array.Element&gt;.stride<br>	MemoryLayout&lt;someComplexLazyFilteredArray.Self&gt;.size<br></p><p>(You could use `size(ofValue:)` and friends with more complicated expressions, but that would mean evaluating them for no good reason. I&#39;d say using `size(ofValue:)` with anything other than a simple variable is probably a smell.)<br></p><p>So that means this is:<br></p><p>1. A specialized feature,<br>2. Probably used far more by the standard library than anything else,<br>3. Which is a mere convenience,<br>4. Can be trivially added by any user who wants it,<br>5. And may no longer be necessary by the time generics are where we want them to be.<br></p><p>So why the rush? Why not keep the standard library&#39;s implementation private to the standard library?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  9, 2016 at 09:00:00am</p></header><div class="content"><p>On Tue, Aug 9, 2016 at 3:32 AM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; On Aug 7, 2016, at 11:18 AM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;<br>&gt; I don&#39;t think that making this public is so urgent that we need to approve<br>&gt; it after the deadline.<br>&gt;<br>&gt; I suspect that a syntax for talking about the types associated with a<br>&gt; variable will emerge from the enhanced existential proposals. If one does,<br>&gt; we will be able to use it here:<br>&gt;<br>&gt;         MemoryLayout&lt;pointer.Pointee&gt;.size<br>&gt;         MemoryLayout&lt;array.Element&gt;.stride<br>&gt;         MemoryLayout&lt;someComplexLazyFilteredArray.Self&gt;.size<br>&gt;<br>&gt; (You could use `size(ofValue:)` and friends with more complicated<br>&gt; expressions, but that would mean evaluating them for no good reason. I&#39;d<br>&gt; say using `size(ofValue:)` with anything other than a simple variable is<br>&gt; probably a smell.)<br>&gt;<br>&gt; So that means this is:<br>&gt;<br>&gt; 1. A specialized feature,<br>&gt; 2. Probably used far more by the standard library than anything else,<br>&gt; 3. Which is a mere convenience,<br>&gt; 4. Can be trivially added by any user who wants it,<br>&gt; 5. And may no longer be necessary by the time generics are where we want<br>&gt; them to be.<br>&gt;<br>&gt; So why the rush? Why not keep the standard library&#39;s implementation<br>&gt; private to the standard library?<br>&gt;<br></p><p>There&#39;s plenty offered by the standard library that _app_ developers might<br>not touch very frequently, but since, for example, we&#39;re encouraging people<br>to start their own matrix algebra library, types like ManagedBuffer<br>and--yes--MemoryLayout are probably just as important for those use cases<br>as it is for the standard library itself.<br></p><p>To the extent that, as Dave might put it, usage in the standard library<br>helps us to &quot;discover&quot; the right API to expose, the experience of<br>implementing SE-0101 has been informative, I think. IMO, the migration<br>story for a project that *does* need an *ofValue facility could be much,<br>much better than having the user reimplement a privately available method,<br>and it is possible to deliver an improvement on the Swift 3 timeline.<br></p><p>Of course, more powerful generics are going to be a huge boon for Swift 4,<br>but surely it&#39;d be wiser not to omit Swift 3 facilities on hypothesized<br>directions for the next version.<br></p><p>--<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/89b84c9a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b04cad4cec3d0229248b366373bf4e62?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Will Field-Thompson</string> &lt;will.a.ft at gmail.com&gt;<p>August  9, 2016 at 03:00:00pm</p></header><div class="content"><p>** What is your evaluation of the proposal?*<br>This seems like obvious functionality. I know there are a couple places<br>(especially when providing nice, Swifty interfaces for C functions) in the<br>app I&#39;m currently working on where I&#39;d miss this functionality.<br>The syntax is the most straightforward design I think of, so this is a +1<br>from me.<br></p><p>I don&#39;t mind the `.of(_:)` syntax suggested in the original proposal<br>either, but I think it&#39;s probably (especially with the `@autoclosure`) a<br>bit too clever for its own good. That is, it would be especially difficult<br>to discover.<br></p><p>** Is the problem being addressed significant enough to warrant a change to<br>Swift?*<br>I would *not* be in favor leaving it out as Brent Royal-Gordon suggested,<br>because I don&#39;t think it&#39;s overly specialized. This is one of those things<br>that you don&#39;t think will crop up until it does (like in the stdlib).<br></p><p>** Does this proposal fit well with the feel and direction of Swift?*<br>Yes.<br></p><p>** If you have used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?*<br>Long-time fan of `sizeofValue`.<br></p><p>** How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?*<br>A quick reading of the proposal and the review thread.<br></p><p>Best,<br></p><p>Will<br></p><p>On Tue, Aug 9, 2016 at 10:36 AM Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Tue, Aug 9, 2016 at 3:32 AM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; On Aug 7, 2016, at 11:18 AM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think that making this public is so urgent that we need to<br>&gt;&gt; approve it after the deadline.<br>&gt;&gt;<br>&gt;&gt; I suspect that a syntax for talking about the types associated with a<br>&gt;&gt; variable will emerge from the enhanced existential proposals. If one does,<br>&gt;&gt; we will be able to use it here:<br>&gt;&gt;<br>&gt;&gt;         MemoryLayout&lt;pointer.Pointee&gt;.size<br>&gt;&gt;         MemoryLayout&lt;array.Element&gt;.stride<br>&gt;&gt;         MemoryLayout&lt;someComplexLazyFilteredArray.Self&gt;.size<br>&gt;&gt;<br>&gt;&gt; (You could use `size(ofValue:)` and friends with more complicated<br>&gt;&gt; expressions, but that would mean evaluating them for no good reason. I&#39;d<br>&gt;&gt; say using `size(ofValue:)` with anything other than a simple variable is<br>&gt;&gt; probably a smell.)<br>&gt;&gt;<br>&gt;&gt; So that means this is:<br>&gt;&gt;<br>&gt;&gt; 1. A specialized feature,<br>&gt;&gt; 2. Probably used far more by the standard library than anything else,<br>&gt;&gt; 3. Which is a mere convenience,<br>&gt;&gt; 4. Can be trivially added by any user who wants it,<br>&gt;&gt; 5. And may no longer be necessary by the time generics are where we want<br>&gt;&gt; them to be.<br>&gt;&gt;<br>&gt;&gt; So why the rush? Why not keep the standard library&#39;s implementation<br>&gt;&gt; private to the standard library?<br>&gt;&gt;<br>&gt;<br>&gt; There&#39;s plenty offered by the standard library that _app_ developers might<br>&gt; not touch very frequently, but since, for example, we&#39;re encouraging people<br>&gt; to start their own matrix algebra library, types like ManagedBuffer<br>&gt; and--yes--MemoryLayout are probably just as important for those use cases<br>&gt; as it is for the standard library itself.<br>&gt;<br>&gt; To the extent that, as Dave might put it, usage in the standard library<br>&gt; helps us to &quot;discover&quot; the right API to expose, the experience of<br>&gt; implementing SE-0101 has been informative, I think. IMO, the migration<br>&gt; story for a project that *does* need an *ofValue facility could be much,<br>&gt; much better than having the user reimplement a privately available method,<br>&gt; and it is possible to deliver an improvement on the Swift 3 timeline.<br>&gt;<br>&gt; Of course, more powerful generics are going to be a huge boon for Swift 4,<br>&gt; but surely it&#39;d be wiser not to omit Swift 3 facilities on hypothesized<br>&gt; directions for the next version.<br>&gt;<br>&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/094dc8b3/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>August  9, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;m fine with the proposal if it suits the core team / stdlib requirements for reasons previously stated. <br></p><p>Some questions: Under SE-0136, the calls would be `MemoryLayout&lt;Int&gt;.size` and `MemoryLayout.size(ofValue: 2)`, with T inferred from the `size(ofValue:)` argument type.<br></p><p>* Will it benefit the compiler to use autoclosure as previously discussed to avoid evaluation? Or is that unnecessary?<br>* With some list members requesting a single namespaced set of functions that align with the original version of 101, is there any advantage to adopting the following non-generic enum design?<br></p><p>public enum MemoryLayout {<br>    public static func size&lt;T&gt;(ofValue _: T) -&gt; Int { ... }<br>    public static func stride&lt;T&gt;(ofValue _: T) -&gt; Int { ... }<br>    public static func alignment&lt;T&gt;(ofValue _: T) -&gt; Int { ... }<br>    public static func size&lt;T&gt;(of _: T.Type) -&gt; Int { ... }<br>    public static func stride&lt;T&gt;(of _: T.Type) -&gt; Int { ... }<br>    public static func alignment&lt;T&gt;(of _: T.Type) -&gt; Int { ... }<br>}<br></p><p>* If not, should the remaining 3 functions be added to `MemoryLayout&lt;T&gt;` as a courtesy for those who feel it reads better?<br></p><p>-- E<br></p><p>&gt; On Aug 7, 2016, at 12:18 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0136: Memory Layout of Values&quot; begins now and runs<br>&gt; through August 9th. Apologies for the short review period, but we are<br>&gt; running up against the Swift 3 deadline. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0136-memory-layout-of-values.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution<br>&gt; mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a<br>&gt;          change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of<br>&gt;          Swift?<br>&gt; 	* If you have used other languages or libraries with a similar <br>&gt;          feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a<br>&gt;          quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; Dave Abrahams<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/8eb69c74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0136: Memory Layout of Values</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  9, 2016 at 06:00:00pm</p></header><div class="content"><p>In the alternatives section of the proposal, I touched on the issue of<br>@autoclosure. I continue to think that it&#39;s (to borrow Will&#39;s phrasing<br>above) &#39;too clever&#39;, in that use of the attribute for the express purpose<br>of discarding the closure is unprecedented in the standard library, and in<br>that it may violate user expectations that `a(b(c))` generally entails<br>invoking both b(_:) and a(_:).<br></p><p>IMO, the core team&#39;s original rationale for having a generic enum rather<br>than generic functions is sound, and I think I&#39;ve come around to sharing<br>Dave&#39;s opinion that ofValue and non-ofValue facilities should distinguish<br>themselves from each other as much as possible to avoid confusion about<br>their behavior when the argument is T.self vs. T.Type.<br></p><p>In the alternatives section, I&#39;ve also included a sketch of an argument for<br>why having duplicative API for non-ofValue facilities might be less than<br>preferable.<br>On Tue, Aug 9, 2016 at 12:57 Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt; I&#39;m fine with the proposal if it suits the core team / stdlib requirements<br>&gt; for reasons previously stated.<br>&gt;<br>&gt; Some questions: Under SE-0136, the calls would be `MemoryLayout&lt;*Int*&gt;.size`<br>&gt; and `MemoryLayout.size(ofValue: *2*)`, with T inferred from the<br>&gt; `size(ofValue:)` argument type.<br>&gt;<br>&gt; * Will it benefit the compiler to use autoclosure as previously discussed<br>&gt; to avoid evaluation? Or is that unnecessary?<br>&gt; * With some list members requesting a single namespaced set of functions<br>&gt; that align with the original version of 101, is there any advantage to<br>&gt; adopting the following non-generic enum design?<br>&gt;<br>&gt; public enum MemoryLayout {<br>&gt;     public static func size&lt;T&gt;(ofValue _: T) -&gt; Int { ... }<br>&gt;     public static func stride&lt;T&gt;(ofValue _: T) -&gt; Int { ... }<br>&gt;     public static func alignment&lt;T&gt;(ofValue _: T) -&gt; Int { ... }<br>&gt;     public static func size&lt;T&gt;(of _: T.Type) -&gt; Int { ... }<br>&gt;     public static func stride&lt;T&gt;(of _: T.Type) -&gt; Int { ... }<br>&gt;     public static func alignment&lt;T&gt;(of _: T.Type) -&gt; Int { ... }<br>&gt; }<br>&gt;<br>&gt; * If not, should the remaining 3 functions be added to `MemoryLayout&lt;T&gt;`<br>&gt; as a courtesy for those who feel it reads better?<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; On Aug 7, 2016, at 12:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0136: Memory Layout of Values&quot; begins now and runs<br>&gt; through August 9th. Apologies for the short review period, but we are<br>&gt; running up against the Swift 3 deadline. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0136-memory-layout-of-values.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution<br>&gt; mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;          change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of<br>&gt;          Swift?<br>&gt; * If you have used other languages or libraries with a similar<br>&gt;          feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a<br>&gt;          quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Dave Abrahams<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/2d05a87a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
