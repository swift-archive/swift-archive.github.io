<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>Properties with parameters</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>April 23, 2016 at 06:00:00pm</p></header><div class="content"><p>Tim Vermeulen via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; Properties are great. They allow us to write the more naturally looking<br>&gt; <br>&gt; myButton.hidden = true<br>&gt; <br>&gt; instead of<br>&gt; <br>&gt; myButton.setHidden(true)<br>&gt; <br>&gt; However, they don&#39;t take any parameters. That’s why we still have to write<br>&gt; <br>&gt; myButton.setImage(myImage, forState: .Normal)<br>&gt; <br>&gt; instead of<br>&gt; <br>&gt; myButton.imageForState(.Normal) = myImage<br>&gt; <br>&gt; The syntax to write such a function would be pretty straight-forward:<br>&gt; <br>&gt; var imageForState(state: UIControlState): UIImage? {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br></p><p>Alternatively, in a Swift 2.2 overlay:<br></p><p>public extension UIButton {<br>    @nonobjc public subscript(imageForState state: UIControlState) -&gt; UIImage? {<br>        get {<br>            return imageForState(state)<br>        }<br>        set {<br>            setImage(newValue, forState: state)<br>        }<br>    }<br>}<br></p><p>myButton[imageForState: .Normal] = myImage<br></p><p>Apparently, C#&#39;s &quot;indexed properties&quot; were rejected by the Swift design team:<br></p><p>&lt;https://github.com/apple/swift/blob/master/docs/proposals/Accessors.rst&gt;<br></p><p>-- Ben<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
