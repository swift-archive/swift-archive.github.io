<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Warning for possible overflow or optional</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 16, 2016 at 11:00:00am</p></header><div class="content"><p>on Tue Feb 16 2016, David Turnbull &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Can you show some examples where and why you use not-Int types and this is<br>&gt; a problem? What you&#39;re suggesting will be a burden to those of us who need<br>&gt; bitwise optimizations or work with C APIs.<br>&gt;<br>&gt; My last week was spent reading files with huffman coding. So I had no<br>&gt; choice but to use bitwise operations. My experience is that Swift got this<br>&gt; right (except for &quot;truncatingBitPattern&quot; taking up 25% of an 80 column<br>&gt; line).<br></p><p>Suggestions for improved names welcomed.<br></p><p>&gt;<br>&gt; So my question is, &quot;why are you not using Int?&quot; There&#39;s plenty of use<br>&gt; cases, you just haven&#39;t stated yours so we can&#39;t understand why the current<br>&gt; system is failing you.<br>&gt;<br>&gt; Safety does not mean you can easily write code that crashes once it is<br>&gt;&gt; deployedâ€¦.<br>&gt;<br>&gt; var a = [Int](); a[0]=99<br>&gt;<br>&gt; That was pretty easy. I don&#39;t buy into this argument. If you don&#39;t want an<br>&gt; out of bounds error, you either make sure you don&#39;t math your way out of<br>&gt; bounds or you check every time before you subscript. I don&#39;t see why an<br>&gt; integer conversion should be any different.<br>&gt;<br>&gt; -david<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
