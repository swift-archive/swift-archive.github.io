<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November  7, 2016 at 07:00:00pm</p></header><div class="content"><p>I am trying to build Swift for Android and I&#39;m getting the error:<br>Glibc.swift:13:19: error: no such module &#39;SwiftGlibc&#39;<br></p><p><br>I found several other posts asking about this problem for Linux, but<br>no solid resolution.<br></p><p>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160418/001741.html<br>https://www.mail-archive.com/swift-users at swift.org/msg02098.html<br>https://aur.archlinux.org/packages/swift-language-git/?comments=all<br></p><p><br>My problem is a little different. Besides the Android part, I should<br>mention a few other things:<br></p><p>- I am building Swift as ReleaseAssert under Steam-Runtime (which uses<br>clang 3.6.0), where I get the error.<br></p><p>- If I build as DebugAssert (Steam-Runtime), I do not see this problem<br>(and the build finished). I&#39;m a little surprised debug worked but not<br>release.<br></p><p>- If I build under Ubuntu 16.10, I do not hit this problem (both debug<br>and release)<br></p><p>- I do not see any other error messages as stated in the other thread<br>like (ioctl.h not found). My error message is pretty unhelpful about<br>why it failed. (Pasted below)<br></p><p>- I looked for a glibc.modulemap for my broken build. I do not see any<br>in the build directory, nor does it exist on my system. (I do see it<br>created in the successful build.)<br></p><p><br>Anyway, I really could use some guidance on how to get around/fix this<br>problem. I want to use Steam-Runtime because I can build a Swift/Linux<br>compiler binary that I can run on most Linux distros, not just Ubuntu<br>16.10.<br></p><p>I appreciate any help.<br>Thanks,<br>Eric<br></p><p><br></p><p>cd /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform<br>&amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E make_directory<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/android/armv7<br>&amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E make_directory<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7<br>&amp;&amp; /home/pinky/Source/SWIFT/swift/utils/line-directive<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Glibc.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Platform.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/TiocConstants.swift<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift<br>-- /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./bin/swiftc<br>-c -sdk /home/pinky/Android/android-ndk/platforms/android-21/arch-arm<br>-target armv7-none-linux-androideabi -resource-dir<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift<br>-O -D INTERNAL_CHECKS_ENABLED -I<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7<br>-module-cache-path<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./module-cache<br>-no-link-objc-runtime -autolink-force-load -module-link-name<br>swiftGlibc -force-single-frontend-invocation -parse-as-library<br>-emit-module -emit-module-path<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/Glibc.swiftmodule<br>-o /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/android/armv7/Glibc.o<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Glibc.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Platform.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/TiocConstants.swift<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift<br></p><p>FAILED: stdlib/public/Platform/android/armv7/Glibc.o<br>lib/swift/android/armv7/Glibc.swiftmodule<br>lib/swift/android/armv7/Glibc.swiftdoc<br>cd /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform<br>&amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E make_directory<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/android/armv7<br>&amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E make_directory<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7<br>&amp;&amp; /home/pinky/Source/SWIFT/swift/utils/line-directive<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Glibc.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Platform.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/TiocConstants.swift<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift<br>-- /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./bin/swiftc<br>-c -sdk /home/pinky/Android/android-ndk/platforms/android-21/arch-arm<br>-target armv7-none-linux-androideabi -resource-dir<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift<br>-O -D INTERNAL_CHECKS_ENABLED -I<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7<br>-module-cache-path<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./module-cache<br>-no-link-objc-runtime -autolink-force-load -module-link-name<br>swiftGlibc -force-single-frontend-invocation -parse-as-library<br>-emit-module -emit-module-path<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/Glibc.swiftmodule<br>-o /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/android/armv7/Glibc.o<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Glibc.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Platform.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/TiocConstants.swift<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift<br>/home/pinky/Source/SWIFT/swift/stdlib/public/Platform/Glibc.swift:13:19:<br>error: no such module &#39;SwiftGlibc&#39;<br>@_exported import SwiftGlibc // Clang module<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November  8, 2016 at 11:00:00pm</p></header><div class="content"><p>I&#39;m comparing the build log differences between the successful build<br>on Ubuntu 16.10 and the failed build in Steam-Runtime.<br></p><p>It looks like while building Swift (past llvm &amp; clang), at step<br>[651/720], the build logs diverge.<br>In the successful case on Ubuntu, the command is building<br>glibc.modulemap. But in the failed case, it seems to skip this, and is<br>building tgmath.swift.tmp. The build ultimately fails at step 653,<br>failing to find SwiftGlibc.<br></p><p>Any ideas why the build system would be skipping the glibc.modulemap<br>step in the bad case?<br></p><p><br>Below are the two steps.<br></p><p><br>Bad (steamrt):<br>[651/720] cd /home/pinky/Source/SWIFT/swift/stdlib/public/Platform &amp;&amp;<br>/home/pinky/steam-runtime/usr/bin/cmake -E make_directory<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4<br>&amp;&amp; /home/pinky/Source/SWIFT/swift/utils/gyb<br>-DunicodeGraphemeBreakPropertyFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>-DunicodeGraphemeBreakTestFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>-DCMAKE_SIZEOF_VOID_P=4 -o<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift.tmp<br>tgmath.swift.gyb &amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E<br>copy_if_different<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift.tmp<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift<br>&amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E remove<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift.tmp<br></p><p>Good (Ubuntu):<br>[651/720] cd /home/pinky/Source/SWIFT/swift/stdlib/public/Platform &amp;&amp;<br>/usr/bin/cmake -E make_directory<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7<br>&amp;&amp; /home/pinky/Source/SWIFT/swift/utils/gyb<br>-DunicodeGraphemeBreakPropertyFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>-DunicodeGraphemeBreakTestFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>-DCMAKE_SDK=ANDROID<br>-DGLIBC_INCLUDE_PATH=/home/pinky/Android/android-ndk/platforms/android-21/arch-arm//usr/include<br>-DGLIBC_ARCH_INCLUDE_PATH=/home/pinky/Android/android-ndk/platforms/android-21/arch-arm//usr/include<br>-o /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap.tmp<br>glibc.modulemap.gyb &amp;&amp; /usr/bin/cmake -E copy_if_different<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap.tmp<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap<br>&amp;&amp; /usr/bin/cmake -E remove<br>/home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap.tmp<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  9, 2016 at 08:00:00am</p></header><div class="content"><p>Ah, that does help. The logic to build the Glibc module map comes from stdlib/public/Platform/CMakeLists.txt, and explicitly checks for “LINUX”, “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a different SDK name?<br></p><p>Jordan<br></p><p><br>&gt; On Nov 8, 2016, at 23:40, Eric Wing via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m comparing the build log differences between the successful build<br>&gt; on Ubuntu 16.10 and the failed build in Steam-Runtime.<br>&gt; <br>&gt; It looks like while building Swift (past llvm &amp; clang), at step<br>&gt; [651/720], the build logs diverge.<br>&gt; In the successful case on Ubuntu, the command is building<br>&gt; glibc.modulemap. But in the failed case, it seems to skip this, and is<br>&gt; building tgmath.swift.tmp. The build ultimately fails at step 653,<br>&gt; failing to find SwiftGlibc.<br>&gt; <br>&gt; Any ideas why the build system would be skipping the glibc.modulemap<br>&gt; step in the bad case?<br>&gt; <br>&gt; <br>&gt; Below are the two steps.<br>&gt; <br>&gt; <br>&gt; Bad (steamrt):<br>&gt; [651/720] cd /home/pinky/Source/SWIFT/swift/stdlib/public/Platform &amp;&amp;<br>&gt; /home/pinky/steam-runtime/usr/bin/cmake -E make_directory<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4<br>&gt; &amp;&amp; /home/pinky/Source/SWIFT/swift/utils/gyb<br>&gt; -DunicodeGraphemeBreakPropertyFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; -DunicodeGraphemeBreakTestFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; -DCMAKE_SIZEOF_VOID_P=4 -o<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift.tmp<br>&gt; tgmath.swift.gyb &amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E<br>&gt; copy_if_different<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift.tmp<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift<br>&gt; &amp;&amp; /home/pinky/steam-runtime/usr/bin/cmake -E remove<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/4/tgmath.swift.tmp<br>&gt; <br>&gt; Good (Ubuntu):<br>&gt; [651/720] cd /home/pinky/Source/SWIFT/swift/stdlib/public/Platform &amp;&amp;<br>&gt; /usr/bin/cmake -E make_directory<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7<br>&gt; &amp;&amp; /home/pinky/Source/SWIFT/swift/utils/gyb<br>&gt; -DunicodeGraphemeBreakPropertyFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakProperty.txt<br>&gt; -DunicodeGraphemeBreakTestFile=/home/pinky/Source/SWIFT/swift/utils/UnicodeData/GraphemeBreakTest.txt<br>&gt; -DCMAKE_SDK=ANDROID<br>&gt; -DGLIBC_INCLUDE_PATH=/home/pinky/Android/android-ndk/platforms/android-21/arch-arm//usr/include<br>&gt; -DGLIBC_ARCH_INCLUDE_PATH=/home/pinky/Android/android-ndk/platforms/android-21/arch-arm//usr/include<br>&gt; -o /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap.tmp<br>&gt; glibc.modulemap.gyb &amp;&amp; /usr/bin/cmake -E copy_if_different<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap.tmp<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap<br>&gt; &amp;&amp; /usr/bin/cmake -E remove<br>&gt; /home/pinky/Source/SWIFT/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/android/armv7/glibc.modulemap.tmp<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November  9, 2016 at 01:00:00pm</p></header><div class="content"><p>On 11/9/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; Ah, that does help. The logic to build the Glibc module map comes from<br>&gt; stdlib/public/Platform/CMakeLists.txt, and explicitly checks for “LINUX”,<br>&gt; “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a<br>&gt; different SDK name?<br>&gt;<br>&gt; Jordan<br>&gt;<br></p><p>How would I verify/debug this for sure? I haven&#39;t been setting<br>anything differently when I build under Steam-Runtime vs. Ubuntu. (And<br>I have gotten through a pure Linux (no Android) build under<br>Steam-Runtime successfully.) Steam-Runtime is just a Linux. (It is<br>originally derived from Ubuntu 12.04LTS, though it probably has all<br>its Ubuntu identifiers stripped/replaced.)<br></p><p><br>I checked the CMakeCache.txt in build/Ninja-ReleaseAssert/swift-linux-x86_64<br></p><p>Both files are identical between the Steam-Runtime and Ubuntu versions<br>when building for Android. The variable SWIFT_SDKS is:<br>SWIFT_SDKS:STRING=ANDROID;LINUX<br></p><p><br>Obviously something is different somewhere since it seems to be<br>skipping the glibc.modulemap in the Steam-Runtime case.<br></p><p><br>Thanks,<br>Eric<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November  9, 2016 at 02:00:00pm</p></header><div class="content"><p>On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt; On 11/9/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt; Ah, that does help. The logic to build the Glibc module map comes from<br>&gt;&gt; stdlib/public/Platform/CMakeLists.txt, and explicitly checks for “LINUX”,<br>&gt;&gt; “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a<br>&gt;&gt; different SDK name?<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;<br>&gt; How would I verify/debug this for sure? I haven&#39;t been setting<br>&gt; anything differently when I build under Steam-Runtime vs. Ubuntu. (And<br>&gt; I have gotten through a pure Linux (no Android) build under<br>&gt; Steam-Runtime successfully.) Steam-Runtime is just a Linux. (It is<br>&gt; originally derived from Ubuntu 12.04LTS, though it probably has all<br>&gt; its Ubuntu identifiers stripped/replaced.)<br>&gt;<br>&gt;<br>&gt; I checked the CMakeCache.txt in<br>&gt; build/Ninja-ReleaseAssert/swift-linux-x86_64<br>&gt;<br>&gt; Both files are identical between the Steam-Runtime and Ubuntu versions<br>&gt; when building for Android. The variable SWIFT_SDKS is:<br>&gt; SWIFT_SDKS:STRING=ANDROID;LINUX<br>&gt;<br>&gt;<br>&gt; Obviously something is different somewhere since it seems to be<br>&gt; skipping the glibc.modulemap in the Steam-Runtime case.<br>&gt;<br>&gt;<br>&gt; Thanks,<br>&gt; Eric<br>&gt;<br></p><p>Oops. Correction to my last post. The CMakeCache.txt are not<br>identical. I compared the wrong files.<br></p><p>However, the SWIFT_SDKS variable are the same in each.<br></p><p>Here are some differences I did spot:<br></p><p>In Ubuntu, LIBXML2_XMLLINT_EXECUABLE is not found, but defined in my<br>SteamRT cache.<br></p><p>Ubuntu:<br>SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=1<br>Steam<br>SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=<br></p><p>Ubuntu:<br>SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=0<br>Steam:<br>SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=FAILED_TO_RUN<br></p><p><br>The remaining of the differences are tool version differences and<br>stuff with libICU (because Steam-Runtime doesn&#39;t supply it so I must<br>build/supply it myself). But most of these differences are expected.<br></p><p>Thanks,<br>Eric<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November 10, 2016 at 01:00:00pm</p></header><div class="content"><p>On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt; On 11/9/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt; Ah, that does help. The logic to build the Glibc module map comes from<br>&gt;&gt;&gt; stdlib/public/Platform/CMakeLists.txt, and explicitly checks for<br>&gt;&gt;&gt; “LINUX”,<br>&gt;&gt;&gt; “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a<br>&gt;&gt;&gt; different SDK name?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; How would I verify/debug this for sure? I haven&#39;t been setting<br>&gt;&gt; anything differently when I build under Steam-Runtime vs. Ubuntu. (And<br>&gt;&gt; I have gotten through a pure Linux (no Android) build under<br>&gt;&gt; Steam-Runtime successfully.) Steam-Runtime is just a Linux. (It is<br>&gt;&gt; originally derived from Ubuntu 12.04LTS, though it probably has all<br>&gt;&gt; its Ubuntu identifiers stripped/replaced.)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I checked the CMakeCache.txt in<br>&gt;&gt; build/Ninja-ReleaseAssert/swift-linux-x86_64<br>&gt;&gt;<br>&gt;&gt; Both files are identical between the Steam-Runtime and Ubuntu versions<br>&gt;&gt; when building for Android. The variable SWIFT_SDKS is:<br>&gt;&gt; SWIFT_SDKS:STRING=ANDROID;LINUX<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Obviously something is different somewhere since it seems to be<br>&gt;&gt; skipping the glibc.modulemap in the Steam-Runtime case.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Eric<br>&gt;&gt;<br>&gt;<br>&gt; Oops. Correction to my last post. The CMakeCache.txt are not<br>&gt; identical. I compared the wrong files.<br>&gt;<br>&gt; However, the SWIFT_SDKS variable are the same in each.<br>&gt;<br>&gt; Here are some differences I did spot:<br>&gt;<br>&gt; In Ubuntu, LIBXML2_XMLLINT_EXECUABLE is not found, but defined in my<br>&gt; SteamRT cache.<br>&gt;<br>&gt; Ubuntu:<br>&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=1<br>&gt; Steam<br>&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=<br>&gt;<br>&gt; Ubuntu:<br>&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=0<br>&gt; Steam:<br>&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=FAILED_TO_RUN<br>&gt;<br>&gt;<br>&gt; The remaining of the differences are tool version differences and<br>&gt; stuff with libICU (because Steam-Runtime doesn&#39;t supply it so I must<br>&gt; build/supply it myself). But most of these differences are expected.<br>&gt;<br>&gt; Thanks,<br>&gt; Eric<br>&gt;<br></p><p><br>It looks like the problem is related to which version of CMake you use.<br></p><p>Ubuntu 16.10 supplies CMake 3.5.2.<br>Steam-Runtime ships a version that is way too old, so I built and used<br>the latest stable CMake version, 3.6.3.<br></p><p>Using 3.6.3 seems to always trigger this problem with the Swift build.<br></p><p>I tested it both ways:<br></p><p>1. I changed Ubuntu 16.10 to use CMake 3.6.3 and the build broke in<br>exactly the same way I described.<br></p><p>2. In Steam-Runtime, I built/used CMake 3.5.2 instead, and the build completed.<br></p><p><br>I still don’t know specifically what the build script bug is. This is<br>going to need to be fixed eventually if all newer versions of CMake<br>lead to a broken build process.<br></p><p>Thanks,<br>Eric<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Nov 10, 2016, at 13:34, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt; <br>&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On 11/9/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Ah, that does help. The logic to build the Glibc module map comes from<br>&gt;&gt;&gt;&gt; stdlib/public/Platform/CMakeLists.txt, and explicitly checks for<br>&gt;&gt;&gt;&gt; “LINUX”,<br>&gt;&gt;&gt;&gt; “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a<br>&gt;&gt;&gt;&gt; different SDK name?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How would I verify/debug this for sure? I haven&#39;t been setting<br>&gt;&gt;&gt; anything differently when I build under Steam-Runtime vs. Ubuntu. (And<br>&gt;&gt;&gt; I have gotten through a pure Linux (no Android) build under<br>&gt;&gt;&gt; Steam-Runtime successfully.) Steam-Runtime is just a Linux. (It is<br>&gt;&gt;&gt; originally derived from Ubuntu 12.04LTS, though it probably has all<br>&gt;&gt;&gt; its Ubuntu identifiers stripped/replaced.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I checked the CMakeCache.txt in<br>&gt;&gt;&gt; build/Ninja-ReleaseAssert/swift-linux-x86_64<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Both files are identical between the Steam-Runtime and Ubuntu versions<br>&gt;&gt;&gt; when building for Android. The variable SWIFT_SDKS is:<br>&gt;&gt;&gt; SWIFT_SDKS:STRING=ANDROID;LINUX<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Obviously something is different somewhere since it seems to be<br>&gt;&gt;&gt; skipping the glibc.modulemap in the Steam-Runtime case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Eric<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Oops. Correction to my last post. The CMakeCache.txt are not<br>&gt;&gt; identical. I compared the wrong files.<br>&gt;&gt; <br>&gt;&gt; However, the SWIFT_SDKS variable are the same in each.<br>&gt;&gt; <br>&gt;&gt; Here are some differences I did spot:<br>&gt;&gt; <br>&gt;&gt; In Ubuntu, LIBXML2_XMLLINT_EXECUABLE is not found, but defined in my<br>&gt;&gt; SteamRT cache.<br>&gt;&gt; <br>&gt;&gt; Ubuntu:<br>&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=1<br>&gt;&gt; Steam<br>&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=<br>&gt;&gt; <br>&gt;&gt; Ubuntu:<br>&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=0<br>&gt;&gt; Steam:<br>&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=FAILED_TO_RUN<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The remaining of the differences are tool version differences and<br>&gt;&gt; stuff with libICU (because Steam-Runtime doesn&#39;t supply it so I must<br>&gt;&gt; build/supply it myself). But most of these differences are expected.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Eric<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; It looks like the problem is related to which version of CMake you use.<br>&gt; <br>&gt; Ubuntu 16.10 supplies CMake 3.5.2.<br>&gt; Steam-Runtime ships a version that is way too old, so I built and used<br>&gt; the latest stable CMake version, 3.6.3.<br>&gt; <br>&gt; Using 3.6.3 seems to always trigger this problem with the Swift build.<br>&gt; <br>&gt; I tested it both ways:<br>&gt; <br>&gt; 1. I changed Ubuntu 16.10 to use CMake 3.6.3 and the build broke in<br>&gt; exactly the same way I described.<br>&gt; <br>&gt; 2. In Steam-Runtime, I built/used CMake 3.5.2 instead, and the build completed.<br>&gt; <br>&gt; <br>&gt; I still don’t know specifically what the build script bug is. This is<br>&gt; going to need to be fixed eventually if all newer versions of CMake<br>&gt; lead to a broken build process.<br></p><p>Nice job tracking this down! I can’t reproduce it with CMake 3.6.3 on Ubuntu 16.04 with a default configuration, though—or at least, I still see the glibc.modulemap target being generated in the Ninja file and listed as a dependency. Can you include your full build-script invocation line?<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6c3c6af3a3702ecbe5bfa02e3d89aca?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Eric Wing</string> &lt;ewmailing at gmail.com&gt;<p>November 10, 2016 at 03:00:00pm</p></header><div class="content"><p>On 11/10/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Nov 10, 2016, at 13:34, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On 11/9/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Ah, that does help. The logic to build the Glibc module map comes from<br>&gt;&gt;&gt;&gt;&gt; stdlib/public/Platform/CMakeLists.txt, and explicitly checks for<br>&gt;&gt;&gt;&gt;&gt; “LINUX”,<br>&gt;&gt;&gt;&gt;&gt; “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a<br>&gt;&gt;&gt;&gt;&gt; different SDK name?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; How would I verify/debug this for sure? I haven&#39;t been setting<br>&gt;&gt;&gt;&gt; anything differently when I build under Steam-Runtime vs. Ubuntu. (And<br>&gt;&gt;&gt;&gt; I have gotten through a pure Linux (no Android) build under<br>&gt;&gt;&gt;&gt; Steam-Runtime successfully.) Steam-Runtime is just a Linux. (It is<br>&gt;&gt;&gt;&gt; originally derived from Ubuntu 12.04LTS, though it probably has all<br>&gt;&gt;&gt;&gt; its Ubuntu identifiers stripped/replaced.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I checked the CMakeCache.txt in<br>&gt;&gt;&gt;&gt; build/Ninja-ReleaseAssert/swift-linux-x86_64<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Both files are identical between the Steam-Runtime and Ubuntu versions<br>&gt;&gt;&gt;&gt; when building for Android. The variable SWIFT_SDKS is:<br>&gt;&gt;&gt;&gt; SWIFT_SDKS:STRING=ANDROID;LINUX<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Obviously something is different somewhere since it seems to be<br>&gt;&gt;&gt;&gt; skipping the glibc.modulemap in the Steam-Runtime case.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Eric<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Oops. Correction to my last post. The CMakeCache.txt are not<br>&gt;&gt;&gt; identical. I compared the wrong files.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; However, the SWIFT_SDKS variable are the same in each.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Here are some differences I did spot:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In Ubuntu, LIBXML2_XMLLINT_EXECUABLE is not found, but defined in my<br>&gt;&gt;&gt; SteamRT cache.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ubuntu:<br>&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=1<br>&gt;&gt;&gt; Steam<br>&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ubuntu:<br>&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=0<br>&gt;&gt;&gt; Steam:<br>&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=FAILED_TO_RUN<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The remaining of the differences are tool version differences and<br>&gt;&gt;&gt; stuff with libICU (because Steam-Runtime doesn&#39;t supply it so I must<br>&gt;&gt;&gt; build/supply it myself). But most of these differences are expected.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Eric<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It looks like the problem is related to which version of CMake you use.<br>&gt;&gt;<br>&gt;&gt; Ubuntu 16.10 supplies CMake 3.5.2.<br>&gt;&gt; Steam-Runtime ships a version that is way too old, so I built and used<br>&gt;&gt; the latest stable CMake version, 3.6.3.<br>&gt;&gt;<br>&gt;&gt; Using 3.6.3 seems to always trigger this problem with the Swift build.<br>&gt;&gt;<br>&gt;&gt; I tested it both ways:<br>&gt;&gt;<br>&gt;&gt; 1. I changed Ubuntu 16.10 to use CMake 3.6.3 and the build broke in<br>&gt;&gt; exactly the same way I described.<br>&gt;&gt;<br>&gt;&gt; 2. In Steam-Runtime, I built/used CMake 3.5.2 instead, and the build<br>&gt;&gt; completed.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I still don’t know specifically what the build script bug is. This is<br>&gt;&gt; going to need to be fixed eventually if all newer versions of CMake<br>&gt;&gt; lead to a broken build process.<br>&gt;<br>&gt; Nice job tracking this down! I can’t reproduce it with CMake 3.6.3 on Ubuntu<br>&gt; 16.04 with a default configuration, though—or at least, I still see the<br>&gt; glibc.modulemap target being generated in the Ninja file and listed as a<br>&gt; dependency. Can you include your full build-script invocation line?<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br></p><p><br>My PATH is modified to make sure to use my built version of CMake<br>instead of the system one.<br></p><p>./swift/utils/build-script --release --skip-test-linux --android<br>--android-ndk=/home/pinky/Android/android-ndk --android-api-level=21<br>--android-icu-uc<br>/home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/lib/libicuucswift.so<br>--android-icu-uc-include<br>/home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/include<br>--android-icu-i18n<br>/home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/lib/libicui18nswift.so<br>--android-icu-i18n-include<br>/home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/include/<br>--extra-cmake-options=&quot;-DCMAKE_VERBOSE_MAKEFILE=1&quot;<br></p><p><br>The top of my git log is:<br></p><p>commit 7a3a1e3697e104522734aaea62987e6ef7d58e79<br>Merge: 23525d9 9577d98<br>Author: swift-ci &lt;swift-ci at users.noreply.github.com&gt;<br>Date:   Thu Oct 27 13:43:11 2016 -0700<br></p><p>    Merge pull request #5500 from nkcsgexi/closure<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Nov 10, 2016, at 15:16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt; <br>&gt; On 11/10/16, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 10, 2016, at 13:34, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On 11/9/16, Eric Wing &lt;ewmailing at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On 11/9/16, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Ah, that does help. The logic to build the Glibc module map comes from<br>&gt;&gt;&gt;&gt;&gt;&gt; stdlib/public/Platform/CMakeLists.txt, and explicitly checks for<br>&gt;&gt;&gt;&gt;&gt;&gt; “LINUX”,<br>&gt;&gt;&gt;&gt;&gt;&gt; “FREEBSD”, “ANDROID”, and “CYGWIN”. Does the Steam-Runtime build use a<br>&gt;&gt;&gt;&gt;&gt;&gt; different SDK name?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How would I verify/debug this for sure? I haven&#39;t been setting<br>&gt;&gt;&gt;&gt;&gt; anything differently when I build under Steam-Runtime vs. Ubuntu. (And<br>&gt;&gt;&gt;&gt;&gt; I have gotten through a pure Linux (no Android) build under<br>&gt;&gt;&gt;&gt;&gt; Steam-Runtime successfully.) Steam-Runtime is just a Linux. (It is<br>&gt;&gt;&gt;&gt;&gt; originally derived from Ubuntu 12.04LTS, though it probably has all<br>&gt;&gt;&gt;&gt;&gt; its Ubuntu identifiers stripped/replaced.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I checked the CMakeCache.txt in<br>&gt;&gt;&gt;&gt;&gt; build/Ninja-ReleaseAssert/swift-linux-x86_64<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Both files are identical between the Steam-Runtime and Ubuntu versions<br>&gt;&gt;&gt;&gt;&gt; when building for Android. The variable SWIFT_SDKS is:<br>&gt;&gt;&gt;&gt;&gt; SWIFT_SDKS:STRING=ANDROID;LINUX<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Obviously something is different somewhere since it seems to be<br>&gt;&gt;&gt;&gt;&gt; skipping the glibc.modulemap in the Steam-Runtime case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; Eric<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Oops. Correction to my last post. The CMakeCache.txt are not<br>&gt;&gt;&gt;&gt; identical. I compared the wrong files.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, the SWIFT_SDKS variable are the same in each.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here are some differences I did spot:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In Ubuntu, LIBXML2_XMLLINT_EXECUABLE is not found, but defined in my<br>&gt;&gt;&gt;&gt; SteamRT cache.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ubuntu:<br>&gt;&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=1<br>&gt;&gt;&gt;&gt; Steam<br>&gt;&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST:INTERNAL=<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ubuntu:<br>&gt;&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=0<br>&gt;&gt;&gt;&gt; Steam:<br>&gt;&gt;&gt;&gt; SWIFT_HAVE_WORKING_STD_REGEX_TEST_EXITCODE:INTERNAL=FAILED_TO_RUN<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The remaining of the differences are tool version differences and<br>&gt;&gt;&gt;&gt; stuff with libICU (because Steam-Runtime doesn&#39;t supply it so I must<br>&gt;&gt;&gt;&gt; build/supply it myself). But most of these differences are expected.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Eric<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It looks like the problem is related to which version of CMake you use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ubuntu 16.10 supplies CMake 3.5.2.<br>&gt;&gt;&gt; Steam-Runtime ships a version that is way too old, so I built and used<br>&gt;&gt;&gt; the latest stable CMake version, 3.6.3.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Using 3.6.3 seems to always trigger this problem with the Swift build.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tested it both ways:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. I changed Ubuntu 16.10 to use CMake 3.6.3 and the build broke in<br>&gt;&gt;&gt; exactly the same way I described.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. In Steam-Runtime, I built/used CMake 3.5.2 instead, and the build<br>&gt;&gt;&gt; completed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I still don’t know specifically what the build script bug is. This is<br>&gt;&gt;&gt; going to need to be fixed eventually if all newer versions of CMake<br>&gt;&gt;&gt; lead to a broken build process.<br>&gt;&gt; <br>&gt;&gt; Nice job tracking this down! I can’t reproduce it with CMake 3.6.3 on Ubuntu<br>&gt;&gt; 16.04 with a default configuration, though—or at least, I still see the<br>&gt;&gt; glibc.modulemap target being generated in the Ninja file and listed as a<br>&gt;&gt; dependency. Can you include your full build-script invocation line?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; My PATH is modified to make sure to use my built version of CMake<br>&gt; instead of the system one.<br>&gt; <br>&gt; ./swift/utils/build-script --release --skip-test-linux --android<br>&gt; --android-ndk=/home/pinky/Android/android-ndk --android-api-level=21<br>&gt; --android-icu-uc<br>&gt; /home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/lib/libicuucswift.so<br>&gt; --android-icu-uc-include<br>&gt; /home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/include<br>&gt; --android-icu-i18n<br>&gt; /home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/lib/libicui18nswift.so<br>&gt; --android-icu-i18n-include<br>&gt; /home/pinky/Source/SWIFTANDROID/libiconv-libicu-android/armeabi-v7a/include/<br>&gt; --extra-cmake-options=&quot;-DCMAKE_VERBOSE_MAKEFILE=1&quot;<br>&gt; <br>&gt; <br>&gt; The top of my git log is:<br>&gt; <br>&gt; commit 7a3a1e3697e104522734aaea62987e6ef7d58e79<br>&gt; Merge: 23525d9 9577d98<br>&gt; Author: swift-ci &lt;swift-ci at users.noreply.github.com &lt;mailto:swift-ci at users.noreply.github.com&gt;&gt;<br>&gt; Date:   Thu Oct 27 13:43:11 2016 -0700<br>&gt; <br>&gt;    Merge pull request #5500 from nkcsgexi/closure<br></p><p>Aha, even in your &quot;on Ubuntu&quot; build it&#39;s still a cross build for Android. In that case I&#39;m not set up to reproduce it at the moment.<br></p><p>Adding Brian, who unofficially owns the unofficial Android build support. It&#39;s a spare time project for him, though, so I don&#39;t know if he&#39;ll be able to respond.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161110/84d3860b/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>build order? Glibc.swift: error: no such module &#39;SwiftGlibc&#39;</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>November 16, 2016 at 12:00:00am</p></header><div class="content"><p>Hello Eric,<br></p><p>Wanted to share I ran into a similar/the same error message this week rebuilding from scratch (clean build/ on AWS Linux like CentOS): the build stops (almost certainly) because the native SwiftGlibc module isn’t generated. It happens near the end of the Swift build, around step 600/640ish.<br>I’m not sure if there is one cause, since others posting online have run into this message over the last year seemingly for different reasons (missing libraries?).<br></p><p><br>Anyway I was able to get past it by executing:<br>ninja make lib-swift-linux-x86_64-glibc.modulemap<br></p><p>Re-invoking the build script gave me this:<br>[1/1] Generating glibc.modulemap from glibc.modulemap.gyb<br></p><p>And the rest of the build went on its way. Maybe it’ll work for you if you&#39;re still seeing the problem?<br></p><p>I’ve filed SR-3219 https://bugs.swift.org/browse/SR-3219 with my build.ninja in case it’s related to build order (alas I’m not too familiar with everything so I don’t know when SwiftGlibc is expected).<br></p><p>The error I came across:<br>[1/51] Compiling /home/ec2-user/swift/...b/public/Platform/linux/x86_64/Glibc.o<br>FAILED: stdlib/public/Platform/linux/x86_64/Glibc.o <br>cd /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform &amp;&amp; /home/ec2-user/swift/swift/utils/line-directive /home/ec2-user/swift/swift/stdlib/public/Platform/Glibc.swift /home/ec2-user/swift/swift/stdlib/public/Platform/Platform.swift /home/ec2-user/swift/swift/stdlib/public/Platform/TiocConstants.swift /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/8/tgmath.swift -- /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/./bin/swiftc -c -sdk / -target x86_64-unknown-linux-gnu -resource-dir /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift -O -D INTERNAL_CHECKS_ENABLED -I /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/./lib/swift/linux/x86_64 -module-cache-path /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/./module-cache -no-link-objc-runtime -autolink-force-load -module-link-name swiftGlibc -force-single-frontend-invocation -parse-as-library -o /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/linux/x86_64/Glibc.o /home/ec2-user/swift/swift/stdlib/public/Platform/Glibc.swift /home/ec2-user/swift/swift/stdlib/public/Platform/Platform.swift /home/ec2-user/swift/swift/stdlib/public/Platform/TiocConstants.swift /home/ec2-user/swift/build/Ninja-ReleaseAssert/swift-linux-x86_64/stdlib/public/Platform/8/tgmath.swift<br>/home/ec2-user/swift/swift/stdlib/public/Platform/Glibc.swift:13:19: error: no such module &#39;SwiftGlibc&#39;<br>@_exported import SwiftGlibc // Clang module<br>                  ^<br></p><p><br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Nov 10, 2016, at 4:34 PM, Eric Wing via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Ubuntu 16.10 supplies CMake 3.5.2.<br>&gt; Steam-Runtime ships a version that is way too old, so I built and used<br>&gt; the latest stable CMake version, 3.6.3.<br>&gt; <br>&gt; Using 3.6.3 seems to always trigger this problem with the Swift build.<br>&gt; <br>&gt; I tested it both ways:<br>&gt; <br>&gt; 1. I changed Ubuntu 16.10 to use CMake 3.6.3 and the build broke in<br>&gt; exactly the same way I described.<br>&gt; <br>&gt; 2. In Steam-Runtime, I built/used CMake 3.5.2 instead, and the build completed.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
