<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  5, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Apr 05 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Right. I would argue that `(a+s...b).striding(by: s).reversed` is a great deal<br>&gt; less readable than `stride(from: b, to: a, by: -s)`. And since the latter is the<br>&gt; status quo, I would say that it&#39;s a point against restricting strides to the<br>&gt; proposed syntax.<br></p><p>Yes, those are all points.  But it totally avoids the question of<br>whether the case of striding over an inverted half-open range by a<br>negative step is an important enough case to be worth complicating the<br>library to make it readable.  <br></p><p>If it is important enough, I am much more inclined to support<br></p><p>    (a&lt;..b).striding(by: s).reversed<br></p><p>or<br></p><p>    (a&lt;..b).striding(by: -s)  // i.e., negative strides automatically reverse<br></p><p>simply because it makes a presumably-useful concept available (inverse<br>half-open range), re-uses existing syntax, and doesn&#39;t bring up these<br>naming questions.<br></p><p>Frankly, <br></p><p>    (a+s...b).striding(by: -s)<br></p><p>isn&#39;t all that bad.<br></p><p>&gt; On Tue, Apr 5, 2016 at 3:57 PM Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Tue Apr 05 2016, Xiaodi Wu<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; Certainly, for integer literals and strides of -1.<br>&gt;     &gt;<br>&gt;     &gt; I meant more generally that removal of stride(...) will eliminate the<br>&gt;     &gt; possibility of striding to but not through arbitrary half-open intervals<br>&gt;     (a, b],<br>&gt;     &gt; where a &lt; b, by a negative increment, because there is no such thing as<br>&gt;     `a&gt;..b`<br>&gt;     &gt; to express such an interval as a Swift range.<br>&gt;     &gt; Of course, all such cases can be handled by adjusting the endpoint and<br>&gt;     using a<br>&gt;     &gt; closed range instead<br>&gt;     &gt;<br>&gt;<br>&gt;     Indeed, if b - a is a multiple of s,<br>&gt;<br>&gt;     (a+s...b).striding(by: s).reversed<br>&gt;<br>&gt;     works.<br>&gt;<br>&gt;     The question is whether this case is important enough to create a<br>&gt;     special family of functions for, and then deal with the naming issues<br>&gt;     raised by<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0051-stride-semantics.md<br>&gt;<br>&gt;     ?<br>&gt;<br>&gt;     &gt; On Tue, Apr 5, 2016 at 2:54 PM Dave Abrahams<br>&gt;     &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; on Tue Apr 05 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; &gt; On Mon, Apr 4, 2016 at 1:22 PM, Dave Abrahams<br>&gt;     &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; on Sat Apr 02 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt;&gt; [snip]<br>&gt;     &gt; &gt;&gt;&gt;<br>&gt;     &gt; &gt;&gt;&gt; Not included:<br>&gt;     &gt; &gt;&gt;&gt; 1. I know Ranges are in flux, so I&#39;ve held off on extending Range with<br>&gt;     &gt; &gt;&gt;&gt; a striding(by:) method in this proof-of-concept.<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; They&#39;re not in flux, except for not having been reviewed yet; they are<br>&gt;     &gt; &gt;&gt; settled in the swift-3-indexing-model branch.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Did not know that. Will have to study what&#39;s there in more detail.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt;&gt;&gt; 2. No attempt at the suggested stride(from:to:steps:) quite yet.<br>&gt;     &gt; &gt;&gt;<br>&gt;     &gt; &gt;&gt; #1 and #2 are mutually exclusive; we prefer #1 as it removes questions<br>&gt;     &gt; &gt;&gt; about the meaning of &quot;to&quot; or &quot;through.&quot;<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; I wasn&#39;t aware that was the thinking. Limiting strides to<br>&gt;     &gt; &gt; `striding(by:)` removes the ability to express `stride(from: 0, to:<br>&gt;     &gt; &gt; -10, by: -1)`<br>&gt;     &gt;<br>&gt;     &gt; IMO this:<br>&gt;     &gt;<br>&gt;     &gt; (-9...0).reverse()<br>&gt;     &gt;<br>&gt;     &gt; is better than<br>&gt;     &gt;<br>&gt;     &gt; stride(from: 0, to: -10, by: -1)<br>&gt;     &gt;<br>&gt;     &gt; What do you think?<br>&gt;     &gt;<br>&gt;     &gt; --<br>&gt;     &gt; Dave<br>&gt;     &gt;<br>&gt;     &gt; _______________________________________________<br>&gt;     &gt; swift-evolution mailing list<br>&gt;     &gt; swift-evolution at swift.org<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April  5, 2016 at 07:00:00pm</p></header><div class="content"><p>On Tue, Apr 5, 2016 at 4:28 PM, Dave Abrahams via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; on Tue Apr 05 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Right. I would argue that `(a+s...b).striding(by: s).reversed` is a great deal<br>&gt;&gt; less readable than `stride(from: b, to: a, by: -s)`. And since the latter is the<br>&gt;&gt; status quo, I would say that it&#39;s a point against restricting strides to the<br>&gt;&gt; proposed syntax.<br>&gt;<br>&gt; Yes, those are all points.  But it totally avoids the question of<br>&gt; whether the case of striding over an inverted half-open range by a<br>&gt; negative step is an important enough case to be worth complicating the<br>&gt; library to make it readable.<br></p><p>At the risk of tedious pedantry--<br></p><p>Given that this discussion was spawned from one about Swift&#39;s for<br>loop, it would be remiss not to circle back and point out that what&#39;s<br>at issue isn&#39;t a matter of complicating an existing implementation to<br>support stride to (or, striding over an inverted half-open range) with<br>negative stride size, but rather whether a proposed simplification<br>ought to be implemented that removes this already supported use case.<br>IMO, the existing implementation is not overly inelegant, and deep in<br>the logic of StrideToIterator is an if statement (using a ternary<br>operator in the expression, no less!) to account for negative stride<br>size--so I can only conclude that its being supported isn&#39;t merely a<br>happy byproduct of the current implementation but very much an<br>explicitly planned-for feature.<br></p><p>&gt; If it is important enough, I am much more inclined to support<br>&gt;<br>&gt;     (a&lt;..b).striding(by: s).reversed<br>&gt;<br>&gt; or<br>&gt;<br>&gt;     (a&lt;..b).striding(by: -s)  // i.e., negative strides automatically reverse<br>&gt;<br>&gt; simply because it makes a presumably-useful concept available (inverse<br>&gt; half-open range), re-uses existing syntax, and doesn&#39;t bring up these<br>&gt; naming questions.<br>&gt;<br>&gt; Frankly,<br>&gt;<br>&gt;     (a+s...b).striding(by: -s)<br>&gt;<br>&gt; isn&#39;t all that bad.<br>&gt;<br>&gt;&gt; On Tue, Apr 5, 2016 at 3:57 PM Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     on Tue Apr 05 2016, Xiaodi Wu<br>&gt;&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     &gt; Certainly, for integer literals and strides of -1.<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; I meant more generally that removal of stride(...) will eliminate the<br>&gt;&gt;     &gt; possibility of striding to but not through arbitrary half-open intervals<br>&gt;&gt;     (a, b],<br>&gt;&gt;     &gt; where a &lt; b, by a negative increment, because there is no such thing as<br>&gt;&gt;     `a&gt;..b`<br>&gt;&gt;     &gt; to express such an interval as a Swift range.<br>&gt;&gt;     &gt; Of course, all such cases can be handled by adjusting the endpoint and<br>&gt;&gt;     using a<br>&gt;&gt;     &gt; closed range instead<br>&gt;&gt;     &gt;<br>&gt;&gt;<br>&gt;&gt;     Indeed, if b - a is a multiple of s,<br>&gt;&gt;<br>&gt;&gt;     (a+s...b).striding(by: s).reversed<br>&gt;&gt;<br>&gt;&gt;     works.<br>&gt;&gt;<br>&gt;&gt;     The question is whether this case is important enough to create a<br>&gt;&gt;     special family of functions for, and then deal with the naming issues<br>&gt;&gt;     raised by<br>&gt;&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0051-stride-semantics.md<br>&gt;&gt;<br>&gt;&gt;     ?<br>&gt;&gt;<br>&gt;&gt;     &gt; On Tue, Apr 5, 2016 at 2:54 PM Dave Abrahams<br>&gt;&gt;     &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; on Tue Apr 05 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; &gt; On Mon, Apr 4, 2016 at 1:22 PM, Dave Abrahams<br>&gt;&gt;     &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt;&gt; on Sat Apr 02 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt;&gt;&gt; [snip]<br>&gt;&gt;     &gt; &gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt;&gt;&gt; Not included:<br>&gt;&gt;     &gt; &gt;&gt;&gt; 1. I know Ranges are in flux, so I&#39;ve held off on extending Range with<br>&gt;&gt;     &gt; &gt;&gt;&gt; a striding(by:) method in this proof-of-concept.<br>&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt;&gt; They&#39;re not in flux, except for not having been reviewed yet; they are<br>&gt;&gt;     &gt; &gt;&gt; settled in the swift-3-indexing-model branch.<br>&gt;&gt;     &gt; &gt;<br>&gt;&gt;     &gt; &gt; Did not know that. Will have to study what&#39;s there in more detail.<br>&gt;&gt;     &gt; &gt;<br>&gt;&gt;     &gt; &gt;&gt;&gt; 2. No attempt at the suggested stride(from:to:steps:) quite yet.<br>&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt;&gt; #1 and #2 are mutually exclusive; we prefer #1 as it removes questions<br>&gt;&gt;     &gt; &gt;&gt; about the meaning of &quot;to&quot; or &quot;through.&quot;<br>&gt;&gt;     &gt; &gt;<br>&gt;&gt;     &gt; &gt; I wasn&#39;t aware that was the thinking. Limiting strides to<br>&gt;&gt;     &gt; &gt; `striding(by:)` removes the ability to express `stride(from: 0, to:<br>&gt;&gt;     &gt; &gt; -10, by: -1)`<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; IMO this:<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; (-9...0).reverse()<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; is better than<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; stride(from: 0, to: -10, by: -1)<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; What do you think?<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; --<br>&gt;&gt;     &gt; Dave<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; _______________________________________________<br>&gt;&gt;     &gt; swift-evolution mailing list<br>&gt;&gt;     &gt; swift-evolution at swift.org<br>&gt;&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;     --<br>&gt;&gt;     Dave<br>&gt;&gt;<br>&gt;&gt;     _______________________________________________<br>&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;     swift-evolution at swift.org<br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  6, 2016 at 09:00:00am</p></header><div class="content"><p>on Tue Apr 05 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Tue, Apr 5, 2016 at 4:28 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; on Tue Apr 05 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Right. I would argue that `(a+s...b).striding(by: s).reversed` is a great deal<br>&gt;&gt;&gt; less readable than `stride(from: b, to: a, by: -s)`. And since the latter is the<br>&gt;&gt;&gt; status quo, I would say that it&#39;s a point against restricting strides to the<br>&gt;&gt;&gt; proposed syntax.<br>&gt;&gt;<br>&gt;&gt; Yes, those are all points.  But it totally avoids the question of<br>&gt;&gt; whether the case of striding over an inverted half-open range by a<br>&gt;&gt; negative step is an important enough case to be worth complicating the<br>&gt;&gt; library to make it readable.<br>&gt;<br>&gt; At the risk of tedious pedantry--<br>&gt;<br>&gt; Given that this discussion was spawned from one about Swift&#39;s for<br>&gt; loop, it would be remiss not to circle back and point out that what&#39;s<br>&gt; at issue isn&#39;t a matter of complicating an existing implementation to<br>&gt; support stride to (or, striding over an inverted half-open range) with<br>&gt; negative stride size, but rather whether a proposed simplification<br>&gt; ought to be implemented that removes this already supported use case.<br>&gt; IMO, the existing implementation is not overly inelegant, and deep in<br>&gt; the logic of StrideToIterator is an if statement (using a ternary<br>&gt; operator in the expression, no less!) to account for negative stride<br>&gt; size--so I can only conclude that its being supported isn&#39;t merely a<br>&gt; happy byproduct of the current implementation but very much an<br>&gt; explicitly planned-for feature.<br></p><p>I fully agree that negative strides ought to be supported, e.g. <br></p><p>  r.striding(by: -d)<br></p><p>&gt;&gt; If it is important enough, I am much more inclined to support<br>&gt;&gt;<br>&gt;&gt;     (a&lt;..b).striding(by: s).reversed<br>&gt;&gt;<br>&gt;&gt; or<br>&gt;&gt;<br>&gt;&gt;     (a&lt;..b).striding(by: -s)  // i.e., negative strides automatically reverse<br>&gt;&gt;<br>&gt;&gt; simply because it makes a presumably-useful concept available (inverse<br>&gt;&gt; half-open range), re-uses existing syntax, and doesn&#39;t bring up these<br>&gt;&gt; naming questions.<br>&gt;&gt;<br>&gt;&gt; Frankly,<br>&gt;&gt;<br>&gt;&gt;     (a+s...b).striding(by: -s)<br>&gt;&gt;<br>&gt;&gt; isn&#39;t all that bad.<br>&gt;&gt;<br>&gt;&gt;&gt; On Tue, Apr 5, 2016 at 3:57 PM Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     on Tue Apr 05 2016, Xiaodi Wu<br>&gt;&gt;&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; Certainly, for integer literals and strides of -1.<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; I meant more generally that removal of stride(...) will eliminate the<br>&gt;&gt;&gt;     &gt; possibility of striding to but not through arbitrary half-open intervals<br>&gt;&gt;&gt;     (a, b],<br>&gt;&gt;&gt;     &gt; where a &lt; b, by a negative increment, because there is no such thing as<br>&gt;&gt;&gt;     `a&gt;..b`<br>&gt;&gt;&gt;     &gt; to express such an interval as a Swift range.<br>&gt;&gt;&gt;     &gt; Of course, all such cases can be handled by adjusting the endpoint and<br>&gt;&gt;&gt;     using a<br>&gt;&gt;&gt;     &gt; closed range instead<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Indeed, if b - a is a multiple of s,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     (a+s...b).striding(by: s).reversed<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     works.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     The question is whether this case is important enough to create a<br>&gt;&gt;&gt;     special family of functions for, and then deal with the naming issues<br>&gt;&gt;&gt;     raised by<br>&gt;&gt;&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0051-stride-semantics.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; On Tue, Apr 5, 2016 at 2:54 PM Dave Abrahams<br>&gt;&gt;&gt;     &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; on Tue Apr 05 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; &gt; On Mon, Apr 4, 2016 at 1:22 PM, Dave Abrahams<br>&gt;&gt;&gt;     &gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt;&gt; on Sat Apr 02 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt;&gt;&gt; [snip]<br>&gt;&gt;&gt;     &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt;&gt;&gt; Not included:<br>&gt;&gt;&gt;     &gt; &gt;&gt;&gt; 1. I know Ranges are in flux, so I&#39;ve held off on extending Range with<br>&gt;&gt;&gt;     &gt; &gt;&gt;&gt; a striding(by:) method in this proof-of-concept.<br>&gt;&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt;&gt; They&#39;re not in flux, except for not having been reviewed yet; they are<br>&gt;&gt;&gt;     &gt; &gt;&gt; settled in the swift-3-indexing-model branch.<br>&gt;&gt;&gt;     &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt; Did not know that. Will have to study what&#39;s there in more detail.<br>&gt;&gt;&gt;     &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt;&gt;&gt; 2. No attempt at the suggested stride(from:to:steps:) quite yet.<br>&gt;&gt;&gt;     &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt;&gt; #1 and #2 are mutually exclusive; we prefer #1 as it removes questions<br>&gt;&gt;&gt;     &gt; &gt;&gt; about the meaning of &quot;to&quot; or &quot;through.&quot;<br>&gt;&gt;&gt;     &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt; I wasn&#39;t aware that was the thinking. Limiting strides to<br>&gt;&gt;&gt;     &gt; &gt; `striding(by:)` removes the ability to express `stride(from: 0, to:<br>&gt;&gt;&gt;     &gt; &gt; -10, by: -1)`<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; IMO this:<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; (-9...0).reverse()<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; is better than<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; stride(from: 0, to: -10, by: -1)<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; What do you think?<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; --<br>&gt;&gt;&gt;     &gt; Dave<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; _______________________________________________<br>&gt;&gt;&gt;     &gt; swift-evolution mailing list<br>&gt;&gt;&gt;     &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     --<br>&gt;&gt;&gt;     Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;&gt;     swift-evolution at swift.org<br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
