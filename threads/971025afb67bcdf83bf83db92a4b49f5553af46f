<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Possible Proposal: Foundation corelibs API change necessary for NSPredicate</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>December 14, 2015 at 01:00:00pm</p></header><div class="content"><p>I have a pending pull request that needs a little more work around NSPredicates, but in my testing on darwin foundation, I’ve discovered what appears to be an obj-c nullability annotation bug. When constructing a block predicate, the type of the block is this:<br></p><p>(AnyObject, [String: AnyObject]?) -&gt; Bool<br></p><p>However, the type signature of evaluateObject(_:substitutionVariables:) is<br></p><p>(AnyObject?, [String: AnyObject]?) -&gt; Bool<br></p><p>Note the optional AnyObject here. In Xcode 7.2 with swift 2.1, the following code causes an EXC_BAD_ACCESS signal when calling evaluateWithObject: in a playground:<br></p><p>let pred = NSPredicate(block: { (obj: AnyObject, bindings: [String: AnyObject]?) -&gt; Bool in<br>    print(obj)<br>    return false<br>})<br>print(pred.evaluateWithObject(nil))<br></p><p>because obj is in fact optional here, but the type of the block does not allow for this.<br></p><p>There are two possible approaches here; removing the optional type from evaluateWithObject, or adding it to the block constructor for NSPredicate. Such a change is also presumably trivial to port back to darwin foundation, as that at minimum would need to merely change nullability annotations for these components of NSPredicate. These involve a public-api change which by my understanding needs to go through the swift evolution process.<br></p><p>Before sending this over to swift-evolution which is already pretty high-traffic, I wanted to float this here to make sure that this is appropriate for that process. Is it enough to draft a proposal outright or for comprehensiveness sake should I also send this out to that list to open discussion first?<br></p><p>Is there anyone on this list that has an opinion over which approach to take for changing the api here?<br></p><p>Thanks!<br></p><p>--<br>Kevin Lundberg<br>kevin at klundberg.com<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151214/9710f46f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Possible Proposal: Foundation corelibs API change necessary for NSPredicate</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>December 14, 2015 at 10:00:00am</p></header><div class="content"><p>This might actually just be a bug in our annotations of what is nullable and what is not. I would have to double check but it seems pretty reasonable that it should have been nullable to begin with.<br></p><p>&gt; On Dec 14, 2015, at 10:06 AM, Kevin Lundberg via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I have a pending pull request that needs a little more work around NSPredicates, but in my testing on darwin foundation, I’ve discovered what appears to be an obj-c nullability annotation bug. When constructing a block predicate, the type of the block is this:<br>&gt; <br>&gt; (AnyObject, [String: AnyObject]?) -&gt; Bool<br>&gt; <br>&gt; However, the type signature of evaluateObject(_:substitutionVariables:) is<br>&gt; <br>&gt; (AnyObject?, [String: AnyObject]?) -&gt; Bool<br>&gt; <br>&gt; Note the optional AnyObject here. In Xcode 7.2 with swift 2.1, the following code causes an EXC_BAD_ACCESS signal when calling evaluateWithObject: in a playground:<br>&gt; <br>&gt; let pred = NSPredicate(block: { (obj: AnyObject, bindings: [String: AnyObject]?) -&gt; Bool in<br>&gt;     print(obj)<br>&gt;     return false<br>&gt; })<br>&gt; print(pred.evaluateWithObject(nil))<br>&gt; <br>&gt; because obj is in fact optional here, but the type of the block does not allow for this.<br>&gt; <br>&gt; There are two possible approaches here; removing the optional type from evaluateWithObject, or adding it to the block constructor for NSPredicate. Such a change is also presumably trivial to port back to darwin foundation, as that at minimum would need to merely change nullability annotations for these components of NSPredicate. These involve a public-api change which by my understanding needs to go through the swift evolution process.<br>&gt; <br>&gt; Before sending this over to swift-evolution which is already pretty high-traffic, I wanted to float this here to make sure that this is appropriate for that process. Is it enough to draft a proposal outright or for comprehensiveness sake should I also send this out to that list to open discussion first?<br>&gt; <br>&gt; Is there anyone on this list that has an opinion over which approach to take for changing the api here?<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; --<br>&gt; Kevin Lundberg<br>&gt; kevin at klundberg.com &lt;mailto:kevin at klundberg.com&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151214/51f60d99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Possible Proposal: Foundation corelibs API change necessary for NSPredicate</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>December 14, 2015 at 01:00:00pm</p></header><div class="content"><p>Great, should I file a radar on bugreport.apple.com for this? And if it’s simple enough to fix that can I apply the same fix to the SwiftFoundation API as a PR without any extra process?<br></p><p>--<br>Kevin Lundberg<br>kevin at klundberg.com<br></p><p>&gt; On Dec 14, 2015, at 1:09 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; This might actually just be a bug in our annotations of what is nullable and what is not. I would have to double check but it seems pretty reasonable that it should have been nullable to begin with.<br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 10:06 AM, Kevin Lundberg via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have a pending pull request that needs a little more work around NSPredicates, but in my testing on darwin foundation, I’ve discovered what appears to be an obj-c nullability annotation bug. When constructing a block predicate, the type of the block is this:<br>&gt;&gt; <br>&gt;&gt; (AnyObject, [String: AnyObject]?) -&gt; Bool<br>&gt;&gt; <br>&gt;&gt; However, the type signature of evaluateObject(_:substitutionVariables:) is<br>&gt;&gt; <br>&gt;&gt; (AnyObject?, [String: AnyObject]?) -&gt; Bool<br>&gt;&gt; <br>&gt;&gt; Note the optional AnyObject here. In Xcode 7.2 with swift 2.1, the following code causes an EXC_BAD_ACCESS signal when calling evaluateWithObject: in a playground:<br>&gt;&gt; <br>&gt;&gt; let pred = NSPredicate(block: { (obj: AnyObject, bindings: [String: AnyObject]?) -&gt; Bool in<br>&gt;&gt;     print(obj)<br>&gt;&gt;     return false<br>&gt;&gt; })<br>&gt;&gt; print(pred.evaluateWithObject(nil))<br>&gt;&gt; <br>&gt;&gt; because obj is in fact optional here, but the type of the block does not allow for this.<br>&gt;&gt; <br>&gt;&gt; There are two possible approaches here; removing the optional type from evaluateWithObject, or adding it to the block constructor for NSPredicate. Such a change is also presumably trivial to port back to darwin foundation, as that at minimum would need to merely change nullability annotations for these components of NSPredicate. These involve a public-api change which by my understanding needs to go through the swift evolution process.<br>&gt;&gt; <br>&gt;&gt; Before sending this over to swift-evolution which is already pretty high-traffic, I wanted to float this here to make sure that this is appropriate for that process. Is it enough to draft a proposal outright or for comprehensiveness sake should I also send this out to that list to open discussion first?<br>&gt;&gt; <br>&gt;&gt; Is there anyone on this list that has an opinion over which approach to take for changing the api here?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Kevin Lundberg<br>&gt;&gt; kevin at klundberg.com &lt;mailto:kevin at klundberg.com&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151214/ea4879bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Possible Proposal: Foundation corelibs API change necessary for NSPredicate</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>December 14, 2015 at 10:00:00am</p></header><div class="content"><p>As a general rule of thumb we ❤️radars. In this case I have already filed a bug with the component owner since it clearly looks like this is perhaps a incorrectly annotated API. So a PR for this is quite reasonable to change to ? since it would be a bit difficult to implement else wise.<br></p><p>&gt; On Dec 14, 2015, at 10:22 AM, Kevin Lundberg &lt;kevin at klundberg.com&gt; wrote:<br>&gt; <br>&gt; Great, should I file a radar on bugreport.apple.com &lt;http://bugreport.apple.com/&gt; for this? And if it’s simple enough to fix that can I apply the same fix to the SwiftFoundation API as a PR without any extra process?<br>&gt; <br>&gt; --<br>&gt; Kevin Lundberg<br>&gt; kevin at klundberg.com &lt;mailto:kevin at klundberg.com&gt;<br>&gt;&gt; On Dec 14, 2015, at 1:09 PM, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This might actually just be a bug in our annotations of what is nullable and what is not. I would have to double check but it seems pretty reasonable that it should have been nullable to begin with.<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 14, 2015, at 10:06 AM, Kevin Lundberg via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have a pending pull request that needs a little more work around NSPredicates, but in my testing on darwin foundation, I’ve discovered what appears to be an obj-c nullability annotation bug. When constructing a block predicate, the type of the block is this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (AnyObject, [String: AnyObject]?) -&gt; Bool<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, the type signature of evaluateObject(_:substitutionVariables:) is<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (AnyObject?, [String: AnyObject]?) -&gt; Bool<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note the optional AnyObject here. In Xcode 7.2 with swift 2.1, the following code causes an EXC_BAD_ACCESS signal when calling evaluateWithObject: in a playground:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let pred = NSPredicate(block: { (obj: AnyObject, bindings: [String: AnyObject]?) -&gt; Bool in<br>&gt;&gt;&gt;     print(obj)<br>&gt;&gt;&gt;     return false<br>&gt;&gt;&gt; })<br>&gt;&gt;&gt; print(pred.evaluateWithObject(nil))<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; because obj is in fact optional here, but the type of the block does not allow for this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are two possible approaches here; removing the optional type from evaluateWithObject, or adding it to the block constructor for NSPredicate. Such a change is also presumably trivial to port back to darwin foundation, as that at minimum would need to merely change nullability annotations for these components of NSPredicate. These involve a public-api change which by my understanding needs to go through the swift evolution process.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Before sending this over to swift-evolution which is already pretty high-traffic, I wanted to float this here to make sure that this is appropriate for that process. Is it enough to draft a proposal outright or for comprehensiveness sake should I also send this out to that list to open discussion first?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there anyone on this list that has an opinion over which approach to take for changing the api here?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Kevin Lundberg<br>&gt;&gt;&gt; kevin at klundberg.com &lt;mailto:kevin at klundberg.com&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151214/d6a56ec2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
