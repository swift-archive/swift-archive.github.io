<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>Good day, Swift package manager development folks.<br></p><p>(There are at least two separate issues being inquired about, but with <br>the same introductory context.)<br></p><p>&quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are <br>agonizingly locked-down environments.  Essentially Swift and all of its <br>dependencies and one&#39;s project&#39;s dependencies must be stuffed into an <br>arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually <br>/app/ ) and build processes performed without any root-user privileges.  <br>One consequence is that one cannot use the OS&#39; package-management system <br>to install dependencies, but one must obtain them and wrestle them into <br>&quot;the hole,&quot; instead.  The strategy seems rather silly.<br></p><p>While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be <br>deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; <br>command, I have come across a few issues.<br></p><p>One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who <br>then invokes a &#39;swiftc&#39; command, but the environment provided to this <br>last is insufficient for the dynamic loader to gain knowledge of <br>libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH <br>variable.  This variable and other environment-variables present for the <br>parent processes are not provided to the &#39;swiftc&#39; command.  This means <br>that libraries are searched for in the usual OS locations, but due to <br>the locked-down CloudFoundry environment, they won&#39;t be found.  At one <br>point I was able to find a &#39;popen&#39; in an older version of Swift that <br>seemed to be responsible, but I cannot find it in the Swift 3 <br>[prototype] source-code.<br></p><p>Is there a good reason to discard these environment-variables, or would <br>it be reasonable to introduce some logic for &#39;swift-build&#39; to pass its <br>environment-variables to its child &#39;swiftc&#39; process(es)?<br></p><p>Thank you for your time and attention.<br>-- <br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>July  4, 2016 at 09:00:00pm</p></header><div class="content"><p>Good day, folks.<br></p><p>I am using the cflinux2fs environment (whose base OS is Ubuntu 14.04.4 <br>LTS) suggested by Brian Croom. I have downloaded the following Swift:<br></p><p>https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz<br></p><p>I have extracted it and its dependencies into the /app/.delta/ <br>directory.  I am issuing the following command:<br></p><p>    swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -Xlinker <br>-L/app/.delta/ -v<br></p><p>I observe the following error:<br></p><p>    /home/vcap/app/.delta/usr/bin/clang++: error while loading shared <br>libraries: libLLVM-3.4.so.1: cannot open shared object file: No such <br>file or directory<br></p><p>The library is present at <br>/app/.delta/usr/lib/x86_64-linux-gnu/libLLVM-3.4.so.1<br></p><p>The environment for BASh includes both LIBRARY_PATH and LD_LIBRARY_PATH <br>variables, which both include the<br>/app/.delta/usr/lib/x86_64-linux-gnu/ directory.  These variables are <br>both exported.  Once again, the environment that clang++ is created <br>withdoes not include these critical environment variables.  The -Xlinker <br>doesn&#39;t seem to be helping, either.<br></p><p>My questions are:<br></p><p>Is my expectation for -Xlinker incorrect?  Is there a good reason to <br>discard these environment-variables, or would it be reasonable to <br>introduce some logic for &#39;swift-build&#39; to pass its inherited <br>environment-variables to its child process(es)?<br></p><p>Shao Miller<br>Synthetel Corporation<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt; Good day, Swift package manager development folks.<br>&gt;<br>&gt; (There are at least two separate issues being inquired about, but with<br>&gt; the same introductory context.)<br>&gt;<br>&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are<br>&gt; agonizingly locked-down environments.  Essentially Swift and all of<br>&gt; its dependencies and one&#39;s project&#39;s dependencies must be stuffed into<br>&gt; an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but<br>&gt; usually /app/ ) and build processes performed without any root-user<br>&gt; privileges.  One consequence is that one cannot use the OS&#39;<br>&gt; package-management system to install dependencies, but one must obtain<br>&gt; them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt; rather silly.<br>&gt;<br>&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt; command, I have come across a few issues.<br>&gt;<br>&gt; One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who<br>&gt; then invokes a &#39;swiftc&#39; command, but the environment provided to this<br>&gt; last is insufficient for the dynamic loader to gain knowledge of<br>&gt; libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH<br>&gt; variable.  This variable and other environment-variables present for<br>&gt; the parent processes are not provided to the &#39;swiftc&#39; command.  This<br>&gt; means that libraries are searched for in the usual OS locations, but<br>&gt; due to the locked-down CloudFoundry environment, they won&#39;t be found.<br>&gt; At one point I was able to find a &#39;popen&#39; in an older version of Swift<br>&gt; that seemed to be responsible, but I cannot find it in the Swift 3<br>&gt; [prototype] source-code.<br>&gt;<br>&gt; Is there a good reason to discard these environment-variables, or<br>&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to<br>&gt; pass its environment-variables to its child &#39;swiftc&#39; process(es)?<br>&gt;<br>&gt; Thank you for your time and attention.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>July  4, 2016 at 10:00:00pm</p></header><div class="content"><p>Please disregard my mention of -Xlinker, as I was temporarily confused <br>by the error-message.<br></p><p>If I rename clang to clang.orig and introduce a fake clang as a script <br>that establishes LD_LIBRARY_PATH and invokes clang.orig, all is well. <br>This allows the following question to remain:<br></p><p>Is there a good reason to discard these environment-variables, or would <br>it be reasonable to introduce some logic for &#39;swift-build&#39; to pass its <br>inherited environment-variables to its child process(es)?<br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 7/4/2016 21:49, Shao Miller via swift-build-dev wrote:<br>&gt; Good day, folks.<br>&gt;<br>&gt; I am using the cflinux2fs environment (whose base OS is Ubuntu 14.04.4<br>&gt; LTS) suggested by Brian Croom. I have downloaded the following Swift:<br>&gt;<br>&gt; https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz<br>&gt;<br>&gt;<br>&gt; I have extracted it and its dependencies into the /app/.delta/<br>&gt; directory.  I am issuing the following command:<br>&gt;<br>&gt;    swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -Xlinker<br>&gt; -L/app/.delta/ -v<br>&gt;<br>&gt; I observe the following error:<br>&gt;<br>&gt;    /home/vcap/app/.delta/usr/bin/clang++: error while loading shared<br>&gt; libraries: libLLVM-3.4.so.1: cannot open shared object file: No such<br>&gt; file or directory<br>&gt;<br>&gt; The library is present at<br>&gt; /app/.delta/usr/lib/x86_64-linux-gnu/libLLVM-3.4.so.1<br>&gt;<br>&gt; The environment for BASh includes both LIBRARY_PATH and<br>&gt; LD_LIBRARY_PATH variables, which both include the<br>&gt; /app/.delta/usr/lib/x86_64-linux-gnu/ directory.  These variables are<br>&gt; both exported.  Once again, the environment that clang++ is created<br>&gt; withdoes not include these critical environment variables.  The<br>&gt; -Xlinker doesn&#39;t seem to be helping, either.<br>&gt;<br>&gt; My questions are:<br>&gt;<br>&gt; Is my expectation for -Xlinker incorrect?  Is there a good reason to<br>&gt; discard these environment-variables, or would it be reasonable to<br>&gt; introduce some logic for &#39;swift-build&#39; to pass its inherited<br>&gt; environment-variables to its child process(es)?<br>&gt;<br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt; On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt;&gt; Good day, Swift package manager development folks.<br>&gt;&gt;<br>&gt;&gt; (There are at least two separate issues being inquired about, but with<br>&gt;&gt; the same introductory context.)<br>&gt;&gt;<br>&gt;&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are<br>&gt;&gt; agonizingly locked-down environments.  Essentially Swift and all of<br>&gt;&gt; its dependencies and one&#39;s project&#39;s dependencies must be stuffed into<br>&gt;&gt; an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but<br>&gt;&gt; usually /app/ ) and build processes performed without any root-user<br>&gt;&gt; privileges.  One consequence is that one cannot use the OS&#39;<br>&gt;&gt; package-management system to install dependencies, but one must obtain<br>&gt;&gt; them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;&gt; rather silly.<br>&gt;&gt;<br>&gt;&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;<br>&gt;&gt; One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who<br>&gt;&gt; then invokes a &#39;swiftc&#39; command, but the environment provided to this<br>&gt;&gt; last is insufficient for the dynamic loader to gain knowledge of<br>&gt;&gt; libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH<br>&gt;&gt; variable.  This variable and other environment-variables present for<br>&gt;&gt; the parent processes are not provided to the &#39;swiftc&#39; command. This<br>&gt;&gt; means that libraries are searched for in the usual OS locations, but<br>&gt;&gt; due to the locked-down CloudFoundry environment, they won&#39;t be found.<br>&gt;&gt; At one point I was able to find a &#39;popen&#39; in an older version of Swift<br>&gt;&gt; that seemed to be responsible, but I cannot find it in the Swift 3<br>&gt;&gt; [prototype] source-code.<br>&gt;&gt;<br>&gt;&gt; Is there a good reason to discard these environment-variables, or<br>&gt;&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to<br>&gt;&gt; pass its environment-variables to its child &#39;swiftc&#39; process(es)?<br>&gt;&gt;<br>&gt;&gt; Thank you for your time and attention.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>July 12, 2016 at 08:00:00pm</p></header><div class="content"><p>Good day, Swift build folks.<br></p><p>Given that nobody has volunteered an answer, does anyone have any <br>suggestions for how I should best pursue the answer to this question?  <br>Should I track down where the sub-process is spawned, then &#39;git blame&#39; <br>and contact the author, directly?<br></p><p>Thanks for reading.<br></p><p>- Shao Miller<br></p><p>On 7/4/2016 22:45, Shao Miller via swift-build-dev wrote:<br>&gt; Please disregard my mention of -Xlinker, as I was temporarily confused <br>&gt; by the error-message.<br>&gt;<br>&gt; If I rename clang to clang.orig and introduce a fake clang as a script <br>&gt; that establishes LD_LIBRARY_PATH and invokes clang.orig, all is well. <br>&gt; This allows the following question to remain:<br>&gt;<br>&gt; Is there a good reason to discard these environment-variables, or <br>&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to <br>&gt; pass its inherited environment-variables to its child process(es)?<br>&gt;<br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt; On 7/4/2016 21:49, Shao Miller via swift-build-dev wrote:<br>&gt;&gt; Good day, folks.<br>&gt;&gt;<br>&gt;&gt; I am using the cflinux2fs environment (whose base OS is Ubuntu 14.04.4<br>&gt;&gt; LTS) suggested by Brian Croom. I have downloaded the following Swift:<br>&gt;&gt;<br>&gt;&gt; https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz <br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I have extracted it and its dependencies into the /app/.delta/<br>&gt;&gt; directory.  I am issuing the following command:<br>&gt;&gt;<br>&gt;&gt;    swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -Xlinker<br>&gt;&gt; -L/app/.delta/ -v<br>&gt;&gt;<br>&gt;&gt; I observe the following error:<br>&gt;&gt;<br>&gt;&gt;    /home/vcap/app/.delta/usr/bin/clang++: error while loading shared<br>&gt;&gt; libraries: libLLVM-3.4.so.1: cannot open shared object file: No such<br>&gt;&gt; file or directory<br>&gt;&gt;<br>&gt;&gt; The library is present at<br>&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/libLLVM-3.4.so.1<br>&gt;&gt;<br>&gt;&gt; The environment for BASh includes both LIBRARY_PATH and<br>&gt;&gt; LD_LIBRARY_PATH variables, which both include the<br>&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/ directory.  These variables are<br>&gt;&gt; both exported.  Once again, the environment that clang++ is created<br>&gt;&gt; withdoes not include these critical environment variables.  The<br>&gt;&gt; -Xlinker doesn&#39;t seem to be helping, either.<br>&gt;&gt;<br>&gt;&gt; My questions are:<br>&gt;&gt;<br>&gt;&gt; Is my expectation for -Xlinker incorrect?  Is there a good reason to<br>&gt;&gt; discard these environment-variables, or would it be reasonable to<br>&gt;&gt; introduce some logic for &#39;swift-build&#39; to pass its inherited<br>&gt;&gt; environment-variables to its child process(es)?<br>&gt;&gt;<br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;<br>&gt;&gt; On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt; Good day, Swift package manager development folks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (There are at least two separate issues being inquired about, but with<br>&gt;&gt;&gt; the same introductory context.)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are<br>&gt;&gt;&gt; agonizingly locked-down environments.  Essentially Swift and all of<br>&gt;&gt;&gt; its dependencies and one&#39;s project&#39;s dependencies must be stuffed into<br>&gt;&gt;&gt; an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but<br>&gt;&gt;&gt; usually /app/ ) and build processes performed without any root-user<br>&gt;&gt;&gt; privileges.  One consequence is that one cannot use the OS&#39;<br>&gt;&gt;&gt; package-management system to install dependencies, but one must obtain<br>&gt;&gt;&gt; them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;&gt;&gt; rather silly.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt;&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who<br>&gt;&gt;&gt; then invokes a &#39;swiftc&#39; command, but the environment provided to this<br>&gt;&gt;&gt; last is insufficient for the dynamic loader to gain knowledge of<br>&gt;&gt;&gt; libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH<br>&gt;&gt;&gt; variable.  This variable and other environment-variables present for<br>&gt;&gt;&gt; the parent processes are not provided to the &#39;swiftc&#39; command. This<br>&gt;&gt;&gt; means that libraries are searched for in the usual OS locations, but<br>&gt;&gt;&gt; due to the locked-down CloudFoundry environment, they won&#39;t be found.<br>&gt;&gt;&gt; At one point I was able to find a &#39;popen&#39; in an older version of Swift<br>&gt;&gt;&gt; that seemed to be responsible, but I cannot find it in the Swift 3<br>&gt;&gt;&gt; [prototype] source-code.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is there a good reason to discard these environment-variables, or<br>&gt;&gt;&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to<br>&gt;&gt;&gt; pass its environment-variables to its child &#39;swiftc&#39; process(es)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you for your time and attention.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>July 21, 2016 at 02:00:00pm</p></header><div class="content"><p>Does this issue not appear to block Swift from being a successful <br>back-end choice with CloudFoundry-based application-deployment options, <br>including Pivotal, Heroku and IBM Bluemix?  I&#39;m surprised and <br>disappointed by the lack of discussion.  I would guess that it would be <br>unfortunate to release Swift 3 and find that no CloudFoundry people can <br>use it because it (Swift) doesn&#39;t co-operate with the limitations of <br>those environments.<br></p><p>Shao Miller<br>Synthetel Corporation<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 7/12/2016 20:43, Shao Miller via swift-build-dev wrote:<br>&gt; Good day, Swift build folks.<br>&gt;<br>&gt; Given that nobody has volunteered an answer, does anyone have any <br>&gt; suggestions for how I should best pursue the answer to this question?  <br>&gt; Should I track down where the sub-process is spawned, then &#39;git blame&#39; <br>&gt; and contact the author, directly?<br>&gt;<br>&gt; Thanks for reading.<br>&gt;<br>&gt; - Shao Miller<br>&gt;<br>&gt; On 7/4/2016 22:45, Shao Miller via swift-build-dev wrote:<br>&gt;&gt; Please disregard my mention of -Xlinker, as I was temporarily <br>&gt;&gt; confused by the error-message.<br>&gt;&gt;<br>&gt;&gt; If I rename clang to clang.orig and introduce a fake clang as a <br>&gt;&gt; script that establishes LD_LIBRARY_PATH and invokes clang.orig, all <br>&gt;&gt; is well. This allows the following question to remain:<br>&gt;&gt;<br>&gt;&gt; Is there a good reason to discard these environment-variables, or <br>&gt;&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to <br>&gt;&gt; pass its inherited environment-variables to its child process(es)?<br>&gt;&gt;<br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;<br>&gt;&gt; On 7/4/2016 21:49, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt; Good day, folks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I am using the cflinux2fs environment (whose base OS is Ubuntu 14.04.4<br>&gt;&gt;&gt; LTS) suggested by Brian Croom. I have downloaded the following Swift:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz <br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have extracted it and its dependencies into the /app/.delta/<br>&gt;&gt;&gt; directory.  I am issuing the following command:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -Xlinker<br>&gt;&gt;&gt; -L/app/.delta/ -v<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I observe the following error:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    /home/vcap/app/.delta/usr/bin/clang++: error while loading shared<br>&gt;&gt;&gt; libraries: libLLVM-3.4.so.1: cannot open shared object file: No such<br>&gt;&gt;&gt; file or directory<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The library is present at<br>&gt;&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/libLLVM-3.4.so.1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The environment for BASh includes both LIBRARY_PATH and<br>&gt;&gt;&gt; LD_LIBRARY_PATH variables, which both include the<br>&gt;&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/ directory.  These variables are<br>&gt;&gt;&gt; both exported.  Once again, the environment that clang++ is created<br>&gt;&gt;&gt; withdoes not include these critical environment variables. The<br>&gt;&gt;&gt; -Xlinker doesn&#39;t seem to be helping, either.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; My questions are:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is my expectation for -Xlinker incorrect?  Is there a good reason to<br>&gt;&gt;&gt; discard these environment-variables, or would it be reasonable to<br>&gt;&gt;&gt; introduce some logic for &#39;swift-build&#39; to pass its inherited<br>&gt;&gt;&gt; environment-variables to its child process(es)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt;&gt; Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; (There are at least two separate issues being inquired about, but with<br>&gt;&gt;&gt;&gt; the same introductory context.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are<br>&gt;&gt;&gt;&gt; agonizingly locked-down environments.  Essentially Swift and all of<br>&gt;&gt;&gt;&gt; its dependencies and one&#39;s project&#39;s dependencies must be stuffed into<br>&gt;&gt;&gt;&gt; an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but<br>&gt;&gt;&gt;&gt; usually /app/ ) and build processes performed without any root-user<br>&gt;&gt;&gt;&gt; privileges.  One consequence is that one cannot use the OS&#39;<br>&gt;&gt;&gt;&gt; package-management system to install dependencies, but one must obtain<br>&gt;&gt;&gt;&gt; them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;&gt;&gt;&gt; rather silly.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt;&gt;&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who<br>&gt;&gt;&gt;&gt; then invokes a &#39;swiftc&#39; command, but the environment provided to this<br>&gt;&gt;&gt;&gt; last is insufficient for the dynamic loader to gain knowledge of<br>&gt;&gt;&gt;&gt; libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH<br>&gt;&gt;&gt;&gt; variable.  This variable and other environment-variables present for<br>&gt;&gt;&gt;&gt; the parent processes are not provided to the &#39;swiftc&#39; command. This<br>&gt;&gt;&gt;&gt; means that libraries are searched for in the usual OS locations, but<br>&gt;&gt;&gt;&gt; due to the locked-down CloudFoundry environment, they won&#39;t be found.<br>&gt;&gt;&gt;&gt; At one point I was able to find a &#39;popen&#39; in an older version of Swift<br>&gt;&gt;&gt;&gt; that seemed to be responsible, but I cannot find it in the Swift 3<br>&gt;&gt;&gt;&gt; [prototype] source-code.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is there a good reason to discard these environment-variables, or<br>&gt;&gt;&gt;&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to<br>&gt;&gt;&gt;&gt; pass its environment-variables to its child &#39;swiftc&#39; process(es)?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thank you for your time and attention.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>July 21, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Shao,<br></p><p>You are right, this is a very big issue currently. The unfortunate reality of SwiftPM is that it is still very early days, and while people are doing all sorts of interesting cool things with it, there are also a long list of major limitations.<br></p><p>We do have some bugs tracking this area, like:<br>  https://bugs.swift.org/browse/SR-2048<br>  https://bugs.swift.org/browse/SR-1968<br></p><p>That said, I know many people are able to get some things running on various PaaS platforms (including Heroku and CloudFoundry-based things) so it is not completely blocking use in those environments.<br></p><p> - Daniel<br></p><p>&gt; On Jul 21, 2016, at 11:07 AM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Does this issue not appear to block Swift from being a successful back-end choice with CloudFoundry-based application-deployment options, including Pivotal, Heroku and IBM Bluemix?  I&#39;m surprised and disappointed by the lack of discussion.  I would guess that it would be unfortunate to release Swift 3 and find that no CloudFoundry people can use it because it (Swift) doesn&#39;t co-operate with the limitations of those environments.<br>&gt; <br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; W: https://www.synthetel.com<br>&gt; <br>&gt; On 7/12/2016 20:43, Shao Miller via swift-build-dev wrote:<br>&gt;&gt; Good day, Swift build folks.<br>&gt;&gt; <br>&gt;&gt; Given that nobody has volunteered an answer, does anyone have any suggestions for how I should best pursue the answer to this question?  Should I track down where the sub-process is spawned, then &#39;git blame&#39; and contact the author, directly?<br>&gt;&gt; <br>&gt;&gt; Thanks for reading.<br>&gt;&gt; <br>&gt;&gt; - Shao Miller<br>&gt;&gt; <br>&gt;&gt; On 7/4/2016 22:45, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt; Please disregard my mention of -Xlinker, as I was temporarily confused by the error-message.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If I rename clang to clang.orig and introduce a fake clang as a script that establishes LD_LIBRARY_PATH and invokes clang.orig, all is well. This allows the following question to remain:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a good reason to discard these environment-variables, or would it be reasonable to introduce some logic for &#39;swift-build&#39; to pass its inherited environment-variables to its child process(es)?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 7/4/2016 21:49, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt;&gt; Good day, folks.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am using the cflinux2fs environment (whose base OS is Ubuntu 14.04.4<br>&gt;&gt;&gt;&gt; LTS) suggested by Brian Croom. I have downloaded the following Swift:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have extracted it and its dependencies into the /app/.delta/<br>&gt;&gt;&gt;&gt; directory.  I am issuing the following command:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -Xlinker<br>&gt;&gt;&gt;&gt; -L/app/.delta/ -v<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I observe the following error:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   /home/vcap/app/.delta/usr/bin/clang++: error while loading shared<br>&gt;&gt;&gt;&gt; libraries: libLLVM-3.4.so.1: cannot open shared object file: No such<br>&gt;&gt;&gt;&gt; file or directory<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The library is present at<br>&gt;&gt;&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/libLLVM-3.4.so.1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The environment for BASh includes both LIBRARY_PATH and<br>&gt;&gt;&gt;&gt; LD_LIBRARY_PATH variables, which both include the<br>&gt;&gt;&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/ directory.  These variables are<br>&gt;&gt;&gt;&gt; both exported.  Once again, the environment that clang++ is created<br>&gt;&gt;&gt;&gt; withdoes not include these critical environment variables. The<br>&gt;&gt;&gt;&gt; -Xlinker doesn&#39;t seem to be helping, either.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My questions are:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is my expectation for -Xlinker incorrect?  Is there a good reason to<br>&gt;&gt;&gt;&gt; discard these environment-variables, or would it be reasonable to<br>&gt;&gt;&gt;&gt; introduce some logic for &#39;swift-build&#39; to pass its inherited<br>&gt;&gt;&gt;&gt; environment-variables to its child process(es)?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt;&gt;&gt; Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (There are at least two separate issues being inquired about, but with<br>&gt;&gt;&gt;&gt;&gt; the same introductory context.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are<br>&gt;&gt;&gt;&gt;&gt; agonizingly locked-down environments.  Essentially Swift and all of<br>&gt;&gt;&gt;&gt;&gt; its dependencies and one&#39;s project&#39;s dependencies must be stuffed into<br>&gt;&gt;&gt;&gt;&gt; an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but<br>&gt;&gt;&gt;&gt;&gt; usually /app/ ) and build processes performed without any root-user<br>&gt;&gt;&gt;&gt;&gt; privileges.  One consequence is that one cannot use the OS&#39;<br>&gt;&gt;&gt;&gt;&gt; package-management system to install dependencies, but one must obtain<br>&gt;&gt;&gt;&gt;&gt; them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;&gt;&gt;&gt;&gt; rather silly.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt;&gt;&gt;&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who<br>&gt;&gt;&gt;&gt;&gt; then invokes a &#39;swiftc&#39; command, but the environment provided to this<br>&gt;&gt;&gt;&gt;&gt; last is insufficient for the dynamic loader to gain knowledge of<br>&gt;&gt;&gt;&gt;&gt; libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH<br>&gt;&gt;&gt;&gt;&gt; variable.  This variable and other environment-variables present for<br>&gt;&gt;&gt;&gt;&gt; the parent processes are not provided to the &#39;swiftc&#39; command. This<br>&gt;&gt;&gt;&gt;&gt; means that libraries are searched for in the usual OS locations, but<br>&gt;&gt;&gt;&gt;&gt; due to the locked-down CloudFoundry environment, they won&#39;t be found.<br>&gt;&gt;&gt;&gt;&gt; At one point I was able to find a &#39;popen&#39; in an older version of Swift<br>&gt;&gt;&gt;&gt;&gt; that seemed to be responsible, but I cannot find it in the Swift 3<br>&gt;&gt;&gt;&gt;&gt; [prototype] source-code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is there a good reason to discard these environment-variables, or<br>&gt;&gt;&gt;&gt;&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to<br>&gt;&gt;&gt;&gt;&gt; pass its environment-variables to its child &#39;swiftc&#39; process(es)?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thank you for your time and attention.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Swift Build Missing LD_LIBRARY_PATH</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>July 22, 2016 at 03:00:00pm</p></header><div class="content"><p>Thank you for your kind response, Daniel.<br></p><p>I suppose my concern is that the currently working CloudFoundry options <br>might be using a version of Swift prior to the June 20th snapshot and <br>that Swift 3 (once released) will have had this issue slip past.  If <br>anyone is able to point out which source-code file for the swift-build <br>program is responsible for spawning the swiftc or clang programs, then <br>perhaps I can submit a patch.<br></p><p>Shao Miller<br>Synthetel Corporation<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 7/21/2016 14:26, Daniel Dunbar wrote:<br>&gt; Hi Shao,<br>&gt;<br>&gt; You are right, this is a very big issue currently. The unfortunate reality of SwiftPM is that it is still very early days, and while people are doing all sorts of interesting cool things with it, there are also a long list of major limitations.<br>&gt;<br>&gt; We do have some bugs tracking this area, like:<br>&gt;    https://bugs.swift.org/browse/SR-2048<br>&gt;    https://bugs.swift.org/browse/SR-1968<br>&gt;<br>&gt; That said, I know many people are able to get some things running on various PaaS platforms (including Heroku and CloudFoundry-based things) so it is not completely blocking use in those environments.<br>&gt;<br>&gt;   - Daniel<br>&gt;<br>&gt;&gt; On Jul 21, 2016, at 11:07 AM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Does this issue not appear to block Swift from being a successful back-end choice with CloudFoundry-based application-deployment options, including Pivotal, Heroku and IBM Bluemix?  I&#39;m surprised and disappointed by the lack of discussion.  I would guess that it would be unfortunate to release Swift 3 and find that no CloudFoundry people can use it because it (Swift) doesn&#39;t co-operate with the limitations of those environments.<br>&gt;&gt;<br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;<br>&gt;&gt; On 7/12/2016 20:43, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt; Good day, Swift build folks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Given that nobody has volunteered an answer, does anyone have any suggestions for how I should best pursue the answer to this question?  Should I track down where the sub-process is spawned, then &#39;git blame&#39; and contact the author, directly?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks for reading.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Shao Miller<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 7/4/2016 22:45, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt;&gt; Please disregard my mention of -Xlinker, as I was temporarily confused by the error-message.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If I rename clang to clang.orig and introduce a fake clang as a script that establishes LD_LIBRARY_PATH and invokes clang.orig, all is well. This allows the following question to remain:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is there a good reason to discard these environment-variables, or would it be reasonable to introduce some logic for &#39;swift-build&#39; to pass its inherited environment-variables to its child process(es)?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 7/4/2016 21:49, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt;&gt;&gt; Good day, folks.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I am using the cflinux2fs environment (whose base OS is Ubuntu 14.04.4<br>&gt;&gt;&gt;&gt;&gt; LTS) suggested by Brian Croom. I have downloaded the following Swift:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I have extracted it and its dependencies into the /app/.delta/<br>&gt;&gt;&gt;&gt;&gt; directory.  I am issuing the following command:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;    swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -Xlinker<br>&gt;&gt;&gt;&gt;&gt; -L/app/.delta/ -v<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I observe the following error:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;    /home/vcap/app/.delta/usr/bin/clang++: error while loading shared<br>&gt;&gt;&gt;&gt;&gt; libraries: libLLVM-3.4.so.1: cannot open shared object file: No such<br>&gt;&gt;&gt;&gt;&gt; file or directory<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The library is present at<br>&gt;&gt;&gt;&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/libLLVM-3.4.so.1<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The environment for BASh includes both LIBRARY_PATH and<br>&gt;&gt;&gt;&gt;&gt; LD_LIBRARY_PATH variables, which both include the<br>&gt;&gt;&gt;&gt;&gt; /app/.delta/usr/lib/x86_64-linux-gnu/ directory.  These variables are<br>&gt;&gt;&gt;&gt;&gt; both exported.  Once again, the environment that clang++ is created<br>&gt;&gt;&gt;&gt;&gt; withdoes not include these critical environment variables. The<br>&gt;&gt;&gt;&gt;&gt; -Xlinker doesn&#39;t seem to be helping, either.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; My questions are:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Is my expectation for -Xlinker incorrect?  Is there a good reason to<br>&gt;&gt;&gt;&gt;&gt; discard these environment-variables, or would it be reasonable to<br>&gt;&gt;&gt;&gt;&gt; introduce some logic for &#39;swift-build&#39; to pass its inherited<br>&gt;&gt;&gt;&gt;&gt; environment-variables to its child process(es)?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; (There are at least two separate issues being inquired about, but with<br>&gt;&gt;&gt;&gt;&gt;&gt; the same introductory context.)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are<br>&gt;&gt;&gt;&gt;&gt;&gt; agonizingly locked-down environments.  Essentially Swift and all of<br>&gt;&gt;&gt;&gt;&gt;&gt; its dependencies and one&#39;s project&#39;s dependencies must be stuffed into<br>&gt;&gt;&gt;&gt;&gt;&gt; an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but<br>&gt;&gt;&gt;&gt;&gt;&gt; usually /app/ ) and build processes performed without any root-user<br>&gt;&gt;&gt;&gt;&gt;&gt; privileges.  One consequence is that one cannot use the OS&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; package-management system to install dependencies, but one must obtain<br>&gt;&gt;&gt;&gt;&gt;&gt; them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;&gt;&gt;&gt;&gt;&gt; rather silly.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt;&gt;&gt;&gt;&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; One issue is that &#39;swift build&#39; invokes and &#39;swift-build&#39; command, who<br>&gt;&gt;&gt;&gt;&gt;&gt; then invokes a &#39;swiftc&#39; command, but the environment provided to this<br>&gt;&gt;&gt;&gt;&gt;&gt; last is insufficient for the dynamic loader to gain knowledge of<br>&gt;&gt;&gt;&gt;&gt;&gt; libraries present in &quot;the hole&quot; and specified by the LD_LIBRARY_PATH<br>&gt;&gt;&gt;&gt;&gt;&gt; variable.  This variable and other environment-variables present for<br>&gt;&gt;&gt;&gt;&gt;&gt; the parent processes are not provided to the &#39;swiftc&#39; command. This<br>&gt;&gt;&gt;&gt;&gt;&gt; means that libraries are searched for in the usual OS locations, but<br>&gt;&gt;&gt;&gt;&gt;&gt; due to the locked-down CloudFoundry environment, they won&#39;t be found.<br>&gt;&gt;&gt;&gt;&gt;&gt; At one point I was able to find a &#39;popen&#39; in an older version of Swift<br>&gt;&gt;&gt;&gt;&gt;&gt; that seemed to be responsible, but I cannot find it in the Swift 3<br>&gt;&gt;&gt;&gt;&gt;&gt; [prototype] source-code.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Is there a good reason to discard these environment-variables, or<br>&gt;&gt;&gt;&gt;&gt;&gt; would it be reasonable to introduce some logic for &#39;swift-build&#39; to<br>&gt;&gt;&gt;&gt;&gt;&gt; pass its environment-variables to its child &#39;swiftc&#39; process(es)?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you for your time and attention.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
