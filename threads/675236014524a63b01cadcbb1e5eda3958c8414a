<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Mar 24 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; <br>&gt;&gt; On Mar 24, 2016, at 2:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Just an update:<br>&gt;<br>&gt;&gt; <br>&gt;&gt; The naming guidelines working group went back into negotiation over<br>&gt;&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt;&gt; proposal for the API shown here:<br>&gt;&gt; <br>&gt;&gt;  http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;&gt; <br>&gt;&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;&gt; create a verb phrase for a mutating method when the operation is<br>&gt;&gt; fundamentally non-mutating and described by a noun.<br>&gt;<br>&gt; I&#39;ve got to say, I expected to hate this until I clicked the link and saw the actual <br>&gt; proposed syntax. For the most part, it&#39;s good: clear and readable.<br>&gt;<br>&gt; Not a fan of &quot;subtracting&quot; (would prefer &quot;bySubtracting&quot;). Other than that<br>&gt; really impressed by how this evolved.<br></p><p>      x by subtracting y<br></p><p>means, “give me x, and get it by subtracting y.”  The use of “byXXXing”<br>in existing Cocoa APIs doesn&#39;t really set a precedent because it was<br>always preceded by a noun that described the result being returned,<br>e.g. “x.stringByAppending(y),” which is a completely different thing.<br></p><p><br>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 24, 2016, at 6:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Mar 24 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 24, 2016, at 2:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just an update:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The naming guidelines working group went back into negotiation over<br>&gt;&gt;&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;&gt;&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt;&gt;&gt; proposal for the API shown here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;&gt;&gt; create a verb phrase for a mutating method when the operation is<br>&gt;&gt;&gt; fundamentally non-mutating and described by a noun.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve got to say, I expected to hate this until I clicked the link and saw the actual <br>&gt;&gt; proposed syntax. For the most part, it&#39;s good: clear and readable.<br>&gt;&gt; <br>&gt;&gt; Not a fan of &quot;subtracting&quot; (would prefer &quot;bySubtracting&quot;). Other than that<br>&gt;&gt; really impressed by how this evolved.<br>&gt; <br>&gt;      x by subtracting y<br>&gt; <br>&gt; means, “give me x, and get it by subtracting y.”  The use of “byXXXing”<br>&gt; in existing Cocoa APIs doesn&#39;t really set a precedent because it was<br>&gt; always preceded by a noun that described the result being returned,<br>&gt; e.g. “x.stringByAppending(y),” which is a completely different thing.<br>&gt; <br></p><p>So far in each of the naming situations where I have disliked a particular form<br>(&quot;subtracting&quot; here), the final results have been good.  Apparently<br>the strategy of pointing out the bad points and letting magic happen behind<br>the scenes is a successful one.<br></p><p>Because that&#39;s not very helpful: <br></p><p>* excluding<br>* differenceFrom<br>* minus<br>* excepting<br>* subtractingElementsFrom / subtractingElements(from: or of:<br> <br>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Mar 24 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Mar 24, 2016, at 6:19 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Mar 24 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 24, 2016, at 2:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just an update:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The naming guidelines working group went back into negotiation over<br>&gt;&gt;&gt;&gt; the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;&gt;&gt;&gt; Swift 3, and reached a new consensus.  We intend to bring forward a<br>&gt;&gt;&gt;&gt; proposal for the API shown here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;&gt;&gt;&gt; create a verb phrase for a mutating method when the operation is<br>&gt;&gt;&gt;&gt; fundamentally non-mutating and described by a noun.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve got to say, I expected to hate this until I clicked the link and saw the actual <br>&gt;&gt;&gt; proposed syntax. For the most part, it&#39;s good: clear and readable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not a fan of &quot;subtracting&quot; (would prefer &quot;bySubtracting&quot;). Other than that<br>&gt;&gt;&gt; really impressed by how this evolved.<br>&gt;&gt; <br>&gt;&gt;      x by subtracting y<br>&gt;&gt; <br>&gt;&gt; means, “give me x, and get it by subtracting y.”  The use of “byXXXing”<br>&gt;&gt; in existing Cocoa APIs doesn&#39;t really set a precedent because it was<br>&gt;&gt; always preceded by a noun that described the result being returned,<br>&gt;&gt; e.g. “x.stringByAppending(y),” which is a completely different thing.<br>&gt;&gt; <br>&gt;<br>&gt; So far in each of the naming situations where I have disliked a particular form<br>&gt; (&quot;subtracting&quot; here), the final results have been good.  Apparently<br>&gt; the strategy of pointing out the bad points and letting magic happen behind<br>&gt; the scenes is a successful one.<br>&gt;<br>&gt; Because that&#39;s not very helpful: <br>&gt;<br>&gt; * excluding<br>&gt; * differenceFrom<br>&gt; * minus<br>&gt; * excepting<br>&gt; * subtractingElementsFrom / subtractingElements(from: or of:<br></p><p>Don&#39;t forget, you need to come up with a pair of mutating/nonmutating<br>names.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
