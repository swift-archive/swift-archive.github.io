<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 17, 2015 at 06:00:00pm</p></header><div class="content"><p>How is it possible that higher kinded types are being discussed seriously while Python’s syntactic sugars (e.g., comprehensions) have been dismissed as too confusing?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 17, 2015 at 03:00:00pm</p></header><div class="content"><p>Different people are participating in different topics, so I wouldn&#39;t take<br>the different responses as indicative of the community&#39;s opinion as a whole.<br></p><p>Another thing: higher-kinded types would make it easier to implement the<br>sort of list comprehensions that languages like Scala have. The philosophy<br>of the language, as stated by multiple members of the core team, is to<br>prefer building tools that allow language features to be defined in<br>libraries, over hard-coding specific features into the language grammar and<br>specification. Here are a couple of examples:<br></p><p>- Custom operators and operator overloading, so things like &#39;+&#39; can be<br>defined in the standard library<br>- isUniquelyReferenced(), so that library developers can implement their<br>own collections with value semantics<br>- Literal convertible protocols, so that third-party types can be<br>initialized from literals in source code when it makes sense<br></p><p>Best,<br>Austin<br></p><p>On Thu, Dec 17, 2015 at 3:29 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; How is it possible that higher kinded types are being discussed seriously<br>&gt; while Python’s syntactic sugars (e.g., comprehensions) have been dismissed<br>&gt; as too confusing?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/45449832/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 17, 2015 at 07:00:00pm</p></header><div class="content"><p>Everybody understands what list comprehensions are about, what are the current options, and what the proposal adds. Not a lot of people understand higher kinded types, what are the current options, and what the proposal adds.<br></p><p>People are saying that the current equivalents for list comprehensions are good enough. HKT people are saying that there are things that are simply impossible in Swift right now.<br></p><p>&gt; Le 17 déc. 2015 à 18:29:14, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; How is it possible that higher kinded types are being discussed seriously while Python’s syntactic sugars (e.g., comprehensions) have been dismissed as too confusing?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 3:29 PM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How is it possible that higher kinded types are being discussed seriously while Python’s syntactic sugars (e.g., comprehensions) have been dismissed as too confusing?<br></p><p>Posting stuff like this isn&#39;t cool. Different people have different interests in different topics, and discussion isn&#39;t zero-sum; talking about topics you don&#39;t care about isn&#39;t exclusive to talking about ones you do.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 17, 2015 at 07:00:00pm</p></header><div class="content"><p>With a Cartesian Product type [like this](<br>https://github.com/griotspeak/CartesianProduct), the for-in-where syntax<br>actually gets us to list comprehensions. I&#39;ll admit that I might not have<br>implemented the best Cartesian Product type possible, but it should<br>illustrate that we have what we need.<br></p><p>`for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for<br>cartProd would make it more pleasing to read.`<br></p><p>On Thu, Dec 17, 2015 at 6:29 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; How is it possible that higher kinded types are being discussed seriously<br>&gt; while Python’s syntactic sugars (e.g., comprehensions) have been dismissed<br>&gt; as too confusing?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/9be30893/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; With a Cartesian Product type [like this](https://github.com/griotspeak/CartesianProduct &lt;https://github.com/griotspeak/CartesianProduct&gt;), the for-in-where syntax actually gets us to list comprehensions. I&#39;ll admit that I might not have implemented the best Cartesian Product type possible, but it should illustrate that we have what we need.<br>&gt; <br>&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for cartProd would make it more pleasing to read.`<br></p><p>That’s impressive work, but it strikes me as quite a difficult undertaking to get there. (Is it just me, or are generators and sequences the most scary part of Swift?) Also, is it possible to get it working as an expression, or is it restricted to a ‘for’ statement? If it can only be performed as a ‘for’ statement it will still need an external mutable var to be updated outside of the loop. It’s fine if you want to just do side-effecty things, like print the elements, but I’d consider the ability to return a value to be more important.<br></p><p>Al<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/95e027db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>Shouldn&#39;t `filter` accomplish that?<br></p><p>On Fri, Dec 18, 2015 at 7:35 AM, Al Skipp &lt;al_skipp at fastmail.fm&gt; wrote:<br></p><p>&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; With a Cartesian Product type [like this](<br>&gt; https://github.com/griotspeak/CartesianProduct), the for-in-where syntax<br>&gt; actually gets us to list comprehensions. I&#39;ll admit that I might not have<br>&gt; implemented the best Cartesian Product type possible, but it should<br>&gt; illustrate that we have what we need.<br>&gt;<br>&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for<br>&gt; cartProd would make it more pleasing to read.`<br>&gt;<br>&gt;<br>&gt; That’s impressive work, but it strikes me as quite a difficult undertaking<br>&gt; to get there. (Is it just me, or are generators and sequences the most<br>&gt; scary part of Swift?) Also, is it possible to get it working as an<br>&gt; expression, or is it restricted to a ‘for’ statement? If it can only be<br>&gt; performed as a ‘for’ statement it will still need an external mutable var<br>&gt; to be updated outside of the loop. It’s fine if you want to just do<br>&gt; side-effecty things, like print the elements, but I’d consider the ability<br>&gt; to return a value to be more important.<br>&gt;<br>&gt; Al<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/4849689b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 4:35 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; With a Cartesian Product type [like this](https://github.com/griotspeak/CartesianProduct &lt;https://github.com/griotspeak/CartesianProduct&gt;), the for-in-where syntax actually gets us to list comprehensions. I&#39;ll admit that I might not have implemented the best Cartesian Product type possible, but it should illustrate that we have what we need.<br>&gt;&gt; <br>&gt;&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for cartProd would make it more pleasing to read.`<br>&gt; <br>&gt; That’s impressive work, but it strikes me as quite a difficult undertaking to get there. (Is it just me, or are generators and sequences the most scary part of Swift?) Also, is it possible to get it working as an expression, or is it restricted to a ‘for’ statement? If it can only be performed as a ‘for’ statement it will still need an external mutable var to be updated outside of the loop. It’s fine if you want to just do side-effecty things, like print the elements, but I’d consider the ability to return a value to be more important.<br></p><p>This is a much simpler cartesian product implementation:<br></p><p>   seq1.flatMap { x in seq2.map { (x,$0) } }<br></p><p>or, if you want speed,<br></p><p>   seq1.lazy.flatMap { x in seq2.lazy.map { (x,$0) } }<br></p><p>HTH,<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/c81381e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>That is… damned nice. I choose not to feel that bad about it… for reasons.<br></p><p><br></p><p>On Fri, Dec 18, 2015 at 8:04 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 18, 2015, at 4:35 AM, Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; With a Cartesian Product type [like this](<br>&gt; https://github.com/griotspeak/CartesianProduct), the for-in-where syntax<br>&gt; actually gets us to list comprehensions. I&#39;ll admit that I might not have<br>&gt; implemented the best Cartesian Product type possible, but it should<br>&gt; illustrate that we have what we need.<br>&gt;<br>&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for<br>&gt; cartProd would make it more pleasing to read.`<br>&gt;<br>&gt;<br>&gt; That’s impressive work, but it strikes me as quite a difficult undertaking<br>&gt; to get there. (Is it just me, or are generators and sequences the most<br>&gt; scary part of Swift?) Also, is it possible to get it working as an<br>&gt; expression, or is it restricted to a ‘for’ statement? If it can only be<br>&gt; performed as a ‘for’ statement it will still need an external mutable var<br>&gt; to be updated outside of the loop. It’s fine if you want to just do<br>&gt; side-effecty things, like print the elements, but I’d consider the ability<br>&gt; to return a value to be more important.<br>&gt;<br>&gt;<br>&gt; This is a much simpler cartesian product implementation:<br>&gt;<br>&gt;    seq1.flatMap { x in seq2.map { (x,$0) } }<br>&gt;<br>&gt; or, if you want speed,<br>&gt;<br>&gt;    seq1*.lazy*.flatMap { x in seq2*.lazy*.map { (x,$0) } }<br>&gt;<br>&gt; HTH,<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/795ed7e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>Updated the library with that. The only downside that I can see is that<br>flattening, as I had always planned but finally bothered to do, has no way<br>to tell if the left tuple was the produce of a previous cartesian product<br>operation. Small price to pay and all that. Thanks for the insight!<br></p><p>On Fri, Dec 18, 2015 at 8:19 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br></p><p>&gt; That is… damned nice. I choose not to feel that bad about it… for reasons.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Fri, Dec 18, 2015 at 8:04 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 18, 2015, at 4:35 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; With a Cartesian Product type [like this](<br>&gt;&gt; https://github.com/griotspeak/CartesianProduct), the for-in-where syntax<br>&gt;&gt; actually gets us to list comprehensions. I&#39;ll admit that I might not have<br>&gt;&gt; implemented the best Cartesian Product type possible, but it should<br>&gt;&gt; illustrate that we have what we need.<br>&gt;&gt;<br>&gt;&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for<br>&gt;&gt; cartProd would make it more pleasing to read.`<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That’s impressive work, but it strikes me as quite a difficult<br>&gt;&gt; undertaking to get there. (Is it just me, or are generators and sequences<br>&gt;&gt; the most scary part of Swift?) Also, is it possible to get it working as an<br>&gt;&gt; expression, or is it restricted to a ‘for’ statement? If it can only be<br>&gt;&gt; performed as a ‘for’ statement it will still need an external mutable var<br>&gt;&gt; to be updated outside of the loop. It’s fine if you want to just do<br>&gt;&gt; side-effecty things, like print the elements, but I’d consider the ability<br>&gt;&gt; to return a value to be more important.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is a much simpler cartesian product implementation:<br>&gt;&gt;<br>&gt;&gt;    seq1.flatMap { x in seq2.map { (x,$0) } }<br>&gt;&gt;<br>&gt;&gt; or, if you want speed,<br>&gt;&gt;<br>&gt;&gt;    seq1*.lazy*.flatMap { x in seq2*.lazy*.map { (x,$0) } }<br>&gt;&gt;<br>&gt;&gt; HTH,<br>&gt;&gt;<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/c909375f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:46 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; Updated the library with that. The only downside that I can see is that flattening, as I had always planned but finally bothered to do, has no way to tell if the left tuple was the produce of a previous cartesian product operation.<br></p><p>Not sure what that means, I’m afraid.<br></p><p>&gt; Small price to pay and all that. Thanks for the insight!<br></p><p>Glad to help.<br></p><p>&gt; On Fri, Dec 18, 2015 at 8:19 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt; That is… damned nice. I choose not to feel that bad about it… for reasons.<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 8:04 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 4:35 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; With a Cartesian Product type [like this](https://github.com/griotspeak/CartesianProduct &lt;https://github.com/griotspeak/CartesianProduct&gt;), the for-in-where syntax actually gets us to list comprehensions. I&#39;ll admit that I might not have implemented the best Cartesian Product type possible, but it should illustrate that we have what we need.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for cartProd would make it more pleasing to read.`<br>&gt;&gt; <br>&gt;&gt; That’s impressive work, but it strikes me as quite a difficult undertaking to get there. (Is it just me, or are generators and sequences the most scary part of Swift?) Also, is it possible to get it working as an expression, or is it restricted to a ‘for’ statement? If it can only be performed as a ‘for’ statement it will still need an external mutable var to be updated outside of the loop. It’s fine if you want to just do side-effecty things, like print the elements, but I’d consider the ability to return a value to be more important.<br>&gt; <br>&gt; This is a much simpler cartesian product implementation:<br>&gt; <br>&gt;    seq1.flatMap { x in seq2.map { (x,$0) } }<br>&gt; <br>&gt; or, if you want speed,<br>&gt; <br>&gt;    seq1.lazy.flatMap { x in seq2.lazy.map { (x,$0) } }<br>&gt; <br>&gt; HTH,<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/70314fd2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>higher kinded types vs Python&#39;s syntactic sugars</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>I was just talking about this kind of thing (I&#39;ve updated the repo with up<br>to 5-tuples) for times where you seq1 • seq2 • seq3<br></p><p>// &#39;Cartesian product&#39; of a Cartesian product and a collection. Meant to<br>help manage type explosion.<br></p><p>public func •&lt;Left: SequenceType, Right: SequenceType, A, B where<br></p><p>    Left.Generator.Element == (A, B)&gt;(lhs:Left, rhs:Right) -&gt; [(A, B, Right.<br>Generator.Element)] {<br></p><p>        return lhs.flatMap { x in  rhs.map { (x.0, x.1, $0) } }<br></p><p>}<br></p><p><br>On Fri, Dec 18, 2015 at 9:25 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 18, 2015, at 5:46 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt; Updated the library with that. The only downside that I can see is that<br>&gt; flattening, as I had always planned but finally bothered to do, has no way<br>&gt; to tell if the left tuple was the produce of a previous cartesian product<br>&gt; operation.<br>&gt;<br>&gt;<br>&gt; Not sure what that means, I’m afraid.<br>&gt;<br>&gt; Small price to pay and all that. Thanks for the insight!<br>&gt;<br>&gt;<br>&gt; Glad to help.<br>&gt;<br>&gt; On Fri, Dec 18, 2015 at 8:19 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; That is… damned nice. I choose not to feel that bad about it… for reasons.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 18, 2015 at 8:04 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 18, 2015, at 4:35 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 18 Dec 2015, at 00:19, T.J. Usiyan via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; With a Cartesian Product type [like this](<br>&gt;&gt;&gt; https://github.com/griotspeak/CartesianProduct), the for-in-where<br>&gt;&gt;&gt; syntax actually gets us to list comprehensions. I&#39;ll admit that I might not<br>&gt;&gt;&gt; have implemented the best Cartesian Product type possible, but it should<br>&gt;&gt;&gt; illustrate that we have what we need.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; `for case … in cartProd(cartProd(seq1, seq2), seq3) // An operator for<br>&gt;&gt;&gt; cartProd would make it more pleasing to read.`<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That’s impressive work, but it strikes me as quite a difficult<br>&gt;&gt;&gt; undertaking to get there. (Is it just me, or are generators and sequences<br>&gt;&gt;&gt; the most scary part of Swift?) Also, is it possible to get it working as an<br>&gt;&gt;&gt; expression, or is it restricted to a ‘for’ statement? If it can only be<br>&gt;&gt;&gt; performed as a ‘for’ statement it will still need an external mutable var<br>&gt;&gt;&gt; to be updated outside of the loop. It’s fine if you want to just do<br>&gt;&gt;&gt; side-effecty things, like print the elements, but I’d consider the ability<br>&gt;&gt;&gt; to return a value to be more important.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is a much simpler cartesian product implementation:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    seq1.flatMap { x in seq2.map { (x,$0) } }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you want speed,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    seq1*.lazy*.flatMap { x in seq2*.lazy*.map { (x,$0) } }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; HTH,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/167c11b8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
