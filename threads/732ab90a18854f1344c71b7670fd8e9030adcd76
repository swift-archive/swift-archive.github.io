<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Method of same name is shadowing a property in Swift 3</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September 13, 2016 at 01:00:00pm</p></header><div class="content"><p>One of my co-workers just noticed a problem with the (bridged) API of our Objective-C framework, when used from Swift 3 (but not earlier). We have a class CBLQueryRow that includes the following:<br></p><p>	@property (readonly) id key;<br>	- (nullable id) keyAtIndex: (NSUInteger)index;<br></p><p>In Swift this becomes<br>	open var key: Any { get }<br>	open func key(at index: UInt) -&gt; Any?<br></p><p>The problem is that any reference to `key` now seems to refer to a pointer to the method, not to the property, leading to compiler diagnostics like the following (where `row` is a CBLQueryRow):<br></p><p>TaskListsViewController.swift:95:40: warning: cast from &#39;(UInt) -&gt; Any?&#39; to unrelated type &#39;String&#39; always fails<br>        cell.textLabel?.text = row.key as? String<br>                               ~~~~~~~ ^   ~~~~~~<br>That’s a warning not an error, but obviously at runtime the `as?` would always fail and result in nil.<br></p><p>This is rather bad for us, since the `key` property is a crucial part of the API, while the `key()` method that pre-empts it is obscure and little-used.<br></p><p>I can reproduce this in a playground in Xcode 8 like so:<br></p><p>protocol QueryRow {<br>    var key: Any { get }<br>    func key(at index: UInt) -&gt; Any?<br>}<br></p><p>var row: QueryRow<br></p><p>row.key as? String<br>In addition to the valid error about `row` being uninitialized, I also get the cast failure.<br></p><p>What’s the best workaround for this?<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160913/732acd76/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Method of same name is shadowing a property in Swift 3</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>September 13, 2016 at 03:00:00pm</p></header><div class="content"><p>As I see it, this is serious bug. In Swift 3.0, parameter labels (or lack of them) are supposed to be a part of the function name. <br>Otherwise, the two `key` definitions would create a name collision and should have been rejected in the first place. This should not happen, because only `key(at:)` should be treated as a method pointer and not `key`. Even the following example:<br></p><p>protocol QueryRow {<br>    var key: Any { get }<br>    func key(_ index: UInt) -&gt; Any?<br>}<br></p><p>should not create a collision as method pointer now is `key(_:)` and not `key`. I guess the reason this is happening is some attempt at backward compatibility, but this is clearly causing a serious bug. Have you reported it?<br></p><p>&gt; On Sep 13, 2016, at 1:13 PM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; One of my co-workers just noticed a problem with the (bridged) API of our Objective-C framework, when used from Swift 3 (but not earlier). We have a class CBLQueryRow that includes the following:<br>&gt; <br>&gt; 	@property (readonly) id key;<br>&gt; 	- (nullable id) keyAtIndex: (NSUInteger)index;<br>&gt; <br>&gt; In Swift this becomes<br>&gt; 	open var key: Any { get }<br>&gt; 	open func key(at index: UInt) -&gt; Any?<br>&gt; <br>&gt; The problem is that any reference to `key` now seems to refer to a pointer to the method, not to the property, leading to compiler diagnostics like the following (where `row` is a CBLQueryRow):<br>&gt; <br>&gt; TaskListsViewController.swift:95:40: warning: cast from &#39;(UInt) -&gt; Any?&#39; to unrelated type &#39;String&#39; always fails<br>&gt;         cell.textLabel?.text = row.key as? String<br>&gt;                                ~~~~~~~ ^   ~~~~~~<br>&gt; That’s a warning not an error, but obviously at runtime the `as?` would always fail and result in nil.<br>&gt; <br>&gt; This is rather bad for us, since the `key` property is a crucial part of the API, while the `key()` method that pre-empts it is obscure and little-used.<br>&gt; <br>&gt; I can reproduce this in a playground in Xcode 8 like so:<br>&gt; <br>&gt; protocol QueryRow {<br>&gt;     var key: Any { get }<br>&gt;     func key(at index: UInt) -&gt; Any?<br>&gt; }<br>&gt; <br>&gt; var row: QueryRow<br>&gt; <br>&gt; row.key as? String<br>&gt; In addition to the valid error about `row` being uninitialized, I also get the cast failure.<br>&gt; <br>&gt; What’s the best workaround for this?<br>&gt; <br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160913/ff678e0b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Method of same name is shadowing a property in Swift 3</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September 13, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 3:13 PM, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br>&gt; <br>&gt; I guess the reason this is happening is some attempt at backward compatibility, but this is clearly causing a serious bug. Have you reported it?<br></p><p>No; I’m not a Swift expert, and am not following the 3.0 transition closely enough to tell whether this is a bug or just some unfortunate but intentional fallout from the transition.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160913/7f4aae21/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Method of same name is shadowing a property in Swift 3</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September 14, 2016 at 07:00:00am</p></header><div class="content"><p>You said your issue only existed in Swift 3. However, you issue still<br>exists in Xcode 7.3.1, which uses Swift 2.2. I tested your playground code.<br></p><p>protocol QueryRow {<br>    var key: Any { get }<br>    func key(at index: UInt) -&gt; Any?<br>}<br></p><p>var row: QueryRow<br></p><p>row.key as? String<br></p><p>Zhaoxin<br></p><p>On Wed, Sep 14, 2016 at 7:08 AM, Jens Alfke via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Sep 13, 2016, at 3:13 PM, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br>&gt;<br>&gt; I guess the reason this is happening is some attempt at backward<br>&gt; compatibility, but this is clearly causing a serious bug. Have you reported<br>&gt; it?<br>&gt;<br>&gt;<br>&gt; No; I’m not a Swift expert, and am not following the 3.0 transition<br>&gt; closely enough to tell whether this is a bug or just some unfortunate but<br>&gt; intentional fallout from the transition.<br>&gt;<br>&gt; —Jens<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160914/025de04b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Method of same name is shadowing a property in Swift 3</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September 13, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 4:47 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; You said your issue only existed in Swift 3. However, you issue still exists in Xcode 7.3.1, which uses Swift 2.2. I tested your playground code.<br></p><p>Interesting. I think the difference is that prior to Swift 3, the original Objective-C method was translated into Swift differently — I believe it came out as keyAtIndex() — so it didn’t trigger this name collision issue.<br></p><p>—Jens<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Method of same name is shadowing a property in Swift 3</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September 13, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 3:13 PM, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br>&gt; <br>&gt; I guess the reason this is happening is some attempt at backward compatibility, but this is clearly causing a serious bug. Have you reported it?<br></p><p>I have now: https://bugs.swift.org/browse/SR-2633<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160913/ecfd9128/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
