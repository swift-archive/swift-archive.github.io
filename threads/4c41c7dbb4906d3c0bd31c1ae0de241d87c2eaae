<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August  3, 2016 at 12:00:00am</p></header><div class="content"><p>I&#39;m looking for consensus on, and a coalition for, including generic subscripts in Phase 1 of the Swift 4 design cycle.<br></p><p>The Need<br>-------------<br></p><p>While prototyping my deferred [SE-0132][], I ran into trouble introducing `RangeExpression`, an abstraction to make the introduction of subrange features easier. Since RangeExpression is a protocol compatible with any index type, it has to have an associated type, and thus cannot be handled with an existential. I therefore had to add an overloaded subscript for each type, which partially defeated the purpose of having the protocol.<br></p><p>The lack of generic subscripts also forced a nasty workaround for a convenience subscript in [SE-0131][]. That proposal extends `Dictionary where Key == AnyHashable` (actually a hidden `_AnyHashableProtocol`, but that&#39;s a different story) with a convenience subscript which takes any `Hashable` type—except that, because generic subscripts are impossible, [it instead has to take a hidden `_Hashable` type instead][anyhash-subscript].<br></p><p>The generics manifesto suggests a third use case: [a subscript that can take any Collection of Index][manifesto].<br></p><p>The lack of this feature at the very least impacts binary compatibility directly. It also affects source compatibility in that features like subranges are designed around its absence, forcing workarounds which affect userspace. I see good reasons to do it now and few to delay.<br></p><p>Prior Art<br>-----------<br></p><p>As mentioned, SE-0131 and SE-0132 would have benefited from this feature.<br></p><p>After a brief and mostly positive [discussion][], Harlan Haskins and Robert Widmann submitted a [pull request][] late in the Swift 3 cycle for generic and throwing subscripts. Personally, I think throwing subscripts are something we should include, but they&#39;re a separate issue and may not be appropriate for Phase 1; I would suggest severing the two parts of the proposal.<br></p><p>Next Steps<br>---------------<br></p><p>What I&#39;d like to figure out at this point is:<br></p><p>* Who is interested in this feature?<br></p><p>* Should it be severed from throwing subscripts?<br></p><p>* Does the core team agree that this is in Phase 1&#39;s scope?<br></p><p>* Do the people who might be able to implement this have any comments on it?<br></p><p><br></p><p>	[SE-0132]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0132-sequence-end-ops.md&gt;<br>	[SE-0131]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md#detailed-design&gt;<br>	[anyhash-subscript]: &lt;https://github.com/apple/swift/blob/e051c61c4d7eb33cdbb47b8ac04eae38203a61e6/stdlib/public/core/HashedCollectionsAnyHashableExtensions.swift.gyb#L147&gt;<br>	[manifesto]: &lt;https://github.com/apple/swift/blob/e3d8448bbdd059a55a6e72c24d07e994afaf5926/docs/GenericsManifesto.md#generic-subscripts&gt;<br>	[discussion]: &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160620/021450.html&gt;<br>	[pull request]: &lt;https://github.com/apple/swift-evolution/pull/372&gt;<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>August  3, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Since RangeExpression is a protocol compatible with any index type, it has to have an associated type<br>I haven&#39;t read all linked information, but would the situation change with generic protocols?<br>Thinks like &quot;AnyGenerator&quot; afaics would be superfluous if we had &quot;protocol Generator&lt;Type&gt;&quot;, and the same might be true for RangeExpression.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August  3, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; On Aug 3, 2016, at 1:57 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt;&gt; Since RangeExpression is a protocol compatible with any index type, it has to have an associated type<br>&gt; I haven&#39;t read all linked information, but would the situation change with generic protocols?<br>&gt; Thinks like &quot;AnyGenerator&quot; afaics would be superfluous if we had &quot;protocol Generator&lt;Type&gt;&quot;, and the same might be true for RangeExpression.<br></p><p>No, this is not an appropriate use case for generic protocols. (Nor is Generator/IteratorProtocol, for that matter.)<br></p><p>Generic protocols would be for cases where a single concrete instance can conform to a protocol using several different types. Genuine use cases for that do exist, but they&#39;re few and far between.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>August  3, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Aug 3, 2016, at 4:16 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Aug 3, 2016, at 1:57 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Since RangeExpression is a protocol compatible with any index type, it has to have an associated type<br>&gt;&gt; I haven&#39;t read all linked information, but would the situation change with generic protocols?<br>&gt;&gt; Thinks like &quot;AnyGenerator&quot; afaics would be superfluous if we had &quot;protocol Generator&lt;Type&gt;&quot;, and the same might be true for RangeExpression.<br>&gt; <br>&gt; No, this is not an appropriate use case for generic protocols. (Nor is Generator/IteratorProtocol, for that matter.)<br>&gt; <br>&gt; Generic protocols would be for cases where a single concrete instance can conform to a protocol using several different types. Genuine use cases for that do exist, but they&#39;re few and far between.<br></p><p>Yes, this feature is called “multi-parameter type classes” in Haskell.  Those interested in proposing it in Swift might be interested in looking at how the feature is used in Haskell.<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>August  3, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Aug 3, 2016, at 2:25 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m looking for consensus on, and a coalition for, including generic subscripts in Phase 1 of the Swift 4 design cycle.<br>&gt; <br>&gt; The Need<br>&gt; -------------<br>&gt; <br>&gt; While prototyping my deferred [SE-0132][], I ran into trouble introducing `RangeExpression`, an abstraction to make the introduction of subrange features easier. Since RangeExpression is a protocol compatible with any index type, it has to have an associated type, and thus cannot be handled with an existential. I therefore had to add an overloaded subscript for each type, which partially defeated the purpose of having the protocol.<br>&gt; <br>&gt; The lack of generic subscripts also forced a nasty workaround for a convenience subscript in [SE-0131][]. That proposal extends `Dictionary where Key == AnyHashable` (actually a hidden `_AnyHashableProtocol`, but that&#39;s a different story) with a convenience subscript which takes any `Hashable` type—except that, because generic subscripts are impossible, [it instead has to take a hidden `_Hashable` type instead][anyhash-subscript].<br>&gt; <br>&gt; The generics manifesto suggests a third use case: [a subscript that can take any Collection of Index][manifesto].<br>&gt; <br>&gt; The lack of this feature at the very least impacts binary compatibility directly. It also affects source compatibility in that features like subranges are designed around its absence, forcing workarounds which affect userspace. I see good reasons to do it now and few to delay.<br>&gt; <br>&gt; Prior Art<br>&gt; -----------<br>&gt; <br>&gt; As mentioned, SE-0131 and SE-0132 would have benefited from this feature.<br>&gt; <br>&gt; After a brief and mostly positive [discussion][], Harlan Haskins and Robert Widmann submitted a [pull request][] late in the Swift 3 cycle for generic and throwing subscripts. Personally, I think throwing subscripts are something we should include, but they&#39;re a separate issue and may not be appropriate for Phase 1; I would suggest severing the two parts of the proposal.<br>&gt; <br>&gt; Next Steps<br>&gt; ---------------<br>&gt; <br>&gt; What I&#39;d like to figure out at this point is:<br>&gt; <br>&gt; * Who is interested in this feature?<br></p><p>I am interested in this feature, both for specific applications as well as because it lifts what feels like an arbitrary restriction.<br></p><p>One very common use case is in libraries that handle loosely typed data (JSON, Plist, etc).  <br></p><p>It’s also worth noting that they will allow us to simulate higher-rank functions more directly than we can today (with subscript as function application).<br></p><p>&gt; <br>&gt; * Should it be severed from throwing subscripts?<br></p><p>Throwing subscripts are important, but don’t necessarily need to be introduced at the same time as generic subscripts.  However, the use case of libraries that handle loosely typed data will require both.  I believe that use case was the motivation for the proposal introduced by Harlan and Robert which is why both features were included.<br></p><p>&gt; <br>&gt; * Does the core team agree that this is in Phase 1&#39;s scope?<br>&gt; <br>&gt; * Do the people who might be able to implement this have any comments on it?<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	[SE-0132]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0132-sequence-end-ops.md&gt;<br>&gt; 	[SE-0131]: &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md#detailed-design&gt;<br>&gt; 	[anyhash-subscript]: &lt;https://github.com/apple/swift/blob/e051c61c4d7eb33cdbb47b8ac04eae38203a61e6/stdlib/public/core/HashedCollectionsAnyHashableExtensions.swift.gyb#L147&gt;<br>&gt; 	[manifesto]: &lt;https://github.com/apple/swift/blob/e3d8448bbdd059a55a6e72c24d07e994afaf5926/docs/GenericsManifesto.md#generic-subscripts&gt;<br>&gt; 	[discussion]: &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160620/021450.html&gt;<br>&gt; 	[pull request]: &lt;https://github.com/apple/swift-evolution/pull/372&gt;<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>August  3, 2016 at 04:00:00pm</p></header><div class="content"><p>+1 from me on this feature as well. It seems like a pretty obvious way in<br>which subscripts should be like functions, but aren&#39;t yet.<br></p><p>Would there be any need for setters and getters to have different generic<br>parameters? I suppose today there&#39;s only one place to specify the type of<br>the parameters, and the type of the value being retrieved/set, so it&#39;s a<br>moot point.<br></p><p>On Wed, Aug 3, 2016 at 6:33 AM Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Aug 3, 2016, at 2:25 AM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I&#39;m looking for consensus on, and a coalition for, including generic<br>&gt; subscripts in Phase 1 of the Swift 4 design cycle.<br>&gt; &gt;<br>&gt; &gt; The Need<br>&gt; &gt; -------------<br>&gt; &gt;<br>&gt; &gt; While prototyping my deferred [SE-0132][], I ran into trouble<br>&gt; introducing `RangeExpression`, an abstraction to make the introduction of<br>&gt; subrange features easier. Since RangeExpression is a protocol compatible<br>&gt; with any index type, it has to have an associated type, and thus cannot be<br>&gt; handled with an existential. I therefore had to add an overloaded subscript<br>&gt; for each type, which partially defeated the purpose of having the protocol.<br>&gt; &gt;<br>&gt; &gt; The lack of generic subscripts also forced a nasty workaround for a<br>&gt; convenience subscript in [SE-0131][]. That proposal extends `Dictionary<br>&gt; where Key == AnyHashable` (actually a hidden `_AnyHashableProtocol`, but<br>&gt; that&#39;s a different story) with a convenience subscript which takes any<br>&gt; `Hashable` type—except that, because generic subscripts are impossible, [it<br>&gt; instead has to take a hidden `_Hashable` type instead][anyhash-subscript].<br>&gt; &gt;<br>&gt; &gt; The generics manifesto suggests a third use case: [a subscript that can<br>&gt; take any Collection of Index][manifesto].<br>&gt; &gt;<br>&gt; &gt; The lack of this feature at the very least impacts binary compatibility<br>&gt; directly. It also affects source compatibility in that features like<br>&gt; subranges are designed around its absence, forcing workarounds which affect<br>&gt; userspace. I see good reasons to do it now and few to delay.<br>&gt; &gt;<br>&gt; &gt; Prior Art<br>&gt; &gt; -----------<br>&gt; &gt;<br>&gt; &gt; As mentioned, SE-0131 and SE-0132 would have benefited from this feature.<br>&gt; &gt;<br>&gt; &gt; After a brief and mostly positive [discussion][], Harlan Haskins and<br>&gt; Robert Widmann submitted a [pull request][] late in the Swift 3 cycle for<br>&gt; generic and throwing subscripts. Personally, I think throwing subscripts<br>&gt; are something we should include, but they&#39;re a separate issue and may not<br>&gt; be appropriate for Phase 1; I would suggest severing the two parts of the<br>&gt; proposal.<br>&gt; &gt;<br>&gt; &gt; Next Steps<br>&gt; &gt; ---------------<br>&gt; &gt;<br>&gt; &gt; What I&#39;d like to figure out at this point is:<br>&gt; &gt;<br>&gt; &gt; * Who is interested in this feature?<br>&gt;<br>&gt; I am interested in this feature, both for specific applications as well as<br>&gt; because it lifts what feels like an arbitrary restriction.<br>&gt;<br>&gt; One very common use case is in libraries that handle loosely typed data<br>&gt; (JSON, Plist, etc).<br>&gt;<br>&gt; It’s also worth noting that they will allow us to simulate higher-rank<br>&gt; functions more directly than we can today (with subscript as function<br>&gt; application).<br>&gt;<br>&gt; &gt;<br>&gt; &gt; * Should it be severed from throwing subscripts?<br>&gt;<br>&gt; Throwing subscripts are important, but don’t necessarily need to be<br>&gt; introduced at the same time as generic subscripts.  However, the use case<br>&gt; of libraries that handle loosely typed data will require both.  I believe<br>&gt; that use case was the motivation for the proposal introduced by Harlan and<br>&gt; Robert which is why both features were included.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; * Does the core team agree that this is in Phase 1&#39;s scope?<br>&gt; &gt;<br>&gt; &gt; * Do the people who might be able to implement this have any comments on<br>&gt; it?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;       [SE-0132]: &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0132-sequence-end-ops.md<br>&gt; &gt;<br>&gt; &gt;       [SE-0131]: &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md#detailed-design<br>&gt; &gt;<br>&gt; &gt;       [anyhash-subscript]: &lt;<br>&gt; https://github.com/apple/swift/blob/e051c61c4d7eb33cdbb47b8ac04eae38203a61e6/stdlib/public/core/HashedCollectionsAnyHashableExtensions.swift.gyb#L147<br>&gt; &gt;<br>&gt; &gt;       [manifesto]: &lt;<br>&gt; https://github.com/apple/swift/blob/e3d8448bbdd059a55a6e72c24d07e994afaf5926/docs/GenericsManifesto.md#generic-subscripts<br>&gt; &gt;<br>&gt; &gt;       [discussion]: &lt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160620/021450.html<br>&gt; &gt;<br>&gt; &gt;       [pull request]: &lt;https://github.com/apple/swift-evolution/pull/372<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/d1f0442e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August  3, 2016 at 10:00:00am</p></header><div class="content"><p>On Aug 3, 2016, at 12:25 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I&#39;m looking for consensus on, and a coalition for, including generic subscripts in Phase 1 of the Swift 4 design cycle.<br></p><p>&gt; What I&#39;d like to figure out at this point is:<br>&gt; <br>&gt; * Who is interested in this feature?<br></p><p>This is a very commonly requested feature.  I consider it an obvious omission, not something that needs extensive design work.  A proposal would be appropriate to capture the effort though.  It should include generic properties as well (generic over the result type).<br></p><p>&gt; * Should it be severed from throwing subscripts?<br></p><p>Yes, perfectly reasonable.<br></p><p>&gt; * Does the core team agree that this is in Phase 1&#39;s scope?<br></p><p>I’ll defer to the standard library gurus to figure this out.  It doesn’t sound like one of the most critical missing features, but I would love to see this happen at some point.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Idea] Generic subscripts</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>August  3, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; * Who is interested in this feature?<br></p><p>Me definitely, everyone probably.<br></p><p>&gt; * Should it be severed from throwing subscripts?<br></p><p>That depends I guess; subscripts are basically functions anyway so it didn&#39;t make a lot of sense to me that they lacked features that functions have, so if implementing both of these features is basically just a case of linking up the same behaviour from functions then I say do them simultaneously if possible. I don&#39;t know much about the actual implementation details though so obviously someone else should make a final decision ;)<br></p><p>Basically I&#39;m in favour making subscripts have as much in common with functions as possible; in fact they really should just be a property-like shorthand for a regular function behind the scenes.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
