<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Contiguous Memory and the Effect of Borrowing on Safety</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  6, 2016 at 08:00:00pm</p></header><div class="content"><p>on Sun Nov 06 2016, Hooman Mehr &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yes, this is a very important issue to consider before we freeze them.<br>&gt;<br>&gt; As part of my Swift hobby, I have worked a bit on a Swifty wrapper for<br>&gt; linear algebra packages <br></p><p>That domain makes an excellent test case.<br></p><p>&gt; and also toyed a bit with the merits of a Swift implementation of some<br>&gt; of the related algorithms and data structures (such as banded or<br>&gt; sparse matrices)<br>&gt;<br>&gt; It is really difficult to come up with efficient and generic solutions<br>&gt; in these spaces.<br></p><p>I&#39;m not surprised.  The generics system in Swift has a lot of growing up<br>to do, and until it does that, it&#39;s hard to even contemplate the library<br>abstractions that will be needed.<br></p><p>&gt; I had a brush with Julia &lt;http://julialang.org/&gt; as well. Have you<br>&gt; looked at their work <br></p><p>It&#39;s been a while, to be honest.<br></p><p>&gt; and the recent reworking of their similar data structures?<br></p><p>Links would be appreciated.<br></p><p>&gt;&gt; On Nov 6, 2016, at 1:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Given that we&#39;re headed for ABI (and thus stdlib API) stability, I&#39;ve<br>&gt;&gt; been giving lots of thought to the bottom layer of our collection<br>&gt;&gt; abstraction and how it may limit our potential for efficiency.  In<br>&gt;&gt; particular, I want to keep the door open for optimizations that work on<br>&gt;&gt; contiguous memory regions.  Every cache-friendly data structure, even if<br>&gt;&gt; it is not an array, contains contiguous memory regions over which<br>&gt;&gt; operations can often be vectorized, that should define boundaries for<br>&gt;&gt; parallelism, etc.  Throughout Cocoa you can find patterns designed to<br>&gt;&gt; exploit this fact when possible (NSFastEnumeration).  Posix I/O bottoms<br>&gt;&gt; out in readv/writev, and MPI datatypes essentially boil down to<br>&gt;&gt; identifying the contiguous parts of data structures.  My point is that<br>&gt;&gt; this is an important class of optimization, with numerous real-world<br>&gt;&gt; examples.<br>&gt;&gt; <br>&gt;&gt; If you think about what it means to build APIs for contiguous memory<br>&gt;&gt; into abstractions like Sequence or Collection, at least without<br>&gt;&gt; penalizing the lowest-level code, it means exposing UnsafeBufferPointers<br>&gt;&gt; as a first-class part of the protocols, which is really<br>&gt;&gt; unappealing... unless you consider that *borrowed* UnsafeBufferPointers<br>&gt;&gt; can be made safe.  <br>&gt;&gt; <br>&gt;&gt; [Well, it&#39;s slightly more complicated than that because<br>&gt;&gt; UnsafeBufferPointer is designed to bypass bounds checking in release<br>&gt;&gt; builds, and to ensure safety you&#39;d need a BoundsCheckedBuffer—or<br>&gt;&gt; something—that checks bounds unconditionally... but] the point remains<br>&gt;&gt; that<br>&gt;&gt; <br>&gt;&gt;  A thing that is unsafe when it&#39;s arbitrarily copied can become safe if<br>&gt;&gt;  you ensure that it&#39;s only borrowed (in accordance with well-understood<br>&gt;&gt;  lifetime rules).<br>&gt;&gt; <br>&gt;&gt; And this leads me to wonder about our practice of embedding the word<br>&gt;&gt; &quot;unsafe&quot; in names.  A construct that is only conditionally unsafe<br>&gt;&gt; shouldn&#39;t be spelled &quot;unsafe&quot; when used in a safe way, right?  So this<br>&gt;&gt; *seems* to argue for an &quot;unsafe&quot; keyword that can be used to label<br>&gt;&gt; the constructs that actually add unsafety (as has been previously<br>&gt;&gt; suggested on this list).  Other ideas are of course most welcome.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Contiguous Memory and the Effect of Borrowing on Safety</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>November  6, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Nov 6, 2016, at 8:03 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I had a brush with Julia &lt;http://julialang.org/ &lt;http://julialang.org/&gt;&gt; as well. Have you<br>&gt;&gt; looked at their work <br>&gt; <br>&gt; It&#39;s been a while, to be honest.<br>&gt; <br>&gt;&gt; and the recent reworking of their similar data structures?<br>&gt; <br>&gt; Links would be appreciated.<br></p><p>Start with this blog post, if you haven’t already seen it: http://julialang.org/blog/2016/03/arrays-iteration<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161106/37eddcc4/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
