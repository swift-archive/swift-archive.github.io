<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2f21b9a585ac9bd93d60a14e6dc17139?s=50"></div><header><strong>Version update and clean option</strong> from <string>王巍</string> &lt;onevcat at gmail.com&gt;<p>December  4, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi, all<br></p><p>It seems currently there is no way to update a dependency to a compatible version unless we remove the cloned dependency folder from Packages manually.<br></p><p>Take example, consider the Package.swift file as follows:<br></p><p>let package = Package(<br>    name: &quot;Dealer&quot;,<br>    dependencies: [<br>        .Package(url: &quot;https://github.com/apple/example-package-deckofplayingcards.git&quot;, majorVersion: 1),<br>    ]<br>)<br></p><p>It will clone and build the latest 1.x.y (currently 1.0.2, https://github.com/apple/example-package-deckofplayingcards/releases) for me. Let?s assume later a new compatible version 1.0.3 is released. However, even I run `swift build` again, it seems the package manager will not update this dependency, since the existing version is already match the requirement. ( https://github.com/apple/swift-package-manager/blob/master/Sources/dep/get.swift#L260-L270 ).<br></p><p>Even I run a `swift build -k` before building the package, the dependency wouldn?t get updated. The only way to update to a most recent compatible version seems to be a `rm -rf Packages` before build.<br></p><p>As I specified the major version should be 1, IMO, it means I may want the latest version before 2.0.0. Is current behavior expected, or is there any plan to provide a better way to upgrade the dependencies? Maybe we need some options like `swift build ?clean_all` or `swift build upgrade`?<br></p><p><br>Best regards.<br>---<br>Sincerely, <br>Wei Wang (??, @onevcat)<br>im.onevcat.com &lt;http://im.onevcat.com/&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151204/32b2694b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Version update and clean option</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>I assume that a lot of this stuff is coming. However, based on the<br>current state of things, I&#39;m actually really surprised we don&#39;t have a<br>Package.lock file (or equivalent). Being able to reproduce the exact<br>build on multiple machines or at multiple points in time is really<br>important. I may specify that I want version 1.x of a package but<br>everyone who checks out my project and builds it should get the exact<br>same version (e.g. 1.0.2) of the dependency, even if there&#39;s a newer<br>compatible version.<br></p><p>-Kevin Ballard<br></p><p>On Thu, Dec 3, 2015, at 11:48 PM, 王巍 wrote:<br>&gt; Hi, all<br>&gt;<br>&gt; It seems currently there is no way to update a dependency to a<br>&gt; compatible version unless we remove the cloned dependency folder from<br>&gt; Packages manually.<br>&gt;<br>&gt; Take example, consider the Package.swift file as follows:<br>&gt;<br>&gt; let package = Package(    name: &quot;Dealer&quot;,    dependencies: [<br>&gt; .Package(url: &quot;<br>&gt; https://github.com/apple/example-package-deckofplayingcards.git&quot;,<br>&gt; majorVersion: 1),    ] )<br>&gt;<br>&gt; It will clone and build the latest 1.x.y (currently 1.0.2,<br>&gt; https://github.com/apple/example-package-deckofplayingcards/releases)<br>&gt; for me. Let’s assume later a new compatible version 1.0.3 is released.<br>&gt; However, even I run `swift build` again, it seems the package manager<br>&gt; will not update this dependency, since the existing version is already<br>&gt; match the requirement. (<br>&gt; https://github.com/apple/swift-package-manager/blob/master/Sources/dep/get.swift#L260-L270<br>&gt; ).<br>&gt;<br>&gt; Even I run a `swift build -k` before building the package, the<br>&gt; dependency wouldn’t get updated. The only way to update to a<br>&gt; most recent compatible version seems to be a `rm -rf Packages`<br>&gt; before build.<br>&gt;<br>&gt; As I specified the major version should be 1, IMO, it means I may want<br>&gt; the latest version before 2.0.0. Is current behavior expected, or is<br>&gt; there any plan to provide a better way to upgrade the dependencies?<br>&gt; Maybe we need some options like `swift build —clean_all` or `swift<br>&gt; build upgrade`?<br>&gt;<br>&gt;<br>&gt; Best regards.<br>&gt; ---<br>&gt; Sincerely, Wei Wang (王巍, @onevcat) im.onevcat.com[1]<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-build-dev mailing list swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p><br></p><p>Links:<br></p><p>  1. http://im.onevcat.com/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151204/9ce5ac93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58e2591737c75b7700b11f23381b9590?s=50"></div><header><strong>Version update and clean option</strong> from <string>Rick Ballard</string> &lt;rballard at apple.com&gt;<p>December  4, 2015 at 08:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>Adding the ability to update your dependencies is high on our priority list to implement soon.<br></p><p>We have an issue in our internal bug database (which we haven&#39;t yet migrated to http://bugs.swift.org &lt;http://bugs.swift.org/&gt;) for implementing lock files; we haven&#39;t scheduled it yet, but it is something we intend to support. Of course, we welcome pull requests!<br></p><p>Thanks,<br></p><p>	- Rick<br></p><p>&gt; On Dec 4, 2015, at 1:21 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; I assume that a lot of this stuff is coming. However, based on the current state of things, I&#39;m actually really surprised we don&#39;t have a Package.lock file (or equivalent). Being able to reproduce the exact build on multiple machines or at multiple points in time is really important. I may specify that I want version 1.x of a package but everyone who checks out my project and builds it should get the exact same version (e.g. 1.0.2) of the dependency, even if there&#39;s a newer compatible version.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Thu, Dec 3, 2015, at 11:48 PM, 王巍 wrote:<br>&gt;&gt; Hi, all<br>&gt;&gt;  <br>&gt;&gt; It seems currently there is no way to update a dependency to a compatible version unless we remove the cloned dependency folder from Packages manually.<br>&gt;&gt;  <br>&gt;&gt; Take example, consider the Package.swift file as follows:<br>&gt;&gt;  <br>&gt;&gt; let package = Package(<br>&gt;&gt;     name: &quot;Dealer&quot;,<br>&gt;&gt;     dependencies: [<br>&gt;&gt;         .Package(url: &quot;https://github.com/apple/example-package-deckofplayingcards.git &lt;https://github.com/apple/example-package-deckofplayingcards.git&gt;&quot;, majorVersion: 1),<br>&gt;&gt;     ]<br>&gt;&gt; )<br>&gt;&gt;  <br>&gt;&gt; It will clone and build the latest 1.x.y (currently 1.0.2, https://github.com/apple/example-package-deckofplayingcards/releases &lt;https://github.com/apple/example-package-deckofplayingcards/releases&gt;) for me. Let’s assume later a new compatible version 1.0.3 is released. However, even I run `swift build` again, it seems the package manager will not update this dependency, since the existing version is already match the requirement. ( https://github.com/apple/swift-package-manager/blob/master/Sources/dep/get.swift#L260-L270 &lt;https://github.com/apple/swift-package-manager/blob/master/Sources/dep/get.swift#L260-L270&gt; ).<br>&gt;&gt;  <br>&gt;&gt; Even I run a `swift build -k` before building the package, the dependency wouldn’t get updated. The only way to update to a most recent compatible version seems to be a `rm -rf Packages` before build.<br>&gt;&gt;  <br>&gt;&gt; As I specified the major version should be 1, IMO, it means I may want the latest version before 2.0.0. Is current behavior expected, or is there any plan to provide a better way to upgrade the dependencies? Maybe we need some options like `swift build —clean_all` or `swift build upgrade`?<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; Best regards.<br>&gt;&gt; ---<br>&gt;&gt; Sincerely, <br>&gt;&gt; Wei Wang (王巍, @onevcat)<br>&gt;&gt; im.onevcat.com &lt;http://im.onevcat.com/&gt;<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151204/b09d1018/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
