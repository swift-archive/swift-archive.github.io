<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon May 16 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 16, 2016, at 10:14 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon May 16 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On May 15, 2016, at 1:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri May 13 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we’re going to hide the implementation details maybe it’s worth<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; taking advantage of the type by making the props var and using CoW.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; What do you think about a proposal to enhance “indirect” for value<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; types and / or instances of them.  I can think of a few approaches to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; this that we could consider.  I would be much more comfortable with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; what you want to do if we tackle that as well.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a good idea that can help to make CoW easy to implement; I have<br>&gt;&gt;&gt;&gt;&gt;&gt; advocated for it (not in public) in the past.  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Glad to hear this.  Maybe in Swift 4?  (I know it&#39;s too early to say)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; People should be aware<br>&gt;&gt;&gt;&gt;&gt;&gt; that the resulting automatic CoW will be suboptimal in many cases,<br>&gt;&gt;&gt;&gt;&gt;&gt; because when you discover you need new storage it&#39;s usually better to<br>&gt;&gt;&gt;&gt;&gt;&gt; build a new value than to copy the old one and overwrite it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How big a difference does that usually make, especially when compared<br>&gt;&gt;&gt;&gt;&gt; to the reasons you would use indirect in the first place?  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Usually a big difference.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Wouldn&#39;t the compiler be able to do this in the automatic<br>&gt;&gt;&gt;&gt;&gt; implementation in some cases<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Not in any interesting cases I know of.  If you&#39;re inserting into an<br>&gt;&gt;&gt;&gt; array and you discover you need new storage because there is more than<br>&gt;&gt;&gt;&gt; one reference, starting by copying can double the cost of the insertion<br>&gt;&gt;&gt;&gt; (on a large array when memory allocation is fast).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Of course this is true of data structures.  I wouldn’t expect the<br>&gt;&gt;&gt; compiler to provide a reasonable implementation of CoW for data<br>&gt;&gt;&gt; structures.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe I wasn’t clear.  I was talking about domain model objects like the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct Person {<br>&gt;&gt;&gt;  var firstName: String<br>&gt;&gt;&gt;  var lastName: String<br>&gt;&gt;&gt;  // …<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I find it hard to believe the compiler CoW implementation would do<br>&gt;&gt;&gt; something so suboptimal as to be significant when you write to<br>&gt;&gt;&gt; firstName through an indirect instance in cases like this (which are<br>&gt;&gt;&gt; pervasive in application code).<br>&gt;&gt; <br>&gt;&gt; Oh, OK.  And you want to CoW this because...?  Reducing refcount<br>&gt;&gt; traffic?<br>&gt;<br>&gt; Avoiding copying and refcounting.  This might be a large aggregate.<br>&gt; You might use indirect structs and CoW so that portions of the<br>&gt; aggregate can be shared by more than one aggregate root<br>&gt; (i.e. persistent data structure).<br></p><p>I have no problem with adding some support for doing this manually, but<br>IMO the compiler *should* do it automatically for some value types.<br>Maybe an attribute could be used to add manual control.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Should we rename &quot;class&quot; when referring to protocol conformance?</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 19, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 5:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon May 16 2016, Matthew Johnson &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 10:14 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Mon May 16 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 15, 2016, at 1:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri May 13 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If we’re going to hide the implementation details maybe it’s worth<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; taking advantage of the type by making the props var and using CoW.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; What do you think about a proposal to enhance “indirect” for value<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; types and / or instances of them.  I can think of a few approaches to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this that we could consider.  I would be much more comfortable with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; what you want to do if we tackle that as well.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s a good idea that can help to make CoW easy to implement; I have<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; advocated for it (not in public) in the past.  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Glad to hear this.  Maybe in Swift 4?  (I know it&#39;s too early to say)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; People should be aware<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; that the resulting automatic CoW will be suboptimal in many cases,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; because when you discover you need new storage it&#39;s usually better to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; build a new value than to copy the old one and overwrite it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How big a difference does that usually make, especially when compared<br>&gt;&gt;&gt;&gt;&gt;&gt; to the reasons you would use indirect in the first place?  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Usually a big difference.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Wouldn&#39;t the compiler be able to do this in the automatic<br>&gt;&gt;&gt;&gt;&gt;&gt; implementation in some cases<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not in any interesting cases I know of.  If you&#39;re inserting into an<br>&gt;&gt;&gt;&gt;&gt; array and you discover you need new storage because there is more than<br>&gt;&gt;&gt;&gt;&gt; one reference, starting by copying can double the cost of the insertion<br>&gt;&gt;&gt;&gt;&gt; (on a large array when memory allocation is fast).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Of course this is true of data structures.  I wouldn’t expect the<br>&gt;&gt;&gt;&gt; compiler to provide a reasonable implementation of CoW for data<br>&gt;&gt;&gt;&gt; structures.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe I wasn’t clear.  I was talking about domain model objects like the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; struct Person {<br>&gt;&gt;&gt;&gt; var firstName: String<br>&gt;&gt;&gt;&gt; var lastName: String<br>&gt;&gt;&gt;&gt; // …<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I find it hard to believe the compiler CoW implementation would do<br>&gt;&gt;&gt;&gt; something so suboptimal as to be significant when you write to<br>&gt;&gt;&gt;&gt; firstName through an indirect instance in cases like this (which are<br>&gt;&gt;&gt;&gt; pervasive in application code).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Oh, OK.  And you want to CoW this because...?  Reducing refcount<br>&gt;&gt;&gt; traffic?<br>&gt;&gt; <br>&gt;&gt; Avoiding copying and refcounting.  This might be a large aggregate.<br>&gt;&gt; You might use indirect structs and CoW so that portions of the<br>&gt;&gt; aggregate can be shared by more than one aggregate root<br>&gt;&gt; (i.e. persistent data structure).<br>&gt; <br>&gt; I have no problem with adding some support for doing this manually, but<br>&gt; IMO the compiler *should* do it automatically for some value types.<br>&gt; Maybe an attribute could be used to add manual control.<br></p><p>You’re saying when we have support for indirect value types the compiler should do it automatically for some of them right?  If that’s what you mean then yes, I agree.  The compiler should do it automatically for simple value types (i.e. when the right thing is obvious).<br></p><p>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/720ff169/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
