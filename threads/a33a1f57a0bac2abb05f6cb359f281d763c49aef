<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[proposal] Generic type aliases</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>on Wed Mar 16 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Mar 16, 2016, at 5:02 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mar 16, 2016, at 4:56 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; We shouldn’t infer it the requirement.<br>&gt;&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; Rationale: I see this as analogous (in two ways) to why we don’t infer hashability of T in:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func f&lt;T&gt;(…) {<br>&gt;&gt;&gt;&gt;   let x : Dictionary&lt;T, String&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, we do infer the `T: Hashable` in a case like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo&lt;T&gt;(x: Dictionary&lt;T, String&gt;) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `typealias` feels similar to that to me. It doesn&#39;t have to be a global analysis, just an analysis of the RHS of the typealias.<br>&gt;&gt; <br>&gt;&gt; I consider the RHS of the typealias to be the “body” of the type alias, and parameters to be part of the “signature” of the funcdecl.<br>&gt;<br>&gt; I&#39;m OK starting with the base design that constraints have to be<br>&gt; explicit. My gut tells me though that `typealias` is close enough<br>&gt; syntactically to `var` that many people will expect the inference to<br>&gt; occur, but we can always add it later.<br></p><p>I have the same concern as Joe does, but am willing to wait until people<br>complain :-)<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
