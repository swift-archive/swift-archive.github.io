<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  3, 2015 at 06:00:00pm</p></header><div class="content"><p>In particular, this should not be required in boolean contexts.<br></p><p>Is there any good reason why certain contexts require the ?!? suffix?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 3:10 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; In particular, this should not be required in boolean contexts.<br>&gt; <br>&gt; Is there any good reason why certain contexts require the ?!? suffix?<br></p><p>! is used to in multiple different ways for IUO?s.  What specifically are you objecting to?  Please give an example, thanks!<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December  3, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 6:49 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 3:10 PM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In particular, this should not be required in boolean contexts.<br>&gt;&gt; <br>&gt;&gt; Is there any good reason why certain contexts require the ?!? suffix?<br>&gt; <br>&gt; ! is used to in multiple different ways for IUO?s.  What specifically are you objecting to?  Please give an example, thanks!<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>I really don?t like having to put the ! suffix in boolean contexts:<br></p><p>&quot;if displayFlag! { ... }&quot; instead of &quot;if displayFlag { ? }&quot; etc.<br></p><p>If you also want a way to compare with nil, then maybe have this for implicitly unwrapped optionals:<br></p><p>if displayFlag? == nil { ? }<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 1:03 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br></p><p>&gt;<br>&gt; I really don’t like having to put the ! suffix in boolean contexts:<br>&gt;<br></p><p>To be explicit:<br></p><p>    let a: Bool! = false<br></p><p>    if a == false { }  // Works as expected<br></p><p>    if !a { }  // Works as expected<br></p><p>    if a { }   // &quot;error: optional type &#39;Bool!&#39; cannot be used as a<br>boolean; test for &#39;!= nil&#39; instead&quot;<br></p><p>Xcode &quot;fixes&quot; the last line like this:<br></p><p>    if (a != nil) { }<br></p><p><br></p><p>&gt; &quot;if displayFlag! { ... }&quot; instead of &quot;if displayFlag { … }&quot; etc.<br>&gt;<br>&gt; If you also want a way to compare with nil, then maybe have this for<br>&gt; implicitly unwrapped optionals:<br>&gt;<br>&gt; if displayFlag? == nil { … }<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/863392a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  4, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 1:18 PM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 1:03 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt; <br>&gt; I really don’t like having to put the ! suffix in boolean contexts:<br>&gt; <br>&gt; To be explicit:<br>&gt; <br>&gt;     let a: Bool! = false<br>&gt; <br>&gt;     if a == false { }  // Works as expected<br>&gt; <br>&gt;     if !a { }  // Works as expected<br>&gt; <br>&gt;     if a { }   // &quot;error: optional type &#39;Bool!&#39; cannot be used as a boolean; test for &#39;!= nil&#39; instead&quot;<br>&gt; <br>&gt; Xcode &quot;fixes&quot; the last line like this:<br>&gt; <br>&gt;     if (a != nil) { }<br></p><p>Huh ok.  Out of curiosity, why are you using IUOs for this?  I’m interested in (continuing to ) dramatically reduce the prevalence of IOUs in code (eliminating the need to use them), and reduce their power in various ways.  IUOs are one of the biggest sources of surprising behavior in Swift, and while they were a necessary feature to start with, their importance is going down over time.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/74ac8e53/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>December  4, 2015 at 07:00:00pm</p></header><div class="content"><p>I can’t answer for Per, but, at least in my iOS and OS X programming, I often find myself creating IUOs in view controller to represent properties that I’m guaranteed to have set before viewDidLoad, but don’t want a custom initializer, due to the pain of multiple required init methods. So while my IUO usage is perfectly safe, they’re rather awkward to use.<br>	That said, I’d have to see a specific proposal to tell if it’s any better for my usage than IUOs.<br></p><p><br>Jon Shier<br></p><p>&gt; On Dec 4, 2015, at 7:04 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 4, 2015, at 1:18 PM, Per Melin &lt;p at greendale.se &lt;mailto:p at greendale.se&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 4, 2015 at 1:03 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I really don’t like having to put the ! suffix in boolean contexts:<br>&gt;&gt; <br>&gt;&gt; To be explicit:<br>&gt;&gt; <br>&gt;&gt;     let a: Bool! = false<br>&gt;&gt; <br>&gt;&gt;     if a == false { }  // Works as expected<br>&gt;&gt; <br>&gt;&gt;     if !a { }  // Works as expected<br>&gt;&gt; <br>&gt;&gt;     if a { }   // &quot;error: optional type &#39;Bool!&#39; cannot be used as a boolean; test for &#39;!= nil&#39; instead&quot;<br>&gt;&gt; <br>&gt;&gt; Xcode &quot;fixes&quot; the last line like this:<br>&gt;&gt; <br>&gt;&gt;     if (a != nil) { }<br>&gt; <br>&gt; Huh ok.  Out of curiosity, why are you using IUOs for this?  I’m interested in (continuing to ) dramatically reduce the prevalence of IOUs in code (eliminating the need to use them), and reduce their power in various ways.  IUOs are one of the biggest sources of surprising behavior in Swift, and while they were a necessary feature to start with, their importance is going down over time.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/13ca52ff/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2f46a6a1a4a4b2dd5bb7389e6ab08f30?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Игорь Хмурец</string> &lt;gogosapiens at gmail.com&gt;<p>December  5, 2015 at 04:00:00am</p></header><div class="content"><p>Also don’t like this pain with multiple required init methods in UIViewController, have to use IUO for properties here.<br>-Igor.<br></p><p>&gt; On Dec 5, 2015, at 03:19, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; 	I can’t answer for Per, but, at least in my iOS and OS X programming, I often find myself creating IUOs in view controller to represent properties that I’m guaranteed to have set before viewDidLoad, but don’t want a custom initializer, due to the pain of multiple required init methods. So while my IUO usage is perfectly safe, they’re rather awkward to use.<br>&gt; 	That said, I’d have to see a specific proposal to tell if it’s any better for my usage than IUOs.<br>&gt; <br>&gt; <br>&gt; Jon Shier<br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 7:04 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 1:18 PM, Per Melin &lt;p at greendale.se &lt;mailto:p at greendale.se&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 4, 2015 at 1:03 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I really don’t like having to put the ! suffix in boolean contexts:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To be explicit:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     let a: Bool! = false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     if a == false { }  // Works as expected<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     if !a { }  // Works as expected<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     if a { }   // &quot;error: optional type &#39;Bool!&#39; cannot be used as a boolean; test for &#39;!= nil&#39; instead&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Xcode &quot;fixes&quot; the last line like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     if (a != nil) { }<br>&gt;&gt; <br>&gt;&gt; Huh ok.  Out of curiosity, why are you using IUOs for this?  I’m interested in (continuing to ) dramatically reduce the prevalence of IOUs in code (eliminating the need to use them), and reduce their power in various ways.  IUOs are one of the biggest sources of surprising behavior in Swift, and while they were a necessary feature to start with, their importance is going down over time.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/6e168fae/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 4:19 PM, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; 	I can’t answer for Per, but, at least in my iOS and OS X programming, I often find myself creating IUOs in view controller to represent properties that I’m guaranteed to have set before viewDidLoad, but don’t want a custom initializer, due to the pain of multiple required init methods. So while my IUO usage is perfectly safe, they’re rather awkward to use.<br>&gt; 	That said, I’d have to see a specific proposal to tell if it’s any better for my usage than IUOs.<br></p><p>Sure.  For that use case, you’d be better served by a “delayed” property, which is initialized exactly once - but after init is done.  There is some infrastructure that is missing to support that, but we’re interested in providing it.<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  5, 2015 at 02:00:00am</p></header><div class="content"><p>On Sat, Dec 5, 2015 at 1:04 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 4, 2015, at 1:18 PM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt;<br>&gt; To be explicit:<br>&gt;<br>&gt;     let a: Bool! = false<br>&gt;<br>&gt;     if a == false { }  // Works as expected<br>&gt;<br>&gt;     if !a { }  // Works as expected<br>&gt;<br>&gt;     if a { }   // &quot;error: optional type &#39;Bool!&#39; cannot be used as a<br>&gt; boolean; test for &#39;!= nil&#39; instead&quot;<br>&gt;<br>&gt; Xcode &quot;fixes&quot; the last line like this:<br>&gt;<br>&gt;     if (a != nil) { }<br>&gt;<br>&gt;<br>&gt; Huh ok.  Out of curiosity, why are you using IUOs for this?<br>&gt;<br></p><p>I will leave that question to Amir who created this thread. I try to avoid<br>IUOs altogether. I only found the above when trying to figure out what the<br>heck he was talking about.<br></p><p><br></p><p>&gt; I’m interested in (continuing to ) dramatically reduce the prevalence of<br>&gt; IOUs in code (eliminating the need to use them), and reduce their power in<br>&gt; various ways.  IUOs are one of the biggest sources of surprising behavior<br>&gt; in Swift, and while they were a necessary feature to start with, their<br>&gt; importance is going down over time.<br>&gt;<br></p><p>What surprised me was the IIUOs. I did not expect Swift to happily help me<br>shoot myself in the foot quite so easily as this.<br></p><p>func isNegative(i: Int?) -&gt; Bool {<br>    return i &lt; 0<br>}<br></p><p>(No, I have never actually written code like this. I can&#39;t tell how likely<br>it is that I would make this mistake.)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/53b552a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  4, 2015 at 05:00:00pm</p></header><div class="content"><p>On Dec 4, 2015, at 5:00 PM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt;&gt; Xcode &quot;fixes&quot; the last line like this:<br>&gt;&gt; <br>&gt;&gt;     if (a != nil) { }<br>&gt; <br>&gt; Huh ok.  Out of curiosity, why are you using IUOs for this?<br>&gt; <br>&gt; I will leave that question to Amir who created this thread. I try to avoid IUOs altogether. I only found the above when trying to figure out what the heck he was talking about.<br>&gt; <br>&gt;  <br>&gt; I’m interested in (continuing to ) dramatically reduce the prevalence of IOUs in code (eliminating the need to use them), and reduce their power in various ways.  IUOs are one of the biggest sources of surprising behavior in Swift, and while they were a necessary feature to start with, their importance is going down over time.<br>&gt; <br>&gt; What surprised me was the IIUOs. I did not expect Swift to happily help me shoot myself in the foot quite so easily as this.<br>&gt; <br>&gt; func isNegative(i: Int?) -&gt; Bool {<br>&gt;     return i &lt; 0<br>&gt; }<br>&gt; <br>&gt; (No, I have never actually written code like this. I can&#39;t tell how likely it is that I would make this mistake.)<br></p><p>This is a separate problem.  One of the things we plan to discuss (once things settle down a bit) is how to narrow the implicit conversion from T to T? in cases like this.  This implicit promotion, as well as the T &lt;-&gt; T! promotions are problematic in a number of ways, and we need a holistic solution to them.  <br></p><p>We have several specific ideas, but Joe Pamer is driving the effort and he is preoccupied with personal things for the next several weeks.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/4f45344a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>On Sat, Dec 5, 2015 at 2:35 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; On Dec 4, 2015, at 5:00 PM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt;<br>&gt; What surprised me was the IIUOs. I did not expect Swift to happily help me<br>&gt; shoot myself in the foot quite so easily as this.<br>&gt;<br>&gt; func isNegative(i: Int?) -&gt; Bool {<br>&gt;     return i &lt; 0<br>&gt; }<br>&gt;<br>&gt; (No, I have never actually written code like this. I can&#39;t tell how likely<br>&gt; it is that I would make this mistake.)<br>&gt;<br>&gt;<br>&gt; This is a separate problem.  One of the things we plan to discuss (once<br>&gt; things settle down a bit) is how to narrow the implicit conversion from T<br>&gt; to T? in cases like this.  This implicit promotion, as well as the T &lt;-&gt; T!<br>&gt; promotions are problematic in a number of ways, and we need a holistic<br>&gt; solution to them.<br>&gt;<br></p><p>I noticed that the promotion is recursive.<br></p><p>    let n: Int??? = 0<br>    true ? 4711 : n // =&gt; Optional(Optional(Optional(4711)))<br></p><p>Implicit promotions aside, what is the strong case for even having (T?, T?)<br>variants of the non-equatable comparable operators? I can see the<br>convenience when sorting optionals, but I must be missing something else?<br></p><p>Once everyone gets the bikeshedding over syntax out of their system,<br>hopefully the discussion can focus on more fundamental issues.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/b93fd62c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
