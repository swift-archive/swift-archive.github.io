<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 29, 2016 at 12:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The second review of “Improved operator declarations” begins now and runs through July 4, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>The previous version of the proposal that was reviewed can be seen here:<br></p><p>https://github.com/apple/swift-evolution/blob/40c2acad241106e1cfe697d0f75e1855dc9e96d5/proposals/0077-operator-precedence.md<br>with review discussion archived in this thread:<br></p><p>	https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/017879.html<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>Reply text<br></p><p>Other replies<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br>Thank you,<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160629/b45abd5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 29, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1 in general.  However, I really don’t like the names `strongerThan` and `weakerThan`.  As I mentioned in the discussion, we usually speak of “higher” and “lower” precedence.  IMO this implies that the appropriate names are “higherThan” and “lowerThan”, or if we prefer more concise single words, “above” and “below” (the latter is my personal preference).<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.  Precedence values are a pragmatic but inelegant decision.  I will be glad to see them go.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes, very much.<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>This proposal will provide Swift with the most sophisticated operator mechanism of any language I am familiar with.  I do not know of anything quite like it.<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>In depth study and participation in both discussions as well as the prior review.<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/e86936a6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July  3, 2016 at 05:00:00pm</p></header><div class="content"><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br></p><p>Alternatives:<br></p><p>	precedencegroup MultiplicativePrecedence : left where Self &gt; AdditivePrecedence<br></p><p>	precedencegroup MultiplicativePrecedence {<br>	    Self &gt; AdditivePrecedence<br>	    associativity : left<br>	}<br></p><p>-- Ben<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Proposal link:<br>&gt;<br>&gt;<br>https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br></p><p>Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>groups.<br>Here&#39;s our recommendation.<br></p><p>In general, we think some names don&#39;t read well and have some ambiguities,<br>for<br>example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&quot;precedence&quot;),<br>&quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br></p><p>We think that two directions would be fruitful:<br></p><p>1.  If the names of precedence groups will be in the same namespace as<br>types,<br>    then we recommend pushing the names of precedence groups into a<br>&quot;namespace&quot;,<br>    for example &quot;Precedence.Assignment&quot;.<br></p><p>2.  If (1) is not workable, we suggest incrementally improving existing<br>names<br>    to make them more readable and less ambiguous.  We think that making the<br>    names less technical by naming the groups after a representative<br>operation<br>    will be easier for users to understand (instead of &quot;AdditivePrecence&quot; we<br>    are proposing &quot;AdditionPrecedence&quot;).  We also think that using an<br>adjective<br>    before &quot;Precedence&quot; does not read well in many cases<br>    (&quot;NilCoalescingPrecedence&quot;: precedence that coalesces nils).<br></p><p><br>Current name            | Namespacing                 | Incremental<br>improvement<br>------------------------|-----------------------------|-----------------------------<br>AssignmentPrecedence    | Precedence.Assignment       | no change<br>TernaryPrecedence       | Precedence.Ternary          | no change<br>DefaultPrecedence       | Precedence.Default          | no change<br>LogicalOrPrecedence     | Precedence.LogicalOr        |<br>DisjunctionPrecedence<br>LogicalAndPrecedence    | Precedence.LogicalAnd       |<br>ConjunctionPrecedence<br>ComparativePrecedence   | Precedence.Comparison       | ComparisonPrecedence<br>NilCoalescingPrecedence | Precedence.NilCoalescing    | no change<br>CastPrecedence          | Precedence.Casting          | no change<br>RangePrecedence         | Precedence.RangeForming     |<br>RangeFormationPrecedence<br>AdditivePrecedence      | Precedence.Addition         | AdditionPrecedence<br>MultiplicativePrecedence| Precedence.Multiplication   |<br>MultiplicationPrecedence<br>BitwiseShiftPrecedence  | Precedence.BitwiseShift     |<br>BitwiseShiftPrecedence<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/0f71dd94/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; Proposal link:<br>&gt; &gt;<br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt; <br>&gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence groups.<br>&gt; Here&#39;s our recommendation.<br>&gt; <br>&gt; In general, we think some names don&#39;t read well and have some ambiguities, for<br>&gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies &quot;precedence&quot;),<br>&gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt; <br>&gt; We think that two directions would be fruitful:<br>&gt; <br>&gt; 1.  If the names of precedence groups will be in the same namespace as types,<br>&gt;     then we recommend pushing the names of precedence groups into a &quot;namespace&quot;,<br>&gt;     for example &quot;Precedence.Assignment&quot;.<br></p><p>We don&#39;t have any language features that would allow this.<br></p><p>John.<br></p><p>&gt; <br>&gt; 2.  If (1) is not workable, we suggest incrementally improving existing names<br>&gt;     to make them more readable and less ambiguous.  We think that making the<br>&gt;     names less technical by naming the groups after a representative operation<br>&gt;     will be easier for users to understand (instead of &quot;AdditivePrecence&quot; we<br>&gt;     are proposing &quot;AdditionPrecedence&quot;).  We also think that using an adjective<br>&gt;     before &quot;Precedence&quot; does not read well in many cases<br>&gt;     (&quot;NilCoalescingPrecedence&quot;: precedence that coalesces nils).<br>&gt; <br>&gt; <br>&gt; Current name            | Namespacing                 | Incremental improvement<br>&gt; ------------------------|-----------------------------|-----------------------------<br>&gt; AssignmentPrecedence    | Precedence.Assignment       | no change<br>&gt; TernaryPrecedence       | Precedence.Ternary          | no change<br>&gt; DefaultPrecedence       | Precedence.Default          | no change<br>&gt; LogicalOrPrecedence     | Precedence.LogicalOr        | DisjunctionPrecedence<br>&gt; LogicalAndPrecedence    | Precedence.LogicalAnd       | ConjunctionPrecedence<br>&gt; ComparativePrecedence   | Precedence.Comparison       | ComparisonPrecedence<br>&gt; NilCoalescingPrecedence | Precedence.NilCoalescing    | no change<br>&gt; CastPrecedence          | Precedence.Casting          | no change<br>&gt; RangePrecedence         | Precedence.RangeForming     | RangeFormationPrecedence<br>&gt; AdditivePrecedence      | Precedence.Addition         | AdditionPrecedence<br>&gt; MultiplicativePrecedence| Precedence.Multiplication   | MultiplicationPrecedence<br>&gt; BitwiseShiftPrecedence  | Precedence.BitwiseShift     | BitwiseShiftPrecedence<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/a7e0e8e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>On Thu, Jul 7, 2016 at 9:27 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Proposal link:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>&gt; groups.<br>&gt; Here&#39;s our recommendation.<br>&gt;<br>&gt; In general, we think some names don&#39;t read well and have some ambiguities,<br>&gt; for<br>&gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&gt; &quot;precedence&quot;),<br>&gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt;<br>&gt; We think that two directions would be fruitful:<br>&gt;<br>&gt; 1.  If the names of precedence groups will be in the same namespace as<br>&gt; types,<br>&gt;     then we recommend pushing the names of precedence groups into a<br>&gt; &quot;namespace&quot;,<br>&gt;     for example &quot;Precedence.Assignment&quot;.<br>&gt;<br>&gt;<br>&gt; We don&#39;t have any language features that would allow this.<br></p><p>&#39;precedencegroup&#39; that is being proposed is a new language feature, we<br>can choose to use any syntax we like with it.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July  7, 2016 at 09:00:00pm</p></header><div class="content"><p>An important thing to consider is if we really want to break standard<br>library precedence hierarchy.<br>If we don&#39;t, then the proposal loses significance immediately.<br>If we do, then we should start discussion of specific changes right after<br>this one.<br></p><p>I&#39;m fine with NilCoalescingPrecedence, because Coalescing is a noun in this<br>case. For example, we talk about &quot;nil coalescing&quot; operator.<br></p><p>Situation with namespacing is more intricate. I don&#39;t mind Precedence<br>suffixes very much (better make keywords shorter), but it would be great if<br>we came up with an elegant solution for dropping them.<br>One idea: add Precedence suffix automatically: &#39;precedence Additive&#39;,<br>&#39;before: Additive&#39;, BUT &#39;Swift.AdditivePrecedence&#39;.<br></p><p>2016-07-07 19:28 GMT+03:00 Dmitri Gribenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; On Thu, Jul 7, 2016 at 9:27 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; &gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; Proposal link:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; &gt;<br>&gt; &gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>&gt; &gt; groups.<br>&gt; &gt; Here&#39;s our recommendation.<br>&gt; &gt;<br>&gt; &gt; In general, we think some names don&#39;t read well and have some<br>&gt; ambiguities,<br>&gt; &gt; for<br>&gt; &gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt; &gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&gt; &gt; &quot;precedence&quot;),<br>&gt; &gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt; &gt;<br>&gt; &gt; We think that two directions would be fruitful:<br>&gt; &gt;<br>&gt; &gt; 1.  If the names of precedence groups will be in the same namespace as<br>&gt; &gt; types,<br>&gt; &gt;     then we recommend pushing the names of precedence groups into a<br>&gt; &gt; &quot;namespace&quot;,<br>&gt; &gt;     for example &quot;Precedence.Assignment&quot;.<br>&gt; &gt;<br>&gt; &gt; We don&#39;t have any language features that would allow this.<br>&gt;<br>&gt; &#39;precedencegroup&#39; that is being proposed is a new language feature, we<br>&gt; can choose to use any syntax we like with it.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/54b9b85f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 7, 2016, at 11:53 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; An important thing to consider is if we really want to break standard library precedence hierarchy.<br>&gt; If we don&#39;t, then the proposal loses significance immediately.<br>&gt; If we do, then we should start discussion of specific changes right after this one.<br></p><p>I think we&#39;ll need to anticipate a migration story for this regardless, since we&#39;re already constrained on remaining time for breaking changes to Swift 3. If push comes to shove, we could plausibly stage this in after 3.0 by mapping our existing numeric precedences to the corresponding named precedence groups in order to provide compatibility between the two models. We can also deprecate unwanted precedence relationships in the standard library so that they raise warnings before removing them after the compatibility window expires.<br></p><p>-Joe<br></p><p>&gt; I&#39;m fine with NilCoalescingPrecedence, because Coalescing is a noun in this case. For example, we talk about &quot;nil coalescing&quot; operator.<br>&gt; <br>&gt; Situation with namespacing is more intricate. I don&#39;t mind Precedence suffixes very much (better make keywords shorter), but it would be great if we came up with an elegant solution for dropping them.<br>&gt; One idea: add Precedence suffix automatically: &#39;precedence Additive&#39;, &#39;before: Additive&#39;, BUT &#39;Swift.AdditivePrecedence&#39;.<br>&gt; <br>&gt; 2016-07-07 19:28 GMT+03:00 Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; On Thu, Jul 7, 2016 at 9:27 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; &gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; Proposal link:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; &gt;<br>&gt; &gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>&gt; &gt; groups.<br>&gt; &gt; Here&#39;s our recommendation.<br>&gt; &gt;<br>&gt; &gt; In general, we think some names don&#39;t read well and have some ambiguities,<br>&gt; &gt; for<br>&gt; &gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt; &gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&gt; &gt; &quot;precedence&quot;),<br>&gt; &gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt; &gt;<br>&gt; &gt; We think that two directions would be fruitful:<br>&gt; &gt;<br>&gt; &gt; 1.  If the names of precedence groups will be in the same namespace as<br>&gt; &gt; types,<br>&gt; &gt;     then we recommend pushing the names of precedence groups into a<br>&gt; &gt; &quot;namespace&quot;,<br>&gt; &gt;     for example &quot;Precedence.Assignment&quot;.<br>&gt; &gt;<br>&gt; &gt; We don&#39;t have any language features that would allow this.<br>&gt; <br>&gt; &#39;precedencegroup&#39; that is being proposed is a new language feature, we<br>&gt; can choose to use any syntax we like with it.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  7, 2016 at 02:00:00pm</p></header><div class="content"><p>On Thu, Jul 7, 2016 at 11:28 AM, Dmitri Gribenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Thu, Jul 7, 2016 at 9:27 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; &gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; Proposal link:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; &gt;<br>&gt; &gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>&gt; &gt; groups.<br>&gt; &gt; Here&#39;s our recommendation.<br>&gt; &gt;<br>&gt; &gt; In general, we think some names don&#39;t read well and have some<br>&gt; ambiguities,<br>&gt; &gt; for<br>&gt; &gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt; &gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&gt; &gt; &quot;precedence&quot;),<br>&gt; &gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt; &gt;<br>&gt; &gt; We think that two directions would be fruitful:<br>&gt; &gt;<br>&gt; &gt; 1.  If the names of precedence groups will be in the same namespace as<br>&gt; &gt; types,<br>&gt; &gt;     then we recommend pushing the names of precedence groups into a<br>&gt; &gt; &quot;namespace&quot;,<br>&gt; &gt;     for example &quot;Precedence.Assignment&quot;.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; We don&#39;t have any language features that would allow this.<br>&gt;<br>&gt; &#39;precedencegroup&#39; that is being proposed is a new language feature, we<br>&gt; can choose to use any syntax we like with it.<br>&gt;<br>&gt;<br>If you&#39;re going to design a new language feature to sink precedence groups<br>into a namespace of their own, you might as well sink them into an<br>unutterable namespace, effectively moving them out of the same namespace as<br>types altogether, no?<br></p><p><br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/80d6ba78/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July  7, 2016 at 11:00:00pm</p></header><div class="content"><p>It really looks like the process is showing its limits... with so many people, some with knowledge of compiler imposed limitations, most with a laundry list of their favorite features from other languages, and even a few aspiring at finally having anti-gravity boots into the compiler, it seems something might have to change to keep the debate while allowing more focus than has sometimes happened around hot topics. <br>Regards<br>(From mobile)<br></p><p>&gt; On Jul 7, 2016, at 9:02 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Thu, Jul 7, 2016 at 11:28 AM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Thu, Jul 7, 2016 at 9:27 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt; &gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; Proposal link:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>&gt;&gt; &gt; groups.<br>&gt;&gt; &gt; Here&#39;s our recommendation.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; In general, we think some names don&#39;t read well and have some ambiguities,<br>&gt;&gt; &gt; for<br>&gt;&gt; &gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt;&gt; &gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&gt;&gt; &gt; &quot;precedence&quot;),<br>&gt;&gt; &gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We think that two directions would be fruitful:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1.  If the names of precedence groups will be in the same namespace as<br>&gt;&gt; &gt; types,<br>&gt;&gt; &gt;     then we recommend pushing the names of precedence groups into a<br>&gt;&gt; &gt; &quot;namespace&quot;,<br>&gt;&gt; &gt;     for example &quot;Precedence.Assignment&quot;.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We don&#39;t have any language features that would allow this.<br>&gt;&gt; <br>&gt;&gt; &#39;precedencegroup&#39; that is being proposed is a new language feature, we<br>&gt;&gt; can choose to use any syntax we like with it.<br>&gt;&gt; <br>&gt; <br>&gt; If you&#39;re going to design a new language feature to sink precedence groups into a namespace of their own, you might as well sink them into an unutterable namespace, effectively moving them out of the same namespace as types altogether, no?<br>&gt;  <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/80e6a9c4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0077 v2: Improved operator declarations</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July  7, 2016 at 11:00:00pm</p></header><div class="content"><p>I look forward to the final design as i find these precedence groups a great additions.<br>Regards<br>(From mobile)<br></p><p>&gt; On Jul 7, 2016, at 9:02 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Thu, Jul 7, 2016 at 11:28 AM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Thu, Jul 7, 2016 at 9:27 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt; &gt; On Jul 7, 2016, at 9:23 AM, Dmitri Gribenko via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; Proposal link:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Dave, Max and I discussed SE-0077 and reviewed the names of precedence<br>&gt;&gt; &gt; groups.<br>&gt;&gt; &gt; Here&#39;s our recommendation.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; In general, we think some names don&#39;t read well and have some ambiguities,<br>&gt;&gt; &gt; for<br>&gt;&gt; &gt; example, &quot;LogicalAndPrecedence&quot; (looks like a conjunction),<br>&gt;&gt; &gt; &quot;AdditivePrecedence&quot; (&quot;additive&quot; is an adjective that modifies<br>&gt;&gt; &gt; &quot;precedence&quot;),<br>&gt;&gt; &gt; &quot;RangePrecedence&quot; (&quot;range&quot; is not an adjective, stands out).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We think that two directions would be fruitful:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1.  If the names of precedence groups will be in the same namespace as<br>&gt;&gt; &gt; types,<br>&gt;&gt; &gt;     then we recommend pushing the names of precedence groups into a<br>&gt;&gt; &gt; &quot;namespace&quot;,<br>&gt;&gt; &gt;     for example &quot;Precedence.Assignment&quot;.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We don&#39;t have any language features that would allow this.<br>&gt;&gt; <br>&gt;&gt; &#39;precedencegroup&#39; that is being proposed is a new language feature, we<br>&gt;&gt; can choose to use any syntax we like with it.<br>&gt;&gt; <br>&gt; <br>&gt; If you&#39;re going to design a new language feature to sink precedence groups into a namespace of their own, you might as well sink them into an unutterable namespace, effectively moving them out of the same namespace as types altogether, no?<br>&gt;  <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/9c1fae48/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
