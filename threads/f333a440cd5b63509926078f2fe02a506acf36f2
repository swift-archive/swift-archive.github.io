<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7f819832e1487a75efea2149a0a952d6?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>BJ Homer</string> &lt;bjhomer at gmail.com&gt;<p>April 20, 2016 at 09:00:00am</p></header><div class="content"><p>How would this proposal affect curried functions? Would this:<br></p><p>  func foo(int: Int) -&gt; Int -&gt; String -&gt; String<br></p><p>become this?<br></p><p>  func foo(int: Int) -&gt; (((Int) -&gt; String) -&gt; String)<br></p><p>As I understand, that transformation is an accurate representation of the actual return type of “foo”, but it’s certainly going to raise some complaints among the functional Swift community if required.<br></p><p>-BJ<br></p><p><br></p><p><br>&gt; We currently accept function type syntax without parentheses, like:<br>&gt; <br>&gt; Int -&gt;Float<br>&gt; String -&gt;()<br>&gt; <br>&gt; etc. The original rationale aligned with the fact that we wanted to treat all functions as taking a single parameter (which was often of tuple type) and producing a tuple value (which was sometimes a tuple, in the case of void and multiple return values). However, we’ve long since moved on from that early design point: there are a number of things that you can only do in a parameter list now (varargs, default args, etc), implicit tuple splat has been removed, and the compiler has long ago stopped modeling function parameters this way. Beyond that, it eliminates one potential style war.<br>&gt; <br>&gt; Given all this, I think it makes sense to go for syntactic uniformity between parameter list and function types, and just require parenthesis on the argument list. The types above can be trivially written as:<br>&gt; <br>&gt; (Int) -&gt;Float<br>&gt; (String) -&gt;()<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 20, 2016 at 11:00:00am</p></header><div class="content"><p>On Apr 20, 2016, at 9:46 AM, BJ Homer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How would this proposal affect curried functions? Would this:<br>&gt; <br>&gt;  func foo(int: Int) -&gt; Int -&gt; String -&gt; String<br>&gt; <br>&gt; become this?<br>&gt; <br>&gt;  func foo(int: Int) -&gt; (((Int) -&gt; String) -&gt; String)<br>&gt; <br>&gt; As I understand, that transformation is an accurate representation of the actual return type of “foo”, but it’s certainly going to raise some complaints among the functional Swift community if required.<br>&gt; <br>&gt; -BJ<br></p><p>To the best of my understanding, either:<br></p><p>func foo(i: Int) -&gt; (j: Int) -&gt; (s: String) -&gt; String { ... }<br>let x = foo // let x: (Int) -&gt; (j: Int) -&gt; (s: String) -&gt; String<br>let a = x(2); let b = a(j: 3); let c = b(s: &quot;glob&quot;); print(c)<br></p><p>or<br></p><p>func blort(i: Int) -&gt; (Int) -&gt; (String) -&gt; String<br>let z = blort // let z: (Int) -&gt; (Int) -&gt; (String) -&gt; String<br>let aa = z(2); let bb = aa(3); let cc = bb(&quot;glob&quot;); print(cc)<br></p><p>would still work (although x(2) would become x(i: 2) because of the new first label rules) vs the following which currently works but would not after adoption:<br></p><p>func bar(i: Int) -&gt; Int -&gt; String -&gt; String { ... }<br>let y = bar // let y: (Int) -&gt; Int -&gt; String -&gt; String<br></p><p>-- E, who is often wrong<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160420/766f16c7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 20, 2016, at 8:46 AM, BJ Homer &lt;bjhomer at gmail.com&gt; wrote:<br>&gt; <br>&gt; How would this proposal affect curried functions? Would this:<br>&gt; <br>&gt;  func foo(int: Int) -&gt; Int -&gt; String -&gt; String<br>&gt; <br>&gt; become this?<br>&gt; <br>&gt;  func foo(int: Int) -&gt; (((Int) -&gt; String) -&gt; String)<br></p><p>No, it becomes:<br></p><p>func foo(int: Int) -&gt; (Int) -&gt; (String) -&gt; String<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 21, 2016 at 10:00:00am</p></header><div class="content"><p>In this particular case I belive<br></p><p>func foo(int: Int) -&gt; (Int) -&gt; (String) -&gt; String<br></p><p>is much more explicit and clear about what is what :<br></p><p>foo(int: Int) returns not Int(that returns then String and then String).<br></p><p>foo(int: Int) return function with (Int) parameter, that return func with <br>(String) parameter that returns single String value.<br></p><p><br>On 20.04.2016 20:53, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Apr 20, 2016, at 8:46 AM, BJ Homer &lt;bjhomer at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; How would this proposal affect curried functions? Would this:<br>&gt;&gt;<br>&gt;&gt;  func foo(int: Int) -&gt; Int -&gt; String -&gt; String<br>&gt;&gt;<br>&gt;&gt; become this?<br>&gt;&gt;<br>&gt;&gt;  func foo(int: Int) -&gt; (((Int) -&gt; String) -&gt; String)<br>&gt;<br>&gt; No, it becomes:<br>&gt;<br>&gt; func foo(int: Int) -&gt; (Int) -&gt; (String) -&gt; String<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
