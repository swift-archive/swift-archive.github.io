<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  2, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Feb 02 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>&gt;&gt;&gt;&gt;&gt; minor points and disagreements:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Like I mentioned in my SE-0023 review, I would be OK with keeping<br>&gt;<br>&gt;&gt;&gt;&gt;&gt; the &quot;Type&quot; suffix for protocols but have no strong preference.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * I&#39;m in favor of keeping `precondition()`. `require()` might be<br>&gt;&gt;&gt;&gt;&gt; easier to grasp at first but personally I really came to like<br>&gt;&gt;&gt;&gt;&gt; `precondition()`.<br>&gt;&gt;&gt;&gt;&gt; It fells both precise and I prefer the passive `precondition()` to the<br>&gt;&gt;&gt;&gt;&gt; active `require()` for this case. To me it fits the primary meaning<br>&gt;&gt;&gt;&gt;&gt; better; stating an API contract. The fact that the condition is<br>&gt;&gt;&gt;&gt;&gt; actively checked is secondary to that.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>&gt;&gt;&gt;&gt;&gt; Bool)` to `removeAll(keepingCapacity: Bool)`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>&gt;&gt;&gt;&gt; eventually I realized that this pattern is less ambiguous, at least in<br>&gt;&gt;&gt;&gt; general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>&gt;&gt;&gt;&gt; considered high-tech construction elements since the middle ages, but<br>&gt;&gt;&gt;&gt; it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>&gt;&gt;&gt;&gt; keep.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not, though? adding `-ing`s in this context has all of the<br>&gt;&gt;&gt; problems -ed/-ing has with method names, <br>&gt;&gt; <br>&gt;&gt; Which problems, sorry?<br>&gt;<br>&gt; A bit of extra spelling gymnastics… Maybe I’m the only one bothered by<br>&gt; this, but I’d just prefer a shorter/simpler name in absence of a<br>&gt; compelling reason to do otherwise. (You did make an argument for why<br>&gt; in a later post, fwiw. I’m not super compelled by it, but also don’t<br>&gt; feel so strongly against the `ing` to argue further ;) )<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; and none of the necessity of conveying mutability information.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What’s wrong with “keepCapacity” as a parameter name?<br>&gt;&gt; <br>&gt;&gt; It can be interpreted as denoting the capacity of the keep.<br>&gt;<br>&gt; Wow, that… would have never crossed my mind ;)<br></p><p>It&#39;s a terribly anachronistic example, but it&#39;s not hard to think of<br>others that aren&#39;t so terrible.<br></p><p>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * What is the rationale for moving `unsafeUnwrap` into Optional but<br>&gt;&gt;&gt;&gt;&gt; not `unsafeAddressOf` into AnyObject? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Language limitation: AnyObject can&#39;t be modified or extended.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I can certainly see the safety argument against moving it but I don&#39;t<br>&gt;&gt;&gt;&gt;&gt; see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>&gt;&gt;&gt;&gt;&gt; sense given the API guidelines and the previous `EnumerateSequence`<br>&gt;&gt;&gt;&gt;&gt; and `Repeat` were a bit clunky as well but these somehow feel a bit<br>&gt;&gt;&gt;&gt;&gt; worse... That might be wholly subjective though and I don&#39;t really<br>&gt;&gt;&gt;&gt;&gt; have a good suggestion. The only thing that came to mind was<br>&gt;&gt;&gt;&gt;&gt; `EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>&gt;&gt;&gt;&gt;&gt; those either especially not to the point of deviating from the norm...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>&gt;&gt;&gt;&gt; :-)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * This is not a disagreement but I&#39;d be interested in hearing the<br>&gt;&gt;&gt;&gt;&gt; reasons for replacing Generator(Type) with Iterator(Protocol) if<br>&gt;&gt;&gt;&gt;&gt; someone finds the time. I can speculate of course but it&#39;s probably<br>&gt;&gt;&gt;&gt;&gt; easier for someone to give me a short summary :-)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think these messages give all the details:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com<br>&gt;&gt;&gt;&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/5344<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Typo: <br>&gt;&gt;&gt;&gt;&gt;&gt; +  public func take() -&gt; Memory // Should be Pointee<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Nice, thanks.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
