<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e40d3058defa1eaaa61ed5aa88d2be5?s=50"></div><header><strong>[Proposal] Add floor() and ceiling() functions to FloatingPoint</strong> from <string>Björn Forster</string> &lt;bjoern.forster at googlemail.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Karl and everyone else involved,<br>an IEEE754 conform floating point implementation requires also squrt and a<br>remainer function being provided by the respective float implementation.<br>Shouldn&#39;t these two be also added to the FloatingPoint protocol now that<br>the rounding functions are being added?<br></p><p>Kind Regards,<br>Björn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/7292668c/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Proposal] Add floor() and ceiling() functions to FloatingPoint</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 11:00:00am</p></header><div class="content"><p>These are already included with SE-0067, we’re just working on finishing up the implementation.<br></p><p>  /// Remainder of `self` divided by `other`.  This is the IEEE 754 remainder<br>  /// operation.<br>  ///<br>  /// For finite `self` and `other`, the remainder `r` is defined by<br>  /// `r = self - other*n`, where `n` is the integer nearest to `self/other`.<br>  /// (Note that `n` is *not* `self/other` computed in floating-point<br>  /// arithmetic, and that `n` may not even be representable in any available<br>  /// integer type).  If `self/other` is exactly halfway between two integers,<br>  /// `n` is chosen to be even.<br>  ///<br>  /// It follows that if `self` and `other` are finite numbers, the remainder<br>  /// `r` satisfies `-|other|/2 &lt;= r` and `r &lt;= |other|/2`.<br>  ///<br>  /// `remainder` is always exact.<br>  func remainder(dividingBy other: Self) -&gt; Self<br></p><p>  /// Mutating form of `remainder`.<br>  mutating func formRemainder(dividingBy other: Self)<br></p><p>  /// Remainder of `self` divided by `other` using truncating division.<br>  /// Equivalent to the C standard library function `fmod`.<br>  ///<br>  /// If `self` and `other` are finite numbers, the truncating remainder<br>  /// `r` has the same sign as `other` and is strictly smaller in magnitude.<br>  /// It satisfies `r = self - other*n`, where `n` is the integral part<br>  /// of `self/other`.<br>  ///<br>  /// `truncatingRemainder` is always exact.<br>  func truncatingRemainder(dividingBy other: Self) -&gt; Self<br></p><p>  /// Mutating form of `truncatingRemainder`.<br>  mutating func formTruncatingRemainder(dividingBy other: Self)<br></p><p>  /// Square root of `self`.<br>  func squareRoot() -&gt; Self<br></p><p>  /// Mutating form of square root.<br>  mutating func formSquareRoot()<br></p><p>  /// `self + lhs*rhs` computed without intermediate rounding.  Implements the<br>  /// IEEE 754 `fusedMultiplyAdd` operation.<br>  func addingProduct(_ lhs: Self, _ rhs: Self) -&gt; Self<br></p><p>  /// Fused multiply-add, accumulating the product of `lhs` and `rhs` to `self`.<br>  mutating func addProduct(_ lhs: Self, _ rhs: Self)<br></p><p>&gt; On Jul 1, 2016, at 4:06 AM, Björn Forster via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Karl and everyone else involved,<br>&gt; an IEEE754 conform floating point implementation requires also squrt and a remainer function being provided by the respective float implementation. Shouldn&#39;t these two be also added to the FloatingPoint protocol now that the rounding functions are being added?<br>&gt; <br>&gt; Kind Regards,<br>&gt; Björn  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/5e843d1f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
