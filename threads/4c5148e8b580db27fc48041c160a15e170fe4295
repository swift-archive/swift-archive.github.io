<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/166a0f2d31c2d92859c7b9a5e8ba8700?s=50"></div><header><strong>AST – Understanding @lvalue</strong> from <string>Tim Bodeit</string> &lt;swift-dev at timbodeit.de&gt;<p>May 24, 2016 at 06:00:00pm</p></header><div class="content"><p>I couldn’t find any documentation about lvalues in Swift. Can anybody give me a short explanation of what exactly an lvalue is?<br></p><p>In C++ all variables, including those marked with the const modifier seem to be lvalues. It seems to me, that this is not the case for let constants in Swift.<br></p><p>I compared the output of swiftc -dump-ast for <br>let i = 42<br>let j = i+1<br>and<br>var i = 42<br>let j = i+1<br></p><p>Where i was respectively accessed as:<br></p><p>(declref_expr type=&#39;Int&#39; location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9] decl=lvaluetest.(file).i at lvaluetest.swift:1:5 direct_to_storage specialized=no)<br></p><p>(load_expr implicit type=&#39;Int&#39; location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9]<br>  (declref_expr type=&#39;@lvalue Int&#39; accessKind=read location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9] decl=lvaluetest.(file).i at lvaluetest.swift:1:5 direct_to_storage specialized=no))<br></p><p>Is my assumption correct, that let constants are not lvalues?<br></p><p>Cheers,<br></p><p>Tim<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160524/4c514295/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>AST – Understanding @lvalue</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>May 24, 2016 at 10:00:00am</p></header><div class="content"><p>An lvalue is something that can be assigned to / changed. The terminology comes from assignment statements: in “foo = bar”, “foo” is a left-value (lvalue) and “bar&quot; is a right-value (rvalue). The difference is that the lvalue is a named location that can take on a new value and an rvalue is just a plain value.<br></p><p>See: https://en.wikipedia.org/wiki/Value_(computer_science)#lrvalue &lt;https://en.wikipedia.org/wiki/Value_(computer_science)#lrvalue&gt;<br></p><p>In Swift’s AST, you’ll see @lvalue as the type coming from a declaration reference (declref) for var’s and for inout parameters inside a method implementation. You’ll see function application require @lvalue types for inout parameters (most of which will be the implicit first parameters of ‘mutating’ functions - the thing to be mutated). A load converts an expression from an lvalue to being an rvalue, and a store takes an lvalue and a new rvalue to be put there.<br></p><p>Hope this helps!<br>	- Greg<br></p><p>&gt; On May 24, 2016, at 9:48 AM, Tim Bodeit via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I couldn’t find any documentation about lvalues in Swift. Can anybody give me a short explanation of what exactly an lvalue is?<br>&gt; <br>&gt; In C++ all variables, including those marked with the const modifier seem to be lvalues. It seems to me, that this is not the case for let constants in Swift.<br>&gt; <br>&gt; I compared the output of swiftc -dump-ast for <br>&gt; let i = 42<br>&gt; let j = i+1<br>&gt; and<br>&gt; var i = 42<br>&gt; let j = i+1<br>&gt; <br>&gt; Where i was respectively accessed as:<br>&gt; <br>&gt; (declref_expr type=&#39;Int&#39; location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9] decl=lvaluetest.(file).i at lvaluetest.swift &lt;mailto:i at lvaluetest.swift&gt;:1:5 direct_to_storage specialized=no)<br>&gt; <br>&gt; (load_expr implicit type=&#39;Int&#39; location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9]<br>&gt;   (declref_expr type=&#39;@lvalue Int&#39; accessKind=read location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9] decl=lvaluetest.(file).i at lvaluetest.swift &lt;mailto:i at lvaluetest.swift&gt;:1:5 direct_to_storage specialized=no))<br>&gt; <br>&gt; Is my assumption correct, that let constants are not lvalues?<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Tim<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160524/7f5d8d5d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>AST – Understanding @lvalue</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 24, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 24, 2016, at 9:48 AM, Tim Bodeit via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; I couldn’t find any documentation about lvalues in Swift. Can anybody give me a short explanation of what exactly an lvalue is?<br>&gt; <br>&gt; In C++ all variables, including those marked with the const modifier seem to be lvalues. It seems to me, that this is not the case for let constants in Swift.<br></p><p>Correct.  There are potential language directions Swift could head in that would force us to formalize a notion of addressable but immutable memory in our typing judgement, but right now that is not necessary.<br></p><p>If you are looking at compiler internals, note that SILGen does sometimes form LValues for immutable values (which it then avoids actually mutating).<br></p><p>John.<br></p><p>&gt; <br>&gt; I compared the output of swiftc -dump-ast for <br>&gt; let i = 42<br>&gt; let j = i+1<br>&gt; and<br>&gt; var i = 42<br>&gt; let j = i+1<br>&gt; <br>&gt; Where i was respectively accessed as:<br>&gt; <br>&gt; (declref_expr type=&#39;Int&#39; location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9] decl=lvaluetest.(file).i at lvaluetest.swift &lt;mailto:i at lvaluetest.swift&gt;:1:5 direct_to_storage specialized=no)<br>&gt; <br>&gt; (load_expr implicit type=&#39;Int&#39; location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9]<br>&gt;   (declref_expr type=&#39;@lvalue Int&#39; accessKind=read location=lvaluetest.swift:2:9 range=[lvaluetest.swift:2:9 - line:2:9] decl=lvaluetest.(file).i at lvaluetest.swift &lt;mailto:i at lvaluetest.swift&gt;:1:5 direct_to_storage specialized=no))<br>&gt; <br>&gt; Is my assumption correct, that let constants are not lvalues?<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Tim<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160524/7f551ef7/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
