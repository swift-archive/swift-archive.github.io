<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3fb6d812724261c1ab041db0d41baebc?s=50"></div><header><strong>the &quot;guard&quot; keyword, again</strong> from <string>Dave Yost</string> &lt;Dave at Yost.com&gt;<p>June 20, 2016 at 10:00:00pm</p></header><div class="content"><p>In the Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt; page and in this swift-evolution email &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005534.html&gt; to which it refers, I read that first there was “unless&quot;, then “require” then finally “guard ... else”.<br></p><p>I couldn’t find the earlier discussion in which “unless” was replaced for a while by “require”, so I am moved to ask, “Was there ever “require … else”, or was it just “require”? I’ll assume it was just “require”.<br></p><p>There are various problems with the choice of the keyword “guard”. These have bothered me every since I first saw it.<br></p><p><br></p><p>Problems:<br>If we’re reading “guard” as a verb, then we expect the object to come right after it, but it doesn’t; you can’t say you’re guarding the condition-clause. No, what you’re guarding is the code after the entire guard-statement.<br>The “else” after guard suggests that the else code covers what to do when the guard fails, but the guard doesn’t fail in the “else”; the guarding works correctly on both execution paths.<br>The “guard” keyword gives no hint really as to whether the condition is required or prohibited; you figure that out only be thinking about why there is an “else” clause. The guard statement is intended to replace typical code in the wild that uses an “if” statement that is written to abort when the condition fails, not when it succeeds.<br></p><p><br>Proposed<br>   require count &gt;= 0 else { return }<br>Replaces<br>   guard count &gt;= 0 else { return }<br>Unambiguously equivalent to<br>   if count &lt; 0 { return }<br></p><p>Benefits of “require … else”:<br>The word “require” states more clearly and strongly than “guard” that it is an ultimatum.<br>The word “require” conveys clearly that the require-statement can block the following statement from executing.<br>The condition-clause functions as the object of the verb “require”, so it reads well as natural language.<br>The sense of the condition-clause is clear; success is required before executing the next statement.<br>The “else” after “require” clearly introduces code to run if the requirement is not met.<br>With the new comma syntax for conditions, the word “require” fits well with the fact that all conditions in the list are, shall we say, required.<br>When one of the conditions is a let, “require” conveys the idea that the declaration will be required and thus will have a lifetime beyond the require-statement.<br></p><p>It would still be OK to refer to a require-statement as a “guard clause&quot;, to invoke the history of guarding. But even here, I think “require clause” is clearer (see last bullet point). Evoking the historical use of the term “guard” for this construct in Swift is not such a great argument because (a) the term is not that well known, and (b) the term has not always been used for clearly the same purpose. Dijkstra’s use of the term &lt;https://en.wikipedia.org/wiki/Guarded_Command_Language#Selection:_if&gt;, for example, was a bit different, allowing for nondeterministic execution.<br></p><p>In summary, “require … else” is a very clean choice and beats “guard ... else” handily.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/093fa290/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: PastedGraphic-1.png<br>Type: image/png<br>Size: 14792 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/093fa290/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec5a599777854c540fd102ef4691fe10?s=50"></div><header><strong>the &quot;guard&quot; keyword, again</strong> from <string>Rimantas Liubertas</string> &lt;rimantas at gmail.com&gt;<p>June 21, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; In summary, “require … else” is a very clean choice and beats “guard ...<br>&gt; else” handily.<br>&gt;<br></p><p>For you maybe. I prefer quard—it carries slightly different semantic load<br>and fits more cases, imho.<br></p><p>r.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/6a7a0d5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>the &quot;guard&quot; keyword, again</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>June 21, 2016 at 12:00:00pm</p></header><div class="content"><p>I think unless has always made more sense, guard felt like a multithreaded<br>statement as in guard this variable from other threads.<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 21 June 2016 at 09:14, Rimantas Liubertas via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; In summary, “require … else” is a very clean choice and beats “guard ...<br>&gt;&gt; else” handily.<br>&gt;&gt;<br>&gt;<br>&gt; For you maybe. I prefer quard—it carries slightly different semantic load<br>&gt; and fits more cases, imho.<br>&gt;<br>&gt; r.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/bccdb8dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>the &quot;guard&quot; keyword, again</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>June 21, 2016 at 09:00:00am</p></header><div class="content"><p>Perhaps that was the original idea (guard as a multithreaded statement)<br>since in iOS your code and the UI run on different threads. Anyway, I&#39;d<br>still stick with guard as I don&#39;t think this is confusing enough to justify<br>a change.<br></p><p>On Tuesday, 21 June 2016, James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org<br>&lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br></p><p>&gt; I think unless has always made more sense, guard felt like a multithreaded<br>&gt; statement as in guard this variable from other threads.<br>&gt;<br>&gt; *___________________________________*<br>&gt;<br>&gt; *James⎥Head of Trolls*<br>&gt;<br>&gt; *james at supmenow.com⎥supmenow.com &lt;http://supmenow.com&gt;*<br>&gt;<br>&gt; *Sup*<br>&gt;<br>&gt; *Runway East *<br>&gt;<br>&gt; *10 Finsbury Square*<br>&gt;<br>&gt; *London*<br>&gt;<br>&gt; * EC2A 1AF *<br>&gt;<br>&gt; On 21 June 2016 at 09:14, Rimantas Liubertas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; In summary, “require … else” is a very clean choice and beats “guard ...<br>&gt;&gt;&gt; else” handily.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; For you maybe. I prefer quard—it carries slightly different semantic load<br>&gt;&gt; and fits more cases, imho.<br>&gt;&gt;<br>&gt;&gt; r.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p>-- <br>L<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/d3bb2d34/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>the &quot;guard&quot; keyword, again</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 21, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; In the Commonly Rejected Changes page and in this swift-evolution email to which it refers, I read that first there was “unless&quot;, then “require” then finally “guard ... else”.<br>&gt; <br>&gt; I couldn’t find the earlier discussion in which “unless” was replaced for a while by “require”, so I am moved to ask, “Was there ever “require … else”, or was it just “require”? I’ll assume it was just “require”.<br></p><p>FYI the decisions and discussions that lead to “guard&quot; occurred within Apple well before Swift was open sourced.<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>the &quot;guard&quot; keyword, again</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 6:44 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; In the Commonly Rejected Changes page and in this swift-evolution email to which it refers, I read that first there was “unless&quot;, then “require” then finally “guard ... else”.<br>&gt;&gt; <br>&gt;&gt; I couldn’t find the earlier discussion in which “unless” was replaced for a while by “require”, so I am moved to ask, “Was there ever “require … else”, or was it just “require”? I’ll assume it was just “require”.<br>&gt; <br>&gt; FYI the decisions and discussions that lead to “guard&quot; occurred within Apple well before Swift was open sourced.<br></p><p>Correct.  There is no publicly released Swift version that used ‘unless’, but you can see it appear in the changelog.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
