<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Should closures support inout parameters?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>September 18, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri Sep 16 2016, Braeden Profile &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I was writing some code that would allow transformations of values as<br>&gt; part of an expression, and I came across a strange error:<br>&gt;<br>&gt; /// Returns the operand after a given transformation.<br>&gt; ///<br>&gt; /// Example:  `let newRect = myRect &lt;&lt; { $0.origin.x += 3 }`<br>&gt; func &lt;&lt; &lt;T&gt; (given: T, transformation: (inout T) -&gt; ()) -&gt; T<br>&gt; {<br>&gt; 	var result = given<br>&gt; 	transformation(&amp;result)<br>&gt; 	return result<br>&gt; }<br>&gt;<br>&gt; let volume = component.volume &lt;&lt; { $0.ranges.z.width = 0 } // Error:<br>&gt; Expression type () is ambiguous without more context.<br>&gt; let volume = component.volume &lt;&lt; { $0.ranges.z.width = 0; return () }<br>&gt; // Error: Cannot assign to property: ‘$0’ is immutable.<br>&gt; let volume = component.volume &lt;&lt; { (x: inout SCNBoxVolume) in x.ranges.z.width = 0 } // Succeeds!<br>&gt;<br>&gt; Obviously, this code could easily create a var for volume and mutate<br>&gt; it, but it doesn’t solve my problem.  Am I misunderstanding how this<br>&gt; could work?  This is the only overload of &lt;&lt; that accepts a closure,<br>&gt; and even the code completion recognizes that $0 is a SCNBoxVolume.<br>&gt; It’s just strange that the compiler won’t recognize $0 as an inout<br>&gt; parameter off the bat.<br></p><p>I think the subject you wanted was “should we deduce closure inout<br>parameters?”<br></p><p>&gt; Is this a bug, or a design choice?<br></p><p>I&#39;ve been wondering the same.  I hope it&#39;s a bug, and I suggest you file<br>it.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Should closures support inout parameters?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>September 18, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Sep 18, 2016, at 8:17 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Sep 16 2016, Braeden Profile &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I was writing some code that would allow transformations of values as<br>&gt;&gt; part of an expression, and I came across a strange error:<br>&gt;&gt; <br>&gt;&gt; /// Returns the operand after a given transformation.<br>&gt;&gt; ///<br>&gt;&gt; /// Example:  `let newRect = myRect &lt;&lt; { $0.origin.x += 3 }`<br>&gt;&gt; func &lt;&lt; &lt;T&gt; (given: T, transformation: (inout T) -&gt; ()) -&gt; T<br>&gt;&gt; {<br>&gt;&gt; 	var result = given<br>&gt;&gt; 	transformation(&amp;result)<br>&gt;&gt; 	return result<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let volume = component.volume &lt;&lt; { $0.ranges.z.width = 0 } // Error:<br>&gt;&gt; Expression type () is ambiguous without more context.<br>&gt;&gt; let volume = component.volume &lt;&lt; { $0.ranges.z.width = 0; return () }<br>&gt;&gt; // Error: Cannot assign to property: ‘$0’ is immutable.<br>&gt;&gt; let volume = component.volume &lt;&lt; { (x: inout SCNBoxVolume) in x.ranges.z.width = 0 } // Succeeds!<br>&gt;&gt; <br>&gt;&gt; Obviously, this code could easily create a var for volume and mutate<br>&gt;&gt; it, but it doesn’t solve my problem.  Am I misunderstanding how this<br>&gt;&gt; could work?  This is the only overload of &lt;&lt; that accepts a closure,<br>&gt;&gt; and even the code completion recognizes that $0 is a SCNBoxVolume.<br>&gt;&gt; It’s just strange that the compiler won’t recognize $0 as an inout<br>&gt;&gt; parameter off the bat.<br>&gt; <br>&gt; I think the subject you wanted was “should we deduce closure inout<br>&gt; parameters?”<br>&gt; <br>&gt;&gt; Is this a bug, or a design choice?<br>&gt; <br>&gt; I&#39;ve been wondering the same.  I hope it&#39;s a bug, and I suggest you file<br>&gt; it.<br></p><p>It’s a bug, it has been filed several times, it is pretty well known at this point.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160918/e4a0eff6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Should closures support inout parameters?</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>September 19, 2016 at 08:00:00am</p></header><div class="content"><p>Good :), will it get put with the next Swift revision then?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 19 Sep 2016, at 08:37, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 18, 2016, at 8:17 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Sep 16 2016, Braeden Profile &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I was writing some code that would allow transformations of values as<br>&gt;&gt;&gt; part of an expression, and I came across a strange error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// Returns the operand after a given transformation.<br>&gt;&gt;&gt; ///<br>&gt;&gt;&gt; /// Example:  `let newRect = myRect &lt;&lt; { $0.origin.x += 3 }`<br>&gt;&gt;&gt; func &lt;&lt; &lt;T&gt; (given: T, transformation: (inout T) -&gt; ()) -&gt; T<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; 	var result = given<br>&gt;&gt;&gt; 	transformation(&amp;result)<br>&gt;&gt;&gt; 	return result<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let volume = component.volume &lt;&lt; { $0.ranges.z.width = 0 } // Error:<br>&gt;&gt;&gt; Expression type () is ambiguous without more context.<br>&gt;&gt;&gt; let volume = component.volume &lt;&lt; { $0.ranges.z.width = 0; return () }<br>&gt;&gt;&gt; // Error: Cannot assign to property: ‘$0’ is immutable.<br>&gt;&gt;&gt; let volume = component.volume &lt;&lt; { (x: inout SCNBoxVolume) in x.ranges.z.width = 0 } // Succeeds!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Obviously, this code could easily create a var for volume and mutate<br>&gt;&gt;&gt; it, but it doesn’t solve my problem.  Am I misunderstanding how this<br>&gt;&gt;&gt; could work?  This is the only overload of &lt;&lt; that accepts a closure,<br>&gt;&gt;&gt; and even the code completion recognizes that $0 is a SCNBoxVolume.<br>&gt;&gt;&gt; It’s just strange that the compiler won’t recognize $0 as an inout<br>&gt;&gt;&gt; parameter off the bat.<br>&gt;&gt; <br>&gt;&gt; I think the subject you wanted was “should we deduce closure inout<br>&gt;&gt; parameters?”<br>&gt;&gt; <br>&gt;&gt;&gt; Is this a bug, or a design choice?<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been wondering the same.  I hope it&#39;s a bug, and I suggest you file<br>&gt;&gt; it.<br>&gt; <br>&gt; It’s a bug, it has been filed several times, it is pretty well known at this point.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160919/a8ad5edd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
