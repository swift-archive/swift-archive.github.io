<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 11, 2016 at 04:00:00pm</p></header><div class="content"><p>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br></p><p>The review of &quot;SE-0115: Rename Literal Syntax Protocols &quot; ran from Active review July 1...7. The proposal has been *accepted*:<br></p><p>The community and core team agree that this proposal is a better set of names for these protocols.  The core team agrees with the community sentiment that “By” is better than “As” in the protocol names, and has accepted the proposal with this revision.<br></p><p>Thank you to Matthew Johnson and many others for driving this discussion forward!<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d972db2b6ee8b77746ce7122663eb4f8?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Robert Widmann</string> &lt;rwidmann at apple.com&gt;<p>July 11, 2016 at 04:00:00pm</p></header><div class="content"><p>Does this one have an SR number yet?  It would make for a fantastic starter bug.<br></p><p>&gt; On Jul 11, 2016, at 4:16 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt; <br>&gt; The review of &quot;SE-0115: Rename Literal Syntax Protocols &quot; ran from Active review July 1...7. The proposal has been *accepted*:<br>&gt; <br>&gt; The community and core team agree that this proposal is a better set of names for these protocols.  The core team agrees with the community sentiment that “By” is better than “As” in the protocol names, and has accepted the proposal with this revision.<br>&gt; <br>&gt; Thank you to Matthew Johnson and many others for driving this discussion forward!<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 11, 2016 at 05:00:00pm</p></header><div class="content"><p>Tangential: Is there any way to make it impossible to call these<br>literal-initializers explicitly, instead requiring &quot;&lt;literal&gt; as T&quot; or just<br>&quot;&lt;literal&gt;&quot; in a typed context?<br></p><p>I have seen several explicit calls of these initializers where literals<br>would have been more appropriate, such as &quot;Set(arrayLiteral: foo, bar)&quot;,<br>and I think this only happens because folks find these initializers via<br>code completion. I can&#39;t think of any reason why you&#39;d want to invoke one<br>by name rather than by using a literal.<br></p><p>Jacob<br></p><p>On Mon, Jul 11, 2016 at 4:16 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal Link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;<br>&gt; The review of &quot;SE-0115: Rename Literal Syntax Protocols &quot; ran from Active<br>&gt; review July 1...7. The proposal has been *accepted*:<br>&gt;<br>&gt; The community and core team agree that this proposal is a better set of<br>&gt; names for these protocols.  The core team agrees with the community<br>&gt; sentiment that “By” is better than “As” in the protocol names, and has<br>&gt; accepted the proposal with this revision.<br>&gt;<br>&gt; Thank you to Matthew Johnson and many others for driving this discussion<br>&gt; forward!<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/b4704c5b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 12, 2016 at 12:00:00am</p></header><div class="content"><p>Maybe just a warning + fix-it would be sufficient?<br>On Mon, Jul 11, 2016 at 19:02 Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Tangential: Is there any way to make it impossible to call these<br>&gt; literal-initializers explicitly, instead requiring &quot;&lt;literal&gt; as T&quot; or just<br>&gt; &quot;&lt;literal&gt;&quot; in a typed context?<br>&gt;<br>&gt; I have seen several explicit calls of these initializers where literals<br>&gt; would have been more appropriate, such as &quot;Set(arrayLiteral: foo, bar)&quot;,<br>&gt; and I think this only happens because folks find these initializers via<br>&gt; code completion. I can&#39;t think of any reason why you&#39;d want to invoke one<br>&gt; by name rather than by using a literal.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Mon, Jul 11, 2016 at 4:16 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal Link:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0115: Rename Literal Syntax Protocols &quot; ran from Active<br>&gt;&gt; review July 1...7. The proposal has been *accepted*:<br>&gt;&gt;<br>&gt;&gt; The community and core team agree that this proposal is a better set of<br>&gt;&gt; names for these protocols.  The core team agrees with the community<br>&gt;&gt; sentiment that “By” is better than “As” in the protocol names, and has<br>&gt;&gt; accepted the proposal with this revision.<br>&gt;&gt;<br>&gt;&gt; Thank you to Matthew Johnson and many others for driving this discussion<br>&gt;&gt; forward!<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/81261593/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 11, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;d be happy with a warning + fix-it too.<br></p><p>What&#39;s the right way to do this? An attribute like &quot;@implicit&quot; on the<br>initializers? Perhaps a special case in the compiler, since these are<br>already &quot;known protocol kinds&quot;<br>&lt;https://github.com/apple/swift/blob/778a4ee136503574e75742ad9a5b3ad1677f382c/lib/Sema/CSSolver.cpp#L582-L584&gt;<br>?<br></p><p>If someone can offer guidance on the right direction, I&#39;d be happy to write<br>up a proposal.<br></p><p>Jacob<br></p><p>On Mon, Jul 11, 2016 at 5:05 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Maybe just a warning + fix-it would be sufficient?<br>&gt;<br>&gt; On Mon, Jul 11, 2016 at 19:02 Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Tangential: Is there any way to make it impossible to call these<br>&gt;&gt; literal-initializers explicitly, instead requiring &quot;&lt;literal&gt; as T&quot; or just<br>&gt;&gt; &quot;&lt;literal&gt;&quot; in a typed context?<br>&gt;&gt;<br>&gt;&gt; I have seen several explicit calls of these initializers where literals<br>&gt;&gt; would have been more appropriate, such as &quot;Set(arrayLiteral: foo, bar)&quot;,<br>&gt;&gt; and I think this only happens because folks find these initializers via<br>&gt;&gt; code completion. I can&#39;t think of any reason why you&#39;d want to invoke one<br>&gt;&gt; by name rather than by using a literal.<br>&gt;&gt;<br>&gt;&gt; Jacob<br>&gt;&gt;<br>&gt;&gt; On Mon, Jul 11, 2016 at 4:16 PM, Chris Lattner via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Proposal Link:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of &quot;SE-0115: Rename Literal Syntax Protocols &quot; ran from<br>&gt;&gt;&gt; Active review July 1...7. The proposal has been *accepted*:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The community and core team agree that this proposal is a better set of<br>&gt;&gt;&gt; names for these protocols.  The core team agrees with the community<br>&gt;&gt;&gt; sentiment that “By” is better than “As” in the protocol names, and has<br>&gt;&gt;&gt; accepted the proposal with this revision.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you to Matthew Johnson and many others for driving this discussion<br>&gt;&gt;&gt; forward!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/bc894c6b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 19:13, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; <br>&gt; I&#39;d be happy with a warning + fix-it too.<br>&gt; <br>&gt;&gt; On Mon, Jul 11, 2016 at 5:05 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; Maybe just a warning + fix-it would be sufficient?<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jul 11, 2016 at 19:02 Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Tangential: Is there any way to make it impossible to call these literal-initializers explicitly, instead requiring &quot;&lt;literal&gt; as T&quot; or just &quot;&lt;literal&gt;&quot; in a typed context?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have seen several explicit calls of these initializers where literals would have been more appropriate, such as &quot;Set(arrayLiteral: foo, bar)&quot;, and I think this only happens because folks find these initializers via code completion. I can&#39;t think of any reason why you&#39;d want to invoke one by name rather than by using a literal.<br></p><p>I don&#39;t see how this is a problem.<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/e6883343/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 11, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;d call it an antipattern: it pretty much defeats the purpose of having<br>the ExpressibleBy*Literal protocols.<br></p><p>If you just want a type to be constructible from a value of some other type<br>(literal or not), that&#39;s what regular initializers are for. For example, in<br>addition to its ArrayLiteralConvertible conformance, Set provides init&lt;S:<br>Sequence where S.Iterator.Element == Element&gt;(_ seq: S), so you can write<br>Set([1, 2, 3]). The literal protocols are different because they&#39;re invoked<br>*implicitly*: doSomethingWithASet([1, 2, 3]).<br></p><p>They&#39;re also awkward, because the argument labels (integerLiteral:,<br>arrayLiteral:, nilLiteral:) provide only type information, and not &quot;role&quot;<br>information — and if you&#39;re invoking one of these inits explicitly, there&#39;s<br>no way the compiler can enforce that you&#39;re actually passing a *literal* in<br>for those parameters (in fact, you *can&#39;t* pass an array literal to<br>init(arrayLiteral:), because it&#39;s a variadic parameter rather than an array<br>parameter).<br></p><p>Jacob<br></p><p>On Mon, Jul 11, 2016 at 5:22 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; On Jul 11, 2016, at 19:13, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I&#39;d be happy with a warning + fix-it too.<br>&gt;<br>&gt; On Mon, Jul 11, 2016 at 5:05 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Maybe just a warning + fix-it would be sufficient?<br>&gt;&gt;<br>&gt;&gt; On Mon, Jul 11, 2016 at 19:02 Jacob Bandes-Storch via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Tangential: Is there any way to make it impossible to call these<br>&gt;&gt;&gt; literal-initializers explicitly, instead requiring &quot;&lt;literal&gt; as T&quot; or just<br>&gt;&gt;&gt; &quot;&lt;literal&gt;&quot; in a typed context?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have seen several explicit calls of these initializers where literals<br>&gt;&gt;&gt; would have been more appropriate, such as &quot;Set(arrayLiteral: foo, bar)&quot;,<br>&gt;&gt;&gt; and I think this only happens because folks find these initializers via<br>&gt;&gt;&gt; code completion. I can&#39;t think of any reason why you&#39;d want to invoke one<br>&gt;&gt;&gt; by name rather than by using a literal.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; I don&#39;t see how this is a problem.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/eac18fc0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Accepted] SE-0115: Rename Literal Syntax Protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July 11, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 11, 2016, at 7:34 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;d call it an antipattern: it pretty much defeats the purpose of having the ExpressibleBy*Literal protocols.<br>&gt; <br>&gt; If you just want a type to be constructible from a value of some other type (literal or not), that&#39;s what regular initializers are for. For example, in addition to its ArrayLiteralConvertible conformance, Set provides init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ seq: S), so you can write Set([1, 2, 3]). The literal protocols are different because they&#39;re invoked *implicitly*: doSomethingWithASet([1, 2, 3]).<br>&gt; <br>&gt; They&#39;re also awkward, because the argument labels (integerLiteral:, arrayLiteral:, nilLiteral:) provide only type information, and not &quot;role&quot; information — and if you&#39;re invoking one of these inits explicitly, there&#39;s no way the compiler can enforce that you&#39;re actually passing a *literal* in for those parameters (in fact, you *can&#39;t* pass an array literal to init(arrayLiteral:), because it&#39;s a variadic parameter rather than an array parameter).<br></p><p>Agreed... I don’t see the harm in letting someone use them if they want to.<br></p><p>To be clear, I’m only pointing out that, IMHO, there’s not really a need to do the work of specifically disallowing this “antipattern”. If others think it’s important enough to bother with, I won’t complain. If we weren’t in the Swift 3 crunch, I might not have raised it at all.<br></p><p>- Dave Sweeris<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
