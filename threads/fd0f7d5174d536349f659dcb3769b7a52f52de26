<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eda59ff6b1a13ff04f0d3d3c38520e1?s=50"></div><header><strong>Double pointer in ObjC function signature importing incorrectly in Swift 3?</strong> from <string>Michael Gardner</string> &lt;gardnermj at gmail.com&gt;<p>September 20, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;m using an Objective-C library that has me provide a callback that takes a double-pointer parameter like this, where only the inner pointer is nullable:<br></p><p>CKRecord *_Nonnull *_Nullable inOutRecordPtr<br></p><p>Swift 2 imported this as an AutoreleasingUnsafeMutablePointer&lt;CKRecord?&gt;, as expected. However, Swift 3 is importing it as AutoreleasingUnsafeMutablePointer&lt;CKRecord&gt;?, which breaks the library&#39;s API since there&#39;s no way to return a new record.<br></p><p>Is this a Swift 3 bug, or am I missing something?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Double pointer in ObjC function signature importing incorrectly in Swift 3?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>September 20, 2016 at 11:00:00am</p></header><div class="content"><p>C represents pointers the other way around; that declaration says only the outer pointer is nullable. There are two things going on here:<br></p><p>- Swift 2 made all pointers implicitly nullable, without using an optional type. Swift 3 makes that explicit.<br>- Swift 2 had a bug that assumed that all pointers-to-references were optional, instead of just those without nullability annotations. Swift 3 &quot;fixes&quot; that…but that reveals places where headers used _Nonnull to mean &quot;always produces a nonnull pointer&quot;, forgetting that it also applies to input.<br></p><p>If this is an API in CloudKit itself, please file a Radar at bugreport.apple.com. If it&#39;s a third-party library built on CloudKit, you&#39;ll have to report the issue to them.<br></p><p>Sorry for the trouble!<br>Jordan<br></p><p><br>&gt; On Sep 20, 2016, at 10:32, Michael Gardner via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m using an Objective-C library that has me provide a callback that takes a double-pointer parameter like this, where only the inner pointer is nullable:<br>&gt; <br>&gt; CKRecord *_Nonnull *_Nullable inOutRecordPtr<br>&gt; <br>&gt; Swift 2 imported this as an AutoreleasingUnsafeMutablePointer&lt;CKRecord?&gt;, as expected. However, Swift 3 is importing it as AutoreleasingUnsafeMutablePointer&lt;CKRecord&gt;?, which breaks the library&#39;s API since there&#39;s no way to return a new record.<br>&gt; <br>&gt; Is this a Swift 3 bug, or am I missing something?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160920/a3d8aad6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17c5a48f484eced018b6e4dab0ad4746?s=50"></div><header><strong>Double pointer in ObjC function signature importing incorrectly in Swift 3?</strong> from <string>first account 2</string> &lt;altotest1 at aol.com&gt;<p>September 20, 2016 at 03:00:00pm</p></header><div class="content"><p>Sent from Alto<br>On Tuesday, 20 September 2016 Jordan Rose via swift-users &lt;swift-users at swift.org&gt; wrote:<br>C represents pointers the other way around; that declaration says only the outer pointer is nullable. There are two things going on here:<br></p><p>- Swift 2 made all pointers implicitly nullable, without using an optional type. Swift 3 makes that explicit.<br>- Swift 2 had a bug that assumed that all pointers-to-references were optional, instead of just those without nullability annotations. Swift 3 &quot;fixes&quot; that…but that reveals places where headers used _Nonnull to mean &quot;always produces a nonnull pointer&quot;, forgetting that it also applies to input.<br></p><p>If this is an API in CloudKit itself, please file a Radar at bugreport.apple.com. If it&#39;s a third-party library built on CloudKit, you&#39;ll have to report the issue to them.<br></p><p>Sorry for the trouble!<br>Jordan<br></p><p><br>&gt; On Sep 20, 2016, at 10:32, Michael Gardner via swift-users wrote:<br>&gt; <br>&gt; I&#39;m using an Objective-C library that has me provide a callback that takes a double-pointer parameter like this, where only the inner pointer is nullable:<br>&gt; <br>&gt; CKRecord *_Nonnull *_Nullable inOutRecordPtr<br>&gt; <br>&gt; Swift 2 imported this as an AutoreleasingUnsafeMutablePointer, as expected. However, Swift 3 is importing it as AutoreleasingUnsafeMutablePointer?, which breaks the library&#39;s API since there&#39;s no way to return a new record.<br>&gt; <br>&gt; Is this a Swift 3 bug, or am I missing something?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160920/702bfb76/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
