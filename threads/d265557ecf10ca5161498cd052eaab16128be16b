<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3986cc4b3dbac814989a58acb8d81914?s=50"></div><header><strong>[Idea] allValues for RawRepresentable enums</strong> from <string>Kevin Randrup</string> &lt;kevinrandrup at gmail.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p># Summary<br>Add an allValues function to all enums that are RawRepresentable to access,<br>iterate over, and count all of the values of an enum. The usage is general<br>enough that I believe it would be a great addition to the language.<br></p><p>This can currently be &quot;hacked&quot; in a few different ways by using the<br>RawRepresentable initializer (SO link<br>&lt;http://stackoverflow.com/questions/24007461/how-to-enumerate-an-enum-with-string-type/24137319#24137319&gt;<br>).<br></p><p>I&#39;m presenting this idea here for discussion and feedback before I write up<br>a formal proposal.<br></p><p># Limits<br>Having an allValues method would only be logical for enums which do not<br>have associated values. This limits the enum to RawRepresentable enums and<br>basic enums (is there a name for an enum without associated values and no<br>raw value?).<br>I&#39;m working with the assumption that this would only be done with<br>RawRepresentable enums but it may be the case that basic enums can be<br>included easily.<br></p><p># Examples<br>All examples as source code are available as a gist<br>&lt;https://gist.github.com/kevinrandrup/00448c37ae9c20fa4eab&gt;.<br></p><p>enum CommandLineFlag : String {<br>    case Version = &quot;--version&quot;<br>    case Help = &quot;--help&quot;<br>    case Start = &quot;--start&quot;<br>}<br></p><p>func displayHelp() {<br>    print(&quot;Available flags\n&quot;)<br>    for flag in CommandLineFlag.allValues {<br>        print(&quot;\(flag): \(flag.rawValue)&quot;)<br>    }<br>}<br></p><p><br></p><p>Representing the structure and implementing UITableViewDataSource methods<br>enum RecipeTableViewSection : Int {<br>    case Header<br>    case Details<br>}<br></p><p>enum RecipeHeaderRow : Int {<br>    case Name<br>    case Image<br>}<br></p><p>enum RecipeDetailRow : Int {<br>    case Ingredients<br>    case Cost<br>    case PreparationTime<br>}<br></p><p>// UITableViewDataSource implementation<br>func tableView(tableView: UITableView, numberOfRowsInSection section: Int)<br>-&gt; Int {<br>    switch RecipeTableViewSection(rawValue: section)! {<br>    case .Header:<br>        return RecipeHeaderRow.allValues().count<br>    case .Details:<br>        return RecipeDetailRow.allValues().count<br>    }<br>}<br></p><p>func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {<br>    return RecipeTableViewSection.allValues().count<br>}<br></p><p># Decisions/Questions<br></p><p>1. Function vs. computed property vs. stored static variable<br></p><p>static func allValues() -&gt; [CommandLineFlag] {<br>  return [Version, Help, Start]<br>}<br></p><p><br>static var allValues: [CommandLineFlag] {<br>  return [Version, Help, Start]<br>}<br></p><p>static let allValues = [Version, Help, Start]<br></p><p><br>   - Currently leaning towards computed property<br>      - Computed property &gt; function - allValues doesn&#39;t do anything<br>      besides return a value so it doesn&#39;t need to be a function<br>      - Computed property &gt; stored static variable - Will not increase the<br>      memory usage of the program<br>      - A change between computed and stored static property would not be a<br>   source breaking change if it turns out one is better than the other.<br></p><p>2. Set vs. Array<br></p><p>   - Set - There are no duplicate values and RawRepresentable enums already<br>   conform to Hashable/Equatable.<br>   - Array - Preserves the cases&#39; declaration order<br></p><p>3. Should allValues consist of the enum type or RawValue? (CommandLineFlag<br>vs. String)<br></p><p>   - Strongly learning towards enum type<br>   - However, either one could be converted to the other and one could<br>   simply be a computed property of the other.<br></p><p><br>If you have better examples and use cases, I would love to hear about them<br>before writing the proposal.<br></p><p> - Kevin Randrup<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/d265e16b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Idea] allValues for RawRepresentable enums</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>March 24, 2016 at 02:00:00pm</p></header><div class="content"><p>Please see existing discussion at<br>https://github.com/apple/swift-evolution/pull/114.<br></p><p>As discussed on #199 &lt;https://github.com/apple/swift-evolution/pull/199&gt;, I<br>believe we should continue discussing this (preferably on the same thread<br>as the original, or a new one that references it), but I&#39;m currently in the<br>middle of a move and multiple travel plans, so I can&#39;t spearhead this for<br>another week or two.<br></p><p>Jacob<br></p><p>On Thu, Mar 24, 2016 at 2:23 PM, Kevin Randrup via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; # Summary<br>&gt; Add an allValues function to all enums that are RawRepresentable to<br>&gt; access, iterate over, and count all of the values of an enum. The usage is<br>&gt; general enough that I believe it would be a great addition to the language.<br>&gt;<br>&gt; This can currently be &quot;hacked&quot; in a few different ways by using the<br>&gt; RawRepresentable initializer (SO link<br>&gt; &lt;http://stackoverflow.com/questions/24007461/how-to-enumerate-an-enum-with-string-type/24137319#24137319&gt;<br>&gt; ).<br>&gt;<br>&gt; I&#39;m presenting this idea here for discussion and feedback before I write<br>&gt; up a formal proposal.<br>&gt;<br>&gt; # Limits<br>&gt; Having an allValues method would only be logical for enums which do not<br>&gt; have associated values. This limits the enum to RawRepresentable enums and<br>&gt; basic enums (is there a name for an enum without associated values and no<br>&gt; raw value?).<br>&gt; I&#39;m working with the assumption that this would only be done with<br>&gt; RawRepresentable enums but it may be the case that basic enums can be<br>&gt; included easily.<br>&gt;<br>&gt; # Examples<br>&gt; All examples as source code are available as a gist<br>&gt; &lt;https://gist.github.com/kevinrandrup/00448c37ae9c20fa4eab&gt;.<br>&gt;<br>&gt; enum CommandLineFlag : String {<br>&gt;     case Version = &quot;--version&quot;<br>&gt;     case Help = &quot;--help&quot;<br>&gt;     case Start = &quot;--start&quot;<br>&gt; }<br>&gt;<br>&gt; func displayHelp() {<br>&gt;     print(&quot;Available flags\n&quot;)<br>&gt;     for flag in CommandLineFlag.allValues {<br>&gt;         print(&quot;\(flag): \(flag.rawValue)&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; Representing the structure and implementing UITableViewDataSource methods<br>&gt; enum RecipeTableViewSection : Int {<br>&gt;     case Header<br>&gt;     case Details<br>&gt; }<br>&gt;<br>&gt; enum RecipeHeaderRow : Int {<br>&gt;     case Name<br>&gt;     case Image<br>&gt; }<br>&gt;<br>&gt; enum RecipeDetailRow : Int {<br>&gt;     case Ingredients<br>&gt;     case Cost<br>&gt;     case PreparationTime<br>&gt; }<br>&gt;<br>&gt; // UITableViewDataSource implementation<br>&gt; func tableView(tableView: UITableView, numberOfRowsInSection section: Int)<br>&gt; -&gt; Int {<br>&gt;     switch RecipeTableViewSection(rawValue: section)! {<br>&gt;     case .Header:<br>&gt;         return RecipeHeaderRow.allValues().count<br>&gt;     case .Details:<br>&gt;         return RecipeDetailRow.allValues().count<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {<br>&gt;     return RecipeTableViewSection.allValues().count<br>&gt; }<br>&gt;<br>&gt; # Decisions/Questions<br>&gt;<br>&gt; 1. Function vs. computed property vs. stored static variable<br>&gt;<br>&gt; static func allValues() -&gt; [CommandLineFlag] {<br>&gt;   return [Version, Help, Start]<br>&gt; }<br>&gt;<br>&gt;<br>&gt; static var allValues: [CommandLineFlag] {<br>&gt;   return [Version, Help, Start]<br>&gt; }<br>&gt;<br>&gt; static let allValues = [Version, Help, Start]<br>&gt;<br>&gt;<br>&gt;    - Currently leaning towards computed property<br>&gt;       - Computed property &gt; function - allValues doesn&#39;t do anything<br>&gt;       besides return a value so it doesn&#39;t need to be a function<br>&gt;       - Computed property &gt; stored static variable - Will not increase<br>&gt;       the memory usage of the program<br>&gt;       - A change between computed and stored static property would not be<br>&gt;    a source breaking change if it turns out one is better than the other.<br>&gt;<br>&gt; 2. Set vs. Array<br>&gt;<br>&gt;    - Set - There are no duplicate values and RawRepresentable enums<br>&gt;    already conform to Hashable/Equatable.<br>&gt;    - Array - Preserves the cases&#39; declaration order<br>&gt;<br>&gt; 3. Should allValues consist of the enum type or RawValue? (CommandLineFlag<br>&gt; vs. String)<br>&gt;<br>&gt;    - Strongly learning towards enum type<br>&gt;    - However, either one could be converted to the other and one could<br>&gt;    simply be a computed property of the other.<br>&gt;<br>&gt;<br>&gt; If you have better examples and use cases, I would love to hear about them<br>&gt; before writing the proposal.<br>&gt;<br>&gt;  - Kevin Randrup<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/eb573da7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3986cc4b3dbac814989a58acb8d81914?s=50"></div><header><strong>[Idea] allValues for RawRepresentable enums</strong> from <string>Kevin Randrup</string> &lt;kevinrandrup at gmail.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p>My bad, I didn&#39;t see the proposal listed in evolution and didn&#39;t think to<br>check the pull requests.<br></p><p> - Kevin Randrup<br></p><p>On Thu, Mar 24, 2016 at 5:28 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; Please see existing discussion at<br>&gt; https://github.com/apple/swift-evolution/pull/114.<br>&gt;<br>&gt; As discussed on #199 &lt;https://github.com/apple/swift-evolution/pull/199&gt;,<br>&gt; I believe we should continue discussing this (preferably on the same thread<br>&gt; as the original, or a new one that references it), but I&#39;m currently in the<br>&gt; middle of a move and multiple travel plans, so I can&#39;t spearhead this for<br>&gt; another week or two.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Thu, Mar 24, 2016 at 2:23 PM, Kevin Randrup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; # Summary<br>&gt;&gt; Add an allValues function to all enums that are RawRepresentable to<br>&gt;&gt; access, iterate over, and count all of the values of an enum. The usage is<br>&gt;&gt; general enough that I believe it would be a great addition to the language.<br>&gt;&gt;<br>&gt;&gt; This can currently be &quot;hacked&quot; in a few different ways by using the<br>&gt;&gt; RawRepresentable initializer (SO link<br>&gt;&gt; &lt;http://stackoverflow.com/questions/24007461/how-to-enumerate-an-enum-with-string-type/24137319#24137319&gt;<br>&gt;&gt; ).<br>&gt;&gt;<br>&gt;&gt; I&#39;m presenting this idea here for discussion and feedback before I write<br>&gt;&gt; up a formal proposal.<br>&gt;&gt;<br>&gt;&gt; # Limits<br>&gt;&gt; Having an allValues method would only be logical for enums which do not<br>&gt;&gt; have associated values. This limits the enum to RawRepresentable enums and<br>&gt;&gt; basic enums (is there a name for an enum without associated values and no<br>&gt;&gt; raw value?).<br>&gt;&gt; I&#39;m working with the assumption that this would only be done with<br>&gt;&gt; RawRepresentable enums but it may be the case that basic enums can be<br>&gt;&gt; included easily.<br>&gt;&gt;<br>&gt;&gt; # Examples<br>&gt;&gt; All examples as source code are available as a gist<br>&gt;&gt; &lt;https://gist.github.com/kevinrandrup/00448c37ae9c20fa4eab&gt;.<br>&gt;&gt;<br>&gt;&gt; enum CommandLineFlag : String {<br>&gt;&gt;     case Version = &quot;--version&quot;<br>&gt;&gt;     case Help = &quot;--help&quot;<br>&gt;&gt;     case Start = &quot;--start&quot;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; func displayHelp() {<br>&gt;&gt;     print(&quot;Available flags\n&quot;)<br>&gt;&gt;     for flag in CommandLineFlag.allValues {<br>&gt;&gt;         print(&quot;\(flag): \(flag.rawValue)&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Representing the structure and implementing UITableViewDataSource methods<br>&gt;&gt; enum RecipeTableViewSection : Int {<br>&gt;&gt;     case Header<br>&gt;&gt;     case Details<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; enum RecipeHeaderRow : Int {<br>&gt;&gt;     case Name<br>&gt;&gt;     case Image<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; enum RecipeDetailRow : Int {<br>&gt;&gt;     case Ingredients<br>&gt;&gt;     case Cost<br>&gt;&gt;     case PreparationTime<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // UITableViewDataSource implementation<br>&gt;&gt; func tableView(tableView: UITableView, numberOfRowsInSection section:<br>&gt;&gt; Int) -&gt; Int {<br>&gt;&gt;     switch RecipeTableViewSection(rawValue: section)! {<br>&gt;&gt;     case .Header:<br>&gt;&gt;         return RecipeHeaderRow.allValues().count<br>&gt;&gt;     case .Details:<br>&gt;&gt;         return RecipeDetailRow.allValues().count<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {<br>&gt;&gt;     return RecipeTableViewSection.allValues().count<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; # Decisions/Questions<br>&gt;&gt;<br>&gt;&gt; 1. Function vs. computed property vs. stored static variable<br>&gt;&gt;<br>&gt;&gt; static func allValues() -&gt; [CommandLineFlag] {<br>&gt;&gt;   return [Version, Help, Start]<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; static var allValues: [CommandLineFlag] {<br>&gt;&gt;   return [Version, Help, Start]<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; static let allValues = [Version, Help, Start]<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;    - Currently leaning towards computed property<br>&gt;&gt;       - Computed property &gt; function - allValues doesn&#39;t do anything<br>&gt;&gt;       besides return a value so it doesn&#39;t need to be a function<br>&gt;&gt;       - Computed property &gt; stored static variable - Will not increase<br>&gt;&gt;       the memory usage of the program<br>&gt;&gt;       - A change between computed and stored static property would not<br>&gt;&gt;    be a source breaking change if it turns out one is better than the other.<br>&gt;&gt;<br>&gt;&gt; 2. Set vs. Array<br>&gt;&gt;<br>&gt;&gt;    - Set - There are no duplicate values and RawRepresentable enums<br>&gt;&gt;    already conform to Hashable/Equatable.<br>&gt;&gt;    - Array - Preserves the cases&#39; declaration order<br>&gt;&gt;<br>&gt;&gt; 3. Should allValues consist of the enum type or RawValue?<br>&gt;&gt; (CommandLineFlag vs. String)<br>&gt;&gt;<br>&gt;&gt;    - Strongly learning towards enum type<br>&gt;&gt;    - However, either one could be converted to the other and one could<br>&gt;&gt;    simply be a computed property of the other.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If you have better examples and use cases, I would love to hear about<br>&gt;&gt; them before writing the proposal.<br>&gt;&gt;<br>&gt;&gt;  - Kevin Randrup<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/1fb9c582/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
