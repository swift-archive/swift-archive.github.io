<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1164c6dc99e3ea586eaaeb50289bd95c?s=50"></div><header><strong>Feature Idea: Namespace keyword for grouping related internal entities without resorting to non-initializable structs.</strong> from <string>Jared Sinclair</string> &lt;desk at jaredsinclair.com&gt;<p>February 20, 2016 at 09:00:00am</p></header><div class="content"><p>TL;DR<br></p><p>I’d like to be able to group related internal entities within a namespace declaration, without having to fake it with non-initializable structs:<br></p><p>internal namespace AreaOfConcern {<br>  let SomeString = “SomeString”<br>  let SomeInt = 42<br>  func checkSomething() -&gt; Bool {…}   <br>}<br></p><p><br>Rationale<br></p><p>Often within a module I find myself wanting to group related internal entities together within a namespace. Free functions and constants are a good example:<br></p><p>internal let SomeString = “SomeString”<br>internal let SomeInt = 42<br>internal func checkSomething() -&gt; Bool {…} <br></p><p>So are thematically-related structs:<br></p><p>internal struct CreateANote: Endpoint {<br>  // ...<br>}<br>internal struct UpdateANote: Endpoint {<br>  // ...<br>}<br>internal struct DeleteANote: Endpoint {<br>  // ...<br>}<br></p><p>The best way to approximate this currently is to wrap them in a struct, like:<br></p><p>internal struct AreaOfConcern {<br>  static let SomeString = “SomeString”<br>  static let SomeInt = 42<br>  static func checkSomething() -&gt; Bool {…} <br>}<br></p><p>or for thematically-related structs, to enable tidy usage for the callers:<br></p><p>internal struct NoteEndpoints {<br>  struct Create: Endpoint {<br>    // ...<br>  }<br>  struct Update: Endpoint {<br>    // ...<br>  }<br>  struct Delete: Endpoint {<br>    // ...<br>  }<br>}<br></p><p>let endpoint = NoteEndpoints.Create(text: String, …)<br></p><p>This solution is somewhat awkward because AreaOfConcern and NoteEndpoints are not really being used as structs so much as an informal namespaces. To communicate this to internal users (and to discourage them from trying to initialize these wrapper structs), you can give them private initializers (which is even more awkward, but helpful):<br></p><p>internal struct AreaOfConcern {<br>     static let SomeString = “SomeString”<br>     static let SomeInt = 42<br>     static func checkSomething() -&gt; Bool {…} <br></p><p>     private init()<br>}<br></p><p>It would be preferable if there was another keyword, perhaps namespace, that could be used as follows:<br></p><p>internal namespace NoteEndpoints {<br>  struct Create: Endpoint {<br>    // ...<br>  }<br>  struct Update: Endpoint {<br>    // ...<br>  }<br>  struct Delete: Endpoint {<br>    // ...<br>  }<br>}<br></p><p>The namespace keyword would follow all the same scope and dot-notation rules as a structs, but would not be initializable.<br></p><p>-- <br>Jared Sinclair<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160220/2d5b5351/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Feature Idea: Namespace keyword for grouping related internal entities without resorting to non-initializable structs.</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 20, 2016 at 10:00:00am</p></header><div class="content"><p>+1 from me.<br></p><p>This has apparently become my schtick but the structs are definitely<br>initializable. Make them enums with no case to guard against initialization.<br></p><p>``` swift<br>extension AreaOfConcern {<br>    init() {}<br>}<br>```<br></p><p>On Sat, Feb 20, 2016 at 9:55 AM, Jared Sinclair via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; *TL;DR*<br>&gt;<br>&gt; I’d like to be able to group related internal entities within a namespace<br>&gt; declaration, without having to fake it with non-initializable structs:<br>&gt;<br>&gt; internal namespace AreaOfConcern {<br>&gt;   let SomeString = “SomeString”<br>&gt;   let SomeInt = 42<br>&gt;   func checkSomething() -&gt; Bool {…}<br>&gt; }<br>&gt;<br>&gt;<br>&gt; *Rationale*<br>&gt;<br>&gt; Often within a module I find myself wanting to group related *internal*<br>&gt; entities together within a namespace. Free functions and constants are a<br>&gt; good example:<br>&gt;<br>&gt; internal let SomeString = “SomeString”<br>&gt; internal let SomeInt = 42<br>&gt; internal func checkSomething() -&gt; Bool {…}<br>&gt;<br>&gt; So are thematically-related structs:<br>&gt;<br>&gt; internal struct CreateANote: Endpoint {<br>&gt;   // ...<br>&gt; }<br>&gt; internal struct UpdateANote: Endpoint {<br>&gt;   // ...<br>&gt; }<br>&gt; internal struct DeleteANote: Endpoint {<br>&gt;   // ...<br>&gt; }<br>&gt;<br>&gt; The best way to approximate this currently is to wrap them in a struct,<br>&gt; like:<br>&gt;<br>&gt; internal struct AreaOfConcern {<br>&gt;   static let SomeString = “SomeString”<br>&gt;   static let SomeInt = 42<br>&gt;   static func checkSomething() -&gt; Bool {…}<br>&gt; }<br>&gt;<br>&gt; or for thematically-related structs, to enable tidy usage for the callers:<br>&gt;<br>&gt; internal struct NoteEndpoints {<br>&gt;   struct Create: Endpoint {<br>&gt;     // ...<br>&gt;   }<br>&gt;   struct Update: Endpoint {<br>&gt;     // ...<br>&gt;   }<br>&gt;   struct Delete: Endpoint {<br>&gt;     // ...<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; let endpoint = NoteEndpoints.Create(text: String, …)<br>&gt;<br>&gt; This solution is somewhat awkward because AreaOfConcern and NoteEndpoints are<br>&gt; not really being used as structs so much as an informal namespaces. To<br>&gt; communicate this to internal users (and to discourage them from trying to<br>&gt; initialize these wrapper structs), you can give them private initializers<br>&gt; (which is even more awkward, but helpful):<br>&gt;<br>&gt; internal struct AreaOfConcern {<br>&gt;      static let SomeString = “SomeString”<br>&gt;      static let SomeInt = 42<br>&gt;      static func checkSomething() -&gt; Bool {…}<br>&gt;<br>&gt;      private init()<br>&gt; }<br>&gt;<br>&gt; It would be preferable if there was another keyword, perhaps namespace,<br>&gt; that could be used as follows:<br>&gt;<br>&gt; internal namespace NoteEndpoints {<br>&gt;   struct Create: Endpoint {<br>&gt;     // ...<br>&gt;   }<br>&gt;   struct Update: Endpoint {<br>&gt;     // ...<br>&gt;   }<br>&gt;   struct Delete: Endpoint {<br>&gt;     // ...<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; The namespace keyword would follow all the same scope and dot-notation<br>&gt; rules as a structs, but would not be initializable.<br>&gt;<br>&gt; --<br>&gt; Jared Sinclair<br>&gt; Sent with Airmail<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160220/2aeca035/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
