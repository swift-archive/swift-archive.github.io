<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Disallow local parameter names in protocols</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 19, 2016 at 05:00:00pm</p></header><div class="content"><p>Made a draft proposal to start this discussion, and help define the problem. I&#39;m not too biased either way, this isn&#39;t a particularly major aspect of the language, but obviously the proposal has to justify the potential change to the language. This is something due for re-evaluation since Swift 3 removed the ‘first-argument hide-by-default’ rule, which now makes this simplification possible.<br></p><p>Hoping to get an idea of what people&#39;s opinions are on this, and the subject of local parameter names leaking to the user in general. Please let me know if my reasoning is flawed, anywhere.<br></p><p><br></p><p><br>## Introduction<br></p><p>Swift&#39;s current treatment of local parameter names is rather odd. They&#39;re hidden from the caller most of the timer, where an external parameter label is specified, but otherwise (if a ‘_’ is used), they actually leak out into Xcode&#39;s autocomplete. External labels are intended to add clarity, so the local names seem like they should be an implementation detail. Otherwise, why don&#39;t local names show up for labelled parameters, too?<br></p><p>The main point in the language affected by this ambiguity is in the protocol definition, where local names can be specified, but are only in any way useful for autocomplete when implementing the protocol, making them useless to the language itself. This proposal, if accepted, would simplify the language by removing the ability to declare local parameter names from protocols, reducing their function signatures to just the actual requirements - label and type.<br></p><p>## Motivation<br></p><p>Consider the following code:<br></p><p>````swift<br>protocol ExampleProtocol {<br></p><p>	func move(from source: Int, to destination: Int)<br>	<br>	func max(_ a: Int, _ b: Int) -&gt; Int<br>	<br>	func find(_: String, in: String)<br>}<br></p><p>struct ExampleStruct1: ExampleProtocol {<br></p><p>	func move(from source: Int, to destination: Int) { return }<br>	<br>	func max(_ a: Int, _ b: Int) -&gt; Int { return 0 }<br>	<br>	func find(_: String, in: String) { return }<br>}<br></p><p>//still conforms, despite differences to the protocol signature<br>struct ExampleStruct2: ExampleProtocol {<br></p><p>	func move(from: Int, to: Int) { return }<br>	<br>	func max(_ first: Int, _ second: Int) -&gt; Int { return 0 }<br>	<br>	func find(_ substring: String, in string: String) { return }<br>}<br>````<br></p><p>ExampleStruct2 conforms to ExampleProtocol, yet clearly has some differences to the signatures defined in the protocol. In ExampleStruct2, its `move` function has no local parameter names, despite their presence in the protocol definition. Its `max` function has differing local names, and `find` has names which aren&#39;t present in the protocol.<br></p><p>In functions, it is the purpose of external parameter labels serve to add clarity to the call site. The local names become variables in the function&#39;s scope, and are generally invisible to the caller. While these local names can be declared in the protocol, they aren&#39;t enforced, and are effectively useless. A confused user may expect that this will enforce the local names, or otherwise specify a requirement, similar to other protocol semantics.<br></p><p>## Proposed solution<br></p><p>Remove the ability to specify local parameter names from protocols.<br></p><p>## Detailed design<br></p><p>Specification of local parameter names in protocols would trigger a compiler error, explaining that local parameter names are not enforced, with a fixit to remove the local name from the parameter list.<br></p><p>## Impact on existing code<br></p><p>This will break existing protocols which declare local parameter names, but should be easily fixable with the migrator, or the previously mentioned fixit.<br></p><p>## Alternatives considered<br></p><p>Leave protocols as they are now, or enforce local parameter names where specified.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/e6132a62/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
