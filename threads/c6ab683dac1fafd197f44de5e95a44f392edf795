<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>Enhanced existential types proposal discussion</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>May 26, 2016 at 04:00:00pm</p></header><div class="content"><p>In the &quot;where clause&quot; section, shouldn&#39;t this be allowed:<br></p><p>let a : Any&lt;Collection, SetAlgebraType where Collection.Element ==  <br>SetAlgebraType.Element&gt;<br></p><p>I am asking because the acceptable type equality constraint is stated  <br>as:<br></p><p>Type equality constraint: X == ConcreteType<br></p><p>Jan E.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Enhanced existential types proposal discussion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 26, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 26, 2016, at 9:54 AM, Jan E. Schotsman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In the &quot;where clause&quot; section, shouldn&#39;t this be allowed:<br>&gt; <br>&gt; let a : Any&lt;Collection, SetAlgebraType where Collection.Element == SetAlgebraType.Element&gt;<br>&gt; <br>&gt; I am asking because the acceptable type equality constraint is stated as:<br>&gt; <br>&gt; Type equality constraint: X == ConcreteType<br></p><p>Yes, you should definitely be able to equate two associate types!  If the proposal isn’t clear about that it is probably just an oversight.  Good catch!<br></p><p>&gt; <br>&gt; Jan E.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Enhanced existential types proposal discussion</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 26, 2016 at 08:00:00am</p></header><div class="content"><p>Yes, that&#39;s definitely an oversight. <br></p><p>That being said, the example is also actually incorrect, because AFAIK it&#39;s not possible to conform a type T to multiple protocols A and B, and have A.Element and B.Element be different types (i.e. the constraint is redundant). So it should be rewritten as well.<br></p><p>Austin<br></p><p>&gt; On May 26, 2016, at 8:00 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 26, 2016, at 9:54 AM, Jan E. Schotsman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In the &quot;where clause&quot; section, shouldn&#39;t this be allowed:<br>&gt;&gt; <br>&gt;&gt; let a : Any&lt;Collection, SetAlgebraType where Collection.Element == SetAlgebraType.Element&gt;<br>&gt;&gt; <br>&gt;&gt; I am asking because the acceptable type equality constraint is stated as:<br>&gt;&gt; <br>&gt;&gt; Type equality constraint: X == ConcreteType<br>&gt; <br>&gt; Yes, you should definitely be able to equate two associate types!  If the proposal isn’t clear about that it is probably just an oversight.  Good catch!<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Jan E.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Enhanced existential types proposal discussion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 26, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 26, 2016, at 10:36 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Yes, that&#39;s definitely an oversight. <br>&gt; <br>&gt; That being said, the example is also actually incorrect, because AFAIK it&#39;s not possible to conform a type T to multiple protocols A and B, and have A.Element and B.Element be different types (i.e. the constraint is redundant). So it should be rewritten as well.<br></p><p>It isn’t possible today, but there has already been discussion about introducing a mechanism to allow users to resolve the ambiguity when conforming:<br></p><p>protocol P { associatedtype Element }<br>struct S: P { typealias P.Element = Foo }<br></p><p>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On May 26, 2016, at 8:00 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 26, 2016, at 9:54 AM, Jan E. Schotsman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the &quot;where clause&quot; section, shouldn&#39;t this be allowed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let a : Any&lt;Collection, SetAlgebraType where Collection.Element == SetAlgebraType.Element&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am asking because the acceptable type equality constraint is stated as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Type equality constraint: X == ConcreteType<br>&gt;&gt; <br>&gt;&gt; Yes, you should definitely be able to equate two associate types!  If the proposal isn’t clear about that it is probably just an oversight.  Good catch!<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jan E.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
