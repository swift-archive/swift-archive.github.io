<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c7bdbf917240062f477b7dd12a6e31e9?s=50"></div><header><strong>[Proposal] Disallow implicit conversion between function/closure with a list of parameters and with tuple parameter. Remove function type inconsistency.</strong> from <string>Greg Lutz</string> &lt;greg at nearspace.com&gt;<p>July  5, 2016 at 05:00:00am</p></header><div class="content"><p>Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; <br>&gt; Proposal:<br>&gt; ===============<br>&gt; <br>&gt; 1. Separate function types with parameter list and a tuple parameter. They <br>&gt; should be two separate types.<br>&gt; <br>&gt; 2. Require this syntax to assign tuple parameter&#39;s sub-values to variables <br>&gt; in func/closure: `{ ((x, y)) in ..}`, otherwise (i.e. if `{ (x, y) in ..`) <br>&gt; treat function/closure as having list of parameters.<br>&gt; <br>&gt; 3. Disallow implicit conversion between function/closure with a list of <br>&gt; parameters and function/closure where single tuple is required.<br>&gt; This will stop confusion and make the language consistent how it deal with <br>&gt; tuples and list of parameters in func/closure.<br>&gt; <br>&gt; 4. It seems like we should keep the ability to explicitly convert one to <br>&gt; another as some(many?) code can depend on this current behavior and so we <br>&gt; need a way to convert old code to new.<br></p><p>+1, at least. Please see my bug report SR-1795 (&quot;An overloaded function<br>where one instance takes a tuple and the other takes the members of the<br>tuple will crash in SILGen.&quot;) This has been true of every Swift compiler<br>since at least July 2015. It&#39;s a clear consequence of the knots the compiler<br>gets itself into when the distinction between tuples and parameter lists is<br>muddy.<br></p><p>BTW, it&#39;s unfortunate that, even with this proposal in effect,  `{ x, y in<br>..}` means the same thing as `{ (x, y) in ..}`,  whereas `{ ((x, y)) in<br>..}` is different from those two, but the same as `{ (((x, y))) in ..}`.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal] Disallow implicit conversion between function/closure with a list of parameters and with tuple parameter. Remove function type inconsistency.</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  5, 2016 at 03:00:00pm</p></header><div class="content"><p>On 05.07.2016 8:39, Greg Lutz via swift-evolution wrote:<br>&gt;<br>&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Proposal:<br>&gt;&gt; ===============<br>&gt;&gt;<br>&gt;&gt; 1. Separate function types with parameter list and a tuple parameter. They<br>&gt;&gt; should be two separate types.<br>&gt;&gt;<br>&gt;&gt; 2. Require this syntax to assign tuple parameter&#39;s sub-values to variables<br>&gt;&gt; in func/closure: `{ ((x, y)) in ..}`, otherwise (i.e. if `{ (x, y) in ..`)<br>&gt;&gt; treat function/closure as having list of parameters.<br>&gt;&gt;<br>&gt;&gt; 3. Disallow implicit conversion between function/closure with a list of<br>&gt;&gt; parameters and function/closure where single tuple is required.<br>&gt;&gt; This will stop confusion and make the language consistent how it deal with<br>&gt;&gt; tuples and list of parameters in func/closure.<br>&gt;&gt;<br>&gt;&gt; 4. It seems like we should keep the ability to explicitly convert one to<br>&gt;&gt; another as some(many?) code can depend on this current behavior and so we<br>&gt;&gt; need a way to convert old code to new.<br>&gt;<br>&gt; +1, at least. Please see my bug report SR-1795 (&quot;An overloaded function<br>&gt; where one instance takes a tuple and the other takes the members of the<br>&gt; tuple will crash in SILGen.&quot;) This has been true of every Swift compiler<br>&gt; since at least July 2015. It&#39;s a clear consequence of the knots the compiler<br>&gt; gets itself into when the distinction between tuples and parameter lists is<br>&gt; muddy.<br>&gt;<br>&gt; BTW, it&#39;s unfortunate that, even with this proposal in effect,  `{ x, y in<br>&gt; ..}` means the same thing as `{ (x, y) in ..}`,  whereas `{ ((x, y)) in<br>&gt; ..}` is different from those two, but the same as `{ (((x, y))) in ..}`.<br>&gt;<br></p><p>As was discussed earlier, it seems like most of us agree that we should not <br>require the parenthesis for arguments in closure. But from other side, <br>function with list of parameters has parenthesis - so it is natural that <br>(x, y) in closure should means exactly the same as in function declaration <br>- list of parameters. So, then only ((x, y)) should mean 1 parameter of <br>tuple type.<br></p><p>As for ((((((x, y)))))) I repeatedly suggest to disallow such syntax, but <br>seems like no one care so.. we have what we have.<br></p><p><br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
