<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Disallow arbitrary expressions in selectors</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>April 28, 2016 at 04:00:00pm</p></header><div class="content"><p>During the implementation of SE-0064 (Referencing Objective-C selector of property getters and setters) I have come across an issue that could be resolved my a minor change to the language and simplify the compiler a lot. I have drafted a proposal below.<br></p><p>Thoughts, comments, especially objections, appreciated.<br></p><p>– Alex<br></p><p>GitHub-Link: https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md&gt;<br></p><p>Disallow arbitrary expressions in selectors<br></p><p>Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>Author(s): Alex Hoppen &lt;https://github.com/ahoppen&gt;<br>Status: Draft<br>Review manager: TBD<br> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#introduction&gt;Introduction<br></p><p>It is currently possible to write arbitrary expressions inside #selector like the following: #selector(callThisFunc().bar). This complicates the implementation of proposals SE-0064 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md&gt; (Referencing Objective-C selector of property getters and setters) and SE-0062 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md&gt; (Referencing Objective-C key-paths) a lot. <br></p><p>This proposal restricts expressions inside selectors to be a sequence of property or method refernces. I believe this will not be a major restrictions since arbitrary expressions in selectors are probably rarely used, have some rough edges and removing them would simplify the compiler.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#proposed-solution&gt;Proposed solution<br></p><p>I propose allowed expressions inside #selector (and once implemented #keyPath) to be a series of instance or class members separated by . and allow disambiguating the last component using as.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#detailed-design&gt;Detailed design<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#examples&gt;Examples<br></p><p>class Address: NSObject {<br>  dynamic var street: String<br>  dynamic var town: String<br></p><p>  init(street: String, town: String) {<br>    self.street = street<br>    self.town = town<br>  }<br>}<br></p><p>class Person: NSObject {<br>  dynamic var name: String<br>  dynamic var homeAddress: Address<br></p><p>  func workAddress() -&gt; Address {<br>    // ...<br>  }<br></p><p>  func workAddress(formatter: AddressFormatter) -&gt; String {<br>    // ...<br>  }<br></p><p>  init(name: String, homeAddress: Address) {<br>    self.name = name<br>    self.homeAddress = homeAddress<br>  }<br>}<br></p><p>let me: Person = ...<br>The following examples will continue to work:<br></p><p>let _ = #selector(getter: Person.name)<br>let _ = #selector(getter: me.name)<br></p><p>let _ = #selector(getter: Person.homeAddress.street)<br>// Could also be written as<br>let _ = #selector(getter: Address.street)<br></p><p>let _ = #selector(Person.workAddress as () -&gt; Address)<br>let _ = #selector(Person.workAddress(formatter: ))<br>I propose removing this kind of selector:<br></p><p>// Should produce selector &quot;street&quot;. Note that the method workAddress() is never <br>// called and its return type only used during type checking<br>let _ = #selector(getter: me.workAddress().street) <br></p><p>// The above can be rewritten in a cleaner way like the following<br>let _ = #selector(getter: Address.street)<br>The proposed way to rewrite the selector elimininates potential confusion about the fact that calling a method inside #selector actually doesn&#39;t invoke it.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#grammar&gt;Grammar<br></p><p>selector → #selector(selector-modiferopt selector-path)<br></p><p>selector-modifier → getter:<br>selector-modifier → setter:<br></p><p>selector-path → type-identifier . selector-member-path as-disambiguationopt<br>selector-path → selector-member-path as-disambiguationopt<br></p><p>selector-member-path → identifier<br>selector-member-path → unqualified-name<br>selector-member-path → identifier . selector-member-path<br></p><p>as-disambiguation → as type-identifier<br>For a further rationale on why arbitrary expressions are no longer possible, see the discussion &lt;https://bugs.swift.org/browse/SR-1239?focusedCommentId=13958&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13958&gt; on bugs.swift.org.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#impact-on-existing-code&gt;Impact on existing code<br></p><p>Code that currently uses this feature needs to be rewritten as described in the example above. I believe, however, that the feature is rarely used so it will affect only very little source code and where it is currently used the proposed update is actually more readable.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md#alternatives-considered&gt;Alternatives considered<br></p><p>The only alternative I see is trying to keep the current semantics and implement them for the getter:/setter: selectors.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/54cbf8a8/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Disallow arbitrary expressions in selectors</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 29, 2016 at 04:00:00pm</p></header><div class="content"><p>Looks good to me!<br></p><p>-Thorsten <br></p><p>&gt; Am 28.04.2016 um 16:56 schrieb Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; During the implementation of SE-0064 (Referencing Objective-C selector of property getters and setters) I have come across an issue that could be resolved my a minor change to the language and simplify the compiler a lot. I have drafted a proposal below.<br>&gt; <br>&gt; Thoughts, comments, especially objections, appreciated.<br>&gt; <br>&gt; – Alex<br>&gt; <br>&gt; GitHub-Link: https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md<br>&gt; <br>&gt; Disallow arbitrary expressions in selectors<br>&gt; Proposal: SE-NNNN<br>&gt; Author(s): Alex Hoppen<br>&gt; Status: Draft<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; It is currently possible to write arbitrary expressions inside #selector like the following: #selector(callThisFunc().bar). This complicates the implementation of proposals SE-0064 (Referencing Objective-C selector of property getters and setters) and SE-0062 (Referencing Objective-C key-paths) a lot. <br>&gt; <br>&gt; This proposal restricts expressions inside selectors to be a sequence of property or method refernces. I believe this will not be a major restrictions since arbitrary expressions in selectors are probably rarely used, have some rough edges and removing them would simplify the compiler.<br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; I propose allowed expressions inside #selector (and once implemented #keyPath) to be a series of instance or class members separated by . and allow disambiguating the last component using as.<br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; Examples<br>&gt; <br>&gt; class Address: NSObject {<br>&gt;   dynamic var street: String<br>&gt;   dynamic var town: String<br>&gt; <br>&gt;   init(street: String, town: String) {<br>&gt;     self.street = street<br>&gt;     self.town = town<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; class Person: NSObject {<br>&gt;   dynamic var name: String<br>&gt;   dynamic var homeAddress: Address<br>&gt; <br>&gt;   func workAddress() -&gt; Address {<br>&gt;     // ...<br>&gt;   }<br>&gt; <br>&gt;   func workAddress(formatter: AddressFormatter) -&gt; String {<br>&gt;     // ...<br>&gt;   }<br>&gt; <br>&gt;   init(name: String, homeAddress: Address) {<br>&gt;     self.name = name<br>&gt;     self.homeAddress = homeAddress<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let me: Person = ...<br>&gt; The following examples will continue to work:<br>&gt; <br>&gt; let _ = #selector(getter: Person.name)<br>&gt; let _ = #selector(getter: me.name)<br>&gt; <br>&gt; let _ = #selector(getter: Person.homeAddress.street)<br>&gt; // Could also be written as<br>&gt; let _ = #selector(getter: Address.street)<br>&gt; <br>&gt; let _ = #selector(Person.workAddress as () -&gt; Address)<br>&gt; let _ = #selector(Person.workAddress(formatter: ))<br>&gt; I propose removing this kind of selector:<br>&gt; <br>&gt; // Should produce selector &quot;street&quot;. Note that the method workAddress() is never <br>&gt; // called and its return type only used during type checking<br>&gt; let _ = #selector(getter: me.workAddress().street) <br>&gt; <br>&gt; // The above can be rewritten in a cleaner way like the following<br>&gt; let _ = #selector(getter: Address.street)<br>&gt; The proposed way to rewrite the selector elimininates potential confusion about the fact that calling a method inside #selector actually doesn&#39;t invoke it.<br>&gt; <br>&gt; Grammar<br>&gt; <br>&gt; selector → #selector(selector-modiferopt selector-path)<br>&gt; <br>&gt; selector-modifier → getter:<br>&gt; selector-modifier → setter:<br>&gt; <br>&gt; selector-path → type-identifier . selector-member-path as-disambiguationopt<br>&gt; selector-path → selector-member-path as-disambiguationopt<br>&gt; <br>&gt; selector-member-path → identifier<br>&gt; selector-member-path → unqualified-name<br>&gt; selector-member-path → identifier . selector-member-path<br>&gt; <br>&gt; as-disambiguation → as type-identifier<br>&gt; For a further rationale on why arbitrary expressions are no longer possible, see the discussion on bugs.swift.org.<br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; Code that currently uses this feature needs to be rewritten as described in the example above. I believe, however, that the feature is rarely used so it will affect only very little source code and where it is currently used the proposed update is actually more readable.<br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; The only alternative I see is trying to keep the current semantics and implement them for the getter:/setter: selectors.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/c22eea4e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>Disallow arbitrary expressions in selectors</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>April 29, 2016 at 06:00:00pm</p></header><div class="content"><p>I noticed in our code that we had one occurrence of <br></p><p>    #selector(SomeClass().someFunction)<br></p><p>which to my eyes looked like a bug. <br>Disallowing arbitrary expressions looks very reasonable to me and would help catch small mistakes like this one. <br></p><p>&gt; 29 apr. 2016 kl. 16:40 skrev Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Looks good to me!<br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt;&gt; Am 28.04.2016 um 16:56 schrieb Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; During the implementation of SE-0064 (Referencing Objective-C selector of property getters and setters) I have come across an issue that could be resolved my a minor change to the language and simplify the compiler a lot. I have drafted a proposal below.<br>&gt;&gt; <br>&gt;&gt; Thoughts, comments, especially objections, appreciated.<br>&gt;&gt; <br>&gt;&gt; – Alex<br>&gt;&gt; <br>&gt;&gt; GitHub-Link: https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md<br>&gt;&gt; <br>&gt;&gt; Disallow arbitrary expressions in selectors<br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Author(s): Alex Hoppen<br>&gt;&gt; Status: Draft<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; It is currently possible to write arbitrary expressions inside #selector like the following: #selector(callThisFunc().bar). This complicates the implementation of proposals SE-0064 (Referencing Objective-C selector of property getters and setters) and SE-0062 (Referencing Objective-C key-paths) a lot. <br>&gt;&gt; <br>&gt;&gt; This proposal restricts expressions inside selectors to be a sequence of property or method refernces. I believe this will not be a major restrictions since arbitrary expressions in selectors are probably rarely used, have some rough edges and removing them would simplify the compiler.<br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; I propose allowed expressions inside #selector (and once implemented #keyPath) to be a series of instance or class members separated by . and allow disambiguating the last component using as.<br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; Examples<br>&gt;&gt; <br>&gt;&gt; class Address: NSObject {<br>&gt;&gt;   dynamic var street: String<br>&gt;&gt;   dynamic var town: String<br>&gt;&gt; <br>&gt;&gt;   init(street: String, town: String) {<br>&gt;&gt;     self.street = street<br>&gt;&gt;     self.town = town<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Person: NSObject {<br>&gt;&gt;   dynamic var name: String<br>&gt;&gt;   dynamic var homeAddress: Address<br>&gt;&gt; <br>&gt;&gt;   func workAddress() -&gt; Address {<br>&gt;&gt;     // ...<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func workAddress(formatter: AddressFormatter) -&gt; String {<br>&gt;&gt;     // ...<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   init(name: String, homeAddress: Address) {<br>&gt;&gt;     self.name = name<br>&gt;&gt;     self.homeAddress = homeAddress<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let me: Person = ...<br>&gt;&gt; The following examples will continue to work:<br>&gt;&gt; <br>&gt;&gt; let _ = #selector(getter: Person.name)<br>&gt;&gt; let _ = #selector(getter: me.name)<br>&gt;&gt; <br>&gt;&gt; let _ = #selector(getter: Person.homeAddress.street)<br>&gt;&gt; // Could also be written as<br>&gt;&gt; let _ = #selector(getter: Address.street)<br>&gt;&gt; <br>&gt;&gt; let _ = #selector(Person.workAddress as () -&gt; Address)<br>&gt;&gt; let _ = #selector(Person.workAddress(formatter: ))<br>&gt;&gt; I propose removing this kind of selector:<br>&gt;&gt; <br>&gt;&gt; // Should produce selector &quot;street&quot;. Note that the method workAddress() is never <br>&gt;&gt; // called and its return type only used during type checking<br>&gt;&gt; let _ = #selector(getter: me.workAddress().street) <br>&gt;&gt; <br>&gt;&gt; // The above can be rewritten in a cleaner way like the following<br>&gt;&gt; let _ = #selector(getter: Address.street)<br>&gt;&gt; The proposed way to rewrite the selector elimininates potential confusion about the fact that calling a method inside #selector actually doesn&#39;t invoke it.<br>&gt;&gt; <br>&gt;&gt; Grammar<br>&gt;&gt; <br>&gt;&gt; selector → #selector(selector-modiferopt selector-path)<br>&gt;&gt; <br>&gt;&gt; selector-modifier → getter:<br>&gt;&gt; selector-modifier → setter:<br>&gt;&gt; <br>&gt;&gt; selector-path → type-identifier . selector-member-path as-disambiguationopt<br>&gt;&gt; selector-path → selector-member-path as-disambiguationopt<br>&gt;&gt; <br>&gt;&gt; selector-member-path → identifier<br>&gt;&gt; selector-member-path → unqualified-name<br>&gt;&gt; selector-member-path → identifier . selector-member-path<br>&gt;&gt; <br>&gt;&gt; as-disambiguation → as type-identifier<br>&gt;&gt; For a further rationale on why arbitrary expressions are no longer possible, see the discussion on bugs.swift.org.<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; Code that currently uses this feature needs to be rewritten as described in the example above. I believe, however, that the feature is rarely used so it will affect only very little source code and where it is currently used the proposed update is actually more readable.<br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; The only alternative I see is trying to keep the current semantics and implement them for the getter:/setter: selectors.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/7acceb85/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
