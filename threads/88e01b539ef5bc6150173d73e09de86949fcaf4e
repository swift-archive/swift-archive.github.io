<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December  7, 2015 at 03:00:00am</p></header><div class="content"><p>If Swift 3 is going to focus on re-thinking the Numerics in the system, it might be worth considering adding a Fraction (or Rational) type to the standard library. This, coupled with an arbitrary-precision integer type, would be a great way to handle arbitrary-precision decimal arithmetic, and can alleviate almost all the pain points of floating-point math.<br></p><p>There exist now some really nice implementations of Fractions, but the ones I’ve seen haven’t been implemented fully generically.<br>My favorite is this one: https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e &lt;https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e&gt;<br></p><p>I’d love to see some standard library support with rock-solid, fast implementations of all the common algorithms (GCD, LCD, LCM, reduction, etc) and good conformance to the builtin integer protocols. Maybe even FloatLiteralConvertible, too, with some logic for converting rational floats.<br></p><p>Thoughts?<br></p><p>- Harlan Haskins<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/88e0af4e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  7, 2015 at 03:00:00pm</p></header><div class="content"><p>I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be<br>glad not to have to include it as a dependency everywhere.<br>TJ<br></p><p>On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system, it<br>&gt; might be worth considering adding a Fraction (or Rational) type to the<br>&gt; standard library. This, coupled with an arbitrary-precision integer type,<br>&gt; would be a great way to handle arbitrary-precision decimal arithmetic, and<br>&gt; can alleviate almost all the pain points of floating-point math.<br>&gt;<br>&gt; There exist now some really nice implementations of Fractions, but the<br>&gt; ones I’ve seen haven’t been implemented fully generically.<br>&gt; My favorite is this one:<br>&gt; https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e<br>&gt;<br>&gt; I’d love to see some standard library support with rock-solid, fast<br>&gt; implementations of all the common algorithms (GCD, LCD, LCM, reduction,<br>&gt; etc) and good conformance to the builtin integer protocols. Maybe even<br>&gt; FloatLiteralConvertible, too, with some logic for converting rational<br>&gt; floats.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; - Harlan Haskins<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/ae709f54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5e460daedc625457bc16580ecdbc04?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Davide De Franceschi</string> &lt;defrenz98 at hotmail.com&gt;<p>December  7, 2015 at 10:00:00am</p></header><div class="content"><p>While I agree that a Rational type, one that would preserve quotient and denominator info, would be very nice, I think that it&#39;s more fit for a Math framework.<br>If we&#39;re just talking about a type that holds precise decimal info, I think making NSDecimal (planned to be renamed as Decimal in the future) usable is what we should do.<br></p><p>&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be glad not to have to include it as a dependency everywhere.<br>&gt; TJ<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system, it might be worth considering adding a Fraction (or Rational) type to the standard library. This, coupled with an arbitrary-precision integer type, would be a great way to handle arbitrary-precision decimal arithmetic, and can alleviate almost all the pain points of floating-point math.<br>&gt; <br>&gt; There exist now some really nice implementations of Fractions, but the ones I’ve seen haven’t been implemented fully generically.<br>&gt; My favorite is this one: https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e &lt;https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e&gt;<br>&gt; <br>&gt; I’d love to see some standard library support with rock-solid, fast implementations of all the common algorithms (GCD, LCD, LCM, reduction, etc) and good conformance to the builtin integer protocols. Maybe even FloatLiteralConvertible, too, with some logic for converting rational floats.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; - Harlan Haskins<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/36614fbd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>(resending to mailing list)<br></p><p>I&#39;m all for Fraction type as well, although I would prefer it to be called Rational for the following reasons:<br></p><p>- Although all rational numbers are technically fractions (with whole numbers having denominator of 1), it might mislead developers that it&#39;s applicable only to fractions of type p/q: q ≠ 1, q ≠ 0<br>- The name Rational is mathematically-correct<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>Wysłane z iPhone&#39;a<br></p><p>Dnia 07.12.2015 o godz. 11:44 Davide De Franceschi via swift-evolution &lt;swift-evolution at swift.org&gt; napisał(a):<br></p><p>&gt; While I agree that a Rational type, one that would preserve quotient and denominator info, would be very nice, I think that it&#39;s more fit for a Math framework.<br>&gt; If we&#39;re just talking about a type that holds precise decimal info, I think making NSDecimal (planned to be renamed as Decimal in the future) usable is what we should do.<br>&gt; <br>&gt;&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be glad not to have to include it as a dependency everywhere.<br>&gt;&gt; TJ<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system, it might be worth considering adding a Fraction (or Rational) type to the standard library. This, coupled with an arbitrary-precision integer type, would be a great way to handle arbitrary-precision decimal arithmetic, and can alleviate almost all the pain points of floating-point math.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There exist now some really nice implementations of Fractions, but the ones I’ve seen haven’t been implemented fully generically.<br>&gt;&gt;&gt; My favorite is this one: https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d love to see some standard library support with rock-solid, fast implementations of all the common algorithms (GCD, LCD, LCM, reduction, etc) and good conformance to the builtin integer protocols. Maybe even FloatLiteralConvertible, too, with some logic for converting rational floats.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Harlan Haskins<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/3674a298/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>Can you guys specify some of the use cases that you have in mind for a Rational type?  You mention &quot;alleviating the pain points of floating-point math,” but rationals tend to be used *very* differently from floating-point types in computation.<br></p><p>Thanks,<br>– Steve<br></p><p>&gt; On Dec 7, 2015, at 5:44 AM, Davide De Franceschi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While I agree that a Rational type, one that would preserve quotient and denominator info, would be very nice, I think that it&#39;s more fit for a Math framework.<br>&gt; If we&#39;re just talking about a type that holds precise decimal info, I think making NSDecimal (planned to be renamed as Decimal in the future) usable is what we should do.<br>&gt; <br>&gt;&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be glad not to have to include it as a dependency everywhere.<br>&gt;&gt; TJ<br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system, it might be worth considering adding a Fraction (or Rational) type to the standard library. This, coupled with an arbitrary-precision integer type, would be a great way to handle arbitrary-precision decimal arithmetic, and can alleviate almost all the pain points of floating-point math.<br>&gt;&gt; <br>&gt;&gt; There exist now some really nice implementations of Fractions, but the ones I’ve seen haven’t been implemented fully generically.<br>&gt;&gt; My favorite is this one: https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e &lt;https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e&gt;<br>&gt;&gt; <br>&gt;&gt; I’d love to see some standard library support with rock-solid, fast implementations of all the common algorithms (GCD, LCD, LCM, reduction, etc) and good conformance to the builtin integer protocols. Maybe even FloatLiteralConvertible, too, with some logic for converting rational floats.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; - Harlan Haskins<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/069a134f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  7, 2015 at 08:00:00pm</p></header><div class="content"><p>Musical time signatures and note duration. Visual code with proportional<br>relationships.<br></p><p>On Mon, Dec 7, 2015 at 7:41 PM, Stephen Canon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Can you guys specify some of the use cases that you have in mind for a<br>&gt; Rational type?  You mention &quot;alleviating the pain points of floating-point<br>&gt; math,” but rationals tend to be used *very* differently from floating-point<br>&gt; types in computation.<br>&gt;<br>&gt; Thanks,<br>&gt; – Steve<br>&gt;<br>&gt; On Dec 7, 2015, at 5:44 AM, Davide De Franceschi via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; While I agree that a Rational type, one that would preserve quotient and<br>&gt; denominator info, would be very nice, I think that it&#39;s more fit for a Math<br>&gt; framework.<br>&gt; If we&#39;re just talking about a type that holds precise decimal info, I<br>&gt; think making NSDecimal (planned to be renamed as Decimal in the future)<br>&gt; usable is what we should do.<br>&gt;<br>&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be<br>&gt; glad not to have to include it as a dependency everywhere.<br>&gt; TJ<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system,<br>&gt;&gt; it might be worth considering adding a Fraction (or Rational) type to the<br>&gt;&gt; standard library. This, coupled with an arbitrary-precision integer type,<br>&gt;&gt; would be a great way to handle arbitrary-precision decimal arithmetic, and<br>&gt;&gt; can alleviate almost all the pain points of floating-point math.<br>&gt;&gt;<br>&gt;&gt; There exist now some really nice implementations of Fractions, but the<br>&gt;&gt; ones I’ve seen haven’t been implemented fully generically.<br>&gt;&gt; My favorite is this one:<br>&gt;&gt; https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e<br>&gt;&gt;<br>&gt;&gt; I’d love to see some standard library support with rock-solid, fast<br>&gt;&gt; implementations of all the common algorithms (GCD, LCD, LCM, reduction,<br>&gt;&gt; etc) and good conformance to the builtin integer protocols. Maybe even<br>&gt;&gt; FloatLiteralConvertible, too, with some logic for converting rational<br>&gt;&gt; floats.<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt;<br>&gt;&gt; - Harlan Haskins<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/99035719/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>Musical time signatures is an odd case, because you really have pairs of integers (i.e. if they were rational numbers, then 6/8 would be the same as 3/4. They are not the same).<br></p><p>&gt; On Dec 7, 2015, at 9:36 AM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; Musical time signatures and note duration. Visual code with proportional relationships.<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 7:41 PM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Can you guys specify some of the use cases that you have in mind for a Rational type?  You mention &quot;alleviating the pain points of floating-point math,” but rationals tend to be used *very* differently from floating-point types in computation.<br>&gt; <br>&gt; Thanks,<br>&gt; – Steve<br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 5:44 AM, Davide De Franceschi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I agree that a Rational type, one that would preserve quotient and denominator info, would be very nice, I think that it&#39;s more fit for a Math framework.<br>&gt;&gt; If we&#39;re just talking about a type that holds precise decimal info, I think making NSDecimal (planned to be renamed as Decimal in the future) usable is what we should do.<br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be glad not to have to include it as a dependency everywhere.<br>&gt;&gt;&gt; TJ<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system, it might be worth considering adding a Fraction (or Rational) type to the standard library. This, coupled with an arbitrary-precision integer type, would be a great way to handle arbitrary-precision decimal arithmetic, and can alleviate almost all the pain points of floating-point math.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There exist now some really nice implementations of Fractions, but the ones I’ve seen haven’t been implemented fully generically.<br>&gt;&gt;&gt; My favorite is this one: https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e &lt;https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d love to see some standard library support with rock-solid, fast implementations of all the common algorithms (GCD, LCD, LCM, reduction, etc) and good conformance to the builtin integer protocols. Maybe even FloatLiteralConvertible, too, with some logic for converting rational floats.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Harlan Haskins<br>&gt;&gt;&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/d825e704/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  7, 2015 at 09:00:00pm</p></header><div class="content"><p>The example of time signatures has much less to do with modeling the two<br>integers presented to the user and more to do with resolving the absolute<br>duration of a note which is part of why I mentioned both time signature<br>*and* note duration.<br></p><p>On Mon, Dec 7, 2015 at 8:15 PM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br></p><p>&gt; Musical time signatures is an odd case, because you really have pairs of<br>&gt; integers (i.e. if they were rational numbers, then 6/8 would be the same as<br>&gt; 3/4. They are not the same).<br>&gt;<br>&gt; On Dec 7, 2015, at 9:36 AM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt; Musical time signatures and note duration. Visual code with proportional<br>&gt; relationships.<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 7:41 PM, Stephen Canon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Can you guys specify some of the use cases that you have in mind for a<br>&gt;&gt; Rational type?  You mention &quot;alleviating the pain points of floating-point<br>&gt;&gt; math,” but rationals tend to be used *very* differently from floating-point<br>&gt;&gt; types in computation.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; – Steve<br>&gt;&gt;<br>&gt;&gt; On Dec 7, 2015, at 5:44 AM, Davide De Franceschi via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; While I agree that a Rational type, one that would preserve quotient and<br>&gt;&gt; denominator info, would be very nice, I think that it&#39;s more fit for a Math<br>&gt;&gt; framework.<br>&gt;&gt; If we&#39;re just talking about a type that holds precise decimal info, I<br>&gt;&gt; think making NSDecimal (planned to be renamed as Decimal in the future)<br>&gt;&gt; usable is what we should do.<br>&gt;&gt;<br>&gt;&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be<br>&gt;&gt; glad not to have to include it as a dependency everywhere.<br>&gt;&gt; TJ<br>&gt;&gt;<br>&gt;&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system,<br>&gt;&gt;&gt; it might be worth considering adding a Fraction (or Rational) type to the<br>&gt;&gt;&gt; standard library. This, coupled with an arbitrary-precision integer type,<br>&gt;&gt;&gt; would be a great way to handle arbitrary-precision decimal arithmetic, and<br>&gt;&gt;&gt; can alleviate almost all the pain points of floating-point math.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There exist now some really nice implementations of Fractions, but the<br>&gt;&gt;&gt; ones I’ve seen haven’t been implemented fully generically.<br>&gt;&gt;&gt; My favorite is this one:<br>&gt;&gt;&gt; https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’d love to see some standard library support with rock-solid, fast<br>&gt;&gt;&gt; implementations of all the common algorithms (GCD, LCD, LCM, reduction,<br>&gt;&gt;&gt; etc) and good conformance to the builtin integer protocols. Maybe even<br>&gt;&gt;&gt; FloatLiteralConvertible, too, with some logic for converting rational<br>&gt;&gt;&gt; floats.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Harlan Haskins<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/67677925/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; Musical time signatures and note duration. Visual code with proportional relationships.<br></p><p>Time signatures cannot be properly modeled with a rational type you would expect to find in a numerics library.  3/4 is not the same as 6/8 in music!<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  7, 2015 at 09:00:00pm</p></header><div class="content"><p>If your implementation of Rational simplifies immediately, sure. Mine<br>doesn&#39;t and it is useful in many other cases not to as well. You might, for<br>example, want to present the original numerator/denominator provided by the<br>user.<br></p><p>TJ<br></p><p>On Mon, Dec 7, 2015 at 8:16 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt; &gt; Musical time signatures and note duration. Visual code with proportional<br>&gt; relationships.<br>&gt;<br>&gt; Time signatures cannot be properly modeled with a rational type you would<br>&gt; expect to find in a numerics library.  3/4 is not the same as 6/8 in music!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/95ddeb28/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; If your implementation of Rational simplifies immediately, sure. Mine doesn&#39;t and it is useful in many other cases not to as well. You might, for example, want to present the original numerator/denominator provided by the user.<br></p><p>How does your implementation implement equality?  From a numeric standpoint I think most people would consider 3/4 to be equal to 6/8 whereas this would not be correct for a time signature.  <br></p><p>In any case, I agree that a rational type would be a useful addition to the library.  I don&#39;t think I would use it to model time signatures but there are plenty of other uses.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  8, 2015 at 04:00:00am</p></header><div class="content"><p>We seem to have become distracted with the whole Time Signature thing. Time<br>signatures themselves are not Rationals. I should have said &quot;Metrical Time&quot;<br>and left it at that. My point has always been that metrical time calls for<br>the use of Rationals.<br>TJ<br></p><p>On Mon, Dec 7, 2015 at 9:20 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; If your implementation of Rational simplifies immediately, sure. Mine<br>&gt; doesn&#39;t and it is useful in many other cases not to as well. You might, for<br>&gt; example, want to present the original numerator/denominator provided by the<br>&gt; user.<br>&gt;<br>&gt; How does your implementation implement equality?  From a numeric<br>&gt; standpoint I think most people would consider 3/4 to be equal to 6/8<br>&gt; whereas this would not be correct for a time signature.<br>&gt;<br>&gt; In any case, I agree that a rational type would be a useful addition to<br>&gt; the library.  I don&#39;t think I would use it to model time signatures but<br>&gt; there are plenty of other uses.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/36912fed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 20, 2015 at 07:00:00pm</p></header><div class="content"><p>Calculating precession time of two frequencies is an example. (consider<br>displaying two waveforms)<br></p><p>On Mon, Dec 7, 2015 at 5:43 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br></p><p>&gt; We seem to have become distracted with the whole Time Signature thing.<br>&gt; Time signatures themselves are not Rationals. I should have said &quot;Metrical<br>&gt; Time&quot; and left it at that. My point has always been that metrical time<br>&gt; calls for the use of Rationals.<br>&gt; TJ<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 9:20 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; If your implementation of Rational simplifies immediately, sure. Mine<br>&gt;&gt; doesn&#39;t and it is useful in many other cases not to as well. You might, for<br>&gt;&gt; example, want to present the original numerator/denominator provided by the<br>&gt;&gt; user.<br>&gt;&gt;<br>&gt;&gt; How does your implementation implement equality?  From a numeric<br>&gt;&gt; standpoint I think most people would consider 3/4 to be equal to 6/8<br>&gt;&gt; whereas this would not be correct for a time signature.<br>&gt;&gt;<br>&gt;&gt; In any case, I agree that a rational type would be a useful addition to<br>&gt;&gt; the library.  I don&#39;t think I would use it to model time signatures but<br>&gt;&gt; there are plenty of other uses.<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/a29986d7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>Proposal: A standard library Fraction type</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>Anything where you *specify* angles benefits from a rational type (e.g. representing fractions-of-π) that gets converted to floating-point only when necessary (e.g. to use trig functions).<br></p><p>&gt; On Dec 7, 2015, at 8:11 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Can you guys specify some of the use cases that you have in mind for a Rational type?  You mention &quot;alleviating the pain points of floating-point math,” but rationals tend to be used *very* differently from floating-point types in computation.<br>&gt; <br>&gt; Thanks,<br>&gt; – Steve<br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 5:44 AM, Davide De Franceschi via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I agree that a Rational type, one that would preserve quotient and denominator info, would be very nice, I think that it&#39;s more fit for a Math framework.<br>&gt;&gt; If we&#39;re just talking about a type that holds precise decimal info, I think making NSDecimal (planned to be renamed as Decimal in the future) usable is what we should do.<br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Dec 2015, at 10:28, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m all for a stdlib Rational Type. I&#39;ve written one as well and would be glad not to have to include it as a dependency everywhere.<br>&gt;&gt;&gt; TJ<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 7, 2015 at 1:31 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; If Swift 3 is going to focus on re-thinking the Numerics in the system, it might be worth considering adding a Fraction (or Rational) type to the standard library. This, coupled with an arbitrary-precision integer type, would be a great way to handle arbitrary-precision decimal arithmetic, and can alleviate almost all the pain points of floating-point math.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There exist now some really nice implementations of Fractions, but the ones I’ve seen haven’t been implemented fully generically.<br>&gt;&gt;&gt; My favorite is this one: https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e &lt;https://gist.github.com/JadenGeller/5e80ebf32442acc62e8e&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d love to see some standard library support with rock-solid, fast implementations of all the common algorithms (GCD, LCD, LCM, reduction, etc) and good conformance to the builtin integer protocols. Maybe even FloatLiteralConvertible, too, with some logic for converting rational floats.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Harlan Haskins<br>&gt;&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/b01dd384/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
