<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 24, 2016 at 10:00:00am</p></header><div class="content"><p>on Sun Jan 24 2016, David Owens II &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Removing var from function params, I get that. But the if-binding is<br>&gt; unfortunate. It&#39;s literally a line of code for the sole purpose of<br>&gt; making the compiler happy.<br></p><p>That&#39;s not the purpose; even though I am not a fan of prohibiting &quot;var&quot;<br>there, I understand that the purpose of doing so is avoiding confusion,<br>because some people believe they are getting a reference through which<br>to mutate the contents of the original optional.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>January 24, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 24, 2016, at 12:31 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Sun Jan 24 2016, David Owens II &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Removing var from function params, I get that. But the if-binding is<br>&gt;&gt; unfortunate. It&#39;s literally a line of code for the sole purpose of<br>&gt;&gt; making the compiler happy.<br>&gt; <br>&gt; That&#39;s not the purpose; even though I am not a fan of prohibiting &quot;var&quot;<br>&gt; there, I understand that the purpose of doing so is avoiding confusion,<br>&gt; because some people believe they are getting a reference through which<br>&gt; to mutate the contents of the original optional.<br></p><p><br>But that’s not what assigning something to a var means in any other context. Why should it be any different here?<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/55afd013/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>January 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jan 24, 2016, at 6:44 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 24, 2016, at 12:31 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That&#39;s not the purpose; even though I am not a fan of prohibiting &quot;var&quot;<br>&gt;&gt; there, I understand that the purpose of doing so is avoiding confusion,<br>&gt;&gt; because some people believe they are getting a reference through which<br>&gt;&gt; to mutate the contents of the original optional.<br>&gt; <br>&gt; <br>&gt; But that’s not what assigning something to a var means in any other context. Why should it be any different here?<br>&gt; <br>In the case of &quot;if let x = x { … }”, the shadowing/copying of the original value is not apparent - from the user perspective, the language just “knows” within the block to stop treating “x” like an optional.<br></p><p>In the case of a function parameter, it looks like it is a modifier of the signature, not an internal behavior of the function. Compare:<br></p><p>func foo(var a:String) { }<br>func bar(inout a:String) { }<br></p><p>This is why I personally recommended earlier in the thread proposing an alternative than a reversal - disallowing the current syntax increases clarity at the expense of terseness, which is one of fundamental design decision driving Swift. If someone has an alternative that increases clarity and terseness together when compared to SE-0003, they will have a much easier time.<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/57c1c808/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 24, 2016 at 09:00:00pm</p></header><div class="content"><p>on Sun Jan 24 2016, David Waite &lt;david-AT-alkaline-solutions.com&gt; wrote:<br></p><p>&gt;&gt; On Jan 24, 2016, at 6:44 PM, Charles Srstka via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 24, 2016, at 12:31 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s not the purpose; even though I am not a fan of prohibiting &quot;var&quot;<br>&gt;&gt;&gt; there, I understand that the purpose of doing so is avoiding confusion,<br>&gt;&gt;&gt; because some people believe they are getting a reference through which<br>&gt;&gt;&gt; to mutate the contents of the original optional.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; But that’s not what assigning something to a var means in any other<br>&gt;&gt; context. Why should it be any different here?<br>&gt;&gt; <br>&gt; In the case of &quot;if let x = x { … }”, the shadowing/copying of the<br>&gt; original value is not apparent - from the user perspective, the<br>&gt; language just “knows” within the block to stop treating “x” like an<br>&gt; optional.<br></p><p>That&#39;s one reason I&#39;m not a fan of using the same identifier in both<br>places in these examples.  I&#39;ve usually found the code to be a little<br>clearer anyway, when I take the time to find a different name.<br></p><p>FWIW-ly y&#39;rs,<br></p><p>-- <br>-Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 24, 2016 at 07:00:00pm</p></header><div class="content"><p>on Sun Jan 24 2016, Charles Srstka &lt;cocoadev-AT-charlessoft.com&gt; wrote:<br></p><p>&gt;&gt; On Jan 24, 2016, at 12:31 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Sun Jan 24 2016, David Owens II &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Removing var from function params, I get that. But the if-binding is<br>&gt;&gt;&gt; unfortunate. It&#39;s literally a line of code for the sole purpose of<br>&gt;&gt;&gt; making the compiler happy.<br>&gt;&gt; <br>&gt;&gt; That&#39;s not the purpose; even though I am not a fan of prohibiting &quot;var&quot;<br>&gt;&gt; there, I understand that the purpose of doing so is avoiding confusion,<br>&gt;&gt; because some people believe they are getting a reference through which<br>&gt;&gt; to mutate the contents of the original optional.<br>&gt;<br>&gt; But that’s not what assigning something to a var means in any other<br>&gt; context. Why should it be any different here?<br></p><p>I made the same argument myself, but you can&#39;t argue with empirical<br>evidence: some people have been tripped up by this anyway.<br></p><p>-- <br>-Dave<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>January 25, 2016 at 09:00:00am</p></header><div class="content"><p>On 25 Jan 2016, at 03:25, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 25 Jan 2016, at 01:44, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; But that’s not what assigning something to a var means in any other context. Why should it be any different here?<br>&gt; <br></p><p>&gt; I made the same argument myself, but you can&#39;t argue with empirical<br>&gt; evidence: some people have been tripped up by this anyway.<br></p><p>One explanation might be that these folks have a Pascal heritage, where &quot;var&quot; is (roughly) equivalent to Swift&#39;s &quot;inout&quot;.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>January 25, 2016 at 11:00:00am</p></header><div class="content"><p>It is true that the proposal seems a bit rushed. Removing ‘var’ in function declarations is a very good move, and I can partially understand its removal in if etc. (even though I disagree that it is that confusing, and its certainly useful as pointed out in this thread), but my biggest gripe is with removal of var in the guard statement. What about a useful pattern like this?<br></p><p>guard var x = SomeOptionalValue() else {<br>   fatalError()<br>}<br></p><p>x = doSomethingWith(x)<br></p><p>Best, <br></p><p> Taras<br></p><p>&gt; On 25 Jan 2016, at 10:54, Quinn The Eskimo! via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 25 Jan 2016, at 03:25, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 25 Jan 2016, at 01:44, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; But that’s not what assigning something to a var means in any other context. Why should it be any different here?<br>&gt;&gt; <br>&gt; <br>&gt;&gt; I made the same argument myself, but you can&#39;t argue with empirical<br>&gt;&gt; evidence: some people have been tripped up by this anyway.<br>&gt; <br>&gt; One explanation might be that these folks have a Pascal heritage, where &quot;var&quot; is (roughly) equivalent to Swift&#39;s &quot;inout&quot;.<br>&gt; <br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>January 25, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jan 25, 2016, at 3:54 AM, Quinn The Eskimo! via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 25 Jan 2016, at 03:25, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 25 Jan 2016, at 01:44, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; But that’s not what assigning something to a var means in any other context. Why should it be any different here?<br>&gt;&gt; <br>&gt; <br>&gt;&gt; I made the same argument myself, but you can&#39;t argue with empirical<br>&gt;&gt; evidence: some people have been tripped up by this anyway.<br>&gt; <br>&gt; One explanation might be that these folks have a Pascal heritage, where &quot;var&quot; is (roughly) equivalent to Swift&#39;s &quot;inout”.<br></p><p>Perhaps then we should add an “if inout” construct, then, so that the distinction between “inout” and “var” here are clear for people to see, and explained in the documentation?<br></p><p>As a bonus, I can think of a few situations where “if inout” would be useful—particularly so we wouldn’t need the postfix ! to do things like this:<br></p><p>if someStruct.someOptionalArray != nil {<br>	someStruct.someOptionalArray!.append(foo)<br>}<br></p><p>With “if inout”, you could do this instead:<br></p><p>if inout array = someStruct.someOptionalArray {<br>	array.append(foo)<br>}<br></p><p>which seems quite a bit cleaner.<br></p><p>Charles<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>January 25, 2016 at 03:00:00pm</p></header><div class="content"><p>The real issue here is the contrast between reference and value types. What you suggest is basically to introduce a new type to the language: references to values. This type already exists implicitly for the inout parameters. In more simple terms, your example turns into:<br></p><p>if var array = &amp;someStruct.someOptionalArrayl {<br>	array.append(foo)<br>}<br></p><p>One could expose reference types to the general language instead of keeping it specific to inout arguments only. It might make the language more elegant sometimes. But it might also make it more messy, as it allows one to blur the reference/value distinction deliberately. I really don’t have any opinion right now because I have no idea of what the consequences would be. <br></p><p>But I am certainly against having an ‘inout’ variable declaration modifier. If that is really necessary, than I’d rather see a general reference implementation. <br></p><p>Best, <br></p><p> Taras<br></p><p><br></p><p>&gt; On 25 Jan 2016, at 13:12, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 25, 2016, at 3:54 AM, Quinn The Eskimo! via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On 25 Jan 2016, at 03:25, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 25 Jan 2016, at 01:44, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But that’s not what assigning something to a var means in any other context. Why should it be any different here?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; I made the same argument myself, but you can&#39;t argue with empirical<br>&gt;&gt;&gt; evidence: some people have been tripped up by this anyway.<br>&gt;&gt; <br>&gt;&gt; One explanation might be that these folks have a Pascal heritage, where &quot;var&quot; is (roughly) equivalent to Swift&#39;s &quot;inout”.<br>&gt; <br>&gt; Perhaps then we should add an “if inout” construct, then, so that the distinction between “inout” and “var” here are clear for people to see, and explained in the documentation?<br>&gt; <br>&gt; As a bonus, I can think of a few situations where “if inout” would be useful—particularly so we wouldn’t need the postfix ! to do things like this:<br>&gt; <br>&gt; if someStruct.someOptionalArray != nil {<br>&gt; 	someStruct.someOptionalArray!.append(foo)<br>&gt; }<br>&gt; <br>&gt; With “if inout”, you could do this instead:<br>&gt; <br>&gt; if inout array = someStruct.someOptionalArray {<br>&gt; 	array.append(foo)<br>&gt; }<br>&gt; <br>&gt; which seems quite a bit cleaner.<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
