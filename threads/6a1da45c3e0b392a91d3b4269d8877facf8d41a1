<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br></p><p>So in other languages what have they called this, well in Ruby they called<br>it &quot;unless&quot; which I feel is a much clearer form of intent and lower barrier<br>of entry for a user. See this code.<br></p><p>guard name != nil else {<br>   fatalError(&quot;Please enter a name&quot;)<br>}<br></p><p>What does that actually say if you look at it from a linguistic point of<br>view, &quot;guard that name doesn&#39;t equal nil otherwise fail&quot;, that feels very<br>obtuse.<br></p><p>With my proposal the syntax could become this:<br></p><p>unless name != nil {<br>  fatalError(&quot;Please enter a name&quot;)<br>}<br></p><p>This now reads as &quot;unless name doesn&#39;t equal nil then fail&quot; which I think<br>is a much clearer syntax. I think this would be a great change for Swift 3.<br>For me I think this is more friendly for beginners.<br></p><p>It would support the same structure as an if block:<br></p><p>unless name != nil {<br>}<br>else<br>{<br>}<br></p><p>Going forward it would allow us to be more flexible if we added inline<br>if/unless statement, as in Ruby.<br></p><p>callThisMethod() if age &gt; 0<br>throwThisError() unless age &lt;= 0<br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/6a1d41a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6f9eea37d3dbcfd7a49b0369cf826bbd?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>Scott Matthewman</string> &lt;scott at matthewman.net&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br></p><p>Not exactly. It’s a guard clause, designed to be used at the beginning of a<br>method to ensure that certain conditions exist, and to exit early if they<br>do not.<br></p><p>In addition, guard in Swift works different to if in that any `let`<br>declarations made within the guard clause are set within the scope of the<br>parent method – especially useful if you need to unwrap optionals. With if,<br>they are only valid within the if block.<br></p><p>For example:<br></p><p>    if let name = optionalName as? Name {<br>      print(name) // okay<br>    }<br></p><p>    print(name) // out of scope<br></p><p>But with guard:<br></p><p>func printName(optionalName: Name?) {<br>  guard let name = optionalName else { return }<br></p><p>  print(name) // this is okay<br>}<br></p><p>So yes, the distinction is subtle – and in Ruby (the language I use in my<br>day to day work) we implement guard clauses with ‘if&#39; or ‘unless’ blocks or<br>modifiers.<br></p><p>But with the difference in scope of assigned variables between `if` and<br>`guard` in Swift, I think your suggestion would make things slightly more<br>confusing, instead of slightly less.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/c1f3e7f7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/57885cfd0c4b4db16653e76d9e6f0266?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>Johan Jensen</string> &lt;jj at johanjensen.dk&gt;<p>January  6, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jan 6, 2016 at 11:09 AM, James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br>&gt;<br></p><p>But it’s not.<br>guard’s else-clause requires you to transfer program control outside the<br>guard statement’s enclosing scope.<br>And any constants or variables assigned a value from an optional binding<br>declaration in a guard statement condition can be used for the rest of the<br>guard statement’s enclosing scope. That is what allows us to do `guard let<br>val = opt else { return }` where opt is an optional and val is the value<br>contained in opt if it is not nil.<br></p><p>Changing it to unless (and removing the else-clause) would only confuse<br>people coming from Ruby or similar languages, as they wouldn’t expect any<br>of the variable declarations to live in the guard statement’s enclosing<br>scope.<br></p><p><br>&gt;<br>&gt; So in other languages what have they called this, well in Ruby they called<br>&gt; it &quot;unless&quot; which I feel is a much clearer form of intent and lower barrier<br>&gt; of entry for a user. See this code.<br>&gt;<br>&gt; guard name != nil else {<br>&gt;    fatalError(&quot;Please enter a name&quot;)<br>&gt; }<br>&gt;<br>&gt; What does that actually say if you look at it from a linguistic point of<br>&gt; view, &quot;guard that name doesn&#39;t equal nil otherwise fail&quot;, that feels very<br>&gt; obtuse.<br>&gt;<br>&gt; With my proposal the syntax could become this:<br>&gt;<br>&gt; unless name != nil {<br>&gt;   fatalError(&quot;Please enter a name&quot;)<br>&gt; }<br>&gt;<br>&gt; This now reads as &quot;unless name doesn&#39;t equal nil then fail&quot; which I think<br>&gt; is a much clearer syntax. I think this would be a great change for Swift 3.<br>&gt; For me I think this is more friendly for beginners.<br>&gt;<br>&gt; It would support the same structure as an if block:<br>&gt;<br>&gt; unless name != nil {<br>&gt; }<br>&gt; else<br>&gt; {<br>&gt; }<br>&gt;<br>&gt; Going forward it would allow us to be more flexible if we added inline<br>&gt; if/unless statement, as in Ruby.<br>&gt;<br>&gt; callThisMethod() if age &gt; 0<br>&gt; throwThisError() unless age &lt;= 0<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/b6b63573/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>January  6, 2016 at 11:00:00am</p></header><div class="content"><p>Hi James, <br></p><p>“guard&quot; is not the opposite of “if”. <br>From the Swift book: “You use a guard statement to require that a condition must be true in order for the code after the guard statement to be executed.”<br>So, unlike “unless”, a “guard&quot; statement must provide an “early exit” in its else clause (fatalError, return, continue, break, …). <br>IMO, using “unless” would be less expressive, and encourage more misunderstanding of this feature.<br></p><p>Loïc<br></p><p>&gt; On Jan 6, 2016, at 11:09 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br>&gt; <br>&gt; So in other languages what have they called this, well in Ruby they called it &quot;unless&quot; which I feel is a much clearer form of intent and lower barrier of entry for a user. See this code.<br>&gt; <br>&gt; guard name != nil else {<br>&gt;    fatalError(&quot;Please enter a name&quot;)<br>&gt; }<br>&gt; <br>&gt; What does that actually say if you look at it from a linguistic point of view, &quot;guard that name doesn&#39;t equal nil otherwise fail&quot;, that feels very obtuse. <br>&gt; <br>&gt; With my proposal the syntax could become this:<br>&gt; <br>&gt; unless name != nil {<br>&gt;   fatalError(&quot;Please enter a name&quot;)<br>&gt; }<br>&gt; <br>&gt; This now reads as &quot;unless name doesn&#39;t equal nil then fail&quot; which I think is a much clearer syntax. I think this would be a great change for Swift 3. For me I think this is more friendly for beginners.<br>&gt; <br>&gt; It would support the same structure as an if block:<br>&gt; <br>&gt; unless name != nil {<br>&gt; }<br>&gt; else<br>&gt; {<br>&gt; }<br>&gt; <br>&gt; Going forward it would allow us to be more flexible if we added inline if/unless statement, as in Ruby.<br>&gt; <br>&gt; callThisMethod() if age &gt; 0<br>&gt; throwThisError() unless age &lt;= 0<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>January  6, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 2:09 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br>&gt; <br>&gt; So in other languages what have they called this, well in Ruby they called it &quot;unless&quot; which I feel is a much clearer form of intent and lower barrier of entry for a user. See this code.<br>&gt; <br>&gt; guard name != nil else {<br>&gt;    fatalError(&quot;Please enter a name&quot;)<br>&gt; }<br>&gt; <br>&gt; What does that actually say if you look at it from a linguistic point of view, &quot;guard that name doesn&#39;t equal nil otherwise fail&quot;, that feels very obtuse. <br>&gt; <br>&gt; With my proposal the syntax could become this:<br>&gt; <br>&gt; unless name != nil {<br>&gt;   fatalError(&quot;Please enter a name&quot;)<br>&gt; }<br>&gt; <br>&gt; This now reads as &quot;unless name doesn&#39;t equal nil then fail&quot; which I think is a much clearer syntax. I think this would be a great change for Swift 3. For me I think this is more friendly for beginners.<br>&gt; <br>&gt; It would support the same structure as an if block:<br>&gt; <br>&gt; unless name != nil {<br>&gt; }<br>&gt; else<br>&gt; {<br>&gt; }<br>&gt; <br>&gt; Going forward it would allow us to be more flexible if we added inline if/unless statement, as in Ruby.<br>&gt; <br>&gt; callThisMethod() if age &gt; 0<br>&gt; throwThisError() unless age &lt;= 0<br></p><p>`guard` is not the opposite of `if`. `guard` has effects that `if` does not. We deliberately chose not to provide syntax that was identical to `if not X`.<br></p><p>History: The very first proposal of this feature was called `unless`. Fifty-odd messages of discussion later it was called `require`, in part because we did not want to match the `if not` constructs seen in languages like Perl and Ruby. That name was still controversial. A few weeks later it was changed to `guard..else` to general acclaim because the intended use is commonly known as a &quot;guard clause&quot;.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Should we add this to the list of things requested that will be rejected ?<br></p><p>On Wed, Jan 6, 2016 at 10:58 AM, Greg Parker &lt;gparker at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 6, 2016, at 2:09 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br>&gt; &gt;<br>&gt; &gt; So in other languages what have they called this, well in Ruby they<br>&gt; called it &quot;unless&quot; which I feel is a much clearer form of intent and lower<br>&gt; barrier of entry for a user. See this code.<br>&gt; &gt;<br>&gt; &gt; guard name != nil else {<br>&gt; &gt;    fatalError(&quot;Please enter a name&quot;)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; What does that actually say if you look at it from a linguistic point of<br>&gt; view, &quot;guard that name doesn&#39;t equal nil otherwise fail&quot;, that feels very<br>&gt; obtuse.<br>&gt; &gt;<br>&gt; &gt; With my proposal the syntax could become this:<br>&gt; &gt;<br>&gt; &gt; unless name != nil {<br>&gt; &gt;   fatalError(&quot;Please enter a name&quot;)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This now reads as &quot;unless name doesn&#39;t equal nil then fail&quot; which I<br>&gt; think is a much clearer syntax. I think this would be a great change for<br>&gt; Swift 3. For me I think this is more friendly for beginners.<br>&gt; &gt;<br>&gt; &gt; It would support the same structure as an if block:<br>&gt; &gt;<br>&gt; &gt; unless name != nil {<br>&gt; &gt; }<br>&gt; &gt; else<br>&gt; &gt; {<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Going forward it would allow us to be more flexible if we added inline<br>&gt; if/unless statement, as in Ruby.<br>&gt; &gt;<br>&gt; &gt; callThisMethod() if age &gt; 0<br>&gt; &gt; throwThisError() unless age &lt;= 0<br>&gt;<br>&gt; `guard` is not the opposite of `if`. `guard` has effects that `if` does<br>&gt; not. We deliberately chose not to provide syntax that was identical to `if<br>&gt; not X`.<br>&gt;<br>&gt; History: The very first proposal of this feature was called `unless`.<br>&gt; Fifty-odd messages of discussion later it was called `require`, in part<br>&gt; because we did not want to match the `if not` constructs seen in languages<br>&gt; like Perl and Ruby. That name was still controversial. A few weeks later it<br>&gt; was changed to `guard..else` to general acclaim because the intended use is<br>&gt; commonly known as a &quot;guard clause&quot;.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Greg Parker     gparker at apple.com     Runtime Wrangler<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/a2555c14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Rename &quot;guard&quot; to &quot;unless&quot;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>On Jan 6, 2016, at 7:05 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Should we add this to the list of things requested that will be rejected ?<br></p><p>Yes, if you send a good PR adding it, I’ll merge it.  Note that it was (very briefly) named “unless” as a placeholder until May 1, 2015.  We carefully bikeshedded this and settled on guard.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; On Wed, Jan 6, 2016 at 10:58 AM, Greg Parker &lt;gparker at apple.com &lt;mailto:gparker at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Jan 6, 2016, at 2:09 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What is &quot;guard&quot;? why its the opposite to &quot;if&quot;!<br>&gt; &gt;<br>&gt; &gt; So in other languages what have they called this, well in Ruby they called it &quot;unless&quot; which I feel is a much clearer form of intent and lower barrier of entry for a user. See this code.<br>&gt; &gt;<br>&gt; &gt; guard name != nil else {<br>&gt; &gt;    fatalError(&quot;Please enter a name&quot;)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; What does that actually say if you look at it from a linguistic point of view, &quot;guard that name doesn&#39;t equal nil otherwise fail&quot;, that feels very obtuse.<br>&gt; &gt;<br>&gt; &gt; With my proposal the syntax could become this:<br>&gt; &gt;<br>&gt; &gt; unless name != nil {<br>&gt; &gt;   fatalError(&quot;Please enter a name&quot;)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; This now reads as &quot;unless name doesn&#39;t equal nil then fail&quot; which I think is a much clearer syntax. I think this would be a great change for Swift 3. For me I think this is more friendly for beginners.<br>&gt; &gt;<br>&gt; &gt; It would support the same structure as an if block:<br>&gt; &gt;<br>&gt; &gt; unless name != nil {<br>&gt; &gt; }<br>&gt; &gt; else<br>&gt; &gt; {<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Going forward it would allow us to be more flexible if we added inline if/unless statement, as in Ruby.<br>&gt; &gt;<br>&gt; &gt; callThisMethod() if age &gt; 0<br>&gt; &gt; throwThisError() unless age &lt;= 0<br>&gt; <br>&gt; `guard` is not the opposite of `if`. `guard` has effects that `if` does not. We deliberately chose not to provide syntax that was identical to `if not X`.<br>&gt; <br>&gt; History: The very first proposal of this feature was called `unless`. Fifty-odd messages of discussion later it was called `require`, in part because we did not want to match the `if not` constructs seen in languages like Perl and Ruby. That name was still controversial. A few weeks later it was changed to `guard..else` to general acclaim because the intended use is commonly known as a &quot;guard clause&quot;.<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/e010920f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
