<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>May 22, 2016 at 10:00:00pm</p></header><div class="content"><p>Would anyone be interested in &quot;where&quot; (or a similar keyword or operator)<br>being able to do this:<br></p><p>    *let val = &quot;foo&quot; where true* // &quot;foo&quot;<br>    *let val = &quot;foo&quot; where false* // nil<br></p><p>... and therefore being able to work in conjunction like this:<br></p><p>*    let val = *<br>*        &quot;positive&quot; where ( val &gt; 0 )  ?? *<br>*        &quot;negative&quot; where ( val &lt; 0 ) ?? *<br>*        &quot;zero&quot;*<br></p><p>In other words, a statement that given a value and a bool, and returns the<br>value if the bool is true, but nil if the bool is false.<br></p><p>There have been a few threads here about &quot;switch assignment&quot; and &quot;extended<br>ternary&quot; statements. I encounter frustrations regularly when I want to<br>write concise, but easy-to-read code for conditions that require more to<br>than two options. We have discussed problems using dicts, enums, etc in the<br>past.<br></p><p>The problem with most of the suggestions so far is that they aren&#39;t very<br>Swifty. But if &quot;where&quot; worked the way I&#39;m pitching, a coder could impliment<br>most of the alternatives we&#39;ve discussed (by using autoclosure, and custom<br>operators). Eg:<br></p><p>*    let val:FooEnum = depends( bar ){*<br>*        .Red where $0 == .A  ?? *<br>*        .Blue where $0 == .B ?? *<br>*        .Green where $0 == .C ?? *<br></p><p>*        .None*<br>*    }*<br></p><p>This strikes me as the least disruptive, and most Swifty solution.<br></p><p>Would this appeal to anyone else?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160522/2f9633e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>May 22, 2016 at 10:00:00pm</p></header><div class="content"><p>Correction. My example reused &quot;val&quot; This is what I should have typed:<br></p><p>*    let foo = *<br>*        &quot;positive&quot; where ( bar &gt; 0 )  ?? *<br>*        &quot;negative&quot; where ( bar &lt; 0 ) ?? *<br>*        &quot;zero&quot;*<br></p><p>Sorry for that. My mind seems to switch itself off whenever I submit to<br>this list :)<br></p><p>Also, since my previous posts to this list about ternary and switch<br>assignment, etc. I now feel that including the variable name in the bool<br>side is useful. It would be a quick way to do the following sort of thing:<br></p><p>*    let foo = *<br>*        &quot;positive&quot; where ( bar &gt; 0 )  ?? *<br>*        &quot;negative&quot; where ( bar &lt; 0 ) ?? *<br>*        &quot;animal zero&quot; where ( is_animal == true ) ?? *<br>*        &quot;normal zero&quot;*<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160522/d36b091f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>May 23, 2016 at 01:00:00am</p></header><div class="content"><p>Here&#39;s a few examples of what this change would allow.<br></p><p>I just plucked the first instances of other people&#39;s switch statements that<br>I found on GitHub.<br></p><p>If there were an easy way to search GitHub for chained ternary expressions,<br>I would have added some examples of those too, since they could all be<br>improved with this where clause + ??.<br></p><p><br>mutating func toggle() {<br></p><p>switch self{<br></p><p>case Off:<br></p><p>self = On<br></p><p>case On:<br></p><p>self = Off<br></p><p>}<br></p><p>}<br></p><p><br></p><p><br>mutating func toggle() {<br></p><p>self = .On where (self == .Off) ?? .Off<br></p><p>}<br></p><p><br></p><p><br>switch switchNumberThree {<br></p><p>case 10, 11, 12:<br></p><p>println(&quot;It is \(switchNumberThree)&quot;)<br></p><p>default:<br></p><p>(&quot;It is none of them!&quot;)<br></p><p>}<br></p><p><br></p><p>println(<br></p><p>&quot;It is \(switchNumberThree)&quot; where 10...12 ~= switchNumberThree<br></p><p>?? &quot;It is none of them!&quot;<br></p><p>)<br></p><p><br></p><p><br>switch x {<br></p><p>case 1:<br></p><p>j++<br></p><p>case 2:<br></p><p>j++<br></p><p>case 3:<br></p><p>j++<br></p><p>case 4:<br></p><p>j++<br></p><p>fallthrough<br></p><p>case 5:<br></p><p>j++<br></p><p>fallthrough<br></p><p>default:<br></p><p>j++<br></p><p>}<br></p><p><br></p><p>j = j+1 where (4...5 ~= x) ?? j+2<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/f1e8201c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>May 23, 2016 at 09:00:00pm</p></header><div class="content"><p>Why reinvent the wheel, when the old trusty (but a bit cryptic according to some) tri-op can do the trick…<br></p><p>&gt; Le 23 mai 2016 à 04:29, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Here&#39;s a few examples of what this change would allow. <br>&gt; <br>&gt; I just plucked the first instances of other people&#39;s switch statements that I found on GitHub. <br>&gt; <br>&gt; If there were an easy way to search GitHub for chained ternary expressions, I would have added some examples of those too, since they could all be improved with this where clause + ??. <br>&gt; <br>&gt; <br>&gt; 	mutating func toggle() {<br>&gt; 		switch self{<br>&gt; 		case Off:<br>&gt; 			self = On<br>&gt; 		case On:<br>&gt; 			self = Off	<br>&gt; 		}	<br>&gt; 	}<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	mutating func toggle() {<br>&gt; 		self = .On where (self == .Off) ?? .Off<br>&gt; 	}<br>&gt; <br></p><p>mutating func toggle() { self = self == .Off ? .On : .Off }<br></p><p>&gt; <br>&gt; 	switch switchNumberThree {<br>&gt; 		case 10, 11, 12:<br>&gt; 			println(&quot;It is \(switchNumberThree)&quot;)<br>&gt; 		default:<br>&gt; 			(&quot;It is none of them!&quot;)<br>&gt; 	}<br>&gt; <br>&gt; <br>&gt; 	println(<br>&gt; 		&quot;It is \(switchNumberThree)&quot; where 10...12 ~= switchNumberThree<br>&gt; 		?? &quot;It is none of them!&quot;<br>&gt; 	)<br>&gt; <br></p><p>print( 10...12 ~= switchNumberThree ? &quot;It is \(switchNumberThree)&quot;<br>       : &quot;It&#39;s none of them&quot; )<br></p><p>&gt; <br>&gt; 	switch x {<br>&gt; 	case 1:<br>&gt; 		j++<br>&gt; 	case 2:<br>&gt; 		j++<br>&gt; 	case 3:<br>&gt; 		j++<br>&gt; 	case 4:<br>&gt; 		j++<br>&gt; 		fallthrough<br>&gt; 	case 5:<br>&gt; 		j++<br>&gt; 		fallthrough<br>&gt; 	default:<br>&gt; 		j++<br>&gt; 	}<br>&gt; <br>&gt; <br>&gt; 	j = j+1 where (4...5 ~= x) ?? j+2<br>&gt; <br></p><p>Broken conversion:<br>j += 4...5 ~= x ? 1 : 2<br></p><p>Proper conversion:<br>j += 4 ~= x ? 3 : 5 ~= x ? 2 : 1<br></p><p>Earlier e-mail example:<br>&gt;     let foo = <br>&gt;         &quot;positive&quot; where ( bar &gt; 0 )  ?? <br>&gt;         &quot;negative&quot; where ( bar &lt; 0 ) ?? <br>&gt;         &quot;zero&quot;<br></p><p>let foo = bar &gt; 0 ? &quot;positive&quot; :<br>          bar &lt; 0 ? &quot;negative&quot; :<br>          &quot;zero&quot;<br></p><p>Dany<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/01576307/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fdb7d28949d81cc824f5842c17b18512?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>charles@charlesism.com</string> &lt;charlesism.com at gmail.com&gt;<p>May 23, 2016 at 08:00:00pm</p></header><div class="content"><p>I&#39;m not actually familiar with the term &quot;tri op&quot; but if you&#39;re referring to the ternary, it&#39;s only useful when you two, or three items. <br></p><p>If you chain a ternary to use more than three options it becomes error-prone and almost impossible for a human to read<br></p><p>When I&#39;m at my desktop I&#39;ll add a couple better examples of what I&#39;m proposing. <br></p><p>Sent from my iPhone<br></p><p>&gt; On May 23, 2016, at 6:18 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Why reinvent the wheel, when the old trusty (but a bit cryptic according to some) tri-op can do the trick…<br>&gt; <br>&gt;&gt; Le 23 mai 2016 à 04:29, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Here&#39;s a few examples of what this change would allow. <br>&gt;&gt; <br>&gt;&gt; I just plucked the first instances of other people&#39;s switch statements that I found on GitHub. <br>&gt;&gt; <br>&gt;&gt; If there were an easy way to search GitHub for chained ternary expressions, I would have added some examples of those too, since they could all be improved with this where clause + ??. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	mutating func toggle() {<br>&gt;&gt; 		switch self{<br>&gt;&gt; 		case Off:<br>&gt;&gt; 			self = On<br>&gt;&gt; 		case On:<br>&gt;&gt; 			self = Off	<br>&gt;&gt; 		}	<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	mutating func toggle() {<br>&gt;&gt; 		self = .On where (self == .Off) ?? .Off<br>&gt;&gt; 	}<br>&gt; <br>&gt; mutating func toggle() { self = self == .Off ? .On : .Off }<br>&gt; <br>&gt;&gt; <br>&gt;&gt; 	switch switchNumberThree {<br>&gt;&gt; 		case 10, 11, 12:<br>&gt;&gt; 			println(&quot;It is \(switchNumberThree)&quot;)<br>&gt;&gt; 		default:<br>&gt;&gt; 			(&quot;It is none of them!&quot;)<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	println(<br>&gt;&gt; 		&quot;It is \(switchNumberThree)&quot; where 10...12 ~= switchNumberThree<br>&gt;&gt; 		?? &quot;It is none of them!&quot;<br>&gt;&gt; 	)<br>&gt; <br>&gt; print( 10...12 ~= switchNumberThree ? &quot;It is \(switchNumberThree)&quot;<br>&gt;        : &quot;It&#39;s none of them&quot; )<br>&gt; <br>&gt;&gt; <br>&gt;&gt; 	switch x {<br>&gt;&gt; 	case 1:<br>&gt;&gt; 		j++<br>&gt;&gt; 	case 2:<br>&gt;&gt; 		j++<br>&gt;&gt; 	case 3:<br>&gt;&gt; 		j++<br>&gt;&gt; 	case 4:<br>&gt;&gt; 		j++<br>&gt;&gt; 		fallthrough<br>&gt;&gt; 	case 5:<br>&gt;&gt; 		j++<br>&gt;&gt; 		fallthrough<br>&gt;&gt; 	default:<br>&gt;&gt; 		j++<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	j = j+1 where (4...5 ~= x) ?? j+2<br>&gt; <br>&gt; Broken conversion:<br>&gt; j += 4...5 ~= x ? 1 : 2<br>&gt; <br>&gt; Proper conversion:<br>&gt; j += 4 ~= x ? 3 : 5 ~= x ? 2 : 1<br>&gt; <br>&gt; Earlier e-mail example:<br>&gt;&gt;     let foo = <br>&gt;&gt;         &quot;positive&quot; where ( bar &gt; 0 )  ?? <br>&gt;&gt;         &quot;negative&quot; where ( bar &lt; 0 ) ?? <br>&gt;&gt;         &quot;zero&quot;<br>&gt; <br>&gt; let foo = bar &gt; 0 ? &quot;positive&quot; :<br>&gt;           bar &lt; 0 ? &quot;negative&quot; :<br>&gt;           &quot;zero&quot;<br>&gt; <br>&gt; Dany<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/a6b3999f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>May 23, 2016 at 09:00:00pm</p></header><div class="content"><p>Right... per &quot;[swift-evolution] [Idea] Find alternatives to `switch self`&quot;<br> it was only &quot;impossible&quot; in my head.<br></p><p>Thanks Dany<br></p><p>This proposal is unnecessary.<br></p><p>On Mon, May 23, 2016 at 8:53 PM, charles at charlesism.com &lt;<br>charlesism.com at gmail.com&gt; wrote:<br></p><p>&gt; I&#39;m not actually familiar with the term &quot;tri op&quot; but if you&#39;re referring<br>&gt; to the ternary, it&#39;s only useful when you two, or three items.<br>&gt;<br>&gt; If you chain a ternary to use more than three options it becomes<br>&gt; error-prone and almost impossible for a human to read<br>&gt;<br>&gt; When I&#39;m at my desktop I&#39;ll add a couple better examples of what I&#39;m<br>&gt; proposing.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On May 23, 2016, at 6:18 PM, Dany St-Amant &lt;dsa.mls at icloud.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Why reinvent the wheel, when the old trusty (but a bit cryptic according<br>&gt; to some) tri-op can do the trick…<br>&gt;<br>&gt; Le 23 mai 2016 à 04:29, Charles Constant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Here&#39;s a few examples of what this change would allow.<br>&gt;<br>&gt; I just plucked the first instances of other people&#39;s switch statements<br>&gt; that I found on GitHub.<br>&gt;<br>&gt; If there were an easy way to search GitHub for chained ternary<br>&gt; expressions, I would have added some examples of those too, since they<br>&gt; could all be improved with this where clause + ??.<br>&gt;<br>&gt;<br>&gt; mutating func toggle() {<br>&gt; switch self{<br>&gt; case Off:<br>&gt; self = On<br>&gt; case On:<br>&gt; self = Off<br>&gt; }<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; mutating func toggle() {<br>&gt; self = .On where (self == .Off) ?? .Off<br>&gt; }<br>&gt;<br>&gt;<br>&gt; mutating func toggle() { self = self == .Off ? .On : .Off }<br>&gt;<br>&gt;<br>&gt; switch switchNumberThree {<br>&gt; case 10, 11, 12:<br>&gt; println(&quot;It is \(switchNumberThree)&quot;)<br>&gt; default:<br>&gt; (&quot;It is none of them!&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; println(<br>&gt; &quot;It is \(switchNumberThree)&quot; where 10...12 ~= switchNumberThree<br>&gt; ?? &quot;It is none of them!&quot;<br>&gt; )<br>&gt;<br>&gt;<br>&gt; print( 10...12 ~= switchNumberThree ? &quot;It is \(switchNumberThree)&quot;<br>&gt;        : &quot;It&#39;s none of them&quot; )<br>&gt;<br>&gt;<br>&gt; switch x {<br>&gt; case 1:<br>&gt; j++<br>&gt; case 2:<br>&gt; j++<br>&gt; case 3:<br>&gt; j++<br>&gt; case 4:<br>&gt; j++<br>&gt; fallthrough<br>&gt; case 5:<br>&gt; j++<br>&gt; fallthrough<br>&gt; default:<br>&gt; j++<br>&gt; }<br>&gt;<br>&gt;<br>&gt; j = j+1 where (4...5 ~= x) ?? j+2<br>&gt;<br>&gt;<br>&gt; Broken conversion:<br>&gt; j += 4...5 ~= x ? 1 : 2<br>&gt;<br>&gt; Proper conversion:<br>&gt; j += 4 ~= x ? 3 : 5 ~= x ? 2 : 1<br>&gt;<br>&gt; Earlier e-mail example:<br>&gt;<br>&gt; *    let foo = *<br>&gt; *        &quot;positive&quot; where ( bar &gt; 0 )  ?? *<br>&gt; *        &quot;negative&quot; where ( bar &lt; 0 ) ?? *<br>&gt; *        &quot;zero&quot;*<br>&gt;<br>&gt;<br>&gt; let foo = bar &gt; 0 ? &quot;positive&quot; :<br>&gt;           bar &lt; 0 ? &quot;negative&quot; :<br>&gt;           &quot;zero&quot;<br>&gt;<br>&gt; Dany<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/f59faf4a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 23, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Earlier e-mail example:<br>&gt;&gt;     let foo = <br>&gt;&gt;         &quot;positive&quot; where ( bar &gt; 0 )  ?? <br>&gt;&gt;         &quot;negative&quot; where ( bar &lt; 0 ) ?? <br>&gt;&gt;         &quot;zero&quot;<br>&gt; <br>&gt; let foo = bar &gt; 0 ? &quot;positive&quot; :<br>&gt;           bar &lt; 0 ? &quot;negative&quot; :<br>&gt;           &quot;zero&quot;<br></p><p>See, this just makes me want to remix ternary...<br></p><p>	let foo = 	(bar &gt; 0) :: &quot;positive&quot; ??<br>			(bar &lt; 0) :: &quot;negative&quot; ??<br>			&quot;zero&quot;<br></p><p>	// :: is not actually legal to declare, but notionally...<br>	infix operator :: {<br>		associativity left<br>		precedence 133<br>	}<br>	func :: &lt;B: BooleanType, T&gt;(lhs: B, rhs: @autoclosure () -&gt; T?) -&gt; T? {<br>		guard lhs else {<br>			return nil<br>		}<br>		return rhs()<br>	}<br></p><p>`::` is an operator which evaluates the condition on the left and returns the right if true, or nil otherwise. You can chain `::`s together with the existing `??` operator. You can terminate the sequence with a trailing `?? value` to ensure you won&#39;t get a nil. Or you can leave off the trailing `??`, or even omit the chain of `??`s altogether if `::` by itself does what your code needs.<br></p><p>Actually, the main problem I see here is that `??`&#39;s, and therefore `::`&#39;s, precedence is too tight—it binds more tightly than the comparison operators. One solution might be to put `::` and `??` at their current high precedence, but also have `:` and `?` with the same semantics at a precedence level just above assignment...<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>May 24, 2016 at 01:00:00am</p></header><div class="content"><p>It did occur to me to use &quot;::&quot; but it seemed a bit cruel to have the<br>equivalent of  &quot;? :&quot; be reversed. Ie: by using &quot;:: ??&quot; If the team had<br>chosen :: to be the Nil Coalescing Operator, rather than ?? it would be<br>more tempting.<br></p><p>I had some problems messing around with these symbols. I think it was that<br>&quot;??&quot; is 131 and something else (maybe &quot;==&quot;) was 130. Also the compiler can<br>be grumpy about long chains of things. I assume that will get better. Maybe<br>it has already gotten better, I&#39;m still not on the latest version.<br></p><p>Anyhow, I think I&#39;m fine just using the existing ternary... now that Dany<br>has made me realize I&#39;ve been avoiding, any inefficiently mentally parsing,<br>long ternary chains for no good reason for the past decade. I&#39;m fine, aside<br>from feeling disoriented!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/fcf4becd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
