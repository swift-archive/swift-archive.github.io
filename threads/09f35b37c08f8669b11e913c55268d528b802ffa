<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  8, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Why would breaking from a loop intuitively use a place analogy and continuing to the next iteration use a time analogy? This is totally made up; hence, it is not intuitive. I make no argument about whether or not it would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar’.<br></p><p>I think it’s quite intuitive, just like how a standard while loop is intuitive. “Execute this loop while this condition holds, for every case where that condition holds.” That’s how I would phrase such an expression in normal English. Doesn’t that make it intuitive? I can’t really switch the meanings of “while” and “where” and still have that sentence make sense.<br></p><p>&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br></p><p>You could argue that this proposal encourages writing a lot on a single line, but I could argue that not implementing this proposal would encourage people to write stuff like<br></p><p>for number in fibonacci.lazy.filter({ number % 2 == 0 }).prefix(where: { $0 &lt; 4_000_000 }) { }<br></p><p>I would choose `for number in fibonacci where number % 2 == 0 while number &lt; 4_000_000 { }` over the statement above any day. You can break up either into multiple lines for better readability, or you can move the conditions inside the loop, but that’s true no matter if this proposal will be accepted or rejected.<br></p><p>&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk&lt;swift-evolution at haravikk.me(mailto:swift-evolution at haravikk.me)&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; 1) It is spelled out exactly what happens when a condition is met. I no longer have to remember whether the word that describes breaking from a loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; (You cannot convince me that these words are intuitive when the meaning of &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to propose that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d agree with you that they&#39;re intuitive names, but then they&#39;d also be really ugly.)<br>&gt; &gt; I’m not sure I agree that this is confusing,<br>&gt; Why would breaking from a loop intuitively use a place analogy and continuing to the next iteration use a time analogy? This is totally made up; hence, it is not intuitive. I make no argument about whether or not it would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar&#39;.<br>&gt; <br>&gt; &gt; a little extra to learn for new programmers perhaps but I think it’s fairly intuitive:<br>&gt; &gt; <br>&gt; &gt; while let value = foo.next() where someCondition(value) { … }<br>&gt; &gt; <br>&gt; &gt; This reads to me as “repeat the following block until this fails to be true”, the conditional binding in this case fails to be true if someCondition(value) isn’t true, so the loop ends. I think the key thing here is that the where clause is for the conditional binding and not the loop itself, so in this respect it behaves exactly like an if or guard statement. Meanwhile:<br>&gt; &gt; <br>&gt; &gt; for eachValue in theValues where someCondition(eachValue) { … }<br>&gt; &gt; <br>&gt; &gt; Reads as “for everything in theValues do the following if someCondition(eachValue) is also true”, in other words this loop always tries to visit every element of the sequence (a while loop has no implicit awareness of the sequence, it’s really just an if statement that runs over and over). In this case the where clause is part of the loop itself. There may be an argument that where should be renamed on for loops to better distinguish this, but once you consider that there’s no pattern or conditional binding here I think it makes a reasonable amount of sense.<br>&gt; &gt; <br>&gt; &gt; Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line.<br>&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br>&gt; <br>&gt; &gt; Chaining methods can do this, but it’s actually less readable IMO, or requires multiple lines to keep it clear which defeats the point.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; For me, encouraging the use of multiple lines is the point. Tim&#39;s example demonstrated to me very clearly that clarity is not served by additional sugar to reduce the amount of punctuation on one line; it is served only by putting things on multiple lines. As I said above, I would cringe to read a loop that begins `for foo in bar where something while somethingElse where yetAnotherSomething while againAnotherSomething { ... }`.<br>&gt; <br>&gt; &gt; As with where on if/guard statements it’s about keeping the simpler, more common cases as clean and readable as possible. If the re-use of the keyword where on the for loop is confusing then that’s an argument for renaming that, rather than rejecting while or ditching the whole thing IMO. Personally I think it’s okay, you just have to think what the where clause is actually acting upon.<br>&gt; &gt; <br>&gt; &gt; &gt; 3) I have the flexibility to do something between the first if statement and the second if statement, if I want. By placing the break statement at the end of my loop, I could effectively choose to have one more iteration than if I placed it at the beginning of my loop. There is nothing you can do to mimic that choice with your proposed while clause, unless you want to also propose a `for...in...repeat { } while` syntax.<br>&gt; &gt; <br>&gt; &gt; So? Like where clauses this is for the simpler cases, if you want to do something more complex you remain free to use more complex conditionals.<br>&gt; And I was/am a proponent of SE-0099 to remove `where` from if and while loops; and if that succeeds I will definitely solicit comments to remove it from for loops!<br>&gt; <br>&gt; &gt; A lot of the time you don’t need this however, so it makes sense to simplify the common case while leaving the complex one just as useful as it is today. Nothing about this proposal would stop you from using if/guard conditions inside the loop.<br>&gt; &gt; <br>&gt; &gt; &gt; 4) This is the perhaps the important point. A beginning programmer--not any of us, presumably, but we were all beginners once--can accomplish everything that he or she desires without learning this new proposed syntax. Almost all texts, I believe, teach if statements before loops, and teach break and continue in the same breath as the loops themselves.<br>&gt; &gt; In terms of teaching there shouldn’t be a problem with just teaching the basic building blocks first, then showing off simplifications later. As with any coding the most important thing is to get the intended behaviour correct, simplifying or optimising the code can always come later.<br>&gt; &gt; <br>&gt; &gt; You could argue the same thing about the shorthands around closures; I’m not sure why but I had trouble with those initially until after I’d worked with them in the more verbose form (with fully named parameters and a return statement) till I started to get the logic behind it, now I can just right a quick closure with the dollar sign shorthand.<br>&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops. Concepts like closing over a variable are very, very hard. Many useful things can be written without using closures. Not so many things could do without loops. It very much matters that a learner might feel that he or she cannot understand everything about a loop with the handwavy explanation that it&#39;ll &quot;come later&quot;. One critique of using Java as a starting language is that you are forced to teach your students on day one that the real meaning of the words &quot;public static void main(String[] args)&quot; will &quot;come later&quot;.<br>&gt; <br>&gt; &gt; <br>&gt; &gt; A good linter could be written to detect the presence of a simple if/guard right inside the loop and could then suggest the use of where/while as appropriate.<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 1:24 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; &gt; Why would breaking from a loop intuitively use a place analogy and<br>&gt; continuing to the next iteration use a time analogy? This is totally made<br>&gt; up; hence, it is not intuitive. I make no argument about whether or not it<br>&gt; would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and<br>&gt; &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise<br>&gt; argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar’.<br>&gt;<br>&gt; I think it’s quite intuitive, just like how a standard while loop is<br>&gt; intuitive. “Execute this loop while this condition holds, for every case<br>&gt; where that condition holds.” That’s how I would phrase such an expression<br>&gt; in normal English. Doesn’t that make it intuitive? I can’t really switch<br>&gt; the meanings of “while” and “where” and still have that sentence make sense.<br>&gt;<br></p><p>That is not how your proposed construct reads. It actually reads: &quot;for<br>every case where that condition holds while this condition holds.&quot; That is<br>a terrible sentence and not &quot;normal&quot; English.<br></p><p>&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is<br>&gt; absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I<br>&gt; have with this proposal: that it *encourages* writing on one line too many<br>&gt; things that, whether you use `where` or not, are much more clearly written<br>&gt; on multiple lines. If writing everything on one line is for you the major<br>&gt; advantage of this proposal, we could agree on everything else and I would<br>&gt; be very much opposed to this proposal on that basis alone.<br>&gt;<br>&gt; You could argue that this proposal encourages writing a lot on a single<br>&gt; line, but I could argue that not implementing this proposal would encourage<br>&gt; people to write stuff like<br>&gt;<br>&gt; for number in fibonacci.lazy.filter({ number % 2 == 0 }).prefix(where: {<br>&gt; $0 &lt; 4_000_000 }) { }<br>&gt;<br>&gt; I would choose `for number in fibonacci where number % 2 == 0 while number<br>&gt; &lt; 4_000_000 { }` over the statement above any day. You can break up either<br>&gt; into multiple lines for better readability, or you can move the conditions<br>&gt; inside the loop, but that’s true no matter if this proposal will be<br>&gt; accepted or rejected.<br>&gt;<br></p><p>I&#39;m writing in response to Haravikk&#39;s claim that method chaining encourages<br>putting things on multiple lines, while the proposed sugar encourages<br>putting things on one line. *If* you accept this premise, then I would<br>argue that it alone would be sufficient for me to be against the proposal.<br>It sounds like you don&#39;t agree with the premise, which is fine.<br></p><p><br>&gt;<br>&gt; &gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk&lt;swift-evolution at haravikk.me<br>&gt; (mailto:swift-evolution at haravikk.me)&gt;wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; On 8 Jun 2016, at 01:54, Xiaodi Wu via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; 1) It is spelled out exactly what happens when a condition is met. I<br>&gt; no longer have to remember whether the word that describes breaking from a<br>&gt; loop uses a place analogy (&quot;where&quot;) or a time analogy (&quot;while&quot; or &quot;when”).<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; (You cannot convince me that these words are intuitive when the<br>&gt; meaning of &quot;where&quot; changes by context in today&#39;s Swift. Now, if you want to<br>&gt; propose that these be named &quot;breakif&quot; and &quot;continueif&quot; instead, then I&#39;d<br>&gt; agree with you that they&#39;re intuitive names, but then they&#39;d also be really<br>&gt; ugly.)<br>&gt; &gt; &gt; I’m not sure I agree that this is confusing,<br>&gt; &gt; Why would breaking from a loop intuitively use a place analogy and<br>&gt; continuing to the next iteration use a time analogy? This is totally made<br>&gt; up; hence, it is not intuitive. I make no argument about whether or not it<br>&gt; would be conceptually confusing. If you renamed &#39;break&#39; to &#39;foo&#39; and<br>&gt; &#39;continue&#39; to &#39;bar&#39;, it would not be intuitive, but you could likewise<br>&gt; argue that it&#39;s not confusing, in that &#39;foo&#39; is clearly not &#39;bar&#39;.<br>&gt; &gt;<br>&gt; &gt; &gt; a little extra to learn for new programmers perhaps but I think it’s<br>&gt; fairly intuitive:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; while let value = foo.next() where someCondition(value) { … }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; This reads to me as “repeat the following block until this fails to be<br>&gt; true”, the conditional binding in this case fails to be true if<br>&gt; someCondition(value) isn’t true, so the loop ends. I think the key thing<br>&gt; here is that the where clause is for the conditional binding and not the<br>&gt; loop itself, so in this respect it behaves exactly like an if or guard<br>&gt; statement. Meanwhile:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; for eachValue in theValues where someCondition(eachValue) { … }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Reads as “for everything in theValues do the following if<br>&gt; someCondition(eachValue) is also true”, in other words this loop always<br>&gt; tries to visit every element of the sequence (a while loop has no implicit<br>&gt; awareness of the sequence, it’s really just an if statement that runs over<br>&gt; and over). In this case the where clause is part of the loop itself. There<br>&gt; may be an argument that where should be renamed on for loops to better<br>&gt; distinguish this, but once you consider that there’s no pattern or<br>&gt; conditional binding here I think it makes a reasonable amount of sense.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Yes this could be handled by an if/guard statement with continue, and<br>&gt; while as proposed here could be done with the same plus a break, but these<br>&gt; things come up so often that it just makes a lot of sense to get it all<br>&gt; neatly onto one line.<br>&gt; &gt; As I pointed out above with Tim&#39;s example, putting it all on one line is<br>&gt; absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I<br>&gt; have with this proposal: that it *encourages* writing on one line too many<br>&gt; things that, whether you use `where` or not, are much more clearly written<br>&gt; on multiple lines. If writing everything on one line is for you the major<br>&gt; advantage of this proposal, we could agree on everything else and I would<br>&gt; be very much opposed to this proposal on that basis alone.<br>&gt; &gt;<br>&gt; &gt; &gt; Chaining methods can do this, but it’s actually less readable IMO, or<br>&gt; requires multiple lines to keep it clear which defeats the point.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; For me, encouraging the use of multiple lines is the point. Tim&#39;s<br>&gt; example demonstrated to me very clearly that clarity is not served by<br>&gt; additional sugar to reduce the amount of punctuation on one line; it is<br>&gt; served only by putting things on multiple lines. As I said above, I would<br>&gt; cringe to read a loop that begins `for foo in bar where something while<br>&gt; somethingElse where yetAnotherSomething while againAnotherSomething { ...<br>&gt; }`.<br>&gt; &gt;<br>&gt; &gt; &gt; As with where on if/guard statements it’s about keeping the simpler,<br>&gt; more common cases as clean and readable as possible. If the re-use of the<br>&gt; keyword where on the for loop is confusing then that’s an argument for<br>&gt; renaming that, rather than rejecting while or ditching the whole thing IMO.<br>&gt; Personally I think it’s okay, you just have to think what the where clause<br>&gt; is actually acting upon.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; 3) I have the flexibility to do something between the first if<br>&gt; statement and the second if statement, if I want. By placing the break<br>&gt; statement at the end of my loop, I could effectively choose to have one<br>&gt; more iteration than if I placed it at the beginning of my loop. There is<br>&gt; nothing you can do to mimic that choice with your proposed while clause,<br>&gt; unless you want to also propose a `for...in...repeat { } while` syntax.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; So? Like where clauses this is for the simpler cases, if you want to<br>&gt; do something more complex you remain free to use more complex conditionals.<br>&gt; &gt; And I was/am a proponent of SE-0099 to remove `where` from if and while<br>&gt; loops; and if that succeeds I will definitely solicit comments to remove it<br>&gt; from for loops!<br>&gt; &gt;<br>&gt; &gt; &gt; A lot of the time you don’t need this however, so it makes sense to<br>&gt; simplify the common case while leaving the complex one just as useful as it<br>&gt; is today. Nothing about this proposal would stop you from using if/guard<br>&gt; conditions inside the loop.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; 4) This is the perhaps the important point. A beginning<br>&gt; programmer--not any of us, presumably, but we were all beginners once--can<br>&gt; accomplish everything that he or she desires without learning this new<br>&gt; proposed syntax. Almost all texts, I believe, teach if statements before<br>&gt; loops, and teach break and continue in the same breath as the loops<br>&gt; themselves.<br>&gt; &gt; &gt; In terms of teaching there shouldn’t be a problem with just teaching<br>&gt; the basic building blocks first, then showing off simplifications later. As<br>&gt; with any coding the most important thing is to get the intended behaviour<br>&gt; correct, simplifying or optimising the code can always come later.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; You could argue the same thing about the shorthands around closures;<br>&gt; I’m not sure why but I had trouble with those initially until after I’d<br>&gt; worked with them in the more verbose form (with fully named parameters and<br>&gt; a return statement) till I started to get the logic behind it, now I can<br>&gt; just right a quick closure with the dollar sign shorthand.<br>&gt; &gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than<br>&gt; loops. Concepts like closing over a variable are very, very hard. Many<br>&gt; useful things can be written without using closures. Not so many things<br>&gt; could do without loops. It very much matters that a learner might feel that<br>&gt; he or she cannot understand everything about a loop with the handwavy<br>&gt; explanation that it&#39;ll &quot;come later&quot;. One critique of using Java as a<br>&gt; starting language is that you are forced to teach your students on day one<br>&gt; that the real meaning of the words &quot;public static void main(String[] args)&quot;<br>&gt; will &quot;come later&quot;.<br>&gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; A good linter could be written to detect the presence of a simple<br>&gt; if/guard right inside the loop and could then suggest the use of<br>&gt; where/while as appropriate.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/08ddc436/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
