<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/381a7a0ebe082ed36e88ce748d459f63?s=50"></div><header><strong>Why does Array subscript fail at runtime?</strong> from <string>H. Kofi Gumbs</string> &lt;h.kofigumbs at gmail.com&gt;<p>July 21, 2016 at 04:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>Here&#39;s a philosophy I&#39;ve struggled with since I started learning Swift. In<br>general, it seems that failable function calls return `Optional`s; however,<br>`Array`s violate this rule by failing fast at runtime. I understand that<br>subscripts can&#39;t throw, so the only way to fail fast is to do so at<br>runtime. I also realize that there are many implementations of the<br>`array[safe: index]` that I could choose to use instead. However, I do not<br>understand why the default behavior is still to fail at runtime. Especially<br>given how they are often introduced as a beginner-friendly data structure.<br>Am I missing some language philosophy or major decision?<br></p><p>Thanks<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/2e619de1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>Why does Array subscript fail at runtime?</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>July 20, 2016 at 09:00:00pm</p></header><div class="content"><p>If I’m not mistaken, the main reason for Swift arrays being unsafe in this way is for performance. Checking each subscript would be expensive in a large loop; it’s much more performant to loop from the array’s start index to its end index.<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Jul 20, 2016, at 9:07 PM, H. Kofi Gumbs via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; Here&#39;s a philosophy I&#39;ve struggled with since I started learning Swift. In general, it seems that failable function calls return `Optional`s; however, `Array`s violate this rule by failing fast at runtime. I understand that subscripts can&#39;t throw, so the only way to fail fast is to do so at runtime. I also realize that there are many implementations of the `array[safe: index]` that I could choose to use instead. However, I do not understand why the default behavior is still to fail at runtime. Especially given how they are often introduced as a beginner-friendly data structure. Am I missing some language philosophy or major decision?<br>&gt; <br>&gt; Thanks<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160720/bb9abe79/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Why does Array subscript fail at runtime?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 21, 2016 at 12:00:00pm</p></header><div class="content"><p>For Array, it is easy to know its boundary. And it is an error when<br>accessing indices out of the boundary. Returning a nil makes your app hard<br>to trace bugs.<br></p><p>Array&#39;s subscript function returns Element instead of Element?. It is<br>common and aligns with the other languages. You question seems odd to me.<br></p><p>Zhaoxin<br></p><p>On Thu, Jul 21, 2016 at 12:07 PM, H. Kofi Gumbs via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; Here&#39;s a philosophy I&#39;ve struggled with since I started learning Swift.<br>&gt; In general, it seems that failable function calls return `Optional`s;<br>&gt; however, `Array`s violate this rule by failing fast at runtime. I<br>&gt; understand that subscripts can&#39;t throw, so the only way to fail fast is to<br>&gt; do so at runtime. I also realize that there are many implementations of the<br>&gt; `array[safe: index]` that I could choose to use instead. However, I do not<br>&gt; understand why the default behavior is still to fail at runtime. Especially<br>&gt; given how they are often introduced as a beginner-friendly data structure.<br>&gt; Am I missing some language philosophy or major decision?<br>&gt;<br>&gt; Thanks<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/a8ec6e88/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Why does Array subscript fail at runtime?</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 20, 2016 at 10:00:00pm</p></header><div class="content"><p>Making Array&lt;T&gt; subscript access return T? or T! instead of T. The current array behavior is intentional &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/11277&gt;: it accurately reflects the fact that out-of-bounds array access is a logic error, and changing the current behavior would slow Arrayaccesses to an unacceptable degree. This topic has come up multiple &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/3651&gt; times &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19793&gt; before &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/21420&gt;, but is very unlikely to be accepted.<br></p><p>https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br></p><p><br>&gt; On Jul 20, 2016, at 9:07 PM, H. Kofi Gumbs via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; Here&#39;s a philosophy I&#39;ve struggled with since I started learning Swift. In general, it seems that failable function calls return `Optional`s; however, `Array`s violate this rule by failing fast at runtime. I understand that subscripts can&#39;t throw, so the only way to fail fast is to do so at runtime. I also realize that there are many implementations of the `array[safe: index]` that I could choose to use instead. However, I do not understand why the default behavior is still to fail at runtime. Especially given how they are often introduced as a beginner-friendly data structure. Am I missing some language philosophy or major decision?<br>&gt; <br>&gt; Thanks<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160720/ee09fd17/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/381a7a0ebe082ed36e88ce748d459f63?s=50"></div><header><strong>Why does Array subscript fail at runtime?</strong> from <string>H. Kofi Gumbs</string> &lt;h.kofigumbs at gmail.com&gt;<p>July 21, 2016 at 01:00:00pm</p></header><div class="content"><p>Thanks to everyone who responded! Particularly Jose who provided links to<br>the Swift evolution discussion, one of which is still open, though deferred<br>from Swift 3. I&#39;m adding some thoughts to individual contents below, but my<br>original question was answered.<br></p><p>Jeff, that makes sense after looking more closely at the source. I had<br>incorrectly assumed that the fatal error was happening in Swift code, but I<br>believe it is in the C++.<br></p><p>Brent, I&#39;ve seen examples like that before, and I think I just might be<br>unable to see the forest for the trees. `map` seems like the clearly better<br>choice for the first two transformations. I haven&#39;t done any Cocoa<br>development, however, so I have no opinion to share there. In general,<br>though it does seem like `enumerated` should be adequate when people want<br>to have guaranteed values.<br></p><p>Zhou, allowing clients to handle bad accesses would certainly not cause<br>bugs. In the worst case, developers would litter ! around their array<br>accesses, and the same crashes that existed before will continue. The fact<br>that something similar happens in other languages is similarly<br>unconvincing. There are languages where this is not the case (Elm).<br></p><p>On Wed, Jul 20, 2016 at 10:07 PM H. Kofi Gumbs &lt;h.kofigumbs at gmail.com&gt;<br>wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; Here&#39;s a philosophy I&#39;ve struggled with since I started learning Swift.<br>&gt; In general, it seems that failable function calls return `Optional`s;<br>&gt; however, `Array`s violate this rule by failing fast at runtime. I<br>&gt; understand that subscripts can&#39;t throw, so the only way to fail fast is to<br>&gt; do so at runtime. I also realize that there are many implementations of the<br>&gt; `array[safe: index]` that I could choose to use instead. However, I do not<br>&gt; understand why the default behavior is still to fail at runtime. Especially<br>&gt; given how they are often introduced as a beginner-friendly data structure.<br>&gt; Am I missing some language philosophy or major decision?<br>&gt;<br>&gt; Thanks<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/4f11d24d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
