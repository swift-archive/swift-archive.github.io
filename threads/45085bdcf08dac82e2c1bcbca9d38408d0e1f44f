<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello all,<br></p><p>Swift 3.0 focuses on making breaking changes that prepare the way for<br>features to be introduced in future releases. In that spirit, I would like<br>to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to<br>&#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br></p><p>The proposal can be found here:<br>https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md<br></p><p>Best,<br>Austin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/4508f44f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 18, 2016 at 11:00:00pm</p></header><div class="content"><p>I’m a fan (mostly because I think it helps existential types, which have blocked quite a few library projects of mine), but I do have a few questions about the impact of the proposal<br></p><p>- I assume ‘Any&#39; is still valid?<br>- In that case, would &#39;Any&lt;&gt;&#39; be equivalent to ‘Any’, or a warning/error?<br>- What about &#39;Any&lt;Any&gt;&#39; and such combinations?<br>- Does Any eventually become a keyword to deal with these sorts of special cases, the unbounded generic parameters, as well as future existential type uses (such as including a ‘where’ clause)?<br></p><p>-DW<br></p><p>&gt; On May 18, 2016, at 11:35 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello all,<br>&gt; <br>&gt; Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt; <br>&gt; The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md&gt;<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/71e5dcab/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt; <br>&gt; The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md<br></p><p>One small thing:<br></p><p>&gt; Any&lt;&gt; should be typealiased to Any.<br></p><p><br>I&#39;m not sure if it&#39;s better to specify that this should be a typealias, or simply that `Any` without angle brackets is equivalent to `Any&lt;&gt;`. I worry a little about whether Swift might have trouble parsing `Any&lt;Foo&gt;` if there&#39;s an `Any` typealias lying around.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>I think this is a good idea - the implementation of Any ( = Any&lt;&gt;) should not be specified to be a typealias. (And this would resolve the idea Colin brought up.)<br></p><p>To David&#39;s points (to avoid clogging up the list):<br></p><p>- &#39;Any&#39; is still valid, and has the same meaning as it did before.<br>- &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br>- &#39;Any&lt;Any&gt;&#39; behaves exactly the same as &#39;protocol&lt;Any&gt;&#39; today, which is just &#39;Any&#39;.<br>- There are at least two proposals floating around the list that expand how &#39;Any&lt;&gt;&#39; can be used. &#39;protocol&lt;&gt;&#39; is sort of a weird Swift construct with no good equivalents elsewhere in the language, and I don&#39;t know if it would be strictly correct to call &#39;protocol&#39; a keyword in this case.<br></p><p>Austin<br></p><p>&gt; On May 18, 2016, at 10:52 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt;&gt; <br>&gt;&gt; The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md<br>&gt; <br>&gt; One small thing:<br>&gt; <br>&gt;&gt; Any&lt;&gt; should be typealiased to Any.<br>&gt; <br>&gt; <br>&gt; I&#39;m not sure if it&#39;s better to specify that this should be a typealias, or simply that `Any` without angle brackets is equivalent to `Any&lt;&gt;`. I worry a little about whether Swift might have trouble parsing `Any&lt;Foo&gt;` if there&#39;s an `Any` typealias lying around.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>May 19, 2016 at 02:00:00am</p></header><div class="content"><p>There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in  type and normal application of generic arguments (to a built in type).<br></p><p>-Colin (via thumbs)<br></p><p>&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 18, 2016 at 11:00:00pm</p></header><div class="content"><p>Does anyone want to speak up in favor of &#39;Any&lt;&gt;&#39;? The more I think about it the more I think &#39;Any&#39; should just be the single, canonical form.<br></p><p>Austin<br></p><p><br>&gt; On May 18, 2016, at 11:33 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt; <br>&gt; There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in  type and normal application of generic arguments (to a built in type).<br>&gt; <br>&gt; -Colin (via thumbs)<br>&gt; <br>&gt;&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 19, 2016 at 12:00:00am</p></header><div class="content"><p>My feedback is that we should narrow what is acceptable for Any as much as possible, because relaxing restrictions in the future won’t break existing code.<br></p><p>To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br></p><p>-DW<br> <br>&gt; On May 19, 2016, at 12:43 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Does anyone want to speak up in favor of &#39;Any&lt;&gt;&#39;? The more I think about it the more I think &#39;Any&#39; should just be the single, canonical form.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt; <br>&gt;&gt; On May 18, 2016, at 11:33 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in  type and normal application of generic arguments (to a built in type).<br>&gt;&gt; <br>&gt;&gt; -Colin (via thumbs)<br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 19, 2016 at 09:00:00am</p></header><div class="content"><p>Austin do we really need this 3rd proposal? This makes my original one really a waste of time. I was trying to solve https://openradar.appspot.com/20990743 with the original `Any&lt;&gt;` proposal when Swift 3 ships. Your other proposal would enhance it without introducing breaking changes.<br></p><p>To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>Why would these cause warnings?<br></p><p>func foo(any: protocol&lt;&gt;)<br></p><p>func foo(any: protocol&lt;Any&gt;)<br></p><p>func foo(any: protocol&lt;Any, ProtocolA&gt;)<br></p><p>func foo(any: protocol&lt;ProtocolA&gt;)<br></p><p>Everything is already fine today.<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 19. Mai 2016 bei 08:55:54, David Waite via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>My feedback is that we should narrow what is acceptable for Any as much as possible, because relaxing restrictions in the future won’t break existing code.<br></p><p>To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br></p><p>-DW<br></p><p>&gt; On May 19, 2016, at 12:43 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;  <br>&gt; Does anyone want to speak up in favor of &#39;Any&lt;&gt;&#39;? The more I think about it the more I think &#39;Any&#39; should just be the single, canonical form.<br>&gt;  <br>&gt; Austin<br>&gt;  <br>&gt;  <br>&gt;&gt; On May 18, 2016, at 11:33 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt; There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in type and normal application of generic arguments (to a built in type).<br>&gt;&gt;  <br>&gt;&gt; -Colin (via thumbs)<br>&gt;&gt;  <br>&gt;&gt;&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br>&gt;  <br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/d7585b0a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 19, 2016 at 12:00:00am</p></header><div class="content"><p>I&#39;ve come to the conclusion that the best course of action is to propose this syntax-only change for Swift 3, and then advance the generalized existential proposal after Swift 3 ships. You can ask the reviewers to consider your proposal instead of this one, but given that the Swift 3 release date is in a month I don&#39;t think it&#39;s likely that anything more substantial than this will be accepted. You are welcome to try, of course.<br></p><p>(response inline, below)<br></p><p>&gt; On May 19, 2016, at 12:11 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Austin do we really need this 3rd proposal? This makes my original one really a waste of time. I was trying to solve https://openradar.appspot.com/20990743 &lt;https://openradar.appspot.com/20990743&gt; with the original `Any&lt;&gt;` proposal when Swift 3 ships. Your other proposal would enhance it without introducing breaking changes.<br>&gt; <br>&gt;&gt; To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>&gt; <br>&gt; Why would these cause warnings?<br>&gt; <br>&gt; func foo(any: protocol&lt;&gt;)<br>&gt; <br>&gt; func foo(any: protocol&lt;Any&gt;)<br>&gt; <br>&gt; func foo(any: protocol&lt;Any, ProtocolA&gt;)<br>&gt; <br>&gt; func foo(any: protocol&lt;ProtocolA&gt;)<br>&gt; <br>&gt; Everything is already fine today.<br>&gt; <br>&gt; <br></p><p>I agree, adding new warnings is out of the scope of this proposal.<br></p><p>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 19. Mai 2016 bei 08:55:54, David Waite via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt; My feedback is that we should narrow what is acceptable for Any as much as possible, because relaxing restrictions in the future won’t break existing code.<br>&gt;&gt; <br>&gt;&gt; To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt; &gt; On May 19, 2016, at 12:43 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Does anyone want to speak up in favor of &#39;Any&lt;&gt;&#39;? The more I think about it the more I think &#39;Any&#39; should just be the single, canonical form.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Austin<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; On May 18, 2016, at 11:33 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in type and normal application of generic arguments (to a built in type).<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; -Colin (via thumbs)<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt;&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br>&gt;&gt; &gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/db1fb701/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 19, 2016 at 09:00:00am</p></header><div class="content"><p>Is it really in a month? Who said that? Chris told everyone that until August we can still talk about changes for Swift 3. The evolution repository says Swift 3 will drop late this year not mid. But it’s the core team to decide which proposals they would prefer. This one would be way easier to complete until Swift 3, but it also implies that my and your proposal should be accepted/deffered for Swift 3.x. Otherwise this would be strange just to rename protocol&lt;&gt; to Any&lt;&gt; and not to accept the enhancement of it. :D<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 19. Mai 2016 bei 09:18:43, Austin Zheng (austinzheng at gmail.com) schrieb:<br></p><p>I&#39;ve come to the conclusion that the best course of action is to propose this syntax-only change for Swift 3, and then advance the generalized existential proposal after Swift 3 ships. You can ask the reviewers to consider your proposal instead of this one, but given that the Swift 3 release date is in a month I don&#39;t think it&#39;s likely that anything more substantial than this will be accepted. You are welcome to try, of course.<br></p><p>(response inline, below)<br></p><p>On May 19, 2016, at 12:11 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Austin do we really need this 3rd proposal? This makes my original one really a waste of time. I was trying to solve https://openradar.appspot.com/20990743 with the original `Any&lt;&gt;` proposal when Swift 3 ships. Your other proposal would enhance it without introducing breaking changes.<br></p><p>To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>Why would these cause warnings?<br></p><p>func foo(any: protocol&lt;&gt;)<br></p><p>func foo(any: protocol&lt;Any&gt;)<br></p><p>func foo(any: protocol&lt;Any, ProtocolA&gt;)<br></p><p>func foo(any: protocol&lt;ProtocolA&gt;)<br></p><p>Everything is already fine today.<br></p><p><br></p><p>I agree, adding new warnings is out of the scope of this proposal.<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 19. Mai 2016 bei 08:55:54, David Waite via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>My feedback is that we should narrow what is acceptable for Any as much as possible, because relaxing restrictions in the future won’t break existing code.<br></p><p>To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br></p><p>-DW<br></p><p>&gt; On May 19, 2016, at 12:43 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Does anyone want to speak up in favor of &#39;Any&lt;&gt;&#39;? The more I think about it the more I think &#39;Any&#39; should just be the single, canonical form.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt; <br>&gt;&gt; On May 18, 2016, at 11:33 PM, Colin Barrett &lt;colin at springsandstruts.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in type and normal application of generic arguments (to a built in type).<br>&gt;&gt; <br>&gt;&gt; -Colin (via thumbs)<br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br>&gt; <br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/ce92d857/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 19, 2016 at 12:00:00am</p></header><div class="content"><p>Sorry, you&#39;re right about the timeframe. The timeframe I was looking at was for the DP release, not the final release.<br></p><p>What I was thinking of was Joe Groff&#39;s comment in the other thread:<br></p><p>&quot;I think any discussion of extending existentials has to be considered out of scope for Swift 3, though, so the Any rename deserves its own proposal.&quot;<br></p><p>This proposal is in light of that comment.<br></p><p>Austin<br></p><p>&gt; On May 19, 2016, at 12:26 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Is it really in a month? Who said that? Chris told everyone that until August we can still talk about changes for Swift 3. The evolution repository says Swift 3 will drop late this year not mid. But it’s the core team to decide which proposals they would prefer. This one would be way easier to complete until Swift 3, but it also implies that my and your proposal should be accepted/deffered for Swift 3.x. Otherwise this would be strange just to rename protocol&lt;&gt; to Any&lt;&gt; and not to accept the enhancement of it. :D<br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 19. Mai 2016 bei 09:18:43, Austin Zheng (austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;) schrieb:<br>&gt; <br>&gt;&gt; I&#39;ve come to the conclusion that the best course of action is to propose this syntax-only change for Swift 3, and then advance the generalized existential proposal after Swift 3 ships. You can ask the reviewers to consider your proposal instead of this one, but given that the Swift 3 release date is in a month I don&#39;t think it&#39;s likely that anything more substantial than this will be accepted. You are welcome to try, of course.<br>&gt;&gt; <br>&gt;&gt; (response inline, below)<br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 12:11 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Austin do we really need this 3rd proposal? This makes my original one really a waste of time. I was trying to solve https://openradar.appspot.com/20990743 &lt;https://openradar.appspot.com/20990743&gt; with the original `Any&lt;&gt;` proposal when Swift 3 ships. Your other proposal would enhance it without introducing breaking changes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why would these cause warnings?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(any: protocol&lt;&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(any: protocol&lt;Any&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(any: protocol&lt;Any, ProtocolA&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(any: protocol&lt;ProtocolA&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Everything is already fine today.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I agree, adding new warnings is out of the scope of this proposal.<br>&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 19. Mai 2016 bei 08:55:54, David Waite via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My feedback is that we should narrow what is acceptable for Any as much as possible, because relaxing restrictions in the future won’t break existing code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -DW<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On May 19, 2016, at 12:43 AM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; Does anyone want to speak up in favor of &#39;Any&lt;&gt;&#39;? The more I think about it the more I think &#39;Any&#39; should just be the single, canonical form.<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; Austin<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt;&gt; On May 18, 2016, at 11:33 PM, Colin Barrett &lt;colin at springsandstruts.com &lt;mailto:colin at springsandstruts.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;&gt; There&#39;s no need for this, that&#39;s what I was trying to get across. It&#39;s (likely) a special case in the grammar right now. If we eliminate Any&lt;&gt;, from the point of view of syntax, both Any and Any&lt;Foo, Bar&gt; are just a built in type and normal application of generic arguments (to a built in type).<br>&gt;&gt;&gt;&gt; &gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;&gt; -Colin (via thumbs)<br>&gt;&gt;&gt;&gt; &gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; On May 19, 2016, at 1:58 AM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; - &#39;Any&lt;&gt;&#39; should be allowed. You can currently use &#39;protocol&lt;&gt;&#39; in your code instead of &#39;Any&#39;.<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/27eee7bc/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 19, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On May 19, 2016, at 1:11 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Austin do we really need this 3rd proposal? This makes my original one really a waste of time. I was trying to solve https://openradar.appspot.com/20990743 &lt;https://openradar.appspot.com/20990743&gt; with the original `Any&lt;&gt;` proposal when Swift 3 ships. Your other proposal would enhance it without introducing breaking changes.<br>&gt; <br>&gt;&gt; To that end, I’d suggest Any&lt;&gt;,Any&lt;Any, XX&gt;, and Any&lt;Any&lt;XX&gt;&gt; all cause warnings.<br>&gt; <br>&gt; Why would these cause warnings?<br>&gt; <br>&gt; func foo(any: protocol&lt;&gt;)<br>&gt; <br>&gt; func foo(any: protocol&lt;Any&gt;)<br>&gt; <br>&gt; func foo(any: protocol&lt;Any, ProtocolA&gt;)<br>&gt; <br>&gt; func foo(any: protocol&lt;ProtocolA&gt;)<br>&gt; <br>&gt; Everything is already fine today.<br>&gt; <br>&gt; <br>I assume you meant to use Any and not protocol above.<br></p><p>They can all be interpreted, but:<br>- they provide multiple ways of expressing the same concept<br>- the additional uses of Any detract from code clarity<br>- it is possible (in the absence of an established design) that these syntaxes (particularly Any&lt;Any&lt;ProtocolA&gt;&gt;) might limit our ability to add existential types without either breaking existing code or adding special cases in the parser. I can go into more detail on my reasoning here, but that seems a diversion of this topic to do so.<br></p><p>An example elsewhere in the language of otherwise valid code being rejected because the syntax is redundant:<br></p><p>enum MyError:ErrorType, ErrorType {}<br></p><p>I’m also specifically saying that the *syntax* should warn on the use of Any-within-Any. Code such as:<br></p><p>typealias Foo = Any<br>typealias Bar = Any&lt;Foo, Sequence&gt;<br></p><p>would be fine.<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/3fb406bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 19, 2016 at 12:00:00am</p></header><div class="content"><p>Forbidding redundant use of protocol&lt;...&gt;/Any&lt;...&gt; would be a great follow-up proposal. Mercifully, there are few interdependencies between the two proposals - you could conceivably propose it even if if Any&lt;...&gt; were rejected, and just have it apply to protocol&lt;...&gt;.<br></p><p>Austin<br></p><p>&gt; On May 19, 2016, at 12:50 AM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; They can all be interpreted, but:<br>&gt; - they provide multiple ways of expressing the same concept<br>&gt; - the additional uses of Any detract from code clarity<br>&gt; - it is possible (in the absence of an established design) that these syntaxes (particularly Any&lt;Any&lt;ProtocolA&gt;&gt;) might limit our ability to add existential types without either breaking existing code or adding special cases in the parser. I can go into more detail on my reasoning here, but that seems a diversion of this topic to do so.<br>&gt; <br>&gt; An example elsewhere in the language of otherwise valid code being rejected because the syntax is redundant:<br>&gt; <br>&gt; enum MyError:ErrorType, ErrorType {}<br>&gt; <br>&gt; I’m also specifically saying that the *syntax* should warn on the use of Any-within-Any. Code such as:<br>&gt; <br>&gt; typealias Foo = Any<br>&gt; typealias Bar = Any&lt;Foo, Sequence&gt;<br>&gt; <br>&gt; would be fine.<br>&gt; <br>&gt; -DW<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 19, 2016 at 09:00:00am</p></header><div class="content"><p>I assume you meant to use Any and not protocol above.<br>No, I was wondering why Any&lt;Any, A&gt;&gt; would create a warning whereas protocol&lt;Any, A&gt; does not today.<br></p><p>They can all be interpreted, but:<br>- they provide multiple ways of expressing the same concept<br>- the additional uses of Any detract from code clarity<br>- it is possible (in the absence of an established design) that these syntaxes (particularly Any&lt;Any&lt;ProtocolA&gt;&gt;) might limit our ability to add existential types without either breaking existing code or adding special cases in the parser. I can go into more detail on my reasoning here, but that seems a diversion of this topic to do so.<br></p><p>An example elsewhere in the language of otherwise valid code being rejected because the syntax is redundant:<br></p><p>enum MyError:ErrorType, ErrorType {}<br></p><p>I’m also specifically saying that the *syntax* should warn on the use of Any-within-Any. Code such as:<br></p><p>typealias Foo = Any<br>typealias Bar = Any&lt;Foo, Sequence&gt;<br></p><p>would be fine.<br></p><p>-DW<br></p><p>And there I have my explanation to this. :)<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/22da64e8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 20, 2016 at 07:00:00pm</p></header><div class="content"><p>(Trying to move the conversation back to this thread to un-hijack Adrian&#39;s thread.)<br></p><p>In terms of Any&lt;&gt; vs any&lt;&gt;, I don&#39;t have any strong feelings and I think there are good arguments on both sides. I&#39;m going to leave the proposal as Any&lt;&gt; but put a section in the &#39;Alternatives&#39; discussing Any&lt;&gt; vs any&lt;&gt;, so that if it does go up for review the core team can review arguments and maybe choose one they like.<br></p><p>Any&lt;&gt; pros:<br>- The convention is to capitalize types. &#39;Any&lt;A, B&gt;&#39; is immediately apparent as a type, and looks like a type when used in places where types would be used (like function signatures)<br>- Having &#39;Any&lt;&gt;&#39; allows us to keep the well-established &#39;Any&#39; without having to typealias to &#39;any&#39; or &#39;any&lt;&gt;&#39; forms<br>- any is a keyword, but an argument can be made that keywords that fit into a particular syntactic slot should be capitalized like normal members of that slot. Any&lt;&gt; fits into the slot of types, so it should be named like a type<br>- In the future, AnySequence and friends can be replaced with, e.g. Any&lt;Sequence&gt;. This increases discoverability of existential features, like a future &quot;Any&lt;Sequence where .Element == Int&gt;&quot;. A number of developers have mentioned that they suspect protocol&lt;&gt; is rarely used, although GitHub&#39;s search makes it impossible to quantify.<br></p><p>any&lt;&gt; pros:<br>- any&lt;&gt;&#39;s lower case &#39;a&#39; distinguishes it from other generic types that use similar syntax, such as &quot;Array&lt;Int&gt;&quot;. Perhaps developers, especially those new to Swift, will be confused as to why &quot;Any&lt;A, B&gt;&quot; isn&#39;t a generic type, but &quot;Dictionary&lt;A, B&gt;&quot; is. New developers aside, it may be jarring to have to mentally &#39;context switch&#39; between Any&lt;A, B&gt; as an existential, and AnythingButAny&lt;A, B&gt; as a generic type.<br>- any&#39;s lower case &#39;a&#39; makes it clear to users it&#39;s not a &#39;normal&#39; type, but rather a construction that can be used as a type in some cases, and can&#39;t be used everywhere a concrete type can.<br>- &#39;any&#39; isn&#39;t a specific type - it&#39;s a kind of type (an existential), and this spelling fits better with the other &#39;kind&#39; names: &#39;class&#39;, &#39;struct&#39;, &#39;enum&#39;, &#39;protocol&#39;<br>- any is a keyword, and keywords are lower case. Perhaps consistency in this matter is more important.<br></p><p>Any other thoughts? I will submit an amendment tonight if people are okay with this.<br></p><p>Austin<br></p><p><br>&gt; On May 18, 2016, at 10:35 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello all,<br>&gt; <br>&gt; Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt; <br>&gt; The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md&gt;<br>&gt; <br>&gt; Best,<br>&gt; Austin<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/6a36c8c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 20, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 9:10 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; (Trying to move the conversation back to this thread to un-hijack Adrian&#39;s thread.)<br>&gt; <br>&gt; In terms of Any&lt;&gt; vs any&lt;&gt;, I don&#39;t have any strong feelings and I think there are good arguments on both sides. I&#39;m going to leave the proposal as Any&lt;&gt; but put a section in the &#39;Alternatives&#39; discussing Any&lt;&gt; vs any&lt;&gt;, so that if it does go up for review the core team can review arguments and maybe choose one they like.<br></p><p>Thanks for the summary.  I think this is helpful.  <br></p><p>&gt; <br>&gt; Any&lt;&gt; pros:<br>&gt; - The convention is to capitalize types. &#39;Any&lt;A, B&gt;&#39; is immediately apparent as a type, and looks like a type when used in places where types would be used (like function signatures)<br>&gt; - Having &#39;Any&lt;&gt;&#39; allows us to keep the well-established &#39;Any&#39; without having to typealias to &#39;any&#39; or &#39;any&lt;&gt;’ forms<br></p><p>How so?  you can’t just use `protocol` naked today.  You have to say `protocol&lt;&gt;`.  `Any` is a typealias for that.  This means we either have a typealias, we type out `Any&lt;&gt;` or we type out `any&lt;&gt;`.  We don’t get to just type `Any` or `any` without a typealias just because we change the keyword.<br></p><p>And I do agree that typealias for existentials should be capitalized.  These are types and behave identically to any other type.<br></p><p>&gt; - any is a keyword, but an argument can be made that keywords that fit into a particular syntactic slot should be capitalized like normal members of that slot. Any&lt;&gt; fits into the slot of types, so it should be named like a type<br>&gt; - In the future, AnySequence and friends can be replaced with, e.g. Any&lt;Sequence&gt;.<br>&gt; This increases discoverability of existential features, like a future &quot;Any&lt;Sequence where .Element == Int&gt;&quot;. A number of developers have mentioned that they suspect protocol&lt;&gt; is rarely used, although GitHub&#39;s search makes it impossible to quantify.<br></p><p>If protocol&lt;&gt; is rarely used it is probably because it is a very limited feature at this point.  It becomes extremely useful when we can constrain associated types.  <br></p><p>When that is possible and the community shares knowledge about how to use it it will become a widely used feature.  I don’t think upper / lower case or `typealias AnySequnce&lt;T&gt; = Any&lt;Sequence where .Element == T&gt;` will make much difference either way.<br></p><p>&gt; <br>&gt; any&lt;&gt; pros:<br>&gt; - any&lt;&gt;&#39;s lower case &#39;a&#39; distinguishes it from other generic types that use similar syntax, such as &quot;Array&lt;Int&gt;&quot;. Perhaps developers, especially those new to Swift, will be confused as to why &quot;Any&lt;A, B&gt;&quot; isn&#39;t a generic type, but &quot;Dictionary&lt;A, B&gt;&quot; is.<br></p><p>The reason this is important is that generic types can be used in ways that Any cannot.  Thus the likely point of confusion is why the following is not valid:<br></p><p>struct Foo&lt;T, U&gt; {<br>    func foo(bar: Any&lt;T, U&gt;) { ... }<br>}<br></p><p>If we use lowercase it gives the user a hint as to why they might not be able to use it in all of the same ways as a generic type, especially because Swift is developing strong and consistent conventions for keywords.  If we use uppercase here, not only do we introduce potential confusion in this case, we also water down the meaning of those conventions and make the language slightly less predictable. (i.e. users might wonder: are there other uppercase generic-type-like constructs that don’t quite behave like normal generic types?)<br></p><p>&gt; New developers aside, it may be jarring to have to mentally &#39;context switch&#39; between Any&lt;A, B&gt; as an existential, and AnythingButAny&lt;A, B&gt; as a generic type.<br>&gt; - any&#39;s lower case &#39;a&#39; makes it clear to users it&#39;s not a &#39;normal&#39; type, but rather a construction that can be used as a type in some cases, and can&#39;t be used everywhere a concrete type can.<br></p><p>Existential types can be used anywhere concrete types can.  The difference is that Any as a type constructor behaves much differently than other type constructors (generic structs, enums, and classes).  <br></p><p>&gt; - &#39;any&#39; isn&#39;t a specific type - it&#39;s a kind of type (an existential), and this spelling fits better with the other &#39;kind&#39; names: &#39;class&#39;, &#39;struct&#39;, &#39;enum&#39;, &#39;protocol&#39;<br>&gt; - any is a keyword, and keywords are lower case. Perhaps consistency in this matter is more important.<br>&gt; <br>&gt; Any other thoughts? I will submit an amendment tonight if people are okay with this.<br></p><p>I have one additional thought.  Brent’s rule is based on *exempting* keywords from the usual rule of lowercase.  IMO that exemption should be reserved for cases where the keyword in question can be used in all of the same was that the similar syntactic form can be used.  I believe the fact that this is not the case for Any is a strong argument to preclude it from receiving the exemption.<br></p><p>To be perfectly honest, I do prefer `Any` from an aesthetic / readability standpoint.  But I also think the consistency and usability arguments point in the other direction.<br></p><p>When all has been decided I will happily use whatever is decide in my own code.  :-)<br></p><p>&gt; <br>&gt; Austin<br>&gt; <br>&gt; <br>&gt;&gt; On May 18, 2016, at 10:35 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello all,<br>&gt;&gt; <br>&gt;&gt; Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt;&gt; <br>&gt;&gt; The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md&gt;<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/6d07d0b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 20, 2016 at 08:00:00pm</p></header><div class="content"><p>These aren&#39;t really my points, I just copied them out of the other<br>sub-thread. I&#39;m sure there will be a separate review period, during which<br>many more people will probably join in with their opinions :).<br></p><p>Austin<br></p><p>On Fri, May 20, 2016 at 7:59 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 20, 2016, at 9:10 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;<br>&gt; (Trying to move the conversation back to this thread to un-hijack Adrian&#39;s<br>&gt; thread.)<br>&gt;<br>&gt; In terms of Any&lt;&gt; vs any&lt;&gt;, I don&#39;t have any strong feelings and I think<br>&gt; there are good arguments on both sides. I&#39;m going to leave the proposal as<br>&gt; Any&lt;&gt; but put a section in the &#39;Alternatives&#39; discussing Any&lt;&gt; vs any&lt;&gt;, so<br>&gt; that if it does go up for review the core team can review arguments and<br>&gt; maybe choose one they like.<br>&gt;<br>&gt;<br>&gt; Thanks for the summary.  I think this is helpful.<br>&gt;<br>&gt;<br>&gt; Any&lt;&gt; pros:<br>&gt; - The convention is to capitalize types. &#39;Any&lt;A, B&gt;&#39; is immediately<br>&gt; apparent as a type, and looks like a type when used in places where types<br>&gt; would be used (like function signatures)<br>&gt; - Having &#39;Any&lt;&gt;&#39; allows us to keep the well-established &#39;Any&#39; without<br>&gt; having to typealias to &#39;any&#39; or &#39;any&lt;&gt;’ forms<br>&gt;<br>&gt;<br>&gt; How so?  you can’t just use `protocol` naked today.  You have to say<br>&gt; `protocol&lt;&gt;`.  `Any` is a typealias for that.  This means we either have a<br>&gt; typealias, we type out `Any&lt;&gt;` or we type out `any&lt;&gt;`.  We don’t get to<br>&gt; just type `Any` or `any` without a typealias just because we change the<br>&gt; keyword.<br>&gt;<br>&gt; And I do agree that typealias for existentials should be capitalized.<br>&gt; These are types and behave identically to any other type.<br>&gt;<br>&gt; - any is a keyword, but an argument can be made that keywords that fit<br>&gt; into a particular syntactic slot should be capitalized like normal members<br>&gt; of that slot. Any&lt;&gt; fits into the slot of types, so it should be named like<br>&gt; a type<br>&gt; - In the future, AnySequence and friends can be replaced with, e.g.<br>&gt; Any&lt;Sequence&gt;.<br>&gt;<br>&gt; This increases discoverability of existential features, like a future<br>&gt; &quot;Any&lt;Sequence where .Element == Int&gt;&quot;. A number of developers have<br>&gt; mentioned that they suspect protocol&lt;&gt; is rarely used, although GitHub&#39;s<br>&gt; search makes it impossible to quantify.<br>&gt;<br>&gt;<br>&gt; If protocol&lt;&gt; is rarely used it is probably because it is a very limited<br>&gt; feature at this point.  It becomes extremely useful when we can constrain<br>&gt; associated types.<br>&gt;<br>&gt; When that is possible and the community shares knowledge about how to use<br>&gt; it it will become a widely used feature.  I don’t think upper / lower case<br>&gt; or `typealias AnySequnce&lt;T&gt; = Any&lt;Sequence where .Element == T&gt;` will make<br>&gt; much difference either way.<br>&gt;<br>&gt;<br>&gt; any&lt;&gt; pros:<br>&gt; - any&lt;&gt;&#39;s lower case &#39;a&#39; distinguishes it from other generic types that<br>&gt; use similar syntax, such as &quot;Array&lt;Int&gt;&quot;. Perhaps developers, especially<br>&gt; those new to Swift, will be confused as to why &quot;Any&lt;A, B&gt;&quot; isn&#39;t a generic<br>&gt; type, but &quot;Dictionary&lt;A, B&gt;&quot; is.<br>&gt;<br>&gt;<br>&gt; The reason this is important is that generic types can be used in ways<br>&gt; that Any cannot.  Thus the likely point of confusion is why the following<br>&gt; is not valid:<br>&gt;<br>&gt; struct Foo&lt;T, U&gt; {<br>&gt;     func foo(bar: Any&lt;T, U&gt;) { ... }<br>&gt; }<br>&gt;<br>&gt; If we use lowercase it gives the user a hint as to why they might not be<br>&gt; able to use it in all of the same ways as a generic type, *especially*<br>&gt; because Swift is developing strong and consistent conventions for<br>&gt; keywords.  If we use uppercase here, not only do we introduce potential<br>&gt; confusion in this case, we *also* water down the meaning of those<br>&gt; conventions and make the language slightly less predictable. (i.e. users<br>&gt; might wonder: are there other uppercase generic-type-like constructs that<br>&gt; don’t quite behave like normal generic types?)<br>&gt;<br>&gt; New developers aside, it may be jarring to have to mentally &#39;context<br>&gt; switch&#39; between Any&lt;A, B&gt; as an existential, and AnythingButAny&lt;A, B&gt; as a<br>&gt; generic type.<br>&gt;<br>&gt; - any&#39;s lower case &#39;a&#39; makes it clear to users it&#39;s not a &#39;normal&#39; type,<br>&gt; but rather a construction that can be used as a type in some cases, and<br>&gt; can&#39;t be used everywhere a concrete type can.<br>&gt;<br>&gt;<br>&gt; Existential types can be used anywhere concrete types can.  The difference<br>&gt; is that Any as a* type constructor *behaves much differently than other<br>&gt; type constructors (generic structs, enums, and classes).<br>&gt;<br>&gt; - &#39;any&#39; isn&#39;t a specific type - it&#39;s a kind of type (an existential), and<br>&gt; this spelling fits better with the other &#39;kind&#39; names: &#39;class&#39;, &#39;struct&#39;,<br>&gt; &#39;enum&#39;, &#39;protocol&#39;<br>&gt; - any is a keyword, and keywords are lower case. Perhaps consistency in<br>&gt; this matter is more important.<br>&gt;<br>&gt; Any other thoughts? I will submit an amendment tonight if people are okay<br>&gt; with this.<br>&gt;<br>&gt;<br>&gt; I have one additional thought.  Brent’s rule is based on *exempting*<br>&gt; keywords from the usual rule of lowercase.  IMO that exemption should be<br>&gt; reserved for cases where the keyword in question can be used in *all* of<br>&gt; the same was that the similar syntactic form can be used.  I believe the<br>&gt; fact that this is not the case for Any is a strong argument to preclude it<br>&gt; from receiving the exemption.<br>&gt;<br>&gt; To be perfectly honest, I do prefer `Any` from an aesthetic / readability<br>&gt; standpoint.  But I also think the consistency and usability arguments point<br>&gt; in the other direction.<br>&gt;<br>&gt; When all has been decided I will happily use whatever is decide in my own<br>&gt; code.  :-)<br>&gt;<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; On May 18, 2016, at 10:35 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hello all,<br>&gt;<br>&gt; Swift 3.0 focuses on making breaking changes that prepare the way for<br>&gt; features to be introduced in future releases. In that spirit, I would like<br>&gt; to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to<br>&gt; &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt;<br>&gt; The proposal can be found here:<br>&gt; https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/20154e37/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 20, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 10:07 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; These aren&#39;t really my points, I just copied them out of the other sub-thread. I&#39;m sure there will be a separate review period, during which many more people will probably join in with their opinions :).<br></p><p>I understand that.  You asked for any other thoughts before you update your proposal.  I am sharing my thoughts.  :)  Feel free to use them in the proposal if desired.<br></p><p>&gt; <br>&gt; Austin<br>&gt; <br>&gt; On Fri, May 20, 2016 at 7:59 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 20, 2016, at 9:10 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; (Trying to move the conversation back to this thread to un-hijack Adrian&#39;s thread.)<br>&gt;&gt; <br>&gt;&gt; In terms of Any&lt;&gt; vs any&lt;&gt;, I don&#39;t have any strong feelings and I think there are good arguments on both sides. I&#39;m going to leave the proposal as Any&lt;&gt; but put a section in the &#39;Alternatives&#39; discussing Any&lt;&gt; vs any&lt;&gt;, so that if it does go up for review the core team can review arguments and maybe choose one they like.<br>&gt; <br>&gt; Thanks for the summary.  I think this is helpful.  <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Any&lt;&gt; pros:<br>&gt;&gt; - The convention is to capitalize types. &#39;Any&lt;A, B&gt;&#39; is immediately apparent as a type, and looks like a type when used in places where types would be used (like function signatures)<br>&gt;&gt; - Having &#39;Any&lt;&gt;&#39; allows us to keep the well-established &#39;Any&#39; without having to typealias to &#39;any&#39; or &#39;any&lt;&gt;’ forms<br>&gt; <br>&gt; How so?  you can’t just use `protocol` naked today.  You have to say `protocol&lt;&gt;`.  `Any` is a typealias for that.  This means we either have a typealias, we type out `Any&lt;&gt;` or we type out `any&lt;&gt;`.  We don’t get to just type `Any` or `any` without a typealias just because we change the keyword.<br>&gt; <br>&gt; And I do agree that typealias for existentials should be capitalized.  These are types and behave identically to any other type.<br>&gt; <br>&gt;&gt; - any is a keyword, but an argument can be made that keywords that fit into a particular syntactic slot should be capitalized like normal members of that slot. Any&lt;&gt; fits into the slot of types, so it should be named like a type<br>&gt;&gt; - In the future, AnySequence and friends can be replaced with, e.g. Any&lt;Sequence&gt;.<br>&gt;&gt; This increases discoverability of existential features, like a future &quot;Any&lt;Sequence where .Element == Int&gt;&quot;. A number of developers have mentioned that they suspect protocol&lt;&gt; is rarely used, although GitHub&#39;s search makes it impossible to quantify.<br>&gt; <br>&gt; If protocol&lt;&gt; is rarely used it is probably because it is a very limited feature at this point.  It becomes extremely useful when we can constrain associated types.  <br>&gt; <br>&gt; When that is possible and the community shares knowledge about how to use it it will become a widely used feature.  I don’t think upper / lower case or `typealias AnySequnce&lt;T&gt; = Any&lt;Sequence where .Element == T&gt;` will make much difference either way.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; any&lt;&gt; pros:<br>&gt;&gt; - any&lt;&gt;&#39;s lower case &#39;a&#39; distinguishes it from other generic types that use similar syntax, such as &quot;Array&lt;Int&gt;&quot;. Perhaps developers, especially those new to Swift, will be confused as to why &quot;Any&lt;A, B&gt;&quot; isn&#39;t a generic type, but &quot;Dictionary&lt;A, B&gt;&quot; is.<br>&gt; <br>&gt; The reason this is important is that generic types can be used in ways that Any cannot.  Thus the likely point of confusion is why the following is not valid:<br>&gt; <br>&gt; struct Foo&lt;T, U&gt; {<br>&gt;     func foo(bar: Any&lt;T, U&gt;) { ... }<br>&gt; }<br>&gt; <br>&gt; If we use lowercase it gives the user a hint as to why they might not be able to use it in all of the same ways as a generic type, especially because Swift is developing strong and consistent conventions for keywords.  If we use uppercase here, not only do we introduce potential confusion in this case, we also water down the meaning of those conventions and make the language slightly less predictable. (i.e. users might wonder: are there other uppercase generic-type-like constructs that don’t quite behave like normal generic types?)<br>&gt; <br>&gt;&gt; New developers aside, it may be jarring to have to mentally &#39;context switch&#39; between Any&lt;A, B&gt; as an existential, and AnythingButAny&lt;A, B&gt; as a generic type.<br>&gt;&gt; - any&#39;s lower case &#39;a&#39; makes it clear to users it&#39;s not a &#39;normal&#39; type, but rather a construction that can be used as a type in some cases, and can&#39;t be used everywhere a concrete type can.<br>&gt; <br>&gt; Existential types can be used anywhere concrete types can.  The difference is that Any as a type constructor behaves much differently than other type constructors (generic structs, enums, and classes).  <br>&gt; <br>&gt;&gt; - &#39;any&#39; isn&#39;t a specific type - it&#39;s a kind of type (an existential), and this spelling fits better with the other &#39;kind&#39; names: &#39;class&#39;, &#39;struct&#39;, &#39;enum&#39;, &#39;protocol&#39;<br>&gt;&gt; - any is a keyword, and keywords are lower case. Perhaps consistency in this matter is more important.<br>&gt;&gt; <br>&gt;&gt; Any other thoughts? I will submit an amendment tonight if people are okay with this.<br>&gt; <br>&gt; I have one additional thought.  Brent’s rule is based on *exempting* keywords from the usual rule of lowercase.  IMO that exemption should be reserved for cases where the keyword in question can be used in all of the same was that the similar syntactic form can be used.  I believe the fact that this is not the case for Any is a strong argument to preclude it from receiving the exemption.<br>&gt; <br>&gt; To be perfectly honest, I do prefer `Any` from an aesthetic / readability standpoint.  But I also think the consistency and usability arguments point in the other direction.<br>&gt; <br>&gt; When all has been decided I will happily use whatever is decide in my own code.  :-)<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 18, 2016, at 10:35 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/8b83cf1d/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 21, 2016 at 02:00:00pm</p></header><div class="content"><p>One more thing, I would also add the ability to allow something like this:<br></p><p>protocol A {}  <br>protocol B {}<br></p><p>// Here `type` can be `protocol`, `class`, `struct` or `enum`.<br>type C: any&lt;A, B&gt; {}<br>Where today is only possible to express something like this:<br></p><p>protocol A {}  <br>protocol B {}<br></p><p>typealias AB = any&lt;A, B&gt;<br></p><p>// Here `type` can be `protocol`, `class`, `struct` or `enum`.<br>type C: AB {}<br>This is a lack of functionality.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 21. Mai 2016 bei 05:16:24, Matthew Johnson via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p><br>On May 20, 2016, at 10:07 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>These aren&#39;t really my points, I just copied them out of the other sub-thread. I&#39;m sure there will be a separate review period, during which many more people will probably join in with their opinions :).<br></p><p>I understand that.  You asked for any other thoughts before you update your proposal.  I am sharing my thoughts.  :)  Feel free to use them in the proposal if desired.<br></p><p><br>Austin<br></p><p>On Fri, May 20, 2016 at 7:59 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br></p><p>On May 20, 2016, at 9:10 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>(Trying to move the conversation back to this thread to un-hijack Adrian&#39;s thread.)<br></p><p>In terms of Any&lt;&gt; vs any&lt;&gt;, I don&#39;t have any strong feelings and I think there are good arguments on both sides. I&#39;m going to leave the proposal as Any&lt;&gt; but put a section in the &#39;Alternatives&#39; discussing Any&lt;&gt; vs any&lt;&gt;, so that if it does go up for review the core team can review arguments and maybe choose one they like.<br></p><p>Thanks for the summary.  I think this is helpful.  <br></p><p><br>Any&lt;&gt; pros:<br>- The convention is to capitalize types. &#39;Any&lt;A, B&gt;&#39; is immediately apparent as a type, and looks like a type when used in places where types would be used (like function signatures)<br>- Having &#39;Any&lt;&gt;&#39; allows us to keep the well-established &#39;Any&#39; without having to typealias to &#39;any&#39; or &#39;any&lt;&gt;’ forms<br></p><p>How so?  you can’t just use `protocol` naked today.  You have to say `protocol&lt;&gt;`.  `Any` is a typealias for that.  This means we either have a typealias, we type out `Any&lt;&gt;` or we type out `any&lt;&gt;`.  We don’t get to just type `Any` or `any` without a typealias just because we change the keyword.<br></p><p>And I do agree that typealias for existentials should be capitalized.  These are types and behave identically to any other type.<br></p><p>- any is a keyword, but an argument can be made that keywords that fit into a particular syntactic slot should be capitalized like normal members of that slot. Any&lt;&gt; fits into the slot of types, so it should be named like a type<br>- In the future, AnySequence and friends can be replaced with, e.g. Any&lt;Sequence&gt;.<br>This increases discoverability of existential features, like a future &quot;Any&lt;Sequence where .Element == Int&gt;&quot;. A number of developers have mentioned that they suspect protocol&lt;&gt; is rarely used, although GitHub&#39;s search makes it impossible to quantify.<br></p><p>If protocol&lt;&gt; is rarely used it is probably because it is a very limited feature at this point.  It becomes extremely useful when we can constrain associated types.  <br></p><p>When that is possible and the community shares knowledge about how to use it it will become a widely used feature.  I don’t think upper / lower case or `typealias AnySequnce&lt;T&gt; = Any&lt;Sequence where .Element == T&gt;` will make much difference either way.<br></p><p><br>any&lt;&gt; pros:<br>- any&lt;&gt;&#39;s lower case &#39;a&#39; distinguishes it from other generic types that use similar syntax, such as &quot;Array&lt;Int&gt;&quot;. Perhaps developers, especially those new to Swift, will be confused as to why &quot;Any&lt;A, B&gt;&quot; isn&#39;t a generic type, but &quot;Dictionary&lt;A, B&gt;&quot; is.<br></p><p>The reason this is important is that generic types can be used in ways that Any cannot.  Thus the likely point of confusion is why the following is not valid:<br></p><p>struct Foo&lt;T, U&gt; {<br>    func foo(bar: Any&lt;T, U&gt;) { ... }<br>}<br></p><p>If we use lowercase it gives the user a hint as to why they might not be able to use it in all of the same ways as a generic type, especially because Swift is developing strong and consistent conventions for keywords.  If we use uppercase here, not only do we introduce potential confusion in this case, we also water down the meaning of those conventions and make the language slightly less predictable. (i.e. users might wonder: are there other uppercase generic-type-like constructs that don’t quite behave like normal generic types?)<br></p><p>New developers aside, it may be jarring to have to mentally &#39;context switch&#39; between Any&lt;A, B&gt; as an existential, and AnythingButAny&lt;A, B&gt; as a generic type.<br>- any&#39;s lower case &#39;a&#39; makes it clear to users it&#39;s not a &#39;normal&#39; type, but rather a construction that can be used as a type in some cases, and can&#39;t be used everywhere a concrete type can.<br></p><p>Existential types can be used anywhere concrete types can.  The difference is that Any as a type constructor behaves much differently than other type constructors (generic structs, enums, and classes).  <br></p><p>- &#39;any&#39; isn&#39;t a specific type - it&#39;s a kind of type (an existential), and this spelling fits better with the other &#39;kind&#39; names: &#39;class&#39;, &#39;struct&#39;, &#39;enum&#39;, &#39;protocol&#39;<br>- any is a keyword, and keywords are lower case. Perhaps consistency in this matter is more important.<br></p><p>Any other thoughts? I will submit an amendment tonight if people are okay with this.<br></p><p>I have one additional thought.  Brent’s rule is based on *exempting* keywords from the usual rule of lowercase.  IMO that exemption should be reserved for cases where the keyword in question can be used in all of the same was that the similar syntactic form can be used.  I believe the fact that this is not the case for Any is a strong argument to preclude it from receiving the exemption.<br></p><p>To be perfectly honest, I do prefer `Any` from an aesthetic / readability standpoint.  But I also think the consistency and usability arguments point in the other direction.<br></p><p>When all has been decided I will happily use whatever is decide in my own code.  :-)<br></p><p><br>Austin<br></p><p><br>On May 18, 2016, at 10:35 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>Hello all,<br></p><p>Swift 3.0 focuses on making breaking changes that prepare the way for features to be introduced in future releases. In that spirit, I would like to solicit feedback on a very simple proposal: renaming &#39;protocol&lt;&gt;&#39; to &#39;Any&lt;&gt;&#39;, as described in the &#39;Completing Generics&#39; manifesto.<br></p><p>The proposal can be found here: https://github.com/austinzheng/swift-evolution/blob/az-protocol-to-any/proposals/XXXX-any-as-existential.md<br></p><p>Best,<br>Austin<br></p><p><br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/e209bb5e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
