<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 29, 2016 at 07:00:00pm</p></header><div class="content"><p>What would the point of a free function be if you already have a protocol extension?<br></p><p>&gt; Georgios, Yes lets go with clamp for a name!<br>&gt; <br>&gt; Pyry, Originally I thought of just adding a global function akin to `min`<br>&gt; and `max` but I am also<br>&gt; in favour of adding the above extension to `Comparable`.<br>&gt; I think having both the global function and the protocol extension for<br>&gt; `clamp` would be great.<br>&gt; <br>&gt; - Nick<br>&gt; <br>&gt; <br>&gt; On Thu, Aug 25, 2016 at 9:37 PM, Pyry Jahkola&lt;pyry.jahkola at iki.fi&gt;wrote:<br>&gt; <br>&gt; &gt; On 25 Aug 2016, at 12:05, Nicholas Maccharoli wrote:<br>&gt; &gt; <br>&gt; &gt; I personally see merit in adding a function to bound the value of a<br>&gt; &gt; variable within a range and think it would be simple to write with the<br>&gt; &gt; existing implementations of `min` and `max` with something like:<br>&gt; &gt; <br>&gt; &gt; public func bounds&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T)<br>&gt; &gt; -&gt;T {<br>&gt; &gt; return max(lower, min(value, upper))<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Does this sound like something the community thinks would be worthwhile to<br>&gt; &gt; add?<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; I&#39;d welcome that addition. In terms of function interface, I think we can<br>&gt; &gt; do better than the 3-argument `clamp(x, min, max)` function that is seen<br>&gt; &gt; in several math libraries.<br>&gt; &gt; <br>&gt; &gt; Our ***Range types already have a `clamped(to:)` member function, e.g. here&#39;s<br>&gt; &gt; one for ClosedRange<br>&gt; &gt; &lt;https://developer.apple.com/reference/swift/closedrange/1779071-clamped&gt;.<br>&gt; &gt; It creates a new range constraining the receiver&#39;s bounds within the new<br>&gt; &gt; bounds given as argument.<br>&gt; &gt; <br>&gt; &gt; I think the sensible thing would be to add a similar, and equally named,<br>&gt; &gt; method to the Comparable protocol, taking in the ClosedRange&lt;Self&gt;to<br>&gt; &gt; limit the value to:<br>&gt; &gt; <br>&gt; &gt; extension Comparable {<br>&gt; &gt; public func clamped(to limits: ClosedRange&lt;Self&gt;) -&gt;Self {<br>&gt; &gt; return self&lt;limits.lowerBound ? limits.lowerBound<br>&gt; &gt; : self&gt;limits.upperBound ? limits.upperBound<br>&gt; &gt; : self<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; (-0.1).clamped(to: 0 ... 1) // 0.0<br>&gt; &gt; 3.14.clamped(to: 0 ... .infinity) // 3.14<br>&gt; &gt; &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;f&quot;) // &quot;f&quot;<br>&gt; &gt; &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;g&quot;) // &quot;foo&quot;<br>&gt; &gt; <br>&gt; &gt; From my experience, I&#39;d say it&#39;d be most useful for clamping<br>&gt; &gt; floating-point numbers and collection indices.<br>&gt; &gt; <br>&gt; &gt; — Pyry<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>August 30, 2016 at 11:00:00am</p></header><div class="content"><p>Tim,<br></p><p>The protocol extension alone would be sufficient, but for as long as the<br>global functions<br>`min` and `max` are still around I thought adding a global clamp function<br>would make<br>for good symmetry.<br></p><p>I&#39;ll write a small draft proposal to illustrate my idea a little better.<br></p><p>What does the community think?<br></p><p>- Nick<br></p><p><br></p><p>On Tue, Aug 30, 2016 at 2:25 AM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; What would the point of a free function be if you already have a protocol<br>&gt; extension?<br>&gt;<br>&gt; &gt; Georgios, Yes lets go with clamp for a name!<br>&gt; &gt;<br>&gt; &gt; Pyry, Originally I thought of just adding a global function akin to `min`<br>&gt; &gt; and `max` but I am also<br>&gt; &gt; in favour of adding the above extension to `Comparable`.<br>&gt; &gt; I think having both the global function and the protocol extension for<br>&gt; &gt; `clamp` would be great.<br>&gt; &gt;<br>&gt; &gt; - Nick<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Aug 25, 2016 at 9:37 PM, Pyry Jahkola&lt;pyry.jahkola at iki.fi<br>&gt; &gt;wrote:<br>&gt; &gt;<br>&gt; &gt; &gt; On 25 Aug 2016, at 12:05, Nicholas Maccharoli wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I personally see merit in adding a function to bound the value of a<br>&gt; &gt; &gt; variable within a range and think it would be simple to write with the<br>&gt; &gt; &gt; existing implementations of `min` and `max` with something like:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; public func bounds&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T)<br>&gt; &gt; &gt; -&gt;T {<br>&gt; &gt; &gt; return max(lower, min(value, upper))<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Does this sound like something the community thinks would be<br>&gt; worthwhile to<br>&gt; &gt; &gt; add?<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I&#39;d welcome that addition. In terms of function interface, I think we<br>&gt; can<br>&gt; &gt; &gt; do better than the 3-argument `clamp(x, min, max)` function that is<br>&gt; seen<br>&gt; &gt; &gt; in several math libraries.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Our ***Range types already have a `clamped(to:)` member function, e.g.<br>&gt; here&#39;s<br>&gt; &gt; &gt; one for ClosedRange<br>&gt; &gt; &gt; &lt;https://developer.apple.com/reference/swift/closedrange/<br>&gt; 1779071-clamped&gt;.<br>&gt; &gt; &gt; It creates a new range constraining the receiver&#39;s bounds within the<br>&gt; new<br>&gt; &gt; &gt; bounds given as argument.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I think the sensible thing would be to add a similar, and equally<br>&gt; named,<br>&gt; &gt; &gt; method to the Comparable protocol, taking in the ClosedRange&lt;Self&gt;to<br>&gt; &gt; &gt; limit the value to:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; extension Comparable {<br>&gt; &gt; &gt; public func clamped(to limits: ClosedRange&lt;Self&gt;) -&gt;Self {<br>&gt; &gt; &gt; return self&lt;limits.lowerBound ? limits.lowerBound<br>&gt; &gt; &gt; : self&gt;limits.upperBound ? limits.upperBound<br>&gt; &gt; &gt; : self<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; (-0.1).clamped(to: 0 ... 1) // 0.0<br>&gt; &gt; &gt; 3.14.clamped(to: 0 ... .infinity) // 3.14<br>&gt; &gt; &gt; &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;f&quot;) // &quot;f&quot;<br>&gt; &gt; &gt; &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;g&quot;) // &quot;foo&quot;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; From my experience, I&#39;d say it&#39;d be most useful for clamping<br>&gt; &gt; &gt; floating-point numbers and collection indices.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; — Pyry<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160830/8ae8208f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 30, 2016 at 08:00:00am</p></header><div class="content"><p>As an additive proposal, I don&#39;t think this would be in scope for the<br>current phase of Swift 4.<br></p><p>Looking forward, though, I&#39;m not sure this belongs in the standard library.<br>In general, my understanding is that Swift&#39;s standard library is<br>deliberately small, and that the criteria for additions are that it&#39;s<br>widely used *and* also non-trivial for the user to write correctly. I&#39;ve<br>had to use clamping, obviously, but it&#39;s a trivial one-liner that is hard<br>to write incorrectly. If anything, I&#39;d be in favor of removing max and min<br>into a future math library outside the standard library.<br></p><p>On Mon, Aug 29, 2016 at 9:39 PM Nicholas Maccharoli via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Tim,<br>&gt;<br>&gt; The protocol extension alone would be sufficient, but for as long as the<br>&gt; global functions<br>&gt; `min` and `max` are still around I thought adding a global clamp function<br>&gt; would make<br>&gt; for good symmetry.<br>&gt;<br>&gt; I&#39;ll write a small draft proposal to illustrate my idea a little better.<br>&gt;<br>&gt; What does the community think?<br>&gt;<br>&gt; - Nick<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Aug 30, 2016 at 2:25 AM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt;<br>&gt;&gt; What would the point of a free function be if you already have a protocol<br>&gt;&gt; extension?<br>&gt;&gt;<br>&gt;&gt; &gt; Georgios, Yes lets go with clamp for a name!<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Pyry, Originally I thought of just adding a global function akin to<br>&gt;&gt; `min`<br>&gt;&gt; &gt; and `max` but I am also<br>&gt;&gt; &gt; in favour of adding the above extension to `Comparable`.<br>&gt;&gt; &gt; I think having both the global function and the protocol extension for<br>&gt;&gt; &gt; `clamp` would be great.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - Nick<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Thu, Aug 25, 2016 at 9:37 PM, Pyry Jahkola&lt;pyry.jahkola at iki.fi<br>&gt;&gt; &gt;wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; &gt; On 25 Aug 2016, at 12:05, Nicholas Maccharoli wrote:<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; I personally see merit in adding a function to bound the value of a<br>&gt;&gt; &gt; &gt; variable within a range and think it would be simple to write with the<br>&gt;&gt; &gt; &gt; existing implementations of `min` and `max` with something like:<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; public func bounds&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T)<br>&gt;&gt; &gt; &gt; -&gt;T {<br>&gt;&gt; &gt; &gt; return max(lower, min(value, upper))<br>&gt;&gt; &gt; &gt; }<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; Does this sound like something the community thinks would be<br>&gt;&gt; worthwhile to<br>&gt;&gt; &gt; &gt; add?<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; I&#39;d welcome that addition. In terms of function interface, I think we<br>&gt;&gt; can<br>&gt;&gt; &gt; &gt; do better than the 3-argument `clamp(x, min, max)` function that is<br>&gt;&gt; seen<br>&gt;&gt; &gt; &gt; in several math libraries.<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; Our ***Range types already have a `clamped(to:)` member function,<br>&gt;&gt; e.g. here&#39;s<br>&gt;&gt; &gt; &gt; one for ClosedRange<br>&gt;&gt; &gt; &gt; &lt;<br>&gt;&gt; https://developer.apple.com/reference/swift/closedrange/1779071-clamped&gt;.<br>&gt;&gt; &gt; &gt; It creates a new range constraining the receiver&#39;s bounds within the<br>&gt;&gt; new<br>&gt;&gt; &gt; &gt; bounds given as argument.<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; I think the sensible thing would be to add a similar, and equally<br>&gt;&gt; named,<br>&gt;&gt; &gt; &gt; method to the Comparable protocol, taking in the ClosedRange&lt;Self&gt;to<br>&gt;&gt; &gt; &gt; limit the value to:<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; extension Comparable {<br>&gt;&gt; &gt; &gt; public func clamped(to limits: ClosedRange&lt;Self&gt;) -&gt;Self {<br>&gt;&gt; &gt; &gt; return self&lt;limits.lowerBound ? limits.lowerBound<br>&gt;&gt; &gt; &gt; : self&gt;limits.upperBound ? limits.upperBound<br>&gt;&gt; &gt; &gt; : self<br>&gt;&gt; &gt; &gt; }<br>&gt;&gt; &gt; &gt; }<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; (-0.1).clamped(to: 0 ... 1) // 0.0<br>&gt;&gt; &gt; &gt; 3.14.clamped(to: 0 ... .infinity) // 3.14<br>&gt;&gt; &gt; &gt; &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;f&quot;) // &quot;f&quot;<br>&gt;&gt; &gt; &gt; &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;g&quot;) // &quot;foo&quot;<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; From my experience, I&#39;d say it&#39;d be most useful for clamping<br>&gt;&gt; &gt; &gt; floating-point numbers and collection indices.<br>&gt;&gt; &gt; &gt;<br>&gt;&gt; &gt; &gt; — Pyry<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160830/57607ae6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August 31, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 30 Aug 2016, at 10:18, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As an additive proposal, I don&#39;t think this would be in scope for the current phase of Swift 4.<br>&gt; <br>&gt; Looking forward, though, I&#39;m not sure this belongs in the standard library. In general, my understanding is that Swift&#39;s standard library is deliberately small, and that the criteria for additions are that it&#39;s widely used *and* also non-trivial for the user to write correctly. I&#39;ve had to use clamping, obviously, but it&#39;s a trivial one-liner that is hard to write incorrectly. If anything, I&#39;d be in favor of removing max and min into a future math library outside the standard library.<br></p><p>min &amp; max (and clamping) are hardly “math” operations. They operate on Comparables, so you can apply them to more abstract things than just numbers.<br></p><p>Otherwise, you might as well put Comparable and all standard numeric types like Int and Float in a math library, too.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 31, 2016 at 01:00:00pm</p></header><div class="content"><p>Comparable makes semantic guarantees about how values of conforming types<br>might be ordered. You don&#39;t need `min` or `max` for that to be useful,<br>since it&#39;s trivial to implement using comparison operators.<br></p><p>Basic numeric types require compiler magic and thus belong in the standard<br>library. Likewise, dictionaries have special syntactic sugar and have uses<br>for types that can guarantee comparable semantics. A decimal type, though,<br>can be implemented outside the standard library and probably would belong<br>in a math library. Likewise mathematical constants such as e. I think min<br>and max fall into the latter category.<br></p><p>On Wed, Aug 31, 2016 at 8:10 AM Karl &lt;razielim at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 30 Aug 2016, at 10:18, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; As an additive proposal, I don&#39;t think this would be in scope for the<br>&gt; current phase of Swift 4.<br>&gt; &gt;<br>&gt; &gt; Looking forward, though, I&#39;m not sure this belongs in the standard<br>&gt; library. In general, my understanding is that Swift&#39;s standard library is<br>&gt; deliberately small, and that the criteria for additions are that it&#39;s<br>&gt; widely used *and* also non-trivial for the user to write correctly. I&#39;ve<br>&gt; had to use clamping, obviously, but it&#39;s a trivial one-liner that is hard<br>&gt; to write incorrectly. If anything, I&#39;d be in favor of removing max and min<br>&gt; into a future math library outside the standard library.<br>&gt;<br>&gt; min &amp; max (and clamping) are hardly “math” operations. They operate on<br>&gt; Comparables, so you can apply them to more abstract things than just<br>&gt; numbers.<br>&gt;<br>&gt; Otherwise, you might as well put Comparable and all standard numeric types<br>&gt; like Int and Float in a math library, too.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160831/f8c60c99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d128cffeaf768e0ad7c47488aaa95f13?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Dominik Pich</string> &lt;dominik at pich.info&gt;<p>September  1, 2016 at 08:00:00am</p></header><div class="content"><p>I agree with karl. there is nothing really mathematical with min/max<br></p><p>e.g. find the longest sequence of characters in a string or the smallest array or the minimal x coordinate of view objects…<br>min/max/clamp are needed everywhere.<br></p><p>LG<br>Dominik<br></p><p>Web: https://pich.info<br>Twitter: @DaijDjan<br>Facebook: Dominik.Pich<br></p><p>&gt; On Aug 31, 2016, at 3:53 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Comparable makes semantic guarantees about how values of conforming types might be ordered. You don&#39;t need `min` or `max` for that to be useful, since it&#39;s trivial to implement using comparison operators.<br>&gt; <br>&gt; Basic numeric types require compiler magic and thus belong in the standard library. Likewise, dictionaries have special syntactic sugar and have uses for types that can guarantee comparable semantics. A decimal type, though, can be implemented outside the standard library and probably would belong in a math library. Likewise mathematical constants such as e. I think min and max fall into the latter category.<br>&gt; <br>&gt; On Wed, Aug 31, 2016 at 8:10 AM Karl &lt;razielim at gmail.com &lt;mailto:razielim at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On 30 Aug 2016, at 10:18, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; As an additive proposal, I don&#39;t think this would be in scope for the current phase of Swift 4.<br>&gt; &gt;<br>&gt; &gt; Looking forward, though, I&#39;m not sure this belongs in the standard library. In general, my understanding is that Swift&#39;s standard library is deliberately small, and that the criteria for additions are that it&#39;s widely used *and* also non-trivial for the user to write correctly. I&#39;ve had to use clamping, obviously, but it&#39;s a trivial one-liner that is hard to write incorrectly. If anything, I&#39;d be in favor of removing max and min into a future math library outside the standard library.<br>&gt; <br>&gt; min &amp; max (and clamping) are hardly “math” operations. They operate on Comparables, so you can apply them to more abstract things than just numbers.<br>&gt; <br>&gt; Otherwise, you might as well put Comparable and all standard numeric types like Int and Float in a math library, too.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160901/2ac5b004/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160901/2ac5b004/attachment.sig&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  2, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On 31 Aug 2016, at 15:53, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Comparable makes semantic guarantees about how values of conforming types might be ordered. You don&#39;t need `min` or `max` for that to be useful, since it&#39;s trivial to implement using comparison operators.<br>&gt; <br>&gt; Basic numeric types require compiler magic and thus belong in the standard library. Likewise, dictionaries have special syntactic sugar and have uses for types that can guarantee comparable semantics. A decimal type, though, can be implemented outside the standard library and probably would belong in a math library. Likewise mathematical constants such as e. I think min and max fall into the latter category.<br>&gt; <br>&gt; On Wed, Aug 31, 2016 at 8:10 AM Karl &lt;razielim at gmail.com &lt;mailto:razielim at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On 30 Aug 2016, at 10:18, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; As an additive proposal, I don&#39;t think this would be in scope for the current phase of Swift 4.<br>&gt; &gt;<br>&gt; &gt; Looking forward, though, I&#39;m not sure this belongs in the standard library. In general, my understanding is that Swift&#39;s standard library is deliberately small, and that the criteria for additions are that it&#39;s widely used *and* also non-trivial for the user to write correctly. I&#39;ve had to use clamping, obviously, but it&#39;s a trivial one-liner that is hard to write incorrectly. If anything, I&#39;d be in favor of removing max and min into a future math library outside the standard library.<br>&gt; <br>&gt; min &amp; max (and clamping) are hardly “math” operations. They operate on Comparables, so you can apply them to more abstract things than just numbers.<br>&gt; <br>&gt; Otherwise, you might as well put Comparable and all standard numeric types like Int and Float in a math library, too.<br></p><p>Concrete example I just happened to run across: Foundation’s RunLoopMode conforms to Comparable. It is entirely possible that you may get a collection of RunLoopModes and wish to find the min/max or clamp to a particular mode.<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSRunLoop.swift<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/5daad24c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  2, 2016 at 04:00:00am</p></header><div class="content"><p>Run loop modes are named by string, and as you can see in your link,<br>comparisons of run loop modes are by their raw value--i.e. by string. While<br>it&#39;s of course sensible to have a total ordering for strings, I&#39;m skeptical<br>that you would typically want to get the &quot;maximum&quot; of two strings, and I&#39;m<br>not aware of a use case for clamping a string to a range of strings.<br></p><p>If you&#39;re really doing that in your code, you should be aware that the<br>default ordering for String (or was it just NSString?--my memory is hazy<br>now) behaves differently on OS X and Linux, at least as of a few months<br>ago. You really should be using string-specific comparison methods (either<br>case-sensitive or not) on appropriately normalized strings, in my opinion.<br></p><p>On Thu, Sep 1, 2016 at 10:34 PM Karl &lt;razielim at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt; On 31 Aug 2016, at 15:53, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; Comparable makes semantic guarantees about how values of conforming types<br>&gt; might be ordered. You don&#39;t need `min` or `max` for that to be useful,<br>&gt; since it&#39;s trivial to implement using comparison operators.<br>&gt;<br>&gt; Basic numeric types require compiler magic and thus belong in the standard<br>&gt; library. Likewise, dictionaries have special syntactic sugar and have uses<br>&gt; for types that can guarantee comparable semantics. A decimal type, though,<br>&gt; can be implemented outside the standard library and probably would belong<br>&gt; in a math library. Likewise mathematical constants such as e. I think min<br>&gt; and max fall into the latter category.<br>&gt;<br>&gt; On Wed, Aug 31, 2016 at 8:10 AM Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On 30 Aug 2016, at 10:18, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; As an additive proposal, I don&#39;t think this would be in scope for the<br>&gt;&gt; current phase of Swift 4.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Looking forward, though, I&#39;m not sure this belongs in the standard<br>&gt;&gt; library. In general, my understanding is that Swift&#39;s standard library is<br>&gt;&gt; deliberately small, and that the criteria for additions are that it&#39;s<br>&gt;&gt; widely used *and* also non-trivial for the user to write correctly. I&#39;ve<br>&gt;&gt; had to use clamping, obviously, but it&#39;s a trivial one-liner that is hard<br>&gt;&gt; to write incorrectly. If anything, I&#39;d be in favor of removing max and min<br>&gt;&gt; into a future math library outside the standard library.<br>&gt;&gt;<br>&gt;&gt; min &amp; max (and clamping) are hardly “math” operations. They operate on<br>&gt;&gt; Comparables, so you can apply them to more abstract things than just<br>&gt;&gt; numbers.<br>&gt;&gt;<br>&gt;&gt; Otherwise, you might as well put Comparable and all standard numeric<br>&gt;&gt; types like Int and Float in a math library, too.<br>&gt;<br>&gt;<br>&gt; Concrete example I just happened to run across: Foundation’s RunLoopMode<br>&gt; conforms to Comparable. It is entirely possible that you may get a<br>&gt; collection of RunLoopModes and wish to find the min/max or clamp to a<br>&gt; particular mode.<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSRunLoop.swift<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/bed89405/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  2, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On 2 Sep 2016, at 06:14, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Run loop modes are named by string, and as you can see in your link, comparisons of run loop modes are by their raw value--i.e. by string. While it&#39;s of course sensible to have a total ordering for strings, I&#39;m skeptical that you would typically want to get the &quot;maximum&quot; of two strings, and I&#39;m not aware of a use case for clamping a string to a range of strings.<br>&gt; <br>&gt; If you&#39;re really doing that in your code, you should be aware that the default ordering for String (or was it just NSString?--my memory is hazy now) behaves differently on OS X and Linux, at least as of a few months ago. You really should be using string-specific comparison methods (either case-sensitive or not) on appropriately normalized strings, in my opinion.<br></p><p>I think their implementation is wrong — comparing runloop modes by their raw values doesn’t make sense if they are strings. But Runloop is patchy anyway, lots of it still lives in CoreFoundation. I was trying to draw attention to the concept rather than the impl.<br></p><p>Basically, my point is that there are other abstract types other than numbers which can be compared and clamped. A “priority” enum would be an example. Sure, you could make it RawRepresentable and compare/clamp the raw values, but that sounds like a workaround rather than a feature. It may be trivial to implement, but so are min/max themselves.<br></p><p>There’s obviously a line as to what should/shouldn’t be in the standard library. I’m not sure the line is so meandering that it includes min/max while excluding clamp, but it’s all a bit arbitrary anyway ¯\_(ツ)_/¯<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
