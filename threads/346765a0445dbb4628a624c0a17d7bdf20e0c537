<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Pre-proposal] Fix function type grammar</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; On 03.07.2016 22:56, Anton Zhilin via swift-evolution wrote:<br>&gt; &gt; Consider this example:<br>&gt; &gt;<br>&gt; &gt; func async&lt;T&gt;(with: T, do: (T) -&gt; Void)<br>&gt; &gt;<br>&gt; &gt; async(with: (), do: { ... })<br>&gt; &gt;<br>&gt; &gt; With this change, it will become:<br>&gt; &gt;<br>&gt; &gt; async(with: (), do: { _ in ... })<br>&gt; &gt;<br>&gt; &gt; This is what will change in practise. With enough luck, even the<br>&gt; &gt; first version will typecheck.<br>&gt; <br>&gt; If we are separating () and (()) in function call/declaration, then if <br>&gt; SE-0110 will be accepted, I believe first should not be allowed for <br>&gt; argument defined as (T)-&gt;Void.<br>&gt; As I understand, in case you have a code that relies on current <br>&gt; syntax/behavior and uses functions(not closures), you&#39;ll need a lot of <br>&gt; wrappers like `{_ in funcThatWasUsedAsIs()}`<br></p><p>Right.<br>By &quot;luck&quot; I mean if determining closure argument count<br>from context will finally work as expected. In this case,<br>closure in the first version will implicitly take 1 parameter,<br>because &#39;async&#39; requires it to do so.<br></p><p>Anyway, we will have to write at least {funcThatWasUsedAsIs()}.<br></p><p>&gt; Btw, in case of &#39;func f(())-&gt;() {}&#39;, will call without explicit Void <br>&gt; parameter be allowed? I.e. `f()` or only `f(())`?<br></p><p>Only `f(())`. By the way, you need a label at function declaration.<br></p><p>&gt; *But*, I feel like implicit Void parameter for function with empty <br>&gt; list of parameters - is an implementation detail which is currently<br>&gt; used and changing this will produce much more problems for current <br>&gt; code than &quot;Just require parentheses on function types&quot; as stated in<br>&gt; the proposal in &quot;Proposed solution and Impact on existing code&quot;.<br></p><p>Right, there is some impact on existing code that was omitted<br>in the proposal. And it wasn&#39;t considered during review. Awkward.<br></p><p>We could add implicit convertion<br>() -&gt; T  to  (U) -&gt; T<br>I feel that is one constructive way out.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pre-proposal] Fix function type grammar</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  4, 2016 at 01:00:00am</p></header><div class="content"><p>On 04.07.2016 0:36, Anton Zhilin via swift-evolution wrote:<br>&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;<br>&gt;&gt; On 03.07.2016 22:56, Anton Zhilin via swift-evolution wrote:<br>&gt;&gt;&gt; Consider this example:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func async&lt;T&gt;(with: T, do: (T) -&gt; Void)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; async(with: (), do: { ... })<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; With this change, it will become:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; async(with: (), do: { _ in ... })<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is what will change in practise. With enough luck, even the<br>&gt;&gt;&gt; first version will typecheck.<br>&gt;&gt;<br>&gt;&gt; If we are separating () and (()) in function call/declaration, then if<br>&gt;&gt; SE-0110 will be accepted, I believe first should not be allowed for<br>&gt;&gt; argument defined as (T)-&gt;Void.<br>&gt;&gt; As I understand, in case you have a code that relies on current<br>&gt;&gt; syntax/behavior and uses functions(not closures), you&#39;ll need a lot of<br>&gt;&gt; wrappers like `{_ in funcThatWasUsedAsIs()}`<br>&gt;<br>&gt; Right.<br>&gt; By &quot;luck&quot; I mean if determining closure argument count<br>&gt; from context will finally work as expected. In this case,<br>&gt; closure in the first version will implicitly take 1 parameter,<br>&gt; because &#39;async&#39; requires it to do so.<br>&gt;<br>&gt; Anyway, we will have to write at least {funcThatWasUsedAsIs()}.<br></p><p>I see. Yes, IMO in this case `{funcThatWasUsedAsIs()}` will be much better.<br></p><p>&gt;<br>&gt;&gt; Btw, in case of &#39;func f(())-&gt;() {}&#39;, will call without explicit Void<br>&gt;&gt; parameter be allowed? I.e. `f()` or only `f(())`?<br>&gt;<br>&gt; Only `f(())`. By the way, you need a label at function declaration.<br></p><p>Oh, yes, of course: &#39;func f(_:())-&gt;() {}&#39;. OK.<br></p><p>&gt;<br>&gt;&gt; *But*, I feel like implicit Void parameter for function with empty<br>&gt;&gt; list of parameters - is an implementation detail which is currently<br>&gt;&gt; used and changing this will produce much more problems for current<br>&gt;&gt; code than &quot;Just require parentheses on function types&quot; as stated in<br>&gt;&gt; the proposal in &quot;Proposed solution and Impact on existing code&quot;.<br>&gt;<br>&gt; Right, there is some impact on existing code that was omitted<br>&gt; in the proposal. And it wasn&#39;t considered during review. Awkward.<br></p><p>Probably because some(many?) people (like me) did not understand that this <br>proposal is much bigger than &quot;Just require parentheses on function types&quot;, <br>because IMHO the major idea of this proposal was disallow `Int-&gt;Int` syntax <br>but not to disallow void parameter for zero parameter functions.<br></p><p>I hope community will provide opinions regarding this issue and about the <br>decision regarding the void parameter to argument-less functions, and if <br>that decision is really expected and was clearly mentioned in the proposal.<br></p><p>Personally I think we need to implement the proposal in all areas except <br>this one and raise new proposal to make all things clear regarding <br>argument-less functions.<br></p><p>&gt;<br>&gt; We could add implicit convertion<br>&gt; () -&gt; T  to  (U) -&gt; T<br>&gt; I feel that is one constructive way out.<br></p><p>Could you clarify the suggestion with some details?<br>Do you suggest, that we can pass ()-&gt;T where (U)-&gt;T is required?<br></p><p><br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Pre-proposal] Fix function type grammar</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July  4, 2016 at 03:00:00am</p></header><div class="content"><p>2016-07-04 1:18 GMT+03:00 Vladimir.S &lt;svabox at gmail.com&gt;:<br>&gt;<br>&gt; Right, there is some impact on existing code that was omitted<br>&gt;&gt; in the proposal. And it wasn&#39;t considered during review. Awkward.<br>&gt;&gt;<br>&gt;<br>&gt; Probably because some(many?) people (like me) did not understand that this<br>&gt; proposal is much bigger than &quot;Just require parentheses on function types&quot;,<br>&gt; because IMHO the major idea of this proposal was disallow `Int-&gt;Int` syntax<br>&gt; but not to disallow void parameter for zero parameter functions.<br>&gt;<br>&gt; I hope community will provide opinions regarding this issue and about the<br>&gt; decision regarding the void parameter to argument-less functions, and if<br>&gt; that decision is really expected and was clearly mentioned in the proposal.<br>&gt;<br>&gt; Personally I think we need to implement the proposal in all areas except<br>&gt; this one and raise new proposal to make all things clear regarding<br>&gt; argument-less functions.<br></p><p><br>Formally, we should. But I wonder how often the feature being removed was<br>used. I personally don&#39;t feel like it&#39;s that important. As Chris suggested,<br>it may be enough to clarify it in SE-0066.<br></p><p>We could add implicit convertion<br>&gt;&gt; () -&gt; T  to  (U) -&gt; T<br>&gt;&gt; I feel that is one constructive way out.<br>&gt;&gt;<br>&gt;<br>&gt; Could you clarify the suggestion with some details?<br>&gt; Do you suggest, that we can pass ()-&gt;T where (U)-&gt;T is required?<br></p><p><br>Yes. By the way, Austin Zheng seems to disagree with this.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/94c92823/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pre-proposal] Fix function type grammar</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July  3, 2016 at 05:00:00pm</p></header><div class="content"><p>It&#39;s a very weak &#39;disagree&#39; :). I&#39;m mostly hoping more people will add<br>feedback and indicate whether they think that conversion is useful to them<br>or not.<br></p><p>Austin<br></p><p>On Sun, Jul 3, 2016 at 5:12 PM, Anton Zhilin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; 2016-07-04 1:18 GMT+03:00 Vladimir.S &lt;svabox at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt; Right, there is some impact on existing code that was omitted<br>&gt;&gt;&gt; in the proposal. And it wasn&#39;t considered during review. Awkward.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Probably because some(many?) people (like me) did not understand that<br>&gt;&gt; this proposal is much bigger than &quot;Just require parentheses on function<br>&gt;&gt; types&quot;, because IMHO the major idea of this proposal was disallow<br>&gt;&gt; `Int-&gt;Int` syntax but not to disallow void parameter for zero parameter<br>&gt;&gt; functions.<br>&gt;&gt;<br>&gt;&gt; I hope community will provide opinions regarding this issue and about the<br>&gt;&gt; decision regarding the void parameter to argument-less functions, and if<br>&gt;&gt; that decision is really expected and was clearly mentioned in the proposal.<br>&gt;&gt;<br>&gt;&gt; Personally I think we need to implement the proposal in all areas except<br>&gt;&gt; this one and raise new proposal to make all things clear regarding<br>&gt;&gt; argument-less functions.<br>&gt;<br>&gt;<br>&gt; Formally, we should. But I wonder how often the feature being removed was<br>&gt; used. I personally don&#39;t feel like it&#39;s that important. As Chris suggested,<br>&gt; it may be enough to clarify it in SE-0066.<br>&gt;<br>&gt; We could add implicit convertion<br>&gt;&gt;&gt; () -&gt; T  to  (U) -&gt; T<br>&gt;&gt;&gt; I feel that is one constructive way out.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Could you clarify the suggestion with some details?<br>&gt;&gt; Do you suggest, that we can pass ()-&gt;T where (U)-&gt;T is required?<br>&gt;<br>&gt;<br>&gt; Yes. By the way, Austin Zheng seems to disagree with this.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/e3708efc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
