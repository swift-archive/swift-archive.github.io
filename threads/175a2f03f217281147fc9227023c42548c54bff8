<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July  1, 2016 at 03:00:00pm</p></header><div class="content"><p>Additive question:<br></p><p>Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>I really would want to use these in dictionaries or sets :)<br></p><p>[Any.Type: ValueType]<br></p><p>Set&lt;Any.Type&gt; // Union type universe<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/175abff8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July  1, 2016 at 08:00:00am</p></header><div class="content"><p>+1<br>&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Additive question:<br>&gt; <br>&gt; Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt; I really would want to use these in dictionaries or sets :)<br>&gt; <br>&gt; [Any.Type: ValueType]<br>&gt; <br>&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/8bc7dc8e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>+1. I&#39;ve had to do this a couple times and ended up wrapping them in string<br>interpolations, which makes me feel terrible.<br></p><p>On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Additive question:<br>&gt;<br>&gt;    - Can a type instance of a type SomeType.self SomeType.Type be Hashable<br>&gt;    ?<br>&gt;<br>&gt; I really would want to use these in dictionaries or sets :)<br>&gt;<br>&gt; [Any.Type: ValueType]<br>&gt;<br>&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/fc33bbc6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>July  1, 2016 at 09:00:00am</p></header><div class="content"><p>+1 here, too. Looking like someone needs to write a full proposal! :P<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Jul 1, 2016, at 9:11 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1. I&#39;ve had to do this a couple times and ended up wrapping them in string interpolations, which makes me feel terrible.<br>&gt; <br>&gt; On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; +1<br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Additive question:<br>&gt;&gt; <br>&gt;&gt; 	• Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt;&gt; I really would want to use these in dictionaries or sets :)<br>&gt;&gt; <br>&gt;&gt; [Any.Type: ValueType]<br>&gt;&gt; <br>&gt;&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July  1, 2016 at 09:00:00am</p></header><div class="content"><p>+1 here as well.  It would be nice to have.<br></p><p><br>&gt; On Jul 1, 2016, at 9:15 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 here, too. Looking like someone needs to write a full proposal! :P<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 9:11 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1. I&#39;ve had to do this a couple times and ended up wrapping them in string interpolations, which makes me feel terrible.<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additive question:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt;&gt;&gt; I really would want to use these in dictionaries or sets :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Any.Type: ValueType]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>This would be great. I&#39;ve solved this recently by making a TypeRepresentation<br>type that is initialized with any T, and conforms to Hashable. Of course<br>internally this just uses String(T), but at least that&#39;s abstracted from the<br>caller.<br></p><p>--<br>Keith Smiley<br></p><p>On 07/01, Matthew Johnson via swift-evolution wrote:<br>&gt; +1 here as well.  It would be nice to have.<br>&gt; <br>&gt; <br>&gt; &gt; On Jul 1, 2016, at 9:15 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; +1 here, too. Looking like someone needs to write a full proposal! :P<br>&gt; &gt; <br>&gt; &gt; l8r<br>&gt; &gt; Sean<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt;&gt; On Jul 1, 2016, at 9:11 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; +1. I&#39;ve had to do this a couple times and ended up wrapping them in string interpolations, which makes me feel terrible.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; +1<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Additive question:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; 	• Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt; &gt;&gt;&gt; I really would want to use these in dictionaries or sets :)<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; [Any.Type: ValueType]<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; -- <br>&gt; &gt;&gt;&gt; Adrian Zubarev<br>&gt; &gt;&gt;&gt; Sent with Airmail<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78dda0d326b6c8eff7c2679f55346a7f?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Alex Migicovsky</string> &lt;migi at apple.com&gt;<p>July  1, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Keith,<br></p><p>As a small aside, I’d suggest using ObjectIdentifier instead of a String to back your TypeRepresentation struct. ObjectIdentifier is Hashable and it has an initializer that accepts any type. The benefit of your TypeRepresentation type over ObjectIdentifier is that you can restrict the TypeRepresentation struct to only accept type parameters in its initializer (so you know you’re storing a type and not an object). ObjectIdentifier accepts both objects and types.<br></p><p>- Alex<br></p><p>&gt; On Jul 1, 2016, at 10:57 AM, Keith Smiley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This would be great. I&#39;ve solved this recently by making a TypeRepresentation<br>&gt; type that is initialized with any T, and conforms to Hashable. Of course<br>&gt; internally this just uses String(T), but at least that&#39;s abstracted from the<br>&gt; caller.<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br>&gt; <br>&gt; On 07/01, Matthew Johnson via swift-evolution wrote:<br>&gt;&gt; +1 here as well.  It would be nice to have.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 1, 2016, at 9:15 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 here, too. Looking like someone needs to write a full proposal! :P<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 1, 2016, at 9:11 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1. I&#39;ve had to do this a couple times and ended up wrapping them in string interpolations, which makes me feel terrible.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Additive question:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	• Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt;&gt;&gt;&gt;&gt; I really would want to use these in dictionaries or sets :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [Any.Type: ValueType]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>Oh awesome! We&#39;ll definitely switch to that. Thanks!<br></p><p>--<br>Keith Smiley<br></p><p>On 07/01, Alex Migicovsky wrote:<br>&gt; Hi Keith,<br>&gt;<br>&gt; As a small aside, I’d suggest using ObjectIdentifier instead of a String to back your TypeRepresentation struct. ObjectIdentifier is Hashable and it has an initializer that accepts any type. The benefit of your TypeRepresentation type over ObjectIdentifier is that you can restrict the TypeRepresentation struct to only accept type parameters in its initializer (so you know you’re storing a type and not an object). ObjectIdentifier accepts both objects and types.<br>&gt;<br>&gt; - Alex<br>&gt;<br>&gt; &gt; On Jul 1, 2016, at 10:57 AM, Keith Smiley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; This would be great. I&#39;ve solved this recently by making a TypeRepresentation<br>&gt; &gt; type that is initialized with any T, and conforms to Hashable. Of course<br>&gt; &gt; internally this just uses String(T), but at least that&#39;s abstracted from the<br>&gt; &gt; caller.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt; &gt;<br>&gt; &gt; On 07/01, Matthew Johnson via swift-evolution wrote:<br>&gt; &gt;&gt; +1 here as well.  It would be nice to have.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jul 1, 2016, at 9:15 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; +1 here, too. Looking like someone needs to write a full proposal! :P<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; l8r<br>&gt; &gt;&gt;&gt; Sean<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Jul 1, 2016, at 9:11 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; +1. I&#39;ve had to do this a couple times and ended up wrapping them in string interpolations, which makes me feel terrible.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; +1<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Additive question:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; 	• Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt; &gt;&gt;&gt;&gt;&gt; I really would want to use these in dictionaries or sets :)<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; [Any.Type: ValueType]<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt; &gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July  1, 2016 at 04:00:00pm</p></header><div class="content"><p>I’ll do it when we get the go for such additive proposals.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juli 2016 um 16:15:48, Sean Heber (sean at fifthace.com) schrieb:<br></p><p>+1 here, too. Looking like someone needs to write a full proposal! :P  <br></p><p>l8r  <br>Sean  <br></p><p><br>&gt; On Jul 1, 2016, at 9:11 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;  <br>&gt; +1. I&#39;ve had to do this a couple times and ended up wrapping them in string interpolations, which makes me feel terrible.  <br>&gt;  <br>&gt; On Fri, Jul 1, 2016 at 6:26 AM David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt; +1  <br>&gt;  <br>&gt;&gt; On Jul 1, 2016, at 8:20 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;&gt;  <br>&gt;&gt; Additive question:  <br>&gt;&gt;  <br>&gt;&gt; • Can a type instance of a type SomeType.self SomeType.Type be Hashable?  <br>&gt;&gt; I really would want to use these in dictionaries or sets :)  <br>&gt;&gt;  <br>&gt;&gt; [Any.Type: ValueType]  <br>&gt;&gt;  <br>&gt;&gt; Set&lt;Any.Type&gt; // Union type universe  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; --  <br>&gt;&gt; Adrian Zubarev  <br>&gt;&gt; Sent with Airmail  <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________  <br>&gt;&gt; swift-evolution mailing list  <br>&gt;&gt; swift-evolution at swift.org  <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt;  <br>&gt; _______________________________________________  <br>&gt; swift-evolution mailing list  <br>&gt; swift-evolution at swift.org  <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&gt; _______________________________________________  <br>&gt; swift-evolution mailing list  <br>&gt; swift-evolution at swift.org  <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/eae51816/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Discussion] Can we make `.Type` Hashable?</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July  2, 2016 at 09:00:00am</p></header><div class="content"><p>This is IMHO a loophole in the type system today: &#39;.Type&#39; being a contextual keyword that is part of no protocol, there is no formal definition for what its return type and what can be done is purely driven by the compiler implementation. I used to have my oen bread of typeId until I ran into ObjectIdentifier. This part of te language could use some finishing touches.<br>Regards<br>(From mobile)<br></p><p>&gt; On Jul 1, 2016, at 3:20 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Additive question:<br>&gt; <br>&gt; Can a type instance of a type SomeType.self SomeType.Type be Hashable?<br>&gt; I really would want to use these in dictionaries or sets :)<br>&gt; <br>&gt; [Any.Type: ValueType]<br>&gt; <br>&gt; Set&lt;Any.Type&gt; // Union type universe<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/d3b0ba1a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
