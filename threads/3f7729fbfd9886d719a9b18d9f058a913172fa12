<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>AnySequence and type erasure</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>June 17, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;m sure people here know about the problem that AnySequence, AnyGenerator,<br>etc solves.<br>In Swift, a protocol can have an associated type, which is kinda like<br>generics, but you cannot declare a variable like this:<br></p><p>let sequence: SequenceType&lt;Int&gt;<br></p><p>If you want a sequence, any sequence, over ints you need to wrap the<br>protocol in a new concrete, generic type, AnySequence&lt;T&gt; that itself<br>implements the protocol SequenceType, and where the associated type Element<br>is equal to the generic type T.<br></p><p>The standard library does this. And, like many others, I have tried to<br>implement this for my self, to try to better understand the problem, and I<br>expected that I would end up with a design very similar to what the<br>standard library does. However, I have not seen the need for the complex<br>boxing mechanism. I&#39;m probably misunderstanding something, though.<br></p><p>Can someone please look at this code, and give me constructive feedback? Is<br>this a novel and working solution, or am I missing something?:<br></p><p>struct AnyGenerator&lt;Element&gt;: GeneratorType {<br>    init&lt;G: GeneratorType where G.Element == Element&gt;(_ gen: G) {<br>        var gen = gen<br>        self._next = { gen.next() }<br>    }<br>    private let _next: () -&gt; Element?<br>    func next() -&gt; Element? {<br>        return _next()<br>    }<br>}<br></p><p>struct AnySequence&lt;Element&gt;: SequenceType {<br>    init&lt;S: SequenceType where S.Generator.Element == Element&gt;(_ seq: S) {<br>        self.underestimateCount = seq.underestimateCount<br>        self._generate = { AnyGenerator(seq.generate()) }<br>    }<br>    private let _generate: () -&gt; AnyGenerator&lt;Element&gt;<br>    func generate() -&gt; AnyGenerator&lt;Element&gt; {<br>        return _generate()<br>    }<br>    let underestimateCount: () -&gt; Int<br>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/3f77fa12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>AnySequence and type erasure</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 17, 2016 at 06:00:00am</p></header><div class="content"><p>On Fri, Jun 17, 2016 at 1:39 AM, Svein Halvor Halvorsen via<br>swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; I&#39;m sure people here know about the problem that AnySequence, AnyGenerator,<br>&gt; etc solves.<br>&gt; In Swift, a protocol can have an associated type, which is kinda like<br>&gt; generics, but you cannot declare a variable like this:<br>&gt;<br>&gt; let sequence: SequenceType&lt;Int&gt;<br>&gt;<br>&gt; If you want a sequence, any sequence, over ints you need to wrap the<br>&gt; protocol in a new concrete, generic type, AnySequence&lt;T&gt; that itself<br>&gt; implements the protocol SequenceType, and where the associated type Element<br>&gt; is equal to the generic type T.<br>&gt;<br>&gt; The standard library does this. And, like many others, I have tried to<br>&gt; implement this for my self, to try to better understand the problem, and I<br>&gt; expected that I would end up with a design very similar to what the standard<br>&gt; library does. However, I have not seen the need for the complex boxing<br>&gt; mechanism. I&#39;m probably misunderstanding something, though.<br>&gt;<br>&gt; Can someone please look at this code, and give me constructive feedback? Is<br>&gt; this a novel and working solution, or am I missing something?:<br></p><p>Hi,<br></p><p>Your design should work, but it won&#39;t provide optimal performance.<br>Sequence has a lot of requirements that can be customized by the<br>conforming type (e.g., map()).  We need to forward those to the<br>original type to get the best performance.<br></p><p>While you can create a closure for each of the forwarded methods,<br>let&#39;s say n in total, it is n times more wasteful compared to using<br>just a single reference like the standard library does.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>AnySequence and type erasure</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>June 17, 2016 at 07:00:00pm</p></header><div class="content"><p>Ok. Good to hear that I&#39;m not too far off :)<br></p><p>Can you provide me with an example of a sequence type or two that has some<br>map or other function that would benefit from an optimized wrapper? Or:<br>under what circumstances would the stdlib implementation outperform mine?<br>I&#39;m completely new to this all, and I&#39;m trying to understand. Could some<br>random access collection type parallelize a filter? If you want I guarantee<br>correct ordering, under what circumstances does some sequence type work<br>better than mere iteration?<br></p><p><br>fre. 17. jun. 2016 kl. 15.49 skrev Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br></p><p>&gt; On Fri, Jun 17, 2016 at 1:39 AM, Svein Halvor Halvorsen via<br>&gt; swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; I&#39;m sure people here know about the problem that AnySequence,<br>&gt; AnyGenerator,<br>&gt; &gt; etc solves.<br>&gt; &gt; In Swift, a protocol can have an associated type, which is kinda like<br>&gt; &gt; generics, but you cannot declare a variable like this:<br>&gt; &gt;<br>&gt; &gt; let sequence: SequenceType&lt;Int&gt;<br>&gt; &gt;<br>&gt; &gt; If you want a sequence, any sequence, over ints you need to wrap the<br>&gt; &gt; protocol in a new concrete, generic type, AnySequence&lt;T&gt; that itself<br>&gt; &gt; implements the protocol SequenceType, and where the associated type<br>&gt; Element<br>&gt; &gt; is equal to the generic type T.<br>&gt; &gt;<br>&gt; &gt; The standard library does this. And, like many others, I have tried to<br>&gt; &gt; implement this for my self, to try to better understand the problem, and<br>&gt; I<br>&gt; &gt; expected that I would end up with a design very similar to what the<br>&gt; standard<br>&gt; &gt; library does. However, I have not seen the need for the complex boxing<br>&gt; &gt; mechanism. I&#39;m probably misunderstanding something, though.<br>&gt; &gt;<br>&gt; &gt; Can someone please look at this code, and give me constructive feedback?<br>&gt; Is<br>&gt; &gt; this a novel and working solution, or am I missing something?:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; Your design should work, but it won&#39;t provide optimal performance.<br>&gt; Sequence has a lot of requirements that can be customized by the<br>&gt; conforming type (e.g., map()).  We need to forward those to the<br>&gt; original type to get the best performance.<br>&gt;<br>&gt; While you can create a closure for each of the forwarded methods,<br>&gt; let&#39;s say n in total, it is n times more wasteful compared to using<br>&gt; just a single reference like the standard library does.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/aed7538e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>AnySequence and type erasure</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 18, 2016 at 01:00:00am</p></header><div class="content"><p>On Fri, Jun 17, 2016 at 12:37 PM, Svein Halvor Halvorsen<br>&lt;svein.h at lvor.halvorsen.cc&gt; wrote:<br>&gt; Ok. Good to hear that I&#39;m not too far off :)<br>&gt;<br>&gt; Can you provide me with an example of a sequence type or two that has some<br>&gt; map or other function that would benefit from an optimized wrapper? Or:<br>&gt; under what circumstances would the stdlib implementation outperform mine?<br></p><p>Compare the default implementations of map() for Sequence and<br>Collection.  In the Sequence case, we don&#39;t know the size of the<br>resulting array, so we have to grow the resulting array as we pull the<br>elements from the sequence.  In the case of running Collection.map()<br>we know the final size from the count property.  In the case of Array<br>we can do even better and eliminate a check (the _expectEnd()<br>call).  However, certain collections where calculating the number of<br>elements might be expensive, can opt into the Sequence behavior (e.g.,<br>various string views); this is up to the designer of the specific<br>collection.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6cceede6579cba5bf1f48581ea904f1b?s=50"></div><header><strong>AnySequence and type erasure</strong> from <string>Svein Halvor Halvorsen</string> &lt;svein.h at lvor.halvorsen.cc&gt;<p>June 23, 2016 at 11:00:00am</p></header><div class="content"><p>2016-06-18 10:23 GMT+02:00 Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br></p><p>&gt; On Fri, Jun 17, 2016 at 12:37 PM, Svein Halvor Halvorsen<br>&gt; &lt;svein.h at lvor.halvorsen.cc&gt; wrote:<br>&gt; &gt; Ok. Good to hear that I&#39;m not too far off :)<br>&gt; &gt;<br>&gt; &gt; Can you provide me with an example of a sequence type or two that has<br>&gt; some<br>&gt; &gt; map or other function that would benefit from an optimized wrapper? Or:<br>&gt; &gt; under what circumstances would the stdlib implementation outperform mine?<br>&gt;<br>&gt; Compare the default implementations of map() for Sequence and<br>&gt; Collection.  In the Sequence case, we don&#39;t know the size of the<br>&gt; resulting array, so we have to grow the resulting array as we pull the<br>&gt; elements from the sequence.  In the case of running Collection.map()<br>&gt; we know the final size from the count property.  In the case of Array<br>&gt; we can do even better and eliminate a check (the _expectEnd()<br>&gt; call).  However, certain collections where calculating the number of<br>&gt; elements might be expensive, can opt into the Sequence behavior (e.g.,<br>&gt; various string views); this is up to the designer of the specific<br>&gt; collection.<br></p><p><br>Is this a problem in reality? The map() on Sequence uses<br>underestimatedCount to reserve capacity, and if the sequence wraps a<br>collection type, underestimatedCount is presumably O(1) and returns the<br>same value as count, non?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160623/85a3a256/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>AnySequence and type erasure</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 23, 2016 at 02:00:00am</p></header><div class="content"><p>On Thu, Jun 23, 2016 at 2:12 AM, Svein Halvor Halvorsen<br>&lt;svein.h at lvor.halvorsen.cc&gt; wrote:<br>&gt; 2016-06-18 10:23 GMT+02:00 Dmitri Gribenko &lt;gribozavr at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jun 17, 2016 at 12:37 PM, Svein Halvor Halvorsen<br>&gt;&gt; &lt;svein.h at lvor.halvorsen.cc&gt; wrote:<br>&gt;&gt; &gt; Ok. Good to hear that I&#39;m not too far off :)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Can you provide me with an example of a sequence type or two that has<br>&gt;&gt; &gt; some<br>&gt;&gt; &gt; map or other function that would benefit from an optimized wrapper? Or:<br>&gt;&gt; &gt; under what circumstances would the stdlib implementation outperform<br>&gt;&gt; &gt; mine?<br>&gt;&gt;<br>&gt;&gt; Compare the default implementations of map() for Sequence and<br>&gt;&gt; Collection.  In the Sequence case, we don&#39;t know the size of the<br>&gt;&gt; resulting array, so we have to grow the resulting array as we pull the<br>&gt;&gt; elements from the sequence.  In the case of running Collection.map()<br>&gt;&gt; we know the final size from the count property.  In the case of Array<br>&gt;&gt; we can do even better and eliminate a check (the _expectEnd()<br>&gt;&gt; call).  However, certain collections where calculating the number of<br>&gt;&gt; elements might be expensive, can opt into the Sequence behavior (e.g.,<br>&gt;&gt; various string views); this is up to the designer of the specific<br>&gt;&gt; collection.<br>&gt;<br>&gt;<br>&gt; Is this a problem in reality? The map() on Sequence uses underestimatedCount<br>&gt; to reserve capacity, and if the sequence wraps a collection type,<br>&gt; underestimatedCount is presumably O(1) and returns the same value as count,<br>&gt; non?<br></p><p>You can&#39;t call &#39;.count&#39; on a Sequence without potentially consuming<br>the sequence.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
