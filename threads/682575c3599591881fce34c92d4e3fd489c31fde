<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Python&#39;s multiple comparisons and multiple assignments</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 17, 2015 at 01:00:00pm</p></header><div class="content"><p>Some Python examples:<br></p><p>if 2 &lt; 3 &lt; 4 == 4 &lt;= 5 { … }<br></p><p>a = b = c = 1<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>Proposal: Python&#39;s multiple comparisons and multiple assignments</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>December 17, 2015 at 07:00:00pm</p></header><div class="content"><p>Hmm, I don’t think it’s worth the added complexity that it will surely result in. Also, for non-standard operators it’s hard to see how it would be evaluated. Would:<br></p><p>x op1 y op2 z<br></p><p>Turn into:<br></p><p>(x op1 y) &amp;&amp; (y op2 z)<br></p><p>for boolean-returning operators? I guess that could make sense, but I’m not sure I like the syntax much. I think it looks ok for x &lt; y &lt; z, but otherwise it gets confusing.<br></p><p>-Sune<br></p><p>&gt; On 17 Dec 2015, at 19:44, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Some Python examples:<br>&gt; <br>&gt; if 2 &lt; 3 &lt; 4 == 4 &lt;= 5 { … }<br>&gt; <br>&gt; a = b = c = 1<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Python&#39;s multiple comparisons and multiple assignments</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 17, 2015 at 08:00:00pm</p></header><div class="content"><p>Joe, Rob Rix, Scott Perry, and I actually tossed around some ideas about chained operators on Twitter &lt;https://twitter.com/jckarter/status/666321957458079744&gt; last month. My initial idea was just to make operators variadic:<br></p><p>&gt; func ☃(values: Int...) -&gt; Int<br>&gt; a ☃ b ☃ c ☃ d<br></p><p>But that doesn&#39;t allow mixing &lt; and &lt;=. I&#39;m fine with disallowing mixing in general, but those two you usually want to choose from. Joe&#39;s idea is a little more extensible:<br></p><p>&gt; operator •, ¶ { associativity chained(§) }<br>&gt; a • b ¶ c ==&gt; (a • b) § (b ¶ c)<br></p><p>But it&#39;s still a little weird. (Are there any useful chains other than &quot;&amp;&amp;&quot;?) Thus the canonical way to compare ranges remains the match operator:<br></p><p>a &lt;= b &lt; c<br>b ~= a..&lt;c<br></p><p>…as long as your lower bound uses &lt;=.<br></p><p>(P.S. You can totally fake this by overloading &lt; and &lt;= with a mess of operators and intermediate types, but it&#39;s pretty nasty, and I wouldn&#39;t inflict the errors you get out on an average developer.)<br></p><p><br>As for multiple assignments, we mainly didn&#39;t want people doing other things with the result of an assignment expression (e.g. &quot;foo(x = bar())&quot;). Chained assignment has interesting semantics for computed properties, though: for &quot;a.foo = b.bar = c&quot;, does &quot;a.foo&quot; get assigned the value of &quot;c&quot; or &quot;b.bar&quot;?<br></p><p>It&#39;s feasible, but it&#39;s not very common in practice, and it would mess up our AST a bit.<br></p><p>Jordan<br></p><p><br>&gt; On Dec 17, 2015, at 10:49 , Sune Foldager via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hmm, I don’t think it’s worth the added complexity that it will surely result in. Also, for non-standard operators it’s hard to see how it would be evaluated. Would:<br>&gt; <br>&gt; x op1 y op2 z<br>&gt; <br>&gt; Turn into:<br>&gt; <br>&gt; (x op1 y) &amp;&amp; (y op2 z)<br>&gt; <br>&gt; for boolean-returning operators? I guess that could make sense, but I’m not sure I like the syntax much. I think it looks ok for x &lt; y &lt; z, but otherwise it gets confusing.<br>&gt; <br>&gt; -Sune<br>&gt; <br>&gt;&gt; On 17 Dec 2015, at 19:44, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Some Python examples:<br>&gt;&gt; <br>&gt;&gt; if 2 &lt; 3 &lt; 4 == 4 &lt;= 5 { … }<br>&gt;&gt; <br>&gt;&gt; a = b = c = 1<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/285e3f36/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Proposal: Python&#39;s multiple comparisons and multiple assignments</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>So no man is an<br>island, but snowman is an<br>operator - hah!<br></p><p>-Kenny<br></p><p>&gt; On Dec 17, 2015, at 8:30 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Joe, Rob Rix, Scott Perry, and I actually tossed around some ideas about chained operators on Twitter last month. My initial idea was just to make operators variadic:<br>&gt; <br>&gt;&gt; func ☃(values: Int...) -&gt; Int<br>&gt;&gt; a ☃ b ☃ c ☃ d<br>&gt; <br>&gt; But that doesn&#39;t allow mixing &lt; and &lt;=. I&#39;m fine with disallowing mixing in general, but those two you usually want to choose from. Joe&#39;s idea is a little more extensible:<br>&gt; <br>&gt;&gt; operator •, ¶ { associativity chained(§) }<br>&gt;&gt; a • b ¶ c ==&gt; (a • b) § (b ¶ c)<br>&gt; <br>&gt; But it&#39;s still a little weird. (Are there any useful chains other than &quot;&amp;&amp;&quot;?) Thus the canonical way to compare ranges remains the match operator:<br>&gt; <br>&gt; a &lt;= b &lt; c<br>&gt; b ~= a..&lt;c<br>&gt; <br>&gt; …as long as your lower bound uses &lt;=.<br>&gt; <br>&gt; (P.S. You can totally fake this by overloading &lt; and &lt;= with a mess of operators and intermediate types, but it&#39;s pretty nasty, and I wouldn&#39;t inflict the errors you get out on an average developer.)<br>&gt; <br>&gt; <br>&gt; As for multiple assignments, we mainly didn&#39;t want people doing other things with the result of an assignment expression (e.g. &quot;foo(x = bar())&quot;). Chained assignment has interesting semantics for computed properties, though: for &quot;a.foo = b.bar = c&quot;, does &quot;a.foo&quot; get assigned the value of &quot;c&quot; or &quot;b.bar&quot;?<br>&gt; <br>&gt; It&#39;s feasible, but it&#39;s not very common in practice, and it would mess up our AST a bit.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 10:49 , Sune Foldager via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hmm, I don’t think it’s worth the added complexity that it will surely result in. Also, for non-standard operators it’s hard to see how it would be evaluated. Would:<br>&gt;&gt; <br>&gt;&gt; x op1 y op2 z<br>&gt;&gt; <br>&gt;&gt; Turn into:<br>&gt;&gt; <br>&gt;&gt; (x op1 y) &amp;&amp; (y op2 z)<br>&gt;&gt; <br>&gt;&gt; for boolean-returning operators? I guess that could make sense, but I’m not sure I like the syntax much. I think it looks ok for x &lt; y &lt; z, but otherwise it gets confusing.<br>&gt;&gt; <br>&gt;&gt; -Sune<br>&gt;&gt; <br>&gt;&gt;&gt; On 17 Dec 2015, at 19:44, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some Python examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if 2 &lt; 3 &lt; 4 == 4 &lt;= 5 { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a = b = c = 1<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
