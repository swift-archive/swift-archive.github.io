<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>Assertion Failure When Using the swift-DEVELOPMENT-SNAPSHOT-2016-08-04-a Xcode Toolchain</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift Users,<br></p><p>This afternoon I updated my Xcode to Xcode 8 beta 4, and tried to compile one of my previously migrated Swift 3 projects. Along with a couple of renames, the compiler kept crashing due to a segmentation fault. Since the issue appeared to be similar to SR-2227, which was supposedly fixed with a pull request a couple days ago, I downloaded today’s snapshot toolchain. The new toolchain throws an assertion:<br></p><p>Assertion failed: (value != OpenExistentials.end() &amp;&amp; &quot;didn&#39;t see this OVE in a containing OpenExistentialExpr?&quot;), function walkToExprPre, file /Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/lib/Sema/CSDiag.cpp, line 3082.<br>0  swift                    0x000000010a932ebb llvm::sys::PrintStackTrace(llvm::raw_ostream&amp;) + 43<br>1  swift                    0x000000010a932106 llvm::sys::RunSignalHandlers() + 70<br>2  swift                    0x000000010a93360f SignalHandler(int) + 383<br>3  libsystem_platform.dylib 0x00007fffa6122d7a _sigtramp + 26<br>4  libsystem_platform.dylib 0x0000000100000001 _sigtramp + 1508758177<br>5  swift                    0x000000010a93335e abort + 14<br>6  swift                    0x000000010a933341 __assert_rtn + 81<br>7  swift                    0x0000000108431879 eraseOpenedExistentials(swift::Expr*&amp;)::ExistentialEraser::walkToExprPre(swift::Expr*) + 361<br>8  swift                    0x00000001085b8ea5 (anonymous namespace)::Traversal::visit(swift::Expr*) + 4981<br>9  swift                    0x00000001085b6f75 swift::Expr::walk(swift::ASTWalker&amp;) + 53<br>10 swift                    0x000000010842e375 (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet&lt;TCCFlags, unsigned int&gt;, swift::ExprTypeCheckListener*) + 1221<br>11 swift                    0x0000000108434ea3 (anonymous namespace)::FailureDiagnosis::typeCheckArgumentChildIndependently(swift::Expr*, swift::Type, (anonymous namespace)::CalleeCandidateInfo const&amp;, swift::OptionSet&lt;TCCFlags, unsigned int&gt;) + 1987<br>12 swift                    0x000000010843e9a1 (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) + 913<br>13 swift                    0x0000000108428f6a swift::ASTVisitor&lt;(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void&gt;::visit(swift::Expr*) + 170<br>14 swift                    0x0000000108422888 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 104<br>15 swift                    0x00000001084289a8 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::Expr*) + 4056<br>16 swift                    0x00000001084ab665 swift::TypeChecker::solveForExpression(swift::Expr*&amp;, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&amp;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::OptionSet&lt;swift::TypeCheckExprFlags, unsigned int&gt;) + 917<br>17 swift                    0x00000001084b17d1 swift::TypeChecker::typeCheckExpression(swift::Expr*&amp;, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet&lt;swift::TypeCheckExprFlags, unsigned int&gt;, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) + 625<br>18 swift                    0x000000010852c061 swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 545<br>19 swift                    0x000000010852c543 swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 1795<br>20 swift                    0x000000010852bf8e swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 334<br>21 swift                    0x000000010852b369 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&amp;) + 25<br>22 swift                    0x000000010852a63f swift::TypeChecker::typeCheckFunctionBodyUntil(swift::FuncDecl*, swift::SourceLoc) + 383<br>23 swift                    0x000000010852a463 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 35<br>24 swift                    0x000000010852afe4 swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) + 180<br>25 swift                    0x00000001084e5c56 typeCheckFunctionsAndExternalDecls(swift::TypeChecker&amp;) + 166<br>26 swift                    0x00000001084e68f0 swift::performTypeChecking(swift::SourceFile&amp;, swift::TopLevelContext&amp;, swift::OptionSet&lt;swift::TypeCheckingFlags, unsigned int&gt;, unsigned int, unsigned int) + 1568<br>27 swift                    0x000000010818798c swift::CompilerInstance::performSema() + 3916<br>28 swift                    0x0000000107c82ad1 performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, llvm::ArrayRef&lt;char const*&gt;, int&amp;, swift::FrontendObserver*) + 449<br>29 swift                    0x0000000107c8163f swift::performFrontend(llvm::ArrayRef&lt;char const*&gt;, char const*, void*, swift::FrontendObserver*) + 2895<br>30 swift                    0x0000000107c43ea0 main + 2448<br>31 libdyld.dylib            0x00007fffa5f16255 start + 1<br></p><p>The stack trace doesn’t really help tell me what’s going wrong; does anyone have the same issue or know why this is happening?<br></p><p>Thanks,<br>Saagar Jha<br></p><p>P.S. Should I file a bug on the JIRA?<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160804/b8e8a9bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Assertion Failure When Using the swift-DEVELOPMENT-SNAPSHOT-2016-08-04-a Xcode Toolchain</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>August  4, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Aug 4, 2016, at 8:51 PM, Saagar Jha via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift Users,<br>&gt; <br>&gt; This afternoon I updated my Xcode to Xcode 8 beta 4, and tried to compile one of my previously migrated Swift 3 projects. Along with a couple of renames, the compiler kept crashing due to a segmentation fault. Since the issue appeared to be similar to SR-2227, which was supposedly fixed with a pull request a couple days ago, I downloaded today’s snapshot toolchain. The new toolchain throws an assertion:<br>&gt; <br>&gt; Assertion failed: (value != OpenExistentials.end() &amp;&amp; &quot;didn&#39;t see this OVE in a containing OpenExistentialExpr?&quot;), function walkToExprPre, file /Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/lib/Sema/CSDiag.cpp, line 3082.<br>&gt; 0  swift                    0x000000010a932ebb llvm::sys::PrintStackTrace(llvm::raw_ostream&amp;) + 43<br>&gt; 1  swift                    0x000000010a932106 llvm::sys::RunSignalHandlers() + 70<br>&gt; 2  swift                    0x000000010a93360f SignalHandler(int) + 383<br>&gt; 3  libsystem_platform.dylib 0x00007fffa6122d7a _sigtramp + 26<br>&gt; 4  libsystem_platform.dylib 0x0000000100000001 _sigtramp + 1508758177<br>&gt; 5  swift                    0x000000010a93335e abort + 14<br>&gt; 6  swift                    0x000000010a933341 __assert_rtn + 81<br>&gt; 7  swift                    0x0000000108431879 eraseOpenedExistentials(swift::Expr*&amp;)::ExistentialEraser::walkToExprPre(swift::Expr*) + 361<br>&gt; 8  swift                    0x00000001085b8ea5 (anonymous namespace)::Traversal::visit(swift::Expr*) + 4981<br>&gt; 9  swift                    0x00000001085b6f75 swift::Expr::walk(swift::ASTWalker&amp;) + 53<br>&gt; 10 swift                    0x000000010842e375 (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet&lt;TCCFlags, unsigned int&gt;, swift::ExprTypeCheckListener*) + 1221<br>&gt; 11 swift                    0x0000000108434ea3 (anonymous namespace)::FailureDiagnosis::typeCheckArgumentChildIndependently(swift::Expr*, swift::Type, (anonymous namespace)::CalleeCandidateInfo const&amp;, swift::OptionSet&lt;TCCFlags, unsigned int&gt;) + 1987<br>&gt; 12 swift                    0x000000010843e9a1 (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) + 913<br>&gt; 13 swift                    0x0000000108428f6a swift::ASTVisitor&lt;(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void&gt;::visit(swift::Expr*) + 170<br>&gt; 14 swift                    0x0000000108422888 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 104<br>&gt; 15 swift                    0x00000001084289a8 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::Expr*) + 4056<br>&gt; 16 swift                    0x00000001084ab665 swift::TypeChecker::solveForExpression(swift::Expr*&amp;, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&amp;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::OptionSet&lt;swift::TypeCheckExprFlags, unsigned int&gt;) + 917<br>&gt; 17 swift                    0x00000001084b17d1 swift::TypeChecker::typeCheckExpression(swift::Expr*&amp;, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet&lt;swift::TypeCheckExprFlags, unsigned int&gt;, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) + 625<br>&gt; 18 swift                    0x000000010852c061 swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 545<br>&gt; 19 swift                    0x000000010852c543 swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 1795<br>&gt; 20 swift                    0x000000010852bf8e swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 334<br>&gt; 21 swift                    0x000000010852b369 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&amp;) + 25<br>&gt; 22 swift                    0x000000010852a63f swift::TypeChecker::typeCheckFunctionBodyUntil(swift::FuncDecl*, swift::SourceLoc) + 383<br>&gt; 23 swift                    0x000000010852a463 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 35<br>&gt; 24 swift                    0x000000010852afe4 swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) + 180<br>&gt; 25 swift                    0x00000001084e5c56 typeCheckFunctionsAndExternalDecls(swift::TypeChecker&amp;) + 166<br>&gt; 26 swift                    0x00000001084e68f0 swift::performTypeChecking(swift::SourceFile&amp;, swift::TopLevelContext&amp;, swift::OptionSet&lt;swift::TypeCheckingFlags, unsigned int&gt;, unsigned int, unsigned int) + 1568<br>&gt; 27 swift                    0x000000010818798c swift::CompilerInstance::performSema() + 3916<br>&gt; 28 swift                    0x0000000107c82ad1 performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, llvm::ArrayRef&lt;char const*&gt;, int&amp;, swift::FrontendObserver*) + 449<br>&gt; 29 swift                    0x0000000107c8163f swift::performFrontend(llvm::ArrayRef&lt;char const*&gt;, char const*, void*, swift::FrontendObserver*) + 2895<br>&gt; 30 swift                    0x0000000107c43ea0 main + 2448<br>&gt; 31 libdyld.dylib            0x00007fffa5f16255 start + 1<br>&gt; <br>&gt; The stack trace doesn’t really help tell me what’s going wrong; does anyone have the same issue or know why this is happening?<br></p><p>It’s a crash while trying to emit a diagnostic after failing to type check an expression. We often print the expression in question after the stack trace, so you might check to see if that is being emitted. It may help you find a work-around.<br></p><p>&gt; Thanks,<br>&gt; Saagar Jha<br>&gt; <br>&gt; P.S. Should I file a bug on the JIRA?<br></p><p>Yes, please!<br></p><p>Any crash is worthy of a bug report on JIRA. We’ll need a test case along with instructions on how to reproduce the issue using that test case. Small, self-contained source files are always ideal, but an entire project works too if you cannot find a way to isolate it.<br></p><p>Mark<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160804/bcf41494/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>Assertion Failure When Using the swift-DEVELOPMENT-SNAPSHOT-2016-08-04-a Xcode Toolchain</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  5, 2016 at 11:00:00am</p></header><div class="content"><p>Thanks, I managed to create a small test project with the same issue; I’ve filed it as SR-2288 &lt;https://bugs.swift.org/browse/SR-2288&gt;.<br></p><p>Saagar Jha<br></p><p><br></p><p>&gt; On Aug 4, 2016, at 21:01, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 4, 2016, at 8:51 PM, Saagar Jha via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift Users,<br>&gt;&gt; <br>&gt;&gt; This afternoon I updated my Xcode to Xcode 8 beta 4, and tried to compile one of my previously migrated Swift 3 projects. Along with a couple of renames, the compiler kept crashing due to a segmentation fault. Since the issue appeared to be similar to SR-2227, which was supposedly fixed with a pull request a couple days ago, I downloaded today’s snapshot toolchain. The new toolchain throws an assertion:<br>&gt;&gt; <br>&gt;&gt; Assertion failed: (value != OpenExistentials.end() &amp;&amp; &quot;didn&#39;t see this OVE in a containing OpenExistentialExpr?&quot;), function walkToExprPre, file /Users/buildnode/jenkins/workspace/oss-swift-package-osx/swift/lib/Sema/CSDiag.cpp, line 3082.<br>&gt;&gt; 0  swift                    0x000000010a932ebb llvm::sys::PrintStackTrace(llvm::raw_ostream&amp;) + 43<br>&gt;&gt; 1  swift                    0x000000010a932106 llvm::sys::RunSignalHandlers() + 70<br>&gt;&gt; 2  swift                    0x000000010a93360f SignalHandler(int) + 383<br>&gt;&gt; 3  libsystem_platform.dylib 0x00007fffa6122d7a _sigtramp + 26<br>&gt;&gt; 4  libsystem_platform.dylib 0x0000000100000001 _sigtramp + 1508758177<br>&gt;&gt; 5  swift                    0x000000010a93335e abort + 14<br>&gt;&gt; 6  swift                    0x000000010a933341 __assert_rtn + 81<br>&gt;&gt; 7  swift                    0x0000000108431879 eraseOpenedExistentials(swift::Expr*&amp;)::ExistentialEraser::walkToExprPre(swift::Expr*) + 361<br>&gt;&gt; 8  swift                    0x00000001085b8ea5 (anonymous namespace)::Traversal::visit(swift::Expr*) + 4981<br>&gt;&gt; 9  swift                    0x00000001085b6f75 swift::Expr::walk(swift::ASTWalker&amp;) + 53<br>&gt;&gt; 10 swift                    0x000000010842e375 (anonymous namespace)::FailureDiagnosis::typeCheckChildIndependently(swift::Expr*, swift::Type, swift::ContextualTypePurpose, swift::OptionSet&lt;TCCFlags, unsigned int&gt;, swift::ExprTypeCheckListener*) + 1221<br>&gt;&gt; 11 swift                    0x0000000108434ea3 (anonymous namespace)::FailureDiagnosis::typeCheckArgumentChildIndependently(swift::Expr*, swift::Type, (anonymous namespace)::CalleeCandidateInfo const&amp;, swift::OptionSet&lt;TCCFlags, unsigned int&gt;) + 1987<br>&gt;&gt; 12 swift                    0x000000010843e9a1 (anonymous namespace)::FailureDiagnosis::visitApplyExpr(swift::ApplyExpr*) + 913<br>&gt;&gt; 13 swift                    0x0000000108428f6a swift::ASTVisitor&lt;(anonymous namespace)::FailureDiagnosis, bool, void, void, void, void, void&gt;::visit(swift::Expr*) + 170<br>&gt;&gt; 14 swift                    0x0000000108422888 swift::constraints::ConstraintSystem::diagnoseFailureForExpr(swift::Expr*) + 104<br>&gt;&gt; 15 swift                    0x00000001084289a8 swift::constraints::ConstraintSystem::salvage(llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::Expr*) + 4056<br>&gt;&gt; 16 swift                    0x00000001084ab665 swift::TypeChecker::solveForExpression(swift::Expr*&amp;, swift::DeclContext*, swift::Type, swift::FreeTypeVariableBinding, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem&amp;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::OptionSet&lt;swift::TypeCheckExprFlags, unsigned int&gt;) + 917<br>&gt;&gt; 17 swift                    0x00000001084b17d1 swift::TypeChecker::typeCheckExpression(swift::Expr*&amp;, swift::DeclContext*, swift::TypeLoc, swift::ContextualTypePurpose, swift::OptionSet&lt;swift::TypeCheckExprFlags, unsigned int&gt;, swift::ExprTypeCheckListener*, swift::constraints::ConstraintSystem*) + 625<br>&gt;&gt; 18 swift                    0x000000010852c061 swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 545<br>&gt;&gt; 19 swift                    0x000000010852c543 swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 1795<br>&gt;&gt; 20 swift                    0x000000010852bf8e swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(swift::Stmt*) + 334<br>&gt;&gt; 21 swift                    0x000000010852b369 (anonymous namespace)::StmtChecker::typeCheckBody(swift::BraceStmt*&amp;) + 25<br>&gt;&gt; 22 swift                    0x000000010852a63f swift::TypeChecker::typeCheckFunctionBodyUntil(swift::FuncDecl*, swift::SourceLoc) + 383<br>&gt;&gt; 23 swift                    0x000000010852a463 swift::TypeChecker::typeCheckAbstractFunctionBodyUntil(swift::AbstractFunctionDecl*, swift::SourceLoc) + 35<br>&gt;&gt; 24 swift                    0x000000010852afe4 swift::TypeChecker::typeCheckAbstractFunctionBody(swift::AbstractFunctionDecl*) + 180<br>&gt;&gt; 25 swift                    0x00000001084e5c56 typeCheckFunctionsAndExternalDecls(swift::TypeChecker&amp;) + 166<br>&gt;&gt; 26 swift                    0x00000001084e68f0 swift::performTypeChecking(swift::SourceFile&amp;, swift::TopLevelContext&amp;, swift::OptionSet&lt;swift::TypeCheckingFlags, unsigned int&gt;, unsigned int, unsigned int) + 1568<br>&gt;&gt; 27 swift                    0x000000010818798c swift::CompilerInstance::performSema() + 3916<br>&gt;&gt; 28 swift                    0x0000000107c82ad1 performCompile(swift::CompilerInstance&amp;, swift::CompilerInvocation&amp;, llvm::ArrayRef&lt;char const*&gt;, int&amp;, swift::FrontendObserver*) + 449<br>&gt;&gt; 29 swift                    0x0000000107c8163f swift::performFrontend(llvm::ArrayRef&lt;char const*&gt;, char const*, void*, swift::FrontendObserver*) + 2895<br>&gt;&gt; 30 swift                    0x0000000107c43ea0 main + 2448<br>&gt;&gt; 31 libdyld.dylib            0x00007fffa5f16255 start + 1<br>&gt;&gt; <br>&gt;&gt; The stack trace doesn’t really help tell me what’s going wrong; does anyone have the same issue or know why this is happening?<br>&gt; <br>&gt; It’s a crash while trying to emit a diagnostic after failing to type check an expression. We often print the expression in question after the stack trace, so you might check to see if that is being emitted. It may help you find a work-around.<br>&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Saagar Jha<br>&gt;&gt; <br>&gt;&gt; P.S. Should I file a bug on the JIRA?<br>&gt; <br>&gt; Yes, please!<br>&gt; <br>&gt; Any crash is worthy of a bug report on JIRA. We’ll need a test case along with instructions on how to reproduce the issue using that test case. Small, self-contained source files are always ideal, but an entire project works too if you cannot find a way to isolate it.<br>&gt; <br>&gt; Mark<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160805/eca72d38/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
