<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>What about failable literal convertibles?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 12, 2016 at 11:00:00pm</p></header><div class="content"><p>What about having a protocol for having failable literal convertible initializers for literal optionals?<br>struct AtLeast3&lt;T&gt; : FailableArrayLiteralConvertible {<br>    ...<br>    init?(arrayLiteral elements: T...) {<br>        guard elements.count &gt;= 3 else { return nil }<br>        ...<br>    }<br>}<br>var bar: AtLeast3? = [1, 2]? // bar is &#39;Optional&lt;AtLeast3&gt;.None&#39;<br>bar = [1,2,3] // bar is &#39;Optional&lt;AtLeast3&gt;.Some([1,2,3])&#39;<br></p><p>Seems handy for when your types are literal convertible in principle, but you need to do some validation.<br></p><p>Thoughts?<br></p><p>- Dave Sweeris<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
