<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed316d3a58253c2d51b67b1ed906bf5?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Beck</string> &lt;swift at tnku.co&gt;<p>July  4, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt; <br>&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt; <br>&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; <br>&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; <br>&gt; Krystof<br>&gt; <br>&gt; <br>&gt;  <br></p><p>I really hope a proposal that solves this problem gets through, but I’m not sure blocking optionals specifically is the way to go. In particular there are other types that don’t have a clean string representation. I think that by default string interpolation (meaning String creation specifically) should only accept ValuePreservingStringConvertible types and produce an error for everything else.<br></p><p>But, in addition, we need a way to quickly print out values for debugging. I think a new string type (DebugString for example) would be useful for this. print and similar functions could take that as an argument and any type could be interpolated in it’s argument. Further, if you simply say `let a = “\(something)”` and something isn’t ValuePreservingStringConvertible, the type of a should then be DebugString. Converting to string should be strait forward, but require a small step to make it obvious that you are using a string that could have weird characters.<br></p><p>David Beck<br>http://davidbeck.co<br>http://twitter.com/davbeck<br>http://facebook.com/davbeck<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/1e722d0a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>July  4, 2016 at 05:00:00pm</p></header><div class="content"><p>This is now being tracked as https://bugs.swift.org/browse/SR-1882 &lt;https://bugs.swift.org/browse/SR-1882&gt; - Chris (Lattner) thought this should not go through the official proposal process as something more complicated, but just add a warning with redundant parentheses around it silencing the warning (http://article.gmane.org/gmane.comp.lang.swift.evolution/20960 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/20960&gt;).<br></p><p>The latest version of the proposal (that&#39;s not going to happen) can be found here - https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385 &lt;https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385&gt; - and I&#39;ve implemented it for my own use here:<br></p><p>https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift &lt;https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift&gt;<br></p><p>I find it better readable than using ?? or extra parentheses around the Optional...<br></p><p>&gt; On Jul 4, 2016, at 5:31 PM, David Beck via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt; &gt; <br>&gt; &gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt; &gt; <br>&gt; &gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; &gt; <br>&gt; &gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; &gt; <br>&gt; &gt; Krystof<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt;  <br>&gt; <br>&gt; I really hope a proposal that solves this problem gets through, but I’m not sure blocking optionals specifically is the way to go. In particular there are other types that don’t have a clean string representation. I think that by default string interpolation (meaning String creation specifically) should only accept ValuePreservingStringConvertible types and produce an error for everything else.<br>&gt; <br>&gt; But, in addition, we need a way to quickly print out values for debugging. I think a new string type (DebugString for example) would be useful for this. print and similar functions could take that as an argument and any type could be interpolated in it’s argument. Further, if you simply say `let a = “\(something)”` and something isn’t ValuePreservingStringConvertible, the type of a should then be DebugString. Converting to string should be strait forward, but require a small step to make it obvious that you are using a string that could have weird characters.<br>&gt; <br>&gt; David Beck<br>&gt; http://davidbeck.co &lt;http://davidbeck.co/&gt;<br>&gt; http://twitter.com/davbeck &lt;http://twitter.com/davbeck&gt;<br>&gt; http://facebook.com/davbeck &lt;http://facebook.com/davbeck&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/8aec1d41/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>July  5, 2016 at 03:00:00pm</p></header><div class="content"><p>What would be a better alternative is the ability to have a String Format<br>Token that would unwrap a value, like so<br></p><p>let string = String(format: &quot;http://%?/&quot;, url)<br></p><p>None is unwrapped to &quot;http:///&quot;<br>Some is unwrapped to &quot;http://myurl.com/&quot;<br></p><p>I think this would be a good trade off rather than having to do an awkward<br>guard dance, make your code unsafe with force-unwraps or end-up with<br>&quot;Optional()&quot; in your string.<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 4 July 2016 at 16:41, Krystof Vasa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is now being tracked as https://bugs.swift.org/browse/SR-1882 -<br>&gt; Chris (Lattner) thought this should not go through the official proposal<br>&gt; process as something more complicated, but just add a warning with<br>&gt; redundant parentheses around it silencing the warning (<br>&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/20960).<br>&gt;<br>&gt; The latest version of the proposal (that&#39;s not going to happen) can be<br>&gt; found here -<br>&gt; https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385 -<br>&gt; and I&#39;ve implemented it for my own use here:<br>&gt;<br>&gt;<br>&gt; https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift<br>&gt;<br>&gt; I find it better readable than using ?? or extra parentheses around the<br>&gt; Optional...<br>&gt;<br>&gt; On Jul 4, 2016, at 5:31 PM, David Beck via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt; one of its weaknesses.<br>&gt; &gt;<br>&gt; &gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt; with an optional by mistake and the result is then far from the expected<br>&gt; result.<br>&gt; &gt;<br>&gt; &gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt; happened since as well.<br>&gt; &gt;<br>&gt; &gt; The user will seldomly want to really get the output<br>&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt; believe this should be addressed by a warning to force the user to check<br>&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt; return a non-optional value to force the current behavior.<br>&gt; &gt;<br>&gt; &gt; Krystof<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt; I really hope a proposal that solves this problem gets through, but I’m<br>&gt; not sure blocking optionals specifically is the way to go. In particular<br>&gt; there are other types that don’t have a clean string representation. I<br>&gt; think that by default string interpolation (meaning String creation<br>&gt; specifically) should only accept ValuePreservingStringConvertible types and<br>&gt; produce an error for everything else.<br>&gt;<br>&gt; But, in addition, we need a way to quickly print out values for debugging.<br>&gt; I think a new string type (DebugString for example) would be useful for<br>&gt; this. print and similar functions could take that as an argument and any<br>&gt; type could be interpolated in it’s argument. Further, if you simply say<br>&gt; `let a = “\(something)”` and something<br>&gt; isn’t ValuePreservingStringConvertible, the type of a should then be<br>&gt; DebugString. Converting to string should be strait forward, but require a<br>&gt; small step to make it obvious that you are using a string that could have<br>&gt; weird characters.<br>&gt;<br>&gt; *David Beck*<br>&gt; http://davidbeck.co<br>&gt; http://twitter.com/davbeck<br>&gt; http://facebook.com/davbeck<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/963d0c31/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>I would suggest something like the following (yeah I would URLComponents<br>for this but this is just an example)... basically a short hand of some<br>type for (a != nil ? a : b) to deal with optional in string construction.<br></p><p>&quot;http://\(self.username + &quot;@&quot; : &quot;default&quot;)@<br>my.host.com/pictures/\(self.pictureId : &quot;&quot;)<br>On Tue, Jul 5, 2016 at 7:14 AM James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What would be a better alternative is the ability to have a String Format<br>&gt; Token that would unwrap a value, like so<br>&gt;<br>&gt; let string = String(format: &quot;http://%?/&quot;, url)<br>&gt;<br>&gt; None is unwrapped to &quot;http:///&quot;<br>&gt; Some is unwrapped to &quot;http://myurl.com/&quot;<br>&gt;<br>&gt; I think this would be a good trade off rather than having to do an awkward<br>&gt; guard dance, make your code unsafe with force-unwraps or end-up with<br>&gt; &quot;Optional()&quot; in your string.<br>&gt;<br>&gt; *___________________________________*<br>&gt;<br>&gt; *James⎥Head of Trolls*<br>&gt;<br>&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt; &lt;http://supmenow.com&gt;*<br>&gt;<br>&gt; *Sup*<br>&gt;<br>&gt; *Runway East *<br>&gt;<br>&gt; *10 Finsbury Square*<br>&gt;<br>&gt; *London*<br>&gt;<br>&gt; * EC2A 1AF *<br>&gt;<br>&gt; On 4 July 2016 at 16:41, Krystof Vasa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; This is now being tracked as https://bugs.swift.org/browse/SR-1882 -<br>&gt;&gt; Chris (Lattner) thought this should not go through the official proposal<br>&gt;&gt; process as something more complicated, but just add a warning with<br>&gt;&gt; redundant parentheses around it silencing the warning (<br>&gt;&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/20960).<br>&gt;&gt;<br>&gt;&gt; The latest version of the proposal (that&#39;s not going to happen) can be<br>&gt;&gt; found here -<br>&gt;&gt; https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385 -<br>&gt;&gt; and I&#39;ve implemented it for my own use here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift<br>&gt;&gt;<br>&gt;&gt; I find it better readable than using ?? or extra parentheses around the<br>&gt;&gt; Optional...<br>&gt;&gt;<br>&gt;&gt; On Jul 4, 2016, at 5:31 PM, David Beck via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt;&gt; one of its weaknesses.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt;&gt; with an optional by mistake and the result is then far from the expected<br>&gt;&gt; result.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt;&gt; happened since as well.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The user will seldomly want to really get the output<br>&gt;&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt;&gt; believe this should be addressed by a warning to force the user to check<br>&gt;&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt;&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt;&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt;&gt; return a non-optional value to force the current behavior.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Krystof<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt; I really hope a proposal that solves this problem gets through, but I’m<br>&gt;&gt; not sure blocking optionals specifically is the way to go. In particular<br>&gt;&gt; there are other types that don’t have a clean string representation. I<br>&gt;&gt; think that by default string interpolation (meaning String creation<br>&gt;&gt; specifically) should only accept ValuePreservingStringConvertible types and<br>&gt;&gt; produce an error for everything else.<br>&gt;&gt;<br>&gt;&gt; But, in addition, we need a way to quickly print out values for<br>&gt;&gt; debugging. I think a new string type (DebugString for example) would be<br>&gt;&gt; useful for this. print and similar functions could take that as an argument<br>&gt;&gt; and any type could be interpolated in it’s argument. Further, if you simply<br>&gt;&gt; say `let a = “\(something)”` and something<br>&gt;&gt; isn’t ValuePreservingStringConvertible, the type of a should then be<br>&gt;&gt; DebugString. Converting to string should be strait forward, but require a<br>&gt;&gt; small step to make it obvious that you are using a string that could have<br>&gt;&gt; weird characters.<br>&gt;&gt;<br>&gt;&gt; *David Beck*<br>&gt;&gt; http://davidbeck.co<br>&gt;&gt; http://twitter.com/davbeck<br>&gt;&gt; http://facebook.com/davbeck<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/6b38955a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>Oops remove the duplicate &quot;@&quot; in my example.<br>On Tue, Jul 5, 2016 at 7:27 AM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; I would suggest something like the following (yeah I would URLComponents<br>&gt; for this but this is just an example)... basically a short hand of some<br>&gt; type for (a != nil ? a : b) to deal with optional in string construction.<br>&gt;<br>&gt; &quot;http://\(self.username + &quot;@&quot; : &quot;default&quot;)@<br>&gt; my.host.com/pictures/\(self.pictureId<br>&gt; &lt;http://my.host.com/pictures/%5C(self.pictureId&gt; : &quot;&quot;)<br>&gt; On Tue, Jul 5, 2016 at 7:14 AM James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; What would be a better alternative is the ability to have a String Format<br>&gt;&gt; Token that would unwrap a value, like so<br>&gt;&gt;<br>&gt;&gt; let string = String(format: &quot;http://%?/&quot;, url)<br>&gt;&gt;<br>&gt;&gt; None is unwrapped to &quot;http:///&quot;<br>&gt;&gt; Some is unwrapped to &quot;http://myurl.com/&quot;<br>&gt;&gt;<br>&gt;&gt; I think this would be a good trade off rather than having to do an<br>&gt;&gt; awkward guard dance, make your code unsafe with force-unwraps or end-up<br>&gt;&gt; with &quot;Optional()&quot; in your string.<br>&gt;&gt;<br>&gt;&gt; *___________________________________*<br>&gt;&gt;<br>&gt;&gt; *James⎥Head of Trolls*<br>&gt;&gt;<br>&gt;&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt;&gt; &lt;http://supmenow.com&gt;*<br>&gt;&gt;<br>&gt;&gt; *Sup*<br>&gt;&gt;<br>&gt;&gt; *Runway East *<br>&gt;&gt;<br>&gt;&gt; *10 Finsbury Square*<br>&gt;&gt;<br>&gt;&gt; *London*<br>&gt;&gt;<br>&gt;&gt; * EC2A 1AF *<br>&gt;&gt;<br>&gt;&gt; On 4 July 2016 at 16:41, Krystof Vasa via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; This is now being tracked as https://bugs.swift.org/browse/SR-1882 -<br>&gt;&gt;&gt; Chris (Lattner) thought this should not go through the official proposal<br>&gt;&gt;&gt; process as something more complicated, but just add a warning with<br>&gt;&gt;&gt; redundant parentheses around it silencing the warning (<br>&gt;&gt;&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/20960).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The latest version of the proposal (that&#39;s not going to happen) can be<br>&gt;&gt;&gt; found here -<br>&gt;&gt;&gt; https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385 -<br>&gt;&gt;&gt; and I&#39;ve implemented it for my own use here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I find it better readable than using ?? or extra parentheses around the<br>&gt;&gt;&gt; Optional...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 4, 2016, at 5:31 PM, David Beck via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt;&gt;&gt; one of its weaknesses.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt;&gt;&gt; with an optional by mistake and the result is then far from the expected<br>&gt;&gt;&gt; result.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt;&gt;&gt; happened since as well.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; The user will seldomly want to really get the output<br>&gt;&gt;&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt;&gt;&gt; believe this should be addressed by a warning to force the user to check<br>&gt;&gt;&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt;&gt;&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt;&gt;&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt;&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt;&gt;&gt; return a non-optional value to force the current behavior.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Krystof<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I really hope a proposal that solves this problem gets through, but I’m<br>&gt;&gt;&gt; not sure blocking optionals specifically is the way to go. In particular<br>&gt;&gt;&gt; there are other types that don’t have a clean string representation. I<br>&gt;&gt;&gt; think that by default string interpolation (meaning String creation<br>&gt;&gt;&gt; specifically) should only accept ValuePreservingStringConvertible types and<br>&gt;&gt;&gt; produce an error for everything else.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But, in addition, we need a way to quickly print out values for<br>&gt;&gt;&gt; debugging. I think a new string type (DebugString for example) would be<br>&gt;&gt;&gt; useful for this. print and similar functions could take that as an argument<br>&gt;&gt;&gt; and any type could be interpolated in it’s argument. Further, if you simply<br>&gt;&gt;&gt; say `let a = “\(something)”` and something<br>&gt;&gt;&gt; isn’t ValuePreservingStringConvertible, the type of a should then be<br>&gt;&gt;&gt; DebugString. Converting to string should be strait forward, but require a<br>&gt;&gt;&gt; small step to make it obvious that you are using a string that could have<br>&gt;&gt;&gt; weird characters.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *David Beck*<br>&gt;&gt;&gt; http://davidbeck.co<br>&gt;&gt;&gt; http://twitter.com/davbeck<br>&gt;&gt;&gt; http://facebook.com/davbeck<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/76508109/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
