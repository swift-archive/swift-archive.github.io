<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/265868676ac8f12472cc3cc0fc59d827?s=50"></div><header><strong>Fwd: Draft Proposal SwiftPM System Module Search Paths</strong> from <string>Nicky Gerritsen</string> &lt;nickygerritsen at me.com&gt;<p>March 24, 2016 at 06:00:00am</p></header><div class="content"><p>Whoops, now to the list.<br></p><p>Nicky<br></p><p>Begin forwarded message:<br></p><p>&gt; From: Nicky Gerritsen &lt;nickygerritsen at me.com&gt;<br>&gt; Date: 24 maart 2016 06:56:52 CET<br>&gt; To: Max Howell &lt;max.howell at apple.com&gt;<br>&gt; Subject: Re: [swift-evolution] Draft Proposal SwiftPM System Module Search Paths<br>&gt; <br>&gt; First of all, +1 on the idea.<br>&gt; <br>&gt; But second a question: in the Package.swift file providers section, what would need to be done in for example the &quot;apt&quot; case it a package has a different name on Debian and Ubuntu?<br>&gt; This is something that happens occasionally, so we should at least be able to support this.<br>&gt; <br>&gt; Is this something that can be tackled by using (optional) extra parameters on the enum values?<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Nicky<br>&gt; <br>&gt;&gt; On 23 mrt. 2016, at 19:10, Max Howell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; SwiftPM System Module Search Paths<br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Author: Max Howell<br>&gt;&gt; Status: Awaiting review<br>&gt;&gt; Review manager: Anders Bertelrud<br>&gt;&gt; Introduction<br>&gt;&gt; Swift is able to import C libraries in the same manner as Swift libraries.<br>&gt;&gt; <br>&gt;&gt; For this to occur the library must be represented by a clang module-map file.<br>&gt;&gt; <br>&gt;&gt; The current system for using these module-map files with SwiftPM works, but with a number of caveats that must be addressed.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; The current implementation of system module packages have a number of problems:<br>&gt;&gt; <br>&gt;&gt; Install locations vary across platforms and modulemap files require absolute paths<br>&gt;&gt; /usr/lib:/usr/local/lib is not always a sufficient -L search path<br>&gt;&gt; /usr/include:/usr/local/include is not always a sufficient -I C compiler search path<br>&gt;&gt; Installing the system library is left up to the end-user to figure out<br>&gt;&gt; For example to import a module map representing the GTK library, the include search path must be supplemented with -I/usr/include/gtk so that a number of includes in the gtk.h header can be sourced for the complete modular definition of GTK.<br>&gt;&gt; <br>&gt;&gt; For example to import a module map representing the GTK library a user must first have a copy of GTK and its headers installed. On Debian based systems the install name for this system package is libgtk-3-0-dev which is not entirely intuitive.<br>&gt;&gt; <br>&gt;&gt; For example, Homebrew and MacPorts on OS X install to prefixes other than /usr..modulemap files must specify headers with absolute paths. The standard we encourage with modulemaps is for the headers to be specified with an assumed prefix of /usr, but you will not find eg. jpeglib.h at /usr/include/jpeglib.h if it is installed with Homebrew or MacPorts.<br>&gt;&gt; <br>&gt;&gt; Proposed Solution<br>&gt;&gt; We propose that SwiftPM gains the ability to use the cross-platform pkg-config tool so that it can query pkg-config for the missing path and flag arguments.<br>&gt;&gt; <br>&gt;&gt; We propose that SwiftPM gains the ability to use the cross-platform pkg-config tool to identify when the system package is not installed to a /usr and in such a case preprocess the modulemap changing the prefix it uses.<br>&gt;&gt; <br>&gt;&gt; We propose that Package.swift is supplemented with metadata that provides the package-install-name for specific platforms.<br>&gt;&gt; <br>&gt;&gt; Detailed Design<br>&gt;&gt; Solving Path/Flags Issues<br>&gt;&gt; Some of our problems can be solved by using the cross platform tool: pkg-config.<br>&gt;&gt; <br>&gt;&gt; A C package can provide a pkg-config file (.pc) which describes:<br>&gt;&gt; <br>&gt;&gt; Its install location<br>&gt;&gt; Supplementary C-flags that should be used when building against this library<br>&gt;&gt; If SwiftPM used the .pc file that comes with packages, this solves problems 1 through 3.<br>&gt;&gt; <br>&gt;&gt; Of the tickets we currently have open describing issues using Swift-system-module-packages, reading the .pc file would fix all of them.<br>&gt;&gt; <br>&gt;&gt; It is a convention to name the .pc file after the library link-name, so we can determine which .pc file to ask pkg-config for by parsing the .modulemap file in the Swift package.<br>&gt;&gt; <br>&gt;&gt; Providing Package Install Names<br>&gt;&gt; Package.swift would be supplemented like so:<br>&gt;&gt; <br>&gt;&gt; let package = Package(<br>&gt;&gt;     name: &quot;CFoo&quot;,<br>&gt;&gt;     providers: .Brew(installName: &quot;foo&quot;),<br>&gt;&gt;                 .Apt(installName: &quot;libfoo-dev&quot;),<br>&gt;&gt; )<br>&gt;&gt; Thus, in the event of build failure for modules that depend on this package we provide additional help to the user:<br>&gt;&gt; <br>&gt;&gt; error: failed to build module `bar&#39;<br>&gt;&gt; note: you may need to install `foo&#39; using your system-packager:<br>&gt;&gt; <br>&gt;&gt;     apt-get install libfoo-dev<br>&gt;&gt; Since the syntax to provide this information uses an explicit enum we can add code for each enum to detect which system packagers should be recommended. The community will need to write the code for their own platforms. It also means that if a specific packager requires additional parameters, they can be added on a per enum basis.<br>&gt;&gt; <br>&gt;&gt; Impact on Existing Code<br>&gt;&gt; There will be no impact on existing code as this feature simply improves an existing feature making new code possible.<br>&gt;&gt; <br>&gt;&gt; Alternatives Considered<br>&gt;&gt; A clear alternative is allowing additional flags to be specified in a system-module package’s Package.swift.<br>&gt;&gt; <br>&gt;&gt; However since these paths and flags will vary by platform this would because a large matrix that is quite a maintenance burden. Really this information is recorded already, in the system package itself, and in fact almost all packages nowadays provide it in a .pc pkg-config file.<br>&gt;&gt; <br>&gt;&gt; Also we do not want to allow arbitrary flags to be specified in Package.swift, this allows packages too much power to break a large dependency graph with bad compiles. The only entity that understands the whole graph and can manage the build without breakage is SwiftPM, and allowing packages themselves to add arbitrary flags prevents SwiftPM from being able to understand and control the build ensuring reliability and preventing “Dependency Hell”.<br>&gt;&gt; <br>&gt;&gt; Future Directions<br>&gt;&gt; The build system could be made more reliable by having the specific packager provide the information that this proposal garners from pkg-config. For example, Homebrew installs everything into independent directories, using these directories instead of more general POSIX search paths means there is no danger of edge-case search path collisions and the wrong libraries being picked up.<br>&gt;&gt; <br>&gt;&gt; If this was done pkg-config could become just one option for providing this data, and be used only as a fallback.<br>&gt;&gt; <br>&gt;&gt; We could add an additional flag so that deployment of Swift Packages could be made simpler and system dependencies be installed automatically.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/63e658db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Draft Proposal SwiftPM System Module Search Paths</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>March 24, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; First of all, +1 on the idea.<br>&gt; <br>&gt; But second a question: in the Package.swift file providers section, what would need to be done in for example the &quot;apt&quot; case it a package has a different name on Debian and Ubuntu?<br>&gt; This is something that happens occasionally, so we should at least be able to support this.<br>&gt; <br>&gt; Is this something that can be tackled by using (optional) extra parameters on the enum values?<br></p><p>Good point, this is lacking from the proposal and should be addressed.<br></p><p>An immediate suggestion is (like you say):<br></p><p>    .Apt(.Ubuntu(version: “15.10”, installName: “&quot;), .Debian(“bar”))<br></p><p>Though I think this is getting confusing, so this is not a concrete proposal.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/46bcae18/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
