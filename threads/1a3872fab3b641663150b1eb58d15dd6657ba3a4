<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6f13bb8ea87a42e72699d1c78dc06464?s=50"></div><header><strong>Type Inferencing For Error Handling (try catch blocks)</strong> from <string>Manav Gabhawala</string> &lt;manav1907 at gmail.com&gt;<p>December  4, 2015 at 07:00:00pm</p></header><div class="content"><p>First of all, Swift is an absolute dream of a programming language and is really taking the future of programming in the right direction.<br></p><p>However, it seems backwards to me that everything in swift is type safe and complete (like enum cases) but error handling seems lacking on that end. It would be a huge feature if the compiler could infer the types of errors functions throw and make sure you catch all the different types of errors at the call site. The compiler could also chain the types through multiple throwing function callers. This feature would require no extra work on the programmers part because the compiler would infer the types of errors being thrown. For example,<br></p><p><br>func foo() throws<br>{<br>	...<br>	throw ErrorType1.BadRequest<br>	...<br>	throw ErrorType1.NoAuthentication<br>	...<br>	throw ErrorType2.NoResourceFound<br>}<br>func main()<br>{<br>	do <br>	{<br>		foo()<br>	}<br>	catch (ErrorType1.BadRequest)<br>	{<br>			<br>	}<br>	catch (ErrorType2.NoResourceFound)<br>	{<br>	}<br>	// Compiler error because ErrorType1.NoAuthentication is not included.<br>}<br></p><p>Errors can also be chained together such that each function statically identifies the types thrown and if a call is made to a throwing function all the uncaught types are propagated out of the call stack. This would firstly be beneficial because we wouldn’t need the ridiculous empty catch { } block at the end that most people end up doing and secondly would ensure programmers are completely and always aware the possible errors that can be thrown by the function calls they make.<br></p><p>Regards,<br>Manav<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/1a38a3a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Type Inferencing For Error Handling (try catch blocks)</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December  4, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 4:04 PM, Manav Gabhawala &lt;manav1907 at gmail.com&gt; wrote:<br>&gt; irst of all, Swift is an absolute dream of a programming language and is really taking the future of programming in the right direction.<br>&gt; <br>&gt; However, it seems backwards to me that everything in swift is type safe and complete (like enum cases) but error handling seems lacking on that end. It would be a huge feature if the compiler could infer the types of errors functions throw and make sure you catch all the different types of errors at the call site. The compiler could also chain the types through multiple throwing function callers. This feature would require no extra work on the programmers part because the compiler would infer the types of errors being thrown. For example,<br></p><p>This is a global type-checking problem.  It’s completely blocked by any dynamic features (like protocol or class methods) and library boundaries, so outside of toy examples, you will end up needing exhaustive pattern-matching pretty much everywhere.<br></p><p>John.<br></p><p><br>&gt; <br>&gt; <br>&gt; func foo() throws<br>&gt; {<br>&gt; 	...<br>&gt; 	throw ErrorType1.BadRequest<br>&gt; 	...<br>&gt; 	throw ErrorType1.NoAuthentication<br>&gt; 	...<br>&gt; 	throw ErrorType2.NoResourceFound<br>&gt; }<br>&gt; func main()<br>&gt; {<br>&gt; 	do <br>&gt; 	{<br>&gt; 		foo()<br>&gt; 	}<br>&gt; 	catch (ErrorType1.BadRequest)<br>&gt; 	{<br>&gt; 		<br>&gt; 	}<br>&gt; 	catch (ErrorType2.NoResourceFound)<br>&gt; 	{<br>&gt; 	}<br>&gt; 	// Compiler error because ErrorType1.NoAuthentication is not included.<br>&gt; }<br>&gt; <br>&gt; Errors can also be chained together such that each function statically identifies the types thrown and if a call is made to a throwing function all the uncaught types are propagated out of the call stack. This would firstly be beneficial because we wouldn’t need the ridiculous empty catch { } block at the end that most people end up doing and secondly would ensure programmers are completely and always aware the possible errors that can be thrown by the function calls they make.<br>&gt; <br>&gt; Regards,<br>&gt; Manav<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/c351496d/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Type Inferencing For Error Handling (try catch blocks)</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  5, 2015 at 11:00:00am</p></header><div class="content"><p>Related: https://lists.swift.org/pipermail/swift-evolution/2015-December/000076.html<br></p><p>Regards,<br>Adrian Kashivskyy<br>iOS Developer at Netguru<br></p><p>&gt; Wiadomość napisana przez John McCall &lt;rjmccall at apple.com&gt; w dniu 05.12.2015, o godz. 01:15:<br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 4:04 PM, Manav Gabhawala &lt;manav1907 at gmail.com &lt;mailto:manav1907 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; irst of all, Swift is an absolute dream of a programming language and is really taking the future of programming in the right direction.<br>&gt;&gt; <br>&gt;&gt; However, it seems backwards to me that everything in swift is type safe and complete (like enum cases) but error handling seems lacking on that end. It would be a huge feature if the compiler could infer the types of errors functions throw and make sure you catch all the different types of errors at the call site. The compiler could also chain the types through multiple throwing function callers. This feature would require no extra work on the programmers part because the compiler would infer the types of errors being thrown. For example,<br>&gt; <br>&gt; This is a global type-checking problem.  It’s completely blocked by any dynamic features (like protocol or class methods) and library boundaries, so outside of toy examples, you will end up needing exhaustive pattern-matching pretty much everywhere.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; func foo() throws<br>&gt;&gt; {<br>&gt;&gt; 	...<br>&gt;&gt; 	throw ErrorType1.BadRequest<br>&gt;&gt; 	...<br>&gt;&gt; 	throw ErrorType1.NoAuthentication<br>&gt;&gt; 	...<br>&gt;&gt; 	throw ErrorType2.NoResourceFound<br>&gt;&gt; }<br>&gt;&gt; func main()<br>&gt;&gt; {<br>&gt;&gt; 	do <br>&gt;&gt; 	{<br>&gt;&gt; 		foo()<br>&gt;&gt; 	}<br>&gt;&gt; 	catch (ErrorType1.BadRequest)<br>&gt;&gt; 	{<br>&gt;&gt; 		<br>&gt;&gt; 	}<br>&gt;&gt; 	catch (ErrorType2.NoResourceFound)<br>&gt;&gt; 	{<br>&gt;&gt; 	}<br>&gt;&gt; 	// Compiler error because ErrorType1.NoAuthentication is not included.<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Errors can also be chained together such that each function statically identifies the types thrown and if a call is made to a throwing function all the uncaught types are propagated out of the call stack. This would firstly be beneficial because we wouldn’t need the ridiculous empty catch { } block at the end that most people end up doing and secondly would ensure programmers are completely and always aware the possible errors that can be thrown by the function calls they make.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; Manav<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/9bbee5b9/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>Type Inferencing For Error Handling (try catch blocks)</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>One problem I see with that pattern, is that the exception declared will be part of the ABI, and adding a new exception will break backward compatibility.<br></p><p>As one goal of swift 3 is to provide a stable ABI by working around fragile ABI pattern, adding such a feature would probably be very difficult, and maybe not worth it.<br></p><p>&gt; Le 5 déc. 2015 à 11:18, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; a écrit :<br>&gt; <br>&gt; Related: https://lists.swift.org/pipermail/swift-evolution/2015-December/000076.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000076.html&gt;<br>&gt; <br>&gt; Regards,<br>&gt; Adrian Kashivskyy<br>&gt; iOS Developer at Netguru<br>&gt; <br>&gt;&gt; Wiadomość napisana przez John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; w dniu 05.12.2015, o godz. 01:15:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 4:04 PM, Manav Gabhawala &lt;manav1907 at gmail.com &lt;mailto:manav1907 at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; irst of all, Swift is an absolute dream of a programming language and is really taking the future of programming in the right direction.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, it seems backwards to me that everything in swift is type safe and complete (like enum cases) but error handling seems lacking on that end. It would be a huge feature if the compiler could infer the types of errors functions throw and make sure you catch all the different types of errors at the call site. The compiler could also chain the types through multiple throwing function callers. This feature would require no extra work on the programmers part because the compiler would infer the types of errors being thrown. For example,<br>&gt;&gt; <br>&gt;&gt; This is a global type-checking problem.  It’s completely blocked by any dynamic features (like protocol or class methods) and library boundaries, so outside of toy examples, you will end up needing exhaustive pattern-matching pretty much everywhere.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo() throws<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; 	...<br>&gt;&gt;&gt; 	throw ErrorType1.BadRequest<br>&gt;&gt;&gt; 	...<br>&gt;&gt;&gt; 	throw ErrorType1.NoAuthentication<br>&gt;&gt;&gt; 	...<br>&gt;&gt;&gt; 	throw ErrorType2.NoResourceFound<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; func main()<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; 	do <br>&gt;&gt;&gt; 	{<br>&gt;&gt;&gt; 		foo()<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; 	catch (ErrorType1.BadRequest)<br>&gt;&gt;&gt; 	{<br>&gt;&gt;&gt; 		<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; 	catch (ErrorType2.NoResourceFound)<br>&gt;&gt;&gt; 	{<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; 	// Compiler error because ErrorType1.NoAuthentication is not included.<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Errors can also be chained together such that each function statically identifies the types thrown and if a call is made to a throwing function all the uncaught types are propagated out of the call stack. This would firstly be beneficial because we wouldn’t need the ridiculous empty catch { } block at the end that most people end up doing and secondly would ensure programmers are completely and always aware the possible errors that can be thrown by the function calls they make.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; Manav<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/b510c805/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
