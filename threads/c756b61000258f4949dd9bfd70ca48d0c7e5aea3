<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  2, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>	Cheers,<br>	Doug Gregor<br>	Review Manager<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160102/c756aea3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January  2, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think it&#39;s a great idea. The shift in meaning when you use `typealias` in a protocol is enormous—not only is an associated type far more different from a typealias than most protocol requirements, but it also changes the way you can use the protocol itself—and sharing a keyword gives you no hint of that. It also means that you can&#39;t search the documentation for the keyword to understand what it means. Switching to an `associatedtype` keyword fixes these issues.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Absolutely. I have seen nothing but confusion surrounding the use of associated types in protocols, and anything that might clear that up is a great idea.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Swift typically doesn&#39;t shy away from introducing new keywords to accurately capture semantics, and that&#39;s what `associatedtype` does.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have not used any such languages.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve participated in some of the discussions of this proposal, particularly the discussion of alternative keywords. There I advocated `associated`, but I will admit that `associatedtype` is slightly clearer.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  2, 2016 at 11:00:00pm</p></header><div class="content"><p>On Sat, Jan 2, 2016, at 10:38 PM, Douglas Gregor wrote:<br>&gt; * What is your evaluation of the proposal?<br></p><p>+1<br></p><p>I have a preference for `associated` instead of `associatedtype`, but<br>it&#39;s not a big deal.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br></p><p>Personally I don&#39;t think it&#39;s a particularly significant problem, but it<br>is a small one that this change would help with, and the change itself<br>is pretty minor (and can be automated in 100% of cases).<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br></p><p>Rust has the same feature, although it uses the keyword `type` instead<br>of `typealias`. And they still use the same keyword `type` for<br>associated types inside of traits. But rust uses associated types much<br>more sparingly than Swift does (Rust traits can have generic type<br>parameters, and in fact associated types were a fairly late addition to<br>the language). Swift is also much more of a teaching language than Rust<br>is, so I think this change is quite reasonable for Swift.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br></p><p>I followed the original swift-evolution thread and read the proposal<br>again just now.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160102/08782b59/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January  3, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.  A typealias in a protocol and a typealias anywhere else are 2 very different things.<br></p><p>* One is almost a preprocessor macro<br>* The other basically defines the protocol as a generic type, which has a lot of strange follow-on consequences<br></p><p>There are plenty &lt;http://stackoverflow.com/questions/27725803/how-to-use-generic-protocol-as-a-variable-type&gt; of questions &lt;https://groups.google.com/forum/#!topic/swift-language/jzElQYwe9sM&gt; online related to this confusion.<br></p><p>In addition the change is trivial and code could be transitioned automatically.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>The choice of keyword &quot;associatedtype&quot; is already used in a common compiler error message:<br></p><p>&gt; protocol &#39;Printable&#39; can only be used as a generic constraint because it has Self or associated type requirements<br></p><p><br>Using &quot;associatedtype&quot; here is consistent with that error message and makes it more understandable for new users.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I am an occasional user of Rust; Rust uses the same keyword (&quot;type&quot;) in both of these cases.  IMO that choice is suffers from the same problems in Rust that it does here.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p><br>One &quot;potential&quot; problem with this proposal is that it technically forbids the use of a &quot;real&quot; typealias in a protocol e.g.<br></p><p>protocol Foo {<br>    typealias F = Int<br>}<br></p><p>is now illegal.<br></p><p>To evaluate the severity of this problem I checked a private codebase with 47 usages of typealias.  One usage of the 47 would be illegal:<br></p><p>protocol Foo {<br>	  #if arch(x86_64) || arch(arm64)<br>                typealias secondstype = Int64<br>                typealias usecstype = Int64<br>          #else<br>                typealias secondstype = __darwin_time_t<br>                typealias usecstype = __darwin_suseconds_t<br>           #endif<br>	func setTimeout(s: secondstype, u: usecstype) throws<br>}<br></p><p>I refactored this to move the typealiases to top level.  That is not ideal, but I think it is outweighed by the advantages of this proposal.<br></p><p>While auditing this codebase for illegal typealiases I did find a comment that was quite confused about the difference between typealias and associatedtype.  So that convinces me even more about the importance of this proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/dc6fa5c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>January  3, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Drew,<br></p><p>Thanks for the review, just a quick remark:<br></p><p>“Real” type aliases are already forbidden inside protocols, so this proposal wouldn’t change that.<br>(According to the grammar, a protocol body can only contain: property, method, initializer, subscript, or associated type member declarations)<br></p><p>In your example, secondstype and usecstype were associated types with initial values. To convince yourself, try to create this function<br>func bar(_: Foo) { }<br>and you should see the &quot;can only be used as a generic constraint because it has Self or associated type requirements” error.<br></p><p>I initially wanted to allow type aliases inside protocols, and I was told type aliases weren’t requirements, so they shouldn’t be defined inside protocols, which makes sense to me.<br></p><p>We might want to reconsider this, but I think it is outside the scope of this proposal.<br></p><p>Loïc<br></p><p>&gt; On Jan 3, 2016, at 11:46 AM, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; +1<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes.  A typealias in a protocol and a typealias anywhere else are 2 very different things.<br>&gt; <br>&gt; * One is almost a preprocessor macro<br>&gt; * The other basically defines the protocol as a generic type, which has a lot of strange follow-on consequences<br>&gt; <br>&gt; There are plenty of questions online related to this confusion.<br>&gt; <br>&gt; In addition the change is trivial and code could be transitioned automatically.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; The choice of keyword &quot;associatedtype&quot; is already used in a common compiler error message:<br>&gt; <br>&gt;&gt; protocol &#39;Printable&#39; can only be used as a generic constraint because it has Self or associated type requirements<br>&gt; <br>&gt; Using &quot;associatedtype&quot; here is consistent with that error message and makes it more understandable for new users.<br>&gt; <br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I am an occasional user of Rust; Rust uses the same keyword (&quot;type&quot;) in both of these cases.  IMO that choice is suffers from the same problems in Rust that it does here.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; One &quot;potential&quot; problem with this proposal is that it technically forbids the use of a &quot;real&quot; typealias in a protocol e.g.<br>&gt; <br>&gt; protocol Foo {<br>&gt;     typealias F = Int<br>&gt; }<br>&gt; <br>&gt; is now illegal.<br>&gt; <br>&gt; To evaluate the severity of this problem I checked a private codebase with 47 usages of typealias.  One usage of the 47 would be illegal:<br>&gt; <br>&gt; protocol Foo {<br>&gt; 	  #if arch(x86_64) || arch(arm64)<br>&gt;                 typealias secondstype = Int64<br>&gt;                 typealias usecstype = Int64<br>&gt;           #else<br>&gt;                 typealias secondstype = __darwin_time_t<br>&gt;                 typealias usecstype = __darwin_suseconds_t<br>&gt;            #endif<br>&gt; 	func setTimeout(s: secondstype, u: usecstype) throws<br>&gt; }<br>&gt; <br>&gt; I refactored this to move the typealiases to top level.  That is not ideal, but I think it is outweighed by the advantages of this proposal.<br>&gt; <br>&gt; While auditing this codebase for illegal typealiases I did find a comment that was quite confused about the difference between typealias and associatedtype.  So that convinces me even more about the importance of this proposal.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January  3, 2016 at 05:00:00am</p></header><div class="content"><p>LOL<br></p><p>I don&#39;t think my you can get a stronger +1 for removing this than &quot;reviewer doesn&#39;t understand the feature&quot;!<br></p><p>&gt; On Jan 3, 2016, at 5:41 AM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt; <br>&gt; Hi Drew,<br>&gt; <br>&gt; Thanks for the review, just a quick remark:<br>&gt; <br>&gt; “Real” type aliases are already forbidden inside protocols, so this proposal wouldn’t change that.<br>&gt; (According to the grammar, a protocol body can only contain: property, method, initializer, subscript, or associated type member declarations)<br>&gt; <br>&gt; In your example, secondstype and usecstype were associated types with initial values. To convince yourself, try to create this function<br>&gt; func bar(_: Foo) { }<br>&gt; and you should see the &quot;can only be used as a generic constraint because it has Self or associated type requirements” error.<br>&gt; <br>&gt; I initially wanted to allow type aliases inside protocols, and I was told type aliases weren’t requirements, so they shouldn’t be defined inside protocols, which makes sense to me.<br>&gt; <br>&gt; We might want to reconsider this, but I think it is outside the scope of this proposal.<br>&gt; <br>&gt; Loïc<br>&gt; <br>&gt;&gt; On Jan 3, 2016, at 11:46 AM, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes.  A typealias in a protocol and a typealias anywhere else are 2 very different things.<br>&gt;&gt; <br>&gt;&gt; * One is almost a preprocessor macro<br>&gt;&gt; * The other basically defines the protocol as a generic type, which has a lot of strange follow-on consequences<br>&gt;&gt; <br>&gt;&gt; There are plenty of questions online related to this confusion.<br>&gt;&gt; <br>&gt;&gt; In addition the change is trivial and code could be transitioned automatically.<br>&gt;&gt; <br>&gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; The choice of keyword &quot;associatedtype&quot; is already used in a common compiler error message:<br>&gt;&gt; <br>&gt;&gt;&gt; protocol &#39;Printable&#39; can only be used as a generic constraint because it has Self or associated type requirements<br>&gt;&gt; <br>&gt;&gt; Using &quot;associatedtype&quot; here is consistent with that error message and makes it more understandable for new users.<br>&gt;&gt; <br>&gt;&gt;&gt;    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; I am an occasional user of Rust; Rust uses the same keyword (&quot;type&quot;) in both of these cases.  IMO that choice is suffers from the same problems in Rust that it does here.<br>&gt;&gt; <br>&gt;&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; One &quot;potential&quot; problem with this proposal is that it technically forbids the use of a &quot;real&quot; typealias in a protocol e.g.<br>&gt;&gt; <br>&gt;&gt; protocol Foo {<br>&gt;&gt;    typealias F = Int<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; is now illegal.<br>&gt;&gt; <br>&gt;&gt; To evaluate the severity of this problem I checked a private codebase with 47 usages of typealias.  One usage of the 47 would be illegal:<br>&gt;&gt; <br>&gt;&gt; protocol Foo {<br>&gt;&gt;      #if arch(x86_64) || arch(arm64)<br>&gt;&gt;                typealias secondstype = Int64<br>&gt;&gt;                typealias usecstype = Int64<br>&gt;&gt;          #else<br>&gt;&gt;                typealias secondstype = __darwin_time_t<br>&gt;&gt;                typealias usecstype = __darwin_suseconds_t<br>&gt;&gt;           #endif<br>&gt;&gt;    func setTimeout(s: secondstype, u: usecstype) throws<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I refactored this to move the typealiases to top level.  That is not ideal, but I think it is outweighed by the advantages of this proposal.<br>&gt;&gt; <br>&gt;&gt; While auditing this codebase for illegal typealiases I did find a comment that was quite confused about the difference between typealias and associatedtype.  So that convinces me even more about the importance of this proposal.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>On Sun, Jan 3, 2016, at 03:41 AM, Loïc Lecrenier via swift-evolution wrote:<br>&gt; Hi Drew,<br>&gt; <br>&gt; Thanks for the review, just a quick remark:<br>&gt; <br>&gt; “Real” type aliases are already forbidden inside protocols, so this proposal wouldn’t change that.<br>&gt; (According to the grammar, a protocol body can only contain: property, method, initializer, subscript, or associated type member declarations)<br>&gt; <br>&gt; In your example, secondstype and usecstype were associated types with initial values. To convince yourself, try to create this function<br>&gt; func bar(_: Foo) { }<br>&gt; and you should see the &quot;can only be used as a generic constraint because it has Self or associated type requirements” error.<br>&gt; <br>&gt; I initially wanted to allow type aliases inside protocols, and I was told type aliases weren’t requirements, so they shouldn’t be defined inside protocols, which makes sense to me.<br>&gt; <br>&gt; We might want to reconsider this, but I think it is outside the scope of this proposal.<br></p><p>I agree that protocols shouldn&#39;t have typealiases, but I would be in favor of protocol extensions having them:<br></p><p>extension SequenceType {<br>    typealias Element = Generator.Element<br>}<br></p><p>But it is definitely outside the scope of this proposal.<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>January  3, 2016 at 07:00:00am</p></header><div class="content"><p>I like this.<br></p><p>&gt; On Jan 3, 2016, at 1:38 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>It’s a good idea and improves the language.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, the existing situation is comprehensible (if you think like a language-implementer) but highly non-intuitive and generally sub-optimal for language users.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes; conservation-of-reserved-terms is valuable, but giving different things different names fits the feel much better here.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>To the extent I’m aware of analogous situations in other languages, none of them actually seem to use distinct keywords, but they also don’t have the confusing situation Swift has vis-a-vis typealiases with concrete definitions (in protocols).<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read, plus having been bit by issues the proposal addresses numerous times.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/86aeb044/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>January  3, 2016 at 07:00:00am</p></header><div class="content"><p>+1 from me. It is a solid change that addresses an oddity in the language.<br></p><p>On Sun, Jan 3, 2016 at 7:27 AM, plx via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I like this.<br>&gt;<br>&gt; On Jan 3, 2016, at 1:38 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for<br>&gt; associated type declarations” begins now and runs through Wednesday,<br>&gt; January 6th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt;<br>&gt; It’s a good idea and improves the language.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt;<br>&gt;<br>&gt; Yes, the existing situation is comprehensible (if you think like a<br>&gt; language-implementer) but highly non-intuitive and generally sub-optimal<br>&gt; for language users.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; Yes; conservation-of-reserved-terms is valuable, but giving different<br>&gt; things different names fits the feel much better here.<br>&gt;<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt;<br>&gt; To the extent I’m aware of analogous situations in other languages, none<br>&gt; of them actually seem to use distinct keywords, but they also don’t have<br>&gt; the confusing situation Swift has vis-a-vis typealiases with concrete<br>&gt; definitions (in protocols).<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt;<br>&gt; Quick read, plus having been bit by issues the proposal addresses numerous<br>&gt; times.<br>&gt;<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/6984aef4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January  3, 2016 at 04:00:00pm</p></header><div class="content"><p>+1 from me too.<br></p><p>(My vote takes into account the various alternatives were put on the table and weeded down thoughtfully to the one we&#39;re voting on.)<br></p><p>-- E<br></p><p><br>&gt; On Jan 3, 2016, at 5:57 AM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 from me. It is a solid change that addresses an oddity in the language.<br>&gt; <br>&gt; On Sun, Jan 3, 2016 at 7:27 AM, plx via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I like this.<br>&gt; <br>&gt;&gt; On Jan 3, 2016, at 1:38 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; It’s a good idea and improves the language.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, the existing situation is comprehensible (if you think like a language-implementer) but highly non-intuitive and generally sub-optimal for language users.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes; conservation-of-reserved-terms is valuable, but giving different things different names fits the feel much better here.<br>&gt; <br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; To the extent I’m aware of analogous situations in other languages, none of them actually seem to use distinct keywords, but they also don’t have the confusing situation Swift has vis-a-vis typealiases with concrete definitions (in protocols).<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick read, plus having been bit by issues the proposal addresses numerous times.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/e70d1b6a/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>January  3, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 03 Jan 2016, at 07:38, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I am in favor of this for the same reasons mentioned by the previous reviewers.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so. <br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I am only aware of Rust and I haven&#39;t used that enough to make any meaningful comparisons.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal and followed the previous threads discussing the proposal and the keyword.<br></p><p>Speaking of which, `associatedtype` remains my favorite. I don&#39;t think its ideal but I prefer it to the alternatives that were considered.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/e31d438a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January  3, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I like this proposal.  I think it adds clarity to the language.  Especially after the change from &#39;associated&#39; to &#39;associatedtype&#39;.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.  It isn&#39;t a huge issue for me but has causes confusion for some.  A distinct keyword improving clarity is worth the change.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I am familiar with several.  This proposal is different than anything I&#39;ve see, but in a good way.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal, followed the discussion, and thought about the tradeoffs.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>January  3, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p><br>+1, with caveats<br></p><p>From a wording perspective, the “Proposed Approach” and “Impact on Existing Code” sections talk about removing typealias, while the intention is almost certainly to remove typealias usage within protocols only. My review assumes the latter.  <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think it is based on Swift today, in particular for the reasons given in the proposal (that it looks like, but is not possible, to use typealias to declare a type alias inside a protocol)<br></p><p>I personally find it cumbersome that Swift does not allow protocols with associated types to be used other than under generic constraints - I would prefer generic protocols. If generic protocols were on the horizon, then I do not know whether declaring associated types inline is even a necessary feature.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, although I still feel the keyword is long.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Since Swift is the only language I have used with associated types, I can only compare to Swift 1 and 2. I feel this will make the protocols themselves easier to understand<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>I followed the mailing list for the most part, read the proposal, and imagined adding it to my own protocols.<br></p><p>-DW<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/977fd660/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>Sorry for the previous message. I pressed “Send” by mistake...<br></p><p>Here is my +1:<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>It’s a great improvement.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Definitely.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed the discussion closely.<br></p><p>—<br></p><p>Rudolf Adamkovic<br></p><p>R+<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78dda0d326b6c8eff7c2679f55346a7f?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Alex Migicovsky</string> &lt;migi at apple.com&gt;<p>January  3, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>I think the proposal is great. The only thing I’d prefer is to use `associated` over `associatedtype`.<br></p><p>`associated` has always felt better to me over `associatedtype`. It was mentioned in one of the original proposals as the keyword that was initially most well received as well—I think this is because it just feels right, which is a good indicator even though it doesn’t seem scientific :-)<br></p><p>One downside mentioned is that `associated` is more vague than `associatedtype`, but there’s a reason why we don’t have `protocoltype`, `classtype`, etc as keywords over `protocol` and `class`. I think the convention of having associated type names start with an uppercase letter makes it clear that what follows `associated` is a type (or will be a concrete type).<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, I’ve seen many developers be confused by the difference between defining a typealias inside a protocol declaration vs outside.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve been paying attention to the thread and have thought about why I like `associated` over `associatedtype` since the start of the thread.<br></p><p>- Alex<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>January  3, 2016 at 11:00:00am</p></header><div class="content"><p>I have one concern with `associated` vs `associatedtype`, which is that it people might, in the interest of clarity, start naming things using a conventions like<br></p><p>`associated PayloadType`, <br></p><p>when I think it would be better to have  <br></p><p>`associatedtype Payload`<br></p><p>because it leaves less room for interpretation about how to name things idiomatically.<br></p><p>But I still haven’t completely decided between `type` and `associatedtype`, and I plan to respond to this thread separately with my thoughts on that.<br></p><p>Matt<br></p><p><br>&gt; On Jan 3, 2016, at 10:10, Alex Migicovsky via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; I think the proposal is great. The only thing I’d prefer is to use `associated` over `associatedtype`.<br>&gt; <br>&gt; `associated` has always felt better to me over `associatedtype`. It was mentioned in one of the original proposals as the keyword that was initially most well received as well—I think this is because it just feels right, which is a good indicator even though it doesn’t seem scientific :-)<br>&gt; <br>&gt; One downside mentioned is that `associated` is more vague than `associatedtype`, but there’s a reason why we don’t have `protocoltype`, `classtype`, etc as keywords over `protocol` and `class`. I think the convention of having associated type names start with an uppercase letter makes it clear that what follows `associated` is a type (or will be a concrete type).<br>&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, I’ve seen many developers be confused by the difference between defining a typealias inside a protocol declaration vs outside.<br>&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I’ve been paying attention to the thread and have thought about why I like `associated` over `associatedtype` since the start of the thread.<br>&gt; <br>&gt; - Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January  7, 2016 at 06:00:00am</p></header><div class="content"><p>+1 from me including the preference for &quot;associated&quot; instead of &quot;associatedtype&quot;<br></p><p>-Thorsten <br></p><p>Am 03.01.2016 um 19:10 schrieb Alex Migicovsky via swift-evolution &lt;swift-evolution at swift.org&gt;:<br></p><p>&gt;&gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; I think the proposal is great. The only thing I’d prefer is to use `associated` over `associatedtype`.<br>&gt; <br>&gt; `associated` has always felt better to me over `associatedtype`. It was mentioned in one of the original proposals as the keyword that was initially most well received as well—I think this is because it just feels right, which is a good indicator even though it doesn’t seem scientific :-)<br>&gt; <br>&gt; One downside mentioned is that `associated` is more vague than `associatedtype`, but there’s a reason why we don’t have `protocoltype`, `classtype`, etc as keywords over `protocol` and `class`. I think the convention of having associated type names start with an uppercase letter makes it clear that what follows `associated` is a type (or will be a concrete type).<br>&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, I’ve seen many developers be confused by the difference between defining a typealias inside a protocol declaration vs outside.<br>&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I’ve been paying attention to the thread and have thought about why I like `associated` over `associatedtype` since the start of the thread.<br>&gt; <br>&gt; - Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January  3, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m not opposing the proposal, but I wonder why there has been such a big discussion (and a poll whose results have neither been revealed completely nor affected the choice of the keyword)…<br></p><p>Swift has proven it can thrive in secrecy, so I don&#39;t think the whole open community is a necessity — but as it is now, we should hold transparency in high esteem and not start faking democracy.<br></p><p>Just my 2c<br>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  3, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 3, 2016, at 10:55 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m not opposing the proposal, but I wonder why there has been such a big discussion (and a poll whose results have neither been revealed completely nor affected the choice of the keyword)…<br>&gt; <br>&gt; Swift has proven it can thrive in secrecy, so I don&#39;t think the whole open community is a necessity — but as it is now, we should hold transparency in high esteem and not start faking democracy.<br></p><p>I’m confused, what are you saying?  No decision has been made here, I’m not aware of any “secrecy” issue.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January  4, 2016 at 12:00:00am</p></header><div class="content"><p>&gt;&gt; Swift has proven it can thrive in secrecy, so I don&#39;t think the whole open community is a necessity — but as it is now, we should hold transparency in high esteem and not start faking democracy.<br>&gt; <br>&gt; I’m confused, what are you saying?  No decision has been made here, I’m not aware of any “secrecy” issue.<br>Sorry, it could be that my words don&#39;t express exactly what I wanted to say.<br>The first part is just about the closed-source past, which brought us Swift as we know it now (a big thank you for that; I&#39;m really very happy about it).<br></p><p>For me (I guess for others as well :) the decision process is a black box, but I expect the proposals have impact on it — so proposers have some responsibility.<br>Loïc and I already had a short conversation, and I have no accusations against him, but rather wanted to criticize a tool that can be instrumentalized easily:<br>There has been a poll about which keyword to choose as replacement, and that made his proposal the target for my word of warning…<br></p><p>I guess most of us agree that surveys have to be taken with a grain of salt, and I think their use should be discouraged for most situations.<br>Polls itself can be manipulated in many ways (bias of the author, fake votes…), and there are no rules how to handle the result (an author could cite a survey that supports his standpoint, but he might as well ignore a result he doesn&#39;t like).<br></p><p>Of course, the core team is not bound to the result of any vote, but bad decisions aren&#39;t my main concern:<br>I don&#39;t know how this community will evolve, but I guess there will be natural controversy in the future, there will be temptation to support opinions with unfair methods — and there will be people suspecting or accusing others of using such methods…<br></p><p>All those bad things are most likely unavoidable, but clear rules could help keeping them at bay.<br></p><p>So, I hope my language has been better this time, and that Swift grows up to be a healthy open source project with a great community! (and to make sure I don&#39;t get things wrong again: It is already quite healthy and great ;-) <br></p><p>Best regards,<br>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  3, 2016 at 07:00:00pm</p></header><div class="content"><p>On Jan 3, 2016, at 3:43 PM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt;&gt; Swift has proven it can thrive in secrecy, so I don&#39;t think the whole open community is a necessity — but as it is now, we should hold transparency in high esteem and not start faking democracy.<br>&gt;&gt; <br>&gt;&gt; I’m confused, what are you saying?  No decision has been made here, I’m not aware of any “secrecy” issue.<br>&gt; Sorry, it could be that my words don&#39;t express exactly what I wanted to say.<br></p><p>No problem at all, I just wanted to clarify your meaning and intention, thanks!<br></p><p>&gt; For me (I guess for others as well :) the decision process is a black box, but I expect the proposals have impact on it — so proposers have some responsibility.<br>&gt; Loïc and I already had a short conversation, and I have no accusations against him, but rather wanted to criticize a tool that can be instrumentalized easily:<br>&gt; There has been a poll about which keyword to choose as replacement, and that made his proposal the target for my word of warning…<br>&gt; <br>&gt; I guess most of us agree that surveys have to be taken with a grain of salt, and I think their use should be discouraged for most situations.<br>&gt; Polls itself can be manipulated in many ways (bias of the author, fake votes…), and there are no rules how to handle the result (an author could cite a survey that supports his standpoint, but he might as well ignore a result he doesn&#39;t like).<br>&gt; <br>&gt; Of course, the core team is not bound to the result of any vote, but bad decisions aren&#39;t my main concern:<br>&gt; I don&#39;t know how this community will evolve, but I guess there will be natural controversy in the future, there will be temptation to support opinions with unfair methods — and there will be people suspecting or accusing others of using such methods…<br>&gt; <br>&gt; All those bad things are most likely unavoidable, but clear rules could help keeping them at bay.<br></p><p>There is no simple answer here.  Core team members are humans and have different things that impact and motivate them.  We intentionally want Swift to have a common “center of gravity” and be an “opinionated” language, rather than fall to the “design by committee” approach that leads to a watered-down design.  This means that decisions are really all shades of gray and cannot be specified or predicted by algorithm.  We aim to be as transparent as possible, and explain the rationale for decisions when they come out.<br></p><p>That said, I and many other people on the team are highly motivated and effected by clear descriptions of problems being solved, and why current approaches are wrong.  Particularly moving are things written by people who are clearly familiar with Swift as it stands, and who speak to why a change will make Swift better.   Someone saying “I saw thing X in language Y, so we should transplant it to Swift” - with no further justification - is not very motivating, because Swift is much different than any other language Y, and so the tradeoffs that make it compelling in Y may not translate over to make it compelling in Swift.<br></p><p>&gt; So, I hope my language has been better this time, and that Swift grows up to be a healthy open source project with a great community! (and to make sure I don&#39;t get things wrong again: It is already quite healthy and great ;-) <br></p><p>Me too.  We are definitely all new to this and learning as we go along.  I’m sure that we’ll all make mistakes, but we aim to learn from them and adapt &amp; change when we do.  Please have patience as this inevitably happens, it is because we’re just humans, and all jointly trying to make Swift as great as we can!<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January  3, 2016 at 05:00:00pm</p></header><div class="content"><p>Why has there been such a big discussion? I suspect because this is an obvious win. There&#39;s less discussion of &quot;should there be this change&quot; and more of &quot;how should this be changed&quot;. The relative lightweight nature of the latter inspires lots of input. When a topic gets more technical in nature, those who are heavily invested, with expertise in building compilers and with specialized knowledge of other languages, focus the discussion.<br></p><p>Turns out in the end that there was an underlying &quot;term of art&quot; (or however that is put) along with the descriptions in the book, so there never was going to probably be anything deeper than &quot;associatedType&quot;, &quot;associatedtype&quot; or &quot;associated&quot;, in my opinion.<br></p><p>Why secrecy? There is none. I was asked to run a poll. I ran a poll using the best information I had at the moment. I don&#39;t have money to spend on SurveyMonkey so it cut off at 100 replies. You can&#39;t see the extra replies. I can&#39;t see the extra replies. Even playing field.<br></p><p>-- Erica, who had no ulterior motives<br></p><p><br>&gt; On Jan 3, 2016, at 2:31 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 3, 2016, at 10:55 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m not opposing the proposal, but I wonder why there has been such a big discussion (and a poll whose results have neither been revealed completely nor affected the choice of the keyword)…<br>&gt;&gt; <br>&gt;&gt; Swift has proven it can thrive in secrecy, so I don&#39;t think the whole open community is a necessity — but as it is now, we should hold transparency in high esteem and not start faking democracy.<br>&gt; <br>&gt; I’m confused, what are you saying?  No decision has been made here, I’m not aware of any “secrecy” issue.<br>&gt; <br>&gt; -Chris <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;d argue that there&#39;s been such a big discussion because it&#39;s basically a bikeshed. This is an easy topic for everyone to understand so there&#39;s low barrier to entry, and it basically boils down to &quot;what should we name this thing?&quot; which is something everybody can easily form an opinion on. Naming bikesheds have produced some of the longest and most hotly-debated discussions about programming language design.<br></p><p>-Kevin Ballard<br></p><p>On Sun, Jan 3, 2016, at 04:03 PM, Erica Sadun via swift-evolution wrote:<br>&gt; Why has there been such a big discussion? I suspect because this is an obvious win. There&#39;s less discussion of &quot;should there be this change&quot; and more of &quot;how should this be changed&quot;. The relative lightweight nature of the latter inspires lots of input. When a topic gets more technical in nature, those who are heavily invested, with expertise in building compilers and with specialized knowledge of other languages, focus the discussion.<br>&gt; <br>&gt; Turns out in the end that there was an underlying &quot;term of art&quot; (or however that is put) along with the descriptions in the book, so there never was going to probably be anything deeper than &quot;associatedType&quot;, &quot;associatedtype&quot; or &quot;associated&quot;, in my opinion.<br>&gt; <br>&gt; Why secrecy? There is none. I was asked to run a poll. I ran a poll using the best information I had at the moment. I don&#39;t have money to spend on SurveyMonkey so it cut off at 100 replies. You can&#39;t see the extra replies. I can&#39;t see the extra replies. Even playing field.<br>&gt; <br>&gt; -- Erica, who had no ulterior motives<br>&gt; <br>&gt; <br>&gt; &gt; On Jan 3, 2016, at 2:31 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt;&gt; On Jan 3, 2016, at 10:55 AM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I&#39;m not opposing the proposal, but I wonder why there has been such a big discussion (and a poll whose results have neither been revealed completely nor affected the choice of the keyword)…<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Swift has proven it can thrive in secrecy, so I don&#39;t think the whole open community is a necessity — but as it is now, we should hold transparency in high esteem and not start faking democracy.<br>&gt; &gt; <br>&gt; &gt; I’m confused, what are you saying?  No decision has been made here, I’m not aware of any “secrecy” issue.<br>&gt; &gt; <br>&gt; &gt; -Chris <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January  8, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Erica,<br></p><p>sorry for the late reaction — but I&#39;ve been busy writing code instead of emails ;-)<br></p><p>&gt; Why secrecy? There is none. I was asked to run a poll. I ran a poll using the best information I had at the moment.<br></p><p>I hope I could clear up some misunderstandings in the answer to Chris (no conspiracy theory here ;-) and that you don&#39;t have the impression I&#39;m accusing you for the poll (I consider it to be an act of pure kindness).<br>Maybe you even agree with me partially about the potential dangers of surveys:<br>I still wonder why no one complained that &quot;associated&quot; wasn&#39;t chosen, despite being the most popular option. Sure, some may have changed their mind, but even now, there are people saying they prefer that discarded possibility.<br>I can think of four possible explanations for this observation (all of them with a share of &quot;the actual keyword is so unimportant, I don&#39;t really care&quot;):<br>- all changed their mind (great — everyone is happy)<br>- participants lost their interest and have never seen the final proposal<br>- participants are disappointed by the choice, but remain silent because they don&#39;t want to look like nitpickers<br>- participants are disappointed by the choice, but remain silent because they lost faith in the process<br></p><p>I guess the last one is to dramatic to be real (I&#39;ve been referring to the community process; I never had much faith in polls ;-), but the first is the only one that leaves no sour taste...<br></p><p>Best regards,<br>Tino<br></p><p>To quash possible rumors: I personally do my nitpicking loud and proud, and I didn&#39;t start this tiny meta-discussion in frustration — as long as I only have to use the word with working autocompletion, &quot;associatedtype&quot; is fine for me ;-)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49e77a417c2ab608756778c4a75ee14f?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Alex Popov</string> &lt;hello at alexpopov.ca&gt;<p>January  8, 2016 at 12:00:00am</p></header><div class="content"><p>Data of 1: I am disappointed by the choice, but remain silent so I don&#39;t look like a nit picker and to not further clutter the mailing list. <br>I find `associatedtype` to be clearer,  but `associated` to be much more pleasant to read and write. <br> * What is your evaluation of the proposal?<br>+1 for the proposal, I didn&#39;t know associated types in protocols where even a thing, I just thought it was black-typealias-magic that was out of my intellectual reach. <br> * Is the problem being addressed significant enough to warrant a change to Swift?<br>Definitely.<br> * Does this proposal fit well with the feel and direction of Swift?<br>I do believe this proposal fits well with Swift, regardless of keyword chosen.<br> * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Not applicable<br> * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I have been following the proposal from the start, and have read up on Associated Types in protocols. <br></p><p>Alex Popov Jr.<br>Principal iOS developer | Shelfie<br>www.shelfie.com | @getshelfie<br></p><p>    _____________________________<br>From: Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt;<br>Sent: Thursday, January 7, 2016 15:22<br>Subject: Re: [swift-evolution] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations<br>To: Erica Sadun &lt;erica at ericasadun.com&gt;<br>Cc: Swift Evolution &lt;swift-evolution at swift.org&gt;<br></p><p><br>Hi Erica,<br></p><p>sorry for the late reaction — but I&#39;ve been busy writing code instead of emails ;-)<br></p><p>&gt; Why secrecy? There is none. I was asked to run a poll. I ran a poll using the best information I had at the moment.<br></p><p>I hope I could clear up some misunderstandings in the answer to Chris (no conspiracy theory here ;-) and that you don&#39;t have the impression I&#39;m accusing you for the poll (I consider it to be an act of pure kindness).<br>Maybe you even agree with me partially about the potential dangers of surveys:<br>I still wonder why no one complained that &quot;associated&quot; wasn&#39;t chosen, despite being the most popular option. Sure, some may have changed their mind, but even now, there are people saying they prefer that discarded possibility.<br>I can think of four possible explanations for this observation (all of them with a share of &quot;the actual keyword is so unimportant, I don&#39;t really care&quot;):<br>- all changed their mind (great — everyone is happy)<br>- participants lost their interest and have never seen the final proposal<br>- participants are disappointed by the choice, but remain silent because they don&#39;t want to look like nitpickers<br>- participants are disappointed by the choice, but remain silent because they lost faith in the process<br></p><p>I guess the last one is to dramatic to be real (I&#39;ve been referring to the community process; I never had much faith in polls ;-), but the first is the only one that leaves no sour taste...<br></p><p>Best regards,<br>Tino<br></p><p>To quash possible rumors: I personally do my nitpicking loud and proud, and I didn&#39;t start this tiny meta-discussion in frustration — as long as I only have to use the word with working autocompletion, &quot;associatedtype&quot; is fine for me ;-)<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/6896ebd3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January 11, 2016 at 10:00:00pm</p></header><div class="content"><p>I also really like the proposal but prefer the ‘associated’ keyword instead of ‘associatedtype’. Here is my review:<br></p><p>What is your evaluation of the proposal?<br></p><p>Big +1 from me. I remember that the typealias keyword in protocols confused me for quite a while: the concept of associated types is already complicated to grasp coming from a different generics model, but overloading the typealias keyword doesn’t help in the learning process. Like I said above, I would vote for the ‘associated’ keyword. Even if grammatically more correct, ‘associatedtype’ seems like a mouthful for me.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I strongly think so.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>After learning about associated types, I researched Scala traits and it helped me understand the concept better and enjoyed that Scala uses a clearly defined keyword.<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed the original discussion but haven’t found time to read all reviews before mine.<br></p><p>&gt; On 08 Jan 2016, at 01:13, Alex Popov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Data of 1: I am disappointed by the choice, but remain silent so I don&#39;t look like a nit picker and to not further clutter the mailing list. <br>&gt; <br>&gt; I find `associatedtype` to be clearer,  but `associated` to be much more pleasant to read and write. <br>&gt; <br>&gt;  * What is your evaluation of the proposal?<br>&gt; <br>&gt; +1 for the proposal, I didn&#39;t know associated types in protocols where even a thing, I just thought it was black-typealias-magic that was out of my intellectual reach. <br>&gt; <br>&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Definitely.<br>&gt; <br>&gt;  * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I do believe this proposal fits well with Swift, regardless of keyword chosen.<br>&gt; <br>&gt;  * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Not applicable<br>&gt; <br>&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I have been following the proposal from the start, and have read up on Associated Types in protocols. <br>&gt; <br>&gt; Alex Popov Jr.<br>&gt; Principal iOS developer | Shelfie<br>&gt; www.shelfie.com &lt;http://www.shelfie.com/&gt; | @getshelfie<br>&gt; <br>&gt; _____________________________<br>&gt; From: Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; Sent: Thursday, January 7, 2016 15:22<br>&gt; Subject: Re: [swift-evolution] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations<br>&gt; To: Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt;<br>&gt; Cc: Swift Evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; <br>&gt; <br>&gt; Hi Erica,<br>&gt; <br>&gt; sorry for the late reaction — but I&#39;ve been busy writing code instead of emails ;-)<br>&gt; <br>&gt; &gt; Why secrecy? There is none. I was asked to run a poll. I ran a poll using the best information I had at the moment.<br>&gt; <br>&gt; I hope I could clear up some misunderstandings in the answer to Chris (no conspiracy theory here ;-) and that you don&#39;t have the impression I&#39;m accusing you for the poll (I consider it to be an act of pure kindness).<br>&gt; Maybe you even agree with me partially about the potential dangers of surveys:<br>&gt; I still wonder why no one complained that &quot;associated&quot; wasn&#39;t chosen, despite being the most popular option. Sure, some may have changed their mind, but even now, there are people saying they prefer that discarded possibility.<br>&gt; I can think of four possible explanations for this observation (all of them with a share of &quot;the actual keyword is so unimportant, I don&#39;t really care&quot;):<br>&gt; - all changed their mind (great — everyone is happy)<br>&gt; - participants lost their interest and have never seen the final proposal<br>&gt; - participants are disappointed by the choice, but remain silent because they don&#39;t want to look like nitpickers<br>&gt; - participants are disappointed by the choice, but remain silent because they lost faith in the process<br>&gt; <br>&gt; I guess the last one is to dramatic to be real (I&#39;ve been referring to the community process; I never had much faith in polls ;-), but the first is the only one that leaves no sour taste...<br>&gt; <br>&gt; Best regards,<br>&gt; Tino<br>&gt; <br>&gt; To quash possible rumors: I personally do my nitpicking loud and proud, and I didn&#39;t start this tiny meta-discussion in frustration — as long as I only have to use the word with working autocompletion, &quot;associatedtype&quot; is fine for me ;-)<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160111/0ba61929/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>January  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. Solves a real problem I’ve come across before.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, because the problem can cause serious frustration, for beginners in particular.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, because readability is improved. No need to consider the context anymore, the keyword itself makes it very clear what is declared.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t used any language with a comparable feature.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br></p><p>I’ve read the review carefully and followed the prior discussion briefly.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>January  5, 2016 at 09:00:00am</p></header><div class="content"><p>&gt;&gt;    * What is your evaluation of the proposal?<br>+1<br></p><p>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>Definitely. This is very confusing to have typealias mean two different things.<br></p><p>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>Yes. While it does add something, it simplifies and removes confusion.<br></p><p>&gt;&gt;    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I haven&#39;t used similar features in other languages.<br></p><p>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read the review, run into the problem myself, and followed the discussion here.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>January  4, 2016 at 09:00:00am</p></header><div class="content"><p>- What is your evaluation of the proposal?<br></p><p>+1 : I am all for the idea of not using the same word for different functionalities. I don’t see any upside to keeping it the way it is.<br></p><p>- Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Description of Swift includes “Swift is designed to make writing and maintaining correct programs easier for the developer”… if the desire is to make the language easy to understand and learn, then this is a very important change as it removes confusion.<br></p><p>- Does this proposal fit well with the feel and direction of Swift?<br></p><p>100%<br></p><p>- If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have not come across this type of feature before.<br></p><p>- How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read all of the reviews and proposal thoroughly.<br></p><p>---<br></p><p>Really excited to see how many people come out to give their opinions on proposals. Hope my words are helpful.<br></p><p>Jo Albright<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>January  4, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1, although I don’t like the name because it’s two normally non-compoundable words, compounded into one. A combination that would be more natural is something like “typeassociate” although that sounds quite silly to me. I suppose maybe just “associated”.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, it has seemed to confuse people on several occasions.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, I believe so.<br></p><p><br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t.<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed the discussion closely and, while it doesn’t confuse me personally, I have seen several mails and forum posts from people it does.<br></p><p>/Sune<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>January  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 2, 2016, at 22:38, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; 	* What is your evaluation of the proposal?<br> <br>Taking an example from the swift source to compare an alternative, `type`, we have<br></p><p>public protocol _CollectionWrapperType : _SequenceWrapperType {<br>    associatedtype Base : CollectionType<br>    associatedtype Index : ForwardIndexType = Self.Base.Index<br>}<br></p><p>vs<br></p><p>public protocol _CollectionWrapperType : _SequenceWrapperType {<br>    type Base : CollectionType<br>    type Index : ForwardIndexType = Self.Base.Index<br>}<br></p><p>I think the version with `associatedtype` is a bit verbose, but that doesn’t seem like a big problem.  It might read a little more clearly as well.  I wouldn’t be unhappy with either of these alternatives, but `associatedtype` seems like a good choice.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.  I think it `typealias` should be used only as the swift equivalent of a C typedef.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>Yes, because we want to improve readability and understandability.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I haven’t used another language with this feature.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>In depth study.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/d5c049d4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>January  4, 2016 at 05:00:00pm</p></header><div class="content"><p>On a re-read I am -1; I like the `associatedtype` keyword but didn’t realize there was no plan to let `typealias` be used within a protocol to as a convenience (and to preserve intent, and to improve the development experience when still figuring out an interface design).<br></p><p>I would prefer the new keyword and also adding/allowing one to add convenience typealiases within a protocol definition.<br></p><p>I have not followed the discussion closely to know if there are difficult technical issues with permitting both `associatedtype` declarations and simple convenience `typealias` declarations within a protocol, or if the current proposal is simply making the possible-confusion argument; if there are legit technical issues then so be it, but if it’s just an argument-from-possible-confusion I think the price of clarity is dearer than it needs to be here.<br></p><p>&gt; On Jan 3, 2016, at 1:38 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/1a439c97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January  4, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On a re-read I am -1; I like the `associatedtype` keyword but didn’t realize there was no plan to let `typealias` be used within a protocol to as a convenience (and to preserve intent, and to improve the development experience when still figuring out an interface design).<br>&gt; <br>&gt; I would prefer the new keyword and also adding/allowing one to add convenience typealiases within a protocol definition.<br></p><p>I would love to see convenience typealiases supported in protocols eventually, but I actually think that should wait until after the transition to `associatedtype` is well behind us so we can get people used to the new keyword.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>January  4, 2016 at 06:00:00pm</p></header><div class="content"><p>And of course it’s not like this is taking away functionality, just not adding it yet. So sure, +1, this is still forward progress. <br></p><p>The fact it’s so easy to forget this other use of typealias doesn&#39;t really work in protocols right now is evidence enough for the proposal. Apologies for the double-about face.<br></p><p>&gt; On Jan 4, 2016, at 6:17 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; On a re-read I am -1; I like the `associatedtype` keyword but didn’t realize there was no plan to let `typealias` be used within a protocol to as a convenience (and to preserve intent, and to improve the development experience when still figuring out an interface design).<br>&gt;&gt; <br>&gt;&gt; I would prefer the new keyword and also adding/allowing one to add convenience typealiases within a protocol definition.<br>&gt; <br>&gt; I would love to see convenience typealiases supported in protocols eventually, but I actually think that should wait until after the transition to `associatedtype` is well behind us so we can get people used to the new keyword.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  4, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 4, 2016, at 2:49 PM, plx via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On a re-read I am -1; I like the `associatedtype` keyword but didn’t realize there was no plan to let `typealias` be used within a protocol to as a convenience (and to preserve intent, and to improve the development experience when still figuring out an interface design).<br>&gt; <br>&gt; I would prefer the new keyword and also adding/allowing one to add convenience typealiases within a protocol definition.<br></p><p>You can evaluate the proposal however you wish, but I don’t think it makes sense to vote against a proposal because it is missing some additional feature *unless* the lack of that additional feature makes the proposal effectively useless. I don’t think that’s the case here: changing ‘typealias’ to ‘associatedtype’ can easily be viewed as an improvement on its own, which then opens the door to additional features (real typealiases in protocols or protocol extensions).<br></p><p>	- Doug<br></p><p>&gt; <br>&gt;&gt; On Jan 3, 2016, at 1:38 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/694e7795/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  5, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>+1 for changing the name, but -1 for &quot;associatedtype&quot; in particular.<br>Alternate suggestions:<br></p><p>   - associatedType Element<br>   - associated_type Element<br>   - associated type Element<br>   - associated Element<br>   - type Element<br>   - having Element<br></p><p><br>&gt; Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Yes.<br></p><p><br>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don&#39;t feel that the multi-word-yet-all-lowercase name fits with the rest<br>of the Swift language. See alternate suggestions above.<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>Extensive experience with the feature, but I have mostly just skimmed the<br>emails in this (and the preceding) thread.<br></p><p>- Jacob<br></p><p>On Sat, Jan 2, 2016 at 10:38 PM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for<br>&gt; associated type declarations” begins now and runs through Wednesday,<br>&gt; January 6th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/1f6c931a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>January  6, 2016 at 11:00:00am</p></header><div class="content"><p>Hello!<br></p><p><br>* What is your evaluation of the proposal?<br>+1, due to the already stated reasons: difference in meanings, better expression of the associated types construct etc. I also do like the `associatedtype` keyword proposal and I’ve yet to see any better alternatives in the discussion.<br></p><p><br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. The change reflects the gravity of the problem, which is limited in terms of source-compatibility, but significant in terms of programmers’ understanding and being beginners friendly.<br></p><p><br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br>I do feel so. Looking at already posted „Swift philosophy” summary: &quot;Provide a programmer model that: is high level; is expressive and clean” I believe the change makes the high-level concept of associated types expressive and clean in the code.<br></p><p><br></p><p>* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I’ve been using „abstract type members” in Scala traits, which are a very similar concept. Frankly, I believe that Swift „associated type” naming is less confusing than „abstract type”. Also, Scala uses „type” keyword with is not descriptive enough for me. Again, I like „associatedtype” better.<br></p><p><br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve been closely following the discussion(s) on the swift-evolution list and I’ve read the proposal. While I haven&#39;t done any in-depth literature study, I’ve been cross-comparing the proposed solution with my knowledge/experience in Scala.<br></p><p><br></p><p>Cheers,<br></p><p>Krzysztof Siejkowski<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/0ebb5d42/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br></p><p>In favor.<br></p><p>Overloading the meaning of “typealias” adds confusion to what is already a confusing feature of the language. The keyword “associatedtype” is much clearer — and much more searchable, helping newcomers to this feature discover the relevant documentation.<br></p><p>The words “associated type” are easily the best of any alternatives proposed. Others (“associated”, “type”, etc.) are all either too vague or too obtuse, and many are likely to cause identifier collisions. No other terminology mentioned in the discussion comes in even a close second for me.<br></p><p>What about the all lower case “associatedtype”? The underscore alternative of “associated_type” breaks existing language precedent. The camel case version (“associatedType”) does have language precedent, and I wonder if it wouldn’t be a better choice:<br></p><p>    dynamicType<br>    didSet<br>    willSet<br></p><p>However, there’s also precedent for making paired words all lowercase in keywords:<br></p><p>    typealias<br>    fallthrough<br>    deinit           ←(debatable: could be considered single word or hyphenated)<br></p><p>Perhaps keyword capitalization conventions deserve some attention across the board.<br></p><p>Regardless, I can happily accept “associatedtype.”<br></p><p><br>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Certainly. Associated types clearly are a point of confusion, and active evolution. Anything that clarifies their meaning is worth considering.<br></p><p><br>Does this proposal fit well with the feel and direction of Swift?<br></p><p>Swift’s other keywords tend to favor the transparently descriptive (mutating, didSet) over the jargon-y (const, volatile). This change fits that tendency.<br></p><p><br>If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t, at least not enough to give useful insight..<br></p><p><br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I loosely followed the discussion thread.<br></p><p>Cheers,<br></p><p>Paul<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/cbf157be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>January  6, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; What about the all lower case “associatedtype”? The underscore alternative of “associated_type” breaks existing language precedent. The camel case version (“associatedType”) does have language precedent, and I wonder if it wouldn’t be a better choice:<br>&gt; <br>&gt;    dynamicType<br>&gt;    didSet<br>&gt;    willSet<br>&gt; <br>&gt; However, there’s also precedent for making paired words all lowercase in keywords:<br>&gt; <br>&gt;    typealias<br>&gt;    fallthrough<br>&gt;    deinit           ←(debatable: could be considered single word or hyphenated)<br>&gt; <br>&gt; Perhaps keyword capitalization conventions deserve some attention across the board.<br></p><p>I thought the rules were:<br>- property/method: lowerCamelCase<br>- language keyword: lowercase<br></p><p>I consider <br>- dynamicType as a property<br>- didSet, willSet, deinit as methods.<br>- typealias, fallthrough as language keywords<br></p><p>And “associatedtype” would be a language keyword too, so it is lowercase 😊<br></p><p>Loïc<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 2:56 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt; <br>&gt;&gt; Perhaps keyword capitalization conventions deserve some attention across the board.<br>&gt; <br>&gt; I thought the rules were:<br>&gt; - property/method: lowerCamelCase<br>&gt; - language keyword: lowercase<br>&gt; <br>&gt; I consider <br>&gt; - dynamicType as a property<br>&gt; - didSet, willSet, deinit as methods.<br>&gt; - typealias, fallthrough as language keywords<br></p><p>Those are all language keywords.<br></p><p>Complete list here: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID413<br></p><p>P<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9da021619c0eac198d5b6148868aa791?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Remy Demarest</string> &lt;remy.demarest at gmail.com&gt;<p>January  6, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Le 06 janv. 2016 à 22:03, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 2:56 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Perhaps keyword capitalization conventions deserve some attention across the board.<br>&gt;&gt; <br>&gt;&gt; I thought the rules were:<br>&gt;&gt; - property/method: lowerCamelCase<br>&gt;&gt; - language keyword: lowercase<br>&gt;&gt; <br>&gt;&gt; I consider <br>&gt;&gt; - dynamicType as a property<br>&gt;&gt; - didSet, willSet, deinit as methods.<br>&gt;&gt; - typealias, fallthrough as language keywords<br>&gt; <br>&gt; Those are all language keywords.<br>&gt; <br>&gt; Complete list here: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID413<br>&gt; <br>&gt; P<br></p><p>I think he was talking about how those keywords were used in the language. However, to me it just looks like post-hoc rationalization.<br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 1402 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/61952084/attachment.p7s&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;m sure we&#39;re just bikeshedding at this point, but...<br></p><p>I find &quot;typealias&quot; and &quot;fallthrough&quot; much easier to read, and easier to<br>write, than &quot;associatedtype&quot;. Upon further in(tro)spection, I think I&#39;m<br>reading typealias and fallthrough as compound words<br>&lt;https://en.wikipedia.org/wiki/English_compound&gt;, rather than multiple<br>words with no separation, so there is no question that they should be<br>all-lowercase.<br></p><p>I find associatedtype harder to interpret as a compound word, so I&#39;d expect<br>some separation, either associated_type or associatedType. (I put some<br>other suggestions that I like better in my previous email, though.)<br></p><p>Jacob<br></p><p>On Wed, Jan 6, 2016 at 12:56 PM, Loïc Lecrenier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; &gt;<br>&gt; &gt; What about the all lower case “associatedtype”? The underscore<br>&gt; alternative of “associated_type” breaks existing language precedent. The<br>&gt; camel case version (“associatedType”) does have language precedent, and I<br>&gt; wonder if it wouldn’t be a better choice:<br>&gt; &gt;<br>&gt; &gt;    dynamicType<br>&gt; &gt;    didSet<br>&gt; &gt;    willSet<br>&gt; &gt;<br>&gt; &gt; However, there’s also precedent for making paired words all lowercase in<br>&gt; keywords:<br>&gt; &gt;<br>&gt; &gt;    typealias<br>&gt; &gt;    fallthrough<br>&gt; &gt;    deinit           ←(debatable: could be considered single word or<br>&gt; hyphenated)<br>&gt; &gt;<br>&gt; &gt; Perhaps keyword capitalization conventions deserve some attention across<br>&gt; the board.<br>&gt;<br>&gt; I thought the rules were:<br>&gt; - property/method: lowerCamelCase<br>&gt; - language keyword: lowercase<br>&gt;<br>&gt; I consider<br>&gt; - dynamicType as a property<br>&gt; - didSet, willSet, deinit as methods.<br>&gt; - typealias, fallthrough as language keywords<br>&gt;<br>&gt; And “associatedtype” would be a language keyword too, so it is lowercase 😊<br>&gt;<br>&gt; Loïc<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/8717b794/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>January  6, 2016 at 10:00:00pm</p></header><div class="content"><p>It seems no different to me than when &quot;instancetype&quot; was added to Objective<br>C (though, that doesn&#39;t say anything for the &#39;Swiftiness&#39; of it).<br></p><p>Ross<br></p><p>On Wed, Jan 6, 2016 at 9:08 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m sure we&#39;re just bikeshedding at this point, but...<br>&gt;<br>&gt; I find &quot;typealias&quot; and &quot;fallthrough&quot; much easier to read, and easier to<br>&gt; write, than &quot;associatedtype&quot;. Upon further in(tro)spection, I think I&#39;m<br>&gt; reading typealias and fallthrough as compound words<br>&gt; &lt;https://en.wikipedia.org/wiki/English_compound&gt;, rather than multiple<br>&gt; words with no separation, so there is no question that they should be<br>&gt; all-lowercase.<br>&gt;<br>&gt; I find associatedtype harder to interpret as a compound word, so I&#39;d<br>&gt; expect some separation, either associated_type or associatedType. (I put<br>&gt; some other suggestions that I like better in my previous email, though.)<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 12:56 PM, Loïc Lecrenier &lt;swift-evolution at swift.org<br>&gt; &gt; wrote:<br>&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; What about the all lower case “associatedtype”? The underscore<br>&gt;&gt; alternative of “associated_type” breaks existing language precedent. The<br>&gt;&gt; camel case version (“associatedType”) does have language precedent, and I<br>&gt;&gt; wonder if it wouldn’t be a better choice:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;    dynamicType<br>&gt;&gt; &gt;    didSet<br>&gt;&gt; &gt;    willSet<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; However, there’s also precedent for making paired words all lowercase<br>&gt;&gt; in keywords:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;    typealias<br>&gt;&gt; &gt;    fallthrough<br>&gt;&gt; &gt;    deinit           ←(debatable: could be considered single word or<br>&gt;&gt; hyphenated)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Perhaps keyword capitalization conventions deserve some attention<br>&gt;&gt; across the board.<br>&gt;&gt;<br>&gt;&gt; I thought the rules were:<br>&gt;&gt; - property/method: lowerCamelCase<br>&gt;&gt; - language keyword: lowercase<br>&gt;&gt;<br>&gt;&gt; I consider<br>&gt;&gt; - dynamicType as a property<br>&gt;&gt; - didSet, willSet, deinit as methods.<br>&gt;&gt; - typealias, fallthrough as language keywords<br>&gt;&gt;<br>&gt;&gt; And “associatedtype” would be a language keyword too, so it is lowercase<br>&gt;&gt; 😊<br>&gt;&gt;<br>&gt;&gt; Loïc<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/062ad5c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  7, 2016 at 09:00:00am</p></header><div class="content"><p>What about protocoltype ?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 6 Jan 2016, at 22:33, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems no different to me than when &quot;instancetype&quot; was added to Objective C (though, that doesn&#39;t say anything for the &#39;Swiftiness&#39; of it).<br>&gt; <br>&gt; Ross<br>&gt; <br>&gt;&gt; On Wed, Jan 6, 2016 at 9:08 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I&#39;m sure we&#39;re just bikeshedding at this point, but...<br>&gt;&gt; <br>&gt;&gt; I find &quot;typealias&quot; and &quot;fallthrough&quot; much easier to read, and easier to write, than &quot;associatedtype&quot;. Upon further in(tro)spection, I think I&#39;m reading typealias and fallthrough as compound words, rather than multiple words with no separation, so there is no question that they should be all-lowercase.<br>&gt;&gt; <br>&gt;&gt; I find associatedtype harder to interpret as a compound word, so I&#39;d expect some separation, either associated_type or associatedType. (I put some other suggestions that I like better in my previous email, though.)<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jan 6, 2016 at 12:56 PM, Loïc Lecrenier &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; What about the all lower case “associatedtype”? The underscore alternative of “associated_type” breaks existing language precedent. The camel case version (“associatedType”) does have language precedent, and I wonder if it wouldn’t be a better choice:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;    dynamicType<br>&gt;&gt;&gt; &gt;    didSet<br>&gt;&gt;&gt; &gt;    willSet<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; However, there’s also precedent for making paired words all lowercase in keywords:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;    typealias<br>&gt;&gt;&gt; &gt;    fallthrough<br>&gt;&gt;&gt; &gt;    deinit           ←(debatable: could be considered single word or hyphenated)<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Perhaps keyword capitalization conventions deserve some attention across the board.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought the rules were:<br>&gt;&gt;&gt; - property/method: lowerCamelCase<br>&gt;&gt;&gt; - language keyword: lowercase<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I consider<br>&gt;&gt;&gt; - dynamicType as a property<br>&gt;&gt;&gt; - didSet, willSet, deinit as methods.<br>&gt;&gt;&gt; - typealias, fallthrough as language keywords<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And “associatedtype” would be a language keyword too, so it is lowercase 😊<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Loïc<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/01917193/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>January  6, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 2, 2016, at 10:38 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>This definitely makes the two concepts much more easy to understand. Overloading the meanings is confusing. Separating them helps a lot. <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Definitely.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Not applicable<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>Read the proposal and followed some of the discussion on the swift-evolution list. <br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/76abb877/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4002684831b0a89736f4837d2e60f66a?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Pierre Monod-Broca</string> &lt;pierremonodbroca at gmail.com&gt;<p>January  7, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>I&#39;m ok<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes, the current keyword is odd<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>Not bad, this would be my second choice if I was the only one using swift (the cz<br></p><p><br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>N/A<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A bit more than a quick reading of the discussion<br></p><p>Pierre<br></p><p>&gt; Le 3 janv. 2016 à 07:38, Douglas Gregor &lt;dgregor at apple.com&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/3765d867/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff7b13b7925cd296f0492251f6d700b4?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>David James</string> &lt;davidbjames1 at gmail.com&gt;<p>January  7, 2016 at 07:00:00pm</p></header><div class="content"><p>I think it’s more confusing (albeit not as educational) to have two different words here. For example, if I create a protocol with associated types that are used in protocol functions, then I want to implement that protocol in a class/struct tying those types to concrete types. Having two different words feels unnatural even if it is more technically accurate.<br></p><p>For example:<br></p><p>protocol ProductMaker {<br>    typealias Product<br>    func makeFoo() -&gt; Product <br>}<br></p><p>struct FooMaker : ProductMaker {<br>    typealias Product = Foo<br>    func makeFoo() -&gt; Product {<br>        return Foo()<br>    }<br>}<br></p><p>&gt; On Jan 7, 2016, at 6:55 PM, Pierre Monod-Broca via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; I&#39;m ok<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Yes, the current keyword is odd<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; Not bad, this would be my second choice if I was the only one using swift (the cz<br>&gt; <br>&gt; <br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; N/A<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; A bit more than a quick reading of the discussion<br>&gt; <br>&gt; Pierre<br>&gt; <br>&gt; Le 3 janv. 2016 à 07:38, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; a écrit :<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>David James<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/9a9d6624/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 12:22 PM, David James via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it’s more confusing (albeit not as educational) to have two different words here. For example, if I create a protocol with associated types that are used in protocol functions, then I want to implement that protocol in a class/struct tying those types to concrete types. Having two different words feels unnatural even if it is more technically accurate.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; protocol ProductMaker {<br>&gt;     typealias Product<br>&gt;     func makeFoo() -&gt; Product <br>&gt; }<br>&gt; <br>&gt; struct FooMaker : ProductMaker {<br>&gt;     typealias Product = Foo<br>&gt;     func makeFoo() -&gt; Product {<br>&gt;         return Foo()<br>&gt;     }<br>&gt; }<br></p><p>Most of the time, including this example, you do not need to declare the typealias.  It will be inferred by the compiler.<br></p><p>&gt; <br>&gt;&gt; On Jan 7, 2016, at 6:55 PM, Pierre Monod-Broca via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; I&#39;m ok<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Yes, the current keyword is odd<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; Not bad, this would be my second choice if I was the only one using swift (the cz<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; N/A<br>&gt;&gt; <br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; A bit more than a quick reading of the discussion<br>&gt;&gt; <br>&gt;&gt; Pierre<br>&gt;&gt; <br>&gt;&gt; Le 3 janv. 2016 à 07:38, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Cheers,<br>&gt;&gt;&gt; 	Doug Gregor<br>&gt;&gt;&gt; 	Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; David James<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/8aa64715/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January 12, 2016 at 09:00:00pm</p></header><div class="content"><p>I have proposed the elimination of associated types by replacing them with generic arguments and an implementation of generics that allows covariance, see:<br></p><p>	[swift-evolution] Make generics covariant and add generics to	protocols  &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006367.html&gt;  &lt;&gt;<br></p><p>Food for though for another way forward?<br></p><p>PS I agree using typealias for two different concepts is confusing.<br></p><p><br>&gt; On 3 Jan 2016, at 5:38 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; 	Cheers,<br>&gt; 	Doug Gregor<br>&gt; 	Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/501c9708/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January 12, 2016 at 10:00:00am</p></header><div class="content"><p>+1 In the original discussion I was advocating generics as the way forward<br></p><p>On Tue, Jan 12, 2016 at 10:19 AM, Howard Lovatt via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I have proposed the elimination of associated types by replacing them with<br>&gt; generic arguments and an implementation of generics that allows covariance,<br>&gt; see:<br>&gt;<br>&gt; [swift-evolution] Make generics covariant and add generics to protocols<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006367.html&gt;<br>&gt;<br>&gt;<br>&gt; Food for though for another way forward?<br>&gt;<br>&gt; PS I agree using typealias for two different concepts is confusing.<br>&gt;<br>&gt;<br>&gt; On 3 Jan 2016, at 5:38 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for<br>&gt; associated type declarations” begins now and runs through Wednesday,<br>&gt; January 6th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Cheers,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/6ce285d0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 12, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 12, 2016, at 2:19 AM, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt; <br>&gt; I have proposed the elimination of associated types by replacing them with generic arguments and an implementation of generics that allows covariance, see:<br>&gt; <br>&gt; 	[swift-evolution] Make generics covariant and add generics to	protocols  &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006367.html&gt;  &lt;&gt;<br>&gt; <br>&gt; Food for though for another way forward?<br></p><p>FWIW, I disagree fairly strongly with both of those directions for Swift generics; I’ll reply over on that thread.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; PS I agree using typealias for two different concepts is confusing.<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Jan 2016, at 5:38 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations” begins now and runs through Wednesday, January 6th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; 	Cheers,<br>&gt;&gt; 	Doug Gregor<br>&gt;&gt; 	Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/55aebccc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
