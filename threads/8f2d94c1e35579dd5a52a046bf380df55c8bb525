<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf36eeeb07c5ecb6ed6e844a2abf06f1?s=50"></div><header><strong>Proposal : Introduction of System Defined UI Variables - ScreenSize, IsPad.</strong> from <string>Tarun Tyagi</string> &lt;taruntyagi697 at gmail.com&gt;<p>December  4, 2015 at 08:00:00am</p></header><div class="content"><p>Hi Guys<br></p><p>I would like to propose a small addition. Please have a look at following and let me know your thoughts -<br></p><p>Proposal : Introduction of System Defined UI Variables - ScreenSize, IsPad.<br></p><p>Motivation : All of us know that we have a pretty good set of methods that can provide us this information. UIScreen is there to provide this. But when the app supports autorotation, in landscape, it&#39;s width becomes height and vice-versa, leaving developer to figure out what the current width and height is.<br>This forces developer to write some lines of unnecessary code every time an app starts supporting autorotation. If we had system defined variables, we could easily rely on them, regardless of current orientation.<br></p><p>Use Case : When app receives an autorotation event, we need to perform changes to our UI accordingly where it needs these ScreenSize(updated) &amp; IsPad variables.<br></p><p>Note : Everybody is aware that -<br>Autolayout takes care of the most issues down this line.<br>Calculations(on mere change of orientation) are rarely needed when you correctly use Autolayout.<br></p><p>But we can never rule out the possibility. A system defined variable comes to quick rescue.<br></p><p><br>Does it go along Swift&#39;s Evolution?<br>Obviously, a short and smart addition to developer toolkit.<br></p><p><br>Does it break any existing code?<br>Absolutely No.<br></p><p><br>Advantages : A lot of unnecessary code can be abstracted from user providing a clean interface that facilitates the needed info (updated to current orientation) using a reliable system variable.<br></p><p>Has it been considered before?<br>Yes, revised autorotation approach (Adaptive)<br></p><p>func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator)<br></p><p>is a place to look at. Yes, it specifically handles the use case that I described above. But does it eliminate the need of ScreenSize? Not Completely.<br></p><p><br>It gets along with a super smart language Swift&#39;s evolution direction and should be welcomed by most of the developers.<br></p><p>Let me know your thoughts.<br></p><p><br>Thanks!<br></p><p>Tarun.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/8f2db525/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7ba3c93f9350613c243eeb87c602935e?s=50"></div><header><strong>Proposal : Introduction of System Defined UI Variables - ScreenSize, IsPad.</strong> from <string>David Smith</string> &lt;david_smith at apple.com&gt;<p>December  3, 2015 at 06:00:00pm</p></header><div class="content"><p>Hi Tarun,<br></p><p>What were you envisioning the value of these would be on devices with no screen? This seems like a proposal more suited to a UI framework.<br></p><p>	David<br></p><p>&gt; On Dec 3, 2015, at 6:34 PM, Tarun Tyagi &lt;taruntyagi697 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Guys<br>&gt; <br>&gt; I would like to propose a small addition. Please have a look at following and let me know your thoughts -<br>&gt; <br>&gt; Proposal : Introduction of System Defined UI Variables - ScreenSize, IsPad.<br>&gt; <br>&gt; Motivation : All of us know that we have a pretty good set of methods that can provide us this information. UIScreen is there to provide this. But when the app supports autorotation, in landscape, it&#39;s width becomes height and vice-versa, leaving developer to figure out what the current width and height is.<br>&gt; This forces developer to write some lines of unnecessary code every time an app starts supporting autorotation. If we had system defined variables, we could easily rely on them, regardless of current orientation.<br>&gt; <br>&gt; Use Case : When app receives an autorotation event, we need to perform changes to our UI accordingly where it needs these ScreenSize(updated) &amp; IsPad variables.<br>&gt; <br>&gt; Note : Everybody is aware that -<br>&gt; Autolayout takes care of the most issues down this line.<br>&gt; Calculations(on mere change of orientation) are rarely needed when you correctly use Autolayout.<br>&gt; <br>&gt; But we can never rule out the possibility. A system defined variable comes to quick rescue.<br>&gt; <br>&gt; <br>&gt; Does it go along Swift&#39;s Evolution?<br>&gt; Obviously, a short and smart addition to developer toolkit.<br>&gt; <br>&gt; <br>&gt; Does it break any existing code?<br>&gt; Absolutely No.<br>&gt; <br>&gt; <br>&gt; Advantages : A lot of unnecessary code can be abstracted from user providing a clean interface that facilitates the needed info (updated to current orientation) using a reliable system variable.<br>&gt; <br>&gt; Has it been considered before?<br>&gt; Yes, revised autorotation approach (Adaptive)<br>&gt; <br>&gt; func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator)<br>&gt; <br>&gt; is a place to look at. Yes, it specifically handles the use case that I described above. But does it eliminate the need of ScreenSize? Not Completely.<br>&gt; <br>&gt; <br>&gt; It gets along with a super smart language Swift&#39;s evolution direction and should be welcomed by most of the developers.<br>&gt; <br>&gt; Let me know your thoughts.<br>&gt; <br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Tarun.<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/eb7dac83/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
