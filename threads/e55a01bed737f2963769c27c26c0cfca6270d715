<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>First of all, congratulations on the open source release! I&#39;m very excited!<br></p><p>Second, I&#39;m running into trouble building from source, particularly in<br>regards to getting ninja bootstrapped. I&#39;m on Scientific Linux. I first<br>used yum to install packages for llvm, llvm-devel, clang, and cmake.<br></p><p>I then did the following, following the README.md in the swift git repo:<br></p><p> git clone git at github.com:apple/swift.git swift<br> git clone git at github.com:apple/swift-llvm.git llvm<br> git clone git at github.com:apple/swift-clang.git clang<br> git clone git at github.com:apple/swift-lldb.git lldb<br> git clone git at github.com:apple/swift-cmark.git cmark<br> git clone git at github.com:apple/swift-llbuild.git llbuild<br> git clone git at github.com:apple/swift-package-manager.git swiftpm<br> git clone git at github.com:apple/swift-corelibs-xctest.git<br> git clone git at github.com:apple/swift-corelibs-foundation.git<br></p><p><br>The README.md also states:<br></p><p>Ninja is the current recommended build system for building Swift and is the<br>&gt; default configuration generated by CMake. If you&#39;re on OS X or don&#39;t<br>&gt; install it as part of your Linux distribution, clone it next to the other<br>&gt; projects and it will be bootstrapped automatically<br></p><p><br> My Linux distro doesn&#39;t package ninja, so I also did this:<br></p><p>git clone git at github.com:martine/ninja.git<br></p><p>I then attempted to build swift:<br></p><p>$ ./swift/utils/build-script<br></p><p>Which resulted in errors, and as far as I can tell did not attempt to build<br>the ninja distro that I downloaded into the ninja directory in my current<br>working directory:<br></p><p>which: no ninja in<br>&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt; + rm -rf /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt; + cp -r /home/lanes/swift/ninja<br>&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt; ++ uname -s<br>&gt; + [[ Linux == \D\a\r\w\i\n ]]<br>&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt; + python ./configure.py --bootstrap<br>&gt; bootstrapping ninja...<br>&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt; to src/*.in.cc will not affect your build.<br>&gt; wrote build.ninja.<br>&gt; bootstrap complete.  rebuilding...<br>&gt; [24/24] LINK ninja<br>&gt; cmark: using standard linker<br>&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt; /home/lanes/swift/cmark<br>&gt; CMake Error: CMake was unable to find a build program corresponding to<br>&gt; &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a<br>&gt; different build tool.<br>&gt; CMake Error: Error required internal CMake variable not set, cmake may be<br>&gt; not be built correctly.<br>&gt; Missing variable is:<br>&gt; CMAKE_C_COMPILER_ENV_VAR<br>&gt; CMake Error: Could not find cmake module<br>&gt; file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCCompiler.cmake<br>&gt; CMake Error: Error required internal CMake variable not set, cmake may be<br>&gt; not be built correctly.<br>&gt; Missing variable is:<br>&gt; CMAKE_CXX_COMPILER_ENV_VAR<br>&gt; CMake Error: Could not find cmake module<br>&gt; file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCXXCompiler.cmake<br>&gt; -- Configuring incomplete, errors occurred!<br>&gt; ./swift/utils/build-script: command terminated with a non-zero exit status<br>&gt; 1, aborting<br></p><p><br></p><p>This leads me to a couple of questions:<br></p><p>* Do I need to first build and install re2c? If so, this should perhaps be<br>mentioned as a prereq.<br>* Is there anything differently I should be doing to get the bootstrap<br>process running successfully?<br></p><p>Thanks,<br>Lane<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151204/e55ad715/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>Hi Lane,<br></p><p>You shouldn&#39;t need to install re2c to build Ninja.<br></p><p>This looks like something is wrong in the build script. It did successfully build Ninja, but it isn&#39;t getting found by CMake for the mark build.<br></p><p>Can you open an SR for this on bugs.swift.org?<br></p><p>If you want to debug yourself, it looks like the PATH export at utils/build-script-impl:1287 isn&#39;t working, it should have let ninja be found for the rest of the commands.<br></p><p> - Daniel<br></p><p>&gt; On Dec 4, 2015, at 11:22 AM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; First of all, congratulations on the open source release! I&#39;m very excited!<br>&gt; <br>&gt; Second, I&#39;m running into trouble building from source, particularly in regards to getting ninja bootstrapped. I&#39;m on Scientific Linux. I first used yum to install packages for llvm, llvm-devel, clang, and cmake.<br>&gt; <br>&gt; I then did the following, following the README.md in the swift git repo: <br>&gt; <br>&gt;  git clone git at github.com:apple/swift.git swift<br>&gt;  git clone git at github.com:apple/swift-llvm.git llvm<br>&gt;  git clone git at github.com:apple/swift-clang.git clang<br>&gt;  git clone git at github.com:apple/swift-lldb.git lldb<br>&gt;  git clone git at github.com:apple/swift-cmark.git cmark<br>&gt;  git clone git at github.com:apple/swift-llbuild.git llbuild<br>&gt;  git clone git at github.com:apple/swift-package-manager.git swiftpm<br>&gt;  git clone git at github.com:apple/swift-corelibs-xctest.git<br>&gt;  git clone git at github.com:apple/swift-corelibs-foundation.git<br>&gt; <br>&gt; <br>&gt; The README.md also states:<br>&gt; <br>&gt; Ninja is the current recommended build system for building Swift and is the default configuration generated by CMake. If you&#39;re on OS X or don&#39;t install it as part of your Linux distribution, clone it next to the other projects and it will be bootstrapped automatically<br>&gt; <br>&gt;  My Linux distro doesn&#39;t package ninja, so I also did this:<br>&gt; <br>&gt; git clone git at github.com:martine/ninja.git<br>&gt; <br>&gt; I then attempted to build swift:<br>&gt; <br>&gt; $ ./swift/utils/build-script<br>&gt; <br>&gt; Which resulted in errors, and as far as I can tell did not attempt to build the ninja distro that I downloaded into the ninja directory in my current working directory:<br>&gt; <br>&gt; which: no ninja in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt; + rm -rf /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt; + cp -r /home/lanes/swift/ninja /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt; ++ uname -s<br>&gt; + [[ Linux == \D\a\r\w\i\n ]]<br>&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt; + python ./configure.py --bootstrap<br>&gt; bootstrapping ninja...<br>&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to src/*.in.cc will not affect your build.<br>&gt; wrote build.ninja.<br>&gt; bootstrap complete.  rebuilding...<br>&gt; [24/24] LINK ninja<br>&gt; cmark: using standard linker<br>&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug /home/lanes/swift/cmark<br>&gt; CMake Error: CMake was unable to find a build program corresponding to &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.<br>&gt; CMake Error: Error required internal CMake variable not set, cmake may be not be built correctly.<br>&gt; Missing variable is:<br>&gt; CMAKE_C_COMPILER_ENV_VAR<br>&gt; CMake Error: Could not find cmake module file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCCompiler.cmake<br>&gt; CMake Error: Error required internal CMake variable not set, cmake may be not be built correctly.<br>&gt; Missing variable is:<br>&gt; CMAKE_CXX_COMPILER_ENV_VAR<br>&gt; CMake Error: Could not find cmake module file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCXXCompiler.cmake<br>&gt; -- Configuring incomplete, errors occurred!<br>&gt; ./swift/utils/build-script: command terminated with a non-zero exit status 1, aborting<br>&gt; <br>&gt; <br>&gt; This leads me to a couple of questions:<br>&gt; <br>&gt; * Do I need to first build and install re2c? If so, this should perhaps be mentioned as a prereq.<br>&gt; * Is there anything differently I should be doing to get the bootstrap process running successfully?<br>&gt; <br>&gt; Thanks,<br>&gt; Lane<br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151204/2764e69b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 1:36 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt; Hi Lane,<br>&gt;<br>&gt; You shouldn&#39;t need to install re2c to build Ninja.<br>&gt;<br>&gt; This looks like something is wrong in the build script. It did<br>&gt; successfully build Ninja, but it isn&#39;t getting found by CMake for the mark<br>&gt; build.<br>&gt;<br>&gt; Can you open an SR for this on bugs.swift.org?<br>&gt;<br>&gt; If you want to debug yourself, it looks like the PATH export at<br>&gt; utils/build-script-impl:1287 isn&#39;t working, it should have let ninja be<br>&gt; found for the rest of the commands.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Dec 4, 2015, at 11:22 AM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; First of all, congratulations on the open source release! I&#39;m very excited!<br>&gt;<br>&gt; Second, I&#39;m running into trouble building from source, particularly in<br>&gt; regards to getting ninja bootstrapped. I&#39;m on Scientific Linux. I first<br>&gt; used yum to install packages for llvm, llvm-devel, clang, and cmake.<br>&gt;<br>&gt; I then did the following, following the README.md in the swift git repo:<br>&gt;<br>&gt;  git clone git at github.com:apple/swift.git swift<br>&gt;  git clone git at github.com:apple/swift-llvm.git llvm<br>&gt;  git clone git at github.com:apple/swift-clang.git clang<br>&gt;  git clone git at github.com:apple/swift-lldb.git lldb<br>&gt;  git clone git at github.com:apple/swift-cmark.git cmark<br>&gt;  git clone git at github.com:apple/swift-llbuild.git llbuild<br>&gt;  git clone git at github.com:apple/swift-package-manager.git swiftpm<br>&gt;  git clone git at github.com:apple/swift-corelibs-xctest.git<br>&gt;  git clone git at github.com:apple/swift-corelibs-foundation.git<br>&gt;<br>&gt;<br>&gt; The README.md also states:<br>&gt;<br>&gt; Ninja is the current recommended build system for building Swift and is<br>&gt;&gt; the default configuration generated by CMake. If you&#39;re on OS X or don&#39;t<br>&gt;&gt; install it as part of your Linux distribution, clone it next to the other<br>&gt;&gt; projects and it will be bootstrapped automatically<br>&gt;<br>&gt;<br>&gt;  My Linux distro doesn&#39;t package ninja, so I also did this:<br>&gt;<br>&gt; git clone git at github.com:martine/ninja.git<br>&gt;<br>&gt; I then attempted to build swift:<br>&gt;<br>&gt; $ ./swift/utils/build-script<br>&gt;<br>&gt; Which resulted in errors, and as far as I can tell did not attempt to<br>&gt; build the ninja distro that I downloaded into the ninja directory in my<br>&gt; current working directory:<br>&gt;<br>&gt; which: no ninja in<br>&gt;&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt;&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt;&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt;&gt; + rm -rf /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt; + cp -r /home/lanes/swift/ninja<br>&gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt; ++ uname -s<br>&gt;&gt; + [[ Linux == \D\a\r\w\i\n ]]<br>&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt; + python ./configure.py --bootstrap<br>&gt;&gt; bootstrapping ninja...<br>&gt;&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt;&gt; to src/*.in.cc will not affect your build.<br>&gt;&gt; wrote build.ninja.<br>&gt;&gt; bootstrap complete.  rebuilding...<br>&gt;&gt; [24/24] LINK ninja<br>&gt;&gt; cmark: using standard linker<br>&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt;&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt;&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt;&gt; /home/lanes/swift/cmark<br>&gt;&gt; CMake Error: CMake was unable to find a build program corresponding to<br>&gt;&gt; &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a<br>&gt;&gt; different build tool.<br>&gt;&gt; CMake Error: Error required internal CMake variable not set, cmake may be<br>&gt;&gt; not be built correctly.<br>&gt;&gt; Missing variable is:<br>&gt;&gt; CMAKE_C_COMPILER_ENV_VAR<br>&gt;&gt; CMake Error: Could not find cmake module<br>&gt;&gt; file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCCompiler.cmake<br>&gt;&gt; CMake Error: Error required internal CMake variable not set, cmake may be<br>&gt;&gt; not be built correctly.<br>&gt;&gt; Missing variable is:<br>&gt;&gt; CMAKE_CXX_COMPILER_ENV_VAR<br>&gt;&gt; CMake Error: Could not find cmake module<br>&gt;&gt; file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCXXCompiler.cmake<br>&gt;&gt; -- Configuring incomplete, errors occurred!<br>&gt;&gt; ./swift/utils/build-script: command terminated with a non-zero exit<br>&gt;&gt; status 1, aborting<br>&gt;<br>&gt;<br>&gt;<br>&gt; This leads me to a couple of questions:<br>&gt;<br>&gt; * Do I need to first build and install re2c? If so, this should perhaps be<br>&gt; mentioned as a prereq.<br>&gt; * Is there anything differently I should be doing to get the bootstrap<br>&gt; process running successfully?<br>&gt;<br>&gt; Thanks,<br>&gt; Lane<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>Issue created: https://bugs.swift.org/browse/SR-58<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151204/91157052/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 11:22 AM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; First of all, congratulations on the open source release! I&#39;m very excited!<br>&gt;<br>&gt; Second, I&#39;m running into trouble building from source, particularly in<br>&gt; regards to getting ninja bootstrapped. I&#39;m on Scientific Linux.<br>&gt;<br></p><p>Which version are you running?  It is only feasible to try SL7+ because of<br>LLVM and Clang requirements.<br></p><p><br>&gt; I first used yum to install packages for llvm, llvm-devel, clang, and<br>&gt; cmake.<br>&gt;<br>&gt; I then did the following, following the README.md in the swift git repo:<br>&gt;<br>&gt;  git clone git at github.com:apple/swift.git swift<br>&gt;  git clone git at github.com:apple/swift-llvm.git llvm<br>&gt;  git clone git at github.com:apple/swift-clang.git clang<br>&gt;  git clone git at github.com:apple/swift-lldb.git lldb<br>&gt;  git clone git at github.com:apple/swift-cmark.git cmark<br>&gt;  git clone git at github.com:apple/swift-llbuild.git llbuild<br>&gt;  git clone git at github.com:apple/swift-package-manager.git swiftpm<br>&gt;  git clone git at github.com:apple/swift-corelibs-xctest.git<br>&gt;  git clone git at github.com:apple/swift-corelibs-foundation.git<br>&gt;<br>&gt;<br>&gt; The README.md also states:<br>&gt;<br>&gt; Ninja is the current recommended build system for building Swift and is<br>&gt;&gt; the default configuration generated by CMake. If you&#39;re on OS X or don&#39;t<br>&gt;&gt; install it as part of your Linux distribution, clone it next to the other<br>&gt;&gt; projects and it will be bootstrapped automatically<br>&gt;<br>&gt;<br>&gt;  My Linux distro doesn&#39;t package ninja, so I also did this:<br>&gt;<br>&gt; git clone git at github.com:martine/ninja.git<br>&gt;<br>&gt; I then attempted to build swift:<br>&gt;<br>&gt; $ ./swift/utils/build-script<br>&gt;<br></p><p>Yes, this should work.<br></p><p><br>&gt;<br>&gt; Which resulted in errors, and as far as I can tell did not attempt to<br>&gt; build the ninja distro that I downloaded into the ninja directory in my<br>&gt; current working directory:<br>&gt;<br>&gt; which: no ninja in<br>&gt;&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt;&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt;&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt;&gt; + rm -rf /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt; + cp -r /home/lanes/swift/ninja<br>&gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt; ++ uname -s<br>&gt;&gt; + [[ Linux == \D\a\r\w\i\n ]]<br>&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt; + python ./configure.py --bootstrap<br>&gt;&gt; bootstrapping ninja...<br>&gt;&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt;&gt; to src/*.in.cc will not affect your build.<br>&gt;&gt; wrote build.ninja.<br>&gt;&gt; bootstrap complete.  rebuilding...<br>&gt;&gt; [24/24] LINK ninja<br>&gt;&gt;<br>&gt;<br>So ninja built successfully.<br></p><p><br>&gt; cmark: using standard linker<br>&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt;&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt;&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt;&gt; /home/lanes/swift/cmark<br>&gt;&gt;<br>&gt;<br>I just verified, the script bootstraps ninja for me, and cmake finds it.<br></p><p>Could you apply this patch and see if the PATH was set correctly?<br></p><p>diff --git a/utils/build-script-impl b/utils/build-script-impl<br>index b2d2954..60ab51d 100755<br>--- a/utils/build-script-impl<br>+++ b/utils/build-script-impl<br>@@ -1312,6 +1312,7 @@ if [[ &quot;${BUILD_NINJA}&quot; ]] ; then<br>         fi<br>     fi<br>     export PATH=&quot;${build_dir}:${PATH}&quot;<br>+    which ninja<br> fi<br></p><p> #<br>@@ -1805,6 +1806,7 @@ for deployment_target in<br>&quot;${NATIVE_TOOLS_DEPLOYMENT_TARGETS[@]}&quot; &quot;${CROSS_TOOLS_<br>                     ( ! -z &quot;${generator_output_path}&quot; &amp;&amp; ! -f<br>&quot;${generator_output_path}&quot; ) ]] ; then<br>             mkdir -p &quot;${build_dir}&quot;<br>             set -x<br>+            which ninja<br>             (cd &quot;${build_dir}&quot; &amp;&amp; &quot;$CMAKE&quot; &quot;${cmake_options[@]}&quot;<br>${USER_CONFIG_ARGS})<br>             { set +x; } 2&gt;/dev/null<br>         fi<br></p><p> Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151204/56310eef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 1:39 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Dec 4, 2015 at 11:22 AM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt; First of all, congratulations on the open source release! I&#39;m very<br>&gt;&gt; excited!<br>&gt;&gt;<br>&gt;&gt; Second, I&#39;m running into trouble building from source, particularly in<br>&gt;&gt; regards to getting ninja bootstrapped. I&#39;m on Scientific Linux.<br>&gt;&gt;<br>&gt;<br>&gt; Which version are you running?  It is only feasible to try SL7+ because of<br>&gt; LLVM and Clang requirements.<br>&gt;<br>&gt;<br>&gt;&gt; I first used yum to install packages for llvm, llvm-devel, clang, and<br>&gt;&gt; cmake.<br>&gt;&gt;<br>&gt;&gt; I then did the following, following the README.md in the swift git repo:<br>&gt;&gt;<br>&gt;&gt;  git clone git at github.com:apple/swift.git swift<br>&gt;&gt;  git clone git at github.com:apple/swift-llvm.git llvm<br>&gt;&gt;  git clone git at github.com:apple/swift-clang.git clang<br>&gt;&gt;  git clone git at github.com:apple/swift-lldb.git lldb<br>&gt;&gt;  git clone git at github.com:apple/swift-cmark.git cmark<br>&gt;&gt;  git clone git at github.com:apple/swift-llbuild.git llbuild<br>&gt;&gt;  git clone git at github.com:apple/swift-package-manager.git swiftpm<br>&gt;&gt;  git clone git at github.com:apple/swift-corelibs-xctest.git<br>&gt;&gt;  git clone git at github.com:apple/swift-corelibs-foundation.git<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The README.md also states:<br>&gt;&gt;<br>&gt;&gt; Ninja is the current recommended build system for building Swift and is<br>&gt;&gt;&gt; the default configuration generated by CMake. If you&#39;re on OS X or don&#39;t<br>&gt;&gt;&gt; install it as part of your Linux distribution, clone it next to the other<br>&gt;&gt;&gt; projects and it will be bootstrapped automatically<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;  My Linux distro doesn&#39;t package ninja, so I also did this:<br>&gt;&gt;<br>&gt;&gt; git clone git at github.com:martine/ninja.git<br>&gt;&gt;<br>&gt;&gt; I then attempted to build swift:<br>&gt;&gt;<br>&gt;&gt; $ ./swift/utils/build-script<br>&gt;&gt;<br>&gt;<br>&gt; Yes, this should work.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Which resulted in errors, and as far as I can tell did not attempt to<br>&gt;&gt; build the ninja distro that I downloaded into the ninja directory in my<br>&gt;&gt; current working directory:<br>&gt;&gt;<br>&gt;&gt; which: no ninja in<br>&gt;&gt;&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt;&gt;&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt;&gt;&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt;&gt;&gt; + rm -rf /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt;&gt; + cp -r /home/lanes/swift/ninja<br>&gt;&gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt;&gt; ++ uname -s<br>&gt;&gt;&gt; + [[ Linux == \D\a\r\w\i\n ]]<br>&gt;&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/ninja-build<br>&gt;&gt;&gt; + python ./configure.py --bootstrap<br>&gt;&gt;&gt; bootstrapping ninja...<br>&gt;&gt;&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt;&gt;&gt; to src/*.in.cc will not affect your build.<br>&gt;&gt;&gt; wrote build.ninja.<br>&gt;&gt;&gt; bootstrap complete.  rebuilding...<br>&gt;&gt;&gt; [24/24] LINK ninja<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; So ninja built successfully.<br>&gt;<br>&gt;<br>&gt;&gt; cmark: using standard linker<br>&gt;&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt;&gt;&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt;&gt;&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt;&gt;&gt; /home/lanes/swift/cmark<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; I just verified, the script bootstraps ninja for me, and cmake finds it.<br>&gt;<br>&gt; Could you apply this patch and see if the PATH was set correctly?<br>&gt;<br>&gt; diff --git a/utils/build-script-impl b/utils/build-script-impl<br>&gt; index b2d2954..60ab51d 100755<br>&gt; --- a/utils/build-script-impl<br>&gt; +++ b/utils/build-script-impl<br>&gt; @@ -1312,6 +1312,7 @@ if [[ &quot;${BUILD_NINJA}&quot; ]] ; then<br>&gt;          fi<br>&gt;      fi<br>&gt;      export PATH=&quot;${build_dir}:${PATH}&quot;<br>&gt; +    which ninja<br>&gt;  fi<br>&gt;<br>&gt;  #<br>&gt; @@ -1805,6 +1806,7 @@ for deployment_target in<br>&gt; &quot;${NATIVE_TOOLS_DEPLOYMENT_TARGETS[@]}&quot; &quot;${CROSS_TOOLS_<br>&gt;                      ( ! -z &quot;${generator_output_path}&quot; &amp;&amp; ! -f<br>&gt; &quot;${generator_output_path}&quot; ) ]] ; then<br>&gt;              mkdir -p &quot;${build_dir}&quot;<br>&gt;              set -x<br>&gt; +            which ninja<br>&gt;              (cd &quot;${build_dir}&quot; &amp;&amp; &quot;$CMAKE&quot; &quot;${cmake_options[@]}&quot;<br>&gt; ${USER_CONFIG_ARGS})<br>&gt;              { set +x; } 2&gt;/dev/null<br>&gt;          fi<br>&gt;<br>&gt;  Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br>I&#39;m on Scientific Linux 7.1. I added the two instances of &quot;which ninja&quot; as<br>you suggested, then re-ran build-script:<br></p><p>$ ./swift/utils/build-script<br>&gt; which: no ninja in<br>&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt;<br>&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build/ninja<br>&gt; cmark: using standard linker<br>&gt; + which ninja<br>&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build/ninja<br>&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt; /home/lanes/swift/cmark<br>&gt; CMake Error: CMake was unable to find a build program corresponding to<br>&gt; &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a<br>&gt; different build tool.<br>&gt; CMake Error: Error required internal CMake variable not set, cmake may be<br>&gt; not be built correctly.<br>&gt; Missing variable is:<br>&gt; CMAKE_C_COMPILER_ENV_VAR<br>&gt; CMake Error: Could not find cmake module<br>&gt; file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCCompiler.cmake<br>&gt; CMake Error: Error required internal CMake variable not set, cmake may be<br>&gt; not be built correctly.<br>&gt; Missing variable is:<br>&gt; CMAKE_CXX_COMPILER_ENV_VAR<br>&gt; CMake Error: Could not find cmake module<br>&gt; file:/home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64/CMakeFiles/2.8.11/CMakeCXXCompiler.cmake<br>&gt; -- Configuring incomplete, errors occurred!<br>&gt; ./swift/utils/build-script: command terminated with a non-zero exit status<br>&gt; 1, aborting<br></p><p><br>Thanks,<br>Lane<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151204/28c7f6f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 12:36 PM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt; I&#39;m on Scientific Linux 7.1. I added the two instances of &quot;which ninja&quot; as<br>&gt; you suggested, then re-ran build-script:<br>&gt;<br>&gt;&gt; $ ./swift/utils/build-script<br>&gt;&gt; which: no ninja in<br>&gt;&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt;&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt;&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt;&gt;<br>&gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build/ninja<br>&gt;&gt; cmark: using standard linker<br>&gt;&gt; + which ninja<br>&gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build/ninja<br>&gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt;&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt;&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt;&gt; /home/lanes/swift/cmark<br>&gt;&gt; CMake Error: CMake was unable to find a build program corresponding to<br>&gt;&gt; &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a<br>&gt;&gt; different build tool.<br></p><p>Interesting.  So ninja is found in both places, but CMake does not see<br>it.  What&#39;s your CMake version?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>December  4, 2015 at 02:00:00pm</p></header><div class="content"><p>cmake version 2.8.11<br></p><p>On Fri, Dec 4, 2015 at 2:42 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Dec 4, 2015 at 12:36 PM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt; &gt; I&#39;m on Scientific Linux 7.1. I added the two instances of &quot;which ninja&quot;<br>&gt; as<br>&gt; &gt; you suggested, then re-ran build-script:<br>&gt; &gt;<br>&gt; &gt;&gt; $ ./swift/utils/build-script<br>&gt; &gt;&gt; which: no ninja in<br>&gt; &gt;&gt;<br>&gt; (/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/lanes/.local/bin:/home/lanes/bin)<br>&gt; &gt;&gt; Building the standard library for: swift-stdlib-linux-x86_64<br>&gt; &gt;&gt; Running Swift tests for: check-swift-linux-x86_64<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build/ninja<br>&gt; &gt;&gt; cmark: using standard linker<br>&gt; &gt;&gt; + which ninja<br>&gt; &gt;&gt; /home/lanes/swift/build/Ninja-DebugAssert/ninja-build/ninja<br>&gt; &gt;&gt; + cd /home/lanes/swift/build/Ninja-DebugAssert/cmark-linux-x86_64<br>&gt; &gt;&gt; + /usr/bin/cmake -G Ninja -DCMAKE_C_COMPILER:PATH=clang<br>&gt; &gt;&gt; -DCMAKE_CXX_COMPILER:PATH=clang++ -DCMAKE_BUILD_TYPE:STRING=Debug<br>&gt; &gt;&gt; /home/lanes/swift/cmark<br>&gt; &gt;&gt; CMake Error: CMake was unable to find a build program corresponding to<br>&gt; &gt;&gt; &quot;Ninja&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a<br>&gt; &gt;&gt; different build tool.<br>&gt;<br>&gt; Interesting.  So ninja is found in both places, but CMake does not see<br>&gt; it.  What&#39;s your CMake version?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>When a place gets crowded enough to require ID&#39;s, social collapse is not<br>far away.  It is time to go elsewhere.  The best thing about space travel<br>is that it made it possible to go elsewhere.<br>                -- R.A. Heinlein, &quot;Time Enough For Love&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151204/b39f4ce0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  5, 2015 at 12:00:00am</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 12:44 PM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt; cmake version 2.8.11<br></p><p>Is it feasible for you to try with cmake 3, or at least 2.8.12.2?<br>There have been many fixes for ninja in the 2.8.12.* series.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>Bootstrapping ninja and building from source</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>December  5, 2015 at 11:00:00am</p></header><div class="content"><p>I can confirm that using newer versions of cmake &gt;= 2.8.12.2 fix this<br>problem. I&#39;m now getting other problems, which I&#39;ll post in a separate<br>thread.<br></p><p>The strange thing is that llvm/CMakeLists.txt contains the line<br>cmake_minimum_required(VERSION 2.8.12.2), so when I ran with cmake 2.8.11 I<br>would have expected cmake to die at that point with an error message saying<br>I had too old of a version, but it didn&#39;t.<br></p><p>On Sat, Dec 5, 2015 at 2:01 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Dec 4, 2015 at 12:44 PM, Lane Schwartz &lt;dowobeha at gmail.com&gt; wrote:<br>&gt; &gt; cmake version 2.8.11<br>&gt;<br>&gt; Is it feasible for you to try with cmake 3, or at least 2.8.12.2?<br>&gt; There have been many fixes for ninja in the 2.8.12.* series.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>When a place gets crowded enough to require ID&#39;s, social collapse is not<br>far away.  It is time to go elsewhere.  The best thing about space travel<br>is that it made it possible to go elsewhere.<br>                -- R.A. Heinlein, &quot;Time Enough For Love&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151205/b81936eb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
