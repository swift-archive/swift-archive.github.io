<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>July 18, 2016 at 09:00:00pm</p></header><div class="content"><p>If people were generally happy with having public members of open <br>classes overridable by default, then we certainly wouldn&#39;t need to have <br>a separate qualifier for that. (Although as &quot;internal&quot; demonstrates, <br>it&#39;s nice to have a formal name for such things.)<br></p><p>However, (1) having a default would allow API designers to define <br>public APIs with very little additional thought, and (2) it seems to me <br>we&#39;re very very far from consensus on which default would be best. I&#39;d <br>like to avoid arguing even more about the theoretical merits of <br>choosing open vs final vs dynamic by default. (Note that there are <br>highly respectable app developers who honestly consider &quot;open&quot; much too <br>restricting.)<br></p><p>I&#39;m enthusiastic about sealed-by-default classes, but to be honest, I <br>personally have no idea what default (if any) would be best for class <br>members. Ask me again after I&#39;ve worked with the new classes for a <br>couple of months.<br></p><p>Karoly<br>@lorentey<br></p><p>On 2016-07-18 18:45:14 +0000, Nevin Brackett-Rozinsky via swift-evolution said:<br></p><p>&gt; Garth makes an excellent point. Károly is correct that we can already <br>&gt; achieve “sealed” by making a `final` member call through to an <br>&gt; `internal` one.<br>&gt; <br>&gt; Therefore, it seem clear that “open” should only be applicable to <br>&gt; classes, not to members. This should simplify the proposal nicely.<br>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; <br>&gt; On Mon, Jul 18, 2016 at 2:39 PM, Garth Snyder via swift-evolution <br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; Károly wrote: I suggest we change the proposal to remove the implicit <br>&gt; &quot;sealed&quot; level of public member overridability, and support only &quot;open&quot; <br>&gt; or &quot;final&quot; class members. For members, &quot;open&quot; should mean the opposite <br>&gt; of &quot;final&quot;, with no levels in between. Member-level openness should be <br>&gt; entirely independent of visibility; so it should be possible to say <br>&gt; &quot;internal open&quot; to mean an internally overridable member that&#39;s not at <br>&gt; all visible outside the module -- the same as today&#39;s default.<br>&gt; <br>&gt; What is the distinction between this approach and simply omitting the <br>&gt; ability to apply the “open” keyword to anything but a class?<br>&gt; <br>&gt; The current behavior is (IIUC) that you cannot override a superclass’s <br>&gt; final method. Aside from that, you can override any other method that’s <br>&gt; visible to you, wherever you stand with regard to the superclass’s <br>&gt; origin. If there’s no sealed status for members, why is any change to <br>&gt; member annotations needed at all?<br>&gt; <br>&gt; Garth<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/a24e4ba7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 18, 2016 at 10:00:00pm</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jul 18, 2016, at 9:53 PM, Károly Lőrentey via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If people were generally happy with having public members of open classes overridable by default, then we certainly wouldn&#39;t need to have a separate qualifier for that. (Although as &quot;internal&quot; demonstrates, it&#39;s nice to have a formal name for such things.)<br>&gt; <br>&gt; <br>&gt; <br>&gt; However, (1) having a default would allow API designers to define public APIs with very little additional thought, and (2) it seems to me we&#39;re very very far from consensus on which default would be best. I&#39;d like to avoid arguing even more about the theoretical merits of choosing open vs final vs dynamic by default. (Note that there are highly respectable app developers who honestly consider &quot;open&quot; much too restricting.)<br>&gt; <br>&gt; <br>&gt; <br>&gt; I&#39;m enthusiastic about sealed-by-default classes, but to be honest, I personally have no idea what default (if any) would be best for class members. Ask me again after I&#39;ve worked with the new classes for a couple of months.<br>&gt; <br>This is what i find so unique about this situation: there is not 2 months to decide, there is not a couple of implementations to compare.. there is here and now to decide for the next 20 years, with zero experience with the api and very little external references (which nobody seems to have sahed any practical experience with) ... nonetheless it must all be fleshed out before the 28th. I cincerely hope the core team is more prepared than they currently let out.<br></p><p><br>&gt; <br>&gt; Karoly<br>&gt; <br>&gt; @lorentey<br>&gt; <br>&gt; <br>&gt; <br>&gt; On 2016-07-18 18:45:14 +0000, Nevin Brackett-Rozinsky via swift-evolution said:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Garth makes an excellent point. Károly is correct that we can already achieve “sealed” by making a `final` member call through to an `internal` one.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Therefore, it seem clear that “open” should only be applicable to classes, not to members. This should simplify the proposal nicely.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Mon, Jul 18, 2016 at 2:39 PM, Garth Snyder via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org&gt; wrote:<br>&gt; <br>&gt; &gt; Károly wrote: I suggest we change the proposal to remove the implicit &quot;sealed&quot; level of public member overridability, and support only &quot;open&quot; or &quot;final&quot; class members. For members, &quot;open&quot; should mean the opposite of &quot;final&quot;, with no levels in between. Member-level openness should be entirely independent of visibility; so it should be possible to say &quot;internal open&quot; to mean an internally overridable member that&#39;s not at all visible outside the module -- the same as today&#39;s default.<br>&gt; <br>&gt; <br>&gt; <br>&gt; What is the distinction between this approach and simply omitting the ability to apply the “open” keyword to anything but a class?<br>&gt; <br>&gt; <br>&gt; <br>&gt; The current behavior is (IIUC) that you cannot override a superclass’s final method. Aside from that, you can override any other method that’s visible to you, wherever you stand with regard to the superclass’s origin. If there’s no sealed status for members, why is any change to member annotations needed at all?<br>&gt; <br>&gt; <br>&gt; <br>&gt; Garth<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/d601b188/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 18, 2016, at 1:49 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Regards<br>&gt; (From mobile)<br>&gt; <br>&gt;&gt; On Jul 18, 2016, at 9:53 PM, Károly Lőrentey via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If people were generally happy with having public members of open classes overridable by default, then we certainly wouldn&#39;t need to have a separate qualifier for that. (Although as &quot;internal&quot; demonstrates, it&#39;s nice to have a formal name for such things.)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; However, (1) having a default would allow API designers to define public APIs with very little additional thought, and (2) it seems to me we&#39;re very very far from consensus on which default would be best. I&#39;d like to avoid arguing even more about the theoretical merits of choosing open vs final vs dynamic by default. (Note that there are highly respectable app developers who honestly consider &quot;open&quot; much too restricting.)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I&#39;m enthusiastic about sealed-by-default classes, but to be honest, I personally have no idea what default (if any) would be best for class members. Ask me again after I&#39;ve worked with the new classes for a couple of months.<br>&gt;&gt; <br>&gt; This is what i find so unique about this situation: there is not 2 months to decide, there is not a couple of implementations to compare.. there is here and now to decide for the next 20 years, with zero experience with the api and very little external references (which nobody seems to have sahed any practical experience with) ... nonetheless it must all be fleshed out before the 28th. I cincerely hope the core team is more prepared than they currently let out.<br></p><p>It&#39;s going to be okay.  The ax is already at the root of the tree; We are just trying to make sure it falls safely. Once it is on the ground, we will make lumber and some firewood, then we will build a cabin with a nice porch. We will invite the neighbors to celebrate by making s&#39;mores on the fire provided by the fallen tree.  So yeah, if you want s&#39;mores you better get away from the falling tree; You should probably run when you hear it falling.  <br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; Karoly<br>&gt;&gt; <br>&gt;&gt; @lorentey<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On 2016-07-18 18:45:14 +0000, Nevin Brackett-Rozinsky via swift-evolution said:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Garth makes an excellent point. Károly is correct that we can already achieve “sealed” by making a `final` member call through to an `internal` one.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Therefore, it seem clear that “open” should only be applicable to classes, not to members. This should simplify the proposal nicely.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Nevin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Mon, Jul 18, 2016 at 2:39 PM, Garth Snyder via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; Károly wrote: I suggest we change the proposal to remove the implicit &quot;sealed&quot; level of public member overridability, and support only &quot;open&quot; or &quot;final&quot; class members. For members, &quot;open&quot; should mean the opposite of &quot;final&quot;, with no levels in between. Member-level openness should be entirely independent of visibility; so it should be possible to say &quot;internal open&quot; to mean an internally overridable member that&#39;s not at all visible outside the module -- the same as today&#39;s default.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What is the distinction between this approach and simply omitting the ability to apply the “open” keyword to anything but a class?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The current behavior is (IIUC) that you cannot override a superclass’s final method. Aside from that, you can override any other method that’s visible to you, wherever you stand with regard to the superclass’s origin. If there’s no sealed status for members, why is any change to member annotations needed at all?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Garth<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/2ae310dc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
