<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>I noticed several weeks ago that the following is illegal:<br></p><p>    let new_arr = el in arr where el.is_foo // illegal<br></p><p>I assumed it would work because it&#39;s consistent with the filtering that<br>exists in a &quot;for&quot; loop, i.e.:<br></p><p>    for el in arr where el.is_foo // legal<br></p><p>Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s<br>already on the roadmap, or inherently wrong.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/dbc6391c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>December 19, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; I noticed several weeks ago that the following is illegal:<br>&gt; <br>&gt;     let new_arr = el in arr where el.is &lt;http://el.is/&gt;_foo // illegal<br>&gt; <br>&gt; I assumed it would work because it&#39;s consistent with the filtering that exists in a &quot;for&quot; loop, i.e.:<br>&gt; <br>&gt;     for el in arr where el.is &lt;http://el.is/&gt;_foo // legal<br>&gt; <br>&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s already on the roadmap, or inherently wrong.<br></p><p>I believe what you want is already possible via the “filter” method.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/e548fd5d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>Thanks Charles ,<br></p><p>I know it&#39;s possible to do the same thing with filter. The syntax I drew<br>attention to would be an alternate way.<br></p><p>My only rationale is that, if it works in one place, it ought to work<br>everywhere. The redundancy bothers me too, but since the concept exists, we<br>may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot;<br>loop (maybe performance is better, but that could be optimized?), but also<br>inconsistent because it seems intuitively like it ought to create a subset<br>whereas in reality it is illegal.<br></p><p>Does it bother anyone else, or am I nitpicking?<br></p><p>On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt;<br>wrote:<br></p><p>&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I noticed several weeks ago that the following is illegal:<br>&gt;<br>&gt;     let new_arr = el in arr where el.is_foo // illegal<br>&gt;<br>&gt; I assumed it would work because it&#39;s consistent with the filtering that<br>&gt; exists in a &quot;for&quot; loop, i.e.:<br>&gt;<br>&gt;     for el in arr where el.is_foo // legal<br>&gt;<br>&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s<br>&gt; already on the roadmap, or inherently wrong.<br>&gt;<br>&gt;<br>&gt; I believe what you want is already possible via the “filter” method.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/9c9ce357/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 19, 2015 at 09:00:00pm</p></header><div class="content"><p>It doesn&#39;t bother me, because I read it as an additional constraint on the<br>`for` loop rather than an operation being done on the enumerated sequence.<br>That is,<br></p><p>    for x in y where x &gt; 2 { }<br></p><p>is fairly consistent with<br></p><p>    if let x = y where x &gt; 2 { }<br></p><p>And you wouldn&#39;t expect to be able to do &quot;let x = y where x &gt; 2&quot;.<br></p><p>Jacob Bandes-Storch<br></p><p>On Sat, Dec 19, 2015 at 8:22 PM, Charles Constant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Thanks Charles ,<br>&gt;<br>&gt; I know it&#39;s possible to do the same thing with filter. The syntax I drew<br>&gt; attention to would be an alternate way.<br>&gt;<br>&gt; My only rationale is that, if it works in one place, it ought to work<br>&gt; everywhere. The redundancy bothers me too, but since the concept exists, we<br>&gt; may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot;<br>&gt; loop (maybe performance is better, but that could be optimized?), but also<br>&gt; inconsistent because it seems intuitively like it ought to create a subset<br>&gt; whereas in reality it is illegal.<br>&gt;<br>&gt; Does it bother anyone else, or am I nitpicking?<br>&gt;<br>&gt; On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I noticed several weeks ago that the following is illegal:<br>&gt;&gt;<br>&gt;&gt;     let new_arr = el in arr where el.is_foo // illegal<br>&gt;&gt;<br>&gt;&gt; I assumed it would work because it&#39;s consistent with the filtering that<br>&gt;&gt; exists in a &quot;for&quot; loop, i.e.:<br>&gt;&gt;<br>&gt;&gt;     for el in arr where el.is_foo // legal<br>&gt;&gt;<br>&gt;&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s<br>&gt;&gt; already on the roadmap, or inherently wrong.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I believe what you want is already possible via the “filter” method.<br>&gt;&gt;<br>&gt;&gt; Charles<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/78686df1/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 19, 2015 at 10:00:00pm</p></header><div class="content"><p>Hi Jacob,<br></p><p>I take it that&#39;s a -1 ?<br></p><p>I don&#39;t quite understand your example, because y in a &quot;for&quot; loop is an<br>Array. So if I modify your example (I&#39;ll rename &quot;y&quot; to &quot;numbers&quot;)...<br></p><p>    for x in numbers where x &gt; 2 { }<br></p><p>...my intuition immediately barks &quot;it&#39;s a filter!&quot;<br></p><p>    let valid_numbers = x in numbers where x &gt; 2<br></p><p>I realize it&#39;s good to have a closure-based solution for map/filter/reduce,<br>so fair enough that we let the filter method exist. Maybe if I understood<br>Swift better (is this related to sequences?) this would all make sense...<br>but with what grasp of Swift I do have, it makes the language feel baroque<br>to have this &quot;where&quot; clause that looks like it ought to instantiate an<br>array, but can&#39;t.<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>On Sat, Dec 19, 2015 at 9:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; It doesn&#39;t bother me, because I read it as an additional constraint on the<br>&gt; `for` loop rather than an operation being done on the enumerated sequence.<br>&gt; That is,<br>&gt;<br>&gt;     for x in y where x &gt; 2 { }<br>&gt;<br>&gt; is fairly consistent with<br>&gt;<br>&gt;     if let x = y where x &gt; 2 { }<br>&gt;<br>&gt; And you wouldn&#39;t expect to be able to do &quot;let x = y where x &gt; 2&quot;.<br>&gt;<br>&gt; Jacob Bandes-Storch<br>&gt;<br>&gt; On Sat, Dec 19, 2015 at 8:22 PM, Charles Constant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Thanks Charles ,<br>&gt;&gt;<br>&gt;&gt; I know it&#39;s possible to do the same thing with filter. The syntax I drew<br>&gt;&gt; attention to would be an alternate way.<br>&gt;&gt;<br>&gt;&gt; My only rationale is that, if it works in one place, it ought to work<br>&gt;&gt; everywhere. The redundancy bothers me too, but since the concept exists, we<br>&gt;&gt; may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot;<br>&gt;&gt; loop (maybe performance is better, but that could be optimized?), but also<br>&gt;&gt; inconsistent because it seems intuitively like it ought to create a subset<br>&gt;&gt; whereas in reality it is illegal.<br>&gt;&gt;<br>&gt;&gt; Does it bother anyone else, or am I nitpicking?<br>&gt;&gt;<br>&gt;&gt; On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;cocoadev at charlessoft.com<br>&gt;&gt; &gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I noticed several weeks ago that the following is illegal:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     let new_arr = el in arr where el.is_foo // illegal<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I assumed it would work because it&#39;s consistent with the filtering that<br>&gt;&gt;&gt; exists in a &quot;for&quot; loop, i.e.:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     for el in arr where el.is_foo // legal<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s<br>&gt;&gt;&gt; already on the roadmap, or inherently wrong.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I believe what you want is already possible via the “filter” method.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Charles<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/d561bc9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 19, 2015 at 10:00:00pm</p></header><div class="content"><p>A weak -1.<br></p><p>I&#39;m not certain that my argument holds up very well; I&#39;m just pointing out<br>how I see this as consistent with the rest of the language. My point is<br>that &quot;where&quot; is a keyword which adds an extra condition onto a braced<br>block; it doesn&#39;t play a role in producing values.<br></p><p>&quot;for x in y where x &gt; 2&quot; means:<br></p><p>    var g = y.generate()<br>    while let x = g.next() {<br>        if x &gt; 2 { // added by &quot;where&quot; clause<br>            // contents of for-in loop here<br>        }<br>    }<br></p><p>Similarly, &quot;if let x = y where y &gt; 2&quot; means roughly:<br></p><p>    if y != nil {<br>        let x = y!<br>        if x &gt; 2 { // added by &quot;where&quot; clause<br>            // contents of if-statement here<br>        }<br>    }<br></p><p>The purpose of &quot;where&quot; is merely to add an extra &quot;if&quot; without requiring<br>another level of nesting. A plain for-in loop doesn&#39;t produce a new array<br>of values, so using &quot;in&quot; and/or &quot;where&quot; by themselves to produce a new<br>array isn&#39;t possible.<br></p><p>Jacob Bandes-Storch<br></p><p>On Sat, Dec 19, 2015 at 10:10 PM, Charles Constant &lt;charles at charlesism.com&gt;<br>wrote:<br></p><p>&gt; Hi Jacob,<br>&gt;<br>&gt; I take it that&#39;s a -1 ?<br>&gt;<br>&gt; I don&#39;t quite understand your example, because y in a &quot;for&quot; loop is an<br>&gt; Array. So if I modify your example (I&#39;ll rename &quot;y&quot; to &quot;numbers&quot;)...<br>&gt;<br>&gt;     for x in numbers where x &gt; 2 { }<br>&gt;<br>&gt; ...my intuition immediately barks &quot;it&#39;s a filter!&quot;<br>&gt;<br>&gt;     let valid_numbers = x in numbers where x &gt; 2<br>&gt;<br>&gt; I realize it&#39;s good to have a closure-based solution for<br>&gt; map/filter/reduce, so fair enough that we let the filter method exist.<br>&gt; Maybe if I understood Swift better (is this related to sequences?) this<br>&gt; would all make sense... but with what grasp of Swift I do have, it makes<br>&gt; the language feel baroque to have this &quot;where&quot; clause that looks like it<br>&gt; ought to instantiate an array, but can&#39;t.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Dec 19, 2015 at 9:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; It doesn&#39;t bother me, because I read it as an additional constraint on<br>&gt;&gt; the `for` loop rather than an operation being done on the enumerated<br>&gt;&gt; sequence. That is,<br>&gt;&gt;<br>&gt;&gt;     for x in y where x &gt; 2 { }<br>&gt;&gt;<br>&gt;&gt; is fairly consistent with<br>&gt;&gt;<br>&gt;&gt;     if let x = y where x &gt; 2 { }<br>&gt;&gt;<br>&gt;&gt; And you wouldn&#39;t expect to be able to do &quot;let x = y where x &gt; 2&quot;.<br>&gt;&gt;<br>&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt;<br>&gt;&gt; On Sat, Dec 19, 2015 at 8:22 PM, Charles Constant via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Thanks Charles ,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I know it&#39;s possible to do the same thing with filter. The syntax I drew<br>&gt;&gt;&gt; attention to would be an alternate way.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; My only rationale is that, if it works in one place, it ought to work<br>&gt;&gt;&gt; everywhere. The redundancy bothers me too, but since the concept exists, we<br>&gt;&gt;&gt; may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot;<br>&gt;&gt;&gt; loop (maybe performance is better, but that could be optimized?), but also<br>&gt;&gt;&gt; inconsistent because it seems intuitively like it ought to create a subset<br>&gt;&gt;&gt; whereas in reality it is illegal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Does it bother anyone else, or am I nitpicking?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;<br>&gt;&gt;&gt; cocoadev at charlessoft.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I noticed several weeks ago that the following is illegal:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     let new_arr = el in arr where el.is_foo // illegal<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I assumed it would work because it&#39;s consistent with the filtering that<br>&gt;&gt;&gt;&gt; exists in a &quot;for&quot; loop, i.e.:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     for el in arr where el.is_foo // legal<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s<br>&gt;&gt;&gt;&gt; already on the roadmap, or inherently wrong.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I believe what you want is already possible via the “filter” method.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Charles<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/f2e8e9e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 20, 2015 at 10:00:00am</p></header><div class="content"><p>That would be a weak -1 for me too, but only because I don&#39;t like the where syntax on control structures.<br></p><p>Félix<br></p><p>&gt; Le 20 déc. 2015 à 01:31:28, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; A weak -1.<br>&gt; <br>&gt; I&#39;m not certain that my argument holds up very well; I&#39;m just pointing out how I see this as consistent with the rest of the language. My point is that &quot;where&quot; is a keyword which adds an extra condition onto a braced block; it doesn&#39;t play a role in producing values.<br>&gt; <br>&gt; &quot;for x in y where x &gt; 2&quot; means:<br>&gt; <br>&gt;     var g = y.generate()<br>&gt;     while let x = g.next() {<br>&gt;         if x &gt; 2 { // added by &quot;where&quot; clause<br>&gt;             // contents of for-in loop here<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; Similarly, &quot;if let x = y where y &gt; 2&quot; means roughly:<br>&gt; <br>&gt;     if y != nil {<br>&gt;         let x = y!<br>&gt;         if x &gt; 2 { // added by &quot;where&quot; clause<br>&gt;             // contents of if-statement here<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; The purpose of &quot;where&quot; is merely to add an extra &quot;if&quot; without requiring another level of nesting. A plain for-in loop doesn&#39;t produce a new array of values, so using &quot;in&quot; and/or &quot;where&quot; by themselves to produce a new array isn&#39;t possible.<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 10:10 PM, Charles Constant &lt;charles at charlesism.com &lt;mailto:charles at charlesism.com&gt;&gt; wrote:<br>&gt; Hi Jacob,<br>&gt; <br>&gt; I take it that&#39;s a -1 ?<br>&gt; <br>&gt; I don&#39;t quite understand your example, because y in a &quot;for&quot; loop is an Array. So if I modify your example (I&#39;ll rename &quot;y&quot; to &quot;numbers&quot;)...<br>&gt;  <br>&gt;     for x in numbers where x &gt; 2 { }<br>&gt; <br>&gt; ...my intuition immediately barks &quot;it&#39;s a filter!&quot;<br>&gt; <br>&gt;     let valid_numbers = x in numbers where x &gt; 2<br>&gt; <br>&gt; I realize it&#39;s good to have a closure-based solution for map/filter/reduce, so fair enough that we let the filter method exist. Maybe if I understood Swift better (is this related to sequences?) this would all make sense... but with what grasp of Swift I do have, it makes the language feel baroque to have this &quot;where&quot; clause that looks like it ought to instantiate an array, but can&#39;t. <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 9:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; It doesn&#39;t bother me, because I read it as an additional constraint on the `for` loop rather than an operation being done on the enumerated sequence. That is,<br>&gt; <br>&gt;     for x in y where x &gt; 2 { }<br>&gt; <br>&gt; is fairly consistent with <br>&gt; <br>&gt;     if let x = y where x &gt; 2 { }<br>&gt; <br>&gt; And you wouldn&#39;t expect to be able to do &quot;let x = y where x &gt; 2&quot;.<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 8:22 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Thanks Charles ,<br>&gt; <br>&gt; I know it&#39;s possible to do the same thing with filter. The syntax I drew attention to would be an alternate way. <br>&gt; <br>&gt; My only rationale is that, if it works in one place, it ought to work everywhere. The redundancy bothers me too, but since the concept exists, we may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot; loop (maybe performance is better, but that could be optimized?), but also inconsistent because it seems intuitively like it ought to create a subset whereas in reality it is illegal.<br>&gt; <br>&gt; Does it bother anyone else, or am I nitpicking?<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;cocoadev at charlessoft.com &lt;mailto:cocoadev at charlessoft.com&gt;&gt; wrote:<br>&gt;&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I noticed several weeks ago that the following is illegal:<br>&gt;&gt; <br>&gt;&gt;     let new_arr = el in arr where el.is &lt;http://el.is/&gt;_foo // illegal<br>&gt;&gt; <br>&gt;&gt; I assumed it would work because it&#39;s consistent with the filtering that exists in a &quot;for&quot; loop, i.e.:<br>&gt;&gt; <br>&gt;&gt;     for el in arr where el.is &lt;http://el.is/&gt;_foo // legal<br>&gt;&gt; <br>&gt;&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s already on the roadmap, or inherently wrong.<br>&gt; <br>&gt; I believe what you want is already possible via the “filter” method.<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/e441b92b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 21, 2015 at 12:00:00pm</p></header><div class="content"><p>I think Jacob said it already: there&#39;s no &quot;x in foo()&quot; construct that you could add a &#39;where&#39; to. There&#39;s just a &#39;for&#39; loop; part of the syntax for &#39;for&#39; loops is the keyword &#39;in&#39; and the keyword &#39;where&#39;.<br></p><p>Now that doesn&#39;t mean we couldn&#39;t add this—it&#39;s basically a limited/small form of list comprehension—but then I personally say -1. &#39;filter&#39; is good enough for me.<br></p><p>Jordan<br></p><p>&gt; On Dec 19, 2015, at 22:10 , Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Jacob,<br>&gt; <br>&gt; I take it that&#39;s a -1 ?<br>&gt; <br>&gt; I don&#39;t quite understand your example, because y in a &quot;for&quot; loop is an Array. So if I modify your example (I&#39;ll rename &quot;y&quot; to &quot;numbers&quot;)...<br>&gt;  <br>&gt;     for x in numbers where x &gt; 2 { }<br>&gt; <br>&gt; ...my intuition immediately barks &quot;it&#39;s a filter!&quot;<br>&gt; <br>&gt;     let valid_numbers = x in numbers where x &gt; 2<br>&gt; <br>&gt; I realize it&#39;s good to have a closure-based solution for map/filter/reduce, so fair enough that we let the filter method exist. Maybe if I understood Swift better (is this related to sequences?) this would all make sense... but with what grasp of Swift I do have, it makes the language feel baroque to have this &quot;where&quot; clause that looks like it ought to instantiate an array, but can&#39;t. <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 9:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; It doesn&#39;t bother me, because I read it as an additional constraint on the `for` loop rather than an operation being done on the enumerated sequence. That is,<br>&gt; <br>&gt;     for x in y where x &gt; 2 { }<br>&gt; <br>&gt; is fairly consistent with <br>&gt; <br>&gt;     if let x = y where x &gt; 2 { }<br>&gt; <br>&gt; And you wouldn&#39;t expect to be able to do &quot;let x = y where x &gt; 2&quot;.<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 8:22 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Thanks Charles ,<br>&gt; <br>&gt; I know it&#39;s possible to do the same thing with filter. The syntax I drew attention to would be an alternate way. <br>&gt; <br>&gt; My only rationale is that, if it works in one place, it ought to work everywhere. The redundancy bothers me too, but since the concept exists, we may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot; loop (maybe performance is better, but that could be optimized?), but also inconsistent because it seems intuitively like it ought to create a subset whereas in reality it is illegal.<br>&gt; <br>&gt; Does it bother anyone else, or am I nitpicking?<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;cocoadev at charlessoft.com &lt;mailto:cocoadev at charlessoft.com&gt;&gt; wrote:<br>&gt;&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I noticed several weeks ago that the following is illegal:<br>&gt;&gt; <br>&gt;&gt;     let new_arr = el in arr where el.is &lt;http://el.is/&gt;_foo // illegal<br>&gt;&gt; <br>&gt;&gt; I assumed it would work because it&#39;s consistent with the filtering that exists in a &quot;for&quot; loop, i.e.:<br>&gt;&gt; <br>&gt;&gt;     for el in arr where el.is &lt;http://el.is/&gt;_foo // legal<br>&gt;&gt; <br>&gt;&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s already on the roadmap, or inherently wrong.<br>&gt; <br>&gt; I believe what you want is already possible via the “filter” method.<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/d5792cff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Using &quot;where&quot; to filter an array</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>December 22, 2015 at 08:00:00am</p></header><div class="content"><p>-1 I prefer &quot;.filter&quot;<br></p><p>Sent from my iPad<br></p><p>&gt; On 22 Dec 2015, at 7:13 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think Jacob said it already: there&#39;s no &quot;x in foo()&quot; construct that you could add a &#39;where&#39; to. There&#39;s just a &#39;for&#39; loop; part of the syntax for &#39;for&#39; loops is the keyword &#39;in&#39; and the keyword &#39;where&#39;.<br>&gt; <br>&gt; Now that doesn&#39;t mean we couldn&#39;t add this—it&#39;s basically a limited/small form of list comprehension—but then I personally say -1. &#39;filter&#39; is good enough for me.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 22:10 , Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Jacob,<br>&gt;&gt; <br>&gt;&gt; I take it that&#39;s a -1 ?<br>&gt;&gt; <br>&gt;&gt; I don&#39;t quite understand your example, because y in a &quot;for&quot; loop is an Array. So if I modify your example (I&#39;ll rename &quot;y&quot; to &quot;numbers&quot;)...<br>&gt;&gt;  <br>&gt;&gt;     for x in numbers where x &gt; 2 { }<br>&gt;&gt; <br>&gt;&gt; ...my intuition immediately barks &quot;it&#39;s a filter!&quot;<br>&gt;&gt; <br>&gt;&gt;     let valid_numbers = x in numbers where x &gt; 2<br>&gt;&gt; <br>&gt;&gt; I realize it&#39;s good to have a closure-based solution for map/filter/reduce, so fair enough that we let the filter method exist. Maybe if I understood Swift better (is this related to sequences?) this would all make sense... but with what grasp of Swift I do have, it makes the language feel baroque to have this &quot;where&quot; clause that looks like it ought to instantiate an array, but can&#39;t. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Sat, Dec 19, 2015 at 9:45 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt; It doesn&#39;t bother me, because I read it as an additional constraint on the `for` loop rather than an operation being done on the enumerated sequence. That is,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     for x in y where x &gt; 2 { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is fairly consistent with <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     if let x = y where x &gt; 2 { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And you wouldn&#39;t expect to be able to do &quot;let x = y where x &gt; 2&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Dec 19, 2015 at 8:22 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Thanks Charles ,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I know it&#39;s possible to do the same thing with filter. The syntax I drew attention to would be an alternate way. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My only rationale is that, if it works in one place, it ought to work everywhere. The redundancy bothers me too, but since the concept exists, we may as well allow it everywhere. Otherwise, it&#39;s still redundant in a &quot;for&quot; loop (maybe performance is better, but that could be optimized?), but also inconsistent because it seems intuitively like it ought to create a subset whereas in reality it is illegal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does it bother anyone else, or am I nitpicking?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Dec 19, 2015 at 7:52 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 19, 2015, at 9:43 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I noticed several weeks ago that the following is illegal:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     let new_arr = el in arr where el.is_foo // illegal<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I assumed it would work because it&#39;s consistent with the filtering that exists in a &quot;for&quot; loop, i.e.:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     for el in arr where el.is_foo // legal<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Is this &quot;new proposal&quot; material? I thought I would check in case it&#39;s already on the roadmap, or inherently wrong.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I believe what you want is already possible via the “filter” method.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Charles<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151222/670ebf1a/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
