<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>need help with GLibc module map problem</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>June  2, 2016 at 05:00:00pm</p></header><div class="content"><p>As part of helping to resolve old libdispatch pull requests, I have run<br>into a problem with the GLibc module map on Linux that I need help<br>understanding and fixing.<br></p><p>The symptom I am trying to resolve is that somewhere between the March 16<br>and March 24 Swift development snapshots, the Dispatch overlay for<br>libdispatch on Linux stopped building.  We&#39;ve been hacking around the<br>problem for 2 months (<br>https://github.com/apple/swift-corelibs-libdispatch/pull/62), but we don&#39;t<br>want to merge that hack back to the master branch of libdispatch.<br></p><p>The issue is that swiftc is convinced that off_t and mode_t should be<br>defined in the stdio module (by including stdio.h).  We don&#39;t want to<br>include stdio.h in dispatch.h;  it is sufficient (and the C compilation of<br>libdispatch succeeds) to only include fcntl.h and unistd.h.  However<br>without including stdio.h in dispatch.h, building the swiftmodule from<br>Dispatch.swift fails, starting with the March 24 driver (and is still<br>broken on master as of this morning).<br></p><p>I can hack around this by (a) including stdio.h in dispatch.h  or (b)<br>editing glibc.modulemap.gyb to put the module statements for fnctl and<br>unistd before the modile statement for stdio.   Neither of these seem like<br>the right fix.<br></p><p>Can anyone point me to a better solution?<br></p><p>I&#39;ve attached the full buildlog.   The actual build errors are excerpted<br>below as well.<br></p><p>thanks,<br></p><p>--dave<br></p><p>(See attached file: buildLog.txt)<br></p><p>make[2]: Entering directory<br>&#39;/home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src&#39;<br>/home/dgrove/swift/build/dpg/swift-linux-x86_64/bin/swiftc -Xcc<br>-fmodule-map-file=/home/dgrove/swift/swift-corelibs-libdispatch/dispatch/module.map<br> -I/home/dgrove/swift/swift-corelibs-libdispatch -parse-as-library -Xcc<br>-fblocks -c<br>-o /home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src/Dispatch.o /home/dgrove/swift/swift-corelibs-libdispatch/src/swift/Dispatch.swift<br>&lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>#include &quot;dispatch.h&quot;<br>         ^<br>/home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:10:<br>note: in file included<br>from /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:<br>#include &lt;dispatch/io.h&gt;<br>         ^<br>/home/dgrove/swift/swift-corelibs-libdispatch/dispatch/io.h:253:31: error:<br>declaration of &#39;mode_t&#39; must be imported from module<br>&#39;SwiftGlibc.POSIX.sys.types&#39; before it is required<br>        const char *path, int oflag, mode_t mode,<br>                                     ^<br>/usr/include/x86_64-linux-gnu/sys/types.h:70:18: note: previous declaration<br>is here<br>typedef __mode_t mode_t;<br>                 ^<br>&lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>#include &quot;dispatch.h&quot;<br>         ^<br>/home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:10:<br>note: in file included<br>from /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:<br>#include &lt;dispatch/io.h&gt;<br>         ^<br>/home/dgrove/swift/swift-corelibs-libdispatch/dispatch/io.h:355:2: error:<br>declaration of &#39;off_t&#39; must be imported from module &#39;SwiftGlibc.C.stdio&#39;<br>before it is required<br>        off_t offset,<br>        ^<br>/usr/include/stdio.h:90:17: note: previous declaration is here<br>typedef __off_t off_t;<br>                ^<br>/home/dgrove/swift/swift-corelibs-libdispatch/src/swift/Dispatch.swift:13:19:<br> error: could not build Objective-C module &#39;Dispatch&#39;<br>@_exported import Dispatch<br>                  ^<br>Makefile:909: recipe for target<br>&#39;/home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src/Dispatch.o&#39;<br>failed<br>make[2]: ***<br>[/home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src/Dispatch.o]<br>Error 1<br>make[2]: Leaving directory<br>&#39;/home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src&#39;<br>Makefile:493: recipe for target &#39;all&#39; failed<br>make[1]: *** [all] Error 2<br>make[1]: Leaving directory<br>&#39;/home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src&#39;<br>Makefile:454: recipe for target &#39;all-recursive&#39; failed<br>make: *** [all-recursive] Error 1<br>./utils/build-script: command terminated with a non-zero exit status 2,<br>aborting<br>./utils/build-script: command terminated with a non-zero exit status 1,<br>aborting<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160602/5457b597/attachment.html&gt;<br>-------------- next part --------------<br>An embedded and charset-unspecified text was scrubbed...<br>Name: buildLog.txt<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160602/5457b597/attachment.txt&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>need help with GLibc module map problem</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June  2, 2016 at 03:00:00pm</p></header><div class="content"><p>On Thu, Jun 2, 2016 at 2:58 PM, David P Grove via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; As part of helping to resolve old libdispatch pull requests, I have run into<br>&gt; a problem with the GLibc module map on Linux that I need help understanding<br>&gt; and fixing.<br>&gt;<br>&gt; The symptom I am trying to resolve is that somewhere between the March 16<br>&gt; and March 24 Swift development snapshots, the Dispatch overlay for<br>&gt; libdispatch on Linux stopped building. We&#39;ve been hacking around the problem<br>&gt; for 2 months (https://github.com/apple/swift-corelibs-libdispatch/pull/62),<br>&gt; but we don&#39;t want to merge that hack back to the master branch of<br>&gt; libdispatch.<br>&gt;<br>&gt; The issue is that swiftc is convinced that off_t and mode_t should be<br>&gt; defined in the stdio module (by including stdio.h). We don&#39;t want to include<br>&gt; stdio.h in dispatch.h; it is sufficient (and the C compilation of<br>&gt; libdispatch succeeds) to only include fcntl.h and unistd.h. However without<br>&gt; including stdio.h in dispatch.h, building the swiftmodule from<br>&gt; Dispatch.swift fails, starting with the March 24 driver (and is still broken<br>&gt; on master as of this morning).<br>&gt;<br>&gt; I can hack around this by (a) including stdio.h in dispatch.h or (b) editing<br>&gt; glibc.modulemap.gyb to put the module statements for fnctl and unistd before<br>&gt; the modile statement for stdio. Neither of these seem like the right fix.<br>&gt;<br>&gt; Can anyone point me to a better solution?<br>&gt;<br>&gt; I&#39;ve attached the full buildlog. The actual build errors are excerpted below<br>&gt; as well.<br>&gt;<br>&gt; thanks,<br>&gt;<br>&gt; --dave<br>&gt;<br>&gt; (See attached file: buildLog.txt)<br>&gt;<br>&gt; make[2]: Entering directory<br>&gt; &#39;/home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src&#39;<br>&gt; /home/dgrove/swift/build/dpg/swift-linux-x86_64/bin/swiftc -Xcc<br>&gt; -fmodule-map-file=/home/dgrove/swift/swift-corelibs-libdispatch/dispatch/module.map<br>&gt; -I/home/dgrove/swift/swift-corelibs-libdispatch -parse-as-library -Xcc<br>&gt; -fblocks -c -o<br>&gt; /home/dgrove/swift/build/dpg/libdispatch-linux-x86_64/src/Dispatch.o<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/src/swift/Dispatch.swift<br>&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt; #include &quot;dispatch.h&quot;<br>&gt; ^<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:10:<br>&gt; note: in file included from<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:<br>&gt; #include &lt;dispatch/io.h&gt;<br>&gt; ^<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/io.h:253:31: error:<br>&gt; declaration of &#39;mode_t&#39; must be imported from module<br>&gt; &#39;SwiftGlibc.POSIX.sys.types&#39; before it is required<br>&gt; const char *path, int oflag, mode_t mode,<br>&gt; ^<br>&gt; /usr/include/x86_64-linux-gnu/sys/types.h:70:18: note: previous declaration<br>&gt; is here<br>&gt; typedef __mode_t mode_t;<br>&gt; ^<br>&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt; #include &quot;dispatch.h&quot;<br>&gt; ^<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:10:<br>&gt; note: in file included from<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/dispatch.h:59:<br>&gt; #include &lt;dispatch/io.h&gt;<br>&gt; ^<br>&gt; /home/dgrove/swift/swift-corelibs-libdispatch/dispatch/io.h:355:2: error:<br>&gt; declaration of &#39;off_t&#39; must be imported from module &#39;SwiftGlibc.C.stdio&#39;<br>&gt; before it is required<br>&gt; off_t offset,<br>&gt; ^<br>&gt; /usr/include/stdio.h:90:17: note: previous declaration is here<br>&gt; typedef __off_t off_t;<br></p><p>Could you check if there are multiple definitions of off_t or mode_t<br>in different headers guarded by macros?  Something like this,<br>duplicated across several headers:<br></p><p>#if !defined(_OFF_T_DEFINED)<br>typedef __off_t off_t;<br>#define _OFF_T_DEFINED<br>#endif<br></p><p>This is a frequent pattern used in C headers, but it is an antipattern<br>for modules.  With modules, all headers that are included into the<br>module get #included into a single translation unit and compiled into<br>a module, so only one of those typedefs will get activated (let&#39;s say<br>in foo.h), and the other one will get hidden because it is seen second<br>in the translation unit (let&#39;s say the one in bar.h gets hidden).  If<br>you then import just the submodule for bar.h, the off_t definition<br>won&#39;t be visible, because it was #ifdef&#39;ed out.<br></p><p>There are fragile solutions to this (like including a header that<br>happens to fix the build this time), but the only real fix is to make<br>sure that there is only one place where a declaration can be located<br>in a module, regardless of the set of headers.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>need help with GLibc module map problem</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>June  3, 2016 at 11:00:00am</p></header><div class="content"><p>Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote on 06/02/2016 06:19:33 PM:<br>&gt;<br>&gt; Could you check if there are multiple definitions of off_t or mode_t<br>&gt; in different headers guarded by macros?  Something like this,<br>&gt; duplicated across several headers:<br>&gt;<br>&gt; #if !defined(_OFF_T_DEFINED)<br>&gt; typedef __off_t off_t;<br>&gt; #define _OFF_T_DEFINED<br>&gt; #endif<br>&gt;<br>&gt; This is a frequent pattern used in C headers, but it is an antipattern<br>&gt; for modules.  With modules, all headers that are included into the<br>&gt; module get #included into a single translation unit and compiled into<br>&gt; a module, so only one of those typedefs will get activated (let&#39;s say<br>&gt; in foo.h), and the other one will get hidden because it is seen second<br>&gt; in the translation unit (let&#39;s say the one in bar.h gets hidden).  If<br>&gt; you then import just the submodule for bar.h, the off_t definition<br>&gt; won&#39;t be visible, because it was #ifdef&#39;ed out.<br>&gt;<br>&gt; There are fragile solutions to this (like including a header that<br>&gt; happens to fix the build this time), but the only real fix is to make<br>&gt; sure that there is only one place where a declaration can be located<br>&gt; in a module, regardless of the set of headers.<br>&gt;<br></p><p>Thanks for the response Dmitri.  Yes this is indeed the case.  On my Ubuntu<br>15.10 system there are conditional typedefs of this flavor in<br>5 /usr/include/* header files for mode_t and in 6 header files for off_t.<br></p><p>What do you recommend I should try to work around the messy state of the<br>system headers?<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160603/c8f24ee0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
