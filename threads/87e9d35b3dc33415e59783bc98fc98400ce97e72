<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 02:00:00pm</p></header><div class="content"><p>on Wed Mar 23 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; So, in other words, you&#39;d be satisfied with the following addition to<br>&gt; the standard library?<br>&gt;<br>&gt; ```<br>&gt; extension Range where Element: Strideable {<br>&gt;     func by(step: Element.Stride) -&gt; StrideTo&lt;Element&gt; {<br>&gt;         return startIndex.stride(to: endIndex, by: step)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; /*<br>&gt; example of usage:<br>&gt;<br>&gt; for i in (1..&lt;10).by(2) {<br>&gt;     print(i)<br>&gt; }<br>&gt; */<br>&gt; ```<br></p><p><br>My current thinking is that:<br></p><p>* `for x in 0.0..&lt;3.0 {}` should probably be an error, because 1.0 is<br>  not the obviously-right stride to use for non-integral numbers.  That<br>  would imply that floating types should not conform to Strideable,<br>  which raises the question of whether Strideable should be folded into<br>  the Integer protocol.<br>  <br>* `for x in (0.0..&lt;20.0).striding(by: 1.3) {}` should work without<br>  accumulating error<br></p><p>* `for x in 0..&lt;3 {}` should work (obviously; that&#39;s the status quo)<br></p><p>* `for x in (0..&lt;20).striding(by: 2)` should work<br></p><p>I think this might also handle the concerns that<br>https://github.com/apple/swift-evolution/blob/master/proposals/0051-stride-semantics.md<br>was trying to address.<br></p><p>If I thought extreme concision was important for this application, I&#39;d be<br>proposing something like <br></p><p>  for x in 0.0..&lt;20.0//1.3 {}<br></p><p>but personally, I don&#39;t, which is why I propose `.striding(by: x)`<br>rather than simply `.by(x)`, the latter being more open to<br>misinterpretation.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 24, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; That<br>&gt;  would imply that floating types should not conform to Strideable,<br>&gt;  which raises the question of whether Strideable should be folded into<br>&gt;  the Integer protocol.<br></p><p>Personally, I get a lot of mileage out of conforming NSDate to Strideable. (Although obviously it ought to be using a float-friendly Strideable.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>March 24, 2016 at 11:00:00pm</p></header><div class="content"><p>On Thu, Mar 24, 2016 at 4:18 PM, Dave Abrahams via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; on Wed Mar 23 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; So, in other words, you&#39;d be satisfied with the following addition to<br>&gt;&gt; the standard library?<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; extension Range where Element: Strideable {<br>&gt;&gt;     func by(step: Element.Stride) -&gt; StrideTo&lt;Element&gt; {<br>&gt;&gt;         return startIndex.stride(to: endIndex, by: step)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; /*<br>&gt;&gt; example of usage:<br>&gt;&gt;<br>&gt;&gt; for i in (1..&lt;10).by(2) {<br>&gt;&gt;     print(i)<br>&gt;&gt; }<br>&gt;&gt; */<br>&gt;&gt; ```<br>&gt;<br>&gt;<br>&gt; My current thinking is that:<br>&gt;<br>&gt; * `for x in 0.0..&lt;3.0 {}` should probably be an error, because 1.0 is<br>&gt;   not the obviously-right stride to use for non-integral numbers.  That<br>&gt;   would imply that floating types should not conform to Strideable,<br>&gt;   which raises the question of whether Strideable should be folded into<br>&gt;   the Integer protocol.<br></p><p>Well, maybe I&#39;m missing something, but `for x in 0.0..&lt;3.0 { }`<br>doesn&#39;t work as it is, and it doesn&#39;t seem to have anything to do with<br>Strideable. Rather, HalfOpenInterval&lt;Double&gt; doesn&#39;t conform to<br>SequenceType. I agree that `for x in 0.0..&lt;3.0 { }` should continue<br>not working, but maybe let&#39;s keep floating point types conforming to<br>Strideable :)<br></p><p>&gt;<br>&gt; * `for x in (0.0..&lt;20.0).striding(by: 1.3) {}` should work without<br>&gt;   accumulating error<br>&gt;<br></p><p>+1.<br></p><p>&gt; * `for x in 0..&lt;3 {}` should work (obviously; that&#39;s the status quo)<br>&gt;<br>&gt; * `for x in (0..&lt;20).striding(by: 2)` should work<br>&gt;<br>&gt; I think this might also handle the concerns that<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0051-stride-semantics.md<br>&gt; was trying to address.<br>&gt;<br>&gt; If I thought extreme concision was important for this application, I&#39;d be<br>&gt; proposing something like<br>&gt;<br>&gt;   for x in 0.0..&lt;20.0//1.3 {}<br>&gt;<br>&gt; but personally, I don&#39;t, which is why I propose `.striding(by: x)`<br>&gt; rather than simply `.by(x)`, the latter being more open to<br>&gt; misinterpretation.<br></p><p>Yeah, `.striding(by: x)` is pretty good.<br></p><p>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
