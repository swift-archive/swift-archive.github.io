<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/534f2ca00209abdb83a56b22ecca1781?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Tanner Nelson</string> &lt;tannernelson at gmail.com&gt;<p>March  9, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello Swift Evolution members,<br></p><p>I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br></p><p>Currently, to pass a Type to a function or method, it is sometimes required to add `.self` after the Type. This behavior is inconsistent as it is only required if the signature has more than one parameter. <br></p><p>Here is a demonstration of the current inconsistency. <br></p><p>```swift<br>func test&lt;T: Any&gt;(type: T.Type, two: String) {<br>    print(type)<br>}<br></p><p>func test&lt;T: Any&gt;(type: T.Type) {<br>    print(type)<br>}<br></p><p>test(Int.self)<br>test(Int)<br></p><p>test(Int.self, two: &quot;&quot;)<br>test(Int, two: &quot;&quot;) //Expected member name or constructor call after type name<br>      ^~~<br>``` <br></p><p>This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br></p><p>After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br></p><p>I propose to allow Types to be used in expressions without needing to explicitly reference `.self`. The motivation for this is as follows:<br></p><p>- Cleaner API<br>- Consistent requirement is less confusing to developers<br>- Disambiguation challenges should not result in more verbose code unless absolutely necessary<br></p><p>Here are some preliminary ideas for how this could be implemented:<br></p><p>- Require spaces around less than expressions and no spaces around generics<br>- Require spaces around infix operators and no spaces around generics<br>- Remove less than overload for comparing a type<br>- (Your idea here)<br></p><p>A draft of an evolution document that provides more background can be viewed here &lt;https://github.com/apple/swift-evolution/pull/197&gt;. It has been preempted by a need for discussion in this mailing list. <br></p><p>I am looking forward to hearing your feedback on this proposal.<br></p><p>Thank you,<br>Tanner Nelson<br>http://github.com/tannernelson<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  9, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br></p><p>&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br>&gt; <br>&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br></p><p>My understanding from previous Twitter discussions is that the primary reason for this feature is to keep you from writing `Foo` where you meant `Foo()`. That is, it&#39;s a deliberate design, meant to keep you from making mistakes. I suspect that you will have to overcome *that* impulse, not just any narrow parsing issue.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/534f2ca00209abdb83a56b22ecca1781?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Tanner Nelson</string> &lt;tannernelson at gmail.com&gt;<p>March  9, 2016 at 04:00:00pm</p></header><div class="content"><p>That makes sense in the context of saying something like <br></p><p>	let foo = Foo.self<br></p><p>But I don&#39;t see any utility for method arguments since those will almost always be typed.<br></p><p>	func needsAnObject(object: Foo) {}<br></p><p>	needsAnObject(Foo)<br>                                  ^~~ cannot convert Foo.Type to Foo<br></p><p><br>&gt; On Mar 9, 2016, at 4:14 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br>&gt; <br>&gt;&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br>&gt;&gt; <br>&gt;&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br>&gt; <br>&gt; My understanding from previous Twitter discussions is that the primary reason for this feature is to keep you from writing `Foo` where you meant `Foo()`. That is, it&#39;s a deliberate design, meant to keep you from making mistakes. I suspect that you will have to overcome *that* impulse, not just any narrow parsing issue.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 10, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 9 Mar 2016, at 19:23, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; - Require spaces around infix operators and no spaces around generics<br></p><p>While I know some people’s preference is for spacing to be left to linters and other tools, I do think that requiring space around operators is a good requirement to make; it should make it easier for the compiler, and easier for readability, plus it actually fits with Swift’s goal of avoiding mistakes by making it harder to mistakenly use negation vs subtract and other weird cases (like this particular one).<br></p><p>I’d say that all operators taking two arguments should have whitespace on either side, while prefix and postfix operators shouldn’t be allowed to have trailing and leading space respectively (the latter may already be the case, I can’t check just now).<br></p><p>That said, I’d say that removing comparison operators from types make sense too, as I can’t imagine when you’d need to do this?<br></p><p>So put in the “little bit of everything” camp ;)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 10, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Mar 10, 2016, at 3:00 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Mar 2016, at 19:23, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt; <br>&gt; While I know some people’s preference is for spacing to be left to linters and other tools, I do think that requiring space around operators is a good requirement to make; it should make it easier for the compiler, and easier for readability, plus it actually fits with Swift’s goal of avoiding mistakes by making it harder to mistakenly use negation vs subtract and other weird cases (like this particular one).<br>&gt; <br>&gt; I’d say that all operators taking two arguments should have whitespace on either side, while prefix and postfix operators shouldn’t be allowed to have trailing and leading space respectively (the latter may already be the case, I can’t check just now).<br>&gt; <br>&gt; That said, I’d say that removing comparison operators from types make sense too, as I can’t imagine when you’d need to do this?<br></p><p>We really want this to be a parse-time disambiguation so that the grammar isn&#39;t dependent on name lookup like C is. Banning the &#39;&lt;&#39; operator on types doesn&#39;t help because at parse time we don&#39;t even know whether we have a type reference or not.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/534f2ca00209abdb83a56b22ecca1781?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Tanner Nelson</string> &lt;tannernelson at gmail.com&gt;<p>March 10, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;m wondering if this mailing list is the best place to discuss the implementation details. The proposal PR was closed because the motivation was not clear. But it seems like we have sufficient motivation from the responses to this thread so far. <br></p><p>I would much rather be pasting code snippets in GitHub comments with the nice syntax formatting.<br></p><p>&gt; On Mar 10, 2016, at 11:14 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 10, 2016, at 3:00 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 9 Mar 2016, at 19:23, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt;&gt; <br>&gt;&gt; While I know some people’s preference is for spacing to be left to linters and other tools, I do think that requiring space around operators is a good requirement to make; it should make it easier for the compiler, and easier for readability, plus it actually fits with Swift’s goal of avoiding mistakes by making it harder to mistakenly use negation vs subtract and other weird cases (like this particular one).<br>&gt;&gt; <br>&gt;&gt; I’d say that all operators taking two arguments should have whitespace on either side, while prefix and postfix operators shouldn’t be allowed to have trailing and leading space respectively (the latter may already be the case, I can’t check just now).<br>&gt;&gt; <br>&gt;&gt; That said, I’d say that removing comparison operators from types make sense too, as I can’t imagine when you’d need to do this?<br>&gt; <br>&gt; We really want this to be a parse-time disambiguation so that the grammar isn&#39;t dependent on name lookup like C is. Banning the &#39;&lt;&#39; operator on types doesn&#39;t help because at parse time we don&#39;t even know whether we have a type reference or not.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/5c82a05e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 10, 2016, at 9:15 AM, Tanner Nelson &lt;tannernelson at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m wondering if this mailing list is the best place to discuss the implementation details. The proposal PR was closed because the motivation was not clear. But it seems like we have sufficient motivation from the responses to this thread so far. <br>&gt; <br>&gt; I would much rather be pasting code snippets in GitHub comments with the nice syntax formatting.<br></p><p>If you want to discuss Swift language design, this is the place.<br></p><p>-Joe<br></p><p>&gt;&gt; On Mar 10, 2016, at 11:14 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mar 10, 2016, at 3:00 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 9 Mar 2016, at 19:23, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I know some people’s preference is for spacing to be left to linters and other tools, I do think that requiring space around operators is a good requirement to make; it should make it easier for the compiler, and easier for readability, plus it actually fits with Swift’s goal of avoiding mistakes by making it harder to mistakenly use negation vs subtract and other weird cases (like this particular one).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d say that all operators taking two arguments should have whitespace on either side, while prefix and postfix operators shouldn’t be allowed to have trailing and leading space respectively (the latter may already be the case, I can’t check just now).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That said, I’d say that removing comparison operators from types make sense too, as I can’t imagine when you’d need to do this?<br>&gt;&gt; <br>&gt;&gt; We really want this to be a parse-time disambiguation so that the grammar isn&#39;t dependent on name lookup like C is. Banning the &#39;&lt;&#39; operator on types doesn&#39;t help because at parse time we don&#39;t even know whether we have a type reference or not.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/3d7e30ee/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 10, 2016 at 04:00:00pm</p></header><div class="content"><p>+1<br>&gt; On Mar 10, 2016, at 5:00 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Mar 2016, at 19:23, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt; <br>&gt; While I know some people’s preference is for spacing to be left to linters and other tools, I do think that requiring space around operators is a good requirement to make; it should make it easier for the compiler, and easier for readability, plus it actually fits with Swift’s goal of avoiding mistakes by making it harder to mistakenly use negation vs subtract and other weird cases (like this particular one).<br>&gt; <br>&gt; I’d say that all operators taking two arguments should have whitespace on either side, while prefix and postfix operators shouldn’t be allowed to have trailing and leading space respectively (the latter may already be the case, I can’t check just now).<br>&gt; <br></p><p>-1, for the reason Joe Groff gave, plus I don’t like the idea of these kinds of special cases (or special cases in general, come to think of it).<br>&gt; That said, I’d say that removing comparison operators from types make sense too, as I can’t imagine when you’d need to do this?<br>&gt; <br>- Dave Sweeris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>March 14, 2016 at 09:00:00pm</p></header><div class="content"><p>Bumping this - did anything ever become of this? It seemed like there was general agreement to do something about the “.self” requirement when referencing types. I would personally like to see it go away.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Mar 9, 2016, at 1:23 PM, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift Evolution members,<br>&gt; <br>&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br>&gt; <br>&gt; Currently, to pass a Type to a function or method, it is sometimes required to add `.self` after the Type. This behavior is inconsistent as it is only required if the signature has more than one parameter. <br>&gt; <br>&gt; Here is a demonstration of the current inconsistency. <br>&gt; <br>&gt; ```swift<br>&gt; func test&lt;T: Any&gt;(type: T.Type, two: String) {<br>&gt;    print(type)<br>&gt; }<br>&gt; <br>&gt; func test&lt;T: Any&gt;(type: T.Type) {<br>&gt;    print(type)<br>&gt; }<br>&gt; <br>&gt; test(Int.self)<br>&gt; test(Int)<br>&gt; <br>&gt; test(Int.self, two: &quot;&quot;)<br>&gt; test(Int, two: &quot;&quot;) //Expected member name or constructor call after type name<br>&gt;      ^~~<br>&gt; ``` <br>&gt; <br>&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br>&gt; <br>&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br>&gt; <br>&gt; I propose to allow Types to be used in expressions without needing to explicitly reference `.self`. The motivation for this is as follows:<br>&gt; <br>&gt; - Cleaner API<br>&gt; - Consistent requirement is less confusing to developers<br>&gt; - Disambiguation challenges should not result in more verbose code unless absolutely necessary<br>&gt; <br>&gt; Here are some preliminary ideas for how this could be implemented:<br>&gt; <br>&gt; - Require spaces around less than expressions and no spaces around generics<br>&gt; - Require spaces around infix operators and no spaces around generics<br>&gt; - Remove less than overload for comparing a type<br>&gt; - (Your idea here)<br>&gt; <br>&gt; A draft of an evolution document that provides more background can be viewed here &lt;https://github.com/apple/swift-evolution/pull/197&gt;. It has been preempted by a need for discussion in this mailing list. <br>&gt; <br>&gt; I am looking forward to hearing your feedback on this proposal.<br>&gt; <br>&gt; Thank you,<br>&gt; Tanner Nelson<br>&gt; http://github.com/tannernelson<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  5, 2016 at 09:00:00pm</p></header><div class="content"><p>To keep progress going on this, I collected my thoughts from March&#39;s discussion into a draft proposal:<br></p><p>https://github.com/apple/swift-evolution/pull/299<br></p><p>-Joe<br></p><p>&gt; On Mar 9, 2016, at 11:23 AM, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift Evolution members,<br>&gt; <br>&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br>&gt; <br>&gt; Currently, to pass a Type to a function or method, it is sometimes required to add `.self` after the Type. This behavior is inconsistent as it is only required if the signature has more than one parameter. <br>&gt; <br>&gt; Here is a demonstration of the current inconsistency. <br>&gt; <br>&gt; ```swift<br>&gt; func test&lt;T: Any&gt;(type: T.Type, two: String) {<br>&gt;    print(type)<br>&gt; }<br>&gt; <br>&gt; func test&lt;T: Any&gt;(type: T.Type) {<br>&gt;    print(type)<br>&gt; }<br>&gt; <br>&gt; test(Int.self)<br>&gt; test(Int)<br>&gt; <br>&gt; test(Int.self, two: &quot;&quot;)<br>&gt; test(Int, two: &quot;&quot;) //Expected member name or constructor call after type name<br>&gt;      ^~~<br>&gt; ``` <br>&gt; <br>&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br>&gt; <br>&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br>&gt; <br>&gt; I propose to allow Types to be used in expressions without needing to explicitly reference `.self`. The motivation for this is as follows:<br>&gt; <br>&gt; - Cleaner API<br>&gt; - Consistent requirement is less confusing to developers<br>&gt; - Disambiguation challenges should not result in more verbose code unless absolutely necessary<br>&gt; <br>&gt; Here are some preliminary ideas for how this could be implemented:<br>&gt; <br>&gt; - Require spaces around less than expressions and no spaces around generics<br>&gt; - Require spaces around infix operators and no spaces around generics<br>&gt; - Remove less than overload for comparing a type<br>&gt; - (Your idea here)<br>&gt; <br>&gt; A draft of an evolution document that provides more background can be viewed here &lt;https://github.com/apple/swift-evolution/pull/197&gt;. It has been preempted by a need for discussion in this mailing list. <br>&gt; <br>&gt; I am looking forward to hearing your feedback on this proposal.<br>&gt; <br>&gt; Thank you,<br>&gt; Tanner Nelson<br>&gt; http://github.com/tannernelson<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  6, 2016 at 09:00:00am</p></header><div class="content"><p>I understand why the alternative of changing the generic type parameter list symbols was rejected, to be consistent with other C based languages, but I don&#39;t understand why the following was rejected:<br></p><p>making the UppercaseTypes, lowercaseValues convention a syntactic requirement, as is done in ML and Haskell.<br>I see that as a good viable alternative.<br></p><p>&gt; On 06 May 2016, at 06:34, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; To keep progress going on this, I collected my thoughts from March&#39;s discussion into a draft proposal:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/pull/299<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 11:23 AM, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift Evolution members,<br>&gt;&gt; <br>&gt;&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br>&gt;&gt; <br>&gt;&gt; Currently, to pass a Type to a function or method, it is sometimes required to add `.self` after the Type. This behavior is inconsistent as it is only required if the signature has more than one parameter. <br>&gt;&gt; <br>&gt;&gt; Here is a demonstration of the current inconsistency. <br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; func test&lt;T: Any&gt;(type: T.Type, two: String) {<br>&gt;&gt;   print(type)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func test&lt;T: Any&gt;(type: T.Type) {<br>&gt;&gt;   print(type)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; test(Int.self)<br>&gt;&gt; test(Int)<br>&gt;&gt; <br>&gt;&gt; test(Int.self, two: &quot;&quot;)<br>&gt;&gt; test(Int, two: &quot;&quot;) //Expected member name or constructor call after type name<br>&gt;&gt;     ^~~<br>&gt;&gt; ``` <br>&gt;&gt; <br>&gt;&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br>&gt;&gt; <br>&gt;&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br>&gt;&gt; <br>&gt;&gt; I propose to allow Types to be used in expressions without needing to explicitly reference `.self`. The motivation for this is as follows:<br>&gt;&gt; <br>&gt;&gt; - Cleaner API<br>&gt;&gt; - Consistent requirement is less confusing to developers<br>&gt;&gt; - Disambiguation challenges should not result in more verbose code unless absolutely necessary<br>&gt;&gt; <br>&gt;&gt; Here are some preliminary ideas for how this could be implemented:<br>&gt;&gt; <br>&gt;&gt; - Require spaces around less than expressions and no spaces around generics<br>&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt;&gt; - Remove less than overload for comparing a type<br>&gt;&gt; - (Your idea here)<br>&gt;&gt; <br>&gt;&gt; A draft of an evolution document that provides more background can be viewed here &lt;https://github.com/apple/swift-evolution/pull/197&gt;. It has been preempted by a need for discussion in this mailing list. <br>&gt;&gt; <br>&gt;&gt; I am looking forward to hearing your feedback on this proposal.<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; Tanner Nelson<br>&gt;&gt; http://github.com/tannernelson<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/bb0e68e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May  6, 2016 at 12:00:00am</p></header><div class="content"><p>+1 to David&#39;s point. Given that Swift&#39;s naming conventions already diverge from C&#39;s (and we have things like &#39;Self&#39; vs &#39;self&#39;), it seems like enforcing this relatively uncontroversial best practice would be an overall win.<br></p><p>Austin<br></p><p>&gt; On May 6, 2016, at 12:04 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I understand why the alternative of changing the generic type parameter list symbols was rejected, to be consistent with other C based languages, but I don&#39;t understand why the following was rejected:<br>&gt; <br>&gt; making the UppercaseTypes, lowercaseValues convention a syntactic requirement, as is done in ML and Haskell.<br>&gt; I see that as a good viable alternative.<br>&gt; <br>&gt; On 06 May 2016, at 06:34, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; To keep progress going on this, I collected my thoughts from March&#39;s discussion into a draft proposal:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/pull/299 &lt;https://github.com/apple/swift-evolution/pull/299&gt;<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 9, 2016, at 11:23 AM, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift Evolution members,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently, to pass a Type to a function or method, it is sometimes required to add `.self` after the Type. This behavior is inconsistent as it is only required if the signature has more than one parameter. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here is a demonstration of the current inconsistency. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; func test&lt;T: Any&gt;(type: T.Type, two: String) {<br>&gt;&gt;&gt;   print(type)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func test&lt;T: Any&gt;(type: T.Type) {<br>&gt;&gt;&gt;   print(type)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; test(Int.self)<br>&gt;&gt;&gt; test(Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; test(Int.self, two: &quot;&quot;)<br>&gt;&gt;&gt; test(Int, two: &quot;&quot;) //Expected member name or constructor call after type name<br>&gt;&gt;&gt;     ^~~<br>&gt;&gt;&gt; ``` <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899 &lt;https://bugs.swift.org/browse/SR-899&gt;&gt;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481 &lt;https://twitter.com/jckarter/status/707287663586324481&gt;) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose to allow Types to be used in expressions without needing to explicitly reference `.self`. The motivation for this is as follows:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Cleaner API<br>&gt;&gt;&gt; - Consistent requirement is less confusing to developers<br>&gt;&gt;&gt; - Disambiguation challenges should not result in more verbose code unless absolutely necessary<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are some preliminary ideas for how this could be implemented:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Require spaces around less than expressions and no spaces around generics<br>&gt;&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt;&gt;&gt; - Remove less than overload for comparing a type<br>&gt;&gt;&gt; - (Your idea here)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A draft of an evolution document that provides more background can be viewed here &lt;https://github.com/apple/swift-evolution/pull/197 &lt;https://github.com/apple/swift-evolution/pull/197&gt;&gt;. It has been preempted by a need for discussion in this mailing list. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am looking forward to hearing your feedback on this proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; Tanner Nelson<br>&gt;&gt;&gt; http://github.com/tannernelson &lt;http://github.com/tannernelson&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/6ca8baf6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>May  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; I understand why the alternative of changing the generic type parameter list symbols was rejected, to be consistent with other C based languages, but I don&#39;t understand why the following was rejected:<br>&gt; <br>&gt; making the UppercaseTypes, lowercaseValues convention a syntactic requirement, as is done in ML and Haskell.<br>&gt; I see that as a good viable alternative.<br></p><p>+1, enforcing the initial character case of type and value identifiers would clear up the language IMO.<br></p><p>It would also mean we&#39;d need to bridge all C APIs in correct case.<br></p><p>Also, in general +1 to getting rid of `.self`.<br></p><p>— Pyry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/ada3e80b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May  6, 2016 at 09:00:00am</p></header><div class="content"><p>Wouldn’t this enforce enum cases and some static struct variables to be lowercase?<br></p><p>public enum UINavigationControllerOperation: Int {<br>    <br>    case None<br>    case Push<br>    case Pop<br>}<br></p><p>public struct NSLayoutFormatOptions: OptionSetType {<br>    public init(rawValue: UInt)<br>    <br>    public static var AlignAllLeft: NSLayoutFormatOptions { get }<br>    public static var AlignAllRight: NSLayoutFormatOptions { get }<br>    // etc.<br>}<br></p><p>Is this really a welcome change? I mean I’d love to see the drop of `.self` magic from types, but not sure about the UppercaseTypes, lowercaseValue convention here.<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 6. Mai 2016 bei 09:08:57, Pyry Jahkola via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>I understand why the alternative of changing the generic type parameter list symbols was rejected, to be consistent with other C based languages, but I don&#39;t understand why the following was rejected:<br></p><p>making the UppercaseTypes, lowercaseValues convention a syntactic requirement, as is done in ML and Haskell.<br>I see that as a good viable alternative.<br></p><p>+1, enforcing the initial character case of type and value identifiers would clear up the language IMO.<br></p><p>It would also mean we&#39;d need to bridge all C APIs in correct case.<br></p><p>Also, in general +1 to getting rid of `.self`.<br></p><p>— Pyry<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/3b11bba5/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>May  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 06 May 2016, at 10:19, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Wouldn’t this enforce enum cases and some static struct variables to be lowercase?<br>&gt; <br>&gt; Is this really a welcome change? I mean I’d love to see the drop of `.self` magic from types, but not sure about the UppercaseTypes, lowercaseValue convention here.<br></p><p>Lowercase enum cases and static struct variables is already the case in Swift 3. Look up “Lowercase enum cases and static properties” in the accepted SE-0006 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&gt; proposal.<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/5c1a47a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Great I missed that change. Im fine with that change. :) I&#39;d be happy to see `.self` being removed as well.<br></p><p>--  <br>Adrian Zubarev  <br></p><p>Am 6. Mai 2016 um 09:25:01, Pyry Jahkola (pyry.jahkola at iki.fi(mailto:pyry.jahkola at iki.fi)) schrieb:<br></p><p>&gt;  <br>&gt;  <br>&gt; &gt; On 06 May 2016, at 10:19, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt; wrote:  <br>&gt; &gt; Wouldn’t this enforce enum cases and some static struct variables to be lowercase?  <br>&gt; &gt;  <br>&gt; &gt; Is this really a welcome change? I mean I’d love to see the drop of `.self` magic from types, but not sure about the UppercaseTypes, lowercaseValue convention here.  <br>&gt; Lowercase enum cases and static struct variables is already the case in Swift 3. Look up “Lowercase enum cases and static properties” in the accepted SE-0006(https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md) proposal.  <br>&gt;  <br>&gt; — Pyry  <br>&gt;  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/503a1a08/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  6, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On May 6, 2016, at 12:04 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I understand why the alternative of changing the generic type parameter list symbols was rejected, to be consistent with other C based languages, but I don&#39;t understand why the following was rejected:<br>&gt; <br>&gt; 	• making the UppercaseTypes, lowercaseValues convention a syntactic requirement, as is done in ML and Haskell.<br>&gt; I see that as a good viable alternative.<br></p><p>The challenges with making that work include:<br></p><p>- Deciding what to do with imported C APIs. Core Foundation uses CFUppercaseEverything, and POSIX prefers snake_case_t and snake_case_functions. In the early days, we were shy about transforming imported APIs at all, but we&#39;ve obviously gotten more comfortable with it as Swift&#39;s established itself and its own conventions have emerged.<br>- Providing an alternative for non-Latin scripts that don&#39;t differentiate case, such as Arabic and Chinese (and, somewhat related, deciding whether non-letter identifier characters like emoji are &quot;value&quot; or &quot;type&quot; characters).<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Making `.self` After `Type` Optional</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  6, 2016 at 08:00:00am</p></header><div class="content"><p>Definitely +1 to removing the .self requirement.<br></p><p>Sent from my iPad<br></p><p>&gt; On May 5, 2016, at 11:34 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; To keep progress going on this, I collected my thoughts from March&#39;s discussion into a draft proposal:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/pull/299<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 11:23 AM, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift Evolution members,<br>&gt;&gt; <br>&gt;&gt; I would like to propose making `.self` After a Type optional when referencing Types in expressions.<br>&gt;&gt; <br>&gt;&gt; Currently, to pass a Type to a function or method, it is sometimes required to add `.self` after the Type. This behavior is inconsistent as it is only required if the signature has more than one parameter. <br>&gt;&gt; <br>&gt;&gt; Here is a demonstration of the current inconsistency. <br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; func test&lt;T: Any&gt;(type: T.Type, two: String) {<br>&gt;&gt;   print(type)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func test&lt;T: Any&gt;(type: T.Type) {<br>&gt;&gt;   print(type)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; test(Int.self)<br>&gt;&gt; test(Int)<br>&gt;&gt; <br>&gt;&gt; test(Int.self, two: &quot;&quot;)<br>&gt;&gt; test(Int, two: &quot;&quot;) //Expected member name or constructor call after type name<br>&gt;&gt;     ^~~<br>&gt;&gt; ``` <br>&gt;&gt; <br>&gt;&gt; This has been confirmed as a bug, and the report can be seen here &lt;https://bugs.swift.org/browse/SR-899&gt;.<br>&gt;&gt; <br>&gt;&gt; After a Twitter conversation with Joe Groff on the Swift team (https://twitter.com/jckarter/status/707287663586324481) it is determined that this requirement is due to difficulty disambiguating generics `Foo&lt;T&gt;` vs infix less-than operations `Foo &lt; T`.<br>&gt;&gt; <br>&gt;&gt; I propose to allow Types to be used in expressions without needing to explicitly reference `.self`. The motivation for this is as follows:<br>&gt;&gt; <br>&gt;&gt; - Cleaner API<br>&gt;&gt; - Consistent requirement is less confusing to developers<br>&gt;&gt; - Disambiguation challenges should not result in more verbose code unless absolutely necessary<br>&gt;&gt; <br>&gt;&gt; Here are some preliminary ideas for how this could be implemented:<br>&gt;&gt; <br>&gt;&gt; - Require spaces around less than expressions and no spaces around generics<br>&gt;&gt; - Require spaces around infix operators and no spaces around generics<br>&gt;&gt; - Remove less than overload for comparing a type<br>&gt;&gt; - (Your idea here)<br>&gt;&gt; <br>&gt;&gt; A draft of an evolution document that provides more background can be viewed here &lt;https://github.com/apple/swift-evolution/pull/197&gt;. It has been preempted by a need for discussion in this mailing list. <br>&gt;&gt; <br>&gt;&gt; I am looking forward to hearing your feedback on this proposal.<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; Tanner Nelson<br>&gt;&gt; http://github.com/tannernelson<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
