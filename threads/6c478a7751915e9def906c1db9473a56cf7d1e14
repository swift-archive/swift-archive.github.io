<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 11, 2016 at 11:00:00pm</p></header><div class="content"><p>on Tue Oct 11 2016, Károly Lőrentey &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; ManagedBuffer has been really useful a couple of times, but I never<br>&gt; found a use for ManagedBufferPointer. I can’t even say I’m entirely<br>&gt; sure what need it was originally designed to fulfill.<br></p><p>The real need is/was to be able to do the same kind of storage<br>management in classes not derived from ManagedBuffer.  This can be<br>important for bridging, where the buffers of various native swift<br>containers need to be derived from, e.g., NSString or NSArray.  That is,<br>however, an extremely stdlib-specifc need.<br></p><p><br>&gt;&gt; On 2016-10-11, at 00:12, Erik Eckstein via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able<br>&gt; to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt;&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now<br>&gt; it’s not used anymore in the standard library.<br>&gt;&gt; <br>&gt;&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt;&gt; <br>&gt;&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;&gt;   deinit {<br>&gt;&gt;     // do whatever needs to be done<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // creating MyBuffer:<br>&gt;&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt;&gt; <br>&gt;&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom<br>&gt; bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL<br>&gt; tail-allocated arrays internally. Although this is not something visible to the programmer, it makes<br>&gt; life easier for the compiler.<br>&gt;&gt; <br>&gt;&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt;&gt; <br>&gt;&gt; Erik<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>October 13, 2016 at 12:00:00pm</p></header><div class="content"><p>I created a proposal: https://github.com/apple/swift-evolution/pull/545 &lt;https://github.com/apple/swift-evolution/pull/545&gt;<br></p><p>&gt; On Oct 11, 2016, at 11:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Oct 11 2016, Károly Lőrentey &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; ManagedBuffer has been really useful a couple of times, but I never<br>&gt;&gt; found a use for ManagedBufferPointer. I can’t even say I’m entirely<br>&gt;&gt; sure what need it was originally designed to fulfill.<br>&gt; <br>&gt; The real need is/was to be able to do the same kind of storage<br>&gt; management in classes not derived from ManagedBuffer.  This can be<br>&gt; important for bridging, where the buffers of various native swift<br>&gt; containers need to be derived from, e.g., NSString or NSArray.  That is,<br>&gt; however, an extremely stdlib-specifc need.<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On 2016-10-11, at 00:12, Erik Eckstein via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able<br>&gt;&gt; to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt;&gt;&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now<br>&gt;&gt; it’s not used anymore in the standard library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;&gt;&gt;  deinit {<br>&gt;&gt;&gt;    // do whatever needs to be done<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // creating MyBuffer:<br>&gt;&gt;&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom<br>&gt;&gt; bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL<br>&gt;&gt; tail-allocated arrays internally. Although this is not something visible to the programmer, it makes<br>&gt;&gt; life easier for the compiler.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Erik<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/e12bf896/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b81089e81d6bb1e14b5adb746725de1?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Alexis</string> &lt;abeingessner at apple.com&gt;<p>October 19, 2016 at 06:00:00pm</p></header><div class="content"><p>A bit late to this game, because I didn’t fully understand the “point” of ManagedBuffer(Pointer). After a good week of messing around with these in Dictionary/Array/String, I now have Opinions.<br></p><p>I agree ManagedBufferPointer is largely unnecessary. However it’s seeming a lot like ManagedBuffer (and its equivalents) are suboptimal for the standard library’s purposes too!<br></p><p>In particular, pretty much every one of these buffers that I see wants to be a subclass of some NS* collection so that it can be toll-free bridged into objective C. This means that all those types are forced to directly drop down to allocWithTailElems, rather than using a nice abstraction that does it for them. Array does this right now, and I’ve got a PR up for review that’s doing the same thing to the HashedCollections. It’s an outstanding bug that String isn’t doing this (forcing its buffer to be wrapped in another class to be bridged).<br></p><p>I don’t really feel any pain from directly using allocWithTailElems, it’s a great API. It just leaves me at a loss for when I’d reach for ManagedBuffer at all, as it’s very limited.<br></p><p><br>&gt; On Oct 13, 2016, at 3:11 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I created a proposal: https://github.com/apple/swift-evolution/pull/545 &lt;https://github.com/apple/swift-evolution/pull/545&gt;<br>&gt; <br>&gt;&gt; On Oct 11, 2016, at 11:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Oct 11 2016, Károly Lőrentey &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; +1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ManagedBuffer has been really useful a couple of times, but I never<br>&gt;&gt;&gt; found a use for ManagedBufferPointer. I can’t even say I’m entirely<br>&gt;&gt;&gt; sure what need it was originally designed to fulfill.<br>&gt;&gt; <br>&gt;&gt; The real need is/was to be able to do the same kind of storage<br>&gt;&gt; management in classes not derived from ManagedBuffer.  This can be<br>&gt;&gt; important for bridging, where the buffers of various native swift<br>&gt;&gt; containers need to be derived from, e.g., NSString or NSArray.  That is,<br>&gt;&gt; however, an extremely stdlib-specifc need.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On 2016-10-11, at 00:12, Erik Eckstein via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able<br>&gt;&gt;&gt; to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt;&gt;&gt;&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now<br>&gt;&gt;&gt; it’s not used anymore in the standard library.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;&gt;&gt;&gt;  deinit {<br>&gt;&gt;&gt;&gt;    // do whatever needs to be done<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // creating MyBuffer:<br>&gt;&gt;&gt;&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom<br>&gt;&gt;&gt; bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL<br>&gt;&gt;&gt; tail-allocated arrays internally. Although this is not something visible to the programmer, it makes<br>&gt;&gt;&gt; life easier for the compiler.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Erik<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161019/08a29278/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>October 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Oct 19, 2016, at 3:28 PM, Alexis &lt;abeingessner at apple.com&gt; wrote:<br>&gt; <br>&gt; A bit late to this game, because I didn’t fully understand the “point” of ManagedBuffer(Pointer). After a good week of messing around with these in Dictionary/Array/String, I now have Opinions.<br>&gt; <br>&gt; I agree ManagedBufferPointer is largely unnecessary. However it’s seeming a lot like ManagedBuffer (and its equivalents) are suboptimal for the standard library’s purposes too!<br>&gt; <br>&gt; In particular, pretty much every one of these buffers that I see wants to be a subclass of some NS* collection so that it can be toll-free bridged into objective C. This means that all those types are forced to directly drop down to allocWithTailElems, rather than using a nice abstraction that does it for them. Array does this right now, and I’ve got a PR up for review that’s doing the same thing to the HashedCollections. It’s an outstanding bug that String isn’t doing this (forcing its buffer to be wrapped in another class to be bridged).<br>&gt; <br>&gt; I don’t really feel any pain from directly using allocWithTailElems, it’s a great API. It just leaves me at a loss for when I’d reach for ManagedBuffer at all, as it’s very limited.<br></p><p>I think we can implement a replacement for ManagedBufferPointer. But it would have a different API. Something like that:<br></p><p>public struct ManagedBufferPointer2&lt;StorageClass: AnyObject, Element&gt; {<br></p><p>  public init(minimumCapacity: Int,<br>              initWith factory: (StorageClass) throws -&gt; ()<br>  ) rethrows {<br>    buffer = Builtin.allocWithTailElems_1(<br>         StorageClass.self, minimumCapacity._builtinWordValue, Element.self)<br>    try factory(buffer)<br>  }<br>  // ...<br>  let buffer: StorageClass<br>}<br></p><p><br>&gt; <br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 3:11 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I created a proposal: https://github.com/apple/swift-evolution/pull/545 &lt;https://github.com/apple/swift-evolution/pull/545&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 11, 2016, at 11:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Oct 11 2016, Károly Lőrentey &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ManagedBuffer has been really useful a couple of times, but I never<br>&gt;&gt;&gt;&gt; found a use for ManagedBufferPointer. I can’t even say I’m entirely<br>&gt;&gt;&gt;&gt; sure what need it was originally designed to fulfill.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The real need is/was to be able to do the same kind of storage<br>&gt;&gt;&gt; management in classes not derived from ManagedBuffer.  This can be<br>&gt;&gt;&gt; important for bridging, where the buffers of various native swift<br>&gt;&gt;&gt; containers need to be derived from, e.g., NSString or NSArray.  That is,<br>&gt;&gt;&gt; however, an extremely stdlib-specifc need.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 2016-10-11, at 00:12, Erik Eckstein via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able<br>&gt;&gt;&gt;&gt; to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt;&gt;&gt;&gt;&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now<br>&gt;&gt;&gt;&gt; it’s not used anymore in the standard library.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;&gt;&gt;&gt;&gt;  deinit {<br>&gt;&gt;&gt;&gt;&gt;    // do whatever needs to be done<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // creating MyBuffer:<br>&gt;&gt;&gt;&gt;&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom<br>&gt;&gt;&gt;&gt; bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL<br>&gt;&gt;&gt;&gt; tail-allocated arrays internally. Although this is not something visible to the programmer, it makes<br>&gt;&gt;&gt;&gt; life easier for the compiler.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Erik<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161019/c1586b52/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>[Pitch] deprecating ManagedBufferPointer</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>October 22, 2016 at 02:00:00pm</p></header><div class="content"><p>May be totally wrong about this but I always thought that ManagedBuffer(Pointer) would be really useful in conjunction w/ Metal. In particular, MTLBuffer gives you a region of memory that is in common configurations shared btwn the CPU and GPU. I believe the idea is you write your vertex data or textures or whatever into that region, which you then associate with a particular command you issue to the GPU.<br></p><p>-Colin<br></p><p>&gt; On Oct 19, 2016, at 6:28 PM, Alexis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; A bit late to this game, because I didn’t fully understand the “point” of ManagedBuffer(Pointer). After a good week of messing around with these in Dictionary/Array/String, I now have Opinions.<br>&gt; <br>&gt; I agree ManagedBufferPointer is largely unnecessary. However it’s seeming a lot like ManagedBuffer (and its equivalents) are suboptimal for the standard library’s purposes too!<br>&gt; <br>&gt; In particular, pretty much every one of these buffers that I see wants to be a subclass of some NS* collection so that it can be toll-free bridged into objective C. This means that all those types are forced to directly drop down to allocWithTailElems, rather than using a nice abstraction that does it for them. Array does this right now, and I’ve got a PR up for review that’s doing the same thing to the HashedCollections. It’s an outstanding bug that String isn’t doing this (forcing its buffer to be wrapped in another class to be bridged).<br>&gt; <br>&gt; I don’t really feel any pain from directly using allocWithTailElems, it’s a great API. It just leaves me at a loss for when I’d reach for ManagedBuffer at all, as it’s very limited.<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 3:11 PM, Erik Eckstein via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I created a proposal: https://github.com/apple/swift-evolution/pull/545 &lt;https://github.com/apple/swift-evolution/pull/545&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 11, 2016, at 11:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Oct 11 2016, Károly Lőrentey &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ManagedBuffer has been really useful a couple of times, but I never<br>&gt;&gt;&gt;&gt; found a use for ManagedBufferPointer. I can’t even say I’m entirely<br>&gt;&gt;&gt;&gt; sure what need it was originally designed to fulfill.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The real need is/was to be able to do the same kind of storage<br>&gt;&gt;&gt; management in classes not derived from ManagedBuffer.  This can be<br>&gt;&gt;&gt; important for bridging, where the buffers of various native swift<br>&gt;&gt;&gt; containers need to be derived from, e.g., NSString or NSArray.  That is,<br>&gt;&gt;&gt; however, an extremely stdlib-specifc need.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 2016-10-11, at 00:12, Erik Eckstein via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The purpose of ManagedBufferPointer is to create a buffer with a custom class-metadata to be able<br>&gt;&gt;&gt;&gt; to implement a custom deinit (e.g. to destroy the tail allocated elements).<br>&gt;&gt;&gt;&gt;&gt; It was used in Array (before I replaced it with the new tail-allocated-array-built-ins). But now<br>&gt;&gt;&gt;&gt; it’s not used anymore in the standard library.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As a replacement for ManagedBufferPointer one can just derive a class from ManagedBuffer and implement the deinit in the derived class.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; final class MyBuffer : ManagedBuffer&lt;MyHeader, MyElements&gt; {<br>&gt;&gt;&gt;&gt;&gt;  deinit {<br>&gt;&gt;&gt;&gt;&gt;    // do whatever needs to be done<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // creating MyBuffer:<br>&gt;&gt;&gt;&gt;&gt; let b = MyBuffer.create(minimumCapacity: 27, makingHeaderWith: { myb in return MyHeader(...) })<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; IMO ManagedBuffer is much cleaner than ManagedBufferPointer (it doesn’t need this custom<br>&gt;&gt;&gt;&gt; bufferClass to be passed to the constructor). Also ManagedBufferPointer doesn’t use SIL<br>&gt;&gt;&gt;&gt; tail-allocated arrays internally. Although this is not something visible to the programmer, it makes<br>&gt;&gt;&gt;&gt; life easier for the compiler.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So I suggest that we deprecate ManagedBufferPointer.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Erik<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161022/264ad800/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
