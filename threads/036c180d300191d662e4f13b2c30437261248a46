<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Why API marked as `macOS 10.12+` can be used in macOS 10.11?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September 26, 2016 at 09:00:00am</p></header><div class="content"><p>In the official migrating guide &lt;https://swift.org/migration-guide/&gt;.<br></p><p>You can choose from two kinds of migration to perform:<br></p><p>   - *Use Swift 2.3* Modifies your project to enable the *Use Legacy<br>Swift* build<br>   setting and provides source changes to be able to build against the new<br>   SDKs.<br>   - *Use Swift 3* This is recommended. You will get source changes to be<br>   able to build your project using Swift 3 and take advantage of all the new<br>   features in Xcode 8.0.<br></p><p>Optionally, you can move to Swift 2.3 now and invoke the migration<br>assistant again later to update to Swift 3.<br></p><p>So it seems to me that Swift 3 will only works with the new SDKs (iOS 10,<br>macOS 10.12, watchOS 3, tvOS 10). The API explanation enhanced my theory.<br></p><p>Data.init(base64Encoded:options:)<br>&lt;https://developer.apple.com/reference/foundation/data/1780388-init&gt;<br></p><p>&gt; Language<br>&gt; Swift<br>&gt; SDKs<br>&gt; iOS 10.0+<br>&gt; macOS 10.12+<br>&gt; tvOS 10.0+<br>&gt; watchOS 3.0+<br></p><p><br>I created a new Cocoa application project in Xcode 8. Since my OS is macOS<br>10.11, the `Deployment Target` is `10.11`, the `Base SDK` is `10.12`. Since<br>the newly created project&#39;s swift version is default 3.0. I thought I<br>couldn&#39;t use any apis that were marked as `macOS 10.12+`. However, I was<br>wrong. Below code worked.<br></p><p>var data = Data(base64Encoded: &quot;Hello World!&quot;)<br></p><p>print(data) // prints nil<br></p><p>So what are the boundary between old APIs with new APIs between OS<br>versions? Is the API doc wrong? In previous docs, if an API is marked<br>as available only in the latest OS, you can&#39;t use it in old OS. Is that<br>rule changed in Swift 3?<br></p><p>Zhaoxin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160926/036c8a46/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec21faaf010581d3b9d6ef507644e622?s=50"></div><header><strong>Why API marked as `macOS 10.12+` can be used in macOS 10.11?</strong> from <string>Jack Lawrence</string> &lt;jackl at apple.com&gt;<p>September 25, 2016 at 07:00:00pm</p></header><div class="content"><p>The API Reference SDK availability section in the documentation is incorrect for symbols defined in a Swift overlay. This is a known issue.<br></p><p>Unless it has an explicit @available attribute (check the generated interface), any symbol defined in a Swift overlay is available for all platform versions where swift 3 is compatible (iOS 7, macOS 10.9, etc).<br></p><p>Jack<br>&gt; On Sep 25, 2016, at 6:01 PM, Zhao Xin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; In the official migrating guide &lt;https://swift.org/migration-guide/&gt;.<br>&gt; <br>&gt; You can choose from two kinds of migration to perform:<br>&gt; <br>&gt; Use Swift 2.3 Modifies your project to enable the Use Legacy Swift build setting and provides source changes to be able to build against the new SDKs.<br>&gt; Use Swift 3 This is recommended. You will get source changes to be able to build your project using Swift 3 and take advantage of all the new features in Xcode 8.0.<br>&gt; Optionally, you can move to Swift 2.3 now and invoke the migration assistant again later to update to Swift 3.<br>&gt; <br>&gt; So it seems to me that Swift 3 will only works with the new SDKs (iOS 10, macOS 10.12, watchOS 3, tvOS 10). The API explanation enhanced my theory.<br>&gt; <br>&gt; Data.init(base64Encoded:options:) &lt;https://developer.apple.com/reference/foundation/data/1780388-init&gt;<br>&gt; Language<br>&gt; Swift<br>&gt; SDKs<br>&gt; iOS 10.0+<br>&gt; macOS 10.12+<br>&gt; tvOS 10.0+<br>&gt; watchOS 3.0+<br>&gt;  <br>&gt; I created a new Cocoa application project in Xcode 8. Since my OS is macOS 10.11, the `Deployment Target` is `10.11`, the `Base SDK` is `10.12`. Since the newly created project&#39;s swift version is default 3.0. I thought I couldn&#39;t use any apis that were marked as `macOS 10.12+`. However, I was wrong. Below code worked.<br>&gt; <br>&gt; var data = Data(base64Encoded: &quot;Hello World!&quot;)<br>&gt; print(data) // prints nil<br>&gt; <br>&gt; So what are the boundary between old APIs with new APIs between OS versions? Is the API doc wrong? In previous docs, if an API is marked as available only in the latest OS, you can&#39;t use it in old OS. Is that rule changed in Swift 3?<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160925/22401978/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Why API marked as `macOS 10.12+` can be used in macOS 10.11?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>September 26, 2016 at 12:00:00pm</p></header><div class="content"><p>Glad to know it. Thank you, Jack.<br></p><p>Zhaoxin<br></p><p>On Mon, Sep 26, 2016 at 10:17 AM, Jack Lawrence &lt;jackl at apple.com&gt; wrote:<br></p><p>&gt; The API Reference SDK availability section in the documentation is<br>&gt; incorrect for symbols defined in a Swift overlay. This is a known issue.<br>&gt;<br>&gt; Unless it has an explicit @available attribute (check the generated<br>&gt; interface), any symbol defined in a Swift overlay is available for all<br>&gt; platform versions where swift 3 is compatible (iOS 7, macOS 10.9, etc).<br>&gt;<br>&gt; Jack<br>&gt;<br>&gt; On Sep 25, 2016, at 6:01 PM, Zhao Xin via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; In the official migrating guide &lt;https://swift.org/migration-guide/&gt;.<br>&gt;<br>&gt; You can choose from two kinds of migration to perform:<br>&gt;<br>&gt;    - *Use Swift 2.3* Modifies your project to enable the *Use Legacy<br>&gt;    Swift* build setting and provides source changes to be able to build<br>&gt;    against the new SDKs.<br>&gt;    - *Use Swift 3* This is recommended. You will get source changes to be<br>&gt;    able to build your project using Swift 3 and take advantage of all the new<br>&gt;    features in Xcode 8.0.<br>&gt;<br>&gt; Optionally, you can move to Swift 2.3 now and invoke the migration<br>&gt; assistant again later to update to Swift 3.<br>&gt;<br>&gt; So it seems to me that Swift 3 will only works with the new SDKs (iOS 10,<br>&gt; macOS 10.12, watchOS 3, tvOS 10). The API explanation enhanced my theory.<br>&gt;<br>&gt; Data.init(base64Encoded:options:)<br>&gt; &lt;https://developer.apple.com/reference/foundation/data/1780388-init&gt;<br>&gt;<br>&gt;&gt; Language<br>&gt;&gt; Swift<br>&gt;&gt; SDKs<br>&gt;&gt; iOS 10.0+<br>&gt;&gt; macOS 10.12+<br>&gt;&gt; tvOS 10.0+<br>&gt;&gt; watchOS 3.0+<br>&gt;<br>&gt;<br>&gt; I created a new Cocoa application project in Xcode 8. Since my OS is macOS<br>&gt; 10.11, the `Deployment Target` is `10.11`, the `Base SDK` is `10.12`. Since<br>&gt; the newly created project&#39;s swift version is default 3.0. I thought I<br>&gt; couldn&#39;t use any apis that were marked as `macOS 10.12+`. However, I was<br>&gt; wrong. Below code worked.<br>&gt;<br>&gt; var data = Data(base64Encoded: &quot;Hello World!&quot;)<br>&gt; print(data) // prints nil<br>&gt;<br>&gt; So what are the boundary between old APIs with new APIs between OS<br>&gt; versions? Is the API doc wrong? In previous docs, if an API is marked<br>&gt; as available only in the latest OS, you can&#39;t use it in old OS. Is that<br>&gt; rule changed in Swift 3?<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160926/05c5dd9d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
