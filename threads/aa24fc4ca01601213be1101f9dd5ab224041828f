<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 12, 2016 at 03:00:00pm</p></header><div class="content"><p>Thanks for your review, Tony!<br></p><p>on Mon Apr 11 2016, Tony Parker &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and runs through April 18th. The proposal is available here:<br>&gt;<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt; review through constructive criticism and, eventually, determine the<br>&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;<br>&gt; I agree with the general direction and scope of the proposal, but I<br>&gt; think the names could use some changes. Specifically, I don’t think<br>&gt; the fallback to ‘form’ is required. <br></p><p>It&#39;s not a fallback whatsoever.  The updated guidelines referenced from<br>https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>(which was accepted this morning; announcement forthcoming) make the<br>“form” prefix a first-class citizen that one chooses based on the<br>noun-ness of the underlying operation.  Furthermore, *treating*<br>“formXXX” as a fallback and avoiding it will continue to strengthen the<br>sense that it&#39;s not something we should normally use, leading to more<br>naming arguments in the future.  It&#39;s a strong guideline and as long as<br>we have it, we shouldn&#39;t be afraid to apply it, thereby increasing<br>uniformity and predictability.<br></p><p>[To all my fellow “InPlace” lovers out there: yes, another guideline<br>might be more optimal, but this is the guideline we have/can get].<br></p><p>&gt; It would be a significant readability improvement to use a meaningful<br>&gt; verb to describe the action of altering the argument. The methods that<br>&gt; create new indices probably need a label on the first argument,<br>&gt; because otherwise it looks as if the IndexDistance is what is<br>&gt; described by ‘index’.<br>&gt;<br>&gt; Proposed:<br>&gt;<br>&gt;   func successor(of i: Index) -&gt; Index<br>&gt;   func formSuccessor(i: inout Index)<br>&gt;<br>&gt; Instead, I suggest:<br>&gt;<br>&gt;   func successor(of i : Index) -&gt; Index<br>&gt;   func advance(i: inout Index)<br></p><p>Why is that an improvement?  It loses the correspondence between the<br>operations, which are still a mutating/nonmutating pair.  What&#39;s it got<br>to recommend it?  I have the same question about all of the suggestions<br>below.<br></p><p>&gt; Proposed:<br>&gt;<br>&gt;   func index(n: IndexDistance, stepsFrom i: Index) -&gt; Index<br>&gt;   func index(n: IndexDistance, stepsFrom i: Index, limitedBy limit: Index) -&gt; Index<br>&gt;   func formIndex(n: IndexDistance, stepsFrom i: inout Index)<br>&gt;   func formIndex(n: IndexDistance, stepsFrom i: inout Index, limitedBy limit: Index)<br>&gt;<br>&gt; Suggested (taking into account Nate’s suggestion of reversing the order):<br>&gt;<br>&gt;   func index(startingAt i: Index, movedBy n: IndexDistance) -&gt; Index<br>&gt;   func index(startingAt i: Index, movedBy n: IndexDistance, limitedBy limit: Index) -&gt; Index<br></p><p>I find Nate Cook&#39;s concerns about the use of “index” here (a mental<br>clash with unrelated methods having the same basename) especially<br>convincing.  So I think I want to look for other names for these.<br></p><p>&gt;   <br>&gt;   func move(i : inout Index, by n: IndexDistance) <br>&gt;   func move(i : inout Index, by n: IndexDistance, limitedBy limit: Index)<br>&gt;<br>&gt; Proposed:<br>&gt;<br>&gt;   func predecessor(of i: Index) -&gt; Index<br>&gt;   func formPredecessor(i: inout Index)<br>&gt;<br>&gt; Suggested:<br>&gt;<br>&gt;   func predecessor(of i: Index) -&gt; Index<br>&gt;   func reverse(i: inout Index)<br>&gt;<br>&gt; I think reversing an index has some nice symmetry with reversing a<br>&gt; sequence, but if it seems to confusing, then replace advance and<br>&gt; reverse with ‘moveForward’ and ‘moveBackward’.<br></p><p>Yeah, I don&#39;t think moving an index one step backwards could reasonably<br>be called “reversing” it.  “moveBackward” is reasonable, if one wanted<br>have to break the relationship with predecessor.<br></p><p>&gt;<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>April 13, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Apr 12, 2016, at 3:43 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Thanks for your review, Tony!<br>&gt; <br>&gt; on Mon Apr 11 2016, Tony Parker &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and runs through April 18th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt; review through constructive criticism and, eventually, determine the<br>&gt;&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; I agree with the general direction and scope of the proposal, but I<br>&gt;&gt; think the names could use some changes. Specifically, I don’t think<br>&gt;&gt; the fallback to ‘form’ is required. <br>&gt; <br>&gt; It&#39;s not a fallback whatsoever.  The updated guidelines referenced from<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md&gt;<br>&gt; (which was accepted this morning; announcement forthcoming) make the<br>&gt; “form” prefix a first-class citizen that one chooses based on the<br>&gt; noun-ness of the underlying operation.  Furthermore, *treating*<br>&gt; “formXXX” as a fallback and avoiding it will continue to strengthen the<br>&gt; sense that it&#39;s not something we should normally use, leading to more<br>&gt; naming arguments in the future.  It&#39;s a strong guideline and as long as<br>&gt; we have it, we shouldn&#39;t be afraid to apply it, thereby increasing<br>&gt; uniformity and predictability.<br>&gt; <br>&gt; [To all my fellow “InPlace” lovers out there: yes, another guideline<br>&gt; might be more optimal, but this is the guideline we have/can get].<br>&gt; <br></p><p>In other cases, the mutating pair of methods refer to the receiver, not the argument. <br></p><p>x = y.union(z) // new value x<br>y.formUnion(z) // mutates y, not z<br></p><p>x = y.successor(z) // new value x<br>y.formSuccessor(z) // mutates z (or replaces), not y<br></p><p>I think using the form prefix here will confuse this case with the others, when they are meaningfully different.<br></p><p>&gt;&gt; It would be a significant readability improvement to use a meaningful<br>&gt;&gt; verb to describe the action of altering the argument. The methods that<br>&gt;&gt; create new indices probably need a label on the first argument,<br>&gt;&gt; because otherwise it looks as if the IndexDistance is what is<br>&gt;&gt; described by ‘index’.<br>&gt;&gt; <br>&gt;&gt; Proposed:<br>&gt;&gt; <br>&gt;&gt;  func successor(of i: Index) -&gt; Index<br>&gt;&gt;  func formSuccessor(i: inout Index)<br>&gt;&gt; <br>&gt;&gt; Instead, I suggest:<br>&gt;&gt; <br>&gt;&gt;  func successor(of i : Index) -&gt; Index<br>&gt;&gt;  func advance(i: inout Index)<br>&gt; <br>&gt; Why is that an improvement?  It loses the correspondence between the<br>&gt; operations, which are still a mutating/nonmutating pair.  What&#39;s it got<br>&gt; to recommend it?  I have the same question about all of the suggestions<br>&gt; below.<br></p><p>It’s an improvement because it is much easier to read and understand what it means. The phrase “form successor” only makes sense if you dive into the naming guidelines to see why we have the “form” prefix in the first place. Plus, as I said, the form prefix implies a mutation of the wrong argument.<br></p><p>&gt; <br>&gt;&gt; Proposed:<br>&gt;&gt; <br>&gt;&gt;  func index(n: IndexDistance, stepsFrom i: Index) -&gt; Index<br>&gt;&gt;  func index(n: IndexDistance, stepsFrom i: Index, limitedBy limit: Index) -&gt; Index<br>&gt;&gt;  func formIndex(n: IndexDistance, stepsFrom i: inout Index)<br>&gt;&gt;  func formIndex(n: IndexDistance, stepsFrom i: inout Index, limitedBy limit: Index)<br>&gt;&gt; <br>&gt;&gt; Suggested (taking into account Nate’s suggestion of reversing the order):<br>&gt;&gt; <br>&gt;&gt;  func index(startingAt i: Index, movedBy n: IndexDistance) -&gt; Index<br>&gt;&gt;  func index(startingAt i: Index, movedBy n: IndexDistance, limitedBy limit: Index) -&gt; Index<br>&gt; <br>&gt; I find Nate Cook&#39;s concerns about the use of “index” here (a mental<br>&gt; clash with unrelated methods having the same basename) especially<br>&gt; convincing.  So I think I want to look for other names for these.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;  func move(i : inout Index, by n: IndexDistance) <br>&gt;&gt;  func move(i : inout Index, by n: IndexDistance, limitedBy limit: Index)<br>&gt;&gt; <br>&gt;&gt; Proposed:<br>&gt;&gt; <br>&gt;&gt;  func predecessor(of i: Index) -&gt; Index<br>&gt;&gt;  func formPredecessor(i: inout Index)<br>&gt;&gt; <br>&gt;&gt; Suggested:<br>&gt;&gt; <br>&gt;&gt;  func predecessor(of i: Index) -&gt; Index<br>&gt;&gt;  func reverse(i: inout Index)<br>&gt;&gt; <br>&gt;&gt; I think reversing an index has some nice symmetry with reversing a<br>&gt;&gt; sequence, but if it seems to confusing, then replace advance and<br>&gt;&gt; reverse with ‘moveForward’ and ‘moveBackward’.<br>&gt; <br>&gt; Yeah, I don&#39;t think moving an index one step backwards could reasonably<br>&gt; be called “reversing” it.  “moveBackward” is reasonable, if one wanted<br>&gt; have to break the relationship with predecessor.<br>&gt; <br></p><p>Reverse is the best opposite we have of advance, so it makes sense to me. Or we could use retreat. =) There are other pairs of words that work as well, like “increment/decrement”. It’s rather an implementation detail of the index and collection what exactly these do, but conceptually modeling them as increment and decrement would likely make intuitive sense to most CS 101 students.<br></p><p>The reason that advance/reverse and increment/decrement work better is because they are active words that describe what happens to the argument, which has no other label. “form” describes little about the action that is actually taken on the argument. Therefore, to me it feels like a placeholder or fallback.<br></p><p>- Tony<br></p><p>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/e1fd7ac0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 13, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Apr 13 2016, Tony Parker &lt;anthony.parker-AT-apple.com&gt; wrote:<br></p><p>&gt;     On Apr 12, 2016, at 3:43 PM, Dave Abrahams via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Thanks for your review, Tony!<br>&gt;<br>&gt;     on Mon Apr 11 2016, Tony Parker &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                 On Apr 10, 2016, at 2:41 PM, Chris Lattner via swift-evolution<br>&gt;             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;             Hello Swift community,<br>&gt;<br>&gt;             The review of &quot;A New Model for Collections and Indices&quot; begins now<br>&gt;             and runs through April 18th. The proposal is available here:<br>&gt;<br>&gt;             https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;             Reviews are an important part of the Swift evolution process. All<br>&gt;             reviews should be sent to the swift-evolution mailing list at:<br>&gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;             or, if you would like to keep your feedback private, directly to the<br>&gt;             review manager.<br>&gt;<br>&gt;             What goes into a review?<br>&gt;<br>&gt;             The goal of the review process is to improve the proposal under<br>&gt;             review through constructive criticism and, eventually, determine the<br>&gt;             direction of Swift. When writing your review, here are some<br>&gt;             questions you might want to answer in your review:<br>&gt;<br>&gt;             * What is your evaluation of the proposal?<br>&gt;<br>&gt;         I agree with the general direction and scope of the proposal, but I<br>&gt;         think the names could use some changes. Specifically, I don’t think<br>&gt;         the fallback to ‘form’ is required. <br>&gt;<br>&gt;     It&#39;s not a fallback whatsoever. The updated guidelines referenced from<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;<br>&gt;     (which was accepted this morning; announcement forthcoming) make the<br>&gt;     “form” prefix a first-class citizen that one chooses based on the<br>&gt;     noun-ness of the underlying operation. Furthermore, *treating*<br>&gt;     “formXXX” as a fallback and avoiding it will continue to strengthen the<br>&gt;     sense that it&#39;s not something we should normally use, leading to more<br>&gt;     naming arguments in the future. It&#39;s a strong guideline and as long as<br>&gt;     we have it, we shouldn&#39;t be afraid to apply it, thereby increasing<br>&gt;     uniformity and predictability.<br>&gt;<br>&gt;     [To all my fellow “InPlace” lovers out there: yes, another guideline<br>&gt;     might be more optimal, but this is the guideline we have/can get].<br>&gt;<br>&gt; In other cases, the mutating pair of methods refer to the receiver, not the<br>&gt; argument. <br>&gt;<br>&gt; x = y.union(z) // new value x<br>&gt; y.formUnion(z) // mutates y, not z<br>&gt;<br>&gt; x = y.successor(z) // new value x<br>&gt; y.formSuccessor(z) // mutates z (or replaces), not y<br></p><p>This is true, but we need a way to deal with these cases as well.<br></p><p>&gt; I think using the form prefix here will confuse this case with the<br>&gt; others, when they are meaningfully different.<br></p><p>I don&#39;t think it is confusing, since in these cases the thing being<br>mutated is always explicitly passed inout (prefixed with &amp;).  Obvious,<br>reasonable people can disagree on this point.  IMO, though, if one wants<br>to avoid “form” here IMO we should have an equally-strong and clear<br>guideline to replace it for this sort of situation, as it&#39;s not<br>particularly far-fetched to imagine this will come up again.<br></p><p><br>&gt;         It would be a significant readability improvement to use a<br>&gt;         meaningful verb to describe the action of altering the<br>&gt;         argument. The methods that create new indices probably need a<br>&gt;         label on the first argument, because otherwise it looks as if<br>&gt;         the IndexDistance is what is described by ‘index’.<br>&gt;<br>&gt;         Proposed:<br>&gt;<br>&gt;         func successor(of i: Index) -&gt; Index<br>&gt;         func formSuccessor(i: inout Index)<br>&gt;<br>&gt;         Instead, I suggest:<br>&gt;<br>&gt;         func successor(of i : Index) -&gt; Index<br>&gt;         func advance(i: inout Index)<br>&gt;<br>&gt;     Why is that an improvement? It loses the correspondence between the<br>&gt;     operations, which are still a mutating/nonmutating pair. What&#39;s it got<br>&gt;     to recommend it? I have the same question about all of the suggestions<br>&gt;     below.<br>&gt;<br>&gt; It’s an improvement because it is much easier to read and understand what it<br>&gt; means. The phrase “form successor” only makes sense if you dive into the naming<br>&gt; guidelines to see why we have the “form” prefix in the first place. <br></p><p>Or if you see it enough that it becomes natural and you understand what<br>it means.  The same applies to “formUnion,” though.  (“InPlace” didn&#39;t<br>have this problem, but... oh, well).<br></p><p>IMO, either “formXXX” is good enough for these kinds of situations, or<br>it isn&#39;t.  If it isn&#39;t, we should take it out of the guidelines and not<br>use it for Set.  If it is good enough, we should settle on it and let it<br>proliferate.<br></p><p>&gt; Plus, as I said, the form prefix implies a mutation of the wrong<br>&gt; argument.<br></p><p>Not really.  “Form” isn&#39;t really specific about what&#39;s being<br>mutated. You can form a bowl out of clay or you can form a blockade.<br>Frankly, I agree with the many people on this list who have said it<br>carries an implication of non-reflexivity... I just find it to be an<br>acceptably weak implication; weak enough that we can get away with using<br>it reflexively.<br></p><p>&gt;<br>&gt;         Proposed:<br>&gt;<br>&gt;         func index(n: IndexDistance, stepsFrom i: Index) -&gt; Index<br>&gt;         func index(n: IndexDistance, stepsFrom i: Index, limitedBy limit: Index)<br>&gt;         -&gt; Index<br>&gt;         func formIndex(n: IndexDistance, stepsFrom i: inout Index)<br>&gt;         func formIndex(n: IndexDistance, stepsFrom i: inout Index, limitedBy<br>&gt;         limit: Index)<br>&gt;<br>&gt;         Suggested (taking into account Nate’s suggestion of reversing the<br>&gt;         order):<br>&gt;<br>&gt;         func index(startingAt i: Index, movedBy n: IndexDistance) -&gt; Index<br>&gt;         func index(startingAt i: Index, movedBy n: IndexDistance, limitedBy<br>&gt;         limit: Index) -&gt; Index<br>&gt;<br>&gt;     I find Nate Cook&#39;s concerns about the use of “index” here (a mental<br>&gt;     clash with unrelated methods having the same basename) especially<br>&gt;     convincing. So I think I want to look for other names for these.<br>&gt;<br>&gt;         func move(i : inout Index, by n: IndexDistance) <br>&gt;         func move(i : inout Index, by n: IndexDistance, limitedBy limit: Index)<br>&gt;<br>&gt;         Proposed:<br>&gt;<br>&gt;         func predecessor(of i: Index) -&gt; Index<br>&gt;         func formPredecessor(i: inout Index)<br>&gt;<br>&gt;         Suggested:<br>&gt;<br>&gt;         func predecessor(of i: Index) -&gt; Index<br>&gt;         func reverse(i: inout Index)<br>&gt;<br>&gt;         I think reversing an index has some nice symmetry with reversing a<br>&gt;         sequence, but if it seems to confusing, then replace advance and<br>&gt;         reverse with ‘moveForward’ and ‘moveBackward’.<br>&gt;<br>&gt;     Yeah, I don&#39;t think moving an index one step backwards could reasonably<br>&gt;     be called “reversing” it. “moveBackward” is reasonable, if one wanted<br>&gt;     have to break the relationship with predecessor.<br>&gt;<br>&gt; Reverse is the best opposite we have of advance, so it makes sense to<br>&gt; me. <br></p><p>Oh, I get it.<br></p><p>&gt; Or we could use retreat. =) There are other pairs of words that work<br>&gt; as well, like “increment/decrement”. <br></p><p>Yeah, unfortunately those carry an incorrect implication when the<br>indices are numbers, because, e.g. the collection might be offsetting<br>the number by 2 for each position.  One could of course argue that using<br>numbers that way as indices was a bad design choice.<br></p><p>I&#39;ll have to think about that idea again.  We considered and rejected it<br>for a reason, but it might not be a really strong one.  Thanks for<br>bringing it up.<br></p><p>&gt; It’s rather an implementation detail of the index and collection what<br>&gt; exactly these do, <br></p><p>I think it&#39;s fundamental, but I&#39;m not sure that point makes any<br>difference to our discussion.<br></p><p>&gt; but conceptually modeling them as increment and decrement would likely<br>&gt; make intuitive sense to most CS 101 students.<br>&gt;<br>&gt; The reason that advance/reverse and increment/decrement work better is because<br>&gt; they are active words that describe what happens to the argument, which has no<br>&gt; other label. “form” describes little about the action that is actually taken on<br>&gt; the argument. <br></p><p>Obviously!  The proposed names aren&#39;t simply “form.”  “Form-” serves<br>the same purpose as “-ed” or “-ing” in verb-based names.  Not a<br>placeholder, but a modifier used to produce the right semantic<br>implication.<br></p><p>&gt; Therefore, to me it feels like a placeholder or fallback.<br></p><p>That conclusion still doesn&#39;t add up for me.  However, I do want to give<br>increment/decrement due consideration.<br></p><p>Thanks again,<br></p><p><br>&gt; - Tony<br>&gt;<br>&gt;         - Tony<br>&gt;<br>&gt;                 * Is the problem being addressed significant enough to warrant a<br>&gt;             change to Swift?<br>&gt;             * Does this proposal fit well with the feel and direction of Swift?<br>&gt;             * If you have you used other languages or libraries with a similar<br>&gt;             feature, how do you feel that this proposal compares to those?<br>&gt;             * How much effort did you put into your review? A glance, a quick<br>&gt;             reading, or an in-depth study?<br>&gt;<br>&gt;             More information about the Swift evolution process is available at<br>&gt;<br>&gt;             https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;             Thank you,<br>&gt;<br>&gt;             -Chris Lattner<br>&gt;             Review Manager<br>&gt;<br>&gt;             _______________________________________________<br>&gt;             swift-evolution mailing list<br>&gt;             swift-evolution at swift.org<br>&gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     -- <br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 14, 2016 at 10:00:00am</p></header><div class="content"><p>[offtopic for &quot;A New Model for Collections and Indices&quot;]<br></p><p>Just wanted to add my 2 cents to this new naming guidelines proposal that <br>@Dave pointed to:<br>&quot;Update API Naming Guidelines and Rewrite Set APIs Accordingly&quot;<br>https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br></p><p>I strongly feel this &quot;form&quot; prefix is a wrong decision. Is it really most <br>of us feel this &quot;formXXXX&quot; method name not confusing and think this is a <br>good solution? Just can&#39;t believe in this.<br></p><p>My mind reads &quot;form&quot; as &quot;from&quot; first. And then, when I re-checked, I see <br>&quot;fORm&quot;. I believe we see &quot;from&quot; much more often than &quot;form&quot; as in code and <br>in our usual life, so we&#39;ll read it as &quot;from&quot; first.<br>I have some kind of prove : &quot;I cdn&#39;uolt blveiee taht I cluod aulaclty <br>uesdnatnrd waht I was rdanieg&quot;<br>https://en.wikipedia.org/wiki/Typoglycemia<br></p><p>Additionally, I totally refuse to feel the meaning of &quot;form&quot; word as good <br>replacement for meaning for &quot;InPlace&quot;. InPlace is probably &quot;visually <br>heavyweight&quot;(as noted in proposal) but IMO much more explicit on what we <br>are doing and what we&#39;ll have in result.<br></p><p>I have no right now good alternative for &quot;form&quot;, and probably the proposal <br>was already accepted or probably really most of us agree with &quot;form&quot;.<br></p><p>Probably I&#39;ll prefer to leave InPlace as in current Swift, or event make it <br>a suffix(but all lowecased, thinking if we are using &quot;in-place&quot; as one <br>word, not &quot;in place&quot; as two words):<br></p><p>y.inplaceUnion(z)<br></p><p>or probably<br></p><p>y.assignByUnion(z)<br>(as we think of this command as<br>y = y.union(z)<br>, we can just read it - &quot;y is assigned by the value of y.union(z) &quot;<br>&quot;assign the variable &quot;name&quot; the value computed by &quot;right_hand_expression&quot;&quot;<br>=&gt; &quot;assign the y the value computer by union(z)&quot; =&gt; assignByUnion(z)<br>for example, first found: <br>http://www.cs.utah.edu/~germain/PPS/Topics/assignment_statement.html)<br></p><p>or may be<br></p><p>y.mutateByUnion(z)<br>imo clear and explicit. we have &#39;mutating&#39; when dealing with structs, here <br>is similar behavior.<br></p><p>Probably we should rethink the mutating methods at all, and not trying to <br>find a good word but introduce new syntax in Swift like.. I don&#39;t know.. <br>some kind of y&amp;.union(z)  or y$.union(z) or y:union(z) etc.<br></p><p>Just some opinion. Thank you for reading this.<br></p><p>[/offtopic]<br></p><p>On 13.04.2016 21:24, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; In other cases, the mutating pair of methods refer to the receiver, not the<br>&gt;&gt; &gt;argument.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;x = y.union(z) // new value x<br>&gt;&gt; &gt;y.formUnion(z) // mutates y, not z<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;x = y.successor(z) // new value x<br>&gt;&gt; &gt;y.formSuccessor(z) // mutates z (or replaces), not y<br>&gt; This is true, but we need a way to deal with these cases as well.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec8a60462a511e833c5c4a83b424c958?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dennis Weissmann</string> &lt;dennis at dennisweissmann.me&gt;<p>April 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 9:00 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; [offtopic for &quot;A New Model for Collections and Indices&quot;]<br>&gt; <br>&gt; Just wanted to add my 2 cents to this new naming guidelines proposal that @Dave pointed to:<br>&gt; &quot;Update API Naming Guidelines and Rewrite Set APIs Accordingly&quot;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt; <br>&gt; I strongly feel this &quot;form&quot; prefix is a wrong decision. Is it really most of us feel this &quot;formXXXX&quot; method name not confusing and think this is a good solution? Just can&#39;t believe in this.<br>&gt; <br>&gt; My mind reads &quot;form&quot; as &quot;from&quot; first. And then, when I re-checked, I see &quot;fORm&quot;. I believe we see &quot;from&quot; much more often than &quot;form&quot; as in code and in our usual life, so we&#39;ll read it as &quot;from&quot; first.<br></p><p>Non-native speaker here, I had/have the exact same problem. Always read “from”.<br></p><p>&gt; I have some kind of prove : &quot;I cdn&#39;uolt blveiee taht I cluod aulaclty uesdnatnrd waht I was rdanieg&quot;<br>&gt; https://en.wikipedia.org/wiki/Typoglycemia<br>&gt; <br>&gt; Additionally, I totally refuse to feel the meaning of &quot;form&quot; word as good replacement for meaning for &quot;InPlace&quot;. InPlace is probably &quot;visually heavyweight&quot;(as noted in proposal) but IMO much more explicit on what we are doing and what we&#39;ll have in result.<br>&gt; <br>&gt; I have no right now good alternative for &quot;form&quot;, and probably the proposal was already accepted or probably really most of us agree with &quot;form&quot;.<br>&gt; <br>&gt; Probably I&#39;ll prefer to leave InPlace as in current Swift, or event make it a suffix(but all lowecased, thinking if we are using &quot;in-place&quot; as one word, not &quot;in place&quot; as two words):<br>&gt; <br>&gt; y.inplaceUnion(z)<br>&gt; <br>&gt; or probably<br>&gt; <br>&gt; y.assignByUnion(z)<br>&gt; (as we think of this command as<br>&gt; y = y.union(z)<br>&gt; , we can just read it - &quot;y is assigned by the value of y.union(z) &quot;<br>&gt; &quot;assign the variable &quot;name&quot; the value computed by &quot;right_hand_expression&quot;&quot;<br>&gt; =&gt; &quot;assign the y the value computer by union(z)&quot; =&gt; assignByUnion(z)<br>&gt; for example, first found: http://www.cs.utah.edu/~germain/PPS/Topics/assignment_statement.html)<br>&gt; <br>&gt; or may be<br>&gt; <br>&gt; y.mutateByUnion(z)<br>&gt; imo clear and explicit. we have &#39;mutating&#39; when dealing with structs, here is similar behavior.<br>&gt; <br>&gt; Probably we should rethink the mutating methods at all, and not trying to find a good word but introduce new syntax in Swift like.. I don&#39;t know.. some kind of y&amp;.union(z)  or y$.union(z) or y:union(z) etc.<br>&gt; <br>&gt; Just some opinion. Thank you for reading this.<br>&gt; <br>&gt; [/offtopic]<br>&gt; <br>&gt; On 13.04.2016 21:24, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt;&gt; In other cases, the mutating pair of methods refer to the receiver, not the<br>&gt;&gt;&gt; &gt;argument.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;x = y.union(z) // new value x<br>&gt;&gt;&gt; &gt;y.formUnion(z) // mutates y, not z<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;x = y.successor(z) // new value x<br>&gt;&gt;&gt; &gt;y.formSuccessor(z) // mutates z (or replaces), not y<br>&gt;&gt; This is true, but we need a way to deal with these cases as well.<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 18, 2016 at 08:00:00am</p></header><div class="content"><p>+1 to Tony&#39;s arguments and to increment/decrement<br></p><p>-Thorsten <br></p><p>&gt; Am 13.04.2016 um 17:45 schrieb Tony Parker via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 12, 2016, at 3:43 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks for your review, Tony!<br>&gt;&gt; <br>&gt;&gt; on Mon Apr 11 2016, Tony Parker &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and runs through April 18th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt;&gt; review through constructive criticism and, eventually, determine the<br>&gt;&gt;&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with the general direction and scope of the proposal, but I<br>&gt;&gt;&gt; think the names could use some changes. Specifically, I don’t think<br>&gt;&gt;&gt; the fallback to ‘form’ is required. <br>&gt;&gt; <br>&gt;&gt; It&#39;s not a fallback whatsoever.  The updated guidelines referenced from<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;&gt; (which was accepted this morning; announcement forthcoming) make the<br>&gt;&gt; “form” prefix a first-class citizen that one chooses based on the<br>&gt;&gt; noun-ness of the underlying operation.  Furthermore, *treating*<br>&gt;&gt; “formXXX” as a fallback and avoiding it will continue to strengthen the<br>&gt;&gt; sense that it&#39;s not something we should normally use, leading to more<br>&gt;&gt; naming arguments in the future.  It&#39;s a strong guideline and as long as<br>&gt;&gt; we have it, we shouldn&#39;t be afraid to apply it, thereby increasing<br>&gt;&gt; uniformity and predictability.<br>&gt;&gt; <br>&gt;&gt; [To all my fellow “InPlace” lovers out there: yes, another guideline<br>&gt;&gt; might be more optimal, but this is the guideline we have/can get].<br>&gt; <br>&gt; In other cases, the mutating pair of methods refer to the receiver, not the argument. <br>&gt; <br>&gt; x = y.union(z) // new value x<br>&gt; y.formUnion(z) // mutates y, not z<br>&gt; <br>&gt; x = y.successor(z) // new value x<br>&gt; y.formSuccessor(z) // mutates z (or replaces), not y<br>&gt; <br>&gt; I think using the form prefix here will confuse this case with the others, when they are meaningfully different.<br>&gt; <br>&gt;&gt;&gt; It would be a significant readability improvement to use a meaningful<br>&gt;&gt;&gt; verb to describe the action of altering the argument. The methods that<br>&gt;&gt;&gt; create new indices probably need a label on the first argument,<br>&gt;&gt;&gt; because otherwise it looks as if the IndexDistance is what is<br>&gt;&gt;&gt; described by ‘index’.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func successor(of i: Index) -&gt; Index<br>&gt;&gt;&gt;  func formSuccessor(i: inout Index)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Instead, I suggest:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func successor(of i : Index) -&gt; Index<br>&gt;&gt;&gt;  func advance(i: inout Index)<br>&gt;&gt; <br>&gt;&gt; Why is that an improvement?  It loses the correspondence between the<br>&gt;&gt; operations, which are still a mutating/nonmutating pair.  What&#39;s it got<br>&gt;&gt; to recommend it?  I have the same question about all of the suggestions<br>&gt;&gt; below.<br>&gt; <br>&gt; It’s an improvement because it is much easier to read and understand what it means. The phrase “form successor” only makes sense if you dive into the naming guidelines to see why we have the “form” prefix in the first place. Plus, as I said, the form prefix implies a mutation of the wrong argument.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func index(n: IndexDistance, stepsFrom i: Index) -&gt; Index<br>&gt;&gt;&gt;  func index(n: IndexDistance, stepsFrom i: Index, limitedBy limit: Index) -&gt; Index<br>&gt;&gt;&gt;  func formIndex(n: IndexDistance, stepsFrom i: inout Index)<br>&gt;&gt;&gt;  func formIndex(n: IndexDistance, stepsFrom i: inout Index, limitedBy limit: Index)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Suggested (taking into account Nate’s suggestion of reversing the order):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func index(startingAt i: Index, movedBy n: IndexDistance) -&gt; Index<br>&gt;&gt;&gt;  func index(startingAt i: Index, movedBy n: IndexDistance, limitedBy limit: Index) -&gt; Index<br>&gt;&gt; <br>&gt;&gt; I find Nate Cook&#39;s concerns about the use of “index” here (a mental<br>&gt;&gt; clash with unrelated methods having the same basename) especially<br>&gt;&gt; convincing.  So I think I want to look for other names for these.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func move(i : inout Index, by n: IndexDistance) <br>&gt;&gt;&gt;  func move(i : inout Index, by n: IndexDistance, limitedBy limit: Index)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func predecessor(of i: Index) -&gt; Index<br>&gt;&gt;&gt;  func formPredecessor(i: inout Index)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Suggested:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  func predecessor(of i: Index) -&gt; Index<br>&gt;&gt;&gt;  func reverse(i: inout Index)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think reversing an index has some nice symmetry with reversing a<br>&gt;&gt;&gt; sequence, but if it seems to confusing, then replace advance and<br>&gt;&gt;&gt; reverse with ‘moveForward’ and ‘moveBackward’.<br>&gt;&gt; <br>&gt;&gt; Yeah, I don&#39;t think moving an index one step backwards could reasonably<br>&gt;&gt; be called “reversing” it.  “moveBackward” is reasonable, if one wanted<br>&gt;&gt; have to break the relationship with predecessor.<br>&gt; <br>&gt; Reverse is the best opposite we have of advance, so it makes sense to me. Or we could use retreat. =) There are other pairs of words that work as well, like “increment/decrement”. It’s rather an implementation detail of the index and collection what exactly these do, but conceptually modeling them as increment and decrement would likely make intuitive sense to most CS 101 students.<br>&gt; <br>&gt; The reason that advance/reverse and increment/decrement work better is because they are active words that describe what happens to the argument, which has no other label. “form” describes little about the action that is actually taken on the argument. Therefore, to me it feels like a placeholder or fallback.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/ee070f9b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
