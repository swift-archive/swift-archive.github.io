<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 12, 2016 at 06:00:00pm</p></header><div class="content"><p>+1 to Tony’s naming suggestions, myself preferring move(index:by:),<br>move(indexForward:), and move(indexBackward:) as it is the most clear and<br>consistent.<br></p><p>As an aside, I am not a fan of the form- prefix, as it feels generic without<br>being self explanatory. I think another word would work better. I won’t<br>bikeshed, but I feel form- feels and reads oddly every time I see it.<br></p><p>  <br></p><p>  <br></p><p>  <br></p><p>&gt; &amp;gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner via swift-evolution &amp;lt<br>;[swift-evolution at swift.org](mailto:swift-evolution at swift.org &quot;mailto:swift-<br>evolution at swift.org&quot; )&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt; Hello Swift community,  <br>&amp;gt;  <br>&amp;gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and<br>runs through April 18th. The proposal is available here:  <br>&amp;gt;  <br>&amp;gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md&gt;[  <br>](https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md &quot;https://github.com/apple/swift-<br>evolution/blob/master/proposals/0065-collections-move-indices.md&quot; )&amp;gt;  <br>&amp;gt; Reviews are an important part of the Swift evolution process. All reviews<br>should be sent to the swift-evolution mailing list at:  <br>&amp;gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;[  <br>](https://lists.swift.org/mailman/listinfo/swift-evolution<br>&quot;https://lists.swift.org/mailman/listinfo/swift-evolution&quot; )&amp;gt; or, if you<br>would like to keep your feedback private, directly to the review manager.  <br>&amp;gt;  <br>&amp;gt;  <br>&amp;gt; What goes into a review?  <br>&amp;gt;  <br>&amp;gt; The goal of the review process is to improve the proposal under review<br>through constructive criticism and, eventually, determine the direction of<br>Swift. When writing your review, here are some questions you might want to<br>answer in your review:  <br>&amp;gt;  <br>&amp;gt; * What is your evaluation of the proposal?<br></p><p>&gt;<br></p><p>&gt; I agree with the general direction and scope of the proposal, but I think<br>the names could use some changes. Specifically, I don’t think the fallback to<br>‘form’ is required. It would be a significant readability improvement to use a<br>meaningful verb to describe the action of altering the argument. The methods<br>that create new indices probably need a label on the first argument, because<br>otherwise it looks as if the IndexDistance is what is described by ‘index’.<br></p><p>&gt;<br></p><p>&gt; Proposed:<br></p><p>&gt;<br></p><p>&gt;   func successor(of i: Index) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func formSuccessor(i: inout Index)<br></p><p>&gt;<br></p><p>&gt; Instead, I suggest:<br></p><p>&gt;<br></p><p>&gt;   func successor(of i : Index) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func advance(i: inout Index)<br></p><p>&gt;<br></p><p>&gt; Proposed:<br></p><p>&gt;<br></p><p>&gt;   func index(n: IndexDistance, stepsFrom i: Index) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func index(n: IndexDistance, stepsFrom i: Index, limitedBy limit: Index)<br>-&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func formIndex(n: IndexDistance, stepsFrom i: inout Index)<br></p><p>&gt;<br></p><p>&gt;   func formIndex(n: IndexDistance, stepsFrom i: inout Index, limitedBy<br>limit: Index)<br></p><p>&gt;<br></p><p>&gt; Suggested (taking into account Nate’s suggestion of reversing the order):<br></p><p>&gt;<br></p><p>&gt;   func index(startingAt i: Index, movedBy n: IndexDistance) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func index(startingAt i: Index, movedBy n: IndexDistance, limitedBy limit:<br>Index) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func move(i : inout Index, by n: IndexDistance)<br></p><p>&gt;<br></p><p>&gt;   func move(i : inout Index, by n: IndexDistance, limitedBy limit: Index)<br></p><p>&gt;<br></p><p>&gt; Proposed:<br></p><p>&gt;<br></p><p>&gt;   func predecessor(of i: Index) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func formPredecessor(i: inout Index)<br></p><p>&gt;<br></p><p>&gt; Suggested:<br></p><p>&gt;<br></p><p>&gt;   func predecessor(of i: Index) -&amp;gt; Index<br></p><p>&gt;<br></p><p>&gt;   func reverse(i: inout Index)<br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; I think reversing an index has some nice symmetry with reversing a sequence,<br>but if it seems to confusing, then replace advance and reverse with<br>‘moveForward’ and ‘moveBackward’.<br></p><p>&gt;<br></p><p>&gt; \- Tony<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160412/72b2a9e6/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
