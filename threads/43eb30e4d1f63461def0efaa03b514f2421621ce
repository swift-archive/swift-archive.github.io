<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6bd902ea39480cfd0a34cf8bc63dfc14?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>Nathan de Vries</string> &lt;ndevries at apple.com&gt;<p>December  5, 2015 at 04:00:00pm</p></header><div class="content"><p>It&#39;s currently possible to define either or both of the following observers on a property:<br>willSet, called just before the value is stored<br>didSet, called immediately after the new value is stored<br>I&#39;m finding myself using didSet extensively, but almost always guard my didSet with a clause to see if the value has changed:<br></p><p>    class CustomView : UIView {<br>        var state : CustomViewState = false {<br>            didSet {<br>                guard state != oldValue else { return }<br>                // Act on the new state.<br>            }<br>        }<br>    }<br></p><p>Given the frequency of use, it would be great if I could strip this boilerplate altogether and simply rewrite this as:<br></p><p>    class CustomView : UIView {<br>        var state : CustomViewState = false {<br>            didChange {<br>                // Act on the new state.<br>            }<br>        }<br>    }<br></p><p>Property types conforming to Equatable would be checked for the implicit guard via ==, otherwise it would fall back on the identity operator (===) for value and reference types that don&#39;t conform to Equatable.<br></p><p>This would mean the following observers could be defined on a property:<br>willSet, called just before the value is stored<br>willChange, called just before the value is stored if the value is different to the previous value<br>didSet, called immediately after the new value is stored<br>didChange, called immediately after the new value is stored if the new value is different to the previous value<br>—Nathan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/43eb21ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s currently possible to define either or both of the following observers on a property:<br>&gt; willSet, called just before the value is stored<br>&gt; didSet, called immediately after the new value is stored<br>...<br></p><p>&gt; This would mean the following observers could be defined on a property:<br>&gt; willSet, called just before the value is stored<br>&gt; willChange, called just before the value is stored if the value is different to the previous value<br>&gt; didSet, called immediately after the new value is stored<br>&gt; didChange, called immediately after the new value is stored if the new value is different to the previous value<br></p><p>I’m open to consider a change along these lines, but the proposal would have to be fleshed out more.  Presumably it would only work for equatable types, right?  Also, can a property have these observers as well as the existing ones?  Would it be possible to add *one of* didChange or willChange - since less is better?<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/9d9fb9ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3487901bd0e15b426df7150fea4ad623?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>Mosab Elagha</string> &lt;elagha2 at illinois.edu&gt;<p>December  6, 2015 at 12:00:00am</p></header><div class="content"><p>+1. This feature would allow for a more clean approach in checking the<br>existing state of a value.<br></p><p>&gt; Also, can a property have these observers as well as the existing ones?<br></p><p>I&#39;m not really familiar with the implementation of the observers, but why<br>wouldn&#39;t it be able to? Maybe didSet can precede didChange in order of<br>execution if both are implemented, so you can have default behavior when<br>accessing a value but certain other behavior if it has changed. Or maybe<br>have willChange/didChange be a property that can be accessed within<br>willSet/didSet (like oldValue).<br></p><p><br></p><p>-Mosab Elagha<br></p><p>On Sun, Dec 6, 2015 at 12:11 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; It&#39;s currently possible to define either or both of the following<br>&gt; observers on a property:<br>&gt;<br>&gt;    - *willSet*, called just before the value is stored<br>&gt;    - *didSet*, called immediately after the new value is stored<br>&gt;<br>&gt; ...<br>&gt;<br>&gt; This would mean the following observers could be defined on a property:<br>&gt;<br>&gt;    - *willSet*, called just before the value is stored<br>&gt;    - *willChange*, called just before the value is stored if the value is<br>&gt;    different to the previous value<br>&gt;    - *didSet*, called immediately after the new value is stored<br>&gt;    - *didChange*, called immediately after the new value is stored if the<br>&gt;    new value is different to the previous value<br>&gt;<br>&gt; I’m open to consider a change along these lines, but the proposal would<br>&gt; have to be fleshed out more.  Presumably it would only work for equatable<br>&gt; types, right?  Also, can a property have these observers as well as the<br>&gt; existing ones?  Would it be possible to add *one of* didChange or<br>&gt; willChange - since less is better?<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/bea982b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 10:42 PM, Mosab Elagha &lt;elagha2 at illinois.edu&gt; wrote:<br>&gt; <br>&gt; +1. This feature would allow for a more clean approach in checking the existing state of a value. <br>&gt; <br>&gt; &gt; Also, can a property have these observers as well as the existing ones?<br>&gt; <br>&gt; I&#39;m not really familiar with the implementation of the observers, but why wouldn&#39;t it be able to? Maybe didSet can precede didChange in order of execution if both are implemented, so you can have default behavior when accessing a value but certain other behavior if it has changed. Or maybe have willChange/didChange be a property that can be accessed within willSet/didSet (like oldValue).<br></p><p>I believe it is possible to implement, I’m just trying to give guidance on the sorts of things a formal proposal should address.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; -Mosab Elagha<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 12:11 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s currently possible to define either or both of the following observers on a property:<br>&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt; didSet, called immediately after the new value is stored<br>&gt; <br>&gt; ...<br>&gt; <br>&gt;&gt; This would mean the following observers could be defined on a property:<br>&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt; willChange, called just before the value is stored if the value is different to the previous value<br>&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt; didChange, called immediately after the new value is stored if the new value is different to the previous value<br>&gt; <br>&gt; I’m open to consider a change along these lines, but the proposal would have to be fleshed out more.  Presumably it would only work for equatable types, right?  Also, can a property have these observers as well as the existing ones?  Would it be possible to add *one of* didChange or willChange - since less is better?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/39a8e489/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>Chris, wouldn&#39;t that be better designed/implemented with the property delegate functionality Joe Groff is working on?<br></p><p>&gt; On 06 Dec 2015, at 07:52, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 10:42 PM, Mosab Elagha &lt;elagha2 at illinois.edu&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1. This feature would allow for a more clean approach in checking the existing state of a value. <br>&gt;&gt; <br>&gt;&gt; &gt; Also, can a property have these observers as well as the existing ones?<br>&gt;&gt; <br>&gt;&gt; I&#39;m not really familiar with the implementation of the observers, but why wouldn&#39;t it be able to? Maybe didSet can precede didChange in order of execution if both are implemented, so you can have default behavior when accessing a value but certain other behavior if it has changed. Or maybe have willChange/didChange be a property that can be accessed within willSet/didSet (like oldValue).<br>&gt; <br>&gt; I believe it is possible to implement, I’m just trying to give guidance on the sorts of things a formal proposal should address.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -Mosab Elagha<br>&gt;&gt; <br>&gt;&gt;&gt; On Sun, Dec 6, 2015 at 12:11 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s currently possible to define either or both of the following observers on a property:<br>&gt;&gt;&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt;&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This would mean the following observers could be defined on a property:<br>&gt;&gt;&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt;&gt;&gt; willChange, called just before the value is stored if the value is different to the previous value<br>&gt;&gt;&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt;&gt;&gt; didChange, called immediately after the new value is stored if the new value is different to the previous value<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m open to consider a change along these lines, but the proposal would have to be fleshed out more.  Presumably it would only work for equatable types, right?  Also, can a property have these observers as well as the existing ones?  Would it be possible to add *one of* didChange or willChange - since less is better?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/764dcf2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 08:00:00am</p></header><div class="content"><p>Yes, it that proposal is capable of expressing this, then that is how I would prefer property observers in general to work.<br></p><p>-Chris<br></p><p>&gt; On Dec 6, 2015, at 3:27 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Chris, wouldn&#39;t that be better designed/implemented with the property delegate functionality Joe Groff is working on?<br>&gt; <br>&gt;&gt; On 06 Dec 2015, at 07:52, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 10:42 PM, Mosab Elagha &lt;elagha2 at illinois.edu&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1. This feature would allow for a more clean approach in checking the existing state of a value. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Also, can a property have these observers as well as the existing ones?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not really familiar with the implementation of the observers, but why wouldn&#39;t it be able to? Maybe didSet can precede didChange in order of execution if both are implemented, so you can have default behavior when accessing a value but certain other behavior if it has changed. Or maybe have willChange/didChange be a property that can be accessed within willSet/didSet (like oldValue).<br>&gt;&gt; <br>&gt;&gt; I believe it is possible to implement, I’m just trying to give guidance on the sorts of things a formal proposal should address.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Mosab Elagha<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 12:11 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It&#39;s currently possible to define either or both of the following observers on a property:<br>&gt;&gt;&gt;&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt;&gt;&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This would mean the following observers could be defined on a property:<br>&gt;&gt;&gt;&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt;&gt;&gt;&gt; willChange, called just before the value is stored if the value is different to the previous value<br>&gt;&gt;&gt;&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt;&gt;&gt;&gt; didChange, called immediately after the new value is stored if the new value is different to the previous value<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m open to consider a change along these lines, but the proposal would have to be fleshed out more.  Presumably it would only work for equatable types, right?  Also, can a property have these observers as well as the existing ones?  Would it be possible to add *one of* didChange or willChange - since less is better?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/fbde7bda/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6bd902ea39480cfd0a34cf8bc63dfc14?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>Nathan de Vries</string> &lt;ndevries at apple.com&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 10:11 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s currently possible to define either or both of the following observers on a property:<br>&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt; didSet, called immediately after the new value is stored<br>&gt; ...<br>&gt; <br>&gt;&gt; This would mean the following observers could be defined on a property:<br>&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt; willChange, called just before the value is stored if the value is different to the previous value<br>&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt; didChange, called immediately after the new value is stored if the new value is different to the previous value<br>&gt; <br>&gt; I’m open to consider a change along these lines, but the proposal would have to be fleshed out more.  Presumably it would only work for equatable types, right?<br></p><p>I did a little hand-waving in that direction:<br></p><p>&quot;Property types conforming to Equatable would be checked for the implicit guard via ==, otherwise it would fall back on the identity operator (===) for value and reference types that don&#39;t conform to Equatable.&quot;<br></p><p>Do you see an issue with falling back on identity if a property&#39;s type doesn&#39;t conform to Equatable?<br></p><p>&gt; Also, can a property have these observers as well as the existing ones?<br></p><p>I don&#39;t see any issue with someone deciding to exhaustively add all observers to a property, but practically I&#39;d only expect a subset (one) of them to be implemented. In my case I&#39;d almost exclusively use didChange.<br></p><p>&gt; Would it be possible to add *one of* didChange or willChange - since less is better?<br></p><p>I never use willSet at the moment and can&#39;t imagine myself using willChange, so it was really only included for completeness. I&#39;d be fine with limiting the addition to didChange only, with my only concern being the inconsistency of not providing willChange.<br></p><p>—Nathan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/1721bc95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>Proposal: Allow willChange and didChange observers on a property</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>All else aside, isn’t `willChange` semantically-problematic anyways, due to it being possible to override `set` to modify the value that gets stored?<br></p><p>EG:<br></p><p>    class X {<br>      var font: UIFont {<br>         willChange {<br>           self.delegate?.fontWillChange(<br>            fromFont: oldValue,<br>            toFont: newValue<br>           )<br>         }<br>      }<br>    }<br></p><p>    class Y : X {<br>      override var font: UIFont {<br>        set {<br>           super.font = self.adjustedFontForBaseFont(newValue)<br>           // ^ e.g. to enforce monospace-digits trait<br>        }<br>      }<br>    }<br></p><p>…which isn&#39;t the nicest thing to do, but can be the easiest way to customize some of the UI widgets’ behavior.<br></p><p>&gt; On Dec 6, 2015, at 11:28 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 10:11 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; On Dec 5, 2015, at 4:00 PM, Nathan de Vries via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s currently possible to define either or both of the following observers on a property:<br>&gt;&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt; ...<br>&gt;&gt; <br>&gt;&gt;&gt; This would mean the following observers could be defined on a property:<br>&gt;&gt;&gt; willSet, called just before the value is stored<br>&gt;&gt;&gt; willChange, called just before the value is stored if the value is different to the previous value<br>&gt;&gt;&gt; didSet, called immediately after the new value is stored<br>&gt;&gt;&gt; didChange, called immediately after the new value is stored if the new value is different to the previous value<br>&gt;&gt; <br>&gt;&gt; I’m open to consider a change along these lines, but the proposal would have to be fleshed out more.  Presumably it would only work for equatable types, right?<br>&gt; <br>&gt; I did a little hand-waving in that direction:<br>&gt; <br>&gt; &quot;Property types conforming to Equatable would be checked for the implicit guard via ==, otherwise it would fall back on the identity operator (===) for value and reference types that don&#39;t conform to Equatable.&quot;<br>&gt; <br>&gt; Do you see an issue with falling back on identity if a property&#39;s type doesn&#39;t conform to Equatable?<br>&gt; <br>&gt;&gt; Also, can a property have these observers as well as the existing ones?<br>&gt; <br>&gt; I don&#39;t see any issue with someone deciding to exhaustively add all observers to a property, but practically I&#39;d only expect a subset (one) of them to be implemented. In my case I&#39;d almost exclusively use didChange.<br>&gt; <br>&gt;&gt; Would it be possible to add *one of* didChange or willChange - since less is better?<br>&gt; <br>&gt; I never use willSet at the moment and can&#39;t imagine myself using willChange, so it was really only included for completeness. I&#39;d be fine with limiting the addition to didChange only, with my only concern being the inconsistency of not providing willChange.<br>&gt; <br>&gt; —Nathan<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/9bc42a5f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
