<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted] SE-0062: Referencing Objective-C key-paths</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 14, 2016 at 03:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md<br></p><p>Hello Swift Community,<br></p><p>The review of SE-0062 &quot;Referencing Objective-C key-paths” ran from April 7...12, 2016. The proposal is accepted, with one adjustment to the handling of collections: rather than support any SequenceType as a collection, the core team wants a narrower rule for only the primary Cocoa collection types (NSArray, NSDictionary, NSSet) and their Swift-bridged equivalents (Array, Dictionary, Set), due to implementation concerns.<br></p><p>Feedback on this proposal was generally positive, and the proposal fits well with #selector (SE-0022 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;). There was some discussion during the review of extending the proposal to more strongly-typed key paths. However, the core team felt that this feature is important for Swift 3 to support the renaming of Objective-C APIs in Swift (SE-0005 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt;), and that such a significant increase in scope would jeopardize the feature for Swift 3.<br></p><p>We welcome an implementation of this proposal. I’ve filed a ticket at<br></p><p>	We welcome an implementation of this proposal. I’ve filed a ticket at<br></p><p>to track the implementation.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160414/673e5258/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0062: Referencing Objective-C key-paths</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 14, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 3:48 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md&gt;<br>&gt; <br>&gt; Hello Swift Community,<br>&gt; <br>&gt; The review of SE-0062 &quot;Referencing Objective-C key-paths” ran from April 7...12, 2016. The proposal is accepted, with one adjustment to the handling of collections: rather than support any SequenceType as a collection, the core team wants a narrower rule for only the primary Cocoa collection types (NSArray, NSDictionary, NSSet) and their Swift-bridged equivalents (Array, Dictionary, Set), due to implementation concerns.<br>&gt; <br>&gt; Feedback on this proposal was generally positive, and the proposal fits well with #selector (SE-0022 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt;). There was some discussion during the review of extending the proposal to more strongly-typed key paths. However, the core team felt that this feature is important for Swift 3 to support the renaming of Objective-C APIs in Swift (SE-0005 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt;), and that such a significant increase in scope would jeopardize the feature for Swift 3.<br>&gt; <br>&gt; We welcome an implementation of this proposal. I’ve filed a ticket at<br>&gt; <br>&gt; 	We welcome an implementation of this proposal. I’ve filed a ticket at<br></p><p>Paste fail, it’s here:<br></p><p>	https://bugs.swift.org/browse/SR-1237<br></p><p>&gt; <br>&gt; to track the implementation.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/5734e259/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
