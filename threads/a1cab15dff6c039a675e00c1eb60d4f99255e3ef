<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3030ddbc29b13ed1e80137b487022e14?s=50"></div><header><strong>[Pitch] Adding in Optional Argument labels for completion handlers</strong> from <string>Grant Kemp</string> &lt;grant at kempnet.com&gt;<p>October 16, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi all<br>A South African in London here and I have decided to make the jump to<br>trying to help Swift develop.<br></p><p>I was an android and web developer and swift converted me to iOS<br>programming which has become something that I love. I have built several<br>apps on iOS and on macOS using it and thoroughly enjoyed it.<br></p><p>One think has made me fall a little out of love with swift 3 was<br>the removal of completion handler argument labels which has created:<br>1. Less maintainable code for teams<br>2. Less readable and thus more error prone code<br>3. Slower code to write as now I have to regularly scroll to the top of the<br>method to find out what the parameters should be .<br>4. Seems to be at odds with other parts of the api which favours labels.<br></p><p>I have found quite a lot of support from others via my stack overflow<br>question here:<br>http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build<br></p><p>Here is my suggestion:<br>Currently the Swift 3 version does not allow arguments in the<br>completionhandler method, which is confusing and not very readable.<br></p><p>    func myMethod(_ completionhandler:(_ downloadedValue:String,_ isActive:<br>Bool, _ error:NSError)-&gt; Void) {<br>        //&lt;&lt;After doing some async method such as downloading from an API &gt;&gt;<br></p><p>        completionhandler(myString, true, myError)<br></p><p>    }<br>    // INSTEAD: ideally the argument labels should be added optionally to<br>be called in the completion method such as below and using a Tuple-like<br>syntax to indicate that the method should have the labels<br></p><p>    func myMethod(_ completionhandler:( downloadedValue:String, isActive:<br>Bool,  error:NSError)-&gt; Void) {<br></p><p>        //&lt;&lt;After doing some async method such as downloading from an API &gt;&gt;<br></p><p>        completionhandler(dowloadedValue:myString, isActive:true,<br>error:myError)<br></p><p>    }<br></p><p><br>Thanks for the help ( and any feedback on my idea above )<br></p><p>Thanks for the epic work you are doing !<br>-- <br>Sent from my mobile<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/a1cae3ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Adding in Optional Argument labels for completion handlers</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 16, 2016 at 11:00:00pm</p></header><div class="content"><p>Welcome to the list! It seems the community and core team are in agreement<br>about your point. As mentioned previously, the core team has laid out a<br>two-step roadmap to restoring argument labels:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160711/024331.html<br></p><p>Hope that helps!<br>On Mon, Oct 17, 2016 at 06:35 Grant Kemp via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all<br>&gt; A South African in London here and I have decided to make the jump to<br>&gt; trying to help Swift develop.<br>&gt;<br>&gt; I was an android and web developer and swift converted me to iOS<br>&gt; programming which has become something that I love. I have built several<br>&gt; apps on iOS and on macOS using it and thoroughly enjoyed it.<br>&gt;<br>&gt; One think has made me fall a little out of love with swift 3 was<br>&gt; the removal of completion handler argument labels which has created:<br>&gt; 1. Less maintainable code for teams<br>&gt; 2. Less readable and thus more error prone code<br>&gt; 3. Slower code to write as now I have to regularly scroll to the top of<br>&gt; the method to find out what the parameters should be .<br>&gt; 4. Seems to be at odds with other parts of the api which favours labels.<br>&gt;<br>&gt; I have found quite a lot of support from others via my stack overflow<br>&gt; question here:<br>&gt;<br>&gt; http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build<br>&gt;<br>&gt; Here is my suggestion:<br>&gt; Currently the Swift 3 version does not allow arguments in the<br>&gt; completionhandler method, which is confusing and not very readable.<br>&gt;<br>&gt;     func myMethod(_ completionhandler:(_ downloadedValue:String,_<br>&gt; isActive:Bool, _ error:NSError)-&gt; Void) {<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API<br>&gt; &gt;&gt;<br>&gt;<br>&gt;         completionhandler(myString, true, myError)<br>&gt;<br>&gt;     }<br>&gt;     // INSTEAD: ideally the argument labels should be added optionally to<br>&gt; be called in the completion method such as below and using a Tuple-like<br>&gt; syntax to indicate that the method should have the labels<br>&gt;<br>&gt;     func myMethod(_ completionhandler:( downloadedValue:String, isActive:<br>&gt; Bool,  error:NSError)-&gt; Void) {<br>&gt;<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API<br>&gt; &gt;&gt;<br>&gt;<br>&gt;         completionhandler(dowloadedValue:myString, isActive:true,<br>&gt; error:myError)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; Thanks for the help ( and any feedback on my idea above )<br>&gt;<br>&gt; Thanks for the epic work you are doing !<br>&gt; --<br>&gt; Sent from my mobile<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/757ea142/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Adding in Optional Argument labels for completion handlers</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>October 16, 2016 at 04:00:00pm</p></header><div class="content"><p>It seems like that link should be added to the &#39;frequently proposed changes&#39; page on the repo. I&#39;ll prepare a PR.<br></p><p>Austin<br></p><p>&gt; On Oct 16, 2016, at 4:09 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Welcome to the list! It seems the community and core team are in agreement about your point. As mentioned previously, the core team has laid out a two-step roadmap to restoring argument labels:<br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160711/024331.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160711/024331.html&gt;<br>&gt; <br>&gt; Hope that helps!<br>&gt; On Mon, Oct 17, 2016 at 06:35 Grant Kemp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi all<br>&gt; A South African in London here and I have decided to make the jump to trying to help Swift develop. <br>&gt; <br>&gt; I was an android and web developer and swift converted me to iOS programming which has become something that I love. I have built several apps on iOS and on macOS using it and thoroughly enjoyed it. <br>&gt; <br>&gt; One think has made me fall a little out of love with swift 3 was the removal of completion handler argument labels which has created:<br>&gt; 1. Less maintainable code for teams <br>&gt; 2. Less readable  and thus more error prone code <br>&gt; 3. Slower code to write as now I have to regularly scroll to the top of the method to find out what the parameters should be . <br>&gt; 4. Seems to be at odds with other parts of the api which favours labels. <br>&gt; <br>&gt; I have found quite a lot of support from others via my stack overflow question here: <br>&gt; http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build &lt;http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build&gt;<br>&gt; <br>&gt; Here is my suggestion: <br>&gt; Currently the Swift 3 version does not allow arguments in the completionhandler method, which is confusing and not very readable.<br>&gt;     func myMethod(_ completionhandler:(_ downloadedValue:String,_ isActive:Bool, _ error:NSError)-&gt; Void) {<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API &gt;&gt;<br>&gt; <br>&gt;         completionhandler(myString, true, myError)<br>&gt; <br>&gt;     }<br>&gt;     // INSTEAD: ideally the argument labels should be added optionally to be called in the completion method such as below and using a Tuple-like syntax to indicate that the method should have the labels<br>&gt; <br>&gt;     func myMethod(_ completionhandler:( downloadedValue:String, isActive:Bool,  error:NSError)-&gt; Void) {<br>&gt; <br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API &gt;&gt;<br>&gt; <br>&gt;         completionhandler(dowloadedValue:myString, isActive:true, error:myError)<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Thanks for the help ( and any feedback on my idea above ) <br>&gt; <br>&gt; Thanks for the epic work you are doing ! <br>&gt; -- <br>&gt; Sent from my mobile<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/546679bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Adding in Optional Argument labels for completion handlers</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 16, 2016 at 11:00:00pm</p></header><div class="content"><p>Honestly, given that the detailed implementation is core team-approved, I<br>wonder if it ought to be just one of those rare pre-accepted proposals<br>instead. It may not be ABI impacting, but as a bugfix for a Swift 3<br>proposal there&#39;s a good argument it should go out in 3.x. My two cents<br>anyway.<br></p><p><br>On Mon, Oct 17, 2016 at 07:16 Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>&gt; It seems like that link should be added to the &#39;frequently proposed<br>&gt; changes&#39; page on the repo. I&#39;ll prepare a PR.<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; On Oct 16, 2016, at 4:09 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Welcome to the list! It seems the community and core team are in agreement<br>&gt; about your point. As mentioned previously, the core team has laid out a<br>&gt; two-step roadmap to restoring argument labels:<br>&gt;<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160711/024331.html<br>&gt;<br>&gt; Hope that helps!<br>&gt; On Mon, Oct 17, 2016 at 06:35 Grant Kemp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all<br>&gt; A South African in London here and I have decided to make the jump to<br>&gt; trying to help Swift develop.<br>&gt;<br>&gt; I was an android and web developer and swift converted me to iOS<br>&gt; programming which has become something that I love. I have built several<br>&gt; apps on iOS and on macOS using it and thoroughly enjoyed it.<br>&gt;<br>&gt; One think has made me fall a little out of love with swift 3 was<br>&gt; the removal of completion handler argument labels which has created:<br>&gt; 1. Less maintainable code for teams<br>&gt; 2. Less readable and thus more error prone code<br>&gt; 3. Slower code to write as now I have to regularly scroll to the top of<br>&gt; the method to find out what the parameters should be .<br>&gt; 4. Seems to be at odds with other parts of the api which favours labels.<br>&gt;<br>&gt; I have found quite a lot of support from others via my stack overflow<br>&gt; question here:<br>&gt;<br>&gt; http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build<br>&gt;<br>&gt; Here is my suggestion:<br>&gt; Currently the Swift 3 version does not allow arguments in the<br>&gt; completionhandler method, which is confusing and not very readable.<br>&gt;<br>&gt;     func myMethod(_ completionhandler:(_ downloadedValue:String,_<br>&gt; isActive:Bool, _ error:NSError)-&gt; Void) {<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API<br>&gt; &gt;&gt;<br>&gt;<br>&gt;         completionhandler(myString, true, myError)<br>&gt;<br>&gt;     }<br>&gt;     // INSTEAD: ideally the argument labels should be added optionally to<br>&gt; be called in the completion method such as below and using a Tuple-like<br>&gt; syntax to indicate that the method should have the labels<br>&gt;<br>&gt;     func myMethod(_ completionhandler:( downloadedValue:String, isActive:<br>&gt; Bool,  error:NSError)-&gt; Void) {<br>&gt;<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API<br>&gt; &gt;&gt;<br>&gt;<br>&gt;         completionhandler(dowloadedValue:myString, isActive:true,<br>&gt; error:myError)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; Thanks for the help ( and any feedback on my idea above )<br>&gt;<br>&gt; Thanks for the epic work you are doing !<br>&gt; --<br>&gt; Sent from my mobile<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/2034d47b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3030ddbc29b13ed1e80137b487022e14?s=50"></div><header><strong>[Pitch] Adding in Optional Argument labels for completion handlers</strong> from <string>Grant Kemp</string> &lt;grant at kempnet.com&gt;<p>October 17, 2016 at 01:00:00am</p></header><div class="content"><p>Thanks for the lovely welcome, and for sharing your perspectives.<br></p><p>It sounds like I am not alone on this.<br>In terms of the timings, given the vast number of:<br>- 3rd party libraries<br>- Open source apps<br>- Enterprise projects<br>that leverage completion handlers, and are steadfastly stripping their<br>argument labels away and wondering why this useful feature is gone.  To<br>protect Swift&#39;s great reputation for swiftness, readibliity and clarity, I<br>would quite like to have those &quot;stripping&quot; out efforts avoided before<br>everyone has fully jumped to Swift 3.<br></p><p>I would quite like a  fix included in the 3.x branch if its in any way<br>possible ( to agree with Xiaodi Wu) otherwise I will just have to bite the<br>bullet and know that there is sunshine on the horizon in the form of Swift<br>4.<br></p><p>Cheers<br></p><p>On Mon, 17 Oct 2016 at 00:23 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Honestly, given that the detailed implementation is core team-approved, I<br>&gt; wonder if it ought to be just one of those rare pre-accepted proposals<br>&gt; instead. It may not be ABI impacting, but as a bugfix for a Swift 3<br>&gt; proposal there&#39;s a good argument it should go out in 3.x. My two cents<br>&gt; anyway.<br>&gt;<br>&gt;<br>&gt; On Mon, Oct 17, 2016 at 07:16 Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;<br>&gt; It seems like that link should be added to the &#39;frequently proposed<br>&gt; changes&#39; page on the repo. I&#39;ll prepare a PR.<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; On Oct 16, 2016, at 4:09 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Welcome to the list! It seems the community and core team are in agreement<br>&gt; about your point. As mentioned previously, the core team has laid out a<br>&gt; two-step roadmap to restoring argument labels:<br>&gt;<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160711/024331.html<br>&gt;<br>&gt; Hope that helps!<br>&gt; On Mon, Oct 17, 2016 at 06:35 Grant Kemp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all<br>&gt; A South African in London here and I have decided to make the jump to<br>&gt; trying to help Swift develop.<br>&gt;<br>&gt; I was an android and web developer and swift converted me to iOS<br>&gt; programming which has become something that I love. I have built several<br>&gt; apps on iOS and on macOS using it and thoroughly enjoyed it.<br>&gt;<br>&gt; One think has made me fall a little out of love with swift 3 was<br>&gt; the removal of completion handler argument labels which has created:<br>&gt; 1. Less maintainable code for teams<br>&gt; 2. Less readable and thus more error prone code<br>&gt; 3. Slower code to write as now I have to regularly scroll to the top of<br>&gt; the method to find out what the parameters should be .<br>&gt; 4. Seems to be at odds with other parts of the api which favours labels.<br>&gt;<br>&gt; I have found quite a lot of support from others via my stack overflow<br>&gt; question here:<br>&gt;<br>&gt; http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build<br>&gt;<br>&gt; Here is my suggestion:<br>&gt; Currently the Swift 3 version does not allow arguments in the<br>&gt; completionhandler method, which is confusing and not very readable.<br>&gt;<br>&gt;     func myMethod(_ completionhandler:(_ downloadedValue:String,_<br>&gt; isActive:Bool, _ error:NSError)-&gt; Void) {<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API<br>&gt; &gt;&gt;<br>&gt;<br>&gt;         completionhandler(myString, true, myError)<br>&gt;<br>&gt;     }<br>&gt;     // INSTEAD: ideally the argument labels should be added optionally to<br>&gt; be called in the completion method such as below and using a Tuple-like<br>&gt; syntax to indicate that the method should have the labels<br>&gt;<br>&gt;     func myMethod(_ completionhandler:( downloadedValue:String, isActive:<br>&gt; Bool,  error:NSError)-&gt; Void) {<br>&gt;<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API<br>&gt; &gt;&gt;<br>&gt;<br>&gt;         completionhandler(dowloadedValue:myString, isActive:true,<br>&gt; error:myError)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; Thanks for the help ( and any feedback on my idea above )<br>&gt;<br>&gt; Thanks for the epic work you are doing !<br>&gt; --<br>&gt; Sent from my mobile<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; --<br>Sent from my mobile<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/1c257d57/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Pitch] Adding in Optional Argument labels for completion handlers</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 16, 2016 at 04:00:00pm</p></header><div class="content"><p>This is an unfortunate side effect of another important and necessary change: Making argument labels part of functions name. This means that closures (which are anonymous functions and lack a function name) now don’t have any place to keep the argument labels. <br></p><p>Using a labeled tuple as a single argument block could act as a workaround for now, but:<br></p><p>I think we really need to find the correct way to add back argument labels for closures. I strongly suspect such a change will be ABI breaking.<br></p><p>People (including myself) are getting some experience with actual implications and feel of lack of argument labels for anonymous functions. As far as I can tell, nobody likes this and it feels so very un-Swifty and a big step backwards.<br></p><p>Lets find a way to add back argument labels to closures for Swift 4.<br></p><p>&gt; On Oct 16, 2016, at 3:33 PM, Grant Kemp via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all<br>&gt; A South African in London here and I have decided to make the jump to trying to help Swift develop. <br>&gt; <br>&gt; I was an android and web developer and swift converted me to iOS programming which has become something that I love. I have built several apps on iOS and on macOS using it and thoroughly enjoyed it. <br>&gt; <br>&gt; One think has made me fall a little out of love with swift 3 was the removal of completion handler argument labels which has created:<br>&gt; 1. Less maintainable code for teams <br>&gt; 2. Less readable  and thus more error prone code <br>&gt; 3. Slower code to write as now I have to regularly scroll to the top of the method to find out what the parameters should be . <br>&gt; 4. Seems to be at odds with other parts of the api which favours labels. <br>&gt; <br>&gt; I have found quite a lot of support from others via my stack overflow question here: <br>&gt; http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build &lt;http://stackoverflow.com/questions/39613272/xcode-8-function-types-cannot-have-argument-label-breaking-my-build&gt;<br>&gt; <br>&gt; Here is my suggestion: <br>&gt; Currently the Swift 3 version does not allow arguments in the completionhandler method, which is confusing and not very readable.<br>&gt;     func myMethod(_ completionhandler:(_ downloadedValue:String,_ isActive:Bool, _ error:NSError)-&gt; Void) {<br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API &gt;&gt;<br>&gt; <br>&gt;         completionhandler(myString, true, myError)<br>&gt; <br>&gt;     }<br>&gt;     // INSTEAD: ideally the argument labels should be added optionally to be called in the completion method such as below and using a Tuple-like syntax to indicate that the method should have the labels<br>&gt; <br>&gt;     func myMethod(_ completionhandler:( downloadedValue:String, isActive:Bool,  error:NSError)-&gt; Void) {<br>&gt; <br>&gt;         //&lt;&lt;After doing some async method such as downloading from an API &gt;&gt;<br>&gt; <br>&gt;         completionhandler(dowloadedValue:myString, isActive:true, error:myError)<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Thanks for the help ( and any feedback on my idea above ) <br>&gt; <br>&gt; Thanks for the epic work you are doing ! <br>&gt; -- <br>&gt; Sent from my mobile<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/3f1aa136/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
