<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>exit</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January 14, 2016 at 10:00:00am</p></header><div class="content"><p>on Darwin, we can say:<br></p><p>import Foundation<br>exit(2)<br></p><p>I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br></p><p>I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br></p><p>I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br></p><p>Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160114/c42dcf5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>exit</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 14, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Drew,<br></p><p>I assume this works on Linux if you import Glibc as well?<br></p><p>- Tony<br></p><p>&gt; On Jan 14, 2016, at 8:44 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; on Darwin, we can say:<br>&gt; <br>&gt; import Foundation<br>&gt; exit(2)<br>&gt; <br>&gt; I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br>&gt; <br>&gt; I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br>&gt; <br>&gt; I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br>&gt; <br>&gt; Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160114/0d83a354/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>exit</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January 14, 2016 at 11:00:00am</p></header><div class="content"><p>It does, but on Darwin, importing Foundation alone is sufficient.<br></p><p><br>&gt; On Jan 14, 2016, at 11:03 AM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Drew,<br>&gt; <br>&gt; I assume this works on Linux if you import Glibc as well?<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jan 14, 2016, at 8:44 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Darwin, we can say:<br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; exit(2)<br>&gt;&gt; <br>&gt;&gt; I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br>&gt;&gt; <br>&gt;&gt; I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br>&gt;&gt; <br>&gt;&gt; I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br>&gt;&gt; <br>&gt;&gt; Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160114/1a0295ed/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>exit</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January 14, 2016 at 09:00:00am</p></header><div class="content"><p>The reason is that Foundation on darwin re-exports modules below it (by the virtue of objective-c headers) and the linux version is not re-exporting Glibc.<br></p><p>&gt; On Jan 14, 2016, at 8:44 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; on Darwin, we can say:<br>&gt; <br>&gt; import Foundation<br>&gt; exit(2)<br>&gt; <br>&gt; I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br>&gt; <br>&gt; I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br>&gt; <br>&gt; I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br>&gt; <br>&gt; Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160114/f59388ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>exit</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 14, 2016 at 09:00:00am</p></header><div class="content"><p>Do we control this via the module map or some other mechanism?<br></p><p>I could see re-exporting Glibc on Linux as a reasonable solution for now.<br></p><p>- Tony<br></p><p>&gt; On Jan 14, 2016, at 9:04 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; The reason is that Foundation on darwin re-exports modules below it (by the virtue of objective-c headers) and the linux version is not re-exporting Glibc.<br>&gt; <br>&gt;&gt; On Jan 14, 2016, at 8:44 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Darwin, we can say:<br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; exit(2)<br>&gt;&gt; <br>&gt;&gt; I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br>&gt;&gt; <br>&gt;&gt; I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br>&gt;&gt; <br>&gt;&gt; I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br>&gt;&gt; <br>&gt;&gt; Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160114/6330d9e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>exit</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 14, 2016, at 9:04 AM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Do we control this via the module map or some other mechanism?<br>&gt; <br>&gt; I could see re-exporting Glibc on Linux as a reasonable solution for now.<br></p><p>This seems like the best short-term solution to me.<br></p><p>It would be ideal (IMO) to define a common “POSIX” (or something like that) module which would have shared unix level interfaces that would portable to all platforms.  Then corelibs-foundation could re-export THAT module, providing a common set of APIs on all platforms.  A POSIX module would also eliminate the annoying #import glibc/darwin #ifdef dance in many cases.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jan 14, 2016, at 9:04 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The reason is that Foundation on darwin re-exports modules below it (by the virtue of objective-c headers) and the linux version is not re-exporting Glibc.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 14, 2016, at 8:44 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Darwin, we can say:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; exit(2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160117/911ace7b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>exit</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January 17, 2016 at 10:00:00am</p></header><div class="content"><p>So we should be using `@exported import Glibc` on linux and `@exported import Darwin` on darwin then? Does this need to be for every import of Glibc? or just one somewhere in the swift files?<br></p><p>&gt; On Jan 17, 2016, at 10:11 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 14, 2016, at 9:04 AM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Do we control this via the module map or some other mechanism?<br>&gt;&gt; <br>&gt;&gt; I could see re-exporting Glibc on Linux as a reasonable solution for now.<br>&gt; <br>&gt; This seems like the best short-term solution to me.<br>&gt; <br>&gt; It would be ideal (IMO) to define a common “POSIX” (or something like that) module which would have shared unix level interfaces that would portable to all platforms.  Then corelibs-foundation could re-export THAT module, providing a common set of APIs on all platforms.  A POSIX module would also eliminate the annoying #import glibc/darwin #ifdef dance in many cases.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 14, 2016, at 9:04 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The reason is that Foundation on darwin re-exports modules below it (by the virtue of objective-c headers) and the linux version is not re-exporting Glibc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 14, 2016, at 8:44 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Darwin, we can say:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt;&gt; exit(2)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not totally sure how this works, since exit is provided by Darwin, not by Foundation.  But somehow importing Foundation imports Darwin as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think for source compatibility, we should support this, because people &lt;http://stackoverflow.com/questions/34186994/swift-2-2-on-linux-use-of-unresolved-identifier-exit&gt; are asking &lt;http://stackoverflow.com/questions/24102157/seeking-an-exit-equivalent-in-swift&gt; why it doesn&#39;t work out of the box.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I considered PRing an exit implementation in corelibs-foundation, but I think that might cause the opposite problem–introduce a conflict between Darwin/Glibc exit and Foundation &quot;exit&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can someone speak to how this is solved in Darwin Foundation and what we should do about it?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160117/3143f8bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>exit</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 17, 2016, at 10:14 AM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; So we should be using `@exported import Glibc` on linux and `@exported import Darwin` on darwin then?<br></p><p>Yep.<br></p><p>&gt; Does this need to be for every import of Glibc? or just one somewhere in the swift files?<br></p><p>Just do this in the same places it is happening for Darwin.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>exit</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January 17, 2016 at 01:00:00pm</p></header><div class="content"><p>So I tried it out and it looks to be spot on exactly what we want. But the grammar is `@_exported` is this kosher for Foundation to use?<br></p><p>&gt; On Jan 17, 2016, at 10:40 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 17, 2016, at 10:14 AM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So we should be using `@exported import Glibc` on linux and `@exported import Darwin` on darwin then?<br>&gt; <br>&gt; Yep.<br>&gt; <br>&gt;&gt; Does this need to be for every import of Glibc? or just one somewhere in the swift files?<br>&gt; <br>&gt; Just do this in the same places it is happening for Darwin.<br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>exit</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 17, 2016 at 02:00:00pm</p></header><div class="content"><p>On Jan 17, 2016, at 1:29 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; So I tried it out and it looks to be spot on exactly what we want. But the grammar is `@_exported` is this kosher for Foundation to use?<br></p><p>It isn’t ideal, since it is effectively a compiler-private implementation API.  However, you have no other option (and are already doing it for Darwin) so I think it is the best path.  <br></p><p>-Chris<br></p><p>&gt; <br>&gt;&gt; On Jan 17, 2016, at 10:40 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 17, 2016, at 10:14 AM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So we should be using `@exported import Glibc` on linux and `@exported import Darwin` on darwin then?<br>&gt;&gt; <br>&gt;&gt; Yep.<br>&gt;&gt; <br>&gt;&gt;&gt; Does this need to be for every import of Glibc? or just one somewhere in the swift files?<br>&gt;&gt; <br>&gt;&gt; Just do this in the same places it is happening for Darwin.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
