<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 24, 2016 at 11:00:00am</p></header><div class="content"><p>on Sat Jan 23 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 23, 2016, at 11:51 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jan 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Jan 22, 2016, at 4:24 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri Jan 22 2016, Erica Sadun<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________ swift-evolution mailing list swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Current:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt;&gt;&gt;&gt;&gt; * Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Proposed:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; * Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side<br>&gt;&gt;&gt;&gt;&gt;   effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt;&gt;&gt;&gt;&gt; * Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This<br>&gt;&gt;&gt;&gt;&gt;   admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and<br>&gt;&gt;&gt;&gt;&gt;    int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I suggest that mutating methods are just a procedural method (side effect, no return value) vs functional.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Erica,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When you propose a change, could you please explain why you think your<br>&gt;&gt;&gt;&gt; change is an improvement?  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe the current distinction is misguided in focusing on mutating and non-mutating implementations when the<br>&gt;&gt;&gt; differentiation can be viewed from a more general level. There are two ways to distinguish these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Does this method or function have side effects (which is what the current API approach intends to address); and<br>&gt;&gt;&gt; * Is this method or function inherently functional or procedural in<br>&gt;&gt;&gt; nature, returning a value or not.<br>&gt;&gt; <br>&gt;&gt; Okay, I understand what you&#39;re driving at, but these don&#39;t seem to be<br>&gt;&gt; separate distinctions.  Can you show me a method that&#39;s inherently<br>&gt;&gt; functional but has side effects, or inherently procedural but has none?<br>&gt;<br>&gt; func loginWithCredential(credential: SomeCredentialType) -&gt; SuccessTokenType? {...}<br>&gt; func printThisValueNicelyFormatted&lt;T&gt;(something: T) {...}<br></p><p>Which one of these would you say is &quot;inherently functional?&quot;  They both<br>just look like methods with side-effects that would demand a verb phrase<br>according to your first criterion about side-effects.  Why introduce the<br>&quot;functional/procedural&quot; distinction?<br></p><p>&gt;&gt;&gt; For example, contrast sort() and sortInPlace().  Even with the current<br>&gt;&gt;&gt; approach they lack a natural clarity. You could easily swap<br>&gt;&gt;&gt; them without anything &quot;breaking&quot; in understanding because your<br>&gt;&gt;&gt; solution is conventional, not based on any underlying principle.<br>&gt;&gt; <br>&gt;&gt; There&#39;s certainly an underlying principle there: that methods that<br>&gt;&gt; mutate the receiver, and have a nonmutating counterpart that instead<br>&gt;&gt; returns a modified *copy* of the receiver, are named with &quot;InPlace&quot;<br>&gt;&gt; suffix.  It&#39;s not as general as what you&#39;re suggesting, but it&#39;s<br>&gt;&gt; something.<br>&gt;&gt; <br>&gt;&gt; How could one could ever call a nonmutating method that returns a new<br>&gt;&gt; collection &quot;sortInPlace,&quot; without causing confusion?  How would people<br>&gt;&gt; interpret &quot;InPlace&quot; as conveying meaningful information?<br>&gt;<br>&gt; I could imagine two algorithms, one that limits excess memory by<br>&gt; sorting in place, and another that uses sort-and-copy-back, so the<br>&gt; sort is not done in place. <br></p><p>Yeah, but we don&#39;t name things according to their implementation<br>details, we name them according to their semantics.<br></p><p>&gt; My point is not that this is ideal naming but that I was addressing<br>&gt; the example that was part of the original.<br></p><p>Sorry, I don&#39;t understand what you mean here.  If I&#39;m just being too<br>dense to deal with, please feel free to declare my understanding of this<br>sentence inessential. :-)<br></p><p>&gt;&gt; With noun/verb naming, the function name reflects the<br>&gt;&gt; functional/procedural underlying differentiation. <br>&gt;&gt;<br>&gt;&gt;&gt; * A function produces something: f(x) -&gt; y. <br>&gt;&gt;&gt; * A procedure does something: g(x) -&gt; Void<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Under my proposed change, the procedural variation would be sort,<br>&gt;&gt;&gt; sortInPlace, etc. Optional adverbs and near-adverbs<br>&gt;&gt;&gt; could distinguish similar versions sortQuickly, sortBalanced, etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The functional would be sortedVersion or with a slight rule tweak that<br>&gt;&gt;&gt; infers the subject of the action, sorted. <br>&gt;&gt; <br>&gt;&gt; Two issues with &quot;sortedVersion&quot;:<br>&gt;&gt; <br>&gt;&gt; 1. &quot;Version&quot; is needless for readability.  &quot;Return the list of names,<br>&gt;&gt;   sorted.&quot;<br>&gt;<br>&gt; I included this to force it to be a noun because I was trying to keep with the<br>&gt; examples used in the original. <br></p><p>Which original and which examples?  I&#39;m sure these questions are<br>frustrating, but I am trying and I truly don&#39;t get it...<br></p><p>Sorry,<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
