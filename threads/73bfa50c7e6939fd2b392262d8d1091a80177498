<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Range subscript is ambiguous</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>May 15, 2016 at 08:00:00am</p></header><div class="content"><p>This function seems simple enough:<br></p><p><br>    func foo(a: [Int], n: Int) {<br>        var x : [Int] = a[0..&lt;n]<br>    }<br></p><p>But it doesn’t compile.<br></p><p>    error: ambiguous subscript with base type &#39;[Int]&#39; and index type &#39;Range&lt;Int&gt;&#39;<br>    var x : [Int] = a[0..&lt;n]<br>        ~^~~~~~~<br>        Swift.Array:100:12: note: found this candidate<br>    public subscript (subRange: Range&lt;Int&gt;) -&gt; ArraySlice&lt;Element&gt; { get set }<br>    ^<br>    Swift.MutableCollectionType:3:12: note: found this candidate<br>    public subscript (bounds: Range&lt;Self.Index&gt;) -&gt; MutableSlice&lt;Self&gt; { get set }<br>    ^<br>    Swift.CollectionType:2:12: note: found this candidate<br>    public subscript (bounds: Range&lt;Self.Index&gt;) -&gt; Slice&lt;Self&gt; { get }<br>    ^<br></p><p>The oddity is that if I change the assignment to this<br></p><p>    var y : [Int] = Array(a[0..&lt;n])<br></p><p>then the compiler is happy.<br></p><p>Shouldn’t it be able to do any necessary type inference from the fact that the expression is in a context where an array is required?<br></p><p>	Neil Faiman<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Range subscript is ambiguous</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 16, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 15, 2016, at 5:31 AM, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This function seems simple enough:<br>&gt; <br>&gt; <br>&gt;    func foo(a: [Int], n: Int) {<br>&gt;        var x : [Int] = a[0..&lt;n]<br>&gt;    }<br>&gt; <br>&gt; But it doesn’t compile.<br>&gt; <br>&gt;    error: ambiguous subscript with base type &#39;[Int]&#39; and index type &#39;Range&lt;Int&gt;&#39;<br>&gt;    var x : [Int] = a[0..&lt;n]<br>&gt;        ~^~~~~~~<br>&gt;        Swift.Array:100:12: note: found this candidate<br>&gt;    public subscript (subRange: Range&lt;Int&gt;) -&gt; ArraySlice&lt;Element&gt; { get set }<br>&gt;    ^<br>&gt;    Swift.MutableCollectionType:3:12: note: found this candidate<br>&gt;    public subscript (bounds: Range&lt;Self.Index&gt;) -&gt; MutableSlice&lt;Self&gt; { get set }<br>&gt;    ^<br>&gt;    Swift.CollectionType:2:12: note: found this candidate<br>&gt;    public subscript (bounds: Range&lt;Self.Index&gt;) -&gt; Slice&lt;Self&gt; { get }<br>&gt;    ^<br>&gt; <br>&gt; The oddity is that if I change the assignment to this<br>&gt; <br>&gt;    var y : [Int] = Array(a[0..&lt;n])<br>&gt; <br>&gt; then the compiler is happy.<br>&gt; <br>&gt; Shouldn’t it be able to do any necessary type inference from the fact that the expression is in a context where an array is required?<br></p><p>The error message is misleading (if you have time, we&#39;d appreciate a bug report!). What&#39;s really going on is that a[0..&lt;n] produces an ArraySlice&lt;T&gt;, not an Array&lt;T&gt;, in order to share memory with the underlying array. The type doesn&#39;t match in your assignment. If `x` is just temporary, I&#39;d recommend leaving the type annotation out, since `var x = a[0..&lt;n]` should just work.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Range subscript is ambiguous</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 16, 2016 at 09:00:00pm</p></header><div class="content"><p>On May 16, 2016, at 10:09 AM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The oddity is that if I change the assignment to this<br>&gt;&gt; <br>&gt;&gt;   var y : [Int] = Array(a[0..&lt;n])<br>&gt;&gt; <br>&gt;&gt; then the compiler is happy.<br>&gt;&gt; <br>&gt;&gt; Shouldn’t it be able to do any necessary type inference from the fact that the expression is in a context where an array is required?<br>&gt; <br>&gt; The error message is misleading (if you have time, we&#39;d appreciate a bug report!). What&#39;s really going on is that a[0..&lt;n] produces an ArraySlice&lt;T&gt;, not an Array&lt;T&gt;, in order to share memory with the underlying array. The type doesn&#39;t match in your assignment. If `x` is just temporary, I&#39;d recommend leaving the type annotation out, since `var x = a[0..&lt;n]` should just work.<br></p><p>FWIW, master produces the error:<br></p><p>test.swift:2:27: error: cannot subscript a value of type &#39;[Int]&#39; with an index of type &#39;CountableRange&lt;Int&gt;&#39;<br>         var x : [Int] = a[0..&lt;n]<br>                          ^<br>test.swift:2:27: note: overloads for &#39;subscript&#39; exist with these partially matching parameter lists: (Int), (Range&lt;Int&gt;), (Range&lt;Self.Index&gt;), (ClosedRange&lt;Self.Index&gt;), (CountableClosedRange&lt;Self.Index&gt;)<br>         var x : [Int] = a[0..&lt;n]<br>                          ^<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
