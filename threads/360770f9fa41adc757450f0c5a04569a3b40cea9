<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>named parameters - why hidden first?/proposal interest</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 21, 2016 at 12:00:00pm</p></header><div class="content"><p>on Thu Jan 21 2016, Tony Parker via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br></p><p>&gt; We surveyed the entire surface area of the iOS and OS X SDKs, looking<br>&gt; to see how many arguments typical methods had. We found that the vast<br>&gt; majority of methods actually have just one argument. If we went with a<br>&gt; rule that first arguments should be named, then methods like:<br>&gt;<br>&gt; sayMessage(“hello”)<br>&gt;<br>&gt; would be this instead:<br>&gt;<br>&gt; say(message: “hello”)<br>&gt;<br>&gt; which isn’t really much of an improvement, in my mind.<br></p><p>No, but<br></p><p>    say(&quot;hello&quot;)<br></p><p>is a big improvement, which IMO perfectly illustrates why we want the<br>default as it is.<br></p><p>That said, as the API Guidelines review is to start imminently, I&#39;d like<br>to ask people to hold off discussing this topic further until we start<br>the review, so we can gather all the related commentary in one place.<br></p><p>Thanks!<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>named parameters - why hidden first?/proposal interest</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>January 21, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; say(&quot;hello&quot;)<br>&gt;<br>&gt; is a big improvement, which IMO perfectly illustrates why we want the<br>&gt; default as it is.<br></p><p>Maybe so, but there just has to be some way to do this that doesn&#39;t bake<br>the design into the entirety of the Swift language. Is there some way Apple<br>could implement this that only affects Swift imports/exports with Obj-C?<br>Maybe there&#39;s not, but if there is, that seems like a better option.<br></p><p>If Obj-C had never existed, would any sane person ever have suggested that<br>Swift treat the first parameter differently than the rest? It kinda makes<br>sense with Obj-C syntax, but it stands out like a sore thumb in Swift.<br></p><p>I think little quirks like this are seriously damaging to the language.<br>Because of the massive scope of Swift, &quot;death by a thousand paper cuts&quot; is<br>a real thing.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/68227227/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>named parameters - why hidden first?/proposal interest</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 12:33 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; say(&quot;hello&quot;)<br>&gt; &gt; <br>&gt; &gt; is a big improvement, which IMO perfectly illustrates why we want the<br>&gt; &gt; default as it is.<br>&gt; <br>&gt; Maybe so, but there just has to be some way to do this that doesn&#39;t bake the design into the entirety of the Swift language. Is there some way Apple could implement this that only affects Swift imports/exports with Obj-C?<br></p><p>You’re repeating your assumption here that the current design was reached by necessity for ObjC importing.  That is not the case.  As has been said multiple times in this very thread, we looked at a lot of existing APIs — and of course those APIs included ObjC APIs, but not exclusively by any stretch — and decided that, far more often than not, the first argument of a function/method is a “direct object” whose relationship to the operation is obvious and does not benefit from labelling.  We strongly considered adopting the rule that all arguments should be labelled by default, and we decided that, on balance, it led to a lot of really useless labels.  It’s a very simple and understandable language rule, but it leads to worse results when you actually apply to it to real code.  There are, of course, exceptions, but there would have been in any case.<br></p><p>But like Dave said, we’re about to have a major conversation about this, and you are welcome to participate.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>named parameters - why hidden first?/proposal interest</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 21, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 1:58 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 12:33 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; say(&quot;hello&quot;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is a big improvement, which IMO perfectly illustrates why we want the<br>&gt;&gt;&gt; default as it is.<br>&gt;&gt; <br>&gt;&gt; Maybe so, but there just has to be some way to do this that doesn&#39;t bake the design into the entirety of the Swift language. Is there some way Apple could implement this that only affects Swift imports/exports with Obj-C?<br>&gt; <br>&gt; You’re repeating your assumption here that the current design was reached by necessity for ObjC importing.  That is not the case.  As has been said multiple times in this very thread, we looked at a lot of existing APIs — and of course those APIs included ObjC APIs, but not exclusively by any stretch — and decided that, far more often than not, the first argument of a function/method is a “direct object” whose relationship to the operation is obvious and does not benefit from labelling.  We strongly considered adopting the rule that all arguments should be labelled by default, and we decided that, on balance, it led to a lot of really useless labels.  It’s a very simple and understandable language rule, but it leads to worse results when you actually apply to it to real code.  There are, of course, exceptions, but there would have been in any case.<br>&gt; <br>&gt; But like Dave said, we’re about to have a major conversation about this, and you are welcome to participate.<br></p><p>One thing to consider is, if you follow either Cocoa&#39;s contemporary naming conventions or the proposed Swift 3 naming conventions, then the labels you end up with for secondary arguments frequently aren&#39;t good binding names, so the conventions steer you toward providing an explicit binding name:<br></p><p>// Classic Cocoa style<br>func doStuff(stuff: Stuff, involvingThing thing: Thing) { ... }<br>// Swift 3 style<br>func do(stuff: Stuff, involving thing: Thing) { ... }<br></p><p>We could make the language rules more consistent, while still encouraging people to follow the naming guidelines, by *requiring* every argument after the first to specify both an argument label (or explicit &#39;_&#39;) and binding name. That makes the naive &#39;min(x: Int, y: Int)&#39; case an error we can provide an easy fixit for.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/786d04ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>named parameters - why hidden first?/proposal interest</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>January 21, 2016 at 05:00:00pm</p></header><div class="content"><p>Excuse me if this has been mentioned already. I just subscribed to this list and don’t know anything about how to use it.<br></p><p>It seems to me that there is a third choice for parameter names, which has yet to be explored. The way protocols are implemented now can educate us about it:<br></p><p>protocol Protocol {<br>   // This argument label does nothing, <br>   // but is required for compilation.<br>   func function(int: Int)<br>}<br></p><p>// This compiles.<br>struct Struct: Protocol {<br>   func function(not_int_atAll: Int) {}<br>}<br></p><p>Because internal parameter names in protocol names do nothing, they should not be required:<br>protocol Protocol {<br>   func function(Int)<br>}<br></p><p>This inspires the following syntax:<br>struct Struct: Protocol {<br>   func function(Int) {<br>      // The parameter is called $0 here<br>   }<br>}<br></p><p>This kind of thing is sorely needed for operators, which use the standards “lhs” and “rhs” despite no hands being involved.<br></p><p>struct Struct: Protocol {<br>   // Should also be valid;<br>   // but we should explicitly have to <br>   // opt out of external naming.<br>   func function(_ int: Int) {}<br>}<br>struct Struct: Protocol {<br>   // Should not be valid;<br>   // int is now the external parameter name<br>   func function(int: Int) {}<br>}<br>struct Struct: Protocol {<br>   // Should not be valid.<br>   func function(preposition int: Int) {}<br>} <br></p><p><br>&gt; On Jan 21, 2016, at 5:04 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 21, 2016, at 1:58 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 12:33 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; say(&quot;hello&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is a big improvement, which IMO perfectly illustrates why we want the<br>&gt;&gt;&gt;&gt; default as it is.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe so, but there just has to be some way to do this that doesn&#39;t bake the design into the entirety of the Swift language. Is there some way Apple could implement this that only affects Swift imports/exports with Obj-C?<br>&gt;&gt; <br>&gt;&gt; You’re repeating your assumption here that the current design was reached by necessity for ObjC importing.  That is not the case.  As has been said multiple times in this very thread, we looked at a lot of existing APIs — and of course those APIs included ObjC APIs, but not exclusively by any stretch — and decided that, far more often than not, the first argument of a function/method is a “direct object” whose relationship to the operation is obvious and does not benefit from labelling.  We strongly considered adopting the rule that all arguments should be labelled by default, and we decided that, on balance, it led to a lot of really useless labels.  It’s a very simple and understandable language rule, but it leads to worse results when you actually apply to it to real code.  There are, of course, exceptions, but there would have been in any case.<br>&gt;&gt; <br>&gt;&gt; But like Dave said, we’re about to have a major conversation about this, and you are welcome to participate.<br>&gt; <br>&gt; One thing to consider is, if you follow either Cocoa&#39;s contemporary naming conventions or the proposed Swift 3 naming conventions, then the labels you end up with for secondary arguments frequently aren&#39;t good binding names, so the conventions steer you toward providing an explicit binding name:<br>&gt; <br>&gt; // Classic Cocoa style<br>&gt; func doStuff(stuff: Stuff, involvingThing thing: Thing) { ... }<br>&gt; // Swift 3 style<br>&gt; func do(stuff: Stuff, involving thing: Thing) { ... }<br>&gt; <br>&gt; We could make the language rules more consistent, while still encouraging people to follow the naming guidelines, by *requiring* every argument after the first to specify both an argument label (or explicit &#39;_&#39;) and binding name. That makes the naive &#39;min(x: Int, y: Int)&#39; case an error we can provide an easy fixit for.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160121/e8024691/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>named parameters - why hidden first?/proposal interest</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>January 21, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 2:49 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; Excuse me if this has been mentioned already. I just subscribed to this list and don’t know anything about how to use it.<br></p><p>We’re going to be discussing this all again very soon; let’s just wait for that thread.<br></p><p>John.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
