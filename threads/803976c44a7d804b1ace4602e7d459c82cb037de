<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>Extend int arrays to be hashable?</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>September  6, 2016 at 09:00:00am</p></header><div class="content"><p>Hello,<br></p><p>I am struggling to convince Swift 3 (from Xcode 8 beta 6) to let me use an array of Int as dictionary keys.<br></p><p>It doesn’t work out of the box, because an array is not hashable:<br></p><p>var answers: [[Int]:Bool] = [:] // error: Type [Int] does not conform to Protocol Hashable<br></p><p>One way to work around that would be to use a string representation of the Int array but this is inefficient, and besides, String implements hashValue in a similar way (I suppose) that I can do for an Int Array.<br></p><p>I can extend Array to include a hash function:<br></p><p>extension Array where Element: Int {<br>    <br>    var hashValue: Int {<br>        return self.reduce(5381) {<br>            ($0 &lt;&lt; 5) &amp;+ $0 &amp;+ $1<br>        }<br>    }<br>}<br></p><p>However, Swift naturally still complains: <br></p><p>var answers: [[Int]:Bool] = [:] // error: Type [Int] does not conform to Protocol Hashable<br></p><p>My problem is that I cannot add conformance to Hashable. The following attempt fails:<br></p><p>extension Array where Element: Int { // error: extension of type ‘Array’ with constraints cannot have an inheritance clause<br>    <br>    var hashValue: Int {<br>        return self.reduce(5381) {<br>            ($0 &lt;&lt; 5) &amp;+ $0 &amp;+ $1<br>        }<br>    }<br>}<br></p><p>Is there a solution?<br></p><p>I also tried with no success to define a new confirming type as a subtype of Array&lt;Int&gt;:<br></p><p>struct HashableIntArray: Array&lt;Int&gt;, Hashable { // error: inheritance from non-protocol type Array&lt;Int&gt;<br>	// ...<br>}<br></p><p><br>I suppose I could make my HashableIntArray “have-a” Array&lt;Int&gt;, but then I would have to reimplement all the Array API with boilerplate code, which is really inelegant at best.<br></p><p>What did I miss?<br></p><p>Jean-Denis<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160906/803937de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Extend int arrays to be hashable?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>September  6, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Sep 6, 2016, at 12:38 AM, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I suppose I could make my HashableIntArray “have-a” Array&lt;Int&gt;, but then I would have to reimplement all the Array API with boilerplate code, which is really inelegant at best.<br>&gt; <br>&gt; What did I miss?<br></p><p>Nothing. In the current version of Swift, the best solution is to write a wrapper HashableArray type. One thing which might help is that you don&#39;t really have to support the full interface of Array; it&#39;s enough to say:<br></p><p>	struct HashableArray&lt;Element: Hashable&gt;: Hashable {<br>		var elements: [Element]<br>		init(_ elements: [Element]) {<br>			self.elements = elements<br>		}<br>		<br>		var hashValue: Int { … }<br>		static func == (lhs: HashableArray, rhs: HashableArray) -&gt; Bool { … }<br>	}<br></p><p>And then use the array operations on the `elements` property.<br></p><p>In the future, we hope to support conditional conformances, so you could say:<br></p><p>	extension Array: Hashable where Element: Hashable {<br>	    var hashValue: Int {<br>	        return self.reduce(5381) {<br>	            ($0 &lt;&lt; 5) &amp;+ $0 &amp;+ $1.hashValue<br>	        }<br>	    }<br>	}<br></p><p>But that happy day has not yet arrived.<br></p><p>(When that day *does* come, I wouldn&#39;t be surprised if the Hashable conformance is in the standard library and you don&#39;t even need to implement it yourself.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
