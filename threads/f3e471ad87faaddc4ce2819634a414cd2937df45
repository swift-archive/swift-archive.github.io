<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>Hello everyone,<br></p><p>For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br></p><p>#if swift(&quot;2.2&quot;)<br>  print(&quot;Hello&quot;)<br>#else<br>  this code will not parse or emit diagnostics<br>#endif<br></p><p>The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br></p><p>It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br></p><p>Best,<br>David<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>Sounds like it could be super useful for libraries!<br></p><p>How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone,<br>&gt; <br>&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt; <br>&gt; #if swift(&quot;2.2&quot;)<br>&gt;  print(&quot;Hello&quot;)<br>&gt; #else<br>&gt;  this code will not parse or emit diagnostics<br>&gt; #endif<br>&gt; <br>&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt; <br>&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt; <br>&gt; Best,<br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sounds like it could be super useful for libraries!<br>&gt; <br>&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br></p><p>I agree with Radek.<br></p><p>The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br></p><p>However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br></p><p>David know this already, but I’m a huge fan of this feature. :-)<br></p><p>-Chris<br></p><p>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello everyone,<br>&gt;&gt; <br>&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt; <br>&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt; #else<br>&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt; <br>&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; David<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt; <br>&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt; <br>&gt; I agree with Radek.<br>&gt; <br>&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt; <br>&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt; <br>&gt; David know this already, but I’m a huge fan of this feature. :-)<br>&gt; <br>&gt; -Chris<br></p><p>Yep, you took the words out of my mouth re: the version components. If two components are enough though, then we should totally drop the quotes.<br></p><p>David<br></p><p>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt; #else<br>&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; David<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>How about<br></p><p>#if swift(2, 2, *)<br>#endif<br></p><p>?<br></p><p>&gt; On Dec 18, 2015, at 3:32 PM, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt; <br>&gt;&gt; I agree with Radek.<br>&gt;&gt; <br>&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt; <br>&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt; <br>&gt;&gt; David know this already, but I’m a huge fan of this feature. :-)<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; Yep, you took the words out of my mouth re: the version components. If two components are enough though, then we should totally drop the quotes.<br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/ce247fd5/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 1412 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/ce247fd5/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>I had considered this format but I don&#39;t think it reads as well as you&#39;d expect for a version. It kind of makes it seem like each component is an independent argument, each with possibly a different meaning. It makes sense from a parsing point of view but I think we should allow folks to write it the same way they&#39;d write it in normal prose, since it&#39;s not much more effort. <br></p><p>David<br></p><p>&gt; On Dec 18, 2015, at 12:48, Harlan Haskins &lt;harlan at harlanhaskins.com&gt; wrote:<br>&gt; <br>&gt; How about<br>&gt; <br>&gt; #if swift(2, 2, *)<br>&gt; #endif<br>&gt; <br>&gt; ?<br>&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 3:32 PM, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David know this already, but I’m a huge fan of this feature. :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; Yep, you took the words out of my mouth re: the version components. If two components are enough though, then we should totally drop the quotes.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/b2f9d294/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>I agree — my reasoning was that it’s more like the current iOS availability statement.<br></p><p>I wonder if the iOS availability statement could use some work too? It’s kinda weird and magical (&quot;why do I have to type that *?&quot;)<br></p><p>&gt; On Dec 18, 2015, at 3:56 PM, David Farler &lt;dfarler at apple.com&gt; wrote:<br>&gt; <br>&gt; I had considered this format but I don&#39;t think it reads as well as you&#39;d expect for a version. It kind of makes it seem like each component is an independent argument, each with possibly a different meaning. It makes sense from a parsing point of view but I think we should allow folks to write it the same way they&#39;d write it in normal prose, since it&#39;s not much more effort. <br>&gt; <br>&gt; David<br>&gt; <br>&gt; On Dec 18, 2015, at 12:48, Harlan Haskins &lt;harlan at harlanhaskins.com &lt;mailto:harlan at harlanhaskins.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; How about<br>&gt;&gt; <br>&gt;&gt; #if swift(2, 2, *)<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 3:32 PM, David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; David know this already, but I’m a huge fan of this feature. :-)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yep, you took the words out of my mouth re: the version components. If two components are enough though, then we should totally drop the quotes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d44896eb/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 1412 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d44896eb/attachment-0001.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; I agree — my reasoning was that it’s more like the current iOS availability statement.<br></p><p>Is it? You can do `#available(iOS 9.2, *)` there.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 21:58, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree — my reasoning was that it’s more like the current iOS availability statement.<br>&gt; <br>&gt; I wonder if the iOS availability statement could use some work too? It’s kinda weird and magical (&quot;why do I have to type that *?&quot;)<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 3:56 PM, David Farler &lt;dfarler at apple.com &lt;mailto:dfarler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I had considered this format but I don&#39;t think it reads as well as you&#39;d expect for a version. It kind of makes it seem like each component is an independent argument, each with possibly a different meaning. It makes sense from a parsing point of view but I think we should allow folks to write it the same way they&#39;d write it in normal prose, since it&#39;s not much more effort. <br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 12:48, Harlan Haskins &lt;harlan at harlanhaskins.com &lt;mailto:harlan at harlanhaskins.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; How about<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if swift(2, 2, *)<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:32 PM, David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; David know this already, but I’m a huge fan of this feature. :-)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yep, you took the words out of my mouth re: the version components. If two components are enough though, then we should totally drop the quotes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/2850d6a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>A bare 2.2 will work. Right now, 2.2.2 won&#39;t lex because of a requirement that member access of a numeric literal be named but, if we decide down the road that we really, really need another version component, it wouldn&#39;t be a ton of work to give an exception when parsing an #if config.<br></p><p>David<br></p><p>&gt; On Dec 18, 2015, at 1:09 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; I agree — my reasoning was that it’s more like the current iOS availability statement.<br>&gt; <br>&gt; Is it? You can do `#available(iOS 9.2, *)` there.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 21:58, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree — my reasoning was that it’s more like the current iOS availability statement.<br>&gt;&gt; <br>&gt;&gt; I wonder if the iOS availability statement could use some work too? It’s kinda weird and magical (&quot;why do I have to type that *?&quot;)<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 3:56 PM, David Farler &lt;dfarler at apple.com &lt;mailto:dfarler at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I had considered this format but I don&#39;t think it reads as well as you&#39;d expect for a version. It kind of makes it seem like each component is an independent argument, each with possibly a different meaning. It makes sense from a parsing point of view but I think we should allow folks to write it the same way they&#39;d write it in normal prose, since it&#39;s not much more effort. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 12:48, Harlan Haskins &lt;harlan at harlanhaskins.com &lt;mailto:harlan at harlanhaskins.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #if swift(2, 2, *)<br>&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:32 PM, David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; David know this already, but I’m a huge fan of this feature. :-)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Yep, you took the words out of my mouth re: the version components. If two components are enough though, then we should totally drop the quotes.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:22, David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For Swift 2.2, I&#39;d like to add the following build configuration to check for the Swift language version. This is meant to be a short proposal, so let&#39;s start with a simple example, compiling with the 2.2 compiler:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The semantics of the build configuration is, &quot;is the Swift language version at least X?&quot;. If it is, the active block is parsed and compiled into your program. Like the other build configuration blocks, this isn&#39;t line-based, but break on whole statements and declarations. Unlike the other build configurations, however, the inactive block will not parse or emit syntax errors, so you can include syntax for older Swift language revisions in the same file if you prefer.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It sounds like a lot of folks have been wanting something like this, which is why I&#39;m suggesting it for the Swift 2.2 release. I&#39;m curious to hear your feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/1eafcfb0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt; <br>&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt; <br>&gt; I agree with Radek.<br>&gt; <br>&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt; <br>&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br></p><p><br>This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/6bd007b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 19, 2015 at 01:00:00am</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt; <br>&gt;&gt; I agree with Radek.<br>&gt;&gt; <br>&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt; <br>&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt; <br>&gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br></p><p>We can fix this in two ways:<br></p><p>Option 1: #if swift(&lt;x.y)<br></p><p>or<br></p><p>Option 2: #if swift &gt; x.y<br></p><p>I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br></p><p>Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br></p><p>David<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>What&#39;s the intended most common use case for this? The one that I can think<br>of that will show up very often is &quot;declare this function only if Swift<br>version is &gt;= X because it relies on some new feature&quot;<br>In that case, would it make sense for consistency to also be able to mark a<br>function (or type) as &quot;only available on Swift &gt;= X&quot;, like you do with ios<br>releases? (ie @available(swift, 2.2))<br>On Sat, Dec 19, 2015 at 1:28 AM David Farler via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via<br>&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and<br>&gt; `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I agree with Radek.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The argument to use a string is if we wanted to support subversions,<br>&gt; e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string,<br>&gt; because 2.2.1 isn’t a valid floating point literal - the lexer will be<br>&gt; displeased.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, I don’t think we *want* the feature to be able to do that.<br>&gt; The most important use case for this feature is to handle syntactic<br>&gt; differences across swift versions, and we don’t want those in<br>&gt; sub-versions.  Given that, it seems better to keep the syntax clean and<br>&gt; simple.<br>&gt; &gt;<br>&gt; &gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels<br>&gt; of version number should be sufficient.<br>&gt; &gt;<br>&gt; &gt;       - Doug<br>&gt; &gt;<br>&gt; &gt;  _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; Chris brought something up that a few of us had discussed in the past: the<br>&gt; ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;=<br>&gt; specified version&quot;, but I wonder how many people will want to compare<br>&gt; otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;<br>&gt; We can fix this in two ways:<br>&gt;<br>&gt; Option 1: #if swift(&lt;x.y)<br>&gt;<br>&gt; or<br>&gt;<br>&gt; Option 2: #if swift &gt; x.y<br>&gt;<br>&gt; I thought I preferred Option 1 but I think Option 2 reads more how you<br>&gt; would expect and somewhat reflects the regular syntax of the language,<br>&gt; FWIW. I sketched out both implementations and they&#39;re about the same in<br>&gt; complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep<br>&gt; special sauce in build configurations as &quot;function calls&quot;.<br>&gt;<br>&gt; Maybe not all of the comparison operators are necessary, but in general<br>&gt; this gives some flexibility to arrange checks (newer code at the top or at<br>&gt; the bottom) and actually describes what comparison is happening.<br>&gt;<br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/2178ac64/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 03:00:00pm</p></header><div class="content"><p>My understanding is that Swift 3 will stabilize the ABI and the standard library interfaces. Given that, I&#39;m not sure what you&#39;d use it for either.<br></p><p>&gt; Le 19 déc. 2015 à 14:26:24, Javier Soto via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; What&#39;s the intended most common use case for this? The one that I can think of that will show up very often is &quot;declare this function only if Swift version is &gt;= X because it relies on some new feature&quot;<br>&gt; In that case, would it make sense for consistency to also be able to mark a function (or type) as &quot;only available on Swift &gt;= X&quot;, like you do with ios releases? (ie @available(swift, 2.2))<br>&gt; On Sat, Dec 19, 2015 at 1:28 AM David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I agree with Radek.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt; &gt;<br>&gt; &gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt; &gt;<br>&gt; &gt;       - Doug<br>&gt; &gt;<br>&gt; &gt;  _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt; <br>&gt; We can fix this in two ways:<br>&gt; <br>&gt; Option 1: #if swift(&lt;x.y)<br>&gt; <br>&gt; or<br>&gt; <br>&gt; Option 2: #if swift &gt; x.y<br>&gt; <br>&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt; <br>&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt; <br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -- <br>&gt; Javier Soto  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/e50a26b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e1b0990a91ab8f465c6048603df9a49d?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Ludovic LANDRY</string> &lt;landryludovic at gmail.com&gt;<p>December 19, 2015 at 12:00:00pm</p></header><div class="content"><p>@felix Swift 3 will stabilize ABI (binary level compatibility) but not the<br>standard library interfaces (cf. https://github.com/apple/swift-evolution &gt;<br>Out of Scope &gt; Full source compatibility).<br></p><p>Even is they are stabilized in the future, there can still be some API<br>added in future Swift versions.<br></p><p><br>On Sat, Dec 19, 2015 at 12:26 PM, Félix Cloutier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; My understanding is that Swift 3 will stabilize the ABI and the standard<br>&gt; library interfaces. Given that, I&#39;m not sure what you&#39;d use it for either.<br>&gt;<br>&gt; Le 19 déc. 2015 à 14:26:24, Javier Soto via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; What&#39;s the intended most common use case for this? The one that I can<br>&gt; think of that will show up very often is &quot;declare this function only if<br>&gt; Swift version is &gt;= X because it relies on some new feature&quot;<br>&gt; In that case, would it make sense for consistency to also be able to mark<br>&gt; a function (or type) as &quot;only available on Swift &gt;= X&quot;, like you do with<br>&gt; ios releases? (ie @available(swift, 2.2))<br>&gt; On Sat, Dec 19, 2015 at 1:28 AM David Farler via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via<br>&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and<br>&gt;&gt; `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I agree with Radek.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The argument to use a string is if we wanted to support subversions,<br>&gt;&gt; e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string,<br>&gt;&gt; because 2.2.1 isn’t a valid floating point literal - the lexer will be<br>&gt;&gt; displeased.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, I don’t think we *want* the feature to be able to do that.<br>&gt;&gt; The most important use case for this feature is to handle syntactic<br>&gt;&gt; differences across swift versions, and we don’t want those in<br>&gt;&gt; sub-versions.  Given that, it seems better to keep the syntax clean and<br>&gt;&gt; simple.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This feature LGTM, and I also prefer that we drop the quotes. Two<br>&gt;&gt; levels of version number should be sufficient.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       - Doug<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;  _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; Chris brought something up that a few of us had discussed in the past:<br>&gt;&gt; the ambiguity of what the operation does. It&#39;s implicitly &quot;current version<br>&gt;&gt; &gt;= specified version&quot;, but I wonder how many people will want to compare<br>&gt;&gt; otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt;<br>&gt;&gt; We can fix this in two ways:<br>&gt;&gt;<br>&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt;<br>&gt;&gt; or<br>&gt;&gt;<br>&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt;<br>&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you<br>&gt;&gt; would expect and somewhat reflects the regular syntax of the language,<br>&gt;&gt; FWIW. I sketched out both implementations and they&#39;re about the same in<br>&gt;&gt; complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep<br>&gt;&gt; special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt;<br>&gt;&gt; Maybe not all of the comparison operators are necessary, but in general<br>&gt;&gt; this gives some flexibility to arrange checks (newer code at the top or at<br>&gt;&gt; the bottom) and actually describes what comparison is happening.<br>&gt;&gt;<br>&gt;&gt; David<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; Javier Soto _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Cordialement,<br>Ludovic Landry<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/0c7a446d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>That&#39;s not how I read it. The stable ABI point says (emphasis mine):<br></p><p>&gt; Stabilize the binary interface (ABI) to guarantee a level of binary compatibility moving forward. This involves finalizing runtime data structures, name mangling, calling conventions, and so on, as well as finalizing some of the details of the language itself that have an impact on its ABI. **Stabilizing the ABI also extends to the Standard Library, its data types, and core algorithms.** Successful ABI stabilization means that applications and libraries compiled with future versions of Swift can interact at a binary level with applications and libraries compiled with Swift 3.0, even if the source language changes.<br></p><p>If Swift 3 succeeds with this goal, there can be new interfaces in the standard library, but existing interfaces will be final.<br></p><p>My experience with other languages is that even when it&#39;s possible to determine if the compiler/library supports some feature, unless you&#39;re a Boost maintainer, people tend to target one version of the language anyway, either the older one using a workaround portable to the newer version, or the new version without regards to people stuck behind.<br></p><p>The one notable exception I can think of is Python 2 vs Python 3, but that&#39;s because the &quot;ABI&quot; underwent very important changes.<br></p><p>That&#39;s why I&#39;m asking what it would be used for.<br></p><p>&gt; Le 19 déc. 2015 à 15:52:08, Ludovic LANDRY &lt;landryludovic at gmail.com&gt; a écrit :<br>&gt; <br>&gt; @felix Swift 3 will stabilize ABI (binary level compatibility) but not the standard library interfaces (cf. https://github.com/apple/swift-evolution &lt;https://github.com/apple/swift-evolution&gt; &gt; Out of Scope &gt; Full source compatibility). <br>&gt; <br>&gt; Even is they are stabilized in the future, there can still be some API added in future Swift versions.<br>&gt; <br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 12:26 PM, Félix Cloutier &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; My understanding is that Swift 3 will stabilize the ABI and the standard library interfaces. Given that, I&#39;m not sure what you&#39;d use it for either.<br>&gt; <br>&gt;&gt; Le 19 déc. 2015 à 14:26:24, Javier Soto via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; What&#39;s the intended most common use case for this? The one that I can think of that will show up very often is &quot;declare this function only if Swift version is &gt;= X because it relies on some new feature&quot;<br>&gt;&gt; In that case, would it make sense for consistency to also be able to mark a function (or type) as &quot;only available on Swift &gt;= X&quot;, like you do with ios releases? (ie @available(swift, 2.2))<br>&gt;&gt; On Sat, Dec 19, 2015 at 1:28 AM David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I agree with Radek.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       - Doug<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;  _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt; <br>&gt;&gt; We can fix this in two ways:<br>&gt;&gt; <br>&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt; <br>&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt; <br>&gt;&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Javier Soto  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Cordialement,<br>&gt; Ludovic Landry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/7c0b25f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 19, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 1:26 PM, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That&#39;s not how I read it. The stable ABI point says (emphasis mine):<br>&gt; <br>&gt;&gt; Stabilize the binary interface (ABI) to guarantee a level of binary compatibility moving forward. This involves finalizing runtime data structures, name mangling, calling conventions, and so on, as well as finalizing some of the details of the language itself that have an impact on its ABI. **Stabilizing the ABI also extends to the Standard Library, its data types, and core algorithms.** Successful ABI stabilization means that applications and libraries compiled with future versions of Swift can interact at a binary level with applications and libraries compiled with Swift 3.0, even if the source language changes.<br>&gt; <br>&gt; If Swift 3 succeeds with this goal, there can be new interfaces in the standard library, but existing interfaces will be final.<br></p><p>Basically correct, though changes are possible to existing interfaces after a long period of deprecation.<br></p><p>&gt; My experience with other languages is that even when it&#39;s possible to determine if the compiler/library supports some feature, unless you&#39;re a Boost maintainer, people tend to target one version of the language anyway, either the older one using a workaround portable to the newer version, or the new version without regards to people stuck behind.<br>&gt; <br>&gt; The one notable exception I can think of is Python 2 vs Python 3, but that&#39;s because the &quot;ABI&quot; underwent very important changes.<br>&gt; <br>&gt; That&#39;s why I&#39;m asking what it would be used for.<br>&gt; <br>&gt;&gt; Le 19 déc. 2015 à 15:52:08, Ludovic LANDRY &lt;landryludovic at gmail.com &lt;mailto:landryludovic at gmail.com&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; @felix Swift 3 will stabilize ABI (binary level compatibility) but not the standard library interfaces (cf. https://github.com/apple/swift-evolution &lt;https://github.com/apple/swift-evolution&gt; &gt; Out of Scope &gt; Full source compatibility). <br>&gt;&gt; <br>&gt;&gt; Even is they are stabilized in the future, there can still be some API added in future Swift versions.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 19, 2015 at 12:26 PM, Félix Cloutier &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; My understanding is that Swift 3 will stabilize the ABI and the standard library interfaces. Given that, I&#39;m not sure what you&#39;d use it for either.<br>&gt;&gt; <br>&gt;&gt;&gt; Le 19 déc. 2015 à 14:26:24, Javier Soto via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What&#39;s the intended most common use case for this? The one that I can think of that will show up very often is &quot;declare this function only if Swift version is &gt;= X because it relies on some new feature&quot;<br>&gt;&gt;&gt; In that case, would it make sense for consistency to also be able to mark a function (or type) as &quot;only available on Swift &gt;= X&quot;, like you do with ios releases? (ie @available(swift, 2.2))<br>&gt;&gt;&gt; On Sat, Dec 19, 2015 at 1:28 AM David Farler via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I agree with Radek.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;       - Doug<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;  _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We can fix this in two ways:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Javier Soto  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Cordialement,<br>&gt;&gt; Ludovic Landry<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/44da0045/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 21, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; My experience with other languages is that [...] unless you&#39;re a Boost maintainer, people tend to target one version of the language anyway, either the older one using a workaround portable to the newer version, or the new version without regards to people stuck behind.<br></p><p>That&#39;s not how it works with Apple. Every summer we get a new beta version of Xcode with a new version of Swift, which we should use for all new developments (because it&#39;ll become the shipping version in the fall), but we have to use an older one for App Store-ready products if we want to be able to submit updates. So libraries do often support several versions of the language.<br></p><p>Just look the libraries that still support dual ARC/non-ARC modes, which is something that&#39;s not necessary at all.<br></p><p>A.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 19, 2015 at 01:00:00pm</p></header><div class="content"><p>That is a fair point of comparison, although this should work for both statements and declarations, in which case the extra attribute style would be redundant.  Maybe the implicit &gt;= is good enough. I&#39;d like to keep it as simple as possible. <br></p><p>David<br></p><p>&gt; On Dec 19, 2015, at 11:26, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br>&gt; <br>&gt; What&#39;s the intended most common use case for this? The one that I can think of that will show up very often is &quot;declare this function only if Swift version is &gt;= X because it relies on some new feature&quot;<br>&gt; In that case, would it make sense for consistency to also be able to mark a function (or type) as &quot;only available on Swift &gt;= X&quot;, like you do with ios releases? (ie @available(swift, 2.2))<br>&gt;&gt; On Sat, Dec 19, 2015 at 1:28 AM David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I agree with Radek.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       - Doug<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;  _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt; <br>&gt;&gt; We can fix this in two ways:<br>&gt;&gt; <br>&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt; <br>&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt; <br>&gt;&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/26b2a69f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 19, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 1:28 , David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt; <br>&gt;&gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt; <br>&gt; We can fix this in two ways:<br>&gt; <br>&gt; Option 1: #if swift(&lt;x.y)<br>&gt; <br>&gt; or<br>&gt; <br>&gt; Option 2: #if swift &gt; x.y<br>&gt; <br>&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt; <br>&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br></p><p>I don&#39;t like either of these. I especially don&#39;t like option 2 because it makes &quot;swift&quot; something magic while user flags are still limited to booleans, and I don&#39;t think we&#39;re likely to change user flags any time soon. But I don&#39;t like option 1 either. We didn&#39;t do it for &quot;if #available(…)&quot;, and I don&#39;t think we need to do it here either.<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a3a8839acb8607e4331c938469983127?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Dirk Schreib</string> &lt;dirk.schreib at me.com&gt;<p>December 20, 2015 at 07:00:00am</p></header><div class="content"><p>&gt; On 20 Dec 2015, at 07:01, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 1:28 , David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    - Doug<br>&gt;&gt; <br>&gt;&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt; <br>&gt;&gt; We can fix this in two ways:<br>&gt;&gt; <br>&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt; <br>&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt; <br>&gt;&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt; <br>&gt; I don&#39;t like either of these. I especially don&#39;t like option 2 because it makes &quot;swift&quot; something magic while user flags are still limited to booleans, and I don&#39;t think we&#39;re likely to change user flags any time soon. But I don&#39;t like option 1 either. We didn&#39;t do it for &quot;if #available(…)&quot;, and I don&#39;t think we need to do it here either.<br>&gt; <br>&gt; Jordan<br>&gt; <br>What about the following syntax?<br>#if Swift.sinceVersion( 2, minor: 2 )<br>or even better:<br>#if Swift.isFeatureAvailable( &quot;foo&quot; )<br>The look&amp;feel is standard Swift. Just at compile time. In both cases optional parameter values are possible. <br></p><p>- Dirk<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 20, 2015 at 07:00:00pm</p></header><div class="content"><p>I think we should be moving towards feature detection over swift version detection<br></p><p><br></p><p>Sent from my iPhone<br></p><p>&gt; On 20 Dec 2015, at 06:32, Dirk Schreib via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 20 Dec 2015, at 07:01, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 1:28 , David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   - Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We can fix this in two ways:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t like either of these. I especially don&#39;t like option 2 because it makes &quot;swift&quot; something magic while user flags are still limited to booleans, and I don&#39;t think we&#39;re likely to change user flags any time soon. But I don&#39;t like option 1 either. We didn&#39;t do it for &quot;if #available(…)&quot;, and I don&#39;t think we need to do it here either.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt; What about the following syntax?<br>&gt; #if Swift.sinceVersion( 2, minor: 2 )<br>&gt; or even better:<br>&gt; #if Swift.isFeatureAvailable( &quot;foo&quot; )<br>&gt; The look&amp;feel is standard Swift. Just at compile time. In both cases optional parameter values are possible. <br>&gt; <br>&gt; - Dirk<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 20, 2015 at 09:00:00pm</p></header><div class="content"><p>But the thing is, right now it’s not just new features that show up in new releases. We also have breaking syntax changes.<br></p><p>Feature detection make more sense in the future (perhaps one day we could have an “unstable” Swift branch with experimental features), but right now version detection makes more sense.<br></p><p>— Radek<br></p><p>&gt; On 20 Dec 2015, at 20:28, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think we should be moving towards feature detection over swift version detection<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/30036687/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>December 21, 2015 at 07:00:00am</p></header><div class="content"><p>While that is true, I suspect with the race to a stable language, the plan is to design features as if the language were to stay solid. I wonder about the wisdom in designing part of the language to handle the fact they are not finished designing the language.<br></p><p>Perhaps as an compromise, they could treat different versions of swift as features in and of themselves?<br></p><p>- Rod<br></p><p>&gt; On 21 Dec 2015, at 7:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But the thing is, right now it’s not just new features that show up in new releases. We also have breaking syntax changes.<br>&gt; <br>&gt; Feature detection make more sense in the future (perhaps one day we could have an “unstable” Swift branch with experimental features), but right now version detection makes more sense.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 20 Dec 2015, at 20:28, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think we should be moving towards feature detection over swift version detection<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/43ba9804/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 21, 2015 at 03:00:00am</p></header><div class="content"><p>&gt; I suspect with the race to a stable language, the plan is to design features as if the language were to stay solid.<br></p><p>Are you implying that Swift 4 will have zero new features? Nothing that libraries will want to use conditionally when available?<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 20, 2015 at 10:00:00pm</p></header><div class="content"><p>Also in future versions features may go away meaning older libraries may assume that greater than swift 2 is all that is needed to imply compatibility. Also libraries may be written against features they may not know which version of swift it will get into. Additionally certain features aren&#39;t available across platforms so how do you know what swift 2 means across platforms ? <br></p><p>Swift version conditionals are a useful fallback but we should also try and make feature conditionals a first class citizen too. <br></p><p>I love the @supports syntax in CSS, if we could do that then that would be awesome :)  it&#39;s a great way of handling implementations across platforms <br></p><p>Sent from my iPhone<br></p><p>On 20 Dec 2015, at 21:00, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I suspect with the race to a stable language, the plan is to design features as if the language were to stay solid.<br>&gt; <br>&gt; Are you implying that Swift 4 will have zero new features? Nothing that libraries will want to use conditionally when available?<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 20, 2015 at 10:00:00pm</p></header><div class="content"><p>If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br></p><p>#if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>#endif<br></p><p>Then at least everyone can opt-in to using it for availability checks. This should of course tie into the Swift Package Manager and use proper semver syntax (might as well use node’s example: https://docs.npmjs.com/misc/semver).<br></p><p>Another solution would be to simply factor out the code into separate files and add each to the appropriate build configuration. Then nothing new needs to be added.<br></p><p>-David<br></p><p>&gt; On Dec 20, 2015, at 2:01 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Also in future versions features may go away meaning older libraries may assume that greater than swift 2 is all that is needed to imply compatibility. Also libraries may be written against features they may not know which version of swift it will get into. Additionally certain features aren&#39;t available across platforms so how do you know what swift 2 means across platforms ? <br>&gt; <br>&gt; Swift version conditionals are a useful fallback but we should also try and make feature conditionals a first class citizen too. <br>&gt; <br>&gt; I love the @supports syntax in CSS, if we could do that then that would be awesome :)  it&#39;s a great way of handling implementations across platforms <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 20 Dec 2015, at 21:00, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I suspect with the race to a stable language, the plan is to design features as if the language were to stay solid.<br>&gt;&gt; <br>&gt;&gt; Are you implying that Swift 4 will have zero new features? Nothing that libraries will want to use conditionally when available?<br>&gt;&gt; <br>&gt;&gt; A.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/da089e06/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January  3, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt; <br>&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt; #endif<br></p><p>Big +1.<br></p><p>I&#39;ve asked specifically to get some kind of conditional compilation on corelibs-foundation &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/Week-of-Mon-20151228/000287.html&gt; being used.  corelibs-founcation is currently incompatible with Darwin Foundation, and so it is impractical to make a single codebase build for both.<br></p><p>But building the same application against both Foundations and spotting differences is one of the important ways we&#39;re going to spot bugs.<br></p><p>So I think the code quality of Foundation ultimately hinges on getting some feature like this in the language.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/92ca9c6d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>January  3, 2016 at 10:00:00am</p></header><div class="content"><p>+1 from me as well, supporting conditional compilation when the two versions of foundation differ and may differ for the foreseeable future seems a must on this end.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 3 Jan 2016, at 10:12, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt;&gt; <br>&gt;&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt;&gt; #endif<br>&gt; <br>&gt; Big +1.<br>&gt; <br>&gt; I&#39;ve asked specifically to get some kind of conditional compilation on corelibs-foundation being used.  corelibs-founcation is currently incompatible with Darwin Foundation, and so it is impractical to make a single codebase build for both.<br>&gt; <br>&gt; But building the same application against both Foundations and spotting differences is one of the important ways we&#39;re going to spot bugs.<br>&gt; <br>&gt; So I think the code quality of Foundation ultimately hinges on getting some feature like this in the language.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/061af396/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January  4, 2016 at 03:00:00pm</p></header><div class="content"><p>The swift package manager is currently considering its own define &lt;https://github.com/apple/swift-package-manager/pull/105#issuecomment-168754567&gt;, so it&#39;s now the second official project that could benefit from this syntax.<br></p><p>David, any interest in writing this up?<br></p><p>&gt; On Jan 3, 2016, at 4:48 AM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; +1 from me as well, supporting conditional compilation when the two versions of foundation differ and may differ for the foreseeable future seems a must on this end.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 3 Jan 2016, at 10:12, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt;&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; Big +1.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve asked specifically to get some kind of conditional compilation on corelibs-foundation &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/Week-of-Mon-20151228/000287.html&gt; being used.  corelibs-founcation is currently incompatible with Darwin Foundation, and so it is impractical to make a single codebase build for both.<br>&gt;&gt; <br>&gt;&gt; But building the same application against both Foundations and spotting differences is one of the important ways we&#39;re going to spot bugs.<br>&gt;&gt; <br>&gt;&gt; So I think the code quality of Foundation ultimately hinges on getting some feature like this in the language.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/9a6ea696/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>January  4, 2016 at 01:00:00pm</p></header><div class="content"><p>I could (assuming I’m the David you’re referring to), though it will probably be towards the end of the week or early next week before I get a chance to get to it.<br></p><p>-David<br></p><p>&gt; On Jan 4, 2016, at 1:03 PM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt; <br>&gt; The swift package manager is currently considering its own define &lt;https://github.com/apple/swift-package-manager/pull/105#issuecomment-168754567&gt;, so it&#39;s now the second official project that could benefit from this syntax.<br>&gt; <br>&gt; David, any interest in writing this up?<br>&gt; <br>&gt;&gt; On Jan 3, 2016, at 4:48 AM, Goffredo Marocchi &lt;panajev at gmail.com &lt;mailto:panajev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 from me as well, supporting conditional compilation when the two versions of foundation differ and may differ for the foreseeable future seems a must on this end.<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 3 Jan 2016, at 10:12, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Big +1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve asked specifically to get some kind of conditional compilation on corelibs-foundation &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/Week-of-Mon-20151228/000287.html&gt; being used.  corelibs-founcation is currently incompatible with Darwin Foundation, and so it is impractical to make a single codebase build for both.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But building the same application against both Foundations and spotting differences is one of the important ways we&#39;re going to spot bugs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So I think the code quality of Foundation ultimately hinges on getting some feature like this in the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/e85bb3cb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>January  5, 2016 at 09:00:00am</p></header><div class="content"><p>Definitely a +1 from me.<br></p><p>- Rod<br></p><p>&gt; On 3 Jan 2016, at 9:48 PM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 from me as well, supporting conditional compilation when the two versions of foundation differ and may differ for the foreseeable future seems a must on this end.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 3 Jan 2016, at 10:12, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt;&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; Big +1.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve asked specifically to get some kind of conditional compilation on corelibs-foundation being used.  corelibs-founcation is currently incompatible with Darwin Foundation, and so it is impractical to make a single codebase build for both.<br>&gt;&gt; <br>&gt;&gt; But building the same application against both Foundations and spotting differences is one of the important ways we&#39;re going to spot bugs.<br>&gt;&gt; <br>&gt;&gt; So I think the code quality of Foundation ultimately hinges on getting some feature like this in the language.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/b1c8f833/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>January  4, 2016 at 04:00:00pm</p></header><div class="content"><p>We already have @- and #-prefixed availability-like constructs, so I would prefer something more specific to the task – I wouldn&#39;t want to dilute the meaning of a package name argument by supplying it with the magic package &quot;swift&quot;, for example. Changes to the language can be highly disruptive to all Swift code, so that&#39;s why I think it warrants its own build configuration. <br></p><p>David<br></p><p>&gt; On Dec 20, 2015, at 10:45 PM, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt; <br>&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt; #endif<br>&gt; <br>&gt; Then at least everyone can opt-in to using it for availability checks. This should of course tie into the Swift Package Manager and use proper semver syntax (might as well use node’s example: https://docs.npmjs.com/misc/semver &lt;https://docs.npmjs.com/misc/semver&gt;).<br>&gt; <br>&gt; Another solution would be to simply factor out the code into separate files and add each to the appropriate build configuration. Then nothing new needs to be added.<br>&gt; <br>&gt; -David<br>&gt; <br>&gt;&gt; On Dec 20, 2015, at 2:01 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Also in future versions features may go away meaning older libraries may assume that greater than swift 2 is all that is needed to imply compatibility. Also libraries may be written against features they may not know which version of swift it will get into. Additionally certain features aren&#39;t available across platforms so how do you know what swift 2 means across platforms ? <br>&gt;&gt; <br>&gt;&gt; Swift version conditionals are a useful fallback but we should also try and make feature conditionals a first class citizen too. <br>&gt;&gt; <br>&gt;&gt; I love the @supports syntax in CSS, if we could do that then that would be awesome :)  it&#39;s a great way of handling implementations across platforms <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 20 Dec 2015, at 21:00, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I suspect with the race to a stable language, the plan is to design features as if the language were to stay solid.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are you implying that Swift 4 will have zero new features? Nothing that libraries will want to use conditionally when available?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/25781a26/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>January  4, 2016 at 09:00:00pm</p></header><div class="content"><p>The @available() and if #available constructs are not sufficient as they fall under the same limitations that your proposal addresses: they require that the non-valid branch not be parsed. For example, an API that has changes with a new language feature, such as variadic generic arguments, would not be able to be defined.<br></p><p>If we look at the grammar, I don’t see why the grammar for “availability-argument” couldn’t look like this:<br></p><p>    availability-argument: (platform-name | language-name | package-name) version.<br>GRAMMAR OF AN AVAILABILITY CONDITION<br></p><p> &lt;&gt;availability-condition → #available­(­availability-arguments &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-arguments&gt;­)­<br> &lt;&gt;availability-arguments → availability-argument &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-argument&gt;­  availability-argument &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-argument&gt;­,­availability-arguments &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-arguments&gt;­<br> &lt;&gt;availability-argument → platform-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/platform-name&gt;­platform-version &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/platform-version&gt;­<br> &lt;&gt;availability-argument → *­<br> &lt;&gt;platform-name → iOS­  iOSApplicationExtension­<br> &lt;&gt;platform-name → OSX­  OSXApplicationExtension­<br> &lt;&gt;platform-name → watchOS­<br> &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br> &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br> &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br>I’d further argue that the version argument properly adhere to the semver spec: http://semver.org.<br></p><p>The above change, in addition to the change for the if #available statement to not parse the unavailable path would seem to provide the solution you want to have in addition to the solution that many package developers could use as well.<br></p><p>The nice thing is that this could be done in stages:<br></p><p>1. Add support for the language condition and change #available to not parse the non-valid paths<br>2. Add support for package names<br>3. Add support for proper semver versioning.<br></p><p>The only breaking change is #1. When/if semver was supported, the version could still take the decimal digits while adding semver support.<br></p><p>-David<br></p><p>&gt; On Jan 4, 2016, at 4:02 PM, David Farler &lt;dfarler at apple.com&gt; wrote:<br>&gt; <br>&gt; We already have @- and #-prefixed availability-like constructs, so I would prefer something more specific to the task – I wouldn&#39;t want to dilute the meaning of a package name argument by supplying it with the magic package &quot;swift&quot;, for example. Changes to the language can be highly disruptive to all Swift code, so that&#39;s why I think it warrants its own build configuration. <br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt; On Dec 20, 2015, at 10:45 PM, David Owens II via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If we are going to support something like this, I’d rather see it be something everyone could leverage as there are many use cases for this feature:<br>&gt;&gt; <br>&gt;&gt; #if available(&quot;package-name&quot;, &quot;1.2.*&quot;)<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; Then at least everyone can opt-in to using it for availability checks. This should of course tie into the Swift Package Manager and use proper semver syntax (might as well use node’s example: https://docs.npmjs.com/misc/semver &lt;https://docs.npmjs.com/misc/semver&gt;).<br>&gt;&gt; <br>&gt;&gt; Another solution would be to simply factor out the code into separate files and add each to the appropriate build configuration. Then nothing new needs to be added.<br>&gt;&gt; <br>&gt;&gt; -David<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 20, 2015, at 2:01 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also in future versions features may go away meaning older libraries may assume that greater than swift 2 is all that is needed to imply compatibility. Also libraries may be written against features they may not know which version of swift it will get into. Additionally certain features aren&#39;t available across platforms so how do you know what swift 2 means across platforms ? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift version conditionals are a useful fallback but we should also try and make feature conditionals a first class citizen too. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I love the @supports syntax in CSS, if we could do that then that would be awesome :)  it&#39;s a great way of handling implementations across platforms <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 20 Dec 2015, at 21:00, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I suspect with the race to a stable language, the plan is to design features as if the language were to stay solid.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Are you implying that Swift 4 will have zero new features? Nothing that libraries will want to use conditionally when available?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/4f969f48/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 20, 2015, at 11:28 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think we should be moving towards feature detection over swift version detection<br></p><p>I’m a huge fan of feature detection (__has_feature and __has_include in Clang are some of my contributions), but I don’t think that makes sense here.  We want swift to have a linear and consistent version numbering scheme.  This means that &quot;Swift 2.2” and “Swift 3.0” should mean something across all the potential implementations, at least in terms of the compiler and standard library interfaces.  I do agree that something like “has package” could make sense.<br></p><p>Someone upthread asked for a specific use-case, here it is: <br></p><p>- At some point in time, Swift 3 will be widely available to developers in Beta form, but not yet finalized.<br>- At this point Swift 2.2 will be finalized and lots of code will be building against Swift 2.2. <br>- Swift 3 will be source incompatible with Swift 2.2.<br></p><p>It would be unfortunate if the huge number of frequently used packages (e.g. AlamoFire as one random example) would have to make a choice between the two, or fork their own development.  Having #if checks against versions numbers for the months where Swift 3 is in development - but not yet finalized - can ease pain for teams trying to maintain their code.  Sometime after Swift 3 is out the door, they can then remove the old swift 2.2 support code and move on with life.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 20, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 22:01, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 1:28 , David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 12:25 PM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sounds like it could be super useful for libraries!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about we drop the quote marks, though? If we have `os(iOS)` and `#available(iOS 9, *)` (in other context), why not `swift(2.2)`?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with Radek.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The argument to use a string is if we wanted to support subversions, e.g. like “#if swift(2.2.1)”.  This requires the parameter to be a string, because 2.2.1 isn’t a valid floating point literal - the lexer will be displeased.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, I don’t think we *want* the feature to be able to do that.  The most important use case for this feature is to handle syntactic differences across swift versions, and we don’t want those in sub-versions.  Given that, it seems better to keep the syntax clean and simple.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This feature LGTM, and I also prefer that we drop the quotes. Two levels of version number should be sufficient.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    - Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; Chris brought something up that a few of us had discussed in the past: the ambiguity of what the operation does. It&#39;s implicitly &quot;current version &gt;= specified version&quot;, but I wonder how many people will want to compare otherwise or will assume the comparison is &#39;==&#39;.<br>&gt;&gt; <br>&gt;&gt; We can fix this in two ways:<br>&gt;&gt; <br>&gt;&gt; Option 1: #if swift(&lt;x.y)<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; Option 2: #if swift &gt; x.y<br>&gt;&gt; <br>&gt;&gt; I thought I preferred Option 1 but I think Option 2 reads more how you would expect and somewhat reflects the regular syntax of the language, FWIW. I sketched out both implementations and they&#39;re about the same in complexity, so I would suggest Option 2, unless it&#39;s a strong goal to keep special sauce in build configurations as &quot;function calls&quot;.<br>&gt;&gt; <br>&gt;&gt; Maybe not all of the comparison operators are necessary, but in general this gives some flexibility to arrange checks (newer code at the top or at the bottom) and actually describes what comparison is happening.<br>&gt; <br>&gt; I don&#39;t like either of these. I especially don&#39;t like option 2 because it makes &quot;swift&quot; something magic while user flags are still limited to booleans, and I don&#39;t think we&#39;re likely to change user flags any time soon. But I don&#39;t like option 1 either. We didn&#39;t do it for &quot;if #available(…)&quot;, and I don&#39;t think we need to do it here either.<br>&gt; <br>&gt; Jordan<br></p><p>Are you in favor of the original syntax?<br></p><p>David<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>Le 18 déc. 2015 à 15:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt; #if swift(&quot;2.2&quot;)<br>&gt;  print(&quot;Hello&quot;)<br>&gt; #else<br>&gt;  this code will not parse or emit diagnostics<br>&gt; #endif<br></p><p>This is a change from how the #if directive currently works. Currently, it&#39;s a syntax error to write this:<br></p><p>	#if DEBUG<br>	@abaraka func test() {}<br>	#endif<br></p><p>even if DEBUG is false because the content is parsed regardless and @abaraka is not a valid attribute. The syntax inside the #if/#endif must be valid for the parser.<br></p><p>So this proposal implies a change in how #if is parsed. Should it works like the C preprocessor?<br></p><p>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 19, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 13:48, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt; <br>&gt;&gt; Le 18 déc. 2015 à 15:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt; #else<br>&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt; #endif<br>&gt; <br>&gt; This is a change from how the #if directive currently works. Currently, it&#39;s a syntax error to write this:<br>&gt; <br>&gt;    #if DEBUG<br>&gt;    @abaraka func test() {}<br>&gt;    #endif<br>&gt; <br>&gt; even if DEBUG is false because the content is parsed regardless and @abaraka is not a valid attribute. The syntax inside the #if/#endif must be valid for the parser.<br>&gt; <br>&gt; So this proposal implies a change in how #if is parsed. Should it works like the C preprocessor?<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; michel.fortin at michel<br></p><p>Yes, that&#39;s right, it is a change but only for this new directive because one of its uses is to control exposure to syntax or API changes. Other build configurations such as &#39;os&#39; and &#39;arch&#39; will be unaffected. <br></p><p>I myself wouldn&#39;t want build configs to act like the C preprocessor, although that kind of change is probably out of this proposal&#39;s scope anyway, IMO.<br></p><p>David<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>I don&#39;t really like how different this makes &quot;#if swift&quot; from &quot;#if &lt;anything else&gt;&quot;. To me, that would be a violation of the principle of least astonishment.<br></p><p>&gt; Le 19 déc. 2015 à 17:08:13, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 13:48, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Le 18 déc. 2015 à 15:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt; #else<br>&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; This is a change from how the #if directive currently works. Currently, it&#39;s a syntax error to write this:<br>&gt;&gt; <br>&gt;&gt;   #if DEBUG<br>&gt;&gt;   @abaraka func test() {}<br>&gt;&gt;   #endif<br>&gt;&gt; <br>&gt;&gt; even if DEBUG is false because the content is parsed regardless and @abaraka is not a valid attribute. The syntax inside the #if/#endif must be valid for the parser.<br>&gt;&gt; <br>&gt;&gt; So this proposal implies a change in how #if is parsed. Should it works like the C preprocessor?<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Michel Fortin<br>&gt;&gt; michel.fortin at michel<br>&gt; <br>&gt; Yes, that&#39;s right, it is a change but only for this new directive because one of its uses is to control exposure to syntax or API changes. Other build configurations such as &#39;os&#39; and &#39;arch&#39; will be unaffected. <br>&gt; <br>&gt; I myself wouldn&#39;t want build configs to act like the C preprocessor, although that kind of change is probably out of this proposal&#39;s scope anyway, IMO.<br>&gt; <br>&gt; David<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/cc3f5ce9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 19, 2015 at 02:00:00pm</p></header><div class="content"><p>I don&#39;t know if I would say it violates the principle of least surprise because it wouldn&#39;t actually be a surprise in this case, since it&#39;s the whole reason you would choose to use `#if swift` – to ignore irrelevant syntax errors.<br></p><p>The difference is also smaller than you might think. The #else branches in the other build configurations parse because presumably the language&#39;s syntax wouldn&#39;t change between operating systems or architectures, however they never go through type checking or semantic analysis. For example:<br></p><p>cat -n test.swift<br></p><p>1  #if os(iOS)<br>2    print(&quot;Hello&quot;)<br>3  #else<br>4    print(&quot;Hello&quot;)<br>5  #endif<br></p><p>Compiling for OS X, both branches are valid Swift and would actually type check fine, but:<br></p><p>xcrun -sdk macosx swiftc -dump-ast test.swift<br></p><p>(source_file<br>  (top_level_code_decl<br>    (brace_stmt<br>      (#if_stmt<br>        (#if:<br>          (call_expr type=&#39;&lt;null&gt;&#39;<br></p><p>...snip -- all null types up to here.<br></p><p>        #else<br>          (elements<br>            (top_level_code_decl<br>              (brace_stmt<br>                (call_expr type=&#39;()&#39;<br></p><p>...snip -- all typed up to here.<br></p><p>So, maybe we should revisit the other build configurations in the future, that it&#39;s maybe not worth it to even parse any inactive branches, but I don&#39;t think the difference is so strong that we shouldn&#39;t reuse the #if syntax for this now.<br></p><p>David<br></p><p>&gt; On Dec 19, 2015, at 2:17 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; I don&#39;t really like how different this makes &quot;#if swift&quot; from &quot;#if &lt;anything else&gt;&quot;. To me, that would be a violation of the principle of least astonishment.<br>&gt; <br>&gt;&gt; Le 19 déc. 2015 à 17:08:13, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 13:48, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 18 déc. 2015 à 15:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a change from how the #if directive currently works. Currently, it&#39;s a syntax error to write this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   #if DEBUG<br>&gt;&gt;&gt;   @abaraka func test() {}<br>&gt;&gt;&gt;   #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; even if DEBUG is false because the content is parsed regardless and @abaraka is not a valid attribute. The syntax inside the #if/#endif must be valid for the parser.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So this proposal implies a change in how #if is parsed. Should it works like the C preprocessor?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Michel Fortin<br>&gt;&gt;&gt; michel.fortin at michel<br>&gt;&gt; <br>&gt;&gt; Yes, that&#39;s right, it is a change but only for this new directive because one of its uses is to control exposure to syntax or API changes. Other build configurations such as &#39;os&#39; and &#39;arch&#39; will be unaffected. <br>&gt;&gt; <br>&gt;&gt; I myself wouldn&#39;t want build configs to act like the C preprocessor, although that kind of change is probably out of this proposal&#39;s scope anyway, IMO.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 06:00:00pm</p></header><div class="content"><p>It&#39;s not surprising that what&#39;s inside an #if swift block isn&#39;t compiled, but since it doesn&#39;t, it might be surprising that what is inside an #if DEBUG block is compiled, no?<br></p><p>&gt; Le 19 déc. 2015 à 17:58:35, David Farler &lt;dfarler at apple.com&gt; a écrit :<br>&gt; <br>&gt; I don&#39;t know if I would say it violates the principle of least surprise because it wouldn&#39;t actually be a surprise in this case, since it&#39;s the whole reason you would choose to use `#if swift` – to ignore irrelevant syntax errors.<br>&gt; <br>&gt; The difference is also smaller than you might think. The #else branches in the other build configurations parse because presumably the language&#39;s syntax wouldn&#39;t change between operating systems or architectures, however they never go through type checking or semantic analysis. For example:<br>&gt; <br>&gt; cat -n test.swift<br>&gt; <br>&gt; 1  #if os(iOS)<br>&gt; 2    print(&quot;Hello&quot;)<br>&gt; 3  #else<br>&gt; 4    print(&quot;Hello&quot;)<br>&gt; 5  #endif<br>&gt; <br>&gt; Compiling for OS X, both branches are valid Swift and would actually type check fine, but:<br>&gt; <br>&gt; xcrun -sdk macosx swiftc -dump-ast test.swift<br>&gt; <br>&gt; (source_file<br>&gt;  (top_level_code_decl<br>&gt;    (brace_stmt<br>&gt;      (#if_stmt<br>&gt;        (#if:<br>&gt;          (call_expr type=&#39;&lt;null&gt;&#39;<br>&gt; <br>&gt; ...snip -- all null types up to here.<br>&gt; <br>&gt;        #else<br>&gt;          (elements<br>&gt;            (top_level_code_decl<br>&gt;              (brace_stmt<br>&gt;                (call_expr type=&#39;()&#39;<br>&gt; <br>&gt; ...snip -- all typed up to here.<br>&gt; <br>&gt; So, maybe we should revisit the other build configurations in the future, that it&#39;s maybe not worth it to even parse any inactive branches, but I don&#39;t think the difference is so strong that we shouldn&#39;t reuse the #if syntax for this now.<br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 2:17 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t really like how different this makes &quot;#if swift&quot; from &quot;#if &lt;anything else&gt;&quot;. To me, that would be a violation of the principle of least astonishment.<br>&gt;&gt; <br>&gt;&gt;&gt; Le 19 déc. 2015 à 17:08:13, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 19, 2015, at 13:48, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 18 déc. 2015 à 15:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is a change from how the #if directive currently works. Currently, it&#39;s a syntax error to write this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  #if DEBUG<br>&gt;&gt;&gt;&gt;  @abaraka func test() {}<br>&gt;&gt;&gt;&gt;  #endif<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; even if DEBUG is false because the content is parsed regardless and @abaraka is not a valid attribute. The syntax inside the #if/#endif must be valid for the parser.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So this proposal implies a change in how #if is parsed. Should it works like the C preprocessor?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Michel Fortin<br>&gt;&gt;&gt;&gt; michel.fortin at michel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, that&#39;s right, it is a change but only for this new directive because one of its uses is to control exposure to syntax or API changes. Other build configurations such as &#39;os&#39; and &#39;arch&#39; will be unaffected. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I myself wouldn&#39;t want build configs to act like the C preprocessor, although that kind of change is probably out of this proposal&#39;s scope anyway, IMO.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; David<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Proposal] Swift 2.2: #if swift language version</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>Yes, I see your point in that. It might be worth revisiting that for all of the build configs in the future. <br></p><p>David<br></p><p>&gt; On Dec 19, 2015, at 15:51, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; It&#39;s not surprising that what&#39;s inside an #if swift block isn&#39;t compiled, but since it doesn&#39;t, it might be surprising that what is inside an #if DEBUG block is compiled, no?<br>&gt; <br>&gt;&gt; Le 19 déc. 2015 à 17:58:35, David Farler &lt;dfarler at apple.com&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know if I would say it violates the principle of least surprise because it wouldn&#39;t actually be a surprise in this case, since it&#39;s the whole reason you would choose to use `#if swift` – to ignore irrelevant syntax errors.<br>&gt;&gt; <br>&gt;&gt; The difference is also smaller than you might think. The #else branches in the other build configurations parse because presumably the language&#39;s syntax wouldn&#39;t change between operating systems or architectures, however they never go through type checking or semantic analysis. For example:<br>&gt;&gt; <br>&gt;&gt; cat -n test.swift<br>&gt;&gt; <br>&gt;&gt; 1  #if os(iOS)<br>&gt;&gt; 2    print(&quot;Hello&quot;)<br>&gt;&gt; 3  #else<br>&gt;&gt; 4    print(&quot;Hello&quot;)<br>&gt;&gt; 5  #endif<br>&gt;&gt; <br>&gt;&gt; Compiling for OS X, both branches are valid Swift and would actually type check fine, but:<br>&gt;&gt; <br>&gt;&gt; xcrun -sdk macosx swiftc -dump-ast test.swift<br>&gt;&gt; <br>&gt;&gt; (source_file<br>&gt;&gt; (top_level_code_decl<br>&gt;&gt;   (brace_stmt<br>&gt;&gt;     (#if_stmt<br>&gt;&gt;       (#if:<br>&gt;&gt;         (call_expr type=&#39;&lt;null&gt;&#39;<br>&gt;&gt; <br>&gt;&gt; ...snip -- all null types up to here.<br>&gt;&gt; <br>&gt;&gt;       #else<br>&gt;&gt;         (elements<br>&gt;&gt;           (top_level_code_decl<br>&gt;&gt;             (brace_stmt<br>&gt;&gt;               (call_expr type=&#39;()&#39;<br>&gt;&gt; <br>&gt;&gt; ...snip -- all typed up to here.<br>&gt;&gt; <br>&gt;&gt; So, maybe we should revisit the other build configurations in the future, that it&#39;s maybe not worth it to even parse any inactive branches, but I don&#39;t think the difference is so strong that we shouldn&#39;t reuse the #if syntax for this now.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 2:17 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t really like how different this makes &quot;#if swift&quot; from &quot;#if &lt;anything else&gt;&quot;. To me, that would be a violation of the principle of least astonishment.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 19 déc. 2015 à 17:08:13, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 19, 2015, at 13:48, Michel Fortin &lt;michel.fortin at michelf.ca&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Le 18 déc. 2015 à 15:22, David Farler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; #if swift(&quot;2.2&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt; print(&quot;Hello&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt; #else<br>&gt;&gt;&gt;&gt;&gt;&gt; this code will not parse or emit diagnostics<br>&gt;&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is a change from how the #if directive currently works. Currently, it&#39;s a syntax error to write this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #if DEBUG<br>&gt;&gt;&gt;&gt;&gt; @abaraka func test() {}<br>&gt;&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; even if DEBUG is false because the content is parsed regardless and @abaraka is not a valid attribute. The syntax inside the #if/#endif must be valid for the parser.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So this proposal implies a change in how #if is parsed. Should it works like the C preprocessor?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Michel Fortin<br>&gt;&gt;&gt;&gt;&gt; michel.fortin at michel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes, that&#39;s right, it is a change but only for this new directive because one of its uses is to control exposure to syntax or API changes. Other build configurations such as &#39;os&#39; and &#39;arch&#39; will be unaffected. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I myself wouldn&#39;t want build configs to act like the C preprocessor, although that kind of change is probably out of this proposal&#39;s scope anyway, IMO.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; David<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
