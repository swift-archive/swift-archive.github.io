<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/582b7183bda90126e385e2cc95cb7088?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Justin Jia</string> &lt;justin.jia.developer at gmail.com&gt;<p>August 15, 2016 at 03:00:00pm</p></header><div class="content"><p>I think the `?` will make the return an optional. So your example should add another ? at the end.<br></p><p>```<br>print(foo(bar(42)?, baz(42)?)?)<br>```<br></p><p>The above example should be equivalent to:<br></p><p>```<br>let x = bar(42) // X is optional<br>let y = baz(42) // Y is optional<br></p><p>let z = foo(x?, y?) // Z should be optional now<br>print(z?)<br>```<br></p><p>which should be equivalent to;<br></p><p>```<br>let x = bar(42)<br>let y = baz(42)<br></p><p>if let x = x, let y = y {<br>    z = foo(x, y)<br>}<br></p><p>if let z = z {<br>    print(z)<br>}<br>```<br></p><p>We don’t need to worry about “short-circuit” now because it should be equivalent to the above syntax.<br></p><p>&gt; It has been mentioned before (more than once, perhaps, but not in its own thread I don&#39;t think, so good luck finding it). IIRC, one of the problems is that it&#39;s unclear what happens if your function takes multiple arguments. Does evaluation proceed from left to right? does it short-circuit? Put concretely:<br>&gt; <br>&gt; ```<br>&gt; func bar(_ x: Int) -&gt;Int? { /* side effects */ }<br>&gt; func baz(_ y: Int) -&gt;Int? { /* side effects */ }<br>&gt; func foo(_ z: Int, _ a: Int) -&gt;Int { /* ... */ }<br>&gt; <br>&gt; print(foo(bar(42)?, baz(42)?))<br>&gt; ```<br>&gt; <br>&gt; Does baz(42) get evaluated if bar returns nil? Does bar(42) get evaluated if baz returns nil?<br>&gt; <br>&gt; <br>&gt; On Mon, Aug 15, 2016 at 2:02 AM, Justin Jia via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; Hi!<br>&gt; &gt; <br>&gt; &gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt; &gt; <br>&gt; &gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt; &gt; <br>&gt; &gt; Let’s say we have a struct with a function:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; struct Foo {<br>&gt; &gt; func bar(x: Int)<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; We can use optionals:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; let foo: Foo? = nil<br>&gt; &gt; let x = 1<br>&gt; &gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt; &gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; However:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; let foo = Foo()<br>&gt; &gt; let x: Int? = nil<br>&gt; &gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt; &gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; if let x = x {<br>&gt; &gt; foo.bar(x: x)<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; What do you think?<br>&gt; &gt; <br>&gt; &gt; Thanks,<br>&gt; &gt; Justin<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/fcf157c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 9:46 AM, Justin Jia via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think the `?` will make the return an optional. So your example should add another ? at the end.<br>&gt; <br>&gt; ```<br>&gt; print(foo(bar(42)?, baz(42)?)?)<br></p><p>This reads terribly, IMHO.<br></p><p>&gt; ```<br>&gt; <br>&gt; The above example should be equivalent to:<br>&gt; <br>&gt; ```<br>&gt; let x = bar(42) // X is optional<br>&gt; let y = baz(42) // Y is optional<br>&gt; <br>&gt; let z = foo(x?, y?) // Z should be optional now<br>&gt; print(z?)<br>&gt; ```<br>&gt; <br>&gt; which should be equivalent to;<br>&gt; <br>&gt; ```<br>&gt; let x = bar(42)<br>&gt; let y = baz(42)<br>&gt; <br>&gt; if let x = x, let y = y {<br>&gt;     z = foo(x, y)<br>&gt; }<br></p><p>What if baz doesn&#39;t return optional?<br></p><p>if let x = bar(42) {<br>	let y = baz(42)<br>	z = foo(x, y)<br>}<br></p><p>or <br></p><p>let y = baz(42)<br>if let x = bar(42) {<br>	z = foo(x, y)<br>}<br></p><p><br>If both are evaluated, this is really inconsistent with<br></p><p>if let x = bar(42), y = baz(42) { ... }<br></p><p>which will short-circuit and baz will not be evaluated if x is evaluated as nil.<br></p><p>&gt; <br>&gt; if let z = z {<br>&gt;     print(z)<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; We don’t need to worry about “short-circuit” now because it should be equivalent to the above syntax.<br>&gt; <br>&gt; &gt; It has been mentioned before (more than once, perhaps, but not in its own thread I don&#39;t think, so good luck finding it). IIRC, one of the problems is that it&#39;s unclear what happens if your function takes multiple arguments. Does evaluation proceed from left to right? does it short-circuit? Put concretely:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; func bar(_ x: Int) -&gt;Int? { /* side effects */ }<br>&gt; &gt; func baz(_ y: Int) -&gt;Int? { /* side effects */ }<br>&gt; &gt; func foo(_ z: Int, _ a: Int) -&gt;Int { /* ... */ }<br>&gt; &gt; <br>&gt; &gt; print(foo(bar(42)?, baz(42)?))<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; Does baz(42) get evaluated if bar returns nil? Does bar(42) get evaluated if baz returns nil?<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; On Mon, Aug 15, 2016 at 2:02 AM, Justin Jia via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; Hi!<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Let’s say we have a struct with a function:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; struct Foo {<br>&gt; &gt; &gt; func bar(x: Int)<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; We can use optionals:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; let foo: Foo? = nil<br>&gt; &gt; &gt; let x = 1<br>&gt; &gt; &gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt; &gt; &gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; However:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; let foo = Foo()<br>&gt; &gt; &gt; let x: Int? = nil<br>&gt; &gt; &gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt; &gt; &gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; if let x = x {<br>&gt; &gt; &gt; foo.bar(x: x)<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; What do you think?<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Thanks,<br>&gt; &gt; &gt; Justin<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/cfca7f36/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/582b7183bda90126e385e2cc95cb7088?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Justin Jia</string> &lt;justin.jia.developer at gmail.com&gt;<p>August 15, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 3:53 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Aug 15, 2016, at 9:46 AM, Justin Jia via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think the `?` will make the return an optional. So your example should add another ? at the end.<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; print(foo(bar(42)?, baz(42)?)?)<br>&gt; <br>&gt; This reads terribly, IMHO.<br>&gt; <br></p><p>I agree that this reads terribly. But this is only an edge case. I would prefer `let output = foo(bar(42)?, baz(42)?); print(output?)`. However, I want to argue that for most cases “?” reads better than “if let”.<br></p><p>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; The above example should be equivalent to:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; let x = bar(42) // X is optional<br>&gt;&gt; let y = baz(42) // Y is optional<br>&gt;&gt; <br>&gt;&gt; let z = foo(x?, y?) // Z should be optional now<br>&gt;&gt; print(z?)<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; which should be equivalent to;<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; let x = bar(42)<br>&gt;&gt; let y = baz(42)<br>&gt;&gt; <br>&gt;&gt; if let x = x, let y = y {<br>&gt;&gt;     z = foo(x, y)<br>&gt;&gt; }<br>&gt; <br>&gt; What if baz doesn&#39;t return optional?<br>&gt; <br></p><p>If baz doesn’t return optional, then we don’t even need this syntax:<br></p><p>We can just write: `z(bar(42)?, baz(42)` and treat baz(42) like normal.<br></p><p>Which should be equivalent to:<br></p><p>```<br>```<br>let x = bar(42)<br>let y = baz(42)<br></p><p>if let x = x {<br>    z = foo(x, y)<br>}<br>```<br></p><p>&gt; if let x = bar(42) {<br>&gt; 	let y = baz(42)<br>&gt; 	z = foo(x, y)<br>&gt; }<br>&gt; <br>&gt; or <br>&gt; <br>&gt; let y = baz(42)<br>&gt; if let x = bar(42) {<br>&gt; 	z = foo(x, y)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; If both are evaluated, this is really inconsistent with<br>&gt; <br>&gt; if let x = bar(42), y = baz(42) { ... }<br>&gt; <br>&gt; which will short-circuit and baz will not be evaluated if x is evaluated as nil.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; if let z = z {<br>&gt;&gt;     print(z)<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; We don’t need to worry about “short-circuit” now because it should be equivalent to the above syntax.<br>&gt;&gt; <br>&gt;&gt; &gt; It has been mentioned before (more than once, perhaps, but not in its own thread I don&#39;t think, so good luck finding it). IIRC, one of the problems is that it&#39;s unclear what happens if your function takes multiple arguments. Does evaluation proceed from left to right? does it short-circuit? Put concretely:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; ```<br>&gt;&gt; &gt; func bar(_ x: Int) -&gt;Int? { /* side effects */ }<br>&gt;&gt; &gt; func baz(_ y: Int) -&gt;Int? { /* side effects */ }<br>&gt;&gt; &gt; func foo(_ z: Int, _ a: Int) -&gt;Int { /* ... */ }<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; print(foo(bar(42)?, baz(42)?))<br>&gt;&gt; &gt; ```<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Does baz(42) get evaluated if bar returns nil? Does bar(42) get evaluated if baz returns nil?<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; On Mon, Aug 15, 2016 at 2:02 AM, Justin Jia via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt; &gt; &gt; Hi!<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; Let’s say we have a struct with a function:<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; struct Foo {<br>&gt;&gt; &gt; &gt; func bar(x: Int)<br>&gt;&gt; &gt; &gt; }<br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; We can use optionals:<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; let foo: Foo? = nil<br>&gt;&gt; &gt; &gt; let x = 1<br>&gt;&gt; &gt; &gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt; &gt; &gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; However:<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; let foo = Foo()<br>&gt;&gt; &gt; &gt; let x: Int? = nil<br>&gt;&gt; &gt; &gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt; &gt; &gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; if let x = x {<br>&gt;&gt; &gt; &gt; foo.bar(x: x)<br>&gt;&gt; &gt; &gt; }<br>&gt;&gt; &gt; &gt; ```<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; What do you think?<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; Thanks,<br>&gt;&gt; &gt; &gt; Justin<br>&gt;&gt; &gt; &gt; <br>&gt;&gt; &gt; &gt; _______________________________________________<br>&gt;&gt; &gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/e0196865/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>August 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Le 15 août 2016 à 10:01, Justin Jia via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Aug 15, 2016, at 3:53 PM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Aug 15, 2016, at 9:46 AM, Justin Jia via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the `?` will make the return an optional. So your example should add another ? at the end.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; print(foo(bar(42)?, baz(42)?)?)<br>&gt;&gt; <br>&gt;&gt; This reads terribly, IMHO.<br>&gt;&gt; <br>&gt; <br>&gt; I agree that this reads terribly. But this is only an edge case. I would prefer `let output = foo(bar(42)?, baz(42)?); print(output?)`. However, I want to argue that for most cases “?” reads better than “if let”.<br>&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The above example should be equivalent to:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; let x = bar(42) // X is optional<br>&gt;&gt;&gt; let y = baz(42) // Y is optional<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let z = foo(x?, y?) // Z should be optional now<br>&gt;&gt;&gt; print(z?)<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; which should be equivalent to;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; let x = bar(42)<br>&gt;&gt;&gt; let y = baz(42)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let x = x, let y = y {<br>&gt;&gt;&gt;     z = foo(x, y)<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; What if baz doesn&#39;t return optional?<br>&gt;&gt; <br>&gt; <br>&gt; If baz doesn’t return optional, then we don’t even need this syntax:<br>&gt; <br>&gt; We can just write: `z(bar(42)?, baz(42)` and treat baz(42) like normal.<br>&gt; <br>&gt; Which should be equivalent to:<br>&gt; <br>&gt; ```<br>&gt; ```<br>&gt; let x = bar(42)<br>&gt; let y = baz(42)<br>&gt; <br>&gt; if let x = x {<br>&gt;     z = foo(x, y)<br>&gt; }<br>&gt; ```<br>&gt; <br></p><p>It is not consistent which what I expect when calling foo?.bar(baz(42))<br></p><p>In that case, if foo is nil, bad is never evaluated.<br></p><p><br>&gt;&gt; if let x = bar(42) {<br>&gt;&gt; 	let y = baz(42)<br>&gt;&gt; 	z = foo(x, y)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; or <br>&gt;&gt; <br>&gt;&gt; let y = baz(42)<br>&gt;&gt; if let x = bar(42) {<br>&gt;&gt; 	z = foo(x, y)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; If both are evaluated, this is really inconsistent with<br>&gt;&gt; <br>&gt;&gt; if let x = bar(42), y = baz(42) { ... }<br>&gt;&gt; <br>&gt;&gt; which will short-circuit and baz will not be evaluated if x is evaluated as nil.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let z = z {<br>&gt;&gt;&gt;     print(z)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We don’t need to worry about “short-circuit” now because it should be equivalent to the above syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; It has been mentioned before (more than once, perhaps, but not in its own thread I don&#39;t think, so good luck finding it). IIRC, one of the problems is that it&#39;s unclear what happens if your function takes multiple arguments. Does evaluation proceed from left to right? does it short-circuit? Put concretely:<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; ```<br>&gt;&gt;&gt; &gt; func bar(_ x: Int) -&gt;Int? { /* side effects */ }<br>&gt;&gt;&gt; &gt; func baz(_ y: Int) -&gt;Int? { /* side effects */ }<br>&gt;&gt;&gt; &gt; func foo(_ z: Int, _ a: Int) -&gt;Int { /* ... */ }<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; print(foo(bar(42)?, baz(42)?))<br>&gt;&gt;&gt; &gt; ```<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; Does baz(42) get evaluated if bar returns nil? Does bar(42) get evaluated if baz returns nil?<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; On Mon, Aug 15, 2016 at 2:02 AM, Justin Jia via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt; &gt; &gt; Hi!<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; Let’s say we have a struct with a function:<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; struct Foo {<br>&gt;&gt;&gt; &gt; &gt; func bar(x: Int)<br>&gt;&gt;&gt; &gt; &gt; }<br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; We can use optionals:<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; let foo: Foo? = nil<br>&gt;&gt;&gt; &gt; &gt; let x = 1<br>&gt;&gt;&gt; &gt; &gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt; &gt; &gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; However:<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; let foo = Foo()<br>&gt;&gt;&gt; &gt; &gt; let x: Int? = nil<br>&gt;&gt;&gt; &gt; &gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt; &gt; &gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; if let x = x {<br>&gt;&gt;&gt; &gt; &gt; foo.bar(x: x)<br>&gt;&gt;&gt; &gt; &gt; }<br>&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; What do you think?<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; Thanks,<br>&gt;&gt;&gt; &gt; &gt; Justin<br>&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt; &gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/658f2603/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/582b7183bda90126e385e2cc95cb7088?s=50"></div><header><strong>[Idea] Use optionals for non-optional parameters</strong> from <string>Justin Jia</string> &lt;justin.jia.developer at gmail.com&gt;<p>August 15, 2016 at 04:00:00pm</p></header><div class="content"><p>Thanks for pointing this out! But I think `foo?.bar(baz(42))` should be equivalent to:<br></p><p>```<br>if let foo = foo {<br>    let x = baz(42)<br>    foo.bar(x)<br>}<br>```<br></p><p>IMHO, this is consistent with my example. Instead of worrying about &quot;short-circuit&quot;, we can just treat ? as the syntax sugar of if let?<br></p><p>&gt; On Aug 15, 2016, at 4:07 PM, Jean-Daniel Dupas &lt;mailing at xenonium.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Le 15 août 2016 à 10:01, Justin Jia via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 15, 2016, at 3:53 PM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 15, 2016, at 9:46 AM, Justin Jia via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think the `?` will make the return an optional. So your example should add another ? at the end.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; print(foo(bar(42)?, baz(42)?)?)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This reads terribly, IMHO.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I agree that this reads terribly. But this is only an edge case. I would prefer `let output = foo(bar(42)?, baz(42)?); print(output?)`. However, I want to argue that for most cases “?” reads better than “if let”.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The above example should be equivalent to:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; let x = bar(42) // X is optional<br>&gt;&gt;&gt;&gt; let y = baz(42) // Y is optional<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let z = foo(x?, y?) // Z should be optional now<br>&gt;&gt;&gt;&gt; print(z?)<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; which should be equivalent to;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; let x = bar(42)<br>&gt;&gt;&gt;&gt; let y = baz(42)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let x = x, let y = y {<br>&gt;&gt;&gt;&gt;     z = foo(x, y)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if baz doesn&#39;t return optional?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; If baz doesn’t return optional, then we don’t even need this syntax:<br>&gt;&gt; <br>&gt;&gt; We can just write: `z(bar(42)?, baz(42)` and treat baz(42) like normal.<br>&gt;&gt; <br>&gt;&gt; Which should be equivalent to:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; ```<br>&gt;&gt; let x = bar(42)<br>&gt;&gt; let y = baz(42)<br>&gt;&gt; <br>&gt;&gt; if let x = x {<br>&gt;&gt;     z = foo(x, y)<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt; <br>&gt; It is not consistent which what I expect when calling foo?.bar(baz(42))<br>&gt; <br>&gt; In that case, if foo is nil, bad is never evaluated.<br>&gt; <br>&gt; <br>&gt;&gt;&gt; if let x = bar(42) {<br>&gt;&gt;&gt; 	let y = baz(42)<br>&gt;&gt;&gt; 	z = foo(x, y)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let y = baz(42)<br>&gt;&gt;&gt; if let x = bar(42) {<br>&gt;&gt;&gt; 	z = foo(x, y)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If both are evaluated, this is really inconsistent with<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let x = bar(42), y = baz(42) { ... }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; which will short-circuit and baz will not be evaluated if x is evaluated as nil.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if let z = z {<br>&gt;&gt;&gt;&gt;     print(z)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We don’t need to worry about “short-circuit” now because it should be equivalent to the above syntax.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; It has been mentioned before (more than once, perhaps, but not in its own thread I don&#39;t think, so good luck finding it). IIRC, one of the problems is that it&#39;s unclear what happens if your function takes multiple arguments. Does evaluation proceed from left to right? does it short-circuit? Put concretely:<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; func bar(_ x: Int) -&gt;Int? { /* side effects */ }<br>&gt;&gt;&gt;&gt; &gt; func baz(_ y: Int) -&gt;Int? { /* side effects */ }<br>&gt;&gt;&gt;&gt; &gt; func foo(_ z: Int, _ a: Int) -&gt;Int { /* ... */ }<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; print(foo(bar(42)?, baz(42)?))<br>&gt;&gt;&gt;&gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; Does baz(42) get evaluated if bar returns nil? Does bar(42) get evaluated if baz returns nil?<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; On Mon, Aug 15, 2016 at 2:02 AM, Justin Jia via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;&gt; &gt; &gt; Hi!<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; I don’t know if this has came up before. I tried to search though the mailing list but didn’t find any related threads.<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; This is purely a syntactic thing (which I know it’s the lowest priority for Swift 4), but I think it’s an important one.<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; Let’s say we have a struct with a function:<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; struct Foo {<br>&gt;&gt;&gt;&gt; &gt; &gt; func bar(x: Int)<br>&gt;&gt;&gt;&gt; &gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; We can use optionals:<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; let foo: Foo? = nil<br>&gt;&gt;&gt;&gt; &gt; &gt; let x = 1<br>&gt;&gt;&gt;&gt; &gt; &gt; foo!.bar(x: x) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt;&gt; &gt; &gt; foo?.bar(x: x) // Able to compile, and won&#39;t cause runtime error<br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; However:<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; let foo = Foo()<br>&gt;&gt;&gt;&gt; &gt; &gt; let x: Int? = nil<br>&gt;&gt;&gt;&gt; &gt; &gt; foo.bar(x: x!) // Able to compile, but will cause runtime error<br>&gt;&gt;&gt;&gt; &gt; &gt; foo.bar(x: x?) // Won&#39;t compile<br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; I propose that we should allow `foo.bar(x: x?)`, which should be equivalent to:<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; if let x = x {<br>&gt;&gt;&gt;&gt; &gt; &gt; foo.bar(x: x)<br>&gt;&gt;&gt;&gt; &gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt; &gt; ```<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; What do you think?<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; Thanks,<br>&gt;&gt;&gt;&gt; &gt; &gt; Justin<br>&gt;&gt;&gt;&gt; &gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160815/992eafb5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
