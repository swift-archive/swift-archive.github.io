<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Fwd: [Pitch] merge types and protocols back together with type&lt;Type, Protocol, ...&gt;</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 13, 2016 at 05:00:00pm</p></header><div class="content"><p>Resending message to list. Seems like iOS Mail (or me) really has problems with setting the reply to the list automatically :-(<br>Thanks, Adrian, for notifying me.<br></p><p>-Thorsten <br></p><p>Anfang der weitergeleiteten E‑Mail:<br></p><p>&gt; Von: Adrian Zubarev &lt;adrian.zubarev at devandartist.com&gt;<br>&gt; Datum: 13. Mai 2016 um 16:50:52 MESZ<br>&gt; An: Thorsten Seitz &lt;tseitz42 at icloud.com&gt;<br>&gt; Betreff: Re: [swift-evolution] [Pitch] merge types and protocols back together with type&lt;Type, Protocol, ...&gt;<br>&gt; <br>&gt; Your message was private, maybe by accident? Consider to resend it to the public thread if you’d like. ;)<br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 13. Mai 2016 bei 08:16:51, Thorsten Seitz (tseitz42 at icloud.com) schrieb:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 12. Mai 2016 um 22:08 schrieb Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; I don’t get the part how `all&lt;&gt;` should allow `any&lt;&gt;`. Could you explain that a little bit in detail (I’m not familiar with Ceylon)?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; `all&lt;&gt;` and `any&lt;&gt;` form a pair of complementary type operators, one creating the intersection of the given types (your proposal) and the other creating the union of the given types. As Ceylon has demonstrated that both are really useful I&#39;d like to have both in Swift and therefore would prefer that both should be named such that this duality is visible. Having `type&lt;&gt;` and `any&lt;&gt;` would certainly be possible technically but the naming would not be good.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From my point of view `any&lt;&gt;` is something different that I pitched here. `any&lt;&gt;` could be proposed in its own thread, because it is way different than `type&lt;&gt;`. Or can we refine the rules of `type&lt;&gt;` to get to `any&lt;&gt;`?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; You are right, `any&lt;&gt;` is something different and could be proposed in its own thread. I just wanted to extend the context for finding a good name for `type&lt;&gt;`.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here is a little example where `any&lt;&gt;` gets strange:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(value: any&lt;String, Int&gt;) -&gt; any&lt;String, Int&gt; {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // how would one use value here?<br>&gt;&gt;&gt;     // what about its properties<br>&gt;&gt;&gt;     // what will foo return and how to use the result<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Ceylon uses flow typing for that (if (is String value) { /* value has type String here */ }).<br>&gt;&gt; In Swift the equivalent would be `if let string = value as? String { ... }`:<br>&gt;&gt; <br>&gt;&gt; func foo(value: any&lt;Strint, Int&gt;) -&gt; any&lt;String, Int&gt; {<br>&gt;&gt;    if let string = value as? String {<br>&gt;&gt;       return string.characters.count<br>&gt;&gt;    }<br>&gt;&gt;    else if let int= value as? Int {<br>&gt;&gt;       return String(int)<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; A more sensical example using a type union would be the union of two sets:<br>&gt;&gt; <br>&gt;&gt; func union&lt;T, U&gt;(a: Set&lt;T&gt;, b: Set&lt;U&gt;) -&gt; Set&lt;any&lt;T, U&gt;&gt; { ... }<br>&gt;&gt; <br>&gt;&gt; And for type intersection the intersection of two sets:<br>&gt;&gt; <br>&gt;&gt; func intersection&lt;T, U&gt;(a: Set&lt;T&gt;, b: Set&lt;U&gt;) -&gt; Set&lt;all&lt;T, U&gt;&gt; { ... }<br>&gt;&gt; <br>&gt;&gt; (Ceylon&#39;s type operators just read better there...)<br>&gt;&gt; <br>&gt;&gt; Another example for type unions:<br>&gt;&gt; Ceylon like Swift makes heavy use of optionals but where Swift has a generic wrapper Optional&lt;T&gt; Ceylon just makes use of type unions: in Ceylon T? is syntactic sugar for the type union T | Null where Null is the type having the singleton value null.<br>&gt;&gt; <br>&gt;&gt; FWIW Microsoft&#39;s Typescript gained union and intersection types about (I think) a year ago.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One benefit of `any&lt;&gt;` is the replacement of overloading, at least for the type part of the function.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Exactly.<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt;&gt; `all&lt;&gt;` could be seen as an alternative name for `type&lt;&gt;`, but to me its not clear what `all&lt;&gt;` can do, whereas `type&lt;&gt;` is almost like `protocol&lt;&gt;`.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Right, `all&lt;&gt;` is just an alternative name for `type&lt;&gt;`. There is no change in functionality.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 12. Mai 2016 bei 21:40:24, Thorsten Seitz (tseitz42 at icloud.com) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ceylon uses „&amp;&quot; for intersection types, i.e.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; SomeRealClass &amp; SomeProtocol<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and the bar („|“) for union types, i.e. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; String | Int<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That has proven to be very lightweight and readable in Ceylon where it is heavily used to good effect.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with you that<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; type&lt;SomeRealClass, SomeProtocol&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is much nicer than protocol&lt;&gt; for intersection types but to keep the door open for union types, I would prefer<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; all&lt;SomeRealClass, SomeProtocol&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This would allow<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; any&lt;String, Int&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; to be used for union types.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 12.05.2016 um 16:09 schrieb Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol&lt;SomeRealClass, SomeProtocol&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol&lt;SomeRealStruct, SomeProtocol&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This feels really odd to me. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; `type&lt;SomeRealClass, SomeProtocol&gt;` is more clear I’d say.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think this would be a good addition to the type system and allow us to build more complex and type save code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But still I’d love to discuss if there might be any disadvantages to this feature.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 12. Mai 2016 bei 15:11:00, Vladimir.S (svabox at gmail.com) schrieb:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol&lt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/edd5af4b/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
