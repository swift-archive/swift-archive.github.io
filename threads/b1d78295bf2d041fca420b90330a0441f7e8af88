<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>libdispatch renaming feedback</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>June 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Here’s some feedback after translating some Dispatch-heavy code for the new Dispatch module.<br></p><p>1. I like the result. Thanks for the effort!<br></p><p>2. Omissions<br></p><p>- Can&#39;t initialize a new queue or obtain a global queue using a DispatchQoS instance. [SR-1770]<br></p><p>One thing I have previously done was the following:<br></p><p>let anotherQueue: dispatch_queue_t = &lt;somethingvalid&gt;<br>let matchedQueue = dispatch_get_global_queue(dispatch_queue_get_qos_class(anotherQueue, nil), 0)<br></p><p>There is no longer a way to do this.<br></p><p>Given that all the methods that enqueue blocks for execution have DispatchQoS parameters, this must be an oversight (I didn’t notice it when reviewing the proposal).<br></p><p>The following should exist:<br>extension DispatchQueue {<br>  init(qos: DispatchQoS, attributes: DispatchQueueAttributes)<br>  class func global(qos: DispatchQoS, attributes: DispatchQueue.GlobalAttributes) -&gt; DispatchQueue<br>}<br>extension DispatchQueueAttributes {<br>  // replacing dispatch_queue_attr_make_with_qos_class:<br>  init(qos: DispatchQoS, attributes: DispatchQueueAttributes)<br>}<br></p><p>- DispatchTime should be Comparable [SR-1771]<br></p><p>- qos_class_self() and qos_class_main() do not translate to DispatchQoS [SR-1769]<br></p><p>Since qos_class_t presumably isn’t disappearing (it’s used by Darwin pthreads), the following are needed:<br></p><p>extension DispatchQoS {<br>  static func current() -&gt; DispatchQoS // equivalent to qos_class_self()<br>  static var main: DispatchQoS // equivalent to qos_class_main()<br>  init(qos: qos_class_t) // perhaps with a relativePriority?<br>}<br></p><p>3. Oddities<br></p><p>- DispatchQueueAttributes is top-level, while DispatchQueue.GlobalAttributes is not.<br></p><p>DispatchQueue.Attributes would look better to my eyes.<br></p><p>- Similarly, DispatchWorkItemFlags is top-level; it could perhaps be DispatchWorkItem.Flags<br></p><p>- QualityOfService and DispatchQoS.QoSClass seem redundant. One of these could probably go.<br>(QualityOfService is defined under Foundation.NSObjCRuntime and is an enum with rawValue)<br></p><p><br>4. Bad translations or fixits<br></p><p>- dispatch_get_global_queue(qos_class_self(), 0) gets an invalid suggestion (then again there is a void there, as noted above)<br></p><p>- dispatch_block_create does not have a fixit pointing to the new DispatchWorkItem type.<br></p><p><br>Cheers,<br>Guillaume Lessard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/901d914d4288b1c11599f55e0a452e8c?s=50"></div><header><strong>libdispatch renaming feedback</strong> from <string>Matt Wright</string> &lt;mww at apple.com&gt;<p>June 18, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 15, 2016, at 11:14 AM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s some feedback after translating some Dispatch-heavy code for the new Dispatch module.<br>&gt; <br>&gt; 1. I like the result. Thanks for the effort!<br>&gt; <br>&gt; 2. Omissions<br>&gt; <br>&gt; - Can&#39;t initialize a new queue or obtain a global queue using a DispatchQoS instance. [SR-1770]<br>&gt; <br>&gt; One thing I have previously done was the following:<br>&gt; <br>&gt; let anotherQueue: dispatch_queue_t = &lt;somethingvalid&gt;<br>&gt; let matchedQueue = dispatch_get_global_queue(dispatch_queue_get_qos_class(anotherQueue, nil), 0)<br>&gt; <br>&gt; There is no longer a way to do this.<br></p><p>Thanks for the feedback. I’ll take a look at getting something in that can do this.<br></p><p>&gt; <br>&gt; Given that all the methods that enqueue blocks for execution have DispatchQoS parameters, this must be an oversight (I didn’t notice it when reviewing the proposal).<br>&gt; <br>&gt; The following should exist:<br>&gt; extension DispatchQueue {<br>&gt;  init(qos: DispatchQoS, attributes: DispatchQueueAttributes)<br>&gt;  class func global(qos: DispatchQoS, attributes: DispatchQueue.GlobalAttributes) -&gt; DispatchQueue<br>&gt; }<br>&gt; extension DispatchQueueAttributes {<br>&gt;  // replacing dispatch_queue_attr_make_with_qos_class:<br>&gt;  init(qos: DispatchQoS, attributes: DispatchQueueAttributes)<br>&gt; }<br>&gt; <br>&gt; - DispatchTime should be Comparable [SR-1771]<br></p><p>I’m curious why you need to compare DispatchTime values but if you can do this via rawValue it seems like it should be Comparable, even if I can’t bring to mind an immediately useful use-case.<br></p><p>&gt; - qos_class_self() and qos_class_main() do not translate to DispatchQoS [SR-1769]<br></p><p>SR-1769 has already been brought to my attention! I think that more or less covers all the comments you had about qos_class_t &lt;-&gt; DispatchQoS.<br></p><p>&gt; <br>&gt; Since qos_class_t presumably isn’t disappearing (it’s used by Darwin pthreads), the following are needed:<br>&gt; <br>&gt; extension DispatchQoS {<br>&gt;  static func current() -&gt; DispatchQoS // equivalent to qos_class_self()<br>&gt;  static var main: DispatchQoS // equivalent to qos_class_main()<br>&gt;  init(qos: qos_class_t) // perhaps with a relativePriority?<br>&gt; }<br>&gt; <br>&gt; 3. Oddities<br>&gt; <br>&gt; - DispatchQueueAttributes is top-level, while DispatchQueue.GlobalAttributes is not.<br></p><p>I can’t immediately recall why I made this top-level but there was a technical problem with moving it into DispatchQueue. Perhaps that no longer exist, I’ll try again.<br></p><p>&gt; <br>&gt; DispatchQueue.Attributes would look better to my eyes.<br>&gt; <br>&gt; - Similarly, DispatchWorkItemFlags is top-level; it could perhaps be DispatchWorkItem.Flags<br>&gt; <br>&gt; - QualityOfService and DispatchQoS.QoSClass seem redundant. One of these could probably go.<br>&gt; (QualityOfService is defined under Foundation.NSObjCRuntime and is an enum with rawValue)<br></p><p>There are backwards compatibility issues with combining Foundation.QualityOfService and DispatchQoS.QoSClass. For now they need to remain separate.<br></p><p>&gt; <br>&gt; <br>&gt; 4. Bad translations or fixits<br>&gt; <br>&gt; - dispatch_get_global_queue(qos_class_self(), 0) gets an invalid suggestion (then again there is a void there, as noted above)<br>&gt; <br>&gt; - dispatch_block_create does not have a fixit pointing to the new DispatchWorkItem type.<br>&gt; <br>&gt; <br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
