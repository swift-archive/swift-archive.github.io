<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 13, 2016 at 09:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>Thank you,<br></p><p>-Joe<br>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160113/6105fdd6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution] [Review] Naming Functions with Argument Labels</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt; <br></p><p>Sorry, Mail mangled the link here, and the review runs through January 18th. Here&#39;s the corrected link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160113/5f2e5754/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>January 13, 2016 at 08:00:00pm</p></header><div class="content"><p>Should the proposal include an exclusion list where the disambiguation still need to be resolved by an explicit type declaration. The first is currently hidden in the detailed design, so easy to miss as an exclusion. I compiled the following list based on the previous thread and my understanding of the proposal<br></p><p>Referencing to a parameter less function variant<br></p><p>func foo() { print(&quot;foo&quot;) }<br>func foo(_ :Int) { print(&quot;foo(_:)&quot;) }<br>let fn: () -&gt; () = foo<br></p><p>Referencing to a function variant which differ only by return type<br></p><p>func foo(_: Int) -&gt; Int { print(&quot; foo -&gt; Int&quot;); return 0 }<br>func foo(_: Int) -&gt; Bool { print(&quot; foo -&gt; Bool&quot;); return true }<br>let fn: (Int) -&gt; Int = foo<br></p><p>Referencing to a function variant which have same labels but different parameter types<br></p><p>func foo(_: Int, value: Int) { print(&quot;foo Int&quot;) }<br>func foo(_: Int, value: Float) { print(&quot;foo Float&quot;) }<br>let fn: (Int, Float) = foo // Still ambiguous reference<br></p><p>The proposal could also highlight that the following is no longer ambiguous.<br></p><p>func foo(_: Int, Celsius: Int) { print(&quot;foo Celsius&quot;) }<br>func foo(_: Int, Kelvin: Int) { print(&quot;foo Kelvin&quot;) }<br>let fn: (Int, Celsius: Int) = foo // Still/was ambiguous reference<br>let fn: = foo(_:Celsius:) // Fixed by the proposal<br></p><p>I started to write this note based on the second draft, so I was looking for default parameter example, and there seem to be an issue<br></p><p>func foo(a: Int = 1, b: Int = 2) { print(&quot;foo(\(a),\(b))&quot;) }<br>let fn = foo<br>fn() // error: missing argument for parameter #1 in call<br>fn(10) // error: cannot convert value of type &#39;Int&#39; to expected argument type &#39;(Int, b: Int)&#39;<br>fn(10,b:20)<br>fn(b:20) // error: missing argument for parameter #1 in call<br>// All the above work when using foo() instead of fn()<br></p><p>Dany<br></p><p>&gt; Le 13 janv. 2016 à 12:20, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt;&gt; <br>&gt; <br>&gt; Sorry, Mail mangled the link here, and the review runs through January 18th. Here&#39;s the corrected link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt;<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/26a889f9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[swift-evolution-announce] [Review] Naming Functions with Argument Labels</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>January 13, 2016 at 11:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>I am in favor of this proposal. <br></p><p>	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>The proposal has a more narrow scope than the original, but I think it addresses the problem it is trying to solve which is the ability to name functions with argument labels unambiguously. <br></p><p>	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>This new version is simpler than the original and the notation is elegant, concise and consistent with the Swift language. It does not address naming property getters / setters but I am guessing that is outside the scope of this proposal and being addressed by Lens. <br></p><p>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve used Objective-C which Swift integrates with extensively. This is very similar to the naming of selectors and for that reason I think it will work well for mapping method names between Objective-C and Swift. <br></p><p>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the original proposal and a lot of the emails. I had my reservations about the notation originally proposed and specially the back ticks. I wasn&#39;t sure if I liked it. However, now that the proposal has a more narrow scope, and the notation has been changed, I think it strikes the right balance that Swift is known for: elegant, concise and consistent. <br></p><p><br>&gt; On Jan 13, 2016, at 12:20 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt; <br>&gt; Sorry, Mail mangled the link here, and the review runs through January 18th. Here&#39;s the corrected link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/2f2181b1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[swift-evolution-announce] [Review] Naming Functions with Argument Labels</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January 13, 2016 at 11:00:00pm</p></header><div class="content"><p>Without posting a full review, I’ll just drop a note in favor of the proposed syntax (underscores for anonymous args, colons, no commas, typically formatted with no spaces). This is exactly what we settled on more or less by default when adding robust autolinking to Jazzy:<br></p><p>https://github.com/realm/jazzy/issues/328#issuecomment-152064809 &lt;https://github.com/realm/jazzy/issues/328#issuecomment-152064809&gt;<br></p><p>This syntax is already widely used enough that I considered it an already established informal Swift standard at the time, and I’m not aware of any complaints about it from Jazzy users.<br></p><p>Cheers, P<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/38ac6983/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>[swift-evolution-announce] [Review] Naming Functions with Argument Labels</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>January 14, 2016 at 11:00:00pm</p></header><div class="content"><p>Strong +1 on the proposal and on the syntax. I find that it passes the<br>&quot;principle of least surprise&quot;, personally it&#39;s what I would expect the<br>language to accept.<br>Looking forward to this!<br>On Wed, Jan 13, 2016 at 9:04 PM Paul Cantrell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Without posting a full review, I’ll just drop a note in favor of the<br>&gt; proposed syntax (underscores for anonymous args, colons, no commas,<br>&gt; typically formatted with no spaces). This is exactly what we settled on<br>&gt; more or less by default when adding robust autolinking to Jazzy:<br>&gt;<br>&gt; https://github.com/realm/jazzy/issues/328#issuecomment-152064809<br>&gt;<br>&gt; This syntax is already widely used enough that I considered it an already<br>&gt; established informal Swift standard at the time, and I’m not aware of any<br>&gt; complaints about it from Jazzy users.<br>&gt;<br>&gt; Cheers, P<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/8a449648/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7759950c169ff7ec3ad7b0d858402fb2?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Roopesh Chander</string> &lt;roop at roopc.net&gt;<p>January 19, 2016 at 01:00:00pm</p></header><div class="content"><p>Doug / Joe,<br></p><p>Sorry about asking this after the review period: it&#39;s not clear to me how<br>the assigned functions can be called.<br></p><p>In case I have:<br></p><p>    let fn1 = someView.insertSubview(_:aboveSubview:)<br>    let fn2 = someView.insertSubview(_:belowSubview:)<br></p><p>will the types of both fn1 and fn2 be the same (i.e., (UIView, UIView) -&gt;<br>())? Will I be able to call them without having to use the<br>aboveSubview/belowSubview labels, like:<br></p><p>    fn1(view1, view2)<br>    fn2(view3, view4)<br></p><p>Thanks,<br>roop.<br></p><p><br>On Wed, Jan 13, 2016 at 10:50 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs<br>&gt; through January 10th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt;<br>&gt;<br>&gt; Sorry, Mail mangled the link here, and the review runs through January *18th.<br>&gt; *Here&#39;s the corrected link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/efae33a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 19, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Jan 18, 2016, at 11:53 PM, Roopesh Chander via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Doug / Joe,<br>&gt; <br>&gt; Sorry about asking this after the review period: it&#39;s not clear to me how the assigned functions can be called.<br>&gt; <br>&gt; In case I have:<br>&gt; <br>&gt;     let fn1 = someView.insertSubview(_:aboveSubview:)<br>&gt;     let fn2 = someView.insertSubview(_:belowSubview:)<br>&gt; <br>&gt; will the types of both fn1 and fn2 be the same (i.e., (UIView, UIView) -&gt; ())? Will I be able to call them without having to use the aboveSubview/belowSubview labels, like:<br>&gt; <br>&gt;     fn1(view1, view2)<br>&gt;     fn2(view3, view4)<br></p><p>Right now, you&#39;ll still need to use labels in the call. However, this is an area where we&#39;d like to revisit things a bit: having labels in function types seems to cause more trouble than it provides benefits, and I&#39;d like to see up address that directly.<br></p><p>  - Doug<br></p><p><br>&gt; Thanks,<br>&gt; roop.<br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Jan 13, 2016 at 10:50 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 13, 2016, at 9:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt;&gt; <br>&gt;&gt; Sorry, Mail mangled the link here, and the review runs through January 18th. Here&#39;s the corrected link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/5ecda654/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted] SE-0021 Naming Functions with Argument Labels</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 20, 2016 at 11:00:00am</p></header><div class="content"><p>The review of SE-0021 &quot;Naming Functions with Argument Labels&quot; ran from January 13...18, 2016. The proposal has been accepted. We plan to introduce the new syntax in both 2.2 and 3.0, using Doug&#39;s implementation at https://github.com/DougGregor/swift/tree/se-0021-generalized-naming. Support for the proposal was overwhelmingly positive. A number of contributors proposed an alternative syntax, using a placeholder in the argument value position:<br></p><p>let x = Foo.bar(_, bas: _)<br></p><p>with the idea that this could potentially generalize to partial application syntax. We don&#39;t think this is a good direction for Swift for a couple of reasons. Swift already has fairly compact syntax for forming closures over partially applied functions, { Foo.bar($0, bas: $1) }. It may not be everyone&#39;s aesthetic cup of tea, but this notation has several important advantages. The braces unambiguously delineate the boundaries of the closure, which is a subtle problem with Scala-like approaches. The braces also provide a visual cue that capture is occurring. The $n placeholders are also more general since they allow for reordering of arguments. &#39;_&#39; in particular is also a poor choice of placeholder, since in other contexts where it&#39;s used, it&#39;s meant as a &quot;black hole&quot; for value binding in patterns rather than as a placeholder for a meaningful bound value.<br></p><p>Another concern that was repeatedly raised was how to disambiguate overloads. We feel that contextual type disambiguation is sufficient for the use cases we envision. Cocoa&#39;s naming conventions already limit the amount of overloading that occurs in frameworks (though the Swift 3 renaming introduces more), and unapplied functions are generally used in contexts with adequate type context, such as parameters to higher-order functions. Introducing purpose-built syntax, such as interleaving types into the name like &quot;Foo.(_: Int bar: String)&quot;, would increase the complexity and ambiguity of the feature for relatively little gain.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160120/2157093a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I like it quite a bit.  <br></p><p>It uses very readable syntax and covers most cases (I’m glad to see the backticks are gone).  Requiring a typing context for disambiguation when the labels are not sufficient seems like a reasonable approach.<br></p><p>I would really like to see a solution for getter/setters in Swift 3 but agree that lenses are the right approach to that and it would be an independent proposal.  <br></p><p>I agree that the general partial application syntax is unnecessary.  It might be nice to have something a bit cleaner than $0 for shorthand in closures someday and _ might work for that, however it is an orthogonal topic.  <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read both drafts of the proposal and followed the discussion on the list.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>January 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>As a developer using Swift in a large project, I’ve had a few situations where this proposal would have been useful. As the proposal states, you can always wrap the explicit call in a closure, but that’s more cumbersome and potentially not as efficient (I wonder if there’s a compiler optimization to replace the closure with the function it calls). To that end, I would love to see this in Swift.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p><br>I am by no means a compiler engineer, so I can’t speak to the level of effort to implement it compared to the benefit, but I do think it’s a clear benefit to Swift without a lot of impact on existing code, if any.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Incidentally, I’m already using this syntax in a book &lt;https://pragprog.com/book/jkwatch2/developing-for-apple-watch-second-edition&gt; I’m writing that uses Swift; I refer to methods like setTintColor(_:) all the time.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve read the discussion on swift-evolution, read the final proposal on GitHub, and run into this problem in the “real world.”<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Jan 13, 2016, at 12:16 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/5e6a16c6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8da0cba30fa0e47cf4fb26ebb968e552?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Jérôme Duquennoy</string> &lt;jerome+swift at duquennoy.fr&gt;<p>January 13, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>This proposal does solve a real problem.<br>I have one concern about that proposal though: this is solving a compiler ambiguity, but I think it would introduce a &quot;visual&quot; ambiguity :<br>	let variable = function(arg1, argName: arg2) // function call<br>	let variable = function (_:, argName:) // assign function to a variable<br>Those who lines, despite being pretty close visually, are very different.<br>I have the feeling that it might make non-obvious pieces a bit harder to read. That could reduce swift readability.<br></p><p>Todays method (using a closure) is more verbose, but it is less ambiguous visually I think.<br>I would be happy to have this possibility, but not at the cost of code readability.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>As a developper, I didn&#39;t encounter that situation a lot : I assign closures to variables much more than functions.<br>Nevertheless, the current situation sounds a bit like an incoherency between the way swift identifies methods internally and the way the developper can refer to methods. I am absolutely no expert in compilers, but can that be a flaw that would become problematic later on ? Sorry, I cannot say :-). But if it is, then the problem surely is significant enough to be addressed.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>As explained before, I feel the syntax proposed in that evolution has a cost on readability, as it makes two very different things very similar visually.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve read the discussion on swift-evolution and the final proposal on GitHub.<br>I have to say that I didn&#39;t even found a syntax that I could propose to avoid the visual ambiguity.<br></p><p>Jerome<br></p><p>&gt; Le 13 janv. 2016 à 18:16, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/7256aab0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 13, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 13, 2016, at 12:08 PM, Jérôme Duquennoy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; This proposal does solve a real problem.<br>&gt; I have one concern about that proposal though: this is solving a compiler ambiguity, but I think it would introduce a &quot;visual&quot; ambiguity :<br>&gt; 	let variable = function(arg1, argName: arg2) // function call<br>&gt; 	let variable = function (_:, argName:) // assign function to a variable<br>&gt; Those who lines, despite being pretty close visually, are very different.<br>&gt; I have the feeling that it might make non-obvious pieces a bit harder to read. That could reduce swift readability.<br></p><p>FWIW, there are no commas in the compound names of this proposal. That last line should be:<br></p><p>	let variable = function(_:argName:) // assign function to a variable<br></p><p>In the case where there is a first argument label, it is visually close:<br></p><p>	let variable = function(foo:bar:)<br></p><p>one has to scan to the last ‘:’ to distinguish it from a call.<br></p><p>	- Doug<br></p><p>&gt; Todays method (using a closure) is more verbose, but it is less ambiguous visually I think.<br>&gt; I would be happy to have this possibility, but not at the cost of code readability.<br>&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; As a developper, I didn&#39;t encounter that situation a lot : I assign closures to variables much more than functions.<br>&gt; Nevertheless, the current situation sounds a bit like an incoherency between the way swift identifies methods internally and the way the developper can refer to methods. I am absolutely no expert in compilers, but can that be a flaw that would become problematic later on ? Sorry, I cannot say :-). But if it is, then the problem surely is significant enough to be addressed.<br>&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; As explained before, I feel the syntax proposed in that evolution has a cost on readability, as it makes two very different things very similar visually.<br>&gt; <br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I’ve read the discussion on swift-evolution and the final proposal on GitHub.<br>&gt; I have to say that I didn&#39;t even found a syntax that I could propose to avoid the visual ambiguity.<br>&gt; <br>&gt; Jerome<br>&gt; <br>&gt;&gt; Le 13 janv. 2016 à 18:16, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/e1013346/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 14, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;m a -1 because of the syntax, I think it&#39;s nice and concise, and<br>unambiguous, but while it&#39;s familiar to people used to ObjectiveC it&#39;s<br>closer to ObjectiveC syntax than it is Swift.<br></p><p>I would +1 this proposal if the syntax was like this:<br>    let fn1 = someView.insertSubview(_,aboveSubview:)<br>    let fn = someView.insertSubview(_,at:_) // optional _ if it&#39;s needed to<br>disambiguate<br></p><p>That syntax would allow it to be naturally extended to support partial<br>application (Like what Bartlomiej Cichosz suggests<br>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151228/004739.html&gt;<br>):<br>    let t1 = someView.insertSubview(_ , aboveSubview:  ) // equivalent of<br>yours<br>    let t2 = someView.insertSubview(_ , aboveSubview:v1) // partial<br>application<br>    let t3 = someView.insertSubview(v0, aboveSubview:v1) // calling a<br>function<br></p><p>This syntax is not quite as concise, but is much less surprising and more<br>logical than yours:<br>    let u1 = someView.insertSubview( _*:* aboveSubview:   ) // yours<br>    let u2 = someView.insertSubview( _, aboveSubview: v1) // partial<br>application<br>    let u3 = someView.insertSubview(v0, aboveSubview: v1) // calling a<br>function<br></p><p>The first *:* in u1 is jarring and differs greatly from the expected<br>syntax. Whether the partial application syntax is adopted or not; the<br>delimiters are different to what you use when declaring or calling a<br>function, the exception doesn&#39;t seem necessary.<br></p><p><br>On Thu, Jan 14, 2016 at 10:05 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 13, 2016, at 12:08 PM, Jérôme Duquennoy via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt;<br>&gt; This proposal does solve a real problem.<br>&gt; I have one concern about that proposal though: this is solving a compiler<br>&gt; ambiguity, but I think it would introduce a &quot;visual&quot; ambiguity :<br>&gt; let variable = function(arg1, argName: arg2) // function call<br>&gt; let variable = function (_:, argName:) // assign function to a variable<br>&gt; Those who lines, despite being pretty close visually, are very different.<br>&gt; I have the feeling that it might make non-obvious pieces a bit harder to<br>&gt; read. That could reduce swift readability.<br>&gt;<br>&gt;<br>&gt; FWIW, there are no commas in the compound names of this proposal. That<br>&gt; last line should be:<br>&gt;<br>&gt; let variable = function(_:argName:) // assign function to a variable<br>&gt;<br>&gt; In the case where there is a first argument label, it is visually close:<br>&gt;<br>&gt; let variable = function(foo:bar:)<br>&gt;<br>&gt; one has to scan to the last ‘:’ to distinguish it from a call.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; Todays method (using a closure) is more verbose, but it is less ambiguous<br>&gt; visually I think.<br>&gt; I would be happy to have this possibility, but not at the cost of code<br>&gt; readability.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt;<br>&gt; As a developper, I didn&#39;t encounter that situation a lot : I assign<br>&gt; closures to variables much more than functions.<br>&gt; Nevertheless, the current situation sounds a bit like an incoherency<br>&gt; between the way swift identifies methods internally and the way the<br>&gt; developper can refer to methods. I am absolutely no expert in compilers,<br>&gt; but can that be a flaw that would become problematic later on ? Sorry, I<br>&gt; cannot say :-). But if it is, then the problem surely is significant enough<br>&gt; to be addressed.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; As explained before, I feel the syntax proposed in that evolution has a<br>&gt; cost on readability, as it makes two very different things very similar<br>&gt; visually.<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt;<br>&gt; I’ve read the discussion on swift-evolution and the final proposal on<br>&gt; GitHub.<br>&gt; I have to say that I didn&#39;t even found a syntax that I could propose to<br>&gt; avoid the visual ambiguity.<br>&gt;<br>&gt; Jerome<br>&gt;<br>&gt; Le 13 janv. 2016 à 18:16, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs<br>&gt; through January 10th. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/4699fcd8/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6bd902ea39480cfd0a34cf8bc63dfc14?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Nathan de Vries</string> &lt;ndevries at apple.com&gt;<p>January 14, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Joe,<br></p><p>Do you have a plan for selecting between class and instance methods with the same name?<br></p><p>—Nathan<br></p><p><br>&gt; On Jan 14, 2016, at 4:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/4951119a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>January 13, 2016 at 10:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1 What? it is not already part of the language :-)  Seems pretty natural to me. <br></p><p>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>	* Does this proposal fit well with the feel and direction of Swift?<br>  Yes<br></p><p>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>yes Obj-c does this so it should be familiar to objc users and not that hard for newer users. <br></p><p>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read proposal and some of the threads. <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/33831575/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] Naming Functions with Argument Labels</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 14, 2016 at 12:00:00am</p></header><div class="content"><p>On Wed, Jan 13, 2016, at 09:16 AM, Joe Groff wrote:<br>&gt; * What is your evaluation of the proposal?<br></p><p>I&#39;m tentatively in favor. I think this solves a real problem, and I like<br>that it&#39;s re-using the same syntax that we already use to talk about<br>functions in documentation and discussions. I&#39;m mildly concerned about<br>the visual ambiguity, and about the fact that if the parser encounters<br>`foo.bar(baz: qux` it doesn&#39;t know yet if &quot;qux&quot; is supposed to be an<br>expression (because it&#39;s a function call) or just a bare identifier<br>(because it&#39;s a function reference), and it can&#39;t know that until it<br>sees a colon. I&#39;m also mildly concerned that this feature will make it<br>impossible to ever introduce a single colon as a valid character in an<br>expression that&#39;s not surrounded by delimiters (e.g. dictionary literals<br>are fine because of the delimiters), but I&#39;m not sure if that&#39;s<br>something we&#39;d ever want to do (note that introducing a double colon,<br>e.g. ::, is fine because that&#39;s not legal in a function reference).<br></p><p>Given that I think the ambiguity can be dealt with, and I don&#39;t think<br>the visual ambiguity is particularly bad, and I&#39;d like to see this<br>problem have a solution, that&#39;s why I&#39;m tentatively in favor of it.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;   change to Swift?<br></p><p>I think so, yes.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; * If you have you used other languages or libraries with a similar<br>&gt;   feature, how do you feel that this proposal compares to those?<br></p><p>I have not. The languages I can think of that have similar types of<br>function references don&#39;t have infix method names (or don&#39;t even support<br>overloading).<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;   reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/acc1ab3b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] Naming Functions with Argument Labels</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 14, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I&#39;m conflicted.<br></p><p>If there is even the slightest chance that a future version of Swift will ever add placeholder-based currying like `foo(1, bar: _)`, I strongly favor using an underscore-based syntax for this feature now. A placeholder-based currying syntax is a strict superset of this proposal&#39;s capabilities, so there&#39;s no reason to end up supporting three syntaxes; we can introduce the most sorely needed subset first and then make it more powerful later.<br></p><p>If there is absolutely no chance that placeholder-based currying will be added, even in Swift 4 or later, then I am in favor of this proposal.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>On the whole, yes. It&#39;s definitely an annoyance that you can&#39;t always access the method variant you need.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. It turns a common convention into running code.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don&#39;t really have any relevant experience. I haven&#39;t worked with many languages that supported both overloading and method references.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve followed and participated in the thread, and spent a day or two thinking about my review before I wrote it.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] Naming Functions with Argument Labels</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>January 14, 2016 at 01:00:00pm</p></header><div class="content"><p>+1<br></p><p>I think it solves a real problem and solves it about as well as this particular problem can be solved at this time.<br></p><p>The syntax seems good-enough, as-proposed, to me.<br></p><p>&gt; On Jan 13, 2016, at 11:16 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Naming Functions with Argument Labels&quot; begins now and runs through January 10th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/51a4d9f8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
