<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/33536e304f2318595dbd6104fdb0bd4a?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Alejandro Martinez</string> &lt;alexito4 at gmail.com&gt;<p>December  8, 2015 at 08:00:00pm</p></header><div class="content"><p>Hi everyone, <br></p><p>Don&#39;t take this mail as an oficial proposal but just as some food for thought, I wanted to talk about this to see what you think about it.<br></p><p>I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in many instances proposals that could have been solved by a macro system, being just a temporal solution since everything can&#39;t be done just now or being a permanent solution if that macro system existed. Some of them may include the thread about &quot;code smells&quot;, automatic wrapper synthesis or deriving, or even the topic about forwarding calls automatically to an inner object.<br></p><p>My thinking was how difficult or viable it would be to run Swift code from our programs at compile time. I&#39;m not experienced enough on computer languages to see it. The first time that I saw this was in a video from Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked like a really good idea. It would be much better that force people to learn another language (the macro language) or any other kind of preprocessor, instead you could use all your knowledge but just at compile time. It can also have good usages apart form generating code, but generating data that can be generated and known at compile time. And allow even to improve the usage of the language (maybe DSL) at a library level. <br></p><p>Blow seems like is going one step further and allowing the program to call the compiler as if it was a library and even he talks about allowing it to modify the AST, which is maybe going a little to far away.<br></p><p>Anyway, that&#39;s the idea. Obviously is not something to be done in the near future. <br></p><p>And sorry if it doesn&#39;t make any sense and I&#39;m just making you lose your time.<br></p><p>Cheers, <br></p><p>Alejandro Martínez<br>@alexito4<br>http://alejandromp.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December  9, 2015 at 09:00:00am</p></header><div class="content"><p>I like this idea in principle and I know my colleague at work was wishing<br>for it yesterday.<br></p><p>C++11 has a constexpr which can be calculated at compile time, it can also<br>call to other functions which are constexpr.<br></p><p>You can make static assertions that produce a compile-time error.<br></p><p>Another powerful feature of this is that a function&#39;s argument or return<br>type could also be a constexpr.  This could allow protocols to be much<br>stronger and have assertions or type restrictions that are currently only<br>in documentation. Perhaps generic type constraints could be more expressive<br>too.<br></p><p>:+1: if it doesn&#39;t add much syntax, is safe and unsurprising I&#39;m all for<br>this.<br></p><p>On Wed, Dec 9, 2015 at 7:01 AM, Alejandro Martinez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; Don&#39;t take this mail as an oficial proposal but just as some food for<br>&gt; thought, I wanted to talk about this to see what you think about it.<br>&gt;<br>&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in<br>&gt; many instances proposals that could have been solved by a macro system,<br>&gt; being just a temporal solution since everything can&#39;t be done just now or<br>&gt; being a permanent solution if that macro system existed. Some of them may<br>&gt; include the thread about &quot;code smells&quot;, automatic wrapper synthesis or<br>&gt; deriving, or even the topic about forwarding calls automatically to an<br>&gt; inner object.<br>&gt;<br>&gt; My thinking was how difficult or viable it would be to run Swift code from<br>&gt; our programs at compile time. I&#39;m not experienced enough on computer<br>&gt; languages to see it. The first time that I saw this was in a video from<br>&gt; Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked<br>&gt; like a really good idea. It would be much better that force people to learn<br>&gt; another language (the macro language) or any other kind of preprocessor,<br>&gt; instead you could use all your knowledge but just at compile time. It can<br>&gt; also have good usages apart form generating code, but generating data that<br>&gt; can be generated and known at compile time. And allow even to improve the<br>&gt; usage of the language (maybe DSL) at a library level.<br>&gt;<br>&gt; Blow seems like is going one step further and allowing the program to call<br>&gt; the compiler as if it was a library and even he talks about allowing it to<br>&gt; modify the AST, which is maybe going a little to far away.<br>&gt;<br>&gt; Anyway, that&#39;s the idea. Obviously is not something to be done in the near<br>&gt; future.<br>&gt;<br>&gt; And sorry if it doesn&#39;t make any sense and I&#39;m just making you lose your<br>&gt; time.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; Alejandro Martínez<br>&gt; @alexito4<br>&gt; http://alejandromp.com<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/dfa7c11a/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 12:01 PM, Alejandro Martinez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone, <br>&gt; <br>&gt; Don&#39;t take this mail as an oficial proposal but just as some food for thought, I wanted to talk about this to see what you think about it.<br>&gt; <br>&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in many instances proposals that could have been solved by a macro system, being just a temporal solution since everything can&#39;t be done just now or being a permanent solution if that macro system existed. Some of them may include the thread about &quot;code smells&quot;, automatic wrapper synthesis or deriving, or even the topic about forwarding calls automatically to an inner object.<br>&gt; <br>&gt; My thinking was how difficult or viable it would be to run Swift code from our programs at compile time. I&#39;m not experienced enough on computer languages to see it. The first time that I saw this was in a video from Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked like a really good idea. It would be much better that force people to learn another language (the macro language) or any other kind of preprocessor, instead you could use all your knowledge but just at compile time. It can also have good usages apart form generating code, but generating data that can be generated and known at compile time. And allow even to improve the usage of the language (maybe DSL) at a library level. <br></p><p>This is something that could be very interesting! Unfortunately it is definitely out of scope for Swift 3.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/33536e304f2318595dbd6104fdb0bd4a?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Alejandro Martinez</string> &lt;alexito4 at gmail.com&gt;<p>December  9, 2015 at 07:00:00am</p></header><div class="content"><p>Yeah definitely nothing for Swift 3, totally understandable.<br>I was just curious if it was feasible or just a simple NONO.<br>Thanks for answering!<br></p><p>Sent from my iPad<br></p><p>&gt; On 09 Dec 2015, at 05:26, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 12:01 PM, Alejandro Martinez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone, <br>&gt;&gt; <br>&gt;&gt; Don&#39;t take this mail as an oficial proposal but just as some food for thought, I wanted to talk about this to see what you think about it.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in many instances proposals that could have been solved by a macro system, being just a temporal solution since everything can&#39;t be done just now or being a permanent solution if that macro system existed. Some of them may include the thread about &quot;code smells&quot;, automatic wrapper synthesis or deriving, or even the topic about forwarding calls automatically to an inner object.<br>&gt;&gt; <br>&gt;&gt; My thinking was how difficult or viable it would be to run Swift code from our programs at compile time. I&#39;m not experienced enough on computer languages to see it. The first time that I saw this was in a video from Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked like a really good idea. It would be much better that force people to learn another language (the macro language) or any other kind of preprocessor, instead you could use all your knowledge but just at compile time. It can also have good usages apart form generating code, but generating data that can be generated and known at compile time. And allow even to improve the usage of the language (maybe DSL) at a library level. <br>&gt; <br>&gt; This is something that could be very interesting! Unfortunately it is definitely out of scope for Swift 3.<br>&gt; <br>&gt; -Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>+1<br></p><p>I would like to end up with something incorporating quoted terms, macros,<br>and compile time evaluation.<br></p><p><br>On Wed, Dec 9, 2015 at 1:10 PM, Alejandro Martinez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yeah definitely nothing for Swift 3, totally understandable.<br>&gt; I was just curious if it was feasible or just a simple NONO.<br>&gt; Thanks for answering!<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; &gt; On 09 Dec 2015, at 05:26, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 8, 2015, at 12:01 PM, Alejandro Martinez via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi everyone,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Don&#39;t take this mail as an oficial proposal but just as some food for<br>&gt; thought, I wanted to talk about this to see what you think about it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen<br>&gt; in many instances proposals that could have been solved by a macro system,<br>&gt; being just a temporal solution since everything can&#39;t be done just now or<br>&gt; being a permanent solution if that macro system existed. Some of them may<br>&gt; include the thread about &quot;code smells&quot;, automatic wrapper synthesis or<br>&gt; deriving, or even the topic about forwarding calls automatically to an<br>&gt; inner object.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; My thinking was how difficult or viable it would be to run Swift code<br>&gt; from our programs at compile time. I&#39;m not experienced enough on computer<br>&gt; languages to see it. The first time that I saw this was in a video from<br>&gt; Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked<br>&gt; like a really good idea. It would be much better that force people to learn<br>&gt; another language (the macro language) or any other kind of preprocessor,<br>&gt; instead you could use all your knowledge but just at compile time. It can<br>&gt; also have good usages apart form generating code, but generating data that<br>&gt; can be generated and known at compile time. And allow even to improve the<br>&gt; usage of the language (maybe DSL) at a library level.<br>&gt; &gt;<br>&gt; &gt; This is something that could be very interesting! Unfortunately it is<br>&gt; definitely out of scope for Swift 3.<br>&gt; &gt;<br>&gt; &gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/b10f6916/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>December 13, 2015 at 11:00:00pm</p></header><div class="content"><p>Definite +1 from me.<br>Check out elaboration functions from hardware description languages.<br>Loading constants from files during compile is incredibly useful.<br></p><p><br>&gt; On 9 Dec 2015, at 08:47, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; I would like to end up with something incorporating quoted terms, macros, and compile time evaluation.<br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Dec 9, 2015 at 1:10 PM, Alejandro Martinez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Yeah definitely nothing for Swift 3, totally understandable.<br>&gt;&gt; I was just curious if it was feasible or just a simple NONO.<br>&gt;&gt; Thanks for answering!<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; &gt; On 09 Dec 2015, at 05:26, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Dec 8, 2015, at 12:01 PM, Alejandro Martinez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Hi everyone,<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Don&#39;t take this mail as an oficial proposal but just as some food for thought, I wanted to talk about this to see what you think about it.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in many instances proposals that could have been solved by a macro system, being just a temporal solution since everything can&#39;t be done just now or being a permanent solution if that macro system existed. Some of them may include the thread about &quot;code smells&quot;, automatic wrapper synthesis or deriving, or even the topic about forwarding calls automatically to an inner object.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; My thinking was how difficult or viable it would be to run Swift code from our programs at compile time. I&#39;m not experienced enough on computer languages to see it. The first time that I saw this was in a video from Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked like a really good idea. It would be much better that force people to learn another language (the macro language) or any other kind of preprocessor, instead you could use all your knowledge but just at compile time. It can also have good usages apart form generating code, but generating data that can be generated and known at compile time. And allow even to improve the usage of the language (maybe DSL) at a library level.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This is something that could be very interesting! Unfortunately it is definitely out of scope for Swift 3.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/93ca6fb9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December 20, 2015 at 09:00:00pm</p></header><div class="content"><p>Woah, Alejandro, thanks for posting this! That talk was super interesting, particularly exciting at 49:48 &lt;https://youtu.be/UTqZNujQOlA?t=49m48s&gt;. That was just plan cool. Jonathan Blow is quite the orthogonal thinker.<br></p><p>+1 for this, or at least to evaluate how it would fit into the language!<br></p><p>Tyler<br></p><p><br>&gt; On Dec 8, 2015, at 12:01 PM, Alejandro Martinez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone, <br>&gt; <br>&gt; Don&#39;t take this mail as an oficial proposal but just as some food for thought, I wanted to talk about this to see what you think about it.<br>&gt; <br>&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in many instances proposals that could have been solved by a macro system, being just a temporal solution since everything can&#39;t be done just now or being a permanent solution if that macro system existed. Some of them may include the thread about &quot;code smells&quot;, automatic wrapper synthesis or deriving, or even the topic about forwarding calls automatically to an inner object.<br>&gt; <br>&gt; My thinking was how difficult or viable it would be to run Swift code from our programs at compile time. I&#39;m not experienced enough on computer languages to see it. The first time that I saw this was in a video from Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA) and it looked like a really good idea. It would be much better that force people to learn another language (the macro language) or any other kind of preprocessor, instead you could use all your knowledge but just at compile time. It can also have good usages apart form generating code, but generating data that can be generated and known at compile time. And allow even to improve the usage of the language (maybe DSL) at a library level. <br>&gt; <br>&gt; Blow seems like is going one step further and allowing the program to call the compiler as if it was a library and even he talks about allowing it to modify the AST, which is maybe going a little to far away.<br>&gt; <br>&gt; Anyway, that&#39;s the idea. Obviously is not something to be done in the near future. <br>&gt; <br>&gt; And sorry if it doesn&#39;t make any sense and I&#39;m just making you lose your time.<br>&gt; <br>&gt; Cheers, <br>&gt; <br>&gt; Alejandro Martínez<br>&gt; @alexito4<br>&gt; http://alejandromp.com<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/668d104e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>Run Swift code at compile time</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>December 22, 2015 at 01:00:00pm</p></header><div class="content"><p>I don’t know if something like this has been done before, but I agree, the idea of the compile time version of the language being the same same as the runtime version, is very interesting. +1.<br></p><p>Matt<br></p><p>&gt; On Dec 20, 2015, at 21:43, Tyler Fleming Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Woah, Alejandro, thanks for posting this! That talk was super interesting, particularly exciting at 49:48 &lt;https://youtu.be/UTqZNujQOlA?t=49m48s&gt;. That was just plan cool. Jonathan Blow is quite the orthogonal thinker.<br>&gt; <br>&gt; +1 for this, or at least to evaluate how it would fit into the language!<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 12:01 PM, Alejandro Martinez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone, <br>&gt;&gt; <br>&gt;&gt; Don&#39;t take this mail as an oficial proposal but just as some food for thought, I wanted to talk about this to see what you think about it.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been following the list since the &quot;Open Source Day&quot; and I&#39;ve seen in many instances proposals that could have been solved by a macro system, being just a temporal solution since everything can&#39;t be done just now or being a permanent solution if that macro system existed. Some of them may include the thread about &quot;code smells&quot;, automatic wrapper synthesis or deriving, or even the topic about forwarding calls automatically to an inner object.<br>&gt;&gt; <br>&gt;&gt; My thinking was how difficult or viable it would be to run Swift code from our programs at compile time. I&#39;m not experienced enough on computer languages to see it. The first time that I saw this was in a video from Jonathan Blow (https://www.youtube.com/watch?v=UTqZNujQOlA &lt;https://www.youtube.com/watch?v=UTqZNujQOlA&gt;) and it looked like a really good idea. It would be much better that force people to learn another language (the macro language) or any other kind of preprocessor, instead you could use all your knowledge but just at compile time. It can also have good usages apart form generating code, but generating data that can be generated and known at compile time. And allow even to improve the usage of the language (maybe DSL) at a library level. <br>&gt;&gt; <br>&gt;&gt; Blow seems like is going one step further and allowing the program to call the compiler as if it was a library and even he talks about allowing it to modify the AST, which is maybe going a little to far away.<br>&gt;&gt; <br>&gt;&gt; Anyway, that&#39;s the idea. Obviously is not something to be done in the near future. <br>&gt;&gt; <br>&gt;&gt; And sorry if it doesn&#39;t make any sense and I&#39;m just making you lose your time.<br>&gt;&gt; <br>&gt;&gt; Cheers, <br>&gt;&gt; <br>&gt;&gt; Alejandro Martínez<br>&gt;&gt; @alexito4<br>&gt;&gt; http://alejandromp.com &lt;http://alejandromp.com/&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151222/4503b251/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
