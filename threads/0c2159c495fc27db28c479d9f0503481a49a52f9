<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  3, 2015 at 09:00:00pm</p></header><div class="content"><p>Would you consider replacing the C style ?: ternary operator to something<br>that does not use the question mark and colon ?<br></p><p>The use of &quot;?&quot; can be confusing when speed reading code with optionals.<br></p><p>Consider this code as somebody learning swift as their first language.<br></p><p>let result = !condition ? 1 : 2<br></p><p>Some alternatives:<br></p><p>Haskel<br></p><p>if predicate then expr1 else expr2<br></p><p>Python<br></p><p>result = x if a &gt; b else y<br></p><p>The advantage of not using the question mark is that the language will be<br>more consistency on the use of &quot;?&quot; to mean only optionals.<br></p><p><br>References:<br>https://devforums.apple.com/message/1020139#1020139<br>https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/0c2152f9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>December  4, 2015 at 04:00:00am</p></header><div class="content"><p>I agree that ternary can make code unreadable, especially so with the ???.<br>I personally like the Haskel option the most, but it introduces a new<br>keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is<br>therefore, in my opinion, the best alternative.<br></p><p>Also, I found it interesting how split the Rust community was about<br>removing the ternary operator.<br></p><p>?<br>Dan Appel<br></p><p>On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br></p><p>&gt; Would you consider replacing the C style ?: ternary operator to something<br>&gt; that does not use the question mark and colon ?<br>&gt;<br>&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals.<br>&gt;<br>&gt; Consider this code as somebody learning swift as their first language.<br>&gt;<br>&gt; let result = !condition ? 1 : 2<br>&gt;<br>&gt; Some alternatives:<br>&gt;<br>&gt; Haskel<br>&gt;<br>&gt; if predicate then expr1 else expr2<br>&gt;<br>&gt; Python<br>&gt;<br>&gt; result = x if a &gt; b else y<br>&gt;<br>&gt; The advantage of not using the question mark is that the language will be<br>&gt; more consistency on the use of &quot;?&quot; to mean only optionals.<br>&gt;<br>&gt;<br>&gt; References:<br>&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/121b0e2f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  3, 2015 at 11:00:00pm</p></header><div class="content"><p>I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br></p><p>l8r<br>Sean<br></p><p>&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; <br>&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt; <br>&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt; <br>&gt; ? <br>&gt; Dan Appel<br>&gt; <br>&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt; <br>&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt; <br>&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Some alternatives:<br>&gt;&gt; <br>&gt;&gt; Haskel <br>&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt; Python<br>&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; References:<br>&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/5080a8e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  4, 2015 at 08:00:00am</p></header><div class="content"><p>I also tend to agree but I don&#39;t like the ordering in the Python version and would rather see the introduction of the then keyword<br></p><p>&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt;&gt; <br>&gt;&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt;&gt; <br>&gt;&gt; ? <br>&gt;&gt; Dan Appel<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Haskel <br>&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt; Python<br>&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; References:<br>&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/0ad1824a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  4, 2015 at 12:00:00am</p></header><div class="content"><p>Of course one could just drop it as a grammatical language feature and turn it a standard library feature of some form, e.g.:<br></p><p>@warn_unused_result<br>func when&lt;T&gt;(@autoclosure expr: ()-&gt;Bool, @autoclosure value: ()-&gt;T, @autoclosure otherwise: ()-&gt;T) -&gt; T {<br>  if expr() {<br>    return value()<br>  }<br>  else {<br>    return otherwise()<br>  }<br>}<br></p><p>var a = when(1 + 1 == 2, value: &quot;works&quot;, otherwise: &quot;fails&quot;)<br></p><p>print(a) // =&gt; ?works&quot;<br></p><p>-DW<br></p><p>&gt; On Dec 4, 2015, at 12:26 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I also tend to agree but I don&#39;t like the ordering in the Python version and would rather see the introduction of the then keyword<br>&gt; <br>&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com &lt;mailto:dan.appel00 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ? <br>&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Haskel <br>&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt; Python<br>&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; References:<br>&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139 &lt;https://devforums.apple.com/message/1020139#1020139&gt;<br>&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066 &lt;https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/c2bf2958/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>Could alternatively could take a page from Smalltalk:<br></p><p>   extension Bool {<br>      func ifTrue&lt;T&gt;(@autoclosure isTrue: () -&gt; T, @autoclosure otherwise isFalse: () -&gt; T) -&gt; T {<br>         if self {<br>            return isTrue()<br>         } else {<br>            return isFalse()<br>         }<br>      }<br>   }<br></p><p>:)<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 4, 2015, at 1:40 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; Of course one could just drop it as a grammatical language feature and turn it a standard library feature of some form, e.g.:<br>&gt; <br>&gt; @warn_unused_result<br>&gt; func when&lt;T&gt;(@autoclosure expr: ()-&gt;Bool, @autoclosure value: ()-&gt;T, @autoclosure otherwise: ()-&gt;T) -&gt; T {<br>&gt;   if expr() {<br>&gt;     return value()<br>&gt;   }<br>&gt;   else {<br>&gt;     return otherwise()<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; var a = when(1 + 1 == 2, value: &quot;works&quot;, otherwise: &quot;fails&quot;)<br>&gt; <br>&gt; print(a) // =&gt; ?works&quot;<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 12:26 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I also tend to agree but I don&#39;t like the ordering in the Python version and would rather see the introduction of the then keyword<br>&gt;&gt; <br>&gt;&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ? <br>&gt;&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Haskel <br>&gt;&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt;&gt; Python<br>&gt;&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; References:<br>&gt;&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>-1 on Bool extension, this should exist as a free function. Reason?<br></p><p>(1 + 1 == 2).ifTrue(&quot;foo&quot;, otherwise: &quot;bar&quot;)<br></p><p>This: 1. doesn&#39;t look well; 2. is not clear and understandable; 3. doesn&#39;t allow condition to be a closure.<br></p><p><br>Pozdrawiam ? Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomo?? napisana przez Sean Heber &lt;sean at fifthace.com&gt; w dniu 04.12.2015, o godz. 16:54:<br>&gt; <br>&gt; Could alternatively could take a page from Smalltalk:<br>&gt; <br>&gt;   extension Bool {<br>&gt;      func ifTrue&lt;T&gt;(@autoclosure isTrue: () -&gt; T, @autoclosure otherwise isFalse: () -&gt; T) -&gt; T {<br>&gt;         if self {<br>&gt;            return isTrue()<br>&gt;         } else {<br>&gt;            return isFalse()<br>&gt;         }<br>&gt;      }<br>&gt;   }<br>&gt; <br>&gt; :)<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 1:40 AM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Of course one could just drop it as a grammatical language feature and turn it a standard library feature of some form, e.g.:<br>&gt;&gt; <br>&gt;&gt; @warn_unused_result<br>&gt;&gt; func when&lt;T&gt;(@autoclosure expr: ()-&gt;Bool, @autoclosure value: ()-&gt;T, @autoclosure otherwise: ()-&gt;T) -&gt; T {<br>&gt;&gt;  if expr() {<br>&gt;&gt;    return value()<br>&gt;&gt;  }<br>&gt;&gt;  else {<br>&gt;&gt;    return otherwise()<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; var a = when(1 + 1 == 2, value: &quot;works&quot;, otherwise: &quot;fails&quot;)<br>&gt;&gt; <br>&gt;&gt; print(a) // =&gt; ?works&quot;<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 12:26 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also tend to agree but I don&#39;t like the ordering in the Python version and would rather see the introduction of the then keyword<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ? <br>&gt;&gt;&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Haskel <br>&gt;&gt;&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt;&gt;&gt; Python<br>&gt;&gt;&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt;&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; References:<br>&gt;&gt;&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt;&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/1fc6baf1/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>There?s no need for the ?then&quot; keyword if you just allow if-expressions as well.<br></p><p>```<br>let result = if condition { 1 } else { 2 }<br>```<br></p><p>Or more verbosely:<br></p><p>```<br>let result =<br>    if condition {<br>        return 1<br>    }<br>    else {<br>        return 2<br>    }<br>```<br></p><p>The same could be for switch statements as well.<br></p><p>```<br>let result = switch item {<br>    case foo: 1<br>    case bar: 2<br>}<br>```<br></p><p>The above assume implicit returns on single-line statements on the condition/case branches.<br></p><p>-David<br></p><p>&gt; On Dec 3, 2015, at 11:26 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I also tend to agree but I don&#39;t like the ordering in the Python version and would rather see the introduction of the then keyword<br>&gt; <br>&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com &lt;mailto:dan.appel00 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ? <br>&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Haskel <br>&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt; Python<br>&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; References:<br>&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139 &lt;https://devforums.apple.com/message/1020139#1020139&gt;<br>&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066 &lt;https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/e4d7cf1c/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  4, 2015 at 06:00:00pm</p></header><div class="content"><p>Best proposition since, but still more verbose than the ternary operator.<br></p><p>&gt; On 04 Dec 2015, at 18:27, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt; <br>&gt; There?s no need for the ?then&quot; keyword if you just allow if-expressions as well.<br>&gt; <br>&gt; ```<br>&gt; let result = if condition { 1 } else { 2 }<br>&gt; ```<br>&gt; <br>&gt; Or more verbosely:<br>&gt; <br>&gt; ```<br>&gt; let result =<br>&gt;     if condition {<br>&gt;         return 1<br>&gt;     }<br>&gt;     else {<br>&gt;         return 2<br>&gt;     }<br>&gt; ```<br>&gt; <br>&gt; The same could be for switch statements as well.<br>&gt; <br>&gt; ```<br>&gt; let result = switch item {<br>&gt;     case foo: 1<br>&gt;     case bar: 2<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; The above assume implicit returns on single-line statements on the condition/case branches.<br>&gt; <br>&gt; -David<br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 11:26 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I also tend to agree but I don&#39;t like the ordering in the Python version and would rather see the introduction of the then keyword<br>&gt;&gt; <br>&gt;&gt;&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor of simplicity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree that ternary can make code unreadable, especially so with the ???. I personally like the Haskel option the most, but it introduces a new keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is therefore, in my opinion, the best alternative.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I found it interesting how split the Rust community was about removing the ternary operator.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ? <br>&gt;&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to something that does not use the question mark and colon ? <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Haskel <br>&gt;&gt;&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt;&gt;&gt; Python<br>&gt;&gt;&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt;&gt;&gt; The advantage of not using the question mark is that the language will be more consistency on the use of &quot;?&quot; to mean only optionals. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; References:<br>&gt;&gt;&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt;&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/780dbf0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>The motive is to desist the use of the question mark outside of the swift<br>optional context.<br>I like the rust style if-expression as an alternative.<br>Imo consistency and readability is a little more important than brevity.<br></p><p><br>On Friday, December 4, 2015, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>&gt; Best proposition since, but still more verbose than the ternary operator.<br>&gt;<br>&gt; On 04 Dec 2015, at 18:27, David Owens II &lt;david at owensd.io<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;david at owensd.io&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; There?s no need for the ?then&quot; keyword if you just allow if-expressions as<br>&gt; well.<br>&gt;<br>&gt; ```<br>&gt; let result = if condition { 1 } else { 2 }<br>&gt; ```<br>&gt;<br>&gt; Or more verbosely:<br>&gt;<br>&gt; ```<br>&gt; let result =<br>&gt;     if condition {<br>&gt;         return 1<br>&gt;     }<br>&gt;     else {<br>&gt;         return 2<br>&gt;     }<br>&gt; ```<br>&gt;<br>&gt; The same could be for switch statements as well.<br>&gt;<br>&gt; ```<br>&gt; let result = switch item {<br>&gt;     case foo: 1<br>&gt;     case bar: 2<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; The above assume implicit returns on single-line statements on the<br>&gt; condition/case branches.<br>&gt;<br>&gt; -David<br>&gt;<br>&gt; On Dec 3, 2015, at 11:26 PM, David Hart &lt;david at hartbit.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;david at hartbit.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; I also tend to agree but I don&#39;t like the ordering in the Python version<br>&gt; and would rather see the introduction of the then keyword<br>&gt;<br>&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;sean at fifthace.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I<br>&gt; wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor<br>&gt; of simplicity.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;dan.appel00 at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; I agree that ternary can make code unreadable, especially so with the ???.<br>&gt; I personally like the Haskel option the most, but it introduces a new<br>&gt; keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is<br>&gt; therefore, in my opinion, the best alternative.<br>&gt;<br>&gt; Also, I found it interesting how split the Rust community was about<br>&gt; removing the ternary operator.<br>&gt;<br>&gt; ?<br>&gt; Dan Appel<br>&gt;<br>&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;cheyo at masters3d.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Would you consider replacing the C style ?: ternary operator to something<br>&gt;&gt; that does not use the question mark and colon ?<br>&gt;&gt;<br>&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals.<br>&gt;&gt;<br>&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;<br>&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;<br>&gt;&gt; Some alternatives:<br>&gt;&gt;<br>&gt;&gt; Haskel<br>&gt;&gt;<br>&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;<br>&gt;&gt; Python<br>&gt;&gt;<br>&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;<br>&gt;&gt; The advantage of not using the question mark is that the language will be<br>&gt;&gt; more consistency on the use of &quot;?&quot; to mean only optionals.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; References:<br>&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/5d190911/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>I&#39;d like some feedback from the core team to see if eliminating the ternary<br>operator and replacing it with if-else is even proposal worthy.<br></p><p>Some interesting code in the standard library that uses the ternary<br>operator quite a bit.<br></p><p>https://gist.github.com/masters3d/7b0c6f3653368afe4357<br></p><p><br></p><p>On Fri, Dec 4, 2015 at 12:50 PM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt; The motive is to desist the use of the question mark outside of the swift<br>&gt; optional context.<br>&gt; I like the rust style if-expression as an alternative.<br>&gt; Imo consistency and readability is a little more important than brevity.<br>&gt;<br>&gt;<br>&gt; On Friday, December 4, 2015, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;<br>&gt;&gt; Best proposition since, but still more verbose than the ternary operator.<br>&gt;&gt;<br>&gt;&gt; On 04 Dec 2015, at 18:27, David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; There?s no need for the ?then&quot; keyword if you just allow if-expressions<br>&gt;&gt; as well.<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; let result = if condition { 1 } else { 2 }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Or more verbosely:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; let result =<br>&gt;&gt;     if condition {<br>&gt;&gt;         return 1<br>&gt;&gt;     }<br>&gt;&gt;     else {<br>&gt;&gt;         return 2<br>&gt;&gt;     }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; The same could be for switch statements as well.<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; let result = switch item {<br>&gt;&gt;     case foo: 1<br>&gt;&gt;     case bar: 2<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; The above assume implicit returns on single-line statements on the<br>&gt;&gt; condition/case branches.<br>&gt;&gt;<br>&gt;&gt; -David<br>&gt;&gt;<br>&gt;&gt; On Dec 3, 2015, at 11:26 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I also tend to agree but I don&#39;t like the ordering in the Python version<br>&gt;&gt; and would rather see the introduction of the then keyword<br>&gt;&gt;<br>&gt;&gt; On 04 Dec 2015, at 06:08, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I agree that using ? for ternary feels.. uncomfortable in Swift. I<br>&gt;&gt; wouldn&#39;t mind seeing Python-style or just eliminating it entirely in favor<br>&gt;&gt; of simplicity.<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt; On Dec 3, 2015, at 10:48 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I agree that ternary can make code unreadable, especially so with the<br>&gt;&gt; ???. I personally like the Haskel option the most, but it introduces a new<br>&gt;&gt; keyword ?then?, which isn?t great either. Python?s &quot;y if x else z&quot; is<br>&gt;&gt; therefore, in my opinion, the best alternative.<br>&gt;&gt;<br>&gt;&gt; Also, I found it interesting how split the Rust community was about<br>&gt;&gt; removing the ternary operator.<br>&gt;&gt;<br>&gt;&gt; ?<br>&gt;&gt; Dan Appel<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 3, 2015 at 7:58 PM J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Would you consider replacing the C style ?: ternary operator to<br>&gt;&gt;&gt; something that does not use the question mark and colon ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The use of &quot;?&quot; can be confusing when speed reading code with optionals.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Consider this code as somebody learning swift as their first language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let result = !condition ? 1 : 2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Some alternatives:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Haskel<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if predicate then expr1 else expr2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Python<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; result = x if a &gt; b else y<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The advantage of not using the question mark is that the language will<br>&gt;&gt;&gt; be more consistency on the use of &quot;?&quot; to mean only optionals.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; References:<br>&gt;&gt;&gt; https://devforums.apple.com/message/1020139#1020139<br>&gt;&gt;&gt; https://github.com/rust-lang/rust/issues/1698#issuecomment-3705066<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/023b991e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 11:43 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; I&#39;d like some feedback from the core team to see if eliminating the ternary operator and replacing it with if-else is even proposal worthy. <br>&gt; <br>&gt; Some interesting code in the standard library that uses the ternary operator quite a bit. <br>&gt; <br>&gt; https://gist.github.com/masters3d/7b0c6f3653368afe4357 &lt;https://gist.github.com/masters3d/7b0c6f3653368afe4357&gt;<br></p><p>FWIW, I have no love for the ternary operator (it is totally &quot;bizarre C magic”), but it does solve a problem that Swift currently otherwise has no solution for.<br></p><p>If you’re interested in pursuing this, then the right path forward is to build a holistic proposal to turn statements (like if and switch) into expressions.  This is subtle and requires thought, but is widely desired and if someone were interested in driving the design and implementation, then I’d be interested to see it happen.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/9fbdba0f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; This is subtle and requires thought<br></p><p>What do you envision as the pitfalls of the design thinking behind if/switch expressions? I’m not a compiler programmer, but a prog-lang enthusiast. I wouldn’t mind a little nudge in the right direction.<br></p><p>David.<br></p><p>&gt; On 05 Dec 2015, at 18:09, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 11:43 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d like some feedback from the core team to see if eliminating the ternary operator and replacing it with if-else is even proposal worthy. <br>&gt;&gt; <br>&gt;&gt; Some interesting code in the standard library that uses the ternary operator quite a bit. <br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/masters3d/7b0c6f3653368afe4357 &lt;https://gist.github.com/masters3d/7b0c6f3653368afe4357&gt;<br>&gt; <br>&gt; FWIW, I have no love for the ternary operator (it is totally &quot;bizarre C magic”), but it does solve a problem that Swift currently otherwise has no solution for.<br>&gt; <br>&gt; If you’re interested in pursuing this, then the right path forward is to build a holistic proposal to turn statements (like if and switch) into expressions.  This is subtle and requires thought, but is widely desired and if someone were interested in driving the design and implementation, then I’d be interested to see it happen.<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/4bbc13a2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0efc09d023fa0569a2479c9dcfd4620?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Ole Begemann</string> &lt;ole at oleb.net&gt;<p>December  6, 2015 at 12:00:00am</p></header><div class="content"><p>&gt;&gt; This is subtle and requires thought<br>&gt; <br>&gt; What do you envision as the pitfalls of the design thinking behind if/switch expressions? I’m not a compiler programmer, but a prog-lang enthusiast. I wouldn’t mind a little nudge in the right direction.<br></p><p>One thing that comes to mind is that if &quot;if&quot; is an expression, every if needs an else branch. This makes it harder to use if to conditionally perform side effects. For example, this is currently valid:<br></p><p>func doSomething() { ... }<br></p><p>if condition {<br>    doSomething()<br>}<br></p><p>Should this be allowed? You could argue that this should work because (a) the expression result is unused and (b) the return type of doSomething is Void, so the compiler could conceivably implicitly construct an else branch that returns (). But it would be inconsistent with other expressions. Disallowing this style could make writing typical &quot;imperative&quot; code harder.<br></p><p>– Ole<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7b8a49b110a1d384ee92092b99bd8b5?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Adam C. Lickel</string> &lt;adam at lickel.com&gt;<p>December  5, 2015 at 04:00:00pm</p></header><div class="content"><p>In that situation, the if statement could return a Void? where the else implicitly returns nil<br></p><p>&gt; On Dec 5, 2015, at 3:12 PM, Ole Begemann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; This is subtle and requires thought<br>&gt;&gt; <br>&gt;&gt; What do you envision as the pitfalls of the design thinking behind if/switch expressions? I’m not a compiler programmer, but a prog-lang enthusiast. I wouldn’t mind a little nudge in the right direction.<br>&gt; <br>&gt; One thing that comes to mind is that if &quot;if&quot; is an expression, every if needs an else branch. This makes it harder to use if to conditionally perform side effects. For example, this is currently valid:<br>&gt; <br>&gt; func doSomething() { ... }<br>&gt; <br>&gt; if condition {<br>&gt;    doSomething()<br>&gt; }<br>&gt; <br>&gt; Should this be allowed? You could argue that this should work because (a) the expression result is unused and (b) the return type of doSomething is Void, so the compiler could conceivably implicitly construct an else branch that returns (). But it would be inconsistent with other expressions. Disallowing this style could make writing typical &quot;imperative&quot; code harder.<br>&gt; <br>&gt; – Ole<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0efc09d023fa0569a2479c9dcfd4620?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Ole Begemann</string> &lt;ole at oleb.net&gt;<p>December  6, 2015 at 01:00:00am</p></header><div class="content"><p>Yeah, returning an optional is a good idea.<br></p><p>&gt; On 06 Dec 2015, at 01:22, Adam C. Lickel &lt;adam at lickel.com&gt; wrote:<br>&gt; <br>&gt; In that situation, the if statement could return a Void? where the else implicitly returns nil<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 3:12 PM, Ole Begemann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; This is subtle and requires thought<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you envision as the pitfalls of the design thinking behind if/switch expressions? I’m not a compiler programmer, but a prog-lang enthusiast. I wouldn’t mind a little nudge in the right direction.<br>&gt;&gt; <br>&gt;&gt; One thing that comes to mind is that if &quot;if&quot; is an expression, every if needs an else branch. This makes it harder to use if to conditionally perform side effects. For example, this is currently valid:<br>&gt;&gt; <br>&gt;&gt; func doSomething() { ... }<br>&gt;&gt; <br>&gt;&gt; if condition {<br>&gt;&gt;   doSomething()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Should this be allowed? You could argue that this should work because (a) the expression result is unused and (b) the return type of doSomething is Void, so the compiler could conceivably implicitly construct an else branch that returns (). But it would be inconsistent with other expressions. Disallowing this style could make writing typical &quot;imperative&quot; code harder.<br>&gt;&gt; <br>&gt;&gt; – Ole<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>I don&#39;t think you can just get rid of the if statement in favor of an<br>expression. You still want to be able to do this:<br></p><p>if (condition) {<br>    funcWithSideEffectsThatReturnsInt()<br>} else {<br>    funcWithSideEffectsThatReturnsString()<br>}<br></p><p>but that&#39;s not a valid expression (what is its type?).<br></p><p>On Sat, Dec 5, 2015 at 7:24 PM, Ole Begemann via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yeah, returning an optional is a good idea.<br>&gt;<br>&gt; &gt; On 06 Dec 2015, at 01:22, Adam C. Lickel &lt;adam at lickel.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; In that situation, the if statement could return a Void? where the else<br>&gt; implicitly returns nil<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 5, 2015, at 3:12 PM, Ole Begemann via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; This is subtle and requires thought<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; What do you envision as the pitfalls of the design thinking behind<br>&gt; if/switch expressions? I’m not a compiler programmer, but a prog-lang<br>&gt; enthusiast. I wouldn’t mind a little nudge in the right direction.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; One thing that comes to mind is that if &quot;if&quot; is an expression, every if<br>&gt; needs an else branch. This makes it harder to use if to conditionally<br>&gt; perform side effects. For example, this is currently valid:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; func doSomething() { ... }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; if condition {<br>&gt; &gt;&gt;   doSomething()<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Should this be allowed? You could argue that this should work because<br>&gt; (a) the expression result is unused and (b) the return type of doSomething<br>&gt; is Void, so the compiler could conceivably implicitly construct an else<br>&gt; branch that returns (). But it would be inconsistent with other<br>&gt; expressions. Disallowing this style could make writing typical &quot;imperative&quot;<br>&gt; code harder.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; – Ole<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/6787eefc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc2018ce0c170425a51033a54850a538?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Lukas Stabe</string> &lt;ahti333 at gmail.com&gt;<p>December  6, 2015 at 01:00:00am</p></header><div class="content"><p>&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt; <br>&gt; if (condition) {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt; <br>&gt; but that&#39;s not a valid expression (what is its type?).<br></p><p>An if statement with two different types could just have the closes common ancestor or Any as type.<br></p><p>&gt; Yeah, returning an optional is a good idea.<br></p><p>This would, interestingly, make the else statement very similar to the optional-chaining operator ?? with the small difference that the second argument is a block (and does ?? autoclosure the second arg?).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/611fa694/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>On Sat, Dec 5, 2015, at 04:32 PM, Lukas Stabe via swift-evolution wrote:<br>&gt;<br>&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt;&gt; expression. You still want to be able to do this:<br>&gt;&gt;<br>&gt;&gt; if (condition) {    funcWithSideEffectsThatReturnsInt() } else {<br>&gt;&gt; funcWithSideEffectsThatReturnsString() }<br>&gt;&gt;<br>&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;<br>&gt; An if statement with two different types could just have the closes<br>&gt; common ancestor or Any as type.<br></p><p>That&#39;s a great way to cause confusion.<br></p><p>Rust has this feature (all statements are expressions), and it requires<br>if statements to have an else branch with the same type unless the type<br>is `()`. It&#39;s solution to the issue of the branches returning unwanted<br>values is that Rust uses semicolons, and the semicolon acts sort of like<br>an operator that consumes any value and returns `()`, so if you<br>terminate the last statement of the branch with a semicolon, the whole<br>branch returns `()`, and if you leave it off, the branch returns a<br>value. It&#39;s actually very elegant and straightforward.<br></p><p>That said, proposing that Swift introduce this same rule for semicolons<br>is probably not a good idea. We certainly could declare that an explicit<br>semicolon has this behavior, so you&#39;d see people writing code like<br></p><p>if condition {    funcWithSideEffectsThatReturnsInt(); }<br></p><p>but it would be confusing because semicolons are almost never<br>used in Swift.<br></p><p>An alternative that would work today is just relying on assignment<br>returning Void, so you can write<br></p><p>if condition {    _ = funcWithSideEffectsThatReturnsInt() }<br></p><p>but that looks kind of weird and would probably also be confusing.<br>Better than the semicolon rule I think, but still not great.<br></p><p>Another option is to check if the return value is actually used<br>anywhere, and if it&#39;s not, then silently coerce it to Void. This way<br>you can write<br></p><p>if condition {    funcWithSideEffectsThatReturnsInt() } else {<br>funcWithSideEffectsThatReturnsString() }<br></p><p>and it would be fine but writing<br></p><p>let foo = if condition {    funcWithSideEffectsThatReturnsInt() } else {<br>funcWithSideEffectsThatReturnsString() }<br></p><p>would fail with a type error.<br></p><p>I suspect that this is the right approach, but it does involve a<br>bit of magic.<br></p><p>-Kevin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/df3334bb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>That approach seems fine to me; I don&#39;t think it seems like magic.<br></p><p>&quot;if x { returnsAnInt() } else { returnsAString() }&quot;  would have type Any,<br>but would only emit a warning if you actually tried to *use* the value.<br>Much like the current warning, &quot;*X inferred to have type Any, which may be<br>unexpected*&quot;.<br></p><p>Jacob Bandes-Storch<br></p><p>On Sat, Dec 5, 2015 at 7:53 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Sat, Dec 5, 2015, at 04:32 PM, Lukas Stabe via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt; expression. You still want to be able to do this:<br>&gt;<br>&gt; if (condition) {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;<br>&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;<br>&gt;<br>&gt; An if statement with two different types could just have the closes common<br>&gt; ancestor or Any as type.<br>&gt;<br>&gt;<br>&gt; That&#39;s a great way to cause confusion.<br>&gt;<br>&gt; Rust has this feature (all statements are expressions), and it requires if<br>&gt; statements to have an else branch with the same type unless the type is<br>&gt; `()`. It&#39;s solution to the issue of the branches returning unwanted values<br>&gt; is that Rust uses semicolons, and the semicolon acts sort of like an<br>&gt; operator that consumes any value and returns `()`, so if you terminate the<br>&gt; last statement of the branch with a semicolon, the whole branch returns<br>&gt; `()`, and if you leave it off, the branch returns a value. It&#39;s actually<br>&gt; very elegant and straightforward.<br>&gt;<br>&gt; That said, proposing that Swift introduce this same rule for semicolons is<br>&gt; probably not a good idea. We certainly could declare that an explicit<br>&gt; semicolon has this behavior, so you&#39;d see people writing code like<br>&gt;<br>&gt; if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt();<br>&gt; }<br>&gt;<br>&gt; but it would be confusing because semicolons are almost never used in<br>&gt; Swift.<br>&gt;<br>&gt; An alternative that would work today is just relying on assignment<br>&gt; returning Void, so you can write<br>&gt;<br>&gt; if condition {<br>&gt;     _ = funcWithSideEffectsThatReturnsInt()<br>&gt; }<br>&gt;<br>&gt; but that looks kind of weird and would probably also be confusing. Better<br>&gt; than the semicolon rule I think, but still not great.<br>&gt;<br>&gt; Another option is to check if the return value is actually used anywhere,<br>&gt; and if it&#39;s not, then silently coerce it to Void. This way you can write<br>&gt;<br>&gt; if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;<br>&gt; and it would be fine but writing<br>&gt;<br>&gt; let foo = if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;<br>&gt; would fail with a type error.<br>&gt;<br>&gt; I suspect that this is the right approach, but it does involve a bit of<br>&gt; magic.<br>&gt;<br>&gt; -Kevin<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/57e17cdd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc2018ce0c170425a51033a54850a538?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Lukas Stabe</string> &lt;ahti333 at gmail.com&gt;<p>December  6, 2015 at 05:00:00am</p></header><div class="content"><p>I agree.<br></p><p>I’m sure there are use-cases where the different branches return different types, both conforming to some protocol. Since we’d need to support these cases, this approach is also pretty clean, because Any is just another protocol.<br></p><p>The warning emitted should be silenceable by explicitly declaring the variable being assigned to as Any.<br></p><p>Lukas<br></p><p>&gt; On 06 Dec 2015, at 05:46, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That approach seems fine to me; I don&#39;t think it seems like magic.<br>&gt; <br>&gt; &quot;if x { returnsAnInt() } else { returnsAString() }&quot;  would have type Any, but would only emit a warning if you actually tried to use the value. Much like the current warning, &quot;X inferred to have type Any, which may be unexpected&quot;.<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Sat, Dec 5, 2015 at 7:53 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; On Sat, Dec 5, 2015, at 04:32 PM, Lukas Stabe via swift-evolution wrote:<br>&gt;&gt;  <br>&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; if (condition) {<br>&gt;&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;  <br>&gt;&gt; An if statement with two different types could just have the closes common ancestor or Any as type.<br>&gt;  <br>&gt; That&#39;s a great way to cause confusion.<br>&gt;  <br>&gt; Rust has this feature (all statements are expressions), and it requires if statements to have an else branch with the same type unless the type is `()`. It&#39;s solution to the issue of the branches returning unwanted values is that Rust uses semicolons, and the semicolon acts sort of like an operator that consumes any value and returns `()`, so if you terminate the last statement of the branch with a semicolon, the whole branch returns `()`, and if you leave it off, the branch returns a value. It&#39;s actually very elegant and straightforward.<br>&gt;  <br>&gt; That said, proposing that Swift introduce this same rule for semicolons is probably not a good idea. We certainly could declare that an explicit semicolon has this behavior, so you&#39;d see people writing code like<br>&gt;  <br>&gt; if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt();<br>&gt; }<br>&gt;  <br>&gt; but it would be confusing because semicolons are almost never used in Swift.<br>&gt;  <br>&gt; An alternative that would work today is just relying on assignment returning Void, so you can write<br>&gt;  <br>&gt; if condition {<br>&gt;     _ = funcWithSideEffectsThatReturnsInt()<br>&gt; }<br>&gt;  <br>&gt; but that looks kind of weird and would probably also be confusing. Better than the semicolon rule I think, but still not great.<br>&gt;  <br>&gt; Another option is to check if the return value is actually used anywhere, and if it&#39;s not, then silently coerce it to Void. This way you can write<br>&gt;  <br>&gt; if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;  <br>&gt; and it would be fine but writing<br>&gt;  <br>&gt; let foo = if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;  <br>&gt; would fail with a type error.<br>&gt;  <br>&gt; I suspect that this is the right approach, but it does involve a bit of magic.<br>&gt;  <br>&gt; -Kevin<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/f838508a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>If it&#39;s defined as type Any, then we&#39;d also need a guaranteed compiler<br>optimization (preferably one that happens in debug builds too) that<br>omits the creation of the `Any` value if it&#39;s unused.<br></p><p>-Kevin<br></p><p>On Sat, Dec 5, 2015, at 08:46 PM, Jacob Bandes-Storch wrote:<br>&gt; That approach seems fine to me; I don&#39;t think it seems like magic.<br>&gt;<br>&gt; &quot;if x { returnsAnInt() } else { returnsAString() }&quot;  would have type<br>&gt; Any, but would only emit a warning if you actually tried to *use* the<br>&gt; value. Much like the current warning, &quot;*X inferred to have type Any,<br>&gt; which may be unexpected*&quot;.<br>&gt;<br>&gt; Jacob Bandes-Storch<br>&gt;<br>&gt; On Sat, Dec 5, 2015 at 7:53 PM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt; __<br>&gt;&gt;<br>&gt;&gt; On Sat, Dec 5, 2015, at 04:32 PM, Lukas Stabe via swift-<br>&gt;&gt; evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of<br>&gt;&gt;&gt;&gt; an expression. You still want to be able to do this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if (condition) {    funcWithSideEffectsThatReturnsInt() } else {<br>&gt;&gt;&gt;&gt; funcWithSideEffectsThatReturnsString() }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; An if statement with two different types could just have the closes<br>&gt;&gt;&gt; common ancestor or Any as type.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That&#39;s a great way to cause confusion.<br>&gt;&gt;<br>&gt;&gt; Rust has this feature (all statements are expressions), and it<br>&gt;&gt; requires if statements to have an else branch with the same type<br>&gt;&gt; unless the type is `()`. It&#39;s solution to the issue of the branches<br>&gt;&gt; returning unwanted values is that Rust uses semicolons, and the<br>&gt;&gt; semicolon acts sort of like an operator that consumes any value and<br>&gt;&gt; returns `()`, so if you terminate the last statement of the branch<br>&gt;&gt; with a semicolon, the whole branch returns `()`, and if you leave it<br>&gt;&gt; off, the branch returns a value. It&#39;s actually very elegant and<br>&gt;&gt; straightforward.<br>&gt;&gt;<br>&gt;&gt; That said, proposing that Swift introduce this same rule for<br>&gt;&gt; semicolons is probably not a good idea. We certainly could declare<br>&gt;&gt; that an explicit semicolon has this behavior, so you&#39;d see people<br>&gt;&gt; writing code like<br>&gt;&gt;<br>&gt;&gt; if condition {    funcWithSideEffectsThatReturnsInt(); }<br>&gt;&gt;<br>&gt;&gt; but it would be confusing because semicolons are almost never used<br>&gt;&gt; in Swift.<br>&gt;&gt;<br>&gt;&gt; An alternative that would work today is just relying on assignment<br>&gt;&gt; returning Void, so you can write<br>&gt;&gt;<br>&gt;&gt; if condition {    _ = funcWithSideEffectsThatReturnsInt() }<br>&gt;&gt;<br>&gt;&gt; but that looks kind of weird and would probably also be confusing.<br>&gt;&gt; Better than the semicolon rule I think, but still not great.<br>&gt;&gt;<br>&gt;&gt; Another option is to check if the return value is actually used<br>&gt;&gt; anywhere, and if it&#39;s not, then silently coerce it to Void. This way<br>&gt;&gt; you can write<br>&gt;&gt;<br>&gt;&gt; if condition {    funcWithSideEffectsThatReturnsInt() } else {<br>&gt;&gt; funcWithSideEffectsThatReturnsString() }<br>&gt;&gt;<br>&gt;&gt; and it would be fine but writing<br>&gt;&gt;<br>&gt;&gt; let foo = if condition {    funcWithSideEffectsThatReturnsInt() }<br>&gt;&gt; else {    funcWithSideEffectsThatReturnsString() }<br>&gt;&gt;<br>&gt;&gt; would fail with a type error.<br>&gt;&gt;<br>&gt;&gt; I suspect that this is the right approach, but it does involve a bit<br>&gt;&gt; of magic.<br>&gt;&gt;<br>&gt;&gt; -Kevin<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt;<br>swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/2a41055a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d933552ea7fda10a4488a74223c00988?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;thorsten.seitz at web.de&gt;<p>December  6, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt; <br>&gt; if (condition) {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt; <br>&gt; but that&#39;s not a valid expression (what is its type?).<br></p><p>That would actually be no problem if Swift’s type system would have union types (Ceylon has union and intersection types which are quite awesome and enable lots of nice things quite naturally, see http://ceylon-lang.org/documentation/1.2/tour/types/).<br></p><p>In that case the type of such an expression would just be the union of both types, which is written Int | String in Ceylon.<br></p><p>-Thorsten<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/6a725920/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>What if we left the if { ...} else { ... } syntax alone (as a statement),<br>and updated the ternary expression to be a more general pattern matching<br>expression (closer to &quot;switch&quot;)? Something like<br></p><p>let x = condition ?<br>   true: &quot;Hello&quot;<br>   false: &quot;Goodbye&quot;<br></p><p>let x = optionalValue ?<br>   .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>   .None: &quot;To Whom It May Concern&quot;<br></p><p>let myFavoriteColor = yourFavoriteColor ?<br>    .Blue: .Red<br>    .Green: .Blue<br>    .Red: .Green<br></p><p>let quadrant = (x, y) ?<br>    let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>    let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>    let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>    default: &quot;bottom right&quot;<br></p><p>The colon comes from the fact that this is sort of a light-weight<br>expression-based &quot;switch&quot; statement, where each branch can only contain an<br>expression, not a series of statements.<br></p><p>This is very similar to pattern matching expressions in languages like<br>Haskell, ML, and Coq.<br></p><p>On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de&gt;<br>wrote:<br></p><p>&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt; expression. You still want to be able to do this:<br>&gt;<br>&gt; if (condition) {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;<br>&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;<br>&gt;<br>&gt; That would actually be no problem if Swift’s type system would have union<br>&gt; types (Ceylon has union and intersection types which are quite awesome and<br>&gt; enable lots of nice things quite naturally, see<br>&gt; http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;<br>&gt; In that case the type of such an expression would just be the union of<br>&gt; both types, which is written Int | String in Ceylon.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/1de1f743/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>To elaborate, the reason I like this is that I think it fits with Swift&#39;s<br>general pattern (no pun intended) of extending familiar C syntactic forms<br>to work with functional features. C&#39;s enums become Algebraic Datatypes; C&#39;s<br>switch statements become pattern-matching statements; C&#39;s if and for and<br>while statements are also updated with pattern-matching abilities.<br></p><p>The ternary operator is C&#39;s answer to the &quot;if-as-an-expression&quot; question.<br>So why can&#39;t a modified version be our answer to the<br>&quot;pattern-matching-as-an-expression&quot; question?<br></p><p>It also has the advantage of being more explicit than the original ternary<br>operator -- having to label the true: and false: cases makes it clearer<br>what you&#39;re trying to achieve.<br></p><p>On Sun, Dec 6, 2015 at 12:02 PM, Alex Lew &lt;alexl.mail+swift at gmail.com&gt;<br>wrote:<br></p><p>&gt; What if we left the if { ...} else { ... } syntax alone (as a statement),<br>&gt; and updated the ternary expression to be a more general pattern matching<br>&gt; expression (closer to &quot;switch&quot;)? Something like<br>&gt;<br>&gt; let x = condition ?<br>&gt;    true: &quot;Hello&quot;<br>&gt;    false: &quot;Goodbye&quot;<br>&gt;<br>&gt; let x = optionalValue ?<br>&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     .Blue: .Red<br>&gt;     .Green: .Blue<br>&gt;     .Red: .Green<br>&gt;<br>&gt; let quadrant = (x, y) ?<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;     default: &quot;bottom right&quot;<br>&gt;<br>&gt; The colon comes from the fact that this is sort of a light-weight<br>&gt; expression-based &quot;switch&quot; statement, where each branch can only contain an<br>&gt; expression, not a series of statements.<br>&gt;<br>&gt; This is very similar to pattern matching expressions in languages like<br>&gt; Haskell, ML, and Coq.<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt;&gt; expression. You still want to be able to do this:<br>&gt;&gt;<br>&gt;&gt; if (condition) {<br>&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt; } else {<br>&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That would actually be no problem if Swift’s type system would have union<br>&gt;&gt; types (Ceylon has union and intersection types which are quite awesome and<br>&gt;&gt; enable lots of nice things quite naturally, see<br>&gt;&gt; http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;&gt;<br>&gt;&gt; In that case the type of such an expression would just be the union of<br>&gt;&gt; both types, which is written Int | String in Ceylon.<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/6d869248/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  6, 2015 at 11:00:00am</p></header><div class="content"><p>I really like this train of thought. +1<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What if we left the if { ...} else { ... } syntax alone (as a statement), and updated the ternary expression to be a more general pattern matching expression (closer to &quot;switch&quot;)? Something like<br>&gt; <br>&gt; let x = condition ?<br>&gt;    true: &quot;Hello&quot;<br>&gt;    false: &quot;Goodbye&quot;<br>&gt; <br>&gt; let x = optionalValue ?<br>&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt; <br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     .Blue: .Red<br>&gt;     .Green: .Blue<br>&gt;     .Red: .Green<br>&gt; <br>&gt; let quadrant = (x, y) ?<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;     default: &quot;bottom right&quot;<br>&gt; <br>&gt; The colon comes from the fact that this is sort of a light-weight expression-based &quot;switch&quot; statement, where each branch can only contain an expression, not a series of statements.<br>&gt; <br>&gt; This is very similar to pattern matching expressions in languages like Haskell, ML, and Coq.<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de&gt; wrote:<br>&gt;&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if (condition) {<br>&gt;&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt; <br>&gt;&gt; That would actually be no problem if Swift’s type system would have union types (Ceylon has union and intersection types which are quite awesome and enable lots of nice things quite naturally, see http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;&gt; <br>&gt;&gt; In that case the type of such an expression would just be the union of both types, which is written Int | String in Ceylon.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/d5ad25da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 10:00:00am</p></header><div class="content"><p>I like this too, seems more powerful.  Also, would single line expressions be allowed?  If not would case be required for example:<br></p><p>let myFavoriteColor = yourFavoriteColor ?<br>    case .Blue: .Red<br>    case .Green: .Blue<br>    case .Red: .Green<br>    default: .Yellow<br></p><p><br>&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I really like this train of thought. +1<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; What if we left the if { ...} else { ... } syntax alone (as a statement), and updated the ternary expression to be a more general pattern matching expression (closer to &quot;switch&quot;)? Something like<br>&gt;&gt; <br>&gt;&gt; let x = condition ?<br>&gt;&gt;    true: &quot;Hello&quot;<br>&gt;&gt;    false: &quot;Goodbye&quot;<br>&gt;&gt; <br>&gt;&gt; let x = optionalValue ?<br>&gt;&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;&gt; <br>&gt;&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;&gt;     .Blue: .Red<br>&gt;&gt;     .Green: .Blue<br>&gt;&gt;     .Red: .Green<br>&gt;&gt; <br>&gt;&gt; let quadrant = (x, y) ?<br>&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;&gt;     default: &quot;bottom right&quot;<br>&gt;&gt; <br>&gt;&gt; The colon comes from the fact that this is sort of a light-weight expression-based &quot;switch&quot; statement, where each branch can only contain an expression, not a series of statements.<br>&gt;&gt; <br>&gt;&gt; This is very similar to pattern matching expressions in languages like Haskell, ML, and Coq.<br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de &lt;mailto:thorsten.seitz at web.de&gt;&gt; wrote:<br>&gt;&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if (condition) {<br>&gt;&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt; <br>&gt;&gt; That would actually be no problem if Swift’s type system would have union types (Ceylon has union and intersection types which are quite awesome and enable lots of nice things quite naturally, see http://ceylon-lang.org/documentation/1.2/tour/types/ &lt;http://ceylon-lang.org/documentation/1.2/tour/types/&gt;).<br>&gt;&gt; <br>&gt;&gt; In that case the type of such an expression would just be the union of both types, which is written Int | String in Ceylon.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/2eb87105/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>Ostensibly, case may not be necessary if you could delimit each case on one line with something (perhaps a comma, or something else if that would not fit well within the grammar):<br></p><p>let thisColor = thatColor ? .Blue: .Red, .Green: .Blue, .Red: .Green,<br>default: .Yellow<br></p><p>On Sun, Dec 6, 2015, at 01:57 PM, Paul Ossenbruggen via swift-evolution wrote:<br>&gt; I like this too, seems more powerful.  Also, would single line<br>&gt; expressions be allowed?  If not would case be required for example:<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?    case .Blue: .Red    case<br>&gt; .Green: .Blue    case .Red: .Green    default: .Yellow<br>&gt;<br>&gt;<br>&gt;&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I really like this train of thought. +1<br>&gt;&gt;<br>&gt;&gt; l8r Sean<br>&gt;&gt;<br>&gt;&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; What if we left the if { ...} else { ... } syntax alone (as a<br>&gt;&gt;&gt; statement), and updated the ternary expression to be a more general<br>&gt;&gt;&gt; pattern matching expression (closer to &quot;switch&quot;)? Something like<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let x = condition ?   true: &quot;Hello&quot;   false: &quot;Goodbye&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let x = optionalValue ?   .Some(let unwrapped): &quot;Hello,<br>&gt;&gt;&gt; \(unwrapped)&quot;   .None: &quot;To Whom It May Concern&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let myFavoriteColor = yourFavoriteColor ?    .Blue: .Red    .Green:<br>&gt;&gt;&gt; .Blue    .Red: .Green<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let quadrant = (x, y) ?    let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top<br>&gt;&gt;&gt; left&quot;    let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;    let (x,<br>&gt;&gt;&gt; y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;    default: &quot;bottom right&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The colon comes from the fact that this is sort of a light-weight<br>&gt;&gt;&gt; expression-based &quot;switch&quot; statement, where each branch can only<br>&gt;&gt;&gt; contain an expression, not a series of statements.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is very similar to pattern matching expressions in languages<br>&gt;&gt;&gt; like Haskell, ML, and Coq.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten<br>&gt;&gt;&gt; Seitz&lt;thorsten.seitz at web.de&gt;wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt;&gt; evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of<br>&gt;&gt;&gt;&gt;&gt; an expression. You still want to be able to do this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; if (condition) {    funcWithSideEffectsThatReturnsInt() } else {<br>&gt;&gt;&gt;&gt;&gt; funcWithSideEffectsThatReturnsString() }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; That would actually be no problem if Swift’s type system would have<br>&gt;&gt;&gt;&gt; union types (Ceylon has union and intersection types which are<br>&gt;&gt;&gt;&gt; quite awesome and enable lots of nice things quite naturally, see<br>&gt;&gt;&gt;&gt; http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In that case the type of such an expression would just be the union<br>&gt;&gt;&gt;&gt; of both types, which is writtenInt | Stringin Ceylon.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/3001e7b2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>Yes, I&#39;m of two minds about adding *case*.<br></p><p>On the one hand, it is much more consistent with the rest of the<br>language. *case<br>*is used everywhere else in Swift that pattern matching is allowed. (if<br>case..., for case..., while case...) I think this is a strong argument that<br>it should be used in pattern matching expressions too.<br></p><p>On the other hand, what is the point of pattern matching expressions if not<br>to be brief? They don&#39;t enable you to do anything you couldn&#39;t do before<br>with a switch and assignment, right? So it seems like a priority should be<br>getting them to look nice and readable, which the comma syntax does. It<br>actually doesn&#39;t look too bad with both case and comma:<br></p><p>let thisColor = thatColor ? case .Blue: .Red, case .Green: .Blue, default:<br>.Yellow<br></p><p>And on the third hand, it still does save you a good amount of space even<br>if you&#39;re not all on one line. Compare<br></p><p>let thisColor: Color<br>switch thatColor {<br>    case .Blue:<br>        thisColor = .Red<br>    case .Green<br>        thisColor = .Blue<br>    default:<br>        thisColor = .Yellow<br>}<br></p><p>with<br></p><p>let thisColor = thatColor ?<br>    case .Blue: .Red<br>    case .Green: .Blue<br>    default: .Yellow<br></p><p><br></p><p><br></p><p>On Sun, Dec 6, 2015 at 2:19 PM, Kevin Lundberg via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Ostensibly, case may not be necessary if you could delimit each case on<br>&gt; one line with something (perhaps a comma, or something else if that would<br>&gt; not fit well within the grammar):<br>&gt;<br>&gt; let thisColor = thatColor ? .Blue: .Red, .Green: .Blue, .Red: .Green,<br>&gt; default: .Yellow<br>&gt;<br>&gt; On Sun, Dec 6, 2015, at 01:57 PM, Paul Ossenbruggen via swift-evolution<br>&gt; wrote:<br>&gt;<br>&gt; I like this too, seems more powerful.  Also, would single line expressions<br>&gt; be allowed?  If not would case be required for example:<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     case .Blue: .Red<br>&gt;     case .Green: .Blue<br>&gt;     case .Red: .Green<br>&gt;     default: .Yellow<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I really like this train of thought. +1<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What if we left the if { ...} else { ... } syntax alone (as a statement),<br>&gt; and updated the ternary expression to be a more general pattern matching<br>&gt; expression (closer to &quot;switch&quot;)? Something like<br>&gt;<br>&gt; let x = condition ?<br>&gt;    true: &quot;Hello&quot;<br>&gt;    false: &quot;Goodbye&quot;<br>&gt;<br>&gt; let x = optionalValue ?<br>&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     .Blue: .Red<br>&gt;     .Green: .Blue<br>&gt;     .Red: .Green<br>&gt;<br>&gt; let quadrant = (x, y) ?<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;     default: &quot;bottom right&quot;<br>&gt;<br>&gt; The colon comes from the fact that this is sort of a light-weight<br>&gt; expression-based &quot;switch&quot; statement, where each branch can only contain an<br>&gt; expression, not a series of statements.<br>&gt;<br>&gt; This is very similar to pattern matching expressions in languages like<br>&gt; Haskell, ML, and Coq.<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt; expression. You still want to be able to do this:<br>&gt;<br>&gt; if (condition) {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;<br>&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;<br>&gt;<br>&gt;<br>&gt; That would actually be no problem if Swift’s type system would have union<br>&gt; types (Ceylon has union and intersection types which are quite awesome and<br>&gt; enable lots of nice things quite naturally, see<br>&gt; http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;<br>&gt; In that case the type of such an expression would just be the union of<br>&gt; both types, which is written Int | String in Ceylon.<br>&gt;<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; Untracked with Trackbuster &lt;https://trackbuster.com/?sig&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/2b983bcd/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>I am not a fan of this approach based on the ternary operator.  The ternary operator is already a bit of an anomaly in that all other operators are unary or binary and do not perform any control flow (beyond possibly short circuiting an autoclosure argument).<br></p><p>I would much rather features that perform control flow continue to use keywords, but allow them to be expressions.  <br></p><p>Once we have control flow expressions I would like to see the ternary operator removed from the language as it would no longer server a purpose.  Removing the ternary operator seems to fit nicely with the direction to remove some features that are carried over from C-based languages but don’t necessarily fit with the direction Swift is heading.<br></p><p><br>&gt; On Dec 6, 2015, at 1:19 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Ostensibly, case may not be necessary if you could delimit each case on one line with something (perhaps a comma, or something else if that would not fit well within the grammar):<br>&gt;  <br>&gt; let thisColor = thatColor ? .Blue: .Red, .Green: .Blue, .Red: .Green, default: .Yellow<br>&gt;  <br>&gt; On Sun, Dec 6, 2015, at 01:57 PM, Paul Ossenbruggen via swift-evolution wrote:<br>&gt;&gt; I like this too, seems more powerful.  Also, would single line expressions be allowed?  If not would case be required for example:<br>&gt;&gt;  <br>&gt;&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;&gt;     case .Blue: .Red<br>&gt;&gt;     case .Green: .Blue<br>&gt;&gt;     case .Red: .Green<br>&gt;&gt;     default: .Yellow<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I really like this train of thought. +1<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; What if we left the if { ...} else { ... } syntax alone (as a statement), and updated the ternary expression to be a more general pattern matching expression (closer to &quot;switch&quot;)? Something like<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; let x = condition ?<br>&gt;&gt;&gt;&gt;    true: &quot;Hello&quot;<br>&gt;&gt;&gt;&gt;    false: &quot;Goodbye&quot;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; let x = optionalValue ?<br>&gt;&gt;&gt;&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;&gt;&gt;&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;&gt;&gt;&gt;     .Blue: .Red<br>&gt;&gt;&gt;&gt;     .Green: .Blue<br>&gt;&gt;&gt;&gt;     .Red: .Green<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; let quadrant = (x, y) ?<br>&gt;&gt;&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;&gt;&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;&gt;&gt;&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;&gt;&gt;&gt;     default: &quot;bottom right&quot;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; The colon comes from the fact that this is sort of a light-weight expression-based &quot;switch&quot; statement, where each branch can only contain an expression, not a series of statements.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; This is very similar to pattern matching expressions in languages like Haskell, ML, and Coq.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz&lt;thorsten.seitz at web.de &lt;mailto:thorsten.seitz at web.de&gt;&gt;wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; if (condition) {<br>&gt;&gt;&gt;&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt;&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; That would actually be no problem if Swift’s type system would have union types (Ceylon has union and intersection types which are quite awesome and enable lots of nice things quite naturally, seehttp://ceylon-lang.org/documentation/1.2/tour/types/ &lt;http://ceylon-lang.org/documentation/1.2/tour/types/&gt;).<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; In that case the type of such an expression would just be the union of both types, which is writtenInt | Stringin Ceylon.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/7ffd123c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>Thanks for the feedback, Matthew. It&#39;s sensible to me to consider dropping<br>the ternary operator. I like it because the analogy &quot;C&#39;s if is to Swift&#39;s<br>if as C&#39;s ternary operator is to Swift&#39;s ternary operator&quot; is (sort of)<br>satisfied. But it is also confusing, both for the reasons you mention, and<br>because ? has other meanings in Swift:<br></p><p> // compiler error without space betw thatColor and ?<br>let thisColor = thatColor?<br>     case .Red: .Green<br>     default: .Blue<br></p><p>On the other hand, is it really worth it to have control flow expressions<br>if they don&#39;t let your code look nicer?<br></p><p>let thisColor = switch thatColor {<br>     case .Red:<br>          return .Green;<br>     default:<br>          return .Yellow;<br>}<br></p><p>really isn&#39;t much nicer than<br></p><p>let thisColor: Color<br>switch thatColor {<br>     case .Red:<br>          thisColor = .Green<br>     default:<br>          thisColor = .Yellow<br>}<br></p><p>Maybe we could do a compromise, something like<br></p><p>let thisColor = switch thatColor<br>     case .Red: .Green // must be an expression<br>     default: .Yellow      // must be an expression<br></p><p>Or we could introduce a new keyword? Like *match*:<br></p><p>let thisColor = match thatColor<br>      case .Red: .Green    // must be an expression<br>      default: .Yellow         // must be an expression<br></p><p><br>I sort of like the new-keyword approach, because even though this is<br>similar to a switch, it&#39;s not a switch: there&#39;s no fallthrough, you can&#39;t<br>put statements inside, etc.<br></p><p>The problem with all these proposals:<br></p><p>let thisColor = match thatColor<br>     case .Red: match thatOtherColor<br>                           case .Blue: .Green<br>                           case .Pink: .Yellow<br>                           default: .Orange<br>     default: .Orange<br></p><p>is ambiguous. (Does case .Pink match thatColor or thatOtherColor? We can<br>know because of exhaustiveness checking, but this won&#39;t always work.) You<br>could solve this problem either by using parentheses around the whole<br>expression when necessary<br></p><p>let thisColor = match thatColor<br>     case .Red: (match thatOtherColor<br>                           case .Blue: .Green<br>                           case .Pink: .Yellow<br>                           default: .Orange)<br>     default: .Orange<br></p><p>or by adding curly braces in again<br></p><p>let thisColor = match thatColor {<br>     case .Red: match thatOtherColor {<br>                           case .Blue: .Green<br>                           case .Pink: .Yellow<br>                           default: .Orange<br>                        }<br>     default: .Orange<br>}<br></p><p>But that starts to look like switch again. (Of course, the best way to<br>handle this is as a programmer is to just switch on the tuple (thatColor,<br>thatOtherColor), but the language should allow for nested control<br>expressions.)<br></p><p><br>On Sun, Dec 6, 2015 at 2:48 PM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I am not a fan of this approach based on the ternary operator.  The<br>&gt; ternary operator is already a bit of an anomaly in that all other operators<br>&gt; are unary or binary and do not perform any control flow (beyond possibly<br>&gt; short circuiting an autoclosure argument).<br>&gt;<br>&gt; I would much rather features that perform control flow continue to use<br>&gt; keywords, but allow them to be expressions.<br>&gt;<br>&gt; Once we have control flow expressions I would like to see the ternary<br>&gt; operator removed from the language as it would no longer server a purpose.<br>&gt; Removing the ternary operator seems to fit nicely with the direction to<br>&gt; remove some features that are carried over from C-based languages but don’t<br>&gt; necessarily fit with the direction Swift is heading.<br>&gt;<br>&gt;<br>&gt; On Dec 6, 2015, at 1:19 PM, Kevin Lundberg via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Ostensibly, case may not be necessary if you could delimit each case on<br>&gt; one line with something (perhaps a comma, or something else if that would<br>&gt; not fit well within the grammar):<br>&gt;<br>&gt; let thisColor = thatColor ? .Blue: .Red, .Green: .Blue, .Red: .Green,<br>&gt; default: .Yellow<br>&gt;<br>&gt; On Sun, Dec 6, 2015, at 01:57 PM, Paul Ossenbruggen via swift-evolution<br>&gt; wrote:<br>&gt;<br>&gt; I like this too, seems more powerful.  Also, would single line expressions<br>&gt; be allowed?  If not would case be required for example:<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     case .Blue: .Red<br>&gt;     case .Green: .Blue<br>&gt;     case .Red: .Green<br>&gt;     default: .Yellow<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I really like this train of thought. +1<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What if we left the if { ...} else { ... } syntax alone (as a statement),<br>&gt; and updated the ternary expression to be a more general pattern matching<br>&gt; expression (closer to &quot;switch&quot;)? Something like<br>&gt;<br>&gt; let x = condition ?<br>&gt;    true: &quot;Hello&quot;<br>&gt;    false: &quot;Goodbye&quot;<br>&gt;<br>&gt; let x = optionalValue ?<br>&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     .Blue: .Red<br>&gt;     .Green: .Blue<br>&gt;     .Red: .Green<br>&gt;<br>&gt; let quadrant = (x, y) ?<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;     default: &quot;bottom right&quot;<br>&gt;<br>&gt; The colon comes from the fact that this is sort of a light-weight<br>&gt; expression-based &quot;switch&quot; statement, where each branch can only contain an<br>&gt; expression, not a series of statements.<br>&gt;<br>&gt; This is very similar to pattern matching expressions in languages like<br>&gt; Haskell, ML, and Coq.<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt; expression. You still want to be able to do this:<br>&gt;<br>&gt; if (condition) {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString()<br>&gt; }<br>&gt;<br>&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;<br>&gt;<br>&gt;<br>&gt; That would actually be no problem if Swift’s type system would have union<br>&gt; types (Ceylon has union and intersection types which are quite awesome and<br>&gt; enable lots of nice things quite naturally, see<br>&gt; http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;<br>&gt; In that case the type of such an expression would just be the union of<br>&gt; both types, which is written Int | String in Ceylon.<br>&gt;<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; Untracked with Trackbuster &lt;https://trackbuster.com/?sig&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/aa4516e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>Yep probably does need braces: So for switch? if? suggestion i just made. <br></p><p>let myColor = yourColor switch? { .Blue :  .Red, .Green: .Blue, .Red: .Green, default: .Yellow }<br></p><p>let myColor = yourColor switch? { case .Blue : .Red; case .Green: .Blue;  case .Red: .Green; default: .Yellow }<br></p><p>let myColor = yourColor switch? {<br>	case .Blue :  .Reds<br>	case .Green: .Blue <br>	case .Red: .Green<br>	default: .Yellow<br>}<br></p><p>let myColor = yourColor switch? {<br>	.Blue :  .Reds<br>	.Green: .Blue <br>	.Red: .Green<br>	default: .Yellow<br>}<br></p><p>let myColor = condition if?  { .Blue; .Red }<br></p><p>I don’t find that looks bad. <br></p><p>- Paul <br></p><p><br>&gt; On Dec 6, 2015, at 12:24 PM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for the feedback, Matthew. It&#39;s sensible to me to consider dropping the ternary operator. I like it because the analogy &quot;C&#39;s if is to Swift&#39;s if as C&#39;s ternary operator is to Swift&#39;s ternary operator&quot; is (sort of) satisfied. But it is also confusing, both for the reasons you mention, and because ? has other meanings in Swift:<br>&gt; <br>&gt;  // compiler error without space betw thatColor and ?<br>&gt; let thisColor = thatColor? <br>&gt;      case .Red: .Green<br>&gt;      default: .Blue<br>&gt; <br>&gt; On the other hand, is it really worth it to have control flow expressions if they don&#39;t let your code look nicer?<br>&gt; <br>&gt; let thisColor = switch thatColor {<br>&gt;      case .Red:<br>&gt;           return .Green;<br>&gt;      default:<br>&gt;           return .Yellow;<br>&gt; }<br>&gt; <br>&gt; really isn&#39;t much nicer than<br>&gt; <br>&gt; let thisColor: Color<br>&gt; switch thatColor {<br>&gt;      case .Red:<br>&gt;           thisColor = .Green<br>&gt;      default:<br>&gt;           thisColor = .Yellow<br>&gt; }<br>&gt; <br>&gt; Maybe we could do a compromise, something like<br>&gt; <br>&gt; let thisColor = switch thatColor<br>&gt;      case .Red: .Green // must be an expression<br>&gt;      default: .Yellow      // must be an expression<br>&gt; <br>&gt; Or we could introduce a new keyword? Like match:<br>&gt; <br>&gt; let thisColor = match thatColor<br>&gt;       case .Red: .Green    // must be an expression<br>&gt;       default: .Yellow         // must be an expression<br>&gt; <br>&gt; <br>&gt; I sort of like the new-keyword approach, because even though this is similar to a switch, it&#39;s not a switch: there&#39;s no fallthrough, you can&#39;t put statements inside, etc.<br>&gt; <br>&gt; The problem with all these proposals:<br>&gt; <br>&gt; let thisColor = match thatColor<br>&gt;      case .Red: match thatOtherColor<br>&gt;                            case .Blue: .Green<br>&gt;                            case .Pink: .Yellow<br>&gt;                            default: .Orange<br>&gt;      default: .Orange<br>&gt; <br>&gt; is ambiguous. (Does case .Pink match thatColor or thatOtherColor? We can know because of exhaustiveness checking, but this won&#39;t always work.) You could solve this problem either by using parentheses around the whole expression when necessary<br>&gt; <br>&gt; let thisColor = match thatColor<br>&gt;      case .Red: (match thatOtherColor<br>&gt;                            case .Blue: .Green<br>&gt;                            case .Pink: .Yellow<br>&gt;                            default: .Orange)<br>&gt;      default: .Orange<br>&gt; <br>&gt; or by adding curly braces in again<br>&gt; <br>&gt; let thisColor = match thatColor {<br>&gt;      case .Red: match thatOtherColor {<br>&gt;                            case .Blue: .Green<br>&gt;                            case .Pink: .Yellow<br>&gt;                            default: .Orange<br>&gt;                         }<br>&gt;      default: .Orange<br>&gt; }<br>&gt; <br>&gt; But that starts to look like switch again. (Of course, the best way to handle this is as a programmer is to just switch on the tuple (thatColor, thatOtherColor), but the language should allow for nested control expressions.)<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 2:48 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I am not a fan of this approach based on the ternary operator.  The ternary operator is already a bit of an anomaly in that all other operators are unary or binary and do not perform any control flow (beyond possibly short circuiting an autoclosure argument).<br>&gt; <br>&gt; I would much rather features that perform control flow continue to use keywords, but allow them to be expressions.  <br>&gt; <br>&gt; Once we have control flow expressions I would like to see the ternary operator removed from the language as it would no longer server a purpose.  Removing the ternary operator seems to fit nicely with the direction to remove some features that are carried over from C-based languages but don’t necessarily fit with the direction Swift is heading.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 1:19 PM, Kevin Lundberg via swift-evolution &lt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ostensibly, case may not be necessary if you could delimit each case on one line with something (perhaps a comma, or something else if that would not fit well within the grammar): <br>&gt;&gt;  <br>&gt;&gt; let thisColor = thatColor ? .Blue: .Red, .Green: .Blue, .Red: .Green, default: .Yellow <br>&gt;&gt;  <br>&gt;&gt; On Sun, Dec 6, 2015, at 01:57 PM, Paul Ossenbruggen via swift-evolution wrote: <br>&gt;&gt;&gt; I like this too, seems more powerful.  Also, would single line expressions be allowed?  If not would case be required for example: <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; let myFavoriteColor = yourFavoriteColor ? <br>&gt;&gt;&gt;     case .Blue: .Red <br>&gt;&gt;&gt;     case .Green: .Blue <br>&gt;&gt;&gt;     case .Red: .Green <br>&gt;&gt;&gt;     default: .Yellow <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote: <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I really like this train of thought. +1 <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; l8r <br>&gt;&gt;&gt;&gt; Sean <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote: <br>&gt;&gt;&gt;&gt;&gt; What if we left the if { ...} else { ... } syntax alone (as a statement), and updated the ternary expression to be a more general pattern matching expression (closer to &quot;switch&quot;)? Something like <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let x = condition ? <br>&gt;&gt;&gt;&gt;&gt;    true: &quot;Hello&quot; <br>&gt;&gt;&gt;&gt;&gt;    false: &quot;Goodbye&quot; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let x = optionalValue ? <br>&gt;&gt;&gt;&gt;&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot; <br>&gt;&gt;&gt;&gt;&gt;    .None: &quot;To Whom It May Concern&quot; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let myFavoriteColor = yourFavoriteColor ? <br>&gt;&gt;&gt;&gt;&gt;     .Blue: .Red <br>&gt;&gt;&gt;&gt;&gt;     .Green: .Blue <br>&gt;&gt;&gt;&gt;&gt;     .Red: .Green <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let quadrant = (x, y) ? <br>&gt;&gt;&gt;&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot; <br>&gt;&gt;&gt;&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot; <br>&gt;&gt;&gt;&gt;&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot; <br>&gt;&gt;&gt;&gt;&gt;     default: &quot;bottom right&quot; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; The colon comes from the fact that this is sort of a light-weight expression-based &quot;switch&quot; statement, where each branch can only contain an expression, not a series of statements. <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; This is very similar to pattern matching expressions in languages like Haskell, ML, and Coq. <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de &lt;mailto:thorsten.seitz at web.de&gt;&gt; wrote: <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;: <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this: <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; if (condition) { <br>&gt;&gt;&gt;&gt;&gt;&gt;     funcWithSideEffectsThatReturnsInt() <br>&gt;&gt;&gt;&gt;&gt;&gt; } else { <br>&gt;&gt;&gt;&gt;&gt;&gt;     funcWithSideEffectsThatReturnsString() <br>&gt;&gt;&gt;&gt;&gt;&gt; } <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?). <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; That would actually be no problem if Swift’s type system would have union types (Ceylon has union and intersection types which are quite awesome and enable lots of nice things quite naturally, see http://ceylon-lang.org/documentation/1.2/tour/types/ &lt;http://ceylon-lang.org/documentation/1.2/tour/types/&gt;). <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; In that case the type of such an expression would just be the union of both types, which is written Int | String in Ceylon. <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; -Thorsten <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________ <br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list <br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________ <br>&gt;&gt;&gt;&gt; swift-evolution mailing list <br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________ <br>&gt;&gt;&gt; swift-evolution mailing list <br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________ <br>&gt;&gt; swift-evolution mailing list <br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; <br>&gt; <br>&gt; Untracked with Trackbuster &lt;https://trackbuster.com/?sig&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/f4001071/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br></p><p>Therefore the switch-expression should simply look like follows:<br></p><p>let thisColor = switch thatColor {<br>         case .Red: .Green // must be an expression<br>         default: .Yellow      // must be an expression<br>     }<br></p><p>No returns needed in the case clauses.<br>Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br></p><p>-Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; <br>&gt; I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br></p><p>+1<br></p><p>&gt; <br>&gt; Therefore the switch-expression should simply look like follows:<br>&gt; <br>&gt; let thisColor = switch thatColor {<br>&gt;         case .Red: .Green // must be an expression<br>&gt;         default: .Yellow      // must be an expression<br>&gt;     }<br>&gt; <br>&gt; No returns needed in the case clauses.<br></p><p>This actually looks great. One simple rule and zero new keywords.<br></p><p>Readable and simple to learn.<br></p><p>Fantastic!<br></p><p>&gt; Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br>&gt; <br>&gt; -Thorsten<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>I agree that it&#39;s simplest to just reuse switch keyword, and keep braces.<br>+1.<br></p><p>Would you allow the same thing with if?<br></p><p>let thisColor = if condition { .Red } else { .Blue }<br></p><p>On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br></p><p>&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;<br>&gt; &gt; I would prefer the expression to match the statement. The only<br>&gt; difference would be that all parts that were statements now have to be<br>&gt; expressions.<br>&gt;<br>&gt; +1<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt; &gt;<br>&gt; &gt; let thisColor = switch thatColor {<br>&gt; &gt;         case .Red: .Green // must be an expression<br>&gt; &gt;         default: .Yellow      // must be an expression<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; No returns needed in the case clauses.<br>&gt;<br>&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt;<br>&gt; Readable and simple to learn.<br>&gt;<br>&gt; Fantastic!<br>&gt;<br>&gt; &gt; Formatting this as a one-liner would just require adding semicolons<br>&gt; (though I wouldn&#39;t recommend this).<br>&gt; &gt;<br>&gt; &gt; -Thorsten<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/9423de10/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>so the rule would have to be that the “switch&quot; or “if&quot; must return a value of compatible type. Not sure I love all the braces in the “if&quot; case but it does follow the existing language rules with the exception that it must be have an else.<br></p><p>let thisColor = if condition { .Red }   // illegal for expressions but not statements<br></p><p>Can still do this for statements:<br>if condition {<br>	x = 40<br>}<br></p><p>likewise:<br>let thisColor = if condition { .Red } else { 21 } // illegal unless thisColor is Any <br></p><p>unless: <br>let thisColor : Any = if condition { .Red } else { 21 } // illegal unless thisColor is Any <br></p><p>It would be nice to omit braces in this expression case but not for statements: <br>let thisColor = if condition .Red else .Blue <br></p><p>in statements braces would be required: <br></p><p>if condition {<br>	x = 32<br>} else {<br>	y = 44<br>}<br></p><p>&gt; &gt;     }<br>&gt; On Dec 6, 2015, at 1:52 PM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces. +1.  <br>&gt; <br>&gt; Would you allow the same thing with if?<br>&gt; <br>&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt;<br>&gt; &gt; I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; &gt;<br>&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt; &gt;<br>&gt; &gt; let thisColor = switch thatColor {<br>&gt; &gt;         case .Red: .Green // must be an expression<br>&gt; &gt;         default: .Yellow      // must be an expression<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; No returns needed in the case clauses.<br>&gt; <br>&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt; <br>&gt; Readable and simple to learn.<br>&gt; <br>&gt; Fantastic!<br>&gt; <br>&gt; &gt; Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br>&gt; &gt;<br>&gt; &gt; -Thorsten<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/e03515fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 07:00:00pm</p></header><div class="content"><p>In thinking about this, is there a way to have the compiler detect that something is a statement vs expression? Is it always clear to users when something is an expression vs a statement? In blurring the lines between expressions and statements complications arise anytime there is a return value returned by the result of “switch” or “if” it suddenly becomes an expression. Are there gray areas where it is hard to determine whether it is one vs the other when we use the those keywords? If it is not possible to determine for every situation or confusing to users, then maybe a new keyword for expressions is necessary. When a branch of an else returns void does it then become a statement? We should avoid shoehorning it in just to avoid another keyword. <br></p><p>let foo = if condition {<br>	x = 1 // implied void -- illegal<br>} else {<br>	10  // returns expression<br>}<br></p><p>also, I think this is confusing:<br></p><p>let foo = if condition {<br>	function1()<br>} else {<br>	function2()<br>}<br></p><p>it is not obvious that this is an assignment or that the functions return anything. Earlier I suggested something using =  to make it more clear. This is similar to the requirement that functions that throw are prefixed with with “try&quot;<br></p><p>let foo if condition {<br>	= function1()<br>} else {<br>	= function2()<br>}<br></p><p>also for the literal case: <br></p><p>let foo  if condition {<br>	=  1 // can’t accidentally put a non expression here. <br>} else {<br>	= 10  // returns expression<br>}<br></p><p>Which makes it clear that it is an expression coming back from both sides of the “if”. The switch case is a little trickier because of the case. <br></p><p>let foo switch value {<br>	= .Red:   function1()<br>	= .Green  function2() <br>	=  default: function3()<br>}<br></p><p>The equal emphasizes the functions return a value for each part of the switch and assigns to “foo”, but somehow is unsatisfying having that equal everywhere. <br></p><p>One the other hand,  the ternary operator being an expression this confusion does not exist, it is clear that function1() and function2() must return a value. <br></p><p>let foo = condition ? function1() : function2() <br></p><p>even when on separate lines:<br></p><p>let foo = condition ? <br>	function1() :<br>	function2() <br></p><p>So maybe Alex’s original suggestion works better where the ? operator is extended to support a switch like expression and keeping the two statements and expressions separate. <br></p><p>let foo = condition ? <br>	.Red : .Green<br>	.Green : Red<br></p><p>let foo = condition ? <br>	.Red: function1()<br>	.Green: function2() <br></p><p>let foo = condition ? .Red: function1() .Blue: function2() default:. function3() <br></p><p>also could include optional cases:<br></p><p>let foo = condition ? case .Red: function1(), case .Blue: functions(), default: function3()<br></p><p>Which brings us back full circle to the keyword because most people don’t like the ? operator which is why Alex suggested “match&quot;:<br></p><p>let foo = match condition <br>	.Red: function1()<br>	.Green: function2() <br>	default: function3()<br></p><p>or with optional cases: <br></p><p>let foo = match condition <br>	case .Red: function1()<br>	case .Green: function2() <br>	default: function3()<br></p><p>for booleans :<br></p><p>let too = match condition function() else function2()<br></p><p>I still like this better. A new keyword makes sure there is no confusion about expressions vs statements and avoids complications with the return values. Match would always be an expression, if/else/swtich are always statements. Also those keywords don’t change behavior if a user changes a statement into an expression by assigning the expression the else part would suddenly be required. <br></p><p>if condition {<br>	function1()<br>} <br></p><p>is changed to <br></p><p>let foo = if condition {<br>	function1()  <br>}  <br></p><p>is now an error, because there is no else. Now if function1() does not return a value. you have another error just changing it to assign completely changes the behavior of the “if” statement. <br></p><p>- Paul<br></p><p>&gt; On Dec 6, 2015, at 2:11 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; so the rule would have to be that the “switch&quot; or “if&quot; must return a value of compatible type. Not sure I love all the braces in the “if&quot; case but it does follow the existing language rules with the exception that it must be have an else.<br>&gt; <br>&gt; let thisColor = if condition { .Red }   // illegal for expressions but not statements<br>&gt; <br>&gt; Can still do this for statements:<br>&gt; if condition {<br>&gt; 	x = 40<br>&gt; }<br>&gt; <br>&gt; likewise:<br>&gt; let thisColor = if condition { .Red } else { 21 } // illegal unless thisColor is Any <br>&gt; <br>&gt; unless: <br>&gt; let thisColor : Any = if condition { .Red } else { 21 } // illegal unless thisColor is Any <br>&gt; <br>&gt; It would be nice to omit braces in this expression case but not for statements: <br>&gt; let thisColor = if condition .Red else .Blue <br>&gt; <br>&gt; in statements braces would be required: <br>&gt; <br>&gt; if condition {<br>&gt; 	x = 32<br>&gt; } else {<br>&gt; 	y = 44<br>&gt; }<br>&gt; <br>&gt;&gt; &gt;     }<br>&gt;&gt; On Dec 6, 2015, at 1:52 PM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces. +1.  <br>&gt;&gt; <br>&gt;&gt; Would you allow the same thing with if?<br>&gt;&gt; <br>&gt;&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt; wrote:<br>&gt;&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let thisColor = switch thatColor {<br>&gt;&gt; &gt;         case .Red: .Green // must be an expression<br>&gt;&gt; &gt;         default: .Yellow      // must be an expression<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; No returns needed in the case clauses.<br>&gt;&gt; <br>&gt;&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt;&gt; <br>&gt;&gt; Readable and simple to learn.<br>&gt;&gt; <br>&gt;&gt; Fantastic!<br>&gt;&gt; <br>&gt;&gt; &gt; Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -Thorsten<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/e55ec65c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>I think the compiler can just assume that if it&#39;s valid to have a statement<br>in a given context, the if or switch should be interpreted as a statement.<br></p><p>A convention of keeping if-expressions to one line, and switch-expressions<br>to one line per case, would make things relatively readable (though I don&#39;t<br>feel that strongly about the convention):<br></p><p>let foo = if condition { function1() } else { function2() }<br>let foo = switch color {<br>    case .Red: function1()<br>    case .Green: function2()<br>    default: function3()<br>}<br></p><p>I&#39;m still not totally convinced by Matthew&#39;s argument that making the<br>syntax lighter-weight is orthogonal to the expression/statement question.<br>In my mind, it makes sense to have both a heavier switch *statement*,<br>(which might have many sub-statements in each branch), and also a<br>lighter-weight option for a quick pattern-match inside an expression (like<br>the ones we&#39;ve been discussing in this thread).<br></p><p>This is the whole idea behind the ternary operator in C, and the &quot;a = value<br>if condition else otherValue&quot; in Python, etc. That&#39;s why I kind of like the<br>ternary-operator-inspired syntax for pattern matching. It would be awful to<br>use for statements -- just like it would be awful to replace if/else<br>statements in C with the C ternary operator&#39;s syntax -- but I think it&#39;s<br>pretty readable for expressions. It just seems to fit: just like C&#39;s if,<br>while, for, and switch can now pattern match in Swift, so can ?: (not to<br>mention that the colons after each case &quot;rhyme&quot; with the original colon in<br>the ternary operator).<br></p><p>But I believe I&#39;m in the minority on that opinion, which is totally fine. :)<br></p><p>I think the questions then become: first, as Chris has asked, do the<br>if/switch expressions provide enough of a benefit (in terms of conciseness)<br>to be worth implementing? And, as Matthew suggested: is there a<br>lighter-weight syntax that would make both statements and expressions more<br>succinct?<br></p><p>All best,<br>Alex<br></p><p>On Sun, Dec 6, 2015 at 10:11 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br></p><p>&gt; In thinking about this, is there a way to have the compiler detect that<br>&gt; something is a statement vs expression? Is it always clear to users when<br>&gt; something is an expression vs a statement? In blurring the lines between<br>&gt; expressions and statements complications arise anytime there is a return<br>&gt; value returned by the result of “switch” or “if” it suddenly becomes an<br>&gt; expression. Are there gray areas where it is hard to determine whether it<br>&gt; is one vs the other when we use the those keywords? If it is not possible<br>&gt; to determine for every situation or confusing to users, then maybe a new<br>&gt; keyword for expressions is necessary. When a branch of an else returns void<br>&gt; does it then become a statement? We should avoid shoehorning it in just to<br>&gt; avoid another keyword.<br>&gt;<br>&gt; let foo = if condition {<br>&gt; x = 1 // implied void -- illegal<br>&gt; } else {<br>&gt; 10  // returns expression<br>&gt; }<br>&gt;<br>&gt; also, I think this is confusing:<br>&gt;<br>&gt; let foo = if condition {<br>&gt; function1()<br>&gt; } else {<br>&gt; function2()<br>&gt; }<br>&gt;<br>&gt; it is not obvious that this is an assignment or that the functions return<br>&gt; anything. Earlier I suggested something using =  to make it more clear.<br>&gt; This is similar to the requirement that functions that throw are prefixed<br>&gt; with with “try&quot;<br>&gt;<br>&gt; let foo if condition {<br>&gt; = function1()<br>&gt; } else {<br>&gt; = function2()<br>&gt; }<br>&gt;<br>&gt; also for the literal case:<br>&gt;<br>&gt; let foo  if condition {<br>&gt; =  1 // can’t accidentally put a non expression here.<br>&gt; } else {<br>&gt; = 10  // returns expression<br>&gt; }<br>&gt;<br>&gt; Which makes it clear that it is an expression coming back from both sides<br>&gt; of the “if”. The switch case is a little trickier because of the case.<br>&gt;<br>&gt; let foo switch value {<br>&gt; = .Red:   function1()<br>&gt; = .Green  function2()<br>&gt; =  default: function3()<br>&gt; }<br>&gt;<br>&gt; The equal emphasizes the functions return a value for each part of the<br>&gt; switch and assigns to “foo”, but somehow is unsatisfying having that equal<br>&gt; everywhere.<br>&gt;<br>&gt; One the other hand,  the ternary operator being an expression this<br>&gt; confusion does not exist, it is clear that function1() and function2() must<br>&gt; return a value.<br>&gt;<br>&gt; let foo = condition ? function1() : function2()<br>&gt;<br>&gt; even when on separate lines:<br>&gt;<br>&gt; let foo = condition ?<br>&gt; function1() :<br>&gt; function2()<br>&gt;<br>&gt; So maybe Alex’s original suggestion works better where the ? operator is<br>&gt; extended to support a switch like expression and keeping the two statements<br>&gt; and expressions separate.<br>&gt;<br>&gt; let foo = condition ?<br>&gt; .Red : .Green<br>&gt; .Green : Red<br>&gt;<br>&gt; let foo = condition ?<br>&gt; .Red: function1()<br>&gt; .Green: function2()<br>&gt;<br>&gt; let foo = condition ? .Red: function1() .Blue: function2() default:.<br>&gt; function3()<br>&gt;<br>&gt; also could include optional cases:<br>&gt;<br>&gt; let foo = condition ? case .Red: function1(), case .Blue: functions(),<br>&gt; default: function3()<br>&gt;<br>&gt; Which brings us back full circle to the keyword because most people don’t<br>&gt; like the ? operator which is why Alex suggested “match&quot;:<br>&gt;<br>&gt; let foo = match condition<br>&gt; .Red: function1()<br>&gt; .Green: function2()<br>&gt; default: function3()<br>&gt;<br>&gt; or with optional cases:<br>&gt;<br>&gt; let foo = match condition<br>&gt; case .Red: function1()<br>&gt; case .Green: function2()<br>&gt; default: function3()<br>&gt;<br>&gt; for booleans :<br>&gt;<br>&gt; let too = match condition function() else function2()<br>&gt;<br>&gt; I still like this better. A new keyword makes sure there is no confusion<br>&gt; about expressions vs statements and avoids complications with the return<br>&gt; values. Match would always be an expression, if/else/swtich are always<br>&gt; statements. Also those keywords don’t change behavior if a user changes a<br>&gt; statement into an expression by assigning the expression the else part<br>&gt; would suddenly be required.<br>&gt;<br>&gt; if condition {<br>&gt; function1()<br>&gt; }<br>&gt;<br>&gt; is changed to<br>&gt;<br>&gt; let foo = if condition {<br>&gt; function1()<br>&gt; }<br>&gt;<br>&gt; is now an error, because there is no else. Now if function1() does not<br>&gt; return a value. you have another error just changing it to assign<br>&gt; completely changes the behavior of the “if” statement.<br>&gt;<br>&gt; - Paul<br>&gt;<br>&gt; On Dec 6, 2015, at 2:11 PM, Paul Ossenbruggen &lt; possen at gmail.com&gt; wrote:<br>&gt;<br>&gt; so the rule would have to be that the “switch&quot; or “if&quot; must return a value<br>&gt; of compatible type. Not sure I love all the braces in the “if&quot; case but it<br>&gt; does follow the existing language rules with the exception that it must be<br>&gt; have an else.<br>&gt;<br>&gt; let thisColor = if condition { .Red }   // illegal for expressions but not<br>&gt; statements<br>&gt;<br>&gt; Can still do this for statements:<br>&gt; if condition {<br>&gt; x = 40<br>&gt; }<br>&gt;<br>&gt; likewise:<br>&gt; let thisColor = if condition { .Red } else { 21 } // illegal unless<br>&gt; thisColor is Any<br>&gt;<br>&gt; unless:<br>&gt; let thisColor : Any = if condition { .Red } else { 21 } // illegal unless<br>&gt; thisColor is Any<br>&gt;<br>&gt; It would be nice to omit braces in this expression case but not for<br>&gt; statements:<br>&gt; let thisColor = if condition .Red else .Blue<br>&gt;<br>&gt; in statements braces would be required:<br>&gt;<br>&gt; if condition {<br>&gt; x = 32<br>&gt; } else {<br>&gt; y = 44<br>&gt; }<br>&gt;<br>&gt; &gt;     }<br>&gt;<br>&gt; On Dec 6, 2015, at 1:52 PM, Alex Lew via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces.<br>&gt; +1.<br>&gt;<br>&gt; Would you allow the same thing with if?<br>&gt;<br>&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic   &lt;salutis at me.com&gt;  wrote:<br>&gt;<br>&gt;<br>&gt;&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would prefer the expression to match the statement. The only<br>&gt;&gt; difference would be that all parts that were statements now have to be<br>&gt;&gt; expressions.<br>&gt;&gt;<br>&gt;&gt; +1<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let thisColor = switch thatColor {<br>&gt;&gt; &gt;         case .Red: .Green // must be an expression<br>&gt;&gt; &gt;         default: .Yellow      // must be an expression<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; No returns needed in the case clauses.<br>&gt;&gt;<br>&gt;&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt;&gt;<br>&gt;&gt; Readable and simple to learn.<br>&gt;&gt;<br>&gt;&gt; Fantastic!<br>&gt;&gt;<br>&gt;&gt; &gt; Formatting this as a one-liner would just require adding semicolons<br>&gt;&gt; (though I wouldn&#39;t recommend this).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -Thorsten<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;   swift-evolution at swift.org<br>&gt;&gt; &gt;   https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a0e7475e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; This is the whole idea behind the ternary operator in C, and the &quot;a = value if condition else otherValue&quot; in Python, etc. That&#39;s why I kind of like the ternary-operator-inspired syntax for pattern matching. It would be awful to use for statements -- just like it would be awful to replace if/else statements in C with the C ternary operator&#39;s syntax -- but I think it&#39;s pretty readable for expressions. It just seems to fit: just like C&#39;s if, while, for, and switch can now pattern match in Swift, so can ?: (not to mention that the colons after each case &quot;rhyme&quot; with the original colon in the ternary operator).<br></p><p><br>Agreed, I don’t mind the repurpose of the ? or match. I think there is real value in having expressions and switch like expressions. It avoids this problem:<br></p><p>switch x  {<br>	case 1: let y = 5<br>	case 2: let y = 6<br>	case 3: let y = 7<br>	default: y = 8<br>}<br>print(y)<br></p><p>y is out of scope here so you currently have to write…<br> <br>let y : Int<br>switch  x  {<br>	case 1:  y = 5<br>	case 2:  y = 6<br>	case 3:  y = 7<br>	default: y = 8<br>}<br>print(y)<br></p><p>y is in scope feels more clumsy but an expression would  be straight forward because type inference would take care or the result for you.<br></p><p>&gt; On Dec 6, 2015, at 7:45 PM, Alex Lew &lt;alexl.mail+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; I think the compiler can just assume that if it&#39;s valid to have a statement in a given context, the if or switch should be interpreted as a statement.<br>&gt; <br>&gt; A convention of keeping if-expressions to one line, and switch-expressions to one line per case, would make things relatively readable (though I don&#39;t feel that strongly about the convention):<br>&gt; <br>&gt; let foo = if condition { function1() } else { function2() }<br>&gt; let foo = switch color {<br>&gt;     case .Red: function1()<br>&gt;     case .Green: function2()<br>&gt;     default: function3()<br>&gt; }<br>&gt; <br>&gt; I&#39;m still not totally convinced by Matthew&#39;s argument that making the syntax lighter-weight is orthogonal to the expression/statement question. In my mind, it makes sense to have both a heavier switch statement, (which might have many sub-statements in each branch), and also a lighter-weight option for a quick pattern-match inside an expression (like the ones we&#39;ve been discussing in this thread). <br>&gt; <br>&gt; This is the whole idea behind the ternary operator in C, and the &quot;a = value if condition else otherValue&quot; in Python, etc. That&#39;s why I kind of like the ternary-operator-inspired syntax for pattern matching. It would be awful to use for statements -- just like it would be awful to replace if/else statements in C with the C ternary operator&#39;s syntax -- but I think it&#39;s pretty readable for expressions. It just seems to fit: just like C&#39;s if, while, for, and switch can now pattern match in Swift, so can ?: (not to mention that the colons after each case &quot;rhyme&quot; with the original colon in the ternary operator).<br>&gt; <br>&gt; But I believe I&#39;m in the minority on that opinion, which is totally fine. :)<br>&gt; <br>&gt; I think the questions then become: first, as Chris has asked, do the if/switch expressions provide enough of a benefit (in terms of conciseness) to be worth implementing? And, as Matthew suggested: is there a lighter-weight syntax that would make both statements and expressions more succinct?<br>&gt; <br>&gt; All best,<br>&gt; Alex<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 10:11 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt; In thinking about this, is there a way to have the compiler detect that something is a statement vs expression? Is it always clear to users when something is an expression vs a statement? In blurring the lines between expressions and statements complications arise anytime there is a return value returned by the result of “switch” or “if” it suddenly becomes an expression. Are there gray areas where it is hard to determine whether it is one vs the other when we use the those keywords? If it is not possible to determine for every situation or confusing to users, then maybe a new keyword for expressions is necessary. When a branch of an else returns void does it then become a statement? We should avoid shoehorning it in just to avoid another keyword. <br>&gt; <br>&gt; let foo = if condition {<br>&gt;  x = 1 // implied void -- illegal<br>&gt; } else {<br>&gt;  10  // returns expression<br>&gt; }<br>&gt; <br>&gt; also, I think this is confusing:<br>&gt; <br>&gt; let foo = if condition {<br>&gt;  function1()<br>&gt; } else {<br>&gt;  function2()<br>&gt; }<br>&gt; <br>&gt; it is not obvious that this is an assignment or that the functions return anything. Earlier I suggested something using =  to make it more clear. This is similar to the requirement that functions that throw are prefixed with with “try&quot;<br>&gt; <br>&gt; let foo if condition {<br>&gt;  = function1()<br>&gt; } else {<br>&gt;  = function2()<br>&gt; }<br>&gt; <br>&gt; also for the literal case: <br>&gt; <br>&gt; let foo  if condition {<br>&gt;  =  1 // can’t accidentally put a non expression here. <br>&gt; } else {<br>&gt;  = 10  // returns expression<br>&gt; }<br>&gt; <br>&gt; Which makes it clear that it is an expression coming back from both sides of the “if”. The switch case is a little trickier because of the case. <br>&gt; <br>&gt; let foo switch value {<br>&gt;  = .Red:   function1()<br>&gt;  = .Green  function2() <br>&gt;  =  default: function3()<br>&gt; }<br>&gt; <br>&gt; The equal emphasizes the functions return a value for each part of the switch and assigns to “foo”, but somehow is unsatisfying having that equal everywhere. <br>&gt; <br>&gt; One the other hand,  the ternary operator being an expression this confusion does not exist, it is clear that function1() and function2() must return a value. <br>&gt; <br>&gt; let foo = condition ? function1() : function2() <br>&gt; <br>&gt; even when on separate lines:<br>&gt; <br>&gt; let foo = condition ? <br>&gt;  function1() :<br>&gt;  function2() <br>&gt; <br>&gt; So maybe Alex’s original suggestion works better where the ? operator is extended to support a switch like expression and keeping the two statements and expressions separate. <br>&gt; <br>&gt; let foo = condition ? <br>&gt;  .Red : .Green<br>&gt;  .Green : Red<br>&gt; <br>&gt; let foo = condition ? <br>&gt;  .Red: function1()<br>&gt;  .Green: function2() <br>&gt; <br>&gt; let foo = condition ? .Red: function1() .Blue: function2() default:. function3() <br>&gt; <br>&gt; also could include optional cases:<br>&gt; <br>&gt; let foo = condition ? case .Red: function1(), case .Blue: functions(), default: function3()<br>&gt; <br>&gt; Which brings us back full circle to the keyword because most people don’t like the ? operator which is why Alex suggested “match&quot;:<br>&gt; <br>&gt; let foo = match condition <br>&gt;  .Red: function1()<br>&gt;  .Green: function2() <br>&gt;  default: function3()<br>&gt; <br>&gt; or with optional cases: <br>&gt; <br>&gt; let foo = match condition <br>&gt;  case .Red: function1()<br>&gt;  case .Green: function2() <br>&gt;  default: function3()<br>&gt; <br>&gt; for booleans :<br>&gt; <br>&gt; let too = match condition function() else function2()<br>&gt; <br>&gt; I still like this better. A new keyword makes sure there is no confusion about expressions vs statements and avoids complications with the return values. Match would always be an expression, if/else/swtich are always statements. Also those keywords don’t change behavior if a user changes a statement into an expression by assigning the expression the else part would suddenly be required. <br>&gt; <br>&gt; if condition {<br>&gt;  function1()<br>&gt; } <br>&gt; <br>&gt; is changed to <br>&gt; <br>&gt; let foo = if condition {<br>&gt;  function1()  <br>&gt; }  <br>&gt; <br>&gt; is now an error, because there is no else. Now if function1() does not return a value. you have another error just changing it to assign completely changes the behavior of the “if” statement. <br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 2:11 PM, Paul Ossenbruggen &lt; possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; so the rule would have to be that the “switch&quot; or “if&quot; must return a value of compatible type. Not sure I love all the braces in the “if&quot; case but it does follow the existing language rules with the exception that it must be have an else.<br>&gt;&gt; <br>&gt;&gt; let thisColor = if condition { .Red }   // illegal for expressions but not statements<br>&gt;&gt; <br>&gt;&gt; Can still do this for statements:<br>&gt;&gt; if condition {<br>&gt;&gt;  x = 40<br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; likewise:<br>&gt;&gt; let thisColor = if condition { .Red } else { 21 } // illegal unless thisColor is Any <br>&gt;&gt; <br>&gt;&gt; unless: <br>&gt;&gt; let thisColor : Any = if condition { .Red } else { 21 } // illegal unless thisColor is Any <br>&gt;&gt; <br>&gt;&gt; It would be nice to omit braces in this expression case but not for statements: <br>&gt;&gt; let thisColor = if condition .Red else .Blue <br>&gt;&gt; <br>&gt;&gt; in statements braces would be required: <br>&gt;&gt; <br>&gt;&gt; if condition {<br>&gt;&gt;  x = 32<br>&gt;&gt; } else {<br>&gt;&gt;  y = 44<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt; &gt;     }<br>&gt;&gt;&gt; On Dec 6, 2015, at 1:52 PM, Alex Lew via swift-evolution &lt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces. +1.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would you allow the same thing with if?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic   &lt;salutis at me.com &lt;mailto:salutis at me.com&gt;&gt;  wrote: <br>&gt;&gt;&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; let thisColor = switch thatColor {<br>&gt;&gt;&gt; &gt;         case .Red: .Green // must be an expression<br>&gt;&gt;&gt; &gt;         default: .Yellow      // must be an expression<br>&gt;&gt;&gt; &gt;     }<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; No returns needed in the case clauses.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This actually looks great. One simple rule and zero new keywords. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Readable and simple to learn. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fantastic! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -Thorsten<br>&gt;&gt;&gt; &gt; _______________________________________________ <br>&gt;&gt;&gt; &gt; swift-evolution mailing list <br>&gt;&gt;&gt; &gt;   swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt; &gt;   https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________ <br>&gt;&gt;&gt; swift-evolution mailing list <br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/9b61e822/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December  7, 2015 at 05:00:00pm</p></header><div class="content"><p>I would indent multiline expressions, so that the assignment target stands out.<br></p><p>let foo = if condition {<br>            function1()<br>      } else {<br>            function2()<br>      }<br></p><p><br>Same for the switch-expression.<br></p><p>-Thorsten<br></p><p>&gt; Am 07.12.2015 um 04:11 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; let foo = if condition {<br>&gt; 	function1()<br>&gt; } else {<br>&gt; 	function2()<br>&gt; }<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>December 12, 2015 at 01:00:00am</p></header><div class="content"><p>Removing ?: is an excellent idea - but do we really need to replace it with anything new?<br>inline blocks seem to provide much more flexibility with the current language with no new keywords and a much clearer intent<br></p><p>let myColor = (<br>  match yourColor<br>  case .Blue:  .Red<br>  case .Green: .Blue<br>  case .Red:   .Blue<br>)<br></p><p>let myColor : Color = {<br>  switch (yourColor) {<br>    case .Red:   return .Green<br>    case .Green: return .Blue<br>    case .Blue:  return .Red<br>  }<br>}()<br></p><p><br>&gt; On 7 Dec 2015, at 16:06, thorsten--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would indent multiline expressions, so that the assignment target stands out.<br>&gt; <br>&gt; let foo = if condition {<br>&gt;            function1()<br>&gt;      } else {<br>&gt;            function2()<br>&gt;      }<br>&gt; <br>&gt; <br>&gt; Same for the switch-expression.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt;&gt; Am 07.12.2015 um 04:11 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; let foo = if condition {<br>&gt;&gt; 	function1()<br>&gt;&gt; } else {<br>&gt;&gt; 	function2()<br>&gt;&gt; }<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/9aa04035/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 12, 2015 at 07:00:00am</p></header><div class="content"><p>Strong -1; this turns a quick one-liner into a multiline monstrosity. When massaging coordinates and layouts in iOS apps, ?: is often helpful to handle corner cases inline.<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>December 11, 2015 at 07:00:00pm</p></header><div class="content"><p>Strong -1, for all the reasons Andrey gave, although I think his point could benefit from examples.<br></p><p>Consider this case from my codebase, for which ?: is natural:<br></p><p>    ///http://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html<br>   func uriEncode(string: String, encodeSlash: Bool) -&gt; String {<br>        var encodedString = &quot;&quot;<br>        for char in string.characters {<br>            if (char &gt;= &quot;A&quot; &amp;&amp; char &lt;= &quot;z&quot;) || (char &gt;= &quot;a&quot; &amp;&amp; char &lt;= &quot;z&quot;) || (char &gt;= &quot;0&quot; &amp;&amp; char &lt;= &quot;9&quot;) || char == &quot;_&quot; || char == &quot;-&quot; || char == &quot;~&quot; || char == &quot;.&quot; {<br>                encodedString += &quot;\(char)&quot;<br>            }<br>            else if char == &quot;/&quot; {<br>                encodedString += encodeSlash ? &quot;%2F&quot; : &quot;\(char)&quot;<br>            }<br>            else {<br>                let literal = String(char)<br>                for byte in literal.utf8 {<br>                    encodedString += String(format: &quot;%%2X&quot;, arguments: [Int(byte)])<br>                }<br>            }<br>        }<br>        return encodedString<br>    }<br></p><p>I think replacing with `let foo` and scopes lengthens, emphasizes, and draws attention to a very minor detail, de-emphaizing and obscuring the main idea of the function.<br></p><p><br></p><p><br></p><p>&gt; On Dec 11, 2015, at 7:18 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Strong -1; this turns a quick one-liner into a multiline monstrosity. When massaging coordinates and layouts in iOS apps, ?: is often helpful to handle corner cases inline.<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>I agree - but this isn’t the case i covered.<br>This is the trivial case of an expression<br></p><p>condition ? value1 : value2<br></p><p>which shouldn’t be done using blocks (my example was really an elaboration function)<br></p><p>i know the ternary operator is nice in this case, but isn’t the following just as easy to write and understand ?<br>it’s certainly easier to add comments - i know it’s a little longer, but … it’s a style thing i guess<br></p><p>func uriEncode(string: String, encodeSlash: Bool) -&gt; String {<br>  var encodedString = &quot;&quot;<br>  for char in string.characters {<br>    if (char &gt;= &quot;A&quot; &amp;&amp; char &lt;= &quot;z&quot;) || (char &gt;= &quot;a&quot; &amp;&amp; char &lt;= &quot;z&quot;) || (char &gt;= &quot;0&quot; &amp;&amp; char &lt;= &quot;9&quot;) || char == &quot;_&quot; || char == &quot;-&quot; || char == &quot;~&quot; || char == &quot;.&quot; {<br>      encodedString += &quot;\(char)&quot;<br>    }<br>    else if char == &quot;/&quot; {<br>      if encodeSlash {<br>        encodedString += &quot;%2F” // URL Encoding for Forward Slash<br>      } else {<br>        encodedString += &quot;\(char)&quot;<br>      }<br>    }<br>    else {<br>      let literal = String(char)<br>      for byte in literal.utf8 {<br>        encodedString += String(format: &quot;%%2X&quot;, arguments: [Int(byte)])<br>      }<br>    }<br>  }<br>  return encodedString<br>}<br></p><p>however, if you replace the ternary operator with *anything* we’re asking for someone to come along with and change existing multilayered ?: into the new form.<br></p><p>Such as<br></p><p>return (heapAlign  &lt; valueAlign<br>     ? (valueAlign &lt; elementAlign ? elementAlign : valueAlign)<br>     : (heapAlign  &lt; elementAlign ? elementAlign : heapAlign))<br></p><p>to<br></p><p>return if heapAlign &lt; valueAlign<br>    (if valueAlign &lt; elementAlign (elementAlign) else (valueAlign))<br>  else<br>    (if heapAlign  &lt; elementAlign (elementAlign) else (heapAlign))<br></p><p>or<br></p><p><br>return<br>  if heapAlign &lt; valueAlign (<br>    if valueAlign &lt; elementAlign (<br>      elementAlign<br>    ) else (<br>      valueAlign<br>    )<br>  ) else (<br>    if heapAlign  &lt; elementAlign (<br>      elementAlign<br>    ) else (<br>      heapAlign<br>    )<br>  )<br></p><p>which really doesn’t help - it’s actually easier read as:<br></p><p>return {<br>  if heapAlign &lt; valueAlign (<br>    if valueAlign &gt;= elementAlign (<br>      return valueAlign<br>    )<br>  ) else (<br>    if heapAlign &gt;= elementAlign (<br>      return heapAlign<br>    )<br>  )<br>  return elementAlign<br>}()<br></p><p>Use inline blocks for complex logic and the existing else if for trivial cases - even on one or two lines<br></p><p>let width : Int<br>if highDef {width = 1920} else {width = 720}<br></p><p>if encodeSlash {encodedString += &quot;%2F”} <br>else {encodedString += &quot;\(char)&quot;}<br></p><p>ABR.<br></p><p>&gt; On 12 Dec 2015, at 01:31, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Strong -1, for all the reasons Andrey gave, although I think his point could benefit from examples.<br>&gt; <br>&gt; Consider this case from my codebase, for which ?: is natural:<br>&gt; <br>&gt;    ///http://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html<br>&gt;   func uriEncode(string: String, encodeSlash: Bool) -&gt; String {<br>&gt;        var encodedString = &quot;&quot;<br>&gt;        for char in string.characters {<br>&gt;            if (char &gt;= &quot;A&quot; &amp;&amp; char &lt;= &quot;z&quot;) || (char &gt;= &quot;a&quot; &amp;&amp; char &lt;= &quot;z&quot;) || (char &gt;= &quot;0&quot; &amp;&amp; char &lt;= &quot;9&quot;) || char == &quot;_&quot; || char == &quot;-&quot; || char == &quot;~&quot; || char == &quot;.&quot; {<br>&gt;                encodedString += &quot;\(char)&quot;<br>&gt;            }<br>&gt;            else if char == &quot;/&quot; {<br>&gt;                encodedString += encodeSlash ? &quot;%2F&quot; : &quot;\(char)&quot;<br>&gt;            }<br>&gt;            else {<br>&gt;                let literal = String(char)<br>&gt;                for byte in literal.utf8 {<br>&gt;                    encodedString += String(format: &quot;%%2X&quot;, arguments: [Int(byte)])<br>&gt;                }<br>&gt;            }<br>&gt;        }<br>&gt;        return encodedString<br>&gt;    }<br>&gt; <br>&gt; I think replacing with `let foo` and scopes lengthens, emphasizes, and draws attention to a very minor detail, de-emphaizing and obscuring the main idea of the function.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 11, 2015, at 7:18 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Strong -1; this turns a quick one-liner into a multiline monstrosity. When massaging coordinates and layouts in iOS apps, ?: is often helpful to handle corner cases inline.<br>&gt;&gt; <br>&gt;&gt; A.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/d74ae5a2/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 12, 2015 at 01:00:00am</p></header><div class="content"><p>How about:<br></p><p>let v = if condition then “A&quot; else “B&quot;<br></p><p>No mysterious symbols or braces, or multiline monstrosity.<br></p><p>&gt; On 12 Dec 2015, at 01:18, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Strong -1; this turns a quick one-liner into a multiline monstrosity. When massaging coordinates and layouts in iOS apps, ?: is often helpful to handle corner cases inline.<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 12, 2015 at 07:00:00am</p></header><div class="content"><p>&gt; I think replacing with `let foo` and scopes lengthens, emphasizes, and draws attention to a very minor detail, de-emphaizing and obscuring the main idea of the function.<br></p><p>This.<br></p><p>&gt; How about:<br>&gt; <br>&gt; let v = if condition then “A&quot; else “B&quot;<br></p><p>I don&#39;t think introducing a separate &quot;then&quot; keyword is a good idea, two subtly different kinds of IFs would be confusing.<br></p><p>I guess you meant:<br></p><p>let v = if condition { &quot;A&quot; } else { &quot;B&quot; }<br></p><p>That&#39;s acceptable to me, although might not be any more readable, and feels slightly inferior to:<br></p><p>let v = (condition ? &quot;A&quot; : &quot;B&quot;)<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/87813fb8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 11, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 5:36 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; How about:<br>&gt;&gt; <br>&gt;&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt; <br>&gt; I don&#39;t think introducing a separate &quot;then&quot; keyword is a good idea, two subtly different kinds of IFs would be confusing.<br>&gt; <br>&gt; I guess you meant:<br>&gt; <br>&gt; let v = if condition { &quot;A&quot; } else { &quot;B” }<br></p><p>I don’t really want to wade into this discussion, but if A and B are intended to be *expressions* instead of an arbitrary sequence of statements|decls|exprs, then a more consistent syntax would be:<br></p><p>	let v = if condition (A) else (b) <br></p><p>The immediate problem with that is that juxtaposition of two expressions (condition, and A [with or without parens]) will lead to immediate syntactic ambiguity.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/0a258f49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 11, 2015 at 11:00:00pm</p></header><div class="content"><p>So adding “then”: <br></p><p>let v = if condition then “A” else “B” <br></p><p>fixes that ambiguity and “then” would help differentiate an expression from a statement. I think there is value to having them separate constructs (for details see earlier comments in this thread). Also it is nice not having the braces in the expression. <br></p><p>Perhaps, similarly, “then&quot; indicates an expression as opposed to a statement:<br></p><p>let v = switch condition then case Red: 1, case Blue: 2, case Green: 3<br></p><p>One downside is it, It may add confusion as to when to add the “then” clause as people will have to know what an expression vs statement is, but I suppose that is true with a ternary operator as well, and this reads better than a ternary operator. This also provides a good way to do single line switch expressions. <br></p><p>for multiline:<br></p><p>let v = if condition <br>	then “A” <br>	else “B&quot;<br></p><p>let v = switch condition then <br>	case .Red: 1,<br>	case .Blue: 2,<br>	case .Green: 3<br></p><p>or with multiple expressions:<br></p><p>let v = switch condition then <br>	case .Red: 1,<br>	case .Blue: (if shade == .Dark then 4 else 2),<br>	case .Green: 3<br></p><p><br>&gt; <br>&gt; On Dec 11, 2015, at 8:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 11, 2015, at 5:36 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; How about:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think introducing a separate &quot;then&quot; keyword is a good idea, two subtly different kinds of IFs would be confusing.<br>&gt;&gt; <br>&gt;&gt; I guess you meant:<br>&gt;&gt; <br>&gt;&gt; let v = if condition { &quot;A&quot; } else { &quot;B” }<br>&gt; <br>&gt; I don’t really want to wade into this discussion, but if A and B are intended to be *expressions* instead of an arbitrary sequence of statements|decls|exprs, then a more consistent syntax would be:<br>&gt; <br>&gt; 	let v = if condition (A) else (b) <br>&gt; <br>&gt; The immediate problem with that is that juxtaposition of two expressions (condition, and A [with or without parens]) will lead to immediate syntactic ambiguity.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/67424326/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>If at all possible, it’d be good to avoid adding new keywords, however if the keyword ‘then’ could enable &#39;if expressions’ and ‘switch expressions’, I’d be fully in favour. <br></p><p>Binding to a variable using a switch statement isn’t as elegant as it could be. The ability to define a ‘let’ variable and assigning a value later in a switch statement does help somewhat, but the examples below are very clear and elegant in my opinion. (I’d even question the necessity of the repetitive keyword ‘case’, but maybe that’s a step too far?)<br></p><p>Al<br></p><p>&gt; On 12 Dec 2015, at 07:15, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So adding “then”: <br>&gt; <br>&gt; let v = if condition then “A” else “B” <br>&gt; <br>&gt; fixes that ambiguity and “then” would help differentiate an expression from a statement. I think there is value to having them separate constructs (for details see earlier comments in this thread). Also it is nice not having the braces in the expression. <br>&gt; <br>&gt; Perhaps, similarly, “then&quot; indicates an expression as opposed to a statement:<br>&gt; <br>&gt; let v = switch condition then case Red: 1, case Blue: 2, case Green: 3<br>&gt; <br>&gt; One downside is it, It may add confusion as to when to add the “then” clause as people will have to know what an expression vs statement is, but I suppose that is true with a ternary operator as well, and this reads better than a ternary operator. This also provides a good way to do single line switch expressions. <br>&gt; <br>&gt; for multiline:<br>&gt; <br>&gt; let v = if condition <br>&gt; 	then “A” <br>&gt; 	else “B&quot;<br>&gt; <br>&gt; let v = switch condition then <br>&gt; 	case .Red: 1,<br>&gt; 	case .Blue: 2,<br>&gt; 	case .Green: 3<br>&gt; <br>&gt; or with multiple expressions:<br>&gt; <br>&gt; let v = switch condition then <br>&gt; 	case .Red: 1,<br>&gt; 	case .Blue: (if shade == .Dark then 4 else 2),<br>&gt; 	case .Green: 3<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 11, 2015, at 8:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 11, 2015, at 5:36 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think introducing a separate &quot;then&quot; keyword is a good idea, two subtly different kinds of IFs would be confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess you meant:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let v = if condition { &quot;A&quot; } else { &quot;B” }<br>&gt;&gt; <br>&gt;&gt; I don’t really want to wade into this discussion, but if A and B are intended to be *expressions* instead of an arbitrary sequence of statements|decls|exprs, then a more consistent syntax would be:<br>&gt;&gt; <br>&gt;&gt; 	let v = if condition (A) else (b) <br>&gt;&gt; <br>&gt;&gt; The immediate problem with that is that juxtaposition of two expressions (condition, and A [with or without parens]) will lead to immediate syntactic ambiguity.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/b8d068f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 12, 2015 at 06:00:00am</p></header><div class="content"><p>Dropping “case” might be interesting, since it becomes a little redundant in the “switch” situation, this is one advantage of having a new keyword, but not sure this reads as well:<br></p><p>let v = switch val then .Red: 1, .Green: 2, .Blue: 3<br></p><p>It is definitely nice in it’s compactness which is a big plus. <br></p><p>Another possibility, because “switch&quot; does not need to resolve the syntactic ambiguity, but then we lose the “then” always meaning an expression consistency. <br></p><p>let v = switch val case .Red: 1, case .Green: 2, case .Blue: 3<br></p><p>this might be better for switch because we don’t need to mix “then” with “switch” which historically has not been done. Question is, is it better to go with “then” as expression consistency or with slightly more compact and following the conventions out there. Personally, I am not bothered by using “then” with “switch” <br></p><p><br>&gt; On Dec 12, 2015, at 4:03 AM, Al Skipp &lt;al_skipp at fastmail.fm&gt; wrote:<br>&gt; <br>&gt; If at all possible, it’d be good to avoid adding new keywords, however if the keyword ‘then’ could enable &#39;if expressions’ and ‘switch expressions’, I’d be fully in favour. <br>&gt; <br>&gt; Binding to a variable using a switch statement isn’t as elegant as it could be. The ability to define a ‘let’ variable and assigning a value later in a switch statement does help somewhat, but the examples below are very clear and elegant in my opinion. (I’d even question the necessity of the repetitive keyword ‘case’, but maybe that’s a step too far?)<br>&gt; <br>&gt; Al<br>&gt; <br>&gt;&gt; On 12 Dec 2015, at 07:15, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So adding “then”: <br>&gt;&gt; <br>&gt;&gt; let v = if condition then “A” else “B” <br>&gt;&gt; <br>&gt;&gt; fixes that ambiguity and “then” would help differentiate an expression from a statement. I think there is value to having them separate constructs (for details see earlier comments in this thread). Also it is nice not having the braces in the expression. <br>&gt;&gt; <br>&gt;&gt; Perhaps, similarly, “then&quot; indicates an expression as opposed to a statement:<br>&gt;&gt; <br>&gt;&gt; let v = switch condition then case Red: 1, case Blue: 2, case Green: 3<br>&gt;&gt; <br>&gt;&gt; One downside is it, It may add confusion as to when to add the “then” clause as people will have to know what an expression vs statement is, but I suppose that is true with a ternary operator as well, and this reads better than a ternary operator. This also provides a good way to do single line switch expressions. <br>&gt;&gt; <br>&gt;&gt; for multiline:<br>&gt;&gt; <br>&gt;&gt; let v = if condition <br>&gt;&gt; 	then “A” <br>&gt;&gt; 	else “B&quot;<br>&gt;&gt; <br>&gt;&gt; let v = switch condition then <br>&gt;&gt; 	case .Red: 1,<br>&gt;&gt; 	case .Blue: 2,<br>&gt;&gt; 	case .Green: 3<br>&gt;&gt; <br>&gt;&gt; or with multiple expressions:<br>&gt;&gt; <br>&gt;&gt; let v = switch condition then <br>&gt;&gt; 	case .Red: 1,<br>&gt;&gt; 	case .Blue: (if shade == .Dark then 4 else 2),<br>&gt;&gt; 	case .Green: 3<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 11, 2015, at 8:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 11, 2015, at 5:36 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t think introducing a separate &quot;then&quot; keyword is a good idea, two subtly different kinds of IFs would be confusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I guess you meant:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let v = if condition { &quot;A&quot; } else { &quot;B” }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t really want to wade into this discussion, but if A and B are intended to be *expressions* instead of an arbitrary sequence of statements|decls|exprs, then a more consistent syntax would be:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let v = if condition (A) else (b) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The immediate problem with that is that juxtaposition of two expressions (condition, and A [with or without parens]) will lead to immediate syntactic ambiguity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/3d8e9266/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 12, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On 12 Dec 2015, at 14:48, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Dropping “case” might be interesting, since it becomes a little redundant in the “switch” situation, this is one advantage of having a new keyword, but not sure this reads as well:<br>&gt; <br>&gt; let v = switch val then .Red: 1, .Green: 2, .Blue: 3<br>&gt; <br>&gt; It is definitely nice in it’s compactness which is a big plus. <br>&gt; <br>&gt; Another possibility, because “switch&quot; does not need to resolve the syntactic ambiguity, but then we lose the “then” always meaning an expression consistency. <br>&gt; <br>&gt; let v = switch val case .Red: 1, case .Green: 2, case .Blue: 3<br>&gt; <br>&gt; this might be better for switch because we don’t need to mix “then” with “switch” which historically has not been done. Question is, is it better to go with “then” as expression consistency or with slightly more compact and following the conventions out there. Personally, I am not bothered by using “then” with “switch” <br></p><p>Would the cases need to be comma separated? Would a new line make more sense instead?<br></p><p>Currently this is possible:<br></p><p>enum Col { case Red, Green, Blue }<br></p><p>let c = Col.Blue<br></p><p>let x: Int = {<br>  switch c {<br>  case .Red: return 1<br>  case .Green: return 2<br>  case .Blue: return 3<br>  }<br>}()<br></p><p>It works, but there are several things I don’t like:<br>- the switch statement must be wrapped in a closure which is invoked at the end.<br>- the type of ‘x’ needs to be given<br>- each case requires a return statement <br></p><p>Here’s a proposal for a switch expression:<br></p><p>let y = switch c then {<br>  .Red: 1<br>  .Green: 2<br>  .Blue: 3<br>}<br></p><p>I think the braces are probably needed in the switch expression, also the ‘then’ keyword’ does look a bit peculiar. Any other ideas on how to support both switch statements and expressions?<br></p><p>Al<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/c0aa27ca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 12, 2015 at 11:00:00am</p></header><div class="content"><p>There are a couple of languages that use then inside their switches.<br>http://rigaux.org/language-study/syntax-across-languages.html#CntrFlowMltSlcSwt<br></p><p>I like using only one then in the switch to signal to the parser that this<br>is a switch expression<br></p><p>The only issue I see is that the colon in the switch is used in the same<br>way as the current ternary expression.<br></p><p>Personally I don&#39;t think that a switch expression is all that useful since<br>being a multiline statement actually helps the readability.<br></p><p>var result:Int = {if bool {return 1} else if bool {return 2} else {return 3<br>}}()<br></p><p>VS<br></p><p>var result = if bool then 1 else if bool then 2 else 3<br></p><p>On Sat, Dec 12, 2015 at 11:15 AM, Al Skipp via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 12 Dec 2015, at 14:48, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;<br>&gt; Dropping “case” might be interesting, since it becomes a little redundant<br>&gt; in the “switch” situation, this is one advantage of having a new<br>&gt; keyword, but not sure this reads as well:<br>&gt;<br>&gt; let v = switch val then .Red: 1, .Green: 2, .Blue: 3<br>&gt;<br>&gt; It is definitely nice in it’s compactness which is a big plus.<br>&gt;<br>&gt; Another possibility, because “switch&quot; does not need to resolve the<br>&gt; syntactic ambiguity, but then we lose the “then” always meaning an<br>&gt; expression consistency.<br>&gt;<br>&gt; let v = switch val case .Red: 1, case .Green: 2, case .Blue: 3<br>&gt;<br>&gt; this might be better for switch because we don’t need to mix “then” with<br>&gt; “switch” which historically has not been done. Question is, is it better to<br>&gt; go with “then” as expression consistency or with slightly more compact and<br>&gt; following the conventions out there. Personally, I am not bothered by using<br>&gt; “then” with “switch”<br>&gt;<br>&gt;<br>&gt; Would the cases need to be comma separated? Would a new line make more<br>&gt; sense instead?<br>&gt;<br>&gt; Currently this is possible:<br>&gt;<br>&gt; enum Col { case Red, Green, Blue }<br>&gt;<br>&gt; let c = Col.Blue<br>&gt;<br>&gt; let x: Int = {<br>&gt;   switch c {<br>&gt;   case .Red: return 1<br>&gt;   case .Green: return 2<br>&gt;   case .Blue: return 3<br>&gt;   }<br>&gt; }()<br>&gt;<br>&gt; It works, but there are several things I don’t like:<br>&gt; - the switch statement must be wrapped in a closure which is invoked at<br>&gt; the end.<br>&gt; - the type of ‘x’ needs to be given<br>&gt; - each case requires a return statement<br>&gt;<br>&gt; Here’s a proposal for a switch expression:<br>&gt;<br>&gt; let y = switch c then {<br>&gt;   .Red: 1<br>&gt;   .Green: 2<br>&gt;   .Blue: 3<br>&gt; }<br>&gt;<br>&gt; I think the braces are probably needed in the switch expression, also the<br>&gt; ‘then’ keyword’ does look a bit peculiar. Any other ideas on how to support<br>&gt; both switch statements and expressions?<br>&gt;<br>&gt; Al<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/83fc1b88/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 12, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On 12 Dec 2015, at 19:33, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; There are a couple of languages that use then inside their switches. <br>&gt; http://rigaux.org/language-study/syntax-across-languages.html#CntrFlowMltSlcSwt &lt;http://rigaux.org/language-study/syntax-across-languages.html#CntrFlowMltSlcSwt&gt;<br>&gt; <br>&gt; I like using only one then in the switch to signal to the parser that this is a switch expression<br>&gt; <br>&gt; The only issue I see is that the colon in the switch is used in the same way as the current ternary expression.  <br></p><p>Good point. This probably makes more sense:<br></p><p>let y = switch c {<br>  .Red then 1<br>  .Green then 2<br>  .Blue then 3<br>}<br></p><p>&gt; Personally I don&#39;t think that a switch expression is all that useful since being a multiline statement actually helps the readability. <br></p><p>I think it can cut down on unnecessary boilerplate code, especially in functions that contain pattern matching and return a value. In which case you need to declare a variable, do the switch, assign to the var, then return at the end. It’s possible to do the trick with wrapping the switch in a closure inside the function, but that’s also quite ugly. It’d be nice to be able to do:<br></p><p>func f(c: Col) -&gt; Int {<br>  return switch c {<br>    .Red then 1<br>    .Green then 2<br>    .Blue then 3<br>  }<br>}<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/9eeeb78d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>It is pretty cool your example that works with the existing Swift and I agree with your assessment of it, but good to know. <br></p><p>I would prefer not to have the brackets in the expressions if possible, Bracket seem a little weird to me inside of an expression. This could also serve to further differentiate a statement vs expression in people’s minds. If the rule is use braces for statements, and no brackets for expressions.  If we needed to use something like a bracket, parenthesis seem more natural for an expression but I think it is better avoid the need for them if possible. Also, not having brackets or parenthesis looks cleaner to me. The commas allow the statement continue without having braces or parenthesis. Keep in mind compounded expressions, having required braces in this example would make it much harder to read:<br></p><p>let v = switch val then .Red: 1, .Green: (if specialGreen then 5 else 2), .Blue: (switch shade then .DarkBlue: 6, .LightBlue: 7, default: 9), default: 4<br></p><p>Use of “then&quot; for the switch expression kind of works if we also want to drop the “case:”. We could use another keyword like “cases” but in general the consensus is to avoid adding keywords unless necessary and “then” with this suggestion, would already be added for “if”. To explore this idea a bit:<br></p><p>let v = switch val cases: .Red: 1, .Green: 2, .Blue: 3, default: 4<br></p><p>this might be more in line with the existing “switch...case” syntax. It seems that this should also work in statements:<br></p><p>switch val {<br>	cases:	.Red: func1(),<br>			.Green: func2(),<br>			.Blue: func3(),<br>	default: 	func4()<br>}<br></p><p>This is kind of nice because it reduces the repetition of the word “case:” as well as decreasing visual clutter present in a switch statement. Going back to the expression, it would also be possible to write it like this, if preferred: <br></p><p>let v = switch val case: .Red: 1, case: .Green: 2, case: .Blue: 3, default: 4<br></p><p>For consistency “cases:” could be allowed here...from your example:<br></p><p>enum Col { cases: Red, Green, Blue }<br></p><p>I suppose as an alternative rather than adding the plural of “case” just use “case:” because it is an existing keyword, as in this example but I think it reads clearer with the plural. <br></p><p><br></p><p>&gt; On Dec 12, 2015, at 11:15 AM, Al Skipp &lt;al_skipp at fastmail.fm&gt; wrote:<br>&gt; <br>&gt;&gt; On 12 Dec 2015, at 14:48, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dropping “case” might be interesting, since it becomes a little redundant in the “switch” situation, this is one advantage of having a new keyword, but not sure this reads as well:<br>&gt;&gt; <br>&gt;&gt; let v = switch val then .Red: 1, .Green: 2, .Blue: 3<br>&gt;&gt; <br>&gt;&gt; It is definitely nice in it’s compactness which is a big plus. <br>&gt;&gt; <br>&gt;&gt; Another possibility, because “switch&quot; does not need to resolve the syntactic ambiguity, but then we lose the “then” always meaning an expression consistency. <br>&gt;&gt; <br>&gt;&gt; let v = switch val case .Red: 1, case .Green: 2, case .Blue: 3<br>&gt;&gt; <br>&gt;&gt; this might be better for switch because we don’t need to mix “then” with “switch” which historically has not been done. Question is, is it better to go with “then” as expression consistency or with slightly more compact and following the conventions out there. Personally, I am not bothered by using “then” with “switch” <br>&gt; <br>&gt; Would the cases need to be comma separated? Would a new line make more sense instead?<br>&gt; <br>&gt; Currently this is possible:<br>&gt; <br>&gt; enum Col { case Red, Green, Blue }<br>&gt; <br>&gt; let c = Col.Blue<br>&gt; <br>&gt; let x: Int = {<br>&gt;   switch c {<br>&gt;   case .Red: return 1<br>&gt;   case .Green: return 2<br>&gt;   case .Blue: return 3<br>&gt;   }<br>&gt; }()<br>&gt; <br>&gt; It works, but there are several things I don’t like:<br>&gt; - the switch statement must be wrapped in a closure which is invoked at the end.<br>&gt; - the type of ‘x’ needs to be given<br>&gt; - each case requires a return statement <br>&gt; <br>&gt; Here’s a proposal for a switch expression:<br>&gt; <br>&gt; let y = switch c then {<br>&gt;   .Red: 1<br>&gt;   .Green: 2<br>&gt;   .Blue: 3<br>&gt; }<br>&gt; <br>&gt; I think the braces are probably needed in the switch expression, also the ‘then’ keyword’ does look a bit peculiar. Any other ideas on how to support both switch statements and expressions?<br>&gt; <br>&gt; Al<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/5f6062b7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>I like these expressions with &quot;then&quot; and without braces.<br></p><p>What about using &quot;then&quot; for statements as well?<br></p><p>If condition then {<br>        ...<br>} else {<br>        ...<br>}<br></p><p>&gt; Am 12.12.2015 um 08:15 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; So adding “then”: <br>&gt; <br>&gt; let v = if condition then “A” else “B” <br>&gt; <br>&gt; fixes that ambiguity and “then” would help differentiate an expression from a statement. I think there is value to having them separate constructs (for details see earlier comments in this thread). Also it is nice not having the braces in the expression. <br>&gt; <br>&gt; Perhaps, similarly, “then&quot; indicates an expression as opposed to a statement:<br>&gt; <br>&gt; let v = switch condition then case Red: 1, case Blue: 2, case Green: 3<br>&gt; <br>&gt; One downside is it, It may add confusion as to when to add the “then” clause as people will have to know what an expression vs statement is, but I suppose that is true with a ternary operator as well, and this reads better than a ternary operator. This also provides a good way to do single line switch expressions. <br>&gt; <br>&gt; for multiline:<br>&gt; <br>&gt; let v = if condition <br>&gt; 	then “A” <br>&gt; 	else “B&quot;<br>&gt; <br>&gt; let v = switch condition then <br>&gt; 	case .Red: 1,<br>&gt; 	case .Blue: 2,<br>&gt; 	case .Green: 3<br>&gt; <br>&gt; or with multiple expressions:<br>&gt; <br>&gt; let v = switch condition then <br>&gt; 	case .Red: 1,<br>&gt; 	case .Blue: (if shade == .Dark then 4 else 2),<br>&gt; 	case .Green: 3<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 11, 2015, at 8:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 11, 2015, at 5:36 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How about:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think introducing a separate &quot;then&quot; keyword is a good idea, two subtly different kinds of IFs would be confusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess you meant:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let v = if condition { &quot;A&quot; } else { &quot;B” }<br>&gt;&gt; <br>&gt;&gt; I don’t really want to wade into this discussion, but if A and B are intended to be *expressions* instead of an arbitrary sequence of statements|decls|exprs, then a more consistent syntax would be:<br>&gt;&gt; <br>&gt;&gt; 	let v = if condition (A) else (b) <br>&gt;&gt; <br>&gt;&gt; The immediate problem with that is that juxtaposition of two expressions (condition, and A [with or without parens]) will lead to immediate syntactic ambiguity.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/193181d3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 13, 2015 at 02:00:00am</p></header><div class="content"><p>1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br></p><p>2. As for<br></p><p>	if cond (then-expr) (else-expr)<br></p><p>— this is definitely unreadable, and will cause problems. Even right now, if syntax vs expression syntax is ambiguous:<br></p><p>	if let foo = foos.filter { $0.isBar } {<br>	  ...<br>	}<br></p><p>3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br></p><p>4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/03042c20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 12, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br></p><p>agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br></p><p>&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br></p><p>Yes that would be great.<br></p><p>&gt; <br>&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br></p><p>The biggest problem statement is you don’t need to exhaustively specify every outcome:<br></p><p>if cond {<br>	print(“hello”)<br>}<br></p><p>whereas in an expression you have to specify what happens in the else.<br></p><p>let say = if cond then “hello” else “goodbye&quot;<br></p><p>unless you go seriously off the deep end:<br></p><p>let say = if cond then “hello” <br></p><p> “say&quot; then becomes an optional, *shudder*<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/4a8deb1b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 12, 2015 at 03:00:00pm</p></header><div class="content"><p>Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br></p><p>let x = If cond then X else Y<br></p><p>is the full form, where “else&quot; can not be omitted. <br></p><p>&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt; <br>&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt; <br>&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt; <br>&gt; Yes that would be great.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt; <br>&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt; <br>&gt; if cond {<br>&gt; 	print(“hello”)<br>&gt; }<br>&gt; <br>&gt; whereas in an expression you have to specify what happens in the else.<br>&gt; <br>&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt; <br>&gt; unless you go seriously off the deep end:<br>&gt; <br>&gt; let say = if cond then “hello” <br>&gt; <br>&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/5ebfc6ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5c03d71ebd1813a9c856bff896009b7?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Daniel Valls Estella</string> &lt;daniel at upzzle.com&gt;<p>December 13, 2015 at 02:00:00am</p></header><div class="content"><p>I don’t see the current way far <br></p><p>var optSel = &quot;opt2&quot;<br></p><p>let optRes:Int = { switch str{<br>		<br>	case &quot;opt1&quot;: return 1<br>	case &quot;opt2&quot;: return 2<br>	default: return 0<br>		<br>	} }()<br></p><p><br>To beauty this maybe operators can come in downgrading eficiency:<br></p><p>let optSel = &quot;opt2&quot;<br></p><p>let optRes = optSel *= [<br>	<br>	(&quot;opt1&quot;, 1),<br>	(&quot;opt2&quot;, 2)<br>	<br>] ?? 3<br></p><p>With (pseudocode):<br></p><p>func *= (left: Any, right: [(Any,Any)]) -&gt; Any? {<br></p><p>	for (rightKey,rightValue) in right{<br>		<br>		if rightKey == left {<br>				<br>			return rightValue<br>		}<br>	}<br>	<br>	return nil<br>}<br></p><p>Or:<br></p><p>let optSel = &quot;opt2&quot;<br></p><p>let optRes = optSel *= [<br>	<br>	&quot;opt1&quot;: 1,<br>	&quot;opt2&quot;: 2<br>	<br>	] ?? 3<br></p><p><br>With (just conceptually):<br></p><p>func *= (left: Any, right: Dictionary&lt;Any,Any&gt;) -&gt; Any? {<br>	<br>	for rightKey in right.keys(){<br>		<br>		if rightKey == left {<br>			<br>			return right[rightKey]<br>		}<br>	}<br>	<br>	return nil<br>}<br></p><p>&gt; El 13 des 2015, a les 0:51, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; va escriure:<br>&gt; <br>&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt; <br>&gt; let x = If cond then X else Y<br>&gt; <br>&gt; is the full form, where “else&quot; can not be omitted. <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt; <br>&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt; <br>&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt; <br>&gt;&gt; Yes that would be great.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt; <br>&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt; <br>&gt;&gt; if cond {<br>&gt;&gt; 	print(“hello”)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt; <br>&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt; <br>&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt; <br>&gt;&gt; let say = if cond then “hello” <br>&gt;&gt; <br>&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/f659951a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 12, 2015 at 09:00:00pm</p></header><div class="content"><p>Hello All, <br></p><p>Been sick in bed all day, but decided to try to be productive…<br></p><p>I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br></p><p>https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br></p><p>Thanks,<br>- Paul<br></p><p><br></p><p>&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt; <br>&gt; let x = If cond then X else Y<br>&gt; <br>&gt; is the full form, where “else&quot; can not be omitted. <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt; <br>&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt; <br>&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt; <br>&gt;&gt; Yes that would be great.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt; <br>&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt; <br>&gt;&gt; if cond {<br>&gt;&gt; 	print(“hello”)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt; <br>&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt; <br>&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt; <br>&gt;&gt; let say = if cond then “hello” <br>&gt;&gt; <br>&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151212/b583364b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On 13 Dec 2015, at 05:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello All, <br>&gt; <br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt; <br>&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt; <br>&gt; Thanks,<br>&gt; - Paul<br></p><p><br>Thanks for taking the time to put this detailed proposal together.<br></p><p>Regarding the if…then…else expression, it all looks good to me. <br>I have a few comments on the proposed switch expression:<br></p><p>1)<br>Is it worth reusing the ‘then’ keyword, instead of colon? If a new keyword is to be added, it’d be good if it wasn’t restricted to only one use. The advantage of using ‘then’ in switch would be to further distinguish the expression from the statement and would fit with the if…then…else expression. The disadvantage is that it adds a little more verbosity (ideally, expressions should be syntactically light-weight).<br></p><p>2)<br>Having the ‘case’ keyword appear only once, looks a bit odd to me, it gives the impression that it is only associated with the first case.<br>My preference would be to omit the ‘case’ keyword entirely. In the switch statement it can be helpful, as the cases can run over several lines, therefore the keyword is a handy visual marker for the different cases. The expression for each case should only be one line, so this visual marker shouldn’t be required for switch expressions. Having said that, I understand if people think this is too much of a change. Therefore my suggestion is, either the ‘case’ keyword is omitted from the expression, or it is associated with every case as it currently is with the switch statement.<br></p><p>3)<br>It might be worth showing an example of binding to associated values in a enum using a switch expression? However, the behaviour should be identical to the switch statement, so this might not be required.<br></p><p>Al<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/cb57de7a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 3:59 AM, Al Skipp &lt;al_skipp at fastmail.fm&gt; wrote:<br>&gt; <br>&gt;&gt; On 13 Dec 2015, at 05:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt; <br>&gt; <br>&gt; Thanks for taking the time to put this detailed proposal together.<br>&gt; <br>&gt; Regarding the if…then…else expression, it all looks good to me. <br>&gt; I have a few comments on the proposed switch expression:<br>&gt; <br>&gt; 1)<br>&gt; Is it worth reusing the ‘then’ keyword, instead of colon? If a new keyword is to be added, it’d be good if it wasn’t restricted to only one use. The advantage of using ‘then’ in switch would be to further distinguish the expression from the statement and would fit with the if…then…else expression. The disadvantage is that it adds a little more verbosity (ideally, expressions should be syntactically light-weight).<br></p><p>I was doing my best to stay with with the existing model for switch if possible so using the existing constructs both make the implementation simpler and hopefully consistent with the way switch currently works. The main change here is that each part is an expression instead of statement(s) otherwise it is the same old switch but usable where you would have expressions.  <br></p><p>&gt; <br>&gt; 2)<br>&gt; Having the ‘case’ keyword appear only once, looks a bit odd to me, it gives the impression that it is only associated with the first case.<br>&gt; My preference would be to omit the ‘case’ keyword entirely. In the switch statement it can be helpful, as the cases can run over several lines, therefore the keyword is a handy visual marker for the different cases. The expression for each case should only be one line, so this visual marker shouldn’t be required for switch expressions. Having said that, I understand if people think this is too much of a change. Therefore my suggestion is, either the ‘case’ keyword is omitted from the expression, or it is associated with every case as it currently is with the switch statement.<br></p><p>I explored adding “cases” which could be interchanged with “case” but decided against it because it would add another keyword. Also, the idea was to have this work the same as the switch statement. Currently switch statements allow you to have a single word “case” followed by multiple comma separated cases. Since case and cases would just behave the same, I am not opposed to adding back in if there is significant benefit in readability.  <br></p><p><br>&gt; <br>&gt; 3)<br>&gt; It might be worth showing an example of binding to associated values in a enum using a switch expression? However, the behaviour should be identical to the switch statement, so this might not be required.<br></p><p>Ok will add that.<br>&gt; <br>&gt; Al<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/fb832ee6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 13, 2015 at 07:00:00am</p></header><div class="content"><p>I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br></p><p>I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello All, <br>&gt; <br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt; <br>&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt; <br>&gt; Thanks,<br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt; <br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt; <br>&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/f424f88f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>I also have no preference yet so I&#39;ll just throw in some thoughts.<br></p><p>** Existing Code **<br>The removal of the ternary operator would likely affect a lot of existing<br>code.<br>A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields<br>304 results.<br></p><p>Two simpler examples:<br></p><p>[<br>  &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>  &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>  &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>  &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>  &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>  &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>]<br></p><p>view1.alpha = editing ? 1 : 0<br>view2.alpha = editing ? 1 : 0<br>view3.alpha = editing ? 0 : 1<br>view4.alpha = editing ? 1 : 0<br></p><p>I am not sure using if…then…else would make this better to read &amp;<br>understand or worse.<br></p><p><br>** Keyword then **<br>Making then a keyword would also cost us another word so that change needs<br>to be carefully considered.<br>In our large app I found just a single instance where then was used for a<br>variable&#39;s name:<br></p><p>func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br></p><p>Promises use the word then rather extensively: https://promisesaplus.com<br></p><p>On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in<br>&gt; general I do want to see conditional expressions and removal of the ternary<br>&gt; operator.<br>&gt;<br>&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final<br>&gt; solution.  Is there a reason this is omitted from this proposal?  I<br>&gt; apologize if that was discussed in the thread.  I haven&#39;t followed every<br>&gt; post.<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello All,<br>&gt;<br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;<br>&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt; and kept things as similar to the existing language constructs as possible.<br>&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;<br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;<br>&gt; Thanks,<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;<br>&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when<br>&gt; using “then” similar to how “guard&quot; requires “else”. This  will help to<br>&gt; make the difference between statements and expressions clear.<br>&gt;<br>&gt; let x = If cond then X else Y<br>&gt;<br>&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;<br>&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; 1. I would really hate to explain to someone when *if* needs a *then* and<br>&gt; when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added<br>&gt; lightly.<br>&gt;<br>&gt;<br>&gt; agreed definitely want to be careful with that. I think with braces<br>&gt; meaning statements that differentiation can be made clear. I would<br>&gt; certainly start with statements when describing, just as you usually don’t<br>&gt; talk about the ternary operator until later.<br>&gt;<br>&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;<br>&gt;<br>&gt; Yes that would be great.<br>&gt;<br>&gt;<br>&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;<br>&gt;<br>&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt; every outcome:<br>&gt;<br>&gt; if cond {<br>&gt; print(“hello”)<br>&gt; }<br>&gt;<br>&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;<br>&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;<br>&gt; unless you go seriously off the deep end:<br>&gt;<br>&gt; let say = if cond then “hello”<br>&gt;<br>&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/8dcd50b0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>Another thought:<br></p><p>The ternary operator uses the characters &quot;?&quot; and &quot;:&quot; very differently from<br>the rest of the language where they relate to optionals (?) and type<br>declarations/method parameters (:).<br></p><p>On Sun, Dec 13, 2015 at 3:11 PM, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br></p><p>&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;<br>&gt; ** Existing Code **<br>&gt; The removal of the ternary operator would likely affect a lot of existing<br>&gt; code.<br>&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields<br>&gt; 304 results.<br>&gt;<br>&gt; Two simpler examples:<br>&gt;<br>&gt; [<br>&gt;   &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt; ]<br>&gt;<br>&gt; view1.alpha = editing ? 1 : 0<br>&gt; view2.alpha = editing ? 1 : 0<br>&gt; view3.alpha = editing ? 0 : 1<br>&gt; view4.alpha = editing ? 1 : 0<br>&gt;<br>&gt; I am not sure using if…then…else would make this better to read &amp;<br>&gt; understand or worse.<br>&gt;<br>&gt;<br>&gt; ** Keyword then **<br>&gt; Making then a keyword would also cost us another word so that change needs<br>&gt; to be carefully considered.<br>&gt; In our large app I found just a single instance where then was used for a<br>&gt; variable&#39;s name:<br>&gt;<br>&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;<br>&gt; Promises use the word then rather extensively: https://promisesaplus.com<br>&gt;<br>&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in<br>&gt;&gt; general I do want to see conditional expressions and removal of the ternary<br>&gt;&gt; operator.<br>&gt;&gt;<br>&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final<br>&gt;&gt; solution.  Is there a reason this is omitted from this proposal?  I<br>&gt;&gt; apologize if that was discussed in the thread.  I haven&#39;t followed every<br>&gt;&gt; post.<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello All,<br>&gt;&gt;<br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;<br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot;<br>&gt;&gt; when using “then” similar to how “guard&quot; requires “else”. This  will help<br>&gt;&gt; to make the difference between statements and expressions clear.<br>&gt;&gt;<br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;<br>&gt;&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; 1. I would really hate to explain to someone when *if* needs a *then*<br>&gt;&gt; and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be<br>&gt;&gt; added lightly.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; agreed definitely want to be careful with that. I think with braces<br>&gt;&gt; meaning statements that differentiation can be made clear. I would<br>&gt;&gt; certainly start with statements when describing, just as you usually don’t<br>&gt;&gt; talk about the ternary operator until later.<br>&gt;&gt;<br>&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt;&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes that would be great.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt;&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt;&gt; every outcome:<br>&gt;&gt;<br>&gt;&gt; if cond {<br>&gt;&gt; print(“hello”)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;<br>&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello”<br>&gt;&gt;<br>&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/78c8f603/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; Am 13.12.2015 um 15:11 schrieb Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; ** Keyword then **<br>&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt; <br>&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt; Promises use the word then rather extensively: https://promisesaplus.com &lt;https://promisesaplus.com/&gt;That’s a good point, Marc!<br></p><p><br>In that case we should probably refrain from introducing „then“ (or can the parser differentiate these usages, so that „then“ is still available for variables?<br></p><p>Rust is just using the statement form for the if-expression:<br></p><p>let x = if condition { … } else { … }<br></p><p>Rust allows having several statements in each block with the last having to be an expression which is used as value for the branch, effectively treating the { … } as closure and evaluating it for the branch executed.<br></p><p>Chris Lattner didn’t like using { … } in the if-expression, but I didn’t understand why, I have to admit.<br></p><p>-Thorsten<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/f11d5db3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br>&gt; <br>&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt; <br>&gt; ** Existing Code **<br>&gt; The removal of the ternary operator would likely affect a lot of existing code.<br>&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields 304 results.<br>&gt; <br>&gt; Two simpler examples:<br>&gt; <br>&gt; [<br>&gt;     &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;     &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;     &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;     &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;     &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;     &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt; ]<br>&gt; <br>&gt; view1.alpha = editing ? 1 : 0<br>&gt; view2.alpha = editing ? 1 : 0<br>&gt; view3.alpha = editing ? 0 : 1<br>&gt; view4.alpha = editing ? 1 : 0<br>&gt; <br>&gt; I am not sure using if…then…else would make this better to read &amp; understand or worse.<br>&gt; <br></p><p>there seems to be a lot of people who dislike ternary operators. Other languages also are similar in dumping ternary. <br></p><p>&gt; <br>&gt; ** Keyword then **<br>&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt; <br>&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt; Promises use the word then rather extensively: https://promisesaplus.com &lt;https://promisesaplus.com/&gt;<br>&gt; <br></p><p>Good point. Will think about it.<br></p><p>&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt; <br>&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/7b4466b1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 13, 2015 at 06:00:00pm</p></header><div class="content"><p>Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather<br>than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion<br>that inline braces look out-of-place, braces behave specially in xcode and<br>are notorious for screwing up indentation. For example, since swift was<br>released, multiple non-trailing closure arguments to a single function call<br>(e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the<br>second closure one indentation level higher than the first. More<br>generally/summarily, braces carry special indentation rules that do not<br>necessarily suit expressions.<br></p><p>On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br>&gt;<br>&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;<br>&gt; ** Existing Code **<br>&gt; The removal of the ternary operator would likely affect a lot of existing<br>&gt; code.<br>&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields<br>&gt; 304 results.<br>&gt;<br>&gt; Two simpler examples:<br>&gt;<br>&gt; [<br>&gt;   &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;   &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt; ]<br>&gt;<br>&gt; view1.alpha = editing ? 1 : 0<br>&gt; view2.alpha = editing ? 1 : 0<br>&gt; view3.alpha = editing ? 0 : 1<br>&gt; view4.alpha = editing ? 1 : 0<br>&gt;<br>&gt; I am not sure using if…then…else would make this better to read &amp;<br>&gt; understand or worse.<br>&gt;<br>&gt;<br>&gt; there seems to be a lot of people who dislike ternary operators. Other<br>&gt; languages also are similar in dumping ternary.<br>&gt;<br>&gt;<br>&gt; ** Keyword then **<br>&gt; Making then a keyword would also cost us another word so that change needs<br>&gt; to be carefully considered.<br>&gt; In our large app I found just a single instance where then was used for a<br>&gt; variable&#39;s name:<br>&gt;<br>&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;<br>&gt; Promises use the word then rather extensively: https://promisesaplus.com<br>&gt;<br>&gt;<br>&gt; Good point. Will think about it.<br>&gt;<br>&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in<br>&gt;&gt; general I do want to see conditional expressions and removal of the ternary<br>&gt;&gt; operator.<br>&gt;&gt;<br>&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final<br>&gt;&gt; solution.  Is there a reason this is omitted from this proposal?  I<br>&gt;&gt; apologize if that was discussed in the thread.  I haven&#39;t followed every<br>&gt;&gt; post.<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello All,<br>&gt;&gt;<br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;<br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot;<br>&gt;&gt; when using “then” similar to how “guard&quot; requires “else”. This  will help<br>&gt;&gt; to make the difference between statements and expressions clear.<br>&gt;&gt;<br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;<br>&gt;&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; 1. I would really hate to explain to someone when *if* needs a *then*<br>&gt;&gt; and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be<br>&gt;&gt; added lightly.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; agreed definitely want to be careful with that. I think with braces<br>&gt;&gt; meaning statements that differentiation can be made clear. I would<br>&gt;&gt; certainly start with statements when describing, just as you usually don’t<br>&gt;&gt; talk about the ternary operator until later.<br>&gt;&gt;<br>&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt;&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes that would be great.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt;&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt;&gt; every outcome:<br>&gt;&gt;<br>&gt;&gt; if cond {<br>&gt;&gt; print(“hello”)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;<br>&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello”<br>&gt;&gt;<br>&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/65523389/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 07:00:00pm</p></header><div class="content"><p>Replacing constructs like<br></p><p>let x = condition ? 0 : 1<br></p><p>with<br></p><p>let x = if condition { 0 } else { 1 }<br></p><p>is very unlikely to make working with Swift any easier.<br></p><p>On Sun, Dec 13, 2015 at 7:18 PM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt;<br>wrote:<br></p><p>&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather<br>&gt; than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion<br>&gt; that inline braces look out-of-place, braces behave specially in xcode and<br>&gt; are notorious for screwing up indentation. For example, since swift was<br>&gt; released, multiple non-trailing closure arguments to a single function call<br>&gt; (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the<br>&gt; second closure one indentation level higher than the first. More<br>&gt; generally/summarily, braces carry special indentation rules that do not<br>&gt; necessarily suit expressions.<br>&gt;<br>&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt;<br>&gt;&gt; ** Existing Code **<br>&gt;&gt; The removal of the ternary operator would likely affect a lot of existing<br>&gt;&gt; code.<br>&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team<br>&gt;&gt; yields 304 results.<br>&gt;&gt;<br>&gt;&gt; Two simpler examples:<br>&gt;&gt;<br>&gt;&gt; [<br>&gt;&gt;   &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;   &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;   &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;   &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;   &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;   &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt; ]<br>&gt;&gt;<br>&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt;<br>&gt;&gt; I am not sure using if…then…else would make this better to read &amp;<br>&gt;&gt; understand or worse.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; there seems to be a lot of people who dislike ternary operators. Other<br>&gt;&gt; languages also are similar in dumping ternary.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ** Keyword then **<br>&gt;&gt; Making then a keyword would also cost us another word so that change<br>&gt;&gt; needs to be carefully considered.<br>&gt;&gt; In our large app I found just a single instance where then was used for<br>&gt;&gt; a variable&#39;s name:<br>&gt;&gt;<br>&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt;<br>&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Good point. Will think about it.<br>&gt;&gt;<br>&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in<br>&gt;&gt;&gt; general I do want to see conditional expressions and removal of the ternary<br>&gt;&gt;&gt; operator.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final<br>&gt;&gt;&gt; solution.  Is there a reason this is omitted from this proposal?  I<br>&gt;&gt;&gt; apologize if that was discussed in the thread.  I haven&#39;t followed every<br>&gt;&gt;&gt; post.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello All,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot;<br>&gt;&gt;&gt; when using “then” similar to how “guard&quot; requires “else”. This  will help<br>&gt;&gt;&gt; to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. I would really hate to explain to someone when *if* needs a *then*<br>&gt;&gt;&gt; and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be<br>&gt;&gt;&gt; added lightly.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces<br>&gt;&gt;&gt; meaning statements that differentiation can be made clear. I would<br>&gt;&gt;&gt; certainly start with statements when describing, just as you usually don’t<br>&gt;&gt;&gt; talk about the ternary operator until later.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt;&gt;&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt;&gt;&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt;&gt;&gt; every outcome:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt; print(“hello”)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let say = if cond then “hello”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/4eeb430c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>December 13, 2015 at 07:00:00pm</p></header><div class="content"><p>I agree, but there seems to be a lot of support for statements as expressions for some reason. That&#39;s not something I&#39;d be keen to move towards quickly but if we need to go there, how about a more general solution.<br></p><p>Let&#39;s give every statement a builtin &#39;return&#39; variable - I&#39;ll use _ in the example below but I don&#39;t think it&#39;s really appropriate. <br></p><p>let x = if condition {<br>    _ = value1<br>  } else {<br>    _ = value2<br>  }<br></p><p>let width = if condition {_ = 1920} else {_ = 640}<br></p><p>With a default assumption that _ = void if the default, if no assignments are used, we can ensure type checking and catch cases where not all paths correctly assign to _<br></p><p>ABR.<br></p><p>&gt; On 13 Dec 2015, at 18:37, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Replacing constructs like<br>&gt; <br>&gt; let x = condition ? 0 : 1<br>&gt; <br>&gt; with<br>&gt; <br>&gt; let x = if condition { 0 } else { 1 }<br>&gt; <br>&gt; is very unlikely to make working with Swift any easier.<br>&gt; <br>&gt;&gt; On Sun, Dec 13, 2015 at 7:18 PM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt; wrote:<br>&gt;&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion that inline braces look out-of-place, braces behave specially in xcode and are notorious for screwing up indentation. For example, since swift was released, multiple non-trailing closure arguments to a single function call (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the second closure one indentation level higher than the first. More generally/summarily, braces carry special indentation rules that do not necessarily suit expressions.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ** Existing Code **<br>&gt;&gt;&gt;&gt; The removal of the ternary operator would likely affect a lot of existing code.<br>&gt;&gt;&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields 304 results.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Two simpler examples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [<br>&gt;&gt;&gt;&gt;     &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt;&gt;&gt; ]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt;&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am not sure using if…then…else would make this better to read &amp; understand or worse.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; there seems to be a lot of people who dislike ternary operators. Other languages also are similar in dumping ternary. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ** Keyword then **<br>&gt;&gt;&gt;&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt;&gt;&gt;&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt;&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Good point. Will think about it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/4a73f819/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>Coming up with a special way to return from closures/blocks is being<br>discussed in the remove forEach thread. It may even need its own thread<br>since it would affect so much of the language.<br></p><p>On Sunday, December 13, 2015, Andrew Brown via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I agree, but there seems to be a lot of support for statements as<br>&gt; expressions for some reason. That&#39;s not something I&#39;d be keen to move<br>&gt; towards quickly but if we need to go there, how about a more general<br>&gt; solution.<br>&gt;<br>&gt; Let&#39;s give every statement a builtin &#39;return&#39; variable - I&#39;ll use _ in the<br>&gt; example below but I don&#39;t think it&#39;s really appropriate.<br>&gt;<br>&gt; let x = if condition {<br>&gt;     _ = value1<br>&gt;   } else {<br>&gt;     _ = value2<br>&gt;   }<br>&gt;<br>&gt; let width = if condition {_ = 1920} else {_ = 640}<br>&gt;<br>&gt; With a default assumption that _ = void if the default, if no assignments<br>&gt; are used, we can ensure type checking and catch cases where not all paths<br>&gt; correctly assign to _<br>&gt;<br>&gt; ABR.<br>&gt;<br>&gt; On 13 Dec 2015, at 18:37, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Replacing constructs like<br>&gt;<br>&gt; let x = condition ? 0 : 1<br>&gt;<br>&gt; with<br>&gt;<br>&gt; let x = if condition { 0 } else { 1 }<br>&gt;<br>&gt; is very unlikely to make working with Swift any easier.<br>&gt;<br>&gt; On Sun, Dec 13, 2015 at 7:18 PM, Dennis Lysenko &lt;<br>&gt; dennis.s.lysenko at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;dennis.s.lysenko at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather<br>&gt;&gt; than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion<br>&gt;&gt; that inline braces look out-of-place, braces behave specially in xcode and<br>&gt;&gt; are notorious for screwing up indentation. For example, since swift was<br>&gt;&gt; released, multiple non-trailing closure arguments to a single function call<br>&gt;&gt; (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the<br>&gt;&gt; second closure one indentation level higher than the first. More<br>&gt;&gt; generally/summarily, braces carry special indentation rules that do not<br>&gt;&gt; necessarily suit expressions.<br>&gt;&gt;<br>&gt;&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln<br>&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;marc at knaup.koeln&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ** Existing Code **<br>&gt;&gt;&gt; The removal of the ternary operator would likely affect a lot of<br>&gt;&gt;&gt; existing code.<br>&gt;&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team<br>&gt;&gt;&gt; yields 304 results.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Two simpler examples:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [<br>&gt;&gt;&gt;   &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;   &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;   &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;   &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;   &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;   &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt;&gt; ]<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I am not sure using if…then…else would make this better to read &amp;<br>&gt;&gt;&gt; understand or worse.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; there seems to be a lot of people who dislike ternary operators. Other<br>&gt;&gt;&gt; languages also are similar in dumping ternary.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ** Keyword then **<br>&gt;&gt;&gt; Making then a keyword would also cost us another word so that change<br>&gt;&gt;&gt; needs to be carefully considered.<br>&gt;&gt;&gt; In our large app I found just a single instance where then was used for<br>&gt;&gt;&gt; a variable&#39;s name:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Good point. Will think about it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in<br>&gt;&gt;&gt;&gt; general I do want to see conditional expressions and removal of the ternary<br>&gt;&gt;&gt;&gt; operator.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the<br>&gt;&gt;&gt;&gt; final solution.  Is there a reason this is omitted from this proposal?  I<br>&gt;&gt;&gt;&gt; apologize if that was discussed in the thread.  I haven&#39;t followed every<br>&gt;&gt;&gt;&gt; post.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hello All,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt;&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt;&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt;&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt;&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot;<br>&gt;&gt;&gt;&gt; when using “then” similar to how “guard&quot; requires “else”. This  will help<br>&gt;&gt;&gt;&gt; to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when *if* needs a *then*<br>&gt;&gt;&gt;&gt; and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be<br>&gt;&gt;&gt;&gt; added lightly.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces<br>&gt;&gt;&gt;&gt; meaning statements that differentiation can be made clear. I would<br>&gt;&gt;&gt;&gt; certainly start with statements when describing, just as you usually don’t<br>&gt;&gt;&gt;&gt; talk about the ternary operator until later.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for<br>&gt;&gt;&gt;&gt; replacing (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt;&gt;&gt;&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt;&gt;&gt;&gt; every outcome:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt; print(“hello”)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; let say = if cond then “hello”<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/3445715a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 12:00:00pm</p></header><div class="content"><p>Definitely, agree that expr-statements  would affect a lot in the language. I encourage people to look at the Swift grammar section for switch statements and then look at the ternary operator grammar. There is a clear distinction made between these two concepts in the existing language. <br></p><p>Expressions are mathematical concepts where there are inputs and one return value. Statement blocks are lists of commands without any such guaranteed output or side effects. Functional programming uses expressions to avoid much of the state and side effects that are common with imperative programming. It is very likely it would encourage a bunch of imperative programming side effect code based code, if statements become expressions.  It will muddy the concept of expressions in people’s minds, trying to explain this to a student would be harder if the concepts are combined. I will say, I am not a huge fan of this idea, even if it is possible (although will try to keep an open mind).<br></p><p>Swift straddles the worlds of functional and imperative programming and a lot of functional programmers are drawn to the language because of it, keeping these concepts separate by having expressions and statements would help to keep the approaches separate in people’s minds. If you want to do the imperative approach use the statement, if you want to do the functional approach use the expressions. If they are combined then code that was written functionally might start getting imperative changes made by other developers on the team. <br></p><p>https://en.wikipedia.org/wiki/Functional_programming <br></p><p><br></p><p>&gt; On Dec 13, 2015, at 11:45 AM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Coming up with a special way to return from closures/blocks is being discussed in the remove forEach thread. It may even need its own thread since it would affect so much of the language. <br>&gt; <br>&gt; On Sunday, December 13, 2015, Andrew Brown via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I agree, but there seems to be a lot of support for statements as expressions for some reason. That&#39;s not something I&#39;d be keen to move towards quickly but if we need to go there, how about a more general solution.<br>&gt; <br>&gt; Let&#39;s give every statement a builtin &#39;return&#39; variable - I&#39;ll use _ in the example below but I don&#39;t think it&#39;s really appropriate. <br>&gt; <br>&gt; let x = if condition {<br>&gt;     _ = value1<br>&gt;   } else {<br>&gt;     _ = value2<br>&gt;   }<br>&gt; <br>&gt; let width = if condition {_ = 1920} else {_ = 640}<br>&gt; <br>&gt; With a default assumption that _ = void if the default, if no assignments are used, we can ensure type checking and catch cases where not all paths correctly assign to _<br>&gt; <br>&gt; ABR.<br>&gt; <br>&gt; On 13 Dec 2015, at 18:37, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Replacing constructs like<br>&gt;&gt; <br>&gt;&gt; let x = condition ? 0 : 1<br>&gt;&gt; <br>&gt;&gt; with<br>&gt;&gt; <br>&gt;&gt; let x = if condition { 0 } else { 1 }<br>&gt;&gt; <br>&gt;&gt; is very unlikely to make working with Swift any easier.<br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 13, 2015 at 7:18 PM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion that inline braces look out-of-place, braces behave specially in xcode and are notorious for screwing up indentation. For example, since swift was released, multiple non-trailing closure arguments to a single function call (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the second closure one indentation level higher than the first. More generally/summarily, braces carry special indentation rules that do not necessarily suit expressions. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ** Existing Code **<br>&gt;&gt;&gt; The removal of the ternary operator would likely affect a lot of existing code.<br>&gt;&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields 304 results.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Two simpler examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [<br>&gt;&gt;&gt;     &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;     &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;     &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;     &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;     &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;     &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt;&gt; ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am not sure using if…then…else would make this better to read &amp; understand or worse.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; there seems to be a lot of people who dislike ternary operators. Other languages also are similar in dumping ternary. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ** Keyword then **<br>&gt;&gt;&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt;&gt;&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com &lt;https://promisesaplus.com/&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Good point. Will think about it.<br>&gt;&gt; <br>&gt;&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/57145cca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 14, 2015 at 12:00:00am</p></header><div class="content"><p>Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br></p><p>I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br></p><p>Ternary Replacement<br>https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br></p><p>Switch Expressions<br>https://github.com/possen/swift-evolution/edit/master/0022.md &lt;https://github.com/possen/swift-evolution/edit/master/0022.md&gt;<br></p><p>So these proposals are based upon the idea that we should keep expressions and statements as separate concepts. If everyone decides that expressions should be made into statements or statements into expressions then both of these proposals should be declined, I do see that as a much bigger change and I am not sure it would be for the better. That is what this list is all about so maybe that, as was suggested by J. Cheyo, could be taken to a different thread. <br></p><p>I am thinking though, if making statements into expressions, is what is desired, that is going to push anything that supports what is in these proposals past Swift 3. These proposals are pretty limited in scope. <br></p><p>- Paul<br></p><p>&gt; On Dec 13, 2015, at 12:29 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Definitely, agree that expr-statements  would affect a lot in the language. I encourage people to look at the Swift grammar section for switch statements and then look at the ternary operator grammar. There is a clear distinction made between these two concepts in the existing language. <br>&gt; <br>&gt; Expressions are mathematical concepts where there are inputs and one return value. Statement blocks are lists of commands without any such guaranteed output or side effects. Functional programming uses expressions to avoid much of the state and side effects that are common with imperative programming. It is very likely it would encourage a bunch of imperative programming side effect code based code, if statements become expressions.  It will muddy the concept of expressions in people’s minds, trying to explain this to a student would be harder if the concepts are combined. I will say, I am not a huge fan of this idea, even if it is possible (although will try to keep an open mind).<br>&gt; <br>&gt; Swift straddles the worlds of functional and imperative programming and a lot of functional programmers are drawn to the language because of it, keeping these concepts separate by having expressions and statements would help to keep the approaches separate in people’s minds. If you want to do the imperative approach use the statement, if you want to do the functional approach use the expressions. If they are combined then code that was written functionally might start getting imperative changes made by other developers on the team. <br>&gt; <br>&gt; https://en.wikipedia.org/wiki/Functional_programming &lt;https://en.wikipedia.org/wiki/Functional_programming&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 13, 2015, at 11:45 AM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Coming up with a special way to return from closures/blocks is being discussed in the remove forEach thread. It may even need its own thread since it would affect so much of the language. <br>&gt;&gt; <br>&gt;&gt; On Sunday, December 13, 2015, Andrew Brown via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I agree, but there seems to be a lot of support for statements as expressions for some reason. That&#39;s not something I&#39;d be keen to move towards quickly but if we need to go there, how about a more general solution.<br>&gt;&gt; <br>&gt;&gt; Let&#39;s give every statement a builtin &#39;return&#39; variable - I&#39;ll use _ in the example below but I don&#39;t think it&#39;s really appropriate. <br>&gt;&gt; <br>&gt;&gt; let x = if condition {<br>&gt;&gt;     _ = value1<br>&gt;&gt;   } else {<br>&gt;&gt;     _ = value2<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; let width = if condition {_ = 1920} else {_ = 640}<br>&gt;&gt; <br>&gt;&gt; With a default assumption that _ = void if the default, if no assignments are used, we can ensure type checking and catch cases where not all paths correctly assign to _<br>&gt;&gt; <br>&gt;&gt; ABR.<br>&gt;&gt; <br>&gt;&gt; On 13 Dec 2015, at 18:37, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Replacing constructs like<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = condition ? 0 : 1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; with<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = if condition { 0 } else { 1 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is very unlikely to make working with Swift any easier.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Dec 13, 2015 at 7:18 PM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion that inline braces look out-of-place, braces behave specially in xcode and are notorious for screwing up indentation. For example, since swift was released, multiple non-trailing closure arguments to a single function call (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the second closure one indentation level higher than the first. More generally/summarily, braces carry special indentation rules that do not necessarily suit expressions. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ** Existing Code **<br>&gt;&gt;&gt;&gt; The removal of the ternary operator would likely affect a lot of existing code.<br>&gt;&gt;&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields 304 results.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Two simpler examples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [<br>&gt;&gt;&gt;&gt;     &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;     &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt;&gt;&gt; ]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt;&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am not sure using if…then…else would make this better to read &amp; understand or worse.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; there seems to be a lot of people who dislike ternary operators. Other languages also are similar in dumping ternary. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ** Keyword then **<br>&gt;&gt;&gt;&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt;&gt;&gt;&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt;&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com &lt;https://promisesaplus.com/&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Good point. Will think about it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/7d649f07/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 14, 2015 at 10:00:00am</p></header><div class="content"><p>Thanks for the updated proposals; they are much easier to go through then the vast number of mails on this thread. I’ve tried to follow this thread as best as possible, so please forgive me if this has been addressed but I couldn’t find it.<br></p><p>Can you add to the proposal why a function cannot be added for tertiary expressions (under “Alternates Considered”):<br></p><p>func either&lt;T&gt;(@autoclosure fn: () -&gt; Bool, @autoclosure _ left: () -&gt; T, @autoclosure _ right: () -&gt; T) -&gt; T {<br>    if fn() { return left() }<br>    return right()<br>}<br></p><p>let x = true ? 0 : 1<br></p><p>let y = either(true, 0, 1)<br></p><p>let f1: () -&gt; Int = { print(&quot;f1&quot;); return 0 }<br>let f2: () -&gt; Int = { print(&quot;f2&quot;); return 2 }<br>let z = either(true, f1(), f2())<br></p><p>let nested = either(false, 0, either(false, 2, either(true, 3, 4)))<br></p><p>This isn’t a full replacement for if-statements as expressions, but doesn’t it satisfy the tertiary requirements, at least in the most common of cases? The fallback is to use if-else if side-effects are something that is desired?<br></p><p>The name for the function could be better, but the point is to remove it from the parsing structure all together. Or is that something you find valuable?<br></p><p>-David<br></p><p>&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt; <br>&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt; <br>&gt; Ternary Replacement<br>&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt; <br>&gt; Switch Expressions<br>&gt; https://github.com/possen/swift-evolution/edit/master/0022.md &lt;https://github.com/possen/swift-evolution/edit/master/0022.md&gt;<br>&gt; <br>&gt; So these proposals are based upon the idea that we should keep expressions and statements as separate concepts. If everyone decides that expressions should be made into statements or statements into expressions then both of these proposals should be declined, I do see that as a much bigger change and I am not sure it would be for the better. That is what this list is all about so maybe that, as was suggested by J. Cheyo, could be taken to a different thread. <br>&gt; <br>&gt; I am thinking though, if making statements into expressions, is what is desired, that is going to push anything that supports what is in these proposals past Swift 3. These proposals are pretty limited in scope. <br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt;&gt; On Dec 13, 2015, at 12:29 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Definitely, agree that expr-statements  would affect a lot in the language. I encourage people to look at the Swift grammar section for switch statements and then look at the ternary operator grammar. There is a clear distinction made between these two concepts in the existing language. <br>&gt;&gt; <br>&gt;&gt; Expressions are mathematical concepts where there are inputs and one return value. Statement blocks are lists of commands without any such guaranteed output or side effects. Functional programming uses expressions to avoid much of the state and side effects that are common with imperative programming. It is very likely it would encourage a bunch of imperative programming side effect code based code, if statements become expressions.  It will muddy the concept of expressions in people’s minds, trying to explain this to a student would be harder if the concepts are combined. I will say, I am not a huge fan of this idea, even if it is possible (although will try to keep an open mind).<br>&gt;&gt; <br>&gt;&gt; Swift straddles the worlds of functional and imperative programming and a lot of functional programmers are drawn to the language because of it, keeping these concepts separate by having expressions and statements would help to keep the approaches separate in people’s minds. If you want to do the imperative approach use the statement, if you want to do the functional approach use the expressions. If they are combined then code that was written functionally might start getting imperative changes made by other developers on the team. <br>&gt;&gt; <br>&gt;&gt; https://en.wikipedia.org/wiki/Functional_programming &lt;https://en.wikipedia.org/wiki/Functional_programming&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 13, 2015, at 11:45 AM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Coming up with a special way to return from closures/blocks is being discussed in the remove forEach thread. It may even need its own thread since it would affect so much of the language. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sunday, December 13, 2015, Andrew Brown via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I agree, but there seems to be a lot of support for statements as expressions for some reason. That&#39;s not something I&#39;d be keen to move towards quickly but if we need to go there, how about a more general solution.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let&#39;s give every statement a builtin &#39;return&#39; variable - I&#39;ll use _ in the example below but I don&#39;t think it&#39;s really appropriate. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = if condition {<br>&gt;&gt;&gt;     _ = value1<br>&gt;&gt;&gt;   } else {<br>&gt;&gt;&gt;     _ = value2<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let width = if condition {_ = 1920} else {_ = 640}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; With a default assumption that _ = void if the default, if no assignments are used, we can ensure type checking and catch cases where not all paths correctly assign to _<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ABR.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 13 Dec 2015, at 18:37, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Replacing constructs like<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let x = condition ? 0 : 1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; with<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let x = if condition { 0 } else { 1 }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is very unlikely to make working with Swift any easier.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 13, 2015 at 7:18 PM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion that inline braces look out-of-place, braces behave specially in xcode and are notorious for screwing up indentation. For example, since swift was released, multiple non-trailing closure arguments to a single function call (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the second closure one indentation level higher than the first. More generally/summarily, braces carry special indentation rules that do not necessarily suit expressions. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ** Existing Code **<br>&gt;&gt;&gt;&gt;&gt; The removal of the ternary operator would likely affect a lot of existing code.<br>&gt;&gt;&gt;&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields 304 results.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Two simpler examples:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [<br>&gt;&gt;&gt;&gt;&gt;     &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;&gt;     &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;&gt;     &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;&gt;     &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;&gt;     &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;&gt;&gt;&gt;     &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt;&gt;&gt;&gt; ]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt;&gt;&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I am not sure using if…then…else would make this better to read &amp; understand or worse.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; there seems to be a lot of people who dislike ternary operators. Other languages also are similar in dumping ternary. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ** Keyword then **<br>&gt;&gt;&gt;&gt;&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt;&gt;&gt;&gt;&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt;&gt;&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com &lt;https://promisesaplus.com/&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Good point. Will think about it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/71696f34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 15, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; Can you add to the proposal why a function cannot be added for tertiary expressions (under “Alternates Considered”):<br></p><p>That&#39;s one fresh idea, and I like it. I can&#39;t find anything wrong with it, except that fn doesn&#39;t need to be an @autoclosure, just a Bool.<br></p><p>I believe the customary name for that function is iff.<br></p><p>I always wrap ?: in parenthesis for readability anyway.<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/ac810a7f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 14, 2015 at 06:00:00pm</p></header><div class="content"><p>That’s a really interesting idea.<br>There’s potential to add parameter names. Ideally the second parameter name would be ‘else’, but that’s not really workable. <br></p><p>func when&lt;T&gt;(fn: Bool, @autoclosure then: () -&gt; T, @autoclosure or: () -&gt; T) -&gt; T {<br>  if fn { return then() }<br>  return or()<br>}<br></p><p>let x = when(true, then: 0, or: 1)<br></p><p>Nested version might be a bit scary though ; )<br></p><p>let nested = when(false, then: 0, or: when(false, then: 2, or: when(true, then: 3, or: 4)))<br></p><p>Al<br></p><p>&gt; On 14 Dec 2015, at 18:38, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for the updated proposals; they are much easier to go through then the vast number of mails on this thread. I’ve tried to follow this thread as best as possible, so please forgive me if this has been addressed but I couldn’t find it.<br>&gt; <br>&gt; Can you add to the proposal why a function cannot be added for tertiary expressions (under “Alternates Considered”):<br>&gt; <br>&gt; func either&lt;T&gt;(@autoclosure fn: () -&gt; Bool, @autoclosure _ left: () -&gt; T, @autoclosure _ right: () -&gt; T) -&gt; T {<br>&gt;     if fn() { return left() }<br>&gt;     return right()<br>&gt; }<br>&gt; <br>&gt; let x = true ? 0 : 1<br>&gt; <br>&gt; let y = either(true, 0, 1)<br>&gt; <br>&gt; let f1: () -&gt; Int = { print(&quot;f1&quot;); return 0 }<br>&gt; let f2: () -&gt; Int = { print(&quot;f2&quot;); return 2 }<br>&gt; let z = either(true, f1(), f2())<br>&gt; <br>&gt; let nested = either(false, 0, either(false, 2, either(true, 3, 4)))<br>&gt; <br>&gt; This isn’t a full replacement for if-statements as expressions, but doesn’t it satisfy the tertiary requirements, at least in the most common of cases? The fallback is to use if-else if side-effects are something that is desired?<br>&gt; <br>&gt; The name for the function could be better, but the point is to remove it from the parsing structure all together. Or is that something you find valuable?<br>&gt; <br>&gt; -David<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/1a213f02/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 14, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt; <br>&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt; <br>&gt; Ternary Replacement<br>&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>Quick comment.  The proposal states:<br></p><p><br>Is it really better? Why not just keep ternary expressions?<br>This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br></p><p><br>However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/df24753e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d5ada5f318f38f99b9d0a5d88284743a?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Nick Shelley</string> &lt;nickmshelley at gmail.com&gt;<p>December 14, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; I however frequently hear people saying ternary should be avoided because<br>&gt; they are hard to read or they hate them.<br></p><p><br>FWIW, I used to be one of those people, but then started working on a team<br>where one member liked them. He didn&#39;t force them on us, but after enough<br>code reviews where he showed us how to turn 5-line if/else statements into<br>simple one-line ternary expressions, I got used to reading them and now<br>love them and use them often.<br></p><p>People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s<br>hard for them to read because it&#39;s not the for loop they&#39;re used to). I<br>think it&#39;s a simple matter of getting used to it.<br></p><p>On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in<br>&gt; responding to any email, it has a bit more to do with my cold than the<br>&gt; suggestions.<br>&gt;<br>&gt; I have split the original proposal into two proposals and incorporated a<br>&gt; bunch of feedback. Splitting it up has been extremely good, not only does<br>&gt; it improve readability, I am actually finding I could take or leave the<br>&gt; ternary replacement idea. But the proposal will be there if enough everyone<br>&gt; thinks it is a good idea. We could put it to a vote to see if there is<br>&gt; enough interest and I would be happy to take it further if there is. I<br>&gt; suspect this thread would not exist at all if there was no interest in it.<br>&gt; However, I am finding I am far more interested in getting switch<br>&gt; expressions.<br>&gt;<br>&gt; Ternary Replacement<br>&gt; https://github.com/possen/swift-evolution/blob/master/0021.md<br>&gt;<br>&gt;<br>&gt; Quick comment.  The proposal states:<br>&gt;<br>&gt;<br>&gt; Is it really better? Why not just keep ternary expressions?<br>&gt; This is a valid question, there is an advantage in compactness to ternary<br>&gt; expressions. I however frequently hear people saying ternary should be<br>&gt; avoided because they are hard to read or they hate them. There seems to<br>&gt; many who either stronly dislike it or don&#39;t care.<br>&gt;<br>&gt;<br>&gt; However, it doesn’t actually show that it is solving the objections people<br>&gt; have to the ternary operator.  It is true that some people find the ?:<br>&gt; syntax weird, but an equal number of people say that the problem is that<br>&gt; you’re putting complex conditional logic inline into the middle of an<br>&gt; expression - this proposal actually makes that objection worse.  There are<br>&gt; also other objections to ?:, and until you enumerate them, it is hard to<br>&gt; see whether this proposal is making things better or worse.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/db3fbd83/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 14, 2015 at 10:00:00pm</p></header><div class="content"><p>I am strongly against this proposal.<br></p><p>In terms of clarity: Paul Cantrill made the very good point in a different<br>thread that &quot;beginner-friendly&quot; syntax may not be the same as syntax<br>optimized for the productivity of developers working on serious projects. I<br>think this is a great example of that principle in action. Sigils stand out<br>to the eye when scanning code in a way that keywords don&#39;t, even in an IDE<br>with syntax highlighting (and the perils of relying upon relying upon color<br>have been discussed pretty thoroughly in the mandatory &#39;self&#39; thread).<br>Replacing them with keywords makes it harder to delineate the arguments.<br></p><p>In terms of semantics: The argument was made earlier that &quot;?&quot; is associated<br>closely with optionals and not suitable for this purpose; I disagree: &quot;?&quot;&#39;s<br>overarching meaning is that of uncertainty or querying, which makes sense<br>both in terms of control flow (predicate determines which way to go), as<br>well as optionals (whose &#39;empty or not&#39; status is unknown until explicitly<br>checked for, e.g. via if-let).<br></p><p>In terms of beginner-friendliness: I don&#39;t think the ternary symbols are<br>particularly difficult to learn. The operators show up in other languages<br>as well and the actual usage rules are very simple. On the other hand, I<br>don&#39;t think having two related-but-distinct forms of if-else, or mangling<br>multi-line if-else into a form quite dissimilar to those of other languages<br>(or of the other control flow constructs in Swift) is helpful to people<br>learning the language.<br></p><p>My personal preference is to hold a separate discussion as to whether or<br>not we should have expression variants of the if, switch, and other control<br>flow statements, but even so I don&#39;t see them as a replacement for<br>single-line expressions using the ternary operator being discussed.<br></p><p>Best,<br>Austin<br></p><p>On Mon, Dec 14, 2015 at 4:50 PM, Nick Shelley via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I however frequently hear people saying ternary should be avoided because<br>&gt;&gt; they are hard to read or they hate them.<br>&gt;<br>&gt;<br>&gt; FWIW, I used to be one of those people, but then started working on a team<br>&gt; where one member liked them. He didn&#39;t force them on us, but after enough<br>&gt; code reviews where he showed us how to turn 5-line if/else statements into<br>&gt; simple one-line ternary expressions, I got used to reading them and now<br>&gt; love them and use them often.<br>&gt;<br>&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s<br>&gt; hard for them to read because it&#39;s not the for loop they&#39;re used to). I<br>&gt; think it&#39;s a simple matter of getting used to it.<br>&gt;<br>&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy<br>&gt;&gt; in responding to any email, it has a bit more to do with my cold than the<br>&gt;&gt; suggestions.<br>&gt;&gt;<br>&gt;&gt; I have split the original proposal into two proposals and incorporated a<br>&gt;&gt; bunch of feedback. Splitting it up has been extremely good, not only does<br>&gt;&gt; it improve readability, I am actually finding I could take or leave the<br>&gt;&gt; ternary replacement idea. But the proposal will be there if enough everyone<br>&gt;&gt; thinks it is a good idea. We could put it to a vote to see if there is<br>&gt;&gt; enough interest and I would be happy to take it further if there is. I<br>&gt;&gt; suspect this thread would not exist at all if there was no interest in it.<br>&gt;&gt; However, I am finding I am far more interested in getting switch<br>&gt;&gt; expressions.<br>&gt;&gt;<br>&gt;&gt; Ternary Replacement<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt; This is a valid question, there is an advantage in compactness to ternary<br>&gt;&gt; expressions. I however frequently hear people saying ternary should be<br>&gt;&gt; avoided because they are hard to read or they hate them. There seems to<br>&gt;&gt; many who either stronly dislike it or don&#39;t care.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; However, it doesn’t actually show that it is solving the objections<br>&gt;&gt; people have to the ternary operator.  It is true that some people find the<br>&gt;&gt; ?: syntax weird, but an equal number of people say that the problem is that<br>&gt;&gt; you’re putting complex conditional logic inline into the middle of an<br>&gt;&gt; expression - this proposal actually makes that objection worse.  There are<br>&gt;&gt; also other objections to ?:, and until you enumerate them, it is hard to<br>&gt;&gt; see whether this proposal is making things better or worse.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/a3941b4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 15, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 10:22 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am strongly against this proposal.<br>&gt; <br>&gt; In terms of clarity: Paul Cantrill made the very good point in a different thread that &quot;beginner-friendly&quot; syntax may not be the same as syntax optimized for the productivity of developers working on serious projects. I think this is a great example of that principle in action. Sigils stand out to the eye when scanning code in a way that keywords don&#39;t, even in an IDE with syntax highlighting (and the perils of relying upon relying upon color have been discussed pretty thoroughly in the mandatory &#39;self&#39; thread). Replacing them with keywords makes it harder to delineate the arguments.<br>&gt; <br></p><p>I agree they definitely stand out compared to keywords. also the nil-coelsincg operator when taken with the ternary operator, which seems to me, a spiritual brother, to it may seem even more alien. <br></p><p>&gt; In terms of semantics: The argument was made earlier that &quot;?&quot; is associated closely with optionals and not suitable for this purpose; I disagree: &quot;?&quot;&#39;s overarching meaning is that of uncertainty or querying, which makes sense both in terms of control flow (predicate determines which way to go), as well as optionals (whose &#39;empty or not&#39; status is unknown until explicitly checked for, e.g. via if-let).<br></p><p>Again when looking at the nil-coalescing operator, implicit unwrapping (!) and optional chaining, I agree. It seems that the ternary operator fits quite nicely with ? meaning this is a question and that notion is encoded repeated thorough the Swift language. ? is almost a key concept in the language and making it keywords takes away from that and it seems even more wise to keep as is because it was a good design from the start. I also see why Chris and others haven’t really wanted to get into this discussion, but wisely let it happen so we could come to the same conclusion. It is almost as if ? and ! are the core concepts of the language for new Swift learners. <br></p><p>&gt; <br>&gt; In terms of beginner-friendliness: I don&#39;t think the ternary symbols are particularly difficult to learn. The operators show up in other languages as well and the actual usage rules are very simple. On the other hand, I don&#39;t think having two related-but-distinct forms of if-else, or mangling multi-line if-else into a form quite dissimilar to those of other languages (or of the other control flow constructs in Swift) is helpful to people learning the language.<br></p><p>Here I am arguing strongly against my own proposal because I do actually think it might make things worse than better :-) I think there is some value in the process of coming up with the proposal because it spells out what such a feature would/could look like. I suspect that this idea will keep coming up over the years on this list. Is there a way we can setup a FAQ, so that we can show this line of reasoning to newcomers to the list and make sure they are addressing these concerns if they are coming up with new ideas, or do people think that stifles the free flow of new ideas?<br>&gt; <br>&gt; <br>&gt; My personal preference is to hold a separate discussion as to whether or not we should have expression variants of the if, switch, and other control flow statements, but even so I don&#39;t see them as a replacement for single-line expressions using the ternary operator being discussed.<br></p><p>+1<br></p><p>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt; On Mon, Dec 14, 2015 at 4:50 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them.<br>&gt; <br>&gt; FWIW, I used to be one of those people, but then started working on a team where one member liked them. He didn&#39;t force them on us, but after enough code reviews where he showed us how to turn 5-line if/else statements into simple one-line ternary expressions, I got used to reading them and now love them and use them often.<br>&gt; <br>&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s hard for them to read because it&#39;s not the for loop they&#39;re used to). I think it&#39;s a simple matter of getting used to it.<br>&gt; <br>&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt;&gt; <br>&gt;&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt;&gt; <br>&gt;&gt; Ternary Replacement<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt; Quick comment.  The proposal states:<br>&gt; <br>&gt; <br>&gt; Is it really better? Why not just keep ternary expressions?<br>&gt; This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br>&gt; <br>&gt; <br>&gt; However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/8cfc8963/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 14, 2015 at 10:00:00pm</p></header><div class="content"><p>Agreed, I was thinking to I really want turn something that was 2 characters into 10 and will I really be happy with that at the end of the day. A properly formatted ternary can be quite easy to read, it is when people get sloppy and try to cram too much into one expression that they get really hard to follow. For example,<br></p><p>    return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br></p><p>If formatted like this becomes easier follow the logic (at least to me):<br></p><p>    return a &lt; b<br>	? b &lt; c <br>	  ? b <br>          : a &lt; c <br>	     ? c <br>	     : a <br>	: a &lt; c <br>	  ? a <br>	  : b &lt; c  <br>             ? c <br>	     : b<br></p><p>Is this new syntax helping?<br></p><p>    return if a &lt; b <br>	then if b &lt; c  <br>	  then b <br>          else if a &lt; c <br>	     then c <br>	     else a <br>	else if a &lt; c <br>	  then a <br>	  else if b &lt; c  <br>             then c <br>	     else b<br></p><p>I found this translation quite tricky to do. maybe parens help?<br></p><p>    return (if a &lt; b <br>	then (if b &lt; c  <br>	  then b <br>          else (if a &lt; c <br>	     then c <br>	     else a))<br>	else (if a &lt; c <br>	  then a <br>	  else (if b &lt; c  <br>             then c <br>	     else b)))<br></p><p>Not really and I still I found this hugely frustrating, so much so that I am going to drop all support for this proposal and remove my name from it. If anyone wants to take over feel free. <br></p><p>Others still keen on the idea should try this experiment. It convinced me is horrible idea :-) I don’t want to be blamed for it by every Swift programmer in the future. <br></p><p>I do still however like the Swift Expressions.<br></p><p>- Paul<br></p><p><br>&gt; <br>&gt; On Dec 14, 2015, at 4:50 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them.<br>&gt; <br>&gt; FWIW, I used to be one of those people, but then started working on a team where one member liked them. He didn&#39;t force them on us, but after enough code reviews where he showed us how to turn 5-line if/else statements into simple one-line ternary expressions, I got used to reading them and now love them and use them often.<br>&gt; <br>&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s hard for them to read because it&#39;s not the for loop they&#39;re used to). I think it&#39;s a simple matter of getting used to it.<br>&gt; <br>&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt;&gt; <br>&gt;&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt;&gt; <br>&gt;&gt; Ternary Replacement<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt; Quick comment.  The proposal states:<br>&gt; <br>&gt; <br>&gt; Is it really better? Why not just keep ternary expressions?<br>&gt; This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br>&gt; <br>&gt; <br>&gt; However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/7c148922/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 14, 2015 at 10:00:00pm</p></header><div class="content"><p>I should have said “Switch Expressions” not “Swift Expression” <br></p><p>&gt; On Dec 14, 2015, at 10:41 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Agreed, I was thinking to I really want turn something that was 2 characters into 10 and will I really be happy with that at the end of the day. A properly formatted ternary can be quite easy to read, it is when people get sloppy and try to cram too much into one expression that they get really hard to follow. For example,<br>&gt; <br>&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt; <br>&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt; <br>&gt;     return a &lt; b<br>&gt; 	? b &lt; c <br>&gt; 	  ? b <br>&gt;           : a &lt; c <br>&gt; 	     ? c <br>&gt; 	     : a <br>&gt; 	: a &lt; c <br>&gt; 	  ? a <br>&gt; 	  : b &lt; c  <br>&gt;              ? c <br>&gt; 	     : b<br>&gt; <br>&gt; Is this new syntax helping?<br>&gt; <br>&gt;     return if a &lt; b <br>&gt; 	then if b &lt; c  <br>&gt; 	  then b <br>&gt;           else if a &lt; c <br>&gt; 	     then c <br>&gt; 	     else a <br>&gt; 	else if a &lt; c <br>&gt; 	  then a <br>&gt; 	  else if b &lt; c  <br>&gt;              then c <br>&gt; 	     else b<br>&gt; <br>&gt; I found this translation quite tricky to do. maybe parens help?<br>&gt; <br>&gt;     return (if a &lt; b <br>&gt; 	then (if b &lt; c  <br>&gt; 	  then b <br>&gt;           else (if a &lt; c <br>&gt; 	     then c <br>&gt; 	     else a))<br>&gt; 	else (if a &lt; c <br>&gt; 	  then a <br>&gt; 	  else (if b &lt; c  <br>&gt;              then c <br>&gt; 	     else b)))<br>&gt; <br>&gt; Not really and I still I found this hugely frustrating, so much so that I am going to drop all support for this proposal and remove my name from it. If anyone wants to take over feel free. <br>&gt; <br>&gt; Others still keen on the idea should try this experiment. It convinced me is horrible idea :-) I don’t want to be blamed for it by every Swift programmer in the future. <br>&gt; <br>&gt; I do still however like the Swift Expressions.<br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 14, 2015, at 4:50 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them.<br>&gt;&gt; <br>&gt;&gt; FWIW, I used to be one of those people, but then started working on a team where one member liked them. He didn&#39;t force them on us, but after enough code reviews where he showed us how to turn 5-line if/else statements into simple one-line ternary expressions, I got used to reading them and now love them and use them often.<br>&gt;&gt; <br>&gt;&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s hard for them to read because it&#39;s not the for loop they&#39;re used to). I think it&#39;s a simple matter of getting used to it.<br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ternary Replacement<br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt; This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/1a90ccf9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 15, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 06:41, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Agreed, I was thinking to I really want turn something that was 2 characters into 10 and will I really be happy with that at the end of the day. A properly formatted ternary can be quite easy to read, it is when people get sloppy and try to cram too much into one expression that they get really hard to follow. For example,<br>&gt; <br>&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt; <br>&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt; <br>&gt;     return a &lt; b<br>&gt; 	? b &lt; c <br>&gt; 	  ? b <br>&gt;           : a &lt; c <br>&gt; 	     ? c <br>&gt; 	     : a <br>&gt; 	: a &lt; c <br>&gt; 	  ? a <br>&gt; 	  : b &lt; c  <br>&gt;              ? c <br>&gt; 	     : b<br></p><p>I’m happy to make use of the ternary operator, but never in a nested fashion. It looks neat and succinct on first glance, but is quite impenetrable to read. I don’t think there’s a way to make such nested expressions easily comprehensible. Nested ‘if/else/then’ expressions will be equally bewildering.<br></p><p>On a purely stylistic level I think simple, ‘if/then/else’ expressions, would have a more Swift vibe to them than the ternary operator. Well, that would be the case if it didn’t introduce the confusion between expressions and statements.<br></p><p>&gt; I do still however like the Switch Expressions.<br></p><p>I agree. The Switch expression proposal is worth pursuing, it’s something I’d really like to see in the language. One concern I have is that it faces the same dilemma of the ‘if’ expression proposal, that is, how to make the distinction between a statement and an expression unambiguous?<br></p><p>Here’s a suggestion, it might be terrible (I’ve not had my third cup of tea of the morning yet), but how about a different keyword? I know, I feel guilty for the suggestion already, but here it is:<br></p><p>switch == statement<br>match == expression<br></p><p>The syntax you (@Paul) have already suggested for the feature wouldn’t change, but instead of ‘switch’, it’d use the ‘match’ keyword for the expression form. Good, bad, terrible? What do people think?<br></p><p>Al<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/aa406463/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>Can we just have if-expressions and Xcode indent if-statements the way that<br>Ruby style guides suggest?<br></p><p>let x = if y &lt; 0 {<br>z * z - 4<br>} else {<br>8<br>}<br></p><p><br>Works fantastically well in Ruby, for me. Looks a bit strange to the<br>untrained eye but that went away for me pretty much the first time I wrote<br>one of these. It&#39;s:<br></p><p>- More readable than ternary<br>- Not shoehorning complex logic onto one line<br>- All indented to the same indentation level<br></p><p>And we don&#39;t have the 80-char line delimiter or length limit in Swift, with<br>Xcode also using a slightly smaller font size than most other IDEs, so<br>indentation should not be that much of an issue. Admittedly, ruby style<br>dictates two-space indentation which makes this type of code slightly<br>shallower.<br></p><p>On Tue, Dec 15, 2015 at 5:34 AM Al Skipp via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 15 Dec 2015, at 06:41, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Agreed, I was thinking to I really want turn something that was 2<br>&gt; characters into 10 and will I really be happy with that at the end of the<br>&gt; day. A properly formatted ternary can be quite easy to read, it is when<br>&gt; people get sloppy and try to cram too much into one expression that they<br>&gt; get really hard to follow. For example,<br>&gt;<br>&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;<br>&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;<br>&gt; return a &lt; b<br>&gt; ? b &lt; c<br>&gt; ? b<br>&gt; : a &lt; c<br>&gt; ? c<br>&gt; : a<br>&gt; : a &lt; c<br>&gt; ? a<br>&gt; : b &lt; c<br>&gt; ? c<br>&gt; : b<br>&gt;<br>&gt;<br>&gt; I’m happy to make use of the ternary operator, but never in a nested<br>&gt; fashion. It looks neat and succinct on first glance, but is quite<br>&gt; impenetrable to read. I don’t think there’s a way to make such nested<br>&gt; expressions easily comprehensible. Nested ‘if/else/then’ expressions will<br>&gt; be equally bewildering.<br>&gt;<br>&gt; On a purely stylistic level I think simple, ‘if/then/else’ expressions,<br>&gt; would have a more Swift vibe to them than the ternary operator. Well, that<br>&gt; would be the case if it didn’t introduce the confusion between expressions<br>&gt; and statements.<br>&gt;<br>&gt; I do still however like the Switch Expressions.<br>&gt;<br>&gt;<br>&gt; I agree. The Switch expression proposal is worth pursuing, it’s something<br>&gt; I’d really like to see in the language. One concern I have is that it faces<br>&gt; the same dilemma of the ‘if’ expression proposal, that is, how to make the<br>&gt; distinction between a statement and an expression unambiguous?<br>&gt;<br>&gt; Here’s a suggestion, it might be terrible (I’ve not had my third cup of<br>&gt; tea of the morning yet), but how about a different keyword? I know, I feel<br>&gt; guilty for the suggestion already, but here it is:<br>&gt;<br>&gt; switch == statement<br>&gt; match == expression<br>&gt;<br>&gt; The syntax you (@Paul) have already suggested for the feature wouldn’t<br>&gt; change, but instead of ‘switch’, it’d use the ‘match’ keyword for the<br>&gt; expression form. Good, bad, terrible? What do people think?<br>&gt;<br>&gt; Al<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/5a3cf23c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>Also, +1 to removing ?: ternary in general. It does not match the<br>atmosphere of Swift. Where you can write:<br></p><p>self.x = a ? b : c<br>self.y = a ? d : e<br>self.z = a ? f : g<br></p><p>You could just write<br></p><p>if a {<br>  self.x = b<br>  self.y = d<br>  self.z = f<br>} else {<br>  self.x = c<br>  self.y = e<br>  self.z = g<br>}<br></p><p>Now it&#39;s easier to scan for what changes when a is true. With<br>if-expressions, this would scale even better to multiple<br>conditions/declarations.<br></p><p>On Tue, Dec 15, 2015 at 11:14 AM Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt;<br>wrote:<br></p><p>&gt; Can we just have if-expressions and Xcode indent if-statements the way<br>&gt; that Ruby style guides suggest?<br>&gt;<br>&gt; let x = if y &lt; 0 {<br>&gt; z * z - 4<br>&gt; } else {<br>&gt; 8<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Works fantastically well in Ruby, for me. Looks a bit strange to the<br>&gt; untrained eye but that went away for me pretty much the first time I wrote<br>&gt; one of these. It&#39;s:<br>&gt;<br>&gt; - More readable than ternary<br>&gt; - Not shoehorning complex logic onto one line<br>&gt; - All indented to the same indentation level<br>&gt;<br>&gt; And we don&#39;t have the 80-char line delimiter or length limit in Swift,<br>&gt; with Xcode also using a slightly smaller font size than most other IDEs, so<br>&gt; indentation should not be that much of an issue. Admittedly, ruby style<br>&gt; dictates two-space indentation which makes this type of code slightly<br>&gt; shallower.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 5:34 AM Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On 15 Dec 2015, at 06:41, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Agreed, I was thinking to I really want turn something that was 2<br>&gt;&gt; characters into 10 and will I really be happy with that at the end of the<br>&gt;&gt; day. A properly formatted ternary can be quite easy to read, it is when<br>&gt;&gt; people get sloppy and try to cram too much into one expression that they<br>&gt;&gt; get really hard to follow. For example,<br>&gt;&gt;<br>&gt;&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;&gt;<br>&gt;&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;&gt;<br>&gt;&gt; return a &lt; b<br>&gt;&gt; ? b &lt; c<br>&gt;&gt; ? b<br>&gt;&gt; : a &lt; c<br>&gt;&gt; ? c<br>&gt;&gt; : a<br>&gt;&gt; : a &lt; c<br>&gt;&gt; ? a<br>&gt;&gt; : b &lt; c<br>&gt;&gt; ? c<br>&gt;&gt; : b<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’m happy to make use of the ternary operator, but never in a nested<br>&gt;&gt; fashion. It looks neat and succinct on first glance, but is quite<br>&gt;&gt; impenetrable to read. I don’t think there’s a way to make such nested<br>&gt;&gt; expressions easily comprehensible. Nested ‘if/else/then’ expressions will<br>&gt;&gt; be equally bewildering.<br>&gt;&gt;<br>&gt;&gt; On a purely stylistic level I think simple, ‘if/then/else’ expressions,<br>&gt;&gt; would have a more Swift vibe to them than the ternary operator. Well, that<br>&gt;&gt; would be the case if it didn’t introduce the confusion between expressions<br>&gt;&gt; and statements.<br>&gt;&gt;<br>&gt;&gt; I do still however like the Switch Expressions.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I agree. The Switch expression proposal is worth pursuing, it’s something<br>&gt;&gt; I’d really like to see in the language. One concern I have is that it faces<br>&gt;&gt; the same dilemma of the ‘if’ expression proposal, that is, how to make the<br>&gt;&gt; distinction between a statement and an expression unambiguous?<br>&gt;&gt;<br>&gt;&gt; Here’s a suggestion, it might be terrible (I’ve not had my third cup of<br>&gt;&gt; tea of the morning yet), but how about a different keyword? I know, I feel<br>&gt;&gt; guilty for the suggestion already, but here it is:<br>&gt;&gt;<br>&gt;&gt; switch == statement<br>&gt;&gt; match == expression<br>&gt;&gt;<br>&gt;&gt; The syntax you (@Paul) have already suggested for the feature wouldn’t<br>&gt;&gt; change, but instead of ‘switch’, it’d use the ‘match’ keyword for the<br>&gt;&gt; expression form. Good, bad, terrible? What do people think?<br>&gt;&gt;<br>&gt;&gt; Al<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/21dac3b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>I hate to triple-post, but removing ternary seems similar to the &#39;removing<br>c-style for loops&#39; proposal that was recently accepted:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md<br></p><p>To quote:<br>The C-style for-loop appears to be a mechanical carry-over from C rather<br>than a genuinely Swift-specific construct. It is rarely used and not very<br>Swift-like.<br></p><p>You could say the same thing about ternary. Rarely used; not very<br>Swift-like, conflicting with the use of ? for optionals; seems to be<br>disliked (rationally or irrationally) by many; and in almost all cases you<br>can achieve the same exact thing, but ostensibly more readable, with a few<br>extra lines.<br></p><p>On Tue, Dec 15, 2015 at 11:18 AM Dennis Lysenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Also, +1 to removing ?: ternary in general. It does not match the<br>&gt; atmosphere of Swift. Where you can write:<br>&gt;<br>&gt; self.x = a ? b : c<br>&gt; self.y = a ? d : e<br>&gt; self.z = a ? f : g<br>&gt;<br>&gt; You could just write<br>&gt;<br>&gt; if a {<br>&gt;   self.x = b<br>&gt;   self.y = d<br>&gt;   self.z = f<br>&gt; } else {<br>&gt;   self.x = c<br>&gt;   self.y = e<br>&gt;   self.z = g<br>&gt; }<br>&gt;<br>&gt; Now it&#39;s easier to scan for what changes when a is true. With<br>&gt; if-expressions, this would scale even better to multiple<br>&gt; conditions/declarations.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 11:14 AM Dennis Lysenko &lt;<br>&gt; dennis.s.lysenko at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Can we just have if-expressions and Xcode indent if-statements the way<br>&gt;&gt; that Ruby style guides suggest?<br>&gt;&gt;<br>&gt;&gt; let x = if y &lt; 0 {<br>&gt;&gt; z * z - 4<br>&gt;&gt; } else {<br>&gt;&gt; 8<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Works fantastically well in Ruby, for me. Looks a bit strange to the<br>&gt;&gt; untrained eye but that went away for me pretty much the first time I wrote<br>&gt;&gt; one of these. It&#39;s:<br>&gt;&gt;<br>&gt;&gt; - More readable than ternary<br>&gt;&gt; - Not shoehorning complex logic onto one line<br>&gt;&gt; - All indented to the same indentation level<br>&gt;&gt;<br>&gt;&gt; And we don&#39;t have the 80-char line delimiter or length limit in Swift,<br>&gt;&gt; with Xcode also using a slightly smaller font size than most other IDEs, so<br>&gt;&gt; indentation should not be that much of an issue. Admittedly, ruby style<br>&gt;&gt; dictates two-space indentation which makes this type of code slightly<br>&gt;&gt; shallower.<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 5:34 AM Al Skipp via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On 15 Dec 2015, at 06:41, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Agreed, I was thinking to I really want turn something that was 2<br>&gt;&gt;&gt; characters into 10 and will I really be happy with that at the end of the<br>&gt;&gt;&gt; day. A properly formatted ternary can be quite easy to read, it is when<br>&gt;&gt;&gt; people get sloppy and try to cram too much into one expression that they<br>&gt;&gt;&gt; get really hard to follow. For example,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; return a &lt; b<br>&gt;&gt;&gt; ? b &lt; c<br>&gt;&gt;&gt; ? b<br>&gt;&gt;&gt; : a &lt; c<br>&gt;&gt;&gt; ? c<br>&gt;&gt;&gt; : a<br>&gt;&gt;&gt; : a &lt; c<br>&gt;&gt;&gt; ? a<br>&gt;&gt;&gt; : b &lt; c<br>&gt;&gt;&gt; ? c<br>&gt;&gt;&gt; : b<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’m happy to make use of the ternary operator, but never in a nested<br>&gt;&gt;&gt; fashion. It looks neat and succinct on first glance, but is quite<br>&gt;&gt;&gt; impenetrable to read. I don’t think there’s a way to make such nested<br>&gt;&gt;&gt; expressions easily comprehensible. Nested ‘if/else/then’ expressions will<br>&gt;&gt;&gt; be equally bewildering.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On a purely stylistic level I think simple, ‘if/then/else’ expressions,<br>&gt;&gt;&gt; would have a more Swift vibe to them than the ternary operator. Well, that<br>&gt;&gt;&gt; would be the case if it didn’t introduce the confusion between expressions<br>&gt;&gt;&gt; and statements.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do still however like the Switch Expressions.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I agree. The Switch expression proposal is worth pursuing, it’s<br>&gt;&gt;&gt; something I’d really like to see in the language. One concern I have is<br>&gt;&gt;&gt; that it faces the same dilemma of the ‘if’ expression proposal, that is,<br>&gt;&gt;&gt; how to make the distinction between a statement and an expression<br>&gt;&gt;&gt; unambiguous?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Here’s a suggestion, it might be terrible (I’ve not had my third cup of<br>&gt;&gt;&gt; tea of the morning yet), but how about a different keyword? I know, I feel<br>&gt;&gt;&gt; guilty for the suggestion already, but here it is:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; switch == statement<br>&gt;&gt;&gt; match == expression<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The syntax you (@Paul) have already suggested for the feature wouldn’t<br>&gt;&gt;&gt; change, but instead of ‘switch’, it’d use the ‘match’ keyword for the<br>&gt;&gt;&gt; expression form. Good, bad, terrible? What do people think?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Al<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/e1ae45d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>ternary operator ?: suggestion (swift-evolution Digest, Vol 1, Issue 181)</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>On 12/15/15 14:32, Dennis Lysenko wrote:<br>&gt; You could say the same thing about ternary. Rarely used;<br></p><p>I seem to use it _a lot_ in C and ObjC and find it more concise that<br>proposed alternatives. Especially the `?:` variety.<br></p><p>&gt; not very Swift-like, conflicting with the use of ? for optionals;<br></p><p>That I don&#39;t see, as an isolated `?` with whitespace around is AFAIK not<br>used for optionals.<br></p><p>&gt; seems to be disliked (rationally or irrationally) by many; and in<br>&gt; almost all cases you can achieve the same exact thing, but ostensibly<br>&gt; more readable, with a few extra lines.<br></p><p>But the objective is exactly to say whatever on a single line!<br></p><p>I grant that you should either not nest it, or always use ()s, but that<br>is true for all boolean operators IMHO.<br></p><p>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 15, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 8:32 AM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I hate to triple-post, but removing ternary seems similar to the &#39;removing c-style for loops&#39; proposal that was recently accepted: https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md&gt;<br>&gt; <br>&gt; To quote:<br>&gt; The C-style for-loop appears to be a mechanical carry-over from C rather than a genuinely Swift-specific construct. It is rarely used and not very Swift-like.<br>&gt; <br>&gt; You could say the same thing about ternary. Rarely used; not very Swift-like, conflicting with the use of ? for optionals; seems to be disliked (rationally or irrationally) by many; and in almost all cases you can achieve the same exact thing, but ostensibly more readable, with a few extra lines.<br></p><p>There are significant differences though: C style for loop is almost never used (and many people chimed in to say that they had *zero* uses in their code), but ternary is widely used.  In order to remove ternary, we’d need to have something to replace it with, which is the topic of much of this thread.  IMO, in order to consider removing ternary, we’d have to introduce something that is *better* than the current ternary operator first.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/f7a7d4a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; IMO, in order to consider removing ternary, we’d have to introduce something that is *better* than the current ternary operator first.<br></p><p>Do you have any thoughts about what might constitute *better* in your mind no matter how vague they might be?  Mostly curious about this.  <br></p><p>I always have to stop and think if I encounter a chained ternary expression but never do when I encounter chained if statements.  Maybe that’s just because I encounter them pretty infrequently but IMO it seems to indicate that the search for something better is worthwhile.<br></p><p>Matthew<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 15, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 1:44 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; IMO, in order to consider removing ternary, we’d have to introduce something that is *better* than the current ternary operator first.<br>&gt; <br>&gt; Do you have any thoughts about what might constitute *better* in your mind no matter how vague they might be?  Mostly curious about this.  <br></p><p>No, I’m not aware of anything that I’d consider to be better than ?:<br></p><p>In brief, and just MHO, but:<br></p><p>- I agree that ?: is ugly and magic, and is an additional thing people have to learn if coming to swift without encountering a C family language.<br>- I agree that it is unfortunate that it uses “?” in particular, since we’d prefer that to be associated with optionals.<br></p><p>The closest proposal I’ve seen is the “if cond then value1 else value2” syntax, however that has serious (IMO) problems:<br>- It is substantially more verbose than ?:, so much so that it obscures the logic that was trying to be captured.  Simple things like this become swallowed in syntax:<br>   let x = cond ? 4 : 8<br>   let x = if cond then 4 else 8<br></p><p> - Because it looks like an if statement, people will end up writing it like:<br></p><p>let x = if cond then<br>		some_long_expression<br>	   else<br>		some_other_long_expression<br></p><p>When this happens, we now have new problems: <br>  - At a glance, it “looks” like an if statement, but it is semantically different.<br>  - it only accepts expressions, not statements.  The way it is flowed makes it look like a statement.<br>  - It is now force indenting a lot, which just looks weird and isn’t precedented in Swift.<br></p><p><br></p><p>On this thread, people have been focusing on the negative parts of ?: without considering the positive aspects of it.  Here are some of the positive aspects of it:<br></p><p>- It is extremely concise, and covers a very common pattern.<br>- It is pervasively standardized in a very wide range of languages.<br>- It’s weird syntax reduces the odds that people would flow it out and use very large expressions in it.<br>- It chains well for multiple conditions because of its associativity.<br></p><p>To repeat what I said upthread, to build a compelling case that we should replace ?:, its replacement should be *better* than ?:.<br></p><p>Believe it or not, we only change things when there are strong reasons, and in the absence of any other strong reason, being similar to the C family is a benefit, not a problem.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 15, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 16:18, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt; wrote:<br>&gt; <br>&gt; Also, +1 to removing ?: ternary in general. It does not match the atmosphere of Swift. Where you can write:<br>&gt; <br>&gt; self.x = a ? b : c<br>&gt; self.y = a ? d : e<br>&gt; self.z = a ? f : g<br>&gt; <br>&gt; You could just write<br>&gt; <br>&gt; if a {<br>&gt;   self.x = b<br>&gt;   self.y = d<br>&gt;   self.z = f<br>&gt; } else {<br>&gt;   self.x = c<br>&gt;   self.y = e<br>&gt;   self.z = g<br>&gt; }<br>&gt; <br>&gt; Now it&#39;s easier to scan for what changes when a is true. With if-expressions, this would scale even better to multiple conditions/declarations.<br></p><p>If the ternary operator is removed, but is not replaced with an equivalent expression, so that we must resort to ‘if’ statements, I will cry!<br></p><p>Al 😭<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/686cabec/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 15, 2015 at 10:00:00pm</p></header><div class="content"><p>If we keep the ternary operator as &quot;if-expression&quot; for its succinctness, <br>I&#39;d like to refresh the proposal of I-don&#39;t-remember-whom of having a similar<br>switch-expression:<br></p><p>let x = color ?<br>        case .Red: red<br>        case .Green: green<br>        default: black<br></p><p>The &quot;case&quot;s nicely separate the expressions and they even have colons ;-)<br>I&#39;d keep the &quot;case&quot; keywords for three reasons: first, parsing, second, similarity <br>to the switch statement and third, readability (otherwise it would be really difficult<br>to discern case patterns from results).<br></p><p>-Thorsten <br></p><p>&gt; Am 15.12.2015 um 11:34 schrieb Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On 15 Dec 2015, at 06:41, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Agreed, I was thinking to I really want turn something that was 2 characters into 10 and will I really be happy with that at the end of the day. A properly formatted ternary can be quite easy to read, it is when people get sloppy and try to cram too much into one expression that they get really hard to follow. For example,<br>&gt;&gt; <br>&gt;&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;&gt; <br>&gt;&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;&gt; <br>&gt;&gt;     return a &lt; b<br>&gt;&gt; 	? b &lt; c <br>&gt;&gt; 	  ? b <br>&gt;&gt;           : a &lt; c <br>&gt;&gt; 	     ? c <br>&gt;&gt; 	     : a <br>&gt;&gt; 	: a &lt; c <br>&gt;&gt; 	  ? a <br>&gt;&gt; 	  : b &lt; c  <br>&gt;&gt;              ? c <br>&gt;&gt; 	     : b<br>&gt; <br>&gt; I’m happy to make use of the ternary operator, but never in a nested fashion. It looks neat and succinct on first glance, but is quite impenetrable to read. I don’t think there’s a way to make such nested expressions easily comprehensible. Nested ‘if/else/then’ expressions will be equally bewildering.<br>&gt; <br>&gt; On a purely stylistic level I think simple, ‘if/then/else’ expressions, would have a more Swift vibe to them than the ternary operator. Well, that would be the case if it didn’t introduce the confusion between expressions and statements.<br>&gt; <br>&gt;&gt; I do still however like the Switch Expressions.<br>&gt; <br>&gt; I agree. The Switch expression proposal is worth pursuing, it’s something I’d really like to see in the language. One concern I have is that it faces the same dilemma of the ‘if’ expression proposal, that is, how to make the distinction between a statement and an expression unambiguous?<br>&gt; <br>&gt; Here’s a suggestion, it might be terrible (I’ve not had my third cup of tea of the morning yet), but how about a different keyword? I know, I feel guilty for the suggestion already, but here it is:<br>&gt; <br>&gt; switch == statement<br>&gt; match == expression<br>&gt; <br>&gt; The syntax you (@Paul) have already suggested for the feature wouldn’t change, but instead of ‘switch’, it’d use the ‘match’ keyword for the expression form. Good, bad, terrible? What do people think?<br>&gt; <br>&gt; Al<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/ea6872d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 15, 2015 at 01:00:00pm</p></header><div class="content"><p>Yeah I believe we did discuss this a bit. I like it. <br></p><p><br>&gt; On Dec 15, 2015, at 1:29 PM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; If we keep the ternary operator as &quot;if-expression&quot; for its succinctness, <br>&gt; I&#39;d like to refresh the proposal of I-don&#39;t-remember-whom of having a similar<br>&gt; switch-expression:<br>&gt; <br>&gt; let x = color ?<br>&gt;         case .Red: red<br>&gt;         case .Green: green<br>&gt;         default: black<br>&gt; <br>&gt; The &quot;case&quot;s nicely separate the expressions and they even have colons ;-)<br>&gt; I&#39;d keep the &quot;case&quot; keywords for three reasons: first, parsing, second, similarity <br>&gt; to the switch statement and third, readability (otherwise it would be really difficult<br>&gt; to discern case patterns from results).<br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt; Am 15.12.2015 um 11:34 schrieb Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 15 Dec 2015, at 06:41, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agreed, I was thinking to I really want turn something that was 2 characters into 10 and will I really be happy with that at the end of the day. A properly formatted ternary can be quite easy to read, it is when people get sloppy and try to cram too much into one expression that they get really hard to follow. For example,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     return a &lt; b<br>&gt;&gt;&gt; 	? b &lt; c <br>&gt;&gt;&gt; 	  ? b <br>&gt;&gt;&gt;           : a &lt; c <br>&gt;&gt;&gt; 	     ? c <br>&gt;&gt;&gt; 	     : a <br>&gt;&gt;&gt; 	: a &lt; c <br>&gt;&gt;&gt; 	  ? a <br>&gt;&gt;&gt; 	  : b &lt; c  <br>&gt;&gt;&gt;              ? c <br>&gt;&gt;&gt; 	     : b<br>&gt;&gt; <br>&gt;&gt; I’m happy to make use of the ternary operator, but never in a nested fashion. It looks neat and succinct on first glance, but is quite impenetrable to read. I don’t think there’s a way to make such nested expressions easily comprehensible. Nested ‘if/else/then’ expressions will be equally bewildering.<br>&gt;&gt; <br>&gt;&gt; On a purely stylistic level I think simple, ‘if/then/else’ expressions, would have a more Swift vibe to them than the ternary operator. Well, that would be the case if it didn’t introduce the confusion between expressions and statements.<br>&gt;&gt; <br>&gt;&gt;&gt; I do still however like the Switch Expressions.<br>&gt;&gt; <br>&gt;&gt; I agree. The Switch expression proposal is worth pursuing, it’s something I’d really like to see in the language. One concern I have is that it faces the same dilemma of the ‘if’ expression proposal, that is, how to make the distinction between a statement and an expression unambiguous?<br>&gt;&gt; <br>&gt;&gt; Here’s a suggestion, it might be terrible (I’ve not had my third cup of tea of the morning yet), but how about a different keyword? I know, I feel guilty for the suggestion already, but here it is:<br>&gt;&gt; <br>&gt;&gt; switch == statement<br>&gt;&gt; match == expression<br>&gt;&gt; <br>&gt;&gt; The syntax you (@Paul) have already suggested for the feature wouldn’t change, but instead of ‘switch’, it’d use the ‘match’ keyword for the expression form. Good, bad, terrible? What do people think?<br>&gt;&gt; <br>&gt;&gt; Al<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/32b8ab7d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 15, 2015 at 02:00:00pm</p></header><div class="content"><p>+1 bigtime for the assignment via Switch proposal<br></p><p>I think someone here made the argument, I can&#39;t remember who, that it would<br>be confusing for beginners. I think exactly the opposite.<br></p><p>Once a new programmer has learned how to write a normal Switch statement,<br>they&#39;ll be able to &quot;leverage&quot; the same concept and map values using the<br>Switch assignment. Some might even try it on their on own, through<br>experimentation, to see if it will work. It&#39;s such a pleasant experience<br>when you try something in a language that seems consistent with what you<br>already know, and discover &quot;cool, it works!&quot;<br></p><p>At the moment, the alternatives are, what, using a dict to map values?<br>trying to shoehorn a corrsponding set of values into an enum? using the<br>existing switch statement (pretty verbose in Swift, due to &quot;let&quot; scope<br>etc)? In my own Swift code, I have encountered situations, frequently,<br>where I wished I had an equivalent to a ternary condition that handled more<br>than two values. Chaining multiple ternary conditions together is<br>unreadable. This proposed Switch assignment expression would take care of<br>that.<br></p><p>Definitely has my vote!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/cfe36685/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>Been thinking a bit:<br></p><p>Perhaps a new expression is in order. “Pick” this has a form like this. Param is a selector  This only allows expressions <br></p><p>It has two forms: <br></p><p>To replace ternary: <br></p><p>let x = pick val from &quot;abc&quot;, &quot;cdef&quot;<br></p><p>To replace switch expressions. The cases follows existing rules for switch cases. <br></p><p>let y = pick val from cases .Red: 1, .Green: 2, .Blue: 3<br></p><p>This keeps the notion of expressions and statements quite separate. It avoids syntax confusion. It reads clear. It is fairy concise. It uses a straight forward pattern for both forms of expression. <br></p><p>- Paul<br></p><p>&gt; On Dec 15, 2015, at 2:06 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 bigtime for the assignment via Switch proposal<br>&gt; <br>&gt; I think someone here made the argument, I can&#39;t remember who, that it would be confusing for beginners. I think exactly the opposite. <br>&gt; <br>&gt; Once a new programmer has learned how to write a normal Switch statement, they&#39;ll be able to &quot;leverage&quot; the same concept and map values using the Switch assignment. Some might even try it on their on own, through experimentation, to see if it will work. It&#39;s such a pleasant experience when you try something in a language that seems consistent with what you already know, and discover &quot;cool, it works!&quot;<br>&gt; <br>&gt; At the moment, the alternatives are, what, using a dict to map values? trying to shoehorn a corrsponding set of values into an enum? using the existing switch statement (pretty verbose in Swift, due to &quot;let&quot; scope etc)? In my own Swift code, I have encountered situations, frequently, where I wished I had an equivalent to a ternary condition that handled more than two values. Chaining multiple ternary conditions together is unreadable. This proposed Switch assignment expression would take care of that. <br>&gt; <br>&gt; Definitely has my vote!<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/d2175449/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>I think pick…from may address many of the negatives listed by Chris. with the if..then..else approach.<br></p><p>&gt; The closest proposal I’ve seen is the “if cond then value1 else value2” syntax, however that has serious (IMO) problems:<br></p><p>&gt; - It is substantially more verbose than ?:, so much so that it obscures the logic that was trying to be captured.  Simple things like this become swallowed in syntax:<br>&gt;   let x = cond ? 4 : 8<br>&gt;   let x = if cond then 4 else 8<br></p><p>this suggestion would still be longer, you can’t beat 2 chars. It is shorter than if..then..else though. Not sure there are any good options that can beat the conciseness of the ternary without replacing it with more syntax.<br></p><p>let x = pick cond from 4, 8<br></p><p>&gt; <br>&gt; - Because it looks like an if statement, people will end up writing it like:<br>&gt; <br>&gt; let x = if cond then<br>&gt; 		some_long_expression<br>&gt; 	   else<br>&gt; 		some_other_long_expression<br></p><p>&gt;  - it only accepts expressions, not statements.  The way it is flowed makes it look like a statement.<br>&gt;  - It is now force indenting a lot, which just looks weird and isn’t precedented in Swift.<br></p><p>By having a new keyword, we can define the format and there is no prior connotation with it. <br></p><p>&gt; <br>&gt; When this happens, we now have new problems: <br>&gt;  - At a glance, it “looks” like an if statement, but it is semantically different.<br></p><p>Since it is a new it will always look like something that handles expressions only. <br></p><p>Also this pick…from statement can be extended to handle switch expressions as well. So it is consistent way to do different expressions based upon an input. <br></p><p>Some downsides: <br>new keyword<br>no prior history with other programming languages.<br></p><p><br>&gt; On Dec 15, 2015, at 4:31 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Been thinking a bit:<br>&gt; <br>&gt; Perhaps a new expression is in order. “Pick” this has a form like this. Param is a selector  This only allows expressions <br>&gt; <br>&gt; It has two forms: <br>&gt; <br>&gt; To replace ternary: <br>&gt; <br>&gt; let x = pick val from &quot;abc&quot;, &quot;cdef&quot;<br>&gt; <br>&gt; To replace switch expressions. The cases follows existing rules for switch cases. <br>&gt; <br>&gt; let y = pick val from cases .Red: 1, .Green: 2, .Blue: 3<br>&gt; <br>&gt; This keeps the notion of expressions and statements quite separate. It avoids syntax confusion. It reads clear. It is fairy concise. It uses a straight forward pattern for both forms of expression. <br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt;&gt; On Dec 15, 2015, at 2:06 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 bigtime for the assignment via Switch proposal<br>&gt;&gt; <br>&gt;&gt; I think someone here made the argument, I can&#39;t remember who, that it would be confusing for beginners. I think exactly the opposite. <br>&gt;&gt; <br>&gt;&gt; Once a new programmer has learned how to write a normal Switch statement, they&#39;ll be able to &quot;leverage&quot; the same concept and map values using the Switch assignment. Some might even try it on their on own, through experimentation, to see if it will work. It&#39;s such a pleasant experience when you try something in a language that seems consistent with what you already know, and discover &quot;cool, it works!&quot;<br>&gt;&gt; <br>&gt;&gt; At the moment, the alternatives are, what, using a dict to map values? trying to shoehorn a corrsponding set of values into an enum? using the existing switch statement (pretty verbose in Swift, due to &quot;let&quot; scope etc)? In my own Swift code, I have encountered situations, frequently, where I wished I had an equivalent to a ternary condition that handled more than two values. Chaining multiple ternary conditions together is unreadable. This proposed Switch assignment expression would take care of that. <br>&gt;&gt; <br>&gt;&gt; Definitely has my vote!<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/ad4289ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 16, 2015 at 08:00:00am</p></header><div class="content"><p>Pick is interesting but how do you chain more that one pick/from together?<br></p><p>I thought about just just dropping the if.<br></p><p>let result = bool then 1 else bool then 2 else 3<br></p><p>Or going back to the python style.<br></p><p>let result = 1 where bool else where bool 2 else 3<br></p><p>But you are right, can&#39;t beat just having two characters. Specially when<br>the Elvis operator is in every other major c based language.<br></p><p>Perhaps this is just a like ! as a negation character, once you learn the<br>differences then u are set for other languages as well.<br></p><p>It would be nice to be able to bind expressions so that the actual logic of<br>the ?: is not lost.<br></p><p>let result = if (long_boolexpresion,<br>                   longerBoolexoression,<br>                   anotherboolExpression )<br>                   $0 then &quot;a&quot; else $1 &amp;&amp; $2 then &quot;b&quot; else &quot;c&quot;<br></p><p><br>On Tuesday, December 15, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think pick…from may address many of the negatives listed by Chris. with<br>&gt; the if..then..else approach.<br>&gt;<br>&gt; The closest proposal I’ve seen is the “if cond then value1 else value2”<br>&gt; syntax, however that has serious (IMO) problems:<br>&gt;<br>&gt;<br>&gt; - It is substantially more verbose than ?:, so much so that it obscures<br>&gt; the logic that was trying to be captured.  Simple things like this become<br>&gt; swallowed in syntax:<br>&gt;   let x = cond ? 4 : 8<br>&gt;   let x = if cond then 4 else 8<br>&gt;<br>&gt;<br>&gt; this suggestion would still be longer, you can’t beat 2 chars. It is<br>&gt; shorter than if..then..else though. Not sure there are any good options<br>&gt; that can beat the conciseness of the ternary without replacing it with more<br>&gt; syntax.<br>&gt;<br>&gt; let x = pick cond from 4, 8<br>&gt;<br>&gt;<br>&gt; - Because it looks like an if statement, people will end up writing it<br>&gt; like:<br>&gt;<br>&gt; let x = if cond then<br>&gt; some_long_expression<br>&gt;    else<br>&gt; some_other_long_expression<br>&gt;<br>&gt;<br>&gt;  - it only accepts expressions, not statements.  The way it is flowed<br>&gt; makes it look like a statement.<br>&gt;  - It is now force indenting a lot, which just looks weird and isn’t<br>&gt; precedented in Swift.<br>&gt;<br>&gt;<br>&gt; By having a new keyword, we can define the format and there is no prior<br>&gt; connotation with it.<br>&gt;<br>&gt;<br>&gt; When this happens, we now have new problems:<br>&gt;  - At a glance, it “looks” like an if statement, but it is semantically<br>&gt; different.<br>&gt;<br>&gt;<br>&gt; Since it is a new it will always look like something that handles<br>&gt; expressions only.<br>&gt;<br>&gt; Also this pick…from statement can be extended to handle switch expressions<br>&gt; as well. So it is consistent way to do different expressions based upon an<br>&gt; input.<br>&gt;<br>&gt; Some downsides:<br>&gt; new keyword<br>&gt; no prior history with other programming languages.<br>&gt;<br>&gt;<br>&gt; On Dec 15, 2015, at 4:31 PM, Paul Ossenbruggen &lt;possen at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Been thinking a bit:<br>&gt;<br>&gt; Perhaps a new expression is in order. “Pick” this has a form like this.<br>&gt; Param is a selector  This only allows expressions<br>&gt;<br>&gt; It has two forms:<br>&gt;<br>&gt; To replace ternary:<br>&gt;<br>&gt; let x = pick val from &quot;abc&quot;, &quot;cdef&quot;<br>&gt;<br>&gt; To replace switch expressions. The cases follows existing rules for switch<br>&gt; cases.<br>&gt;<br>&gt; let y = pick val from cases .Red: 1, .Green: 2, .Blue: 3<br>&gt;<br>&gt; This keeps the notion of expressions and statements quite separate. It<br>&gt; avoids syntax confusion. It reads clear. It is fairy concise. It uses a<br>&gt; straight forward pattern for both forms of expression.<br>&gt;<br>&gt; - Paul<br>&gt;<br>&gt; On Dec 15, 2015, at 2:06 PM, Charles Constant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; +1 bigtime for the assignment via Switch proposal<br>&gt;<br>&gt; I think someone here made the argument, I can&#39;t remember who, that it<br>&gt; would be confusing for beginners. I think exactly the opposite.<br>&gt;<br>&gt; Once a new programmer has learned how to write a normal Switch statement,<br>&gt; they&#39;ll be able to &quot;leverage&quot; the same concept and map values using the<br>&gt; Switch assignment. Some might even try it on their on own, through<br>&gt; experimentation, to see if it will work. It&#39;s such a pleasant experience<br>&gt; when you try something in a language that seems consistent with what you<br>&gt; already know, and discover &quot;cool, it works!&quot;<br>&gt;<br>&gt; At the moment, the alternatives are, what, using a dict to map values?<br>&gt; trying to shoehorn a corrsponding set of values into an enum? using the<br>&gt; existing switch statement (pretty verbose in Swift, due to &quot;let&quot; scope<br>&gt; etc)? In my own Swift code, I have encountered situations, frequently,<br>&gt; where I wished I had an equivalent to a ternary condition that handled more<br>&gt; than two values. Chaining multiple ternary conditions together is<br>&gt; unreadable. This proposed Switch assignment expression would take care of<br>&gt; that.<br>&gt;<br>&gt; Definitely has my vote!<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/ff251388/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>Selector Operator Proposal<br></p><p>OK really trying to get this down to its essence, make something that is truly better and more powerful than ternary, and try to keep as much of the advantages of the ternary and hopefully slightly improve the readability. I am calling it the &quot;selector operator&quot;. This proposal, does not add a new keyword but adds a new operator. It unifies the concepts of ternary and gives us a new switch like behavior that ternary does not support. The concept is kind of like a train track, with multiple possible directions selectable by one input. <br></p><p>I believe it also addresses the issues that Chris mentioned. <br></p><p>to select from a boolean, a or b:<br>let a = sel -&gt;&gt; true, false<br></p><p>to select from an enum values as in a switch:<br></p><p>let a = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3 <br>let b = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3, default: 4<br>let c = sel -&gt;&gt; case .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>let d = sel -&gt;&gt; .Red: 1, (sel -&gt;&gt; .Sun: .Yellow, .Moon: .White, .Stars: .Twinkle), .Green: 2, .Blue: 3, default: 4<br>let e = sel -&gt;&gt; cases: .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br></p><p>a) shows all possible routes handled.<br>b) shows a default form<br>c) shows form with case (follows existing switch rules so should be familiar)<br>d) shows nested form. <br>e) shows a slight modification to cases label to balance the default, I think balance can be helpful. User can choose concise vs balance. <br></p><p>to select from an integer or any other enumerable type:<br></p><p>let f = sel -&gt;&gt; “A&quot;, “B&quot;, “C&quot;, “D”. “E”, “F”, default: “G”<br>let g = sel -&gt;&gt; cases: “A&quot;, “B&quot;, “C&quot;, “D”. “E”, “F”, default: “G”<br></p><p>e) shows compact form, must have default because all integers would make for a long list.<br>f) shows a slight modification to cases label to balance the default, I think balance can be helpful. User can choose concise vs balance. <br></p><p>Advantages:<br>• This lets ? operator be used only for optionals.<br>• It pops out in code similar to the ternary operator. <br>• Slightly improved readability <br>• Unifies the switch and ternary concepts. <br>• No new keyword (well, cases: is a minor addition) <br>• new operator allows us to define how it should be formatted as there is no preconceived notion of how it should be formatted<br>• By definition it only deals in expressions.<br>• There is no way it can be confused with statements. <br>• the interesting syntax would keep people from doing very large expressions in it (Paraphrasing Chris) <br>• chains well for multiple conditions because of its associativity <br>• because it is a new concept there is potential to extend it in the future. <br></p><p>Disadvantages:<br>• May be a slight improvement in readability. Operators have to be looked up if you are not familiar with them. <br>• New concept that will have to be learned and not present in most C like languages so needs to be learned. <br></p><p>Other Half Baked thoughts:<br>• Are there other data types that would work with this? Maybe Objects, Dictionaries, Arrays, Ranges enumerations, or Structs (Unions?) <br>* What would container types look like? Could you call it multiple times on an array? Kind of like a map like behavior where each element goes into the selector operator. <br></p><p>- Paul<br></p><p><br>&gt; On Dec 16, 2015, at 8:04 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; Pick is interesting but how do you chain more that one pick/from together?<br>&gt; <br>&gt; I thought about just just dropping the if.<br>&gt; <br>&gt; let result = bool then 1 else bool then 2 else 3<br>&gt; <br>&gt; Or going back to the python style. <br>&gt; <br>&gt; let result = 1 where bool else where bool 2 else 3<br>&gt; <br>&gt; But you are right, can&#39;t beat just having two characters. Specially when the Elvis operator is in every other major c based language. <br>&gt; <br>&gt; Perhaps this is just a like ! as a negation character, once you learn the differences then u are set for other languages as well. <br>&gt; <br>&gt; It would be nice to be able to bind expressions so that the actual logic of the ?: is not lost. <br>&gt; <br>&gt; let result = if (long_boolexpresion,    <br>&gt;                    longerBoolexoression, <br>&gt;                    anotherboolExpression ) <br>&gt;                    $0 then &quot;a&quot; else $1 &amp;&amp; $2 then &quot;b&quot; else &quot;c&quot;<br>&gt; <br>&gt; <br>&gt; On Tuesday, December 15, 2015, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think pick…from may address many of the negatives listed by Chris. with the if..then..else approach.<br>&gt; <br>&gt;&gt; The closest proposal I’ve seen is the “if cond then value1 else value2” syntax, however that has serious (IMO) problems:<br>&gt; <br>&gt;&gt; - It is substantially more verbose than ?:, so much so that it obscures the logic that was trying to be captured.  Simple things like this become swallowed in syntax:<br>&gt;&gt;   let x = cond ? 4 : 8<br>&gt;&gt;   let x = if cond then 4 else 8<br>&gt; <br>&gt; this suggestion would still be longer, you can’t beat 2 chars. It is shorter than if..then..else though. Not sure there are any good options that can beat the conciseness of the ternary without replacing it with more syntax.<br>&gt; <br>&gt; let x = pick cond from 4, 8<br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Because it looks like an if statement, people will end up writing it like:<br>&gt;&gt; <br>&gt;&gt; let x = if cond then<br>&gt;&gt; 		some_long_expression<br>&gt;&gt; 	   else<br>&gt;&gt; 		some_other_long_expression<br>&gt; <br>&gt;&gt;  - it only accepts expressions, not statements.  The way it is flowed makes it look like a statement.<br>&gt;&gt;  - It is now force indenting a lot, which just looks weird and isn’t precedented in Swift.<br>&gt; <br>&gt; By having a new keyword, we can define the format and there is no prior connotation with it. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; When this happens, we now have new problems: <br>&gt;&gt;  - At a glance, it “looks” like an if statement, but it is semantically different.<br>&gt; <br>&gt; Since it is a new it will always look like something that handles expressions only. <br>&gt; <br>&gt; Also this pick…from statement can be extended to handle switch expressions as well. So it is consistent way to do different expressions based upon an input. <br>&gt; <br>&gt; Some downsides: <br>&gt; new keyword<br>&gt; no prior history with other programming languages.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 15, 2015, at 4:31 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Been thinking a bit:<br>&gt;&gt; <br>&gt;&gt; Perhaps a new expression is in order. “Pick” this has a form like this. Param is a selector  This only allows expressions <br>&gt;&gt; <br>&gt;&gt; It has two forms: <br>&gt;&gt; <br>&gt;&gt; To replace ternary: <br>&gt;&gt; <br>&gt;&gt; let x = pick val from &quot;abc&quot;, &quot;cdef&quot;<br>&gt;&gt; <br>&gt;&gt; To replace switch expressions. The cases follows existing rules for switch cases. <br>&gt;&gt; <br>&gt;&gt; let y = pick val from cases .Red: 1, .Green: 2, .Blue: 3<br>&gt;&gt; <br>&gt;&gt; This keeps the notion of expressions and statements quite separate. It avoids syntax confusion. It reads clear. It is fairy concise. It uses a straight forward pattern for both forms of expression. <br>&gt;&gt; <br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 15, 2015, at 2:06 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 bigtime for the assignment via Switch proposal<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think someone here made the argument, I can&#39;t remember who, that it would be confusing for beginners. I think exactly the opposite. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Once a new programmer has learned how to write a normal Switch statement, they&#39;ll be able to &quot;leverage&quot; the same concept and map values using the Switch assignment. Some might even try it on their on own, through experimentation, to see if it will work. It&#39;s such a pleasant experience when you try something in a language that seems consistent with what you already know, and discover &quot;cool, it works!&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At the moment, the alternatives are, what, using a dict to map values? trying to shoehorn a corrsponding set of values into an enum? using the existing switch statement (pretty verbose in Swift, due to &quot;let&quot; scope etc)? In my own Swift code, I have encountered situations, frequently, where I wished I had an equivalent to a ternary condition that handled more than two values. Chaining multiple ternary conditions together is unreadable. This proposed Switch assignment expression would take care of that. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Definitely has my vote!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/d8a52b80/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 2:56 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Selector Operator Proposal<br>&gt; <br>&gt; OK really trying to get this down to its essence, make something that is truly better and more powerful than ternary, and try to keep as much of the advantages of the ternary and hopefully slightly improve the readability. I am calling it the &quot;selector operator&quot;. This proposal, does not add a new keyword but adds a new operator. It unifies the concepts of ternary and gives us a new switch like behavior that ternary does not support. The concept is kind of like a train track, with multiple possible directions selectable by one input. <br>&gt; <br>&gt; I believe it also addresses the issues that Chris mentioned. <br>&gt; <br>&gt; to select from a boolean, a or b:<br>&gt; let a = sel -&gt;&gt; true, false<br></p><p>I’m not sure how I feel about this proposal in general, but if you changed the RHS to take a tuple, you could define it entirely in the library as a binary operator, instead of hacking it into the compiler, like ?: is.<br></p><p>	let a = sel -&gt;&gt; (true, false)<br></p><p>The primary disadvantage of this (which is probably a showstopper!) is that you lose short circuiting.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/8d01226f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>On Dec 16, 2015, at 2:56 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I believe it also addresses the issues that Chris mentioned. <br>&gt; <br>&gt; to select from a boolean, a or b:<br>&gt; let a = sel -&gt;&gt; true, false<br>&gt; <br>&gt; to select from an enum values as in a switch:<br>&gt; <br>&gt; let a = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3 <br>&gt; let b = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3, default: 4<br>&gt; let c = sel -&gt;&gt; case .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt; let d = sel -&gt;&gt; .Red: 1, (sel -&gt;&gt; .Sun: .Yellow, .Moon: .White, .Stars: .Twinkle), .Green: 2, .Blue: 3, default: 4<br>&gt; let e = sel -&gt;&gt; cases: .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt; <br>&gt; Disadvantages:<br>&gt; • May be a slight improvement in readability. Operators have to be looked up if you are not familiar with them. <br>&gt; • New concept that will have to be learned and not present in most C like languages so needs to be learned. <br></p><p>This specific proposal has another problem.  Since you’re using “,” you’ve introduced grammar problems.  For example, you wouldn’t be able to use this operator in a function argument list or array literal, because the , would be parsed as part of the argument list separator.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/b276ec95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 16, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi Chris,<br></p><p>So, just trying to understand if you think this is a good direction to continue with or you think it is inherently flawed. <br></p><p>Can you give me an example of a function argument list or array separator that we would have a problem? I will see if I can address it.<br></p><p>Thanks for the feedback!<br></p><p>- Paul<br></p><p><br>&gt; On Dec 16, 2015, at 3:14 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Dec 16, 2015, at 2:56 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I believe it also addresses the issues that Chris mentioned. <br>&gt;&gt; <br>&gt;&gt; to select from a boolean, a or b:<br>&gt;&gt; let a = sel -&gt;&gt; true, false<br>&gt;&gt; <br>&gt;&gt; to select from an enum values as in a switch:<br>&gt;&gt; <br>&gt;&gt; let a = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3 <br>&gt;&gt; let b = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3, default: 4<br>&gt;&gt; let c = sel -&gt;&gt; case .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt;&gt; let d = sel -&gt;&gt; .Red: 1, (sel -&gt;&gt; .Sun: .Yellow, .Moon: .White, .Stars: .Twinkle), .Green: 2, .Blue: 3, default: 4<br>&gt;&gt; let e = sel -&gt;&gt; cases: .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt;&gt; <br>&gt;&gt; Disadvantages:<br>&gt;&gt; • May be a slight improvement in readability. Operators have to be looked up if you are not familiar with them. <br>&gt;&gt; • New concept that will have to be learned and not present in most C like languages so needs to be learned. <br>&gt; <br>&gt; This specific proposal has another problem.  Since you’re using “,” you’ve introduced grammar problems.  For example, you wouldn’t be able to use this operator in a function argument list or array literal, because the , would be parsed as part of the argument list separator.<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/4f621f8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 16, 2015 at 06:00:00pm</p></header><div class="content"><p>So maybe just eliminating the commas is enough, if possible I would like to avoid using parenthesis. I am not sure the rules, could do something like this<br></p><p>if possible would prefer not adding parens if possible (this is cleaner than the original proposal):<br></p><p>let a = sel -&gt;&gt; .Red: 1 .Green: 2 .Blue: 3<br></p><p>if it is necessary then something like this:<br></p><p>let a = (sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3)<br></p><p>or <br></p><p>let a = (sel -&gt;&gt; .Red: 1 .Green: 2 .Blue: 3)<br></p><p>or <br></p><p>let a = sel -&gt;(.Red: 1, .Green: 2, .Blue: 3)<br></p><p>So essentially it is a multiplexer. <br></p><p>- Paul<br></p><p>&gt; On Dec 16, 2015, at 4:36 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; So, just trying to understand if you think this is a good direction to continue with or you think it is inherently flawed. <br>&gt; <br>&gt; Can you give me an example of a function argument list or array separator that we would have a problem? I will see if I can address it.<br>&gt; <br>&gt; Thanks for the feedback!<br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 3:14 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 16, 2015, at 2:56 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I believe it also addresses the issues that Chris mentioned. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; to select from a boolean, a or b:<br>&gt;&gt;&gt; let a = sel -&gt;&gt; true, false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; to select from an enum values as in a switch:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let a = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3 <br>&gt;&gt;&gt; let b = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3, default: 4<br>&gt;&gt;&gt; let c = sel -&gt;&gt; case .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt;&gt;&gt; let d = sel -&gt;&gt; .Red: 1, (sel -&gt;&gt; .Sun: .Yellow, .Moon: .White, .Stars: .Twinkle), .Green: 2, .Blue: 3, default: 4<br>&gt;&gt;&gt; let e = sel -&gt;&gt; cases: .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Disadvantages:<br>&gt;&gt;&gt; • May be a slight improvement in readability. Operators have to be looked up if you are not familiar with them. <br>&gt;&gt;&gt; • New concept that will have to be learned and not present in most C like languages so needs to be learned. <br>&gt;&gt; <br>&gt;&gt; This specific proposal has another problem.  Since you’re using “,” you’ve introduced grammar problems.  For example, you wouldn’t be able to use this operator in a function argument list or array literal, because the , would be parsed as part of the argument list separator.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/971b4143/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 16, 2015 at 07:00:00pm</p></header><div class="content"><p>I think I still prefer the original proposal to add a second syntax for<br>&quot;switch&quot; because it requires no learning curve at all. Even if I spent a<br>year without coding a single line of Swift, I&#39;m sure when I came back to it<br>I&#39;d remember the syntax for a &quot;switch&quot; assignment.<br></p><p>Having said that, I&#39;d prefer sticking with a &quot;?&quot; since it&#39;s reminiscent of<br>a ternary, and regardless of parsing issues, it&#39;s easier to read if the<br>options are a tuple. So my second choice would be this variant of Paul&#39;s<br>suggestion:<br></p><p>    let a = sel ? (.Red: 1, .Green: 2, .Blue: 3)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/4d92e00f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 16, 2015 at 07:00:00pm</p></header><div class="content"><p>One more thought. This syntax would also placate ternary haters. I think<br>the traditional complaint about ternary expressions is that people can&#39;t<br>remember the order of the true and false values. This would not be an issue<br>with:<br></p><p> let i = boo ? ( true: 123, false: 456 )<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/4c61b5aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 7:36 PM, Charles Constant &lt;charles at charlesism.com&gt; wrote:<br>&gt; <br>&gt; One more thought. This syntax would also placate ternary haters. I think the traditional complaint about ternary expressions is that people can&#39;t remember the order of the true and false values. This would not be an issue with:<br>&gt; <br>&gt;  let i = boo ? ( true: 123, false: 456 )<br></p><p>I would characterize this as “different” than ?:, but not better.  Given that it isn’t “better”, I’d argue that following C (and tons of other languages) would make sense here.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 16, 2015 at 10:00:00pm</p></header><div class="content"><p>Thank you Chris for all the feedback.<br></p><p>Should there be a spot on the website or github with frequent<br>proposed changes that are not feasible or that not better solution has been<br>found (such as the ?: operator )?<br></p><p>I am thinking this would cut down on people asking to turn operators into<br>keywords (or similar ) but still encourage better solutions to be proposed.<br></p><p><br></p><p><br>On Wednesday, December 16, 2015, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 16, 2015, at 7:36 PM, Charles Constant &lt;charles at charlesism.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; One more thought. This syntax would also placate ternary haters. I think<br>&gt; the traditional complaint about ternary expressions is that people can&#39;t<br>&gt; remember the order of the true and false values. This would not be an issue<br>&gt; with:<br>&gt; &gt;<br>&gt; &gt;  let i = boo ? ( true: 123, false: 456 )<br>&gt;<br>&gt; I would characterize this as “different” than ?:, but not better.  Given<br>&gt; that it isn’t “better”, I’d argue that following C (and tons of other<br>&gt; languages) would make sense here.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/6531513c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 16, 2015 at 10:00:00pm</p></header><div class="content"><p>+Doug for his thoughts on the web page:<br></p><p>&gt; On Dec 16, 2015, at 10:01 PM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; Thank you Chris for all the feedback. <br></p><p>To be clear, I’m not completely opposed to a change here, but it has been discussed extensively before, and didn’t turn up any good ideas either.  That doesn’t mean that a good idea isn’t out there - it might be a very hard problem (of course, it really might be that ?: cannot be beat just because it is established, and anything as good as it but different would be considered “weird and not better”).<br></p><p><br>&gt; Should there be a spot on the website or github with frequent proposed changes that are not feasible or that not better solution has been found (such as the ?: operator )?<br></p><p>&gt; I am thinking this would cut down on people asking to turn operators into keywords (or similar ) but still encourage better solutions to be proposed. <br></p><p><br>I think it is a really interesting idea to have a list of “commonly proposed changes” on the Swift evolution web page, with a link to the discussion archives for it.  While it shouldn’t be verboten to explore an area in the future, anyone doing so can reasonably be expected to read the previous discussions and only reopen it if there is new information or a new idea.<br></p><p>What do you think Doug?<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wednesday, December 16, 2015, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Dec 16, 2015, at 7:36 PM, Charles Constant &lt;charles at charlesism.com &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; One more thought. This syntax would also placate ternary haters. I think the traditional complaint about ternary expressions is that people can&#39;t remember the order of the true and false values. This would not be an issue with:<br>&gt; &gt;<br>&gt; &gt;  let i = boo ? ( true: 123, false: 456 )<br>&gt; <br>&gt; I would characterize this as “different” than ?:, but not better.  Given that it isn’t “better”, I’d argue that following C (and tons of other languages) would make sense here.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/22249707/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 10:44 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it is a really interesting idea to have a list of “commonly proposed changes” on the Swift evolution web page, with a link to the discussion archives for it.  While it shouldn’t be verboten to explore an area in the future, anyone doing so can reasonably be expected to read the previous discussions and only reopen it if there is new information or a new idea.<br>&gt; <br>&gt; What do you think Doug?<br>&gt; <br></p><p>I support that idea too. I would love to read what had been discussed before. <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/fd74ae66/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 17, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 10:44 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; +Doug for his thoughts on the web page:<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:01 PM, J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt; Should there be a spot on the website or github with frequent proposed changes that are not feasible or that not better solution has been found (such as the ?: operator )?<br>&gt; <br>&gt;&gt; I am thinking this would cut down on people asking to turn operators into keywords (or similar ) but still encourage better solutions to be proposed. <br>&gt; <br>&gt; <br>&gt; I think it is a really interesting idea to have a list of “commonly proposed changes” on the Swift evolution web page, with a link to the discussion archives for it.  While it shouldn’t be verboten to explore an area in the future, anyone doing so can reasonably be expected to read the previous discussions and only reopen it if there is new information or a new idea.<br>&gt; <br>&gt; What do you think Doug?<br></p><p>I think it’s a good idea, which we can incorporate in the swift-evolution repository. My main concern is that I (personally), and the core team in general, probably won’t be able to proactively maintain such a list. We’d happily accept pull requests to help keep the list up-to-date and (as it grows longer) give it some organization.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/02a11959/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 17, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 9:38 AM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 10:44 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +Doug for his thoughts on the web page:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 10:01 PM, J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Should there be a spot on the website or github with frequent proposed changes that are not feasible or that not better solution has been found (such as the ?: operator )?<br>&gt;&gt; <br>&gt;&gt;&gt; I am thinking this would cut down on people asking to turn operators into keywords (or similar ) but still encourage better solutions to be proposed. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think it is a really interesting idea to have a list of “commonly proposed changes” on the Swift evolution web page, with a link to the discussion archives for it.  While it shouldn’t be verboten to explore an area in the future, anyone doing so can reasonably be expected to read the previous discussions and only reopen it if there is new information or a new idea.<br>&gt;&gt; <br>&gt;&gt; What do you think Doug?<br>&gt; <br>&gt; I think it’s a good idea, which we can incorporate in the swift-evolution repository. My main concern is that I (personally), and the core team in general, probably won’t be able to proactively maintain such a list. We’d happily accept pull requests to help keep the list up-to-date and (as it grows longer) give it some organization.<br></p><p>Ok, please carve out a logical place on the swift-evolution page to put these things (probably near the end, or on a separate page?) and we can fill it in over time.  Thanks Doug!<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/b0d28801/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>All,<br></p><p>I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br></p><p>I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those. <br></p><p>https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br></p><p>This is a first draft, thanks in advance for feedback!<br></p><p>- Paul<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>+1<br></p><p>I&#39;d be very happy with your new proposal too. I still prefer sticking the<br>value we&#39;re using as a key outside of the parens, but it&#39;s a minor quibble.<br>Also I can&#39;t figure out if parens or curly braces are more appropriate.<br>Does it make more sense for the expression to look like a tuple or a<br>closure? I&#39;m not sure.<br></p><p>Anyhow, I&#39;m good with your new proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d88abd79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 18, 2015 at 04:00:00pm</p></header><div class="content"><p>Thanks for your support! <br></p><p>I think parenthesis are preferred because braces are for bracketing lists of statements. Statements may or may not return values. <br></p><p>Having the conditional on the inside of the parens helps to show the begging of the demux operator rather than a floating conditional which is a common complaint with the ternary operator. <br></p><p>&gt; On Dec 18, 2015, at 3:46 PM, Charles Constant &lt;charles at charlesism.com&gt; wrote:<br>&gt; <br>&gt; +1 <br>&gt; <br>&gt; I&#39;d be very happy with your new proposal too. I still prefer sticking the value we&#39;re using as a key outside of the parens, but it&#39;s a minor quibble. Also I can&#39;t figure out if parens or curly braces are more appropriate. Does it make more sense for the expression to look like a tuple or a closure? I&#39;m not sure.<br>&gt; <br>&gt; Anyhow, I&#39;m good with your new proposal.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6c31a6fde92be75db0c3434a99b5d767?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Conrad Kutsch</string> &lt;kutschenator at googlemail.com&gt;<p>December 19, 2015 at 11:00:00am</p></header><div class="content"><p>Hey, I really like the new proposal, gets a +1from me! Especially the case part makes it good to use. I would just leave out the Integer part because it can be confusing and misleading. Do you start counting at 1? Or at 0? MinInt? It’s just super error-prone if you don’t write the number before it.<br></p><p>?(charNum : 0: &quot;A&quot;, 1: &quot;B”, ...<br>might be OK as it would get rid of the many case statements but then again, is this only working for Int or also for float?<br></p><p><br></p><p>&gt; On 19 Dec 2015, at 01:56, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for your support! <br>&gt; <br>&gt; I think parenthesis are preferred because braces are for bracketing lists of statements. Statements may or may not return values. <br>&gt; <br>&gt; Having the conditional on the inside of the parens helps to show the begging of the demux operator rather than a floating conditional which is a common complaint with the ternary operator. <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 3:46 PM, Charles Constant &lt;charles at charlesism.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 <br>&gt;&gt; <br>&gt;&gt; I&#39;d be very happy with your new proposal too. I still prefer sticking the value we&#39;re using as a key outside of the parens, but it&#39;s a minor quibble. Also I can&#39;t figure out if parens or curly braces are more appropriate. Does it make more sense for the expression to look like a tuple or a closure? I&#39;m not sure.<br>&gt;&gt; <br>&gt;&gt; Anyhow, I&#39;m good with your new proposal.<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/e9aab7e1/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 19, 2015 at 08:00:00am</p></header><div class="content"><p>Thanks, great feedback!<br></p><p>Good point about the floats, that is definitely a hole in my proposal! I will update it with that.<br></p><p>To the list form being confusing, I would definitely like to know if others agree that having the two forms is confusing. The list form would be zero based. I would definitely drop it from the proposal if it would lead to it being declined but I think it is nice because it is concise and serves a valuable purpose of choosing among many choices without having to write out each case. <br></p><p>The alternate form,  in alternatives considered, a variant of Vestor Godfied’s suggestion, is:<br></p><p>if (x==y : true, false)<br>switch (control : .North:”N”, .South:”S”, .East:”E”, .West:”W”, default:” “) <br>select (control : “A”, “B”, “C”, default:”D”) <br></p><p>may be preferred if others agree that it is confusing to have the list form and the case form together. Since Swift leaves parenthesis available around if and switch statements, the parenthesis colon sequence could be used to distinguish the statement and expression form. One thing I really don’t like about it is, that Swift finally solved the problem people running the space up against the  parenthesis, something that had bothered me for some time, this would make the practice ingrained if(control : true, false) would become the norm. I suppose in this case it would make sense though. <br></p><p>Or if making it even more explicit we could combine the forms. <br></p><p>if? (x==y : true, false)<br>switch? (control : .North:”N”, .South:”S”, .East:”E”, .West:”W”, default:” “) <br>select? (control : “A”, “B”, “C”, default:”D”) <br></p><p>I expect that that may be more controversial though. As it then steps into the optionals area. <br></p><p>With both these options we lose some conciseness. So I still prefer the form in the proposal. <br></p><p>- Paul<br></p><p>&gt; On Dec 19, 2015, at 2:43 AM, Conrad Kutsch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey, I really like the new proposal, gets a +1from me! Especially the case part makes it good to use. I would just leave out the Integer part because it can be confusing and misleading. Do you start counting at 1? Or at 0? MinInt? It’s just super error-prone if you don’t write the number before it.<br>&gt; <br>&gt; ?(charNum : 0: &quot;A&quot;, 1: &quot;B”, ...<br>&gt; might be OK as it would get rid of the many case statements but then again, is this only working for Int or also for float?<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 19 Dec 2015, at 01:56, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for your support! <br>&gt;&gt; <br>&gt;&gt; I think parenthesis are preferred because braces are for bracketing lists of statements. Statements may or may not return values. <br>&gt;&gt; <br>&gt;&gt; Having the conditional on the inside of the parens helps to show the begging of the demux operator rather than a floating conditional which is a common complaint with the ternary operator. <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 3:46 PM, Charles Constant &lt;charles at charlesism.com &lt;mailto:charles at charlesism.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d be very happy with your new proposal too. I still prefer sticking the value we&#39;re using as a key outside of the parens, but it&#39;s a minor quibble. Also I can&#39;t figure out if parens or curly braces are more appropriate. Does it make more sense for the expression to look like a tuple or a closure? I&#39;m not sure.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyhow, I&#39;m good with your new proposal.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/93dcdc50/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>December 20, 2015 at 11:00:00am</p></header><div class="content"><p>Paul, does the proposed operator short-circuit like ternary does (i.e. is only the active case evaluated)?<br></p><p>– Steve<br></p><p>&gt; On Dec 19, 2015, at 11:42 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks, great feedback!<br>&gt; <br>&gt; Good point about the floats, that is definitely a hole in my proposal! I will update it with that.<br>&gt; <br>&gt; To the list form being confusing, I would definitely like to know if others agree that having the two forms is confusing. The list form would be zero based. I would definitely drop it from the proposal if it would lead to it being declined but I think it is nice because it is concise and serves a valuable purpose of choosing among many choices without having to write out each case. <br>&gt; <br>&gt; The alternate form,  in alternatives considered, a variant of Vestor Godfied’s suggestion, is:<br>&gt; <br>&gt; if (x==y : true, false)<br>&gt; switch (control : .North:”N”, .South:”S”, .East:”E”, .West:”W”, default:” “) <br>&gt; select (control : “A”, “B”, “C”, default:”D”) <br>&gt; <br>&gt; may be preferred if others agree that it is confusing to have the list form and the case form together. Since Swift leaves parenthesis available around if and switch statements, the parenthesis colon sequence could be used to distinguish the statement and expression form. One thing I really don’t like about it is, that Swift finally solved the problem people running the space up against the  parenthesis, something that had bothered me for some time, this would make the practice ingrained if(control : true, false) would become the norm. I suppose in this case it would make sense though. <br>&gt; <br>&gt; Or if making it even more explicit we could combine the forms. <br>&gt; <br>&gt; if? (x==y : true, false)<br>&gt; switch? (control : .North:”N”, .South:”S”, .East:”E”, .West:”W”, default:” “) <br>&gt; select? (control : “A”, “B”, “C”, default:”D”) <br>&gt; <br>&gt; I expect that that may be more controversial though. As it then steps into the optionals area. <br>&gt; <br>&gt; With both these options we lose some conciseness. So I still prefer the form in the proposal. <br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 2:43 AM, Conrad Kutsch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey, I really like the new proposal, gets a +1from me! Especially the case part makes it good to use. I would just leave out the Integer part because it can be confusing and misleading. Do you start counting at 1? Or at 0? MinInt? It’s just super error-prone if you don’t write the number before it.<br>&gt;&gt; <br>&gt;&gt; ?(charNum : 0: &quot;A&quot;, 1: &quot;B”, ...<br>&gt;&gt; might be OK as it would get rid of the many case statements but then again, is this only working for Int or also for float?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 19 Dec 2015, at 01:56, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for your support! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think parenthesis are preferred because braces are for bracketing lists of statements. Statements may or may not return values. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having the conditional on the inside of the parens helps to show the begging of the demux operator rather than a floating conditional which is a common complaint with the ternary operator. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:46 PM, Charles Constant &lt;charles at charlesism.com &lt;mailto:charles at charlesism.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d be very happy with your new proposal too. I still prefer sticking the value we&#39;re using as a key outside of the parens, but it&#39;s a minor quibble. Also I can&#39;t figure out if parens or curly braces are more appropriate. Does it make more sense for the expression to look like a tuple or a closure? I&#39;m not sure.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Anyhow, I&#39;m good with your new proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/d9d16485/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 20, 2015 at 09:00:00am</p></header><div class="content"><p>Yes definitely. This should be in the proposal. Thanks.<br></p><p>&gt; On Dec 20, 2015, at 8:53 AM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt; <br>&gt; Paul, does the proposed operator short-circuit like ternary does (i.e. is only the active case evaluated)?<br>&gt; <br>&gt; – Steve<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 11:42 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks, great feedback!<br>&gt;&gt; <br>&gt;&gt; Good point about the floats, that is definitely a hole in my proposal! I will update it with that.<br>&gt;&gt; <br>&gt;&gt; To the list form being confusing, I would definitely like to know if others agree that having the two forms is confusing. The list form would be zero based. I would definitely drop it from the proposal if it would lead to it being declined but I think it is nice because it is concise and serves a valuable purpose of choosing among many choices without having to write out each case. <br>&gt;&gt; <br>&gt;&gt; The alternate form,  in alternatives considered, a variant of Vestor Godfied’s suggestion, is:<br>&gt;&gt; <br>&gt;&gt; if (x==y : true, false)<br>&gt;&gt; switch (control : .North:”N”, .South:”S”, .East:”E”, .West:”W”, default:” “) <br>&gt;&gt; select (control : “A”, “B”, “C”, default:”D”) <br>&gt;&gt; <br>&gt;&gt; may be preferred if others agree that it is confusing to have the list form and the case form together. Since Swift leaves parenthesis available around if and switch statements, the parenthesis colon sequence could be used to distinguish the statement and expression form. One thing I really don’t like about it is, that Swift finally solved the problem people running the space up against the  parenthesis, something that had bothered me for some time, this would make the practice ingrained if(control : true, false) would become the norm. I suppose in this case it would make sense though. <br>&gt;&gt; <br>&gt;&gt; Or if making it even more explicit we could combine the forms. <br>&gt;&gt; <br>&gt;&gt; if? (x==y : true, false)<br>&gt;&gt; switch? (control : .North:”N”, .South:”S”, .East:”E”, .West:”W”, default:” “) <br>&gt;&gt; select? (control : “A”, “B”, “C”, default:”D”) <br>&gt;&gt; <br>&gt;&gt; I expect that that may be more controversial though. As it then steps into the optionals area. <br>&gt;&gt; <br>&gt;&gt; With both these options we lose some conciseness. So I still prefer the form in the proposal. <br>&gt;&gt; <br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 2:43 AM, Conrad Kutsch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey, I really like the new proposal, gets a +1from me! Especially the case part makes it good to use. I would just leave out the Integer part because it can be confusing and misleading. Do you start counting at 1? Or at 0? MinInt? It’s just super error-prone if you don’t write the number before it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ?(charNum : 0: &quot;A&quot;, 1: &quot;B”, ...<br>&gt;&gt;&gt; might be OK as it would get rid of the many case statements but then again, is this only working for Int or also for float?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 19 Dec 2015, at 01:56, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for your support! <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think parenthesis are preferred because braces are for bracketing lists of statements. Statements may or may not return values. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having the conditional on the inside of the parens helps to show the begging of the demux operator rather than a floating conditional which is a common complaint with the ternary operator. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:46 PM, Charles Constant &lt;charles at charlesism.com &lt;mailto:charles at charlesism.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1 <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d be very happy with your new proposal too. I still prefer sticking the value we&#39;re using as a key outside of the parens, but it&#39;s a minor quibble. Also I can&#39;t figure out if parens or curly braces are more appropriate. Does it make more sense for the expression to look like a tuple or a closure? I&#39;m not sure.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Anyhow, I&#39;m good with your new proposal.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/73ff0c4f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any of the complaints about the existing ternary operator:<br></p><p>- It&#39;s not obvious what it does when you first learn it.<br>- The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br></p><p>It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two different colons, but that&#39;s &quot;just&quot; syntax.<br></p><p>Jordan<br></p><p>&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; All,<br>&gt; <br>&gt; I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br>&gt; <br>&gt; I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those. <br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br>&gt; <br>&gt; This is a first draft, thanks in advance for feedback!<br>&gt; <br>&gt; - Paul<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any of the complaints about the existing ternary operator:<br>&gt; <br>&gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt; <br>&gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two different colons, but that&#39;s &quot;just&quot; syntax.<br></p><p>+1 to all that<br></p><p>&gt; Jordan<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; All,<br>&gt;&gt; <br>&gt;&gt; I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br>&gt;&gt; <br>&gt;&gt; I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those. <br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br>&gt;&gt; <br>&gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt;&gt; <br>&gt;&gt; - Paul<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 20, 2015 at 04:00:00am</p></header><div class="content"><p>+1 to Jordan&#39;s points as well.<br></p><p>Generally speaking, there is clearly a wide variety of things that cause<br>people to be interested in this particular proposal and I don&#39;t think we<br>can reconcile all of them. For example, I think that &quot;collapsing an if<br>statement into one line&quot; isn&#39;t a good enough reason to introduce the<br>clutter and potential for abuse of the original ternary syntax into a<br>codebase, so I generally float the idea to ban it from projects I&#39;m<br>involved in as soon as I see it pop up in one. At the same time, there seem<br>to be people who are enamored with the concept, and maybe instead they talk<br>in this thread because they want a way to condense a switch statement into<br>one line. And still others think that there is no rush to think about<br>getting rid of ternary, unless we come up with something equally concise or<br>with significant advantages to warrant removing it (all valid points).<br></p><p>I&#39;m not *against* Paul&#39;s idea, but if it matters at all (i.e. if you are<br>worried other people will think like me), if this syntax is released, I<br>will most likely float the idea of opting out of it immediately to my<br>project collaborators.<br></p><p>While interesting for quick, proof of concept coding sessions, it already<br>has some of the readability and abusability disadvantages already present<br>in ternary, and it&#39;s still just in the proposal stage.<br></p><p>I only hope that this doesn&#39;t preclude progress on turning fully-qualified<br>(and indented) statements into expressions.<br></p><p>On Sat, Dec 19, 2015 at 10:57 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any<br>&gt; of the complaints about the existing ternary operator:<br>&gt; &gt;<br>&gt; &gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt; &gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt; &gt;<br>&gt; &gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two<br>&gt; different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt;<br>&gt; +1 to all that<br>&gt;<br>&gt; &gt; Jordan<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; All,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think, I finally might have the answer to improving ternary, with<br>&gt; such a bold statement come some pretty high expectations but I think, I<br>&gt; might actually have done it this time :-)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am calling it the Demux Expression, it builds on the benefits of<br>&gt; ternary and switch while improving on those.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; - Paul<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/a2001a74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 19, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 8:37 PM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 to Jordan&#39;s points as well. <br>&gt; <br>&gt; Generally speaking, there is clearly a wide variety of things that cause people to be interested in this particular proposal and I don&#39;t think we can reconcile all of them. For example, I think that &quot;collapsing an if statement into one line&quot; isn&#39;t a good enough reason to introduce the clutter and potential for abuse of the original ternary syntax into a codebase, so I generally float the idea to ban it from projects I&#39;m involved in as soon as I see it pop up in one. At the same time, there seem to be people who are enamored with the concept, and maybe instead they talk in this thread because they want a way to condense a switch statement into one line. And still others think that there is no rush to think about getting rid of ternary, unless we come up with something equally concise or with significant advantages to warrant removing it (all valid points).<br>&gt; <br>&gt; I&#39;m not against Paul&#39;s idea, but if it matters at all (i.e. if you are worried other people will think like me), if this syntax is released, I will most likely float the idea of opting out of it immediately to my project collaborators. <br>&gt; <br>&gt; While interesting for quick, proof of concept coding sessions, it already has some of the readability and abusability disadvantages already present in ternary, and it&#39;s still just in the proposal stage. <br>&gt; <br>&gt; I only hope that this doesn&#39;t preclude progress on turning fully-qualified (and indented) statements into expressions.<br></p><p>Good feedback!<br></p><p>Personally, I kind of hope that that is not the direction of Swift. I think there is quite a bit of value in keeping expressions and statements as separate concepts. If you need to do a bunch of things to get the result of an expression then use the statement construct or move it into a method. <br></p><p>Having statements that act as expressions encourages code that has side effects, which goes against one of the core concepts of functional programming. If I am working on a team, and someone wants to add some new feature and they see a big indented “if” with braces, they will just stick it in there and ignore that it is a functional approach. That new statement they add may add a bunch of side effects and add bugs to the code. If it is an expression that temptation will be less likely. They will see that this code is intended to work as an expression and won’t be able to just stick another statement with a bunch of side effects into it. <br></p><p>My proposal is about making expressions into first class citizens in terms of control flow. Its main purpose is definitely not about doing things on one line, that is just a side benefit if it works for your particular situation. This proposal supports and encourages multiline formatting and I think actually makes things cleaner and clearer than the statement forms. <br></p><p>But this feedback and Jordan’s is making me think that the Hybrid approach in Alternatives Considered may be more appealing to everyone. I was thinking conciseness might be preferable given some of the feedback I got from Chris and others, but after reading some other threads, clarity wins out over conciseness. This alternative may win for clarity. So I might go back and rethink that, but before I do that, I hope that more people could tell me if they like it better or do they like the ?( syntax better.<br></p><p>- Paul<br></p><p><br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 10:57 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any of the complaints about the existing ternary operator:<br>&gt; &gt;<br>&gt; &gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt; &gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt; &gt;<br>&gt; &gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt; <br>&gt; +1 to all that<br>&gt; <br>&gt; &gt; Jordan<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; All,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md &lt;https://github.com/possen/swift-evolution/blob/master/proposals/0024.md&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; - Paul<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/3cdc5b8e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 19, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; keeping expressions and statements as separate concepts<br></p><p>I seriously could not care less about that.<br></p><p>Wait wait, I&#39;m exaggerating! I wouldn&#39;t want Swift to become a language<br>like Javascript where you forget to type a single character, and discover<br>your program runs without complaint (assigning some bizarre boolean value<br>as a result).<br></p><p>But if we&#39;re talking about the &#39;Switch&#39; statement, as originally proposed,<br>it takes a lot more characters, and luck, to get your app to compile and<br>run. For me, I&#39;d way rather have the convenience. As far as I&#39;m concerned,<br>unless I&#39;m choosing a variable name, the more I have to type, the more<br>likely I&#39;m going to make a mistake.<br></p><p>This is why I think the ternary, for example, gets a bad rap (a bad rap *at<br>the moment* anyway. I can&#39;t keep track, are &quot;goto&quot; and OOP bad this year?).<br>The clarity you gain with a ternary is the fact that &quot;this statement exists<br>to assign a value to Foo.&quot; You break that into several lines, and that<br>clarity can evaporate into the ether.<br></p><p>So the reason I like your proposal, is that I want a way to preserve that<br>clarity of &quot;this line exists to assign a value to Foo&quot; when I&#39;m mapping<br>something. The existing options, i.e.: the alternatives about I complained<br>earlier in this thread, leave me with extra code whose purpose is solely to<br>support that assignment to Foo. So, let&#39;s say I do it by extending an enum<br>with an init that has a corresponding set of values... the purpose of that<br>extension is no longer as clear (e.g.: &quot;this init exists to support a line,<br>somewhere else in this file, that assigns a value to Foo&quot;). If I use a<br>Switch statement, as it currently exists, it&#39;s a bunch of lines - and don&#39;t<br>forget that &quot;let Foo&quot; needs to be declared *before* the Switch statement<br>because of scope... it&#39;s so much more complicated than your proposal.<br></p><p>I don&#39;t know if I added anything helpful here other than complaining :)<br>Needless to say, I still support your proposal<br></p><p><br></p><p><br>On Sat, Dec 19, 2015 at 9:57 PM, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 19, 2015, at 8:37 PM, Dennis Lysenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1 to Jordan&#39;s points as well.<br>&gt;<br>&gt; Generally speaking, there is clearly a wide variety of things that cause<br>&gt; people to be interested in this particular proposal and I don&#39;t think we<br>&gt; can reconcile all of them. For example, I think that &quot;collapsing an if<br>&gt; statement into one line&quot; isn&#39;t a good enough reason to introduce the<br>&gt; clutter and potential for abuse of the original ternary syntax into a<br>&gt; codebase, so I generally float the idea to ban it from projects I&#39;m<br>&gt; involved in as soon as I see it pop up in one. At the same time, there seem<br>&gt; to be people who are enamored with the concept, and maybe instead they talk<br>&gt; in this thread because they want a way to condense a switch statement into<br>&gt; one line. And still others think that there is no rush to think about<br>&gt; getting rid of ternary, unless we come up with something equally concise or<br>&gt; with significant advantages to warrant removing it (all valid points).<br>&gt;<br>&gt; I&#39;m not *against* Paul&#39;s idea, but if it matters at all (i.e. if you are<br>&gt; worried other people will think like me), if this syntax is released, I<br>&gt; will most likely float the idea of opting out of it immediately to my<br>&gt; project collaborators.<br>&gt;<br>&gt; While interesting for quick, proof of concept coding sessions, it already<br>&gt; has some of the readability and abusability disadvantages already present<br>&gt; in ternary, and it&#39;s still just in the proposal stage.<br>&gt;<br>&gt; I only hope that this doesn&#39;t preclude progress on turning fully-qualified<br>&gt; (and indented) statements into expressions.<br>&gt;<br>&gt;<br>&gt; Good feedback!<br>&gt;<br>&gt; Personally, I kind of hope that that is not the direction of Swift. I<br>&gt; think there is quite a bit of value in keeping expressions and statements<br>&gt; as separate concepts. If you need to do a bunch of things to get the result<br>&gt; of an expression then use the statement construct or move it into a method.<br>&gt;<br>&gt; Having statements that act as expressions encourages code that has side<br>&gt; effects, which goes against one of the core concepts of functional<br>&gt; programming. If I am working on a team, and someone wants to add some new<br>&gt; feature and they see a big indented “if” with braces, they will just stick<br>&gt; it in there and ignore that it is a functional approach. That new statement<br>&gt; they add may add a bunch of side effects and add bugs to the code. If it is<br>&gt; an expression that temptation will be less likely. They will see that this<br>&gt; code is intended to work as an expression and won’t be able to just stick<br>&gt; another statement with a bunch of side effects into it.<br>&gt;<br>&gt; My proposal is about making expressions into first class citizens in terms<br>&gt; of control flow. Its main purpose is definitely not about doing things on<br>&gt; one line, that is just a side benefit if it works for your particular<br>&gt; situation. This proposal supports and encourages multiline formatting and I<br>&gt; think actually makes things cleaner and clearer than the statement forms.<br>&gt;<br>&gt; But this feedback and Jordan’s is making me think that the Hybrid approach<br>&gt; in Alternatives Considered may be more appealing to everyone. I was<br>&gt; thinking conciseness might be preferable given some of the feedback I got<br>&gt; from Chris and others, but after reading some other threads, clarity wins<br>&gt; out over conciseness. This alternative may win for clarity. So I might go<br>&gt; back and rethink that, but before I do that, I hope that more people could<br>&gt; tell me if they like it better or do they like the ?( syntax better.<br>&gt;<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Dec 19, 2015 at 10:57 PM Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any<br>&gt;&gt; of the complaints about the existing ternary operator:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt;&gt; &gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the<br>&gt;&gt; two different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt;&gt;<br>&gt;&gt; +1 to all that<br>&gt;&gt;<br>&gt;&gt; &gt; Jordan<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; All,<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I think, I finally might have the answer to improving ternary, with<br>&gt;&gt; such a bold statement come some pretty high expectations but I think, I<br>&gt;&gt; might actually have done it this time :-)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I am calling it the Demux Expression, it builds on the benefits of<br>&gt;&gt; ternary and switch while improving on those.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; - Paul<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/7b658300/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 20, 2015 at 11:00:00pm</p></header><div class="content"><p>The complaint that you have about Javascript is more a function of it not being a strongly typed language.  If you were to write a function with the type of return specified and the code inside the function (because of a single character) end up changing type for the return value or a future expression that was not expecting boolean…. then it would not compile.<br></p><p>&gt; On 2015-12-20, at 13:35:42, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; keeping expressions and statements as separate concepts<br>&gt; <br>&gt; I seriously could not care less about that.<br>&gt; <br>&gt; Wait wait, I&#39;m exaggerating! I wouldn&#39;t want Swift to become a language like Javascript where you forget to type a single character, and discover your program runs without complaint (assigning some bizarre boolean value as a result).<br>&gt; <br>&gt; But if we&#39;re talking about the &#39;Switch&#39; statement, as originally proposed, it takes a lot more characters, and luck, to get your app to compile and run. For me, I&#39;d way rather have the convenience. As far as I&#39;m concerned, unless I&#39;m choosing a variable name, the more I have to type, the more likely I&#39;m going to make a mistake.<br>&gt; <br>&gt; This is why I think the ternary, for example, gets a bad rap (a bad rap *at the moment* anyway. I can&#39;t keep track, are &quot;goto&quot; and OOP bad this year?). The clarity you gain with a ternary is the fact that &quot;this statement exists to assign a value to Foo.&quot; You break that into several lines, and that clarity can evaporate into the ether.<br>&gt; <br>&gt; So the reason I like your proposal, is that I want a way to preserve that clarity of &quot;this line exists to assign a value to Foo&quot; when I&#39;m mapping something. The existing options, i.e.: the alternatives about I complained earlier in this thread, leave me with extra code whose purpose is solely to support that assignment to Foo. So, let&#39;s say I do it by extending an enum with an init that has a corresponding set of values... the purpose of that extension is no longer as clear (e.g.: &quot;this init exists to support a line, somewhere else in this file, that assigns a value to Foo&quot;). If I use a Switch statement, as it currently exists, it&#39;s a bunch of lines - and don&#39;t forget that &quot;let Foo&quot; needs to be declared *before* the Switch statement because of scope... it&#39;s so much more complicated than your proposal.<br>&gt; <br>&gt; I don&#39;t know if I added anything helpful here other than complaining :) Needless to say, I still support your proposal <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 9:57 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 8:37 PM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to Jordan&#39;s points as well. <br>&gt;&gt; <br>&gt;&gt; Generally speaking, there is clearly a wide variety of things that cause people to be interested in this particular proposal and I don&#39;t think we can reconcile all of them. For example, I think that &quot;collapsing an if statement into one line&quot; isn&#39;t a good enough reason to introduce the clutter and potential for abuse of the original ternary syntax into a codebase, so I generally float the idea to ban it from projects I&#39;m involved in as soon as I see it pop up in one. At the same time, there seem to be people who are enamored with the concept, and maybe instead they talk in this thread because they want a way to condense a switch statement into one line. And still others think that there is no rush to think about getting rid of ternary, unless we come up with something equally concise or with significant advantages to warrant removing it (all valid points).<br>&gt;&gt; <br>&gt;&gt; I&#39;m not against Paul&#39;s idea, but if it matters at all (i.e. if you are worried other people will think like me), if this syntax is released, I will most likely float the idea of opting out of it immediately to my project collaborators. <br>&gt;&gt; <br>&gt;&gt; While interesting for quick, proof of concept coding sessions, it already has some of the readability and abusability disadvantages already present in ternary, and it&#39;s still just in the proposal stage. <br>&gt;&gt; <br>&gt;&gt; I only hope that this doesn&#39;t preclude progress on turning fully-qualified (and indented) statements into expressions.<br>&gt; <br>&gt; Good feedback!<br>&gt; <br>&gt; Personally, I kind of hope that that is not the direction of Swift. I think there is quite a bit of value in keeping expressions and statements as separate concepts. If you need to do a bunch of things to get the result of an expression then use the statement construct or move it into a method. <br>&gt; <br>&gt; Having statements that act as expressions encourages code that has side effects, which goes against one of the core concepts of functional programming. If I am working on a team, and someone wants to add some new feature and they see a big indented “if” with braces, they will just stick it in there and ignore that it is a functional approach. That new statement they add may add a bunch of side effects and add bugs to the code. If it is an expression that temptation will be less likely. They will see that this code is intended to work as an expression and won’t be able to just stick another statement with a bunch of side effects into it. <br>&gt; <br>&gt; My proposal is about making expressions into first class citizens in terms of control flow. Its main purpose is definitely not about doing things on one line, that is just a side benefit if it works for your particular situation. This proposal supports and encourages multiline formatting and I think actually makes things cleaner and clearer than the statement forms. <br>&gt; <br>&gt; But this feedback and Jordan’s is making me think that the Hybrid approach in Alternatives Considered may be more appealing to everyone. I was thinking conciseness might be preferable given some of the feedback I got from Chris and others, but after reading some other threads, clarity wins out over conciseness. This alternative may win for clarity. So I might go back and rethink that, but before I do that, I hope that more people could tell me if they like it better or do they like the ?( syntax better.<br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 19, 2015 at 10:57 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any of the complaints about the existing ternary operator:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt;&gt; &gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt;&gt; <br>&gt;&gt; +1 to all that<br>&gt;&gt; <br>&gt;&gt; &gt; Jordan<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; All,<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md &lt;https://github.com/possen/swift-evolution/blob/master/proposals/0024.md&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; - Paul<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/97be55f2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 21, 2015 at 12:00:00am</p></header><div class="content"><p>Addendum, <br></p><p>ternary for simple things like:<br></p><p>	let name = (gender == female) ? “Jill” : “Joe”<br></p><p>Anything more than that then it becomes a hairy mess.<br></p><p>BTW, OOP is good for some solutions, bad for others.  But goto is only good in assembly language (IMHO :p).  <br></p><p>I would pretty well prefer everything except for assignments (let/var) to be expressions.   <br></p><p><br>&gt; On 2015-12-20, at 23:57:30, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; The complaint that you have about Javascript is more a function of it not being a strongly typed language.  If you were to write a function with the type of return specified and the code inside the function (because of a single character) end up changing type for the return value or a future expression that was not expecting boolean…. then it would not compile.<br>&gt; <br>&gt;&gt; On 2015-12-20, at 13:35:42, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; keeping expressions and statements as separate concepts<br>&gt;&gt; <br>&gt;&gt; I seriously could not care less about that.<br>&gt;&gt; <br>&gt;&gt; Wait wait, I&#39;m exaggerating! I wouldn&#39;t want Swift to become a language like Javascript where you forget to type a single character, and discover your program runs without complaint (assigning some bizarre boolean value as a result).<br>&gt;&gt; <br>&gt;&gt; But if we&#39;re talking about the &#39;Switch&#39; statement, as originally proposed, it takes a lot more characters, and luck, to get your app to compile and run. For me, I&#39;d way rather have the convenience. As far as I&#39;m concerned, unless I&#39;m choosing a variable name, the more I have to type, the more likely I&#39;m going to make a mistake.<br>&gt;&gt; <br>&gt;&gt; This is why I think the ternary, for example, gets a bad rap (a bad rap *at the moment* anyway. I can&#39;t keep track, are &quot;goto&quot; and OOP bad this year?). The clarity you gain with a ternary is the fact that &quot;this statement exists to assign a value to Foo.&quot; You break that into several lines, and that clarity can evaporate into the ether.<br>&gt;&gt; <br>&gt;&gt; So the reason I like your proposal, is that I want a way to preserve that clarity of &quot;this line exists to assign a value to Foo&quot; when I&#39;m mapping something. The existing options, i.e.: the alternatives about I complained earlier in this thread, leave me with extra code whose purpose is solely to support that assignment to Foo. So, let&#39;s say I do it by extending an enum with an init that has a corresponding set of values... the purpose of that extension is no longer as clear (e.g.: &quot;this init exists to support a line, somewhere else in this file, that assigns a value to Foo&quot;). If I use a Switch statement, as it currently exists, it&#39;s a bunch of lines - and don&#39;t forget that &quot;let Foo&quot; needs to be declared *before* the Switch statement because of scope... it&#39;s so much more complicated than your proposal.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know if I added anything helpful here other than complaining :) Needless to say, I still support your proposal <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 19, 2015 at 9:57 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 8:37 PM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 to Jordan&#39;s points as well. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Generally speaking, there is clearly a wide variety of things that cause people to be interested in this particular proposal and I don&#39;t think we can reconcile all of them. For example, I think that &quot;collapsing an if statement into one line&quot; isn&#39;t a good enough reason to introduce the clutter and potential for abuse of the original ternary syntax into a codebase, so I generally float the idea to ban it from projects I&#39;m involved in as soon as I see it pop up in one. At the same time, there seem to be people who are enamored with the concept, and maybe instead they talk in this thread because they want a way to condense a switch statement into one line. And still others think that there is no rush to think about getting rid of ternary, unless we come up with something equally concise or with significant advantages to warrant removing it (all valid points).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not against Paul&#39;s idea, but if it matters at all (i.e. if you are worried other people will think like me), if this syntax is released, I will most likely float the idea of opting out of it immediately to my project collaborators. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While interesting for quick, proof of concept coding sessions, it already has some of the readability and abusability disadvantages already present in ternary, and it&#39;s still just in the proposal stage. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I only hope that this doesn&#39;t preclude progress on turning fully-qualified (and indented) statements into expressions.<br>&gt;&gt; <br>&gt;&gt; Good feedback!<br>&gt;&gt; <br>&gt;&gt; Personally, I kind of hope that that is not the direction of Swift. I think there is quite a bit of value in keeping expressions and statements as separate concepts. If you need to do a bunch of things to get the result of an expression then use the statement construct or move it into a method. <br>&gt;&gt; <br>&gt;&gt; Having statements that act as expressions encourages code that has side effects, which goes against one of the core concepts of functional programming. If I am working on a team, and someone wants to add some new feature and they see a big indented “if” with braces, they will just stick it in there and ignore that it is a functional approach. That new statement they add may add a bunch of side effects and add bugs to the code. If it is an expression that temptation will be less likely. They will see that this code is intended to work as an expression and won’t be able to just stick another statement with a bunch of side effects into it. <br>&gt;&gt; <br>&gt;&gt; My proposal is about making expressions into first class citizens in terms of control flow. Its main purpose is definitely not about doing things on one line, that is just a side benefit if it works for your particular situation. This proposal supports and encourages multiline formatting and I think actually makes things cleaner and clearer than the statement forms. <br>&gt;&gt; <br>&gt;&gt; But this feedback and Jordan’s is making me think that the Hybrid approach in Alternatives Considered may be more appealing to everyone. I was thinking conciseness might be preferable given some of the feedback I got from Chris and others, but after reading some other threads, clarity wins out over conciseness. This alternative may win for clarity. So I might go back and rethink that, but before I do that, I hope that more people could tell me if they like it better or do they like the ?( syntax better.<br>&gt;&gt; <br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sat, Dec 19, 2015 at 10:57 PM Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any of the complaints about the existing ternary operator:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt;&gt;&gt; &gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 to all that<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Jordan<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; All,<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md &lt;https://github.com/possen/swift-evolution/blob/master/proposals/0024.md&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; - Paul<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/5a5bf1f9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 20, 2015 at 02:00:00pm</p></header><div class="content"><p>Paul, I&#39;m not keen on this:<br></p><p>&gt; ?(cond : “A” else: “B”)<br></p><p>Not that chaining ternary conditions is a good idea, but people will do it<br>anyways. If we&#39;re using else, we may as well go with ( cond true:“A” false:<br>“B”) which is easier or a human to parse, imo.<br></p><p>Craig,<br></p><p>&gt; The complaint that you have about Javascript<br></p><p>Cheers, you&#39;re right. I ought to have spent more time thinking of a good<br>example. The idea I was trying to express is that being absolutist about<br>language features doesn&#39;t appeal to me. Or maybe I am absolutist, but just<br>have different preferences. In any event, it appeals more to me to have a<br>Switch assignment that echoes the syntax of a normal Switch statement, than<br>it does to maintain &quot;expressions and statements as separate concepts&quot;.<br></p><p><br></p><p><br></p><p>On Sun, Dec 20, 2015 at 8:57 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br></p><p>&gt; The complaint that you have about Javascript is more a function of it not<br>&gt; being a strongly typed language.  If you were to write a function with the<br>&gt; type of return specified and the code inside the function (because of a<br>&gt; single character) end up changing type for the return value or a future<br>&gt; expression that was not expecting boolean…. then it would not compile.<br>&gt;<br>&gt; On 2015-12-20, at 13:35:42, Charles Constant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; keeping expressions and statements as separate concepts<br>&gt;<br>&gt; I seriously could not care less about that.<br>&gt;<br>&gt; Wait wait, I&#39;m exaggerating! I wouldn&#39;t want Swift to become a language<br>&gt; like Javascript where you forget to type a single character, and discover<br>&gt; your program runs without complaint (assigning some bizarre boolean value<br>&gt; as a result).<br>&gt;<br>&gt; But if we&#39;re talking about the &#39;Switch&#39; statement, as originally proposed,<br>&gt; it takes a lot more characters, and luck, to get your app to compile and<br>&gt; run. For me, I&#39;d way rather have the convenience. As far as I&#39;m concerned,<br>&gt; unless I&#39;m choosing a variable name, the more I have to type, the more<br>&gt; likely I&#39;m going to make a mistake.<br>&gt;<br>&gt; This is why I think the ternary, for example, gets a bad rap (a bad rap<br>&gt; *at the moment* anyway. I can&#39;t keep track, are &quot;goto&quot; and OOP bad this<br>&gt; year?). The clarity you gain with a ternary is the fact that &quot;this<br>&gt; statement exists to assign a value to Foo.&quot; You break that into several<br>&gt; lines, and that clarity can evaporate into the ether.<br>&gt;<br>&gt; So the reason I like your proposal, is that I want a way to preserve that<br>&gt; clarity of &quot;this line exists to assign a value to Foo&quot; when I&#39;m mapping<br>&gt; something. The existing options, i.e.: the alternatives about I complained<br>&gt; earlier in this thread, leave me with extra code whose purpose is solely to<br>&gt; support that assignment to Foo. So, let&#39;s say I do it by extending an enum<br>&gt; with an init that has a corresponding set of values... the purpose of that<br>&gt; extension is no longer as clear (e.g.: &quot;this init exists to support a line,<br>&gt; somewhere else in this file, that assigns a value to Foo&quot;). If I use a<br>&gt; Switch statement, as it currently exists, it&#39;s a bunch of lines - and don&#39;t<br>&gt; forget that &quot;let Foo&quot; needs to be declared *before* the Switch statement<br>&gt; because of scope... it&#39;s so much more complicated than your proposal.<br>&gt;<br>&gt; I don&#39;t know if I added anything helpful here other than complaining :)<br>&gt; Needless to say, I still support your proposal<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Dec 19, 2015 at 9:57 PM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 8:37 PM, Dennis Lysenko via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; +1 to Jordan&#39;s points as well.<br>&gt;&gt;<br>&gt;&gt; Generally speaking, there is clearly a wide variety of things that cause<br>&gt;&gt; people to be interested in this particular proposal and I don&#39;t think we<br>&gt;&gt; can reconcile all of them. For example, I think that &quot;collapsing an if<br>&gt;&gt; statement into one line&quot; isn&#39;t a good enough reason to introduce the<br>&gt;&gt; clutter and potential for abuse of the original ternary syntax into a<br>&gt;&gt; codebase, so I generally float the idea to ban it from projects I&#39;m<br>&gt;&gt; involved in as soon as I see it pop up in one. At the same time, there seem<br>&gt;&gt; to be people who are enamored with the concept, and maybe instead they talk<br>&gt;&gt; in this thread because they want a way to condense a switch statement into<br>&gt;&gt; one line. And still others think that there is no rush to think about<br>&gt;&gt; getting rid of ternary, unless we come up with something equally concise or<br>&gt;&gt; with significant advantages to warrant removing it (all valid points).<br>&gt;&gt;<br>&gt;&gt; I&#39;m not *against* Paul&#39;s idea, but if it matters at all (i.e. if you are<br>&gt;&gt; worried other people will think like me), if this syntax is released, I<br>&gt;&gt; will most likely float the idea of opting out of it immediately to my<br>&gt;&gt; project collaborators.<br>&gt;&gt;<br>&gt;&gt; While interesting for quick, proof of concept coding sessions, it already<br>&gt;&gt; has some of the readability and abusability disadvantages already present<br>&gt;&gt; in ternary, and it&#39;s still just in the proposal stage.<br>&gt;&gt;<br>&gt;&gt; I only hope that this doesn&#39;t preclude progress on turning<br>&gt;&gt; fully-qualified (and indented) statements into expressions.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Good feedback!<br>&gt;&gt;<br>&gt;&gt; Personally, I kind of hope that that is not the direction of Swift. I<br>&gt;&gt; think there is quite a bit of value in keeping expressions and statements<br>&gt;&gt; as separate concepts. If you need to do a bunch of things to get the result<br>&gt;&gt; of an expression then use the statement construct or move it into a method.<br>&gt;&gt;<br>&gt;&gt; Having statements that act as expressions encourages code that has side<br>&gt;&gt; effects, which goes against one of the core concepts of functional<br>&gt;&gt; programming. If I am working on a team, and someone wants to add some new<br>&gt;&gt; feature and they see a big indented “if” with braces, they will just stick<br>&gt;&gt; it in there and ignore that it is a functional approach. That new statement<br>&gt;&gt; they add may add a bunch of side effects and add bugs to the code. If it is<br>&gt;&gt; an expression that temptation will be less likely. They will see that this<br>&gt;&gt; code is intended to work as an expression and won’t be able to just stick<br>&gt;&gt; another statement with a bunch of side effects into it.<br>&gt;&gt;<br>&gt;&gt; My proposal is about making expressions into first class citizens in<br>&gt;&gt; terms of control flow. Its main purpose is definitely not about doing<br>&gt;&gt; things on one line, that is just a side benefit if it works for your<br>&gt;&gt; particular situation. This proposal supports and encourages multiline<br>&gt;&gt; formatting and I think actually makes things cleaner and clearer than the<br>&gt;&gt; statement forms.<br>&gt;&gt;<br>&gt;&gt; But this feedback and Jordan’s is making me think that the Hybrid<br>&gt;&gt; approach in Alternatives Considered may be more appealing to everyone. I<br>&gt;&gt; was thinking conciseness might be preferable given some of the feedback I<br>&gt;&gt; got from Chris and others, but after reading some other threads, clarity<br>&gt;&gt; wins out over conciseness. This alternative may win for clarity. So I might<br>&gt;&gt; go back and rethink that, but before I do that, I hope that more people<br>&gt;&gt; could tell me if they like it better or do they like the ?( syntax better.<br>&gt;&gt;<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Sat, Dec 19, 2015 at 10:57 PM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves<br>&gt;&gt;&gt; any of the complaints about the existing ternary operator:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt;&gt;&gt; &gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the<br>&gt;&gt;&gt; two different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; +1 to all that<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; Jordan<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; All,<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I think, I finally might have the answer to improving ternary, with<br>&gt;&gt;&gt; such a bold statement come some pretty high expectations but I think, I<br>&gt;&gt;&gt; might actually have done it this time :-)<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I am calling it the Demux Expression, it builds on the benefits of<br>&gt;&gt;&gt; ternary and switch while improving on those.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; - Paul<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/8df7079c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 19, 2015 at 09:00:00pm</p></header><div class="content"><p>Thank you for your feedback!<br></p><p>Just want to respond a little bit, I don’t believe it is any worse than the ternary in terms of it being non obvious as to what it does, and it adds a lot of power beyond the ternary, because now you can switch to more than two outcomes. <br></p><p>In terms of readability, it does improve on the ternary because I often find it hard to determine where a ternary begins, in unfamiliar code, looking at:<br></p><p>x = x == y ? 49 : 3 <br></p><p>It is not until you get to the question mark that you realize it is a ternary and the x == y just is kind of floating there. The = and == just looks strange. Many do this to make it look better:<br></p><p>x = (x == y ? 49 : 3) <br></p><p>With the new form:<br></p><p>x = ?(x == y : 49, 3) <br></p><p>The x == y pops out more, similar to how adding the parenthesis helps, and you can immediately tell that this is part of a demux expression. This codifies the practice, of putting in parenthesis, in the same way that mandatory braces in control flow statements make the statements stand out. So I do believe it does address some of the problems with ternary. <br></p><p>If that is not enough of a difference from ternary to make this proposal fly, then maybe the hybrid approach outlined in Alternatives Considered section would be preferred? One example: <br></p><p>x = if(x == y : 49, 3) <br></p><p>This looks more function like and has many of the benefits of my original proposal and perhaps better addresses some of the downside of the ? being non obvious as to what it does at the expense of conciseness. Although, as Austin Zheng says, ? is for query, not necessarily just to indicate optional. If we don’t go with that interpretation of ?, this direction, may help to keep the concept of ? for optionals. Ternary kind of steps into that and makes it less separated so this alternative may be a better direction. I don’t object to this approach, if that is the consensus.<br></p><p>- Paul <br></p><p><br></p><p><br></p><p>&gt; On Dec 19, 2015, at 7:55 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; It&#39;s a nice, consistent proposal, but I don&#39;t feel like this solves any of the complaints about the existing ternary operator:<br>&gt; <br>&gt; - It&#39;s not obvious what it does when you first learn it.<br>&gt; - The &#39;?&#39; doesn&#39;t have anything to do with Optionals.<br>&gt; <br>&gt; It is a way to put &#39;switch&#39; into an expression. I&#39;m not a fan of the two different colons, but that&#39;s &quot;just&quot; syntax.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 14:04 , Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; All,<br>&gt;&gt; <br>&gt;&gt; I think, I finally might have the answer to improving ternary, with such a bold statement come some pretty high expectations but I think, I might actually have done it this time :-)<br>&gt;&gt; <br>&gt;&gt; I am calling it the Demux Expression, it builds on the benefits of ternary and switch while improving on those. <br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/proposals/0024.md<br>&gt;&gt; <br>&gt;&gt; This is a first draft, thanks in advance for feedback!<br>&gt;&gt; <br>&gt;&gt; - Paul<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 16, 2015 at 10:00:00pm</p></header><div class="content"><p>I&#39;ve never hated the ternary operator, so I wouldn&#39;t feel comfortable<br>arguing very strongly against it. To my eyes, in situations where it&#39;s just<br>a choice of true/false, I agree the suggestions in this thread are not as<br>nice.<br></p><p>My reason for suggesting the change is that it would be nice to have a one<br>liner for non-boolean values. Especially when the mapping isn&#39;t likely to<br>be reused anyplace else. I run into this a fair amount, and the inline way<br>I do it (via a Dict) requires a lot of verbosity (keys are likely to be<br>Enums and need to be explicitly declared for the Dict). Either that or I<br>extend an Enum, but that&#39;s also verbose when I never intend to reuse the<br>mapping elsewhere in my project. So this would be handy:<br></p><p>Eg:<br></p><p>let str = dir ? (<br>    .Png: &quot;Export Png&quot;,<br>    .Jpeg: &quot;Export Jpeg&quot;,<br>    .Tiff: &quot;Save (native)&quot;,<br>)<br></p><p>let i = boo ? (<br>    true: 1,<br>    false: 0,<br>    nil: -1<br>)<br></p><p>Uh hang on... I guess &quot;nil&quot; is invalid as a tuple key. But hey! Other than<br>that, the syntax would have been convenient :)<br></p><p>Anyways I&#39;ve harped on this enough. I can live without it, if others aren&#39;t<br>keen on it.<br></p><p><br></p><p>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/fd929184/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; My reason for suggesting the change is that it would be nice to have a one liner for non-boolean values. Especially when the mapping isn&#39;t likely to be reused anyplace else. I run into this a fair amount, and the inline way I do it (via a Dict) requires a lot of verbosity (keys are likely to be Enums and need to be explicitly declared for the Dict).<br></p><p>You can improve the ergonomics of this with a custom operator:<br></p><p>	infix operator ??? {}		// Used because ? is reserved; in practice, you should use something else.<br>	<br>	func ???&lt;Key, Value&gt;(key: Key, dictionary: [Key: Value]) -&gt; Value {<br>	    return dictionary[key]!<br>	}<br>	<br>	let alignment = NSTextAlignment.Left<br>	alignment ??? [.Left: &quot;Left&quot;, .Right: &quot;Right&quot;, .Center: &quot;Center&quot;, .Justified: &quot;Justified&quot;]<br></p><p>Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>that is cool thanks!<br></p><p>&gt; On Dec 16, 2015, at 11:09 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; My reason for suggesting the change is that it would be nice to have a one liner for non-boolean values. Especially when the mapping isn&#39;t likely to be reused anyplace else. I run into this a fair amount, and the inline way I do it (via a Dict) requires a lot of verbosity (keys are likely to be Enums and need to be explicitly declared for the Dict).<br>&gt; <br>&gt; You can improve the ergonomics of this with a custom operator:<br>&gt; <br>&gt; 	infix operator ??? {}		// Used because ? is reserved; in practice, you should use something else.<br>&gt; 	<br>&gt; 	func ???&lt;Key, Value&gt;(key: Key, dictionary: [Key: Value]) -&gt; Value {<br>&gt; 	    return dictionary[key]!<br>&gt; 	}<br>&gt; 	<br>&gt; 	let alignment = NSTextAlignment.Left<br>&gt; 	alignment ??? [.Left: &quot;Left&quot;, .Right: &quot;Right&quot;, .Center: &quot;Center&quot;, .Justified: &quot;Justified&quot;]<br>&gt; <br>&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 28, 2015 at 06:00:00pm</p></header><div class="content"><p>No exhaustiveness checking is a serious deficiency :-(<br></p><p>-Thorsten<br></p><p>&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>December 29, 2015 at 06:00:00pm</p></header><div class="content"><p>You can replace the proposed statement `which` (another thread), the existing statement `?:` (this thread), and the global function `??` (which is an odd ball) with matching library methods.<br></p><p>A library method is likely slower than a built in at this stage until the optimiser improves, but a library function:<br></p><p>Is documented right in the IDE including code completion, statements aren’t (you don’t see quick help for `for`!)<br>Having a library function allows the use case to be throughly investigated. Is worth while as a language statement? What exact features are useful? EG should `which` support pattern matching, general boolean expressions, or simply be `Equatable` as shown below?<br>It is simpler to implement, maintain, and change a library function that a built-in.<br>There is no need for a keyword.<br></p><p>First `which`:<br></p><p>// Alternative to introducing `which` statement<br></p><p>final<br>class Which&lt;I: Equatable, R&gt; {<br>    private<br>    var result: R?<br>    <br>    private<br>    let which: I<br>    <br>    init(_ which: I) {<br>        self.which = which<br>    }<br>    <br>    func match(value: I, @noescape matchResult: () throws -&gt; R) rethrows -&gt; Self {<br>        if self.result == nil &amp;&amp; self.which == value {<br>            self.result = try matchResult()<br>        }<br>        return self<br>    }<br>    <br>    func matchDefault(@noescape defaultResult: () throws -&gt; R) rethrows -&gt; R {<br>        switch self.result {<br>        case .None:<br>            return try defaultResult()<br>        case .Some(let value):<br>            return value<br>        }<br>    }<br>}<br></p><p><br>// Demo<br>enum Color {<br>    case Red, Blue, Green<br>}<br></p><p>// Which with a default value<br>let i1 = Which(Color.Red) // i = 16711680<br>    .match(.Red)   { 0xFF0000 }<br>    .match(.Green) { 0x00FF00 }<br>    .match(.Blue)  { 0x00000FF }<br>    .matchDefault  { 0 }<br></p><p>// Which that throws an error if it defaults<br>let i2: Int! = Which(Color.Green) // i = 16711680<br>    .match(.Red)   { 0xFF0000 }<br>    .match(.Green) { 0x00FF00 }<br>    .match(.Blue)  { 0x00000FF }<br>    .matchDefault  { nil }  // Cant type call to fatalError as no return, hence nil and type Int! (note !)<br></p><p>Note runtime check for default rather than static check via compiler, not as good but not a big deal most of the time. The vast majority of languages don&#39;t do a compiler check on `switch`.<br></p><p>Similarly the `?:` statement can be replaced:<br></p><p>// Replacement for `?:` operator<br></p><p>struct IfFalse&lt;R&gt; {<br>    private<br>    let result: R?<br>    <br>    func ifFalse(@noescape falseResult: () throws -&gt; R) rethrows -&gt; R {<br>        switch self.result {<br>        case .None:<br>            return try falseResult()<br>        case .Some(let value):<br>            return value<br>        }<br>    }<br>}<br></p><p>extension Bool {<br>    func ifTrue&lt;R&gt;(@noescape trueResult: () throws -&gt; R) rethrows -&gt; IfFalse&lt;R&gt; {<br>        switch self {<br>        case true:<br>            return IfFalse(result: try trueResult())<br>        case false:<br>            return IfFalse(result: nil)<br>        }<br>    }<br>}<br></p><p><br>// Demo<br>let sB = true.ifTrue{&quot;True&quot;}.ifFalse{&quot;False&quot;} // &quot;True&quot; - for some reason needs {} and not () thinks () form throws<br></p><p>Whilst the `??` operator is already a library function it is difficult to see in an expression, it gets buried, and is inconsistent in style because it is a non-mathematical operator and a symbol rather than a keyword or keyword followed by a symbol. The space either side of the `??` operator also makes it look like both arguments are of equal importance, whereas it is the left hand side that is important and the right hand side is just a catch.<br></p><p>// Replacement for `??` operator<br></p><p>extension Optional {<br>    func ifNil(@noescape nilResult: () throws -&gt; Wrapped) rethrows -&gt; Wrapped {<br>        switch self {<br>        case .None:<br>            return try nilResult()<br>        case .Some(let value):<br>            return value<br>        }<br>    }<br>}<br></p><p><br>// Demo<br>let o: String? = nil<br>let sO = o.ifNil{&quot;Nil&quot;} // &quot;Nil&quot; - for some reason needs {} and not () thinks () form throws<br></p><p><br>Sent from my iPad<br></p><p>&gt; On 29 Dec 2015, at 4:00 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; No exhaustiveness checking is a serious deficiency :-(<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt;&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/83bbc385/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 29, 2015 at 08:00:00am</p></header><div class="content"><p>What if you could wrap the existing switch statement in a closure and return a value from that closure like so<br></p><p>Let value = { switch (other) {<br>Case .Some(let value):<br>Return value // because this is in a closure the closure will return the value not the function this is in<br>Case .None:<br>Return &quot;hello&quot; <br>}}<br></p><p><br>Sent from my iPhone<br></p><p>&gt; On 29 Dec 2015, at 07:53, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You can replace the proposed statement `which` (another thread), the existing statement `?:` (this thread), and the global function `??` (which is an odd ball) with matching library methods.<br>&gt; <br>&gt; A library method is likely slower than a built in at this stage until the optimiser improves, but a library function:<br>&gt; <br>&gt; Is documented right in the IDE including code completion, statements aren’t (you don’t see quick help for `for`!)<br>&gt; Having a library function allows the use case to be throughly investigated. Is worth while as a language statement? What exact features are useful? EG should `which` support pattern matching, general boolean expressions, or simply be `Equatable` as shown below?<br>&gt; It is simpler to implement, maintain, and change a library function that a built-in.<br>&gt; There is no need for a keyword.<br>&gt; <br>&gt; First `which`:<br>&gt; <br>&gt; // Alternative to introducing `which` statement<br>&gt; <br>&gt; final<br>&gt; class Which&lt;I: Equatable, R&gt; {<br>&gt;     private<br>&gt;     var result: R?<br>&gt;     <br>&gt;     private<br>&gt;     let which: I<br>&gt;     <br>&gt;     init(_ which: I) {<br>&gt;         self.which = which<br>&gt;     }<br>&gt;     <br>&gt;     func match(value: I, @noescape matchResult: () throws -&gt; R) rethrows -&gt; Self {<br>&gt;         if self.result == nil &amp;&amp; self.which == value {<br>&gt;             self.result = try matchResult()<br>&gt;         }<br>&gt;         return self<br>&gt;     }<br>&gt;     <br>&gt;     func matchDefault(@noescape defaultResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;         switch self.result {<br>&gt;         case .None:<br>&gt;             return try defaultResult()<br>&gt;         case .Some(let value):<br>&gt;             return value<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; // Demo<br>&gt; enum Color {<br>&gt;     case Red, Blue, Green<br>&gt; }<br>&gt; <br>&gt; // Which with a default value<br>&gt; let i1 = Which(Color.Red) // i = 16711680<br>&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;     .match(.Green) { 0x00FF00 }<br>&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;     .matchDefault  { 0 }<br>&gt; <br>&gt; // Which that throws an error if it defaults<br>&gt; let i2: Int! = Which(Color.Green) // i = 16711680<br>&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;     .match(.Green) { 0x00FF00 }<br>&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;     .matchDefault  { nil }  // Cant type call to fatalError as no return, hence nil and type Int! (note !)<br>&gt; <br>&gt; Note runtime check for default rather than static check via compiler, not as good but not a big deal most of the time. The vast majority of languages don&#39;t do a compiler check on `switch`.<br>&gt; <br>&gt; Similarly the `?:` statement can be replaced:<br>&gt; <br>&gt; // Replacement for `?:` operator<br>&gt; <br>&gt; struct IfFalse&lt;R&gt; {<br>&gt;     private<br>&gt;     let result: R?<br>&gt;     <br>&gt;     func ifFalse(@noescape falseResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;         switch self.result {<br>&gt;         case .None:<br>&gt;             return try falseResult()<br>&gt;         case .Some(let value):<br>&gt;             return value<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; extension Bool {<br>&gt;     func ifTrue&lt;R&gt;(@noescape trueResult: () throws -&gt; R) rethrows -&gt; IfFalse&lt;R&gt; {<br>&gt;         switch self {<br>&gt;         case true:<br>&gt;             return IfFalse(result: try trueResult())<br>&gt;         case false:<br>&gt;             return IfFalse(result: nil)<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; // Demo<br>&gt; let sB = true.ifTrue{&quot;True&quot;}.ifFalse{&quot;False&quot;} // &quot;True&quot; - for some reason needs {} and not () thinks () form throws<br>&gt; <br>&gt; Whilst the `??` operator is already a library function it is difficult to see in an expression, it gets buried, and is inconsistent in style because it is a non-mathematical operator and a symbol rather than a keyword or keyword followed by a symbol. The space either side of the `??` operator also makes it look like both arguments are of equal importance, whereas it is the left hand side that is important and the right hand side is just a catch.<br>&gt; <br>&gt; // Replacement for `??` operator<br>&gt; <br>&gt; extension Optional {<br>&gt;     func ifNil(@noescape nilResult: () throws -&gt; Wrapped) rethrows -&gt; Wrapped {<br>&gt;         switch self {<br>&gt;         case .None:<br>&gt;             return try nilResult()<br>&gt;         case .Some(let value):<br>&gt;             return value<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; // Demo<br>&gt; let o: String? = nil<br>&gt; let sO = o.ifNil{&quot;Nil&quot;} // &quot;Nil&quot; - for some reason needs {} and not () thinks () form throws<br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On 29 Dec 2015, at 4:00 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; No exhaustiveness checking is a serious deficiency :-(<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt;&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/cbaba067/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 29, 2015 at 08:00:00pm</p></header><div class="content"><p>That looks pretty ugly.  <br></p><p>I think the best we can hope for at this point is maybe another keyword that mirrors switch but is expression based (aka match) — leaving the ternary ? : expression as is - which is not all that bad since any if else that becomes a compound expression or more than two resultant values (chaining) quickly becomes a mess.  <br></p><p>I am not sure that even a “match” expression would be accepted at this point because there seems to be general resistance to anything more than the existing paradigm with a few functional decorations — and the way of doing things is good enough.  <br></p><p>Concurrency is also currently off the table at this point -- the fact that immutable pure functional code can theoretically be parsed into a dependance graph which would allow for out of order [within scope] parallel execution on different threads [not sure if the overhead of doing so would outweigh the benefits]…. would also not be of sufficient benefit. <br></p><p>The primary focus of Swift is a language for UI development, not server development….<br></p><p><br>&gt; On 2015-12-29, at 15:07:57, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What if you could wrap the existing switch statement in a closure and return a value from that closure like so<br>&gt; <br>&gt; Let value = { switch (other) {<br>&gt; Case .Some(let value):<br>&gt; Return value // because this is in a closure the closure will return the value not the function this is in<br>&gt; Case .None:<br>&gt; Return &quot;hello&quot; <br>&gt; }}<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 29 Dec 2015, at 07:53, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; You can replace the proposed statement `which` (another thread), the existing statement `?:` (this thread), and the global function `??` (which is an odd ball) with matching library methods.<br>&gt;&gt; <br>&gt;&gt; A library method is likely slower than a built in at this stage until the optimiser improves, but a library function:<br>&gt;&gt; <br>&gt;&gt; Is documented right in the IDE including code completion, statements aren’t (you don’t see quick help for `for`!)<br>&gt;&gt; Having a library function allows the use case to be throughly investigated. Is worth while as a language statement? What exact features are useful? EG should `which` support pattern matching, general boolean expressions, or simply be `Equatable` as shown below?<br>&gt;&gt; It is simpler to implement, maintain, and change a library function that a built-in.<br>&gt;&gt; There is no need for a keyword.<br>&gt;&gt; <br>&gt;&gt; First `which`:<br>&gt;&gt; <br>&gt;&gt; // Alternative to introducing `which` statement<br>&gt;&gt; <br>&gt;&gt; final<br>&gt;&gt; class Which&lt;I: Equatable, R&gt; {<br>&gt;&gt;     private<br>&gt;&gt;     var result: R?<br>&gt;&gt;     <br>&gt;&gt;     private<br>&gt;&gt;     let which: I<br>&gt;&gt;     <br>&gt;&gt;     init(_ which: I) {<br>&gt;&gt;         self.which = which<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     func match(value: I, @noescape matchResult: () throws -&gt; R) rethrows -&gt; Self {<br>&gt;&gt;         if self.result == nil &amp;&amp; self.which == value {<br>&gt;&gt;             self.result = try matchResult()<br>&gt;&gt;         }<br>&gt;&gt;         return self<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     func matchDefault(@noescape defaultResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;&gt;         switch self.result {<br>&gt;&gt;         case .None:<br>&gt;&gt;             return try defaultResult()<br>&gt;&gt;         case .Some(let value):<br>&gt;&gt;             return value<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; // Demo<br>&gt;&gt; enum Color {<br>&gt;&gt;     case Red, Blue, Green<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Which with a default value<br>&gt;&gt; let i1 = Which(Color.Red) // i = 16711680 &lt;tel:16711680&gt;<br>&gt;&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;&gt;     .match(.Green) { 0x00FF00 }<br>&gt;&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;&gt;     .matchDefault  { 0 }<br>&gt;&gt; <br>&gt;&gt; // Which that throws an error if it defaults<br>&gt;&gt; let i2: Int! = Which(Color.Green) // i = 16711680 &lt;tel:16711680&gt;<br>&gt;&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;&gt;     .match(.Green) { 0x00FF00 }<br>&gt;&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;&gt;     .matchDefault  { nil }  // Cant type call to fatalError as no return, hence nil and type Int! (note !)<br>&gt;&gt; <br>&gt;&gt; Note runtime check for default rather than static check via compiler, not as good but not a big deal most of the time. The vast majority of languages don&#39;t do a compiler check on `switch`.<br>&gt;&gt; <br>&gt;&gt; Similarly the `?:` statement can be replaced:<br>&gt;&gt; <br>&gt;&gt; // Replacement for `?:` operator<br>&gt;&gt; <br>&gt;&gt; struct IfFalse&lt;R&gt; {<br>&gt;&gt;     private<br>&gt;&gt;     let result: R?<br>&gt;&gt;     <br>&gt;&gt;     func ifFalse(@noescape falseResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;&gt;         switch self.result {<br>&gt;&gt;         case .None:<br>&gt;&gt;             return try falseResult()<br>&gt;&gt;         case .Some(let value):<br>&gt;&gt;             return value<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Bool {<br>&gt;&gt;     func ifTrue&lt;R&gt;(@noescape trueResult: () throws -&gt; R) rethrows -&gt; IfFalse&lt;R&gt; {<br>&gt;&gt;         switch self {<br>&gt;&gt;         case true:<br>&gt;&gt;             return IfFalse(result: try trueResult())<br>&gt;&gt;         case false:<br>&gt;&gt;             return IfFalse(result: nil)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; // Demo<br>&gt;&gt; let sB = true.ifTrue{&quot;True&quot;}.ifFalse{&quot;False&quot;} // &quot;True&quot; - for some reason needs {} and not () thinks () form throws<br>&gt;&gt; <br>&gt;&gt; Whilst the `??` operator is already a library function it is difficult to see in an expression, it gets buried, and is inconsistent in style because it is a non-mathematical operator and a symbol rather than a keyword or keyword followed by a symbol. The space either side of the `??` operator also makes it look like both arguments are of equal importance, whereas it is the left hand side that is important and the right hand side is just a catch.<br>&gt;&gt; <br>&gt;&gt; // Replacement for `??` operator<br>&gt;&gt; <br>&gt;&gt; extension Optional {<br>&gt;&gt;     func ifNil(@noescape nilResult: () throws -&gt; Wrapped) rethrows -&gt; Wrapped {<br>&gt;&gt;         switch self {<br>&gt;&gt;         case .None:<br>&gt;&gt;             return try nilResult()<br>&gt;&gt;         case .Some(let value):<br>&gt;&gt;             return value<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; // Demo<br>&gt;&gt; let o: String? = nil<br>&gt;&gt; let sO = o.ifNil{&quot;Nil&quot;} // &quot;Nil&quot; - for some reason needs {} and not () thinks () form throws<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On 29 Dec 2015, at 4:00 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; No exhaustiveness checking is a serious deficiency :-(<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/786b8fc7/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 29, 2015 at 07:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Dec 29, 2015, at 7:28 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That looks pretty ugly.  <br>&gt; <br>&gt; I think the best we can hope for at this point is maybe another keyword that mirrors switch but is expression based (aka match) — leaving the ternary ? : expression as is - which is not all that bad since any if else that becomes a compound expression or more than two resultant values (chaining) quickly becomes a mess.  <br></p><p>I agree that this is probably the best path forward at the moment.  There was a post early on showing a ternary-like switch expression.  I don&#39;t remember whether there were any specific problems with that idea or not, but if there aren&#39;t that might best route forward.<br></p><p>&gt; <br>&gt; I am not sure that even a “match” expression would be accepted at this point because there seems to be general resistance to anything more than the existing paradigm with a few functional decorations — and the way of doing things is good enough.  <br>&gt; <br>&gt; Concurrency is also currently off the table at this point -- the fact that immutable pure functional code can theoretically be parsed into a dependance graph which would allow for out of order [within scope] parallel execution on different threads [not sure if the overhead of doing so would outweigh the benefits]…. would also not be of sufficient benefit. <br>&gt; <br>&gt; The primary focus of Swift is a language for UI development, not server development….<br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-29, at 15:07:57, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What if you could wrap the existing switch statement in a closure and return a value from that closure like so<br>&gt;&gt; <br>&gt;&gt; Let value = { switch (other) {<br>&gt;&gt; Case .Some(let value):<br>&gt;&gt; Return value // because this is in a closure the closure will return the value not the function this is in<br>&gt;&gt; Case .None:<br>&gt;&gt; Return &quot;hello&quot; <br>&gt;&gt; }}<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 29 Dec 2015, at 07:53, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can replace the proposed statement `which` (another thread), the existing statement `?:` (this thread), and the global function `??` (which is an odd ball) with matching library methods.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A library method is likely slower than a built in at this stage until the optimiser improves, but a library function:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is documented right in the IDE including code completion, statements aren’t (you don’t see quick help for `for`!)<br>&gt;&gt;&gt; Having a library function allows the use case to be throughly investigated. Is worth while as a language statement? What exact features are useful? EG should `which` support pattern matching, general boolean expressions, or simply be `Equatable` as shown below?<br>&gt;&gt;&gt; It is simpler to implement, maintain, and change a library function that a built-in.<br>&gt;&gt;&gt; There is no need for a keyword.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; First `which`:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Alternative to introducing `which` statement<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; final<br>&gt;&gt;&gt; class Which&lt;I: Equatable, R&gt; {<br>&gt;&gt;&gt;     private<br>&gt;&gt;&gt;     var result: R?<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     private<br>&gt;&gt;&gt;     let which: I<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     init(_ which: I) {<br>&gt;&gt;&gt;         self.which = which<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     func match(value: I, @noescape matchResult: () throws -&gt; R) rethrows -&gt; Self {<br>&gt;&gt;&gt;         if self.result == nil &amp;&amp; self.which == value {<br>&gt;&gt;&gt;             self.result = try matchResult()<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;         return self<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     func matchDefault(@noescape defaultResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;&gt;&gt;         switch self.result {<br>&gt;&gt;&gt;         case .None:<br>&gt;&gt;&gt;             return try defaultResult()<br>&gt;&gt;&gt;         case .Some(let value):<br>&gt;&gt;&gt;             return value<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Demo<br>&gt;&gt;&gt; enum Color {<br>&gt;&gt;&gt;     case Red, Blue, Green<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Which with a default value<br>&gt;&gt;&gt; let i1 = Which(Color.Red) // i = 16711680<br>&gt;&gt;&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;&gt;&gt;     .match(.Green) { 0x00FF00 }<br>&gt;&gt;&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;&gt;&gt;     .matchDefault  { 0 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Which that throws an error if it defaults<br>&gt;&gt;&gt; let i2: Int! = Which(Color.Green) // i = 16711680<br>&gt;&gt;&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;&gt;&gt;     .match(.Green) { 0x00FF00 }<br>&gt;&gt;&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;&gt;&gt;     .matchDefault  { nil }  // Cant type call to fatalError as no return, hence nil and type Int! (note !)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note runtime check for default rather than static check via compiler, not as good but not a big deal most of the time. The vast majority of languages don&#39;t do a compiler check on `switch`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Similarly the `?:` statement can be replaced:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Replacement for `?:` operator<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IfFalse&lt;R&gt; {<br>&gt;&gt;&gt;     private<br>&gt;&gt;&gt;     let result: R?<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     func ifFalse(@noescape falseResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;&gt;&gt;         switch self.result {<br>&gt;&gt;&gt;         case .None:<br>&gt;&gt;&gt;             return try falseResult()<br>&gt;&gt;&gt;         case .Some(let value):<br>&gt;&gt;&gt;             return value<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Bool {<br>&gt;&gt;&gt;     func ifTrue&lt;R&gt;(@noescape trueResult: () throws -&gt; R) rethrows -&gt; IfFalse&lt;R&gt; {<br>&gt;&gt;&gt;         switch self {<br>&gt;&gt;&gt;         case true:<br>&gt;&gt;&gt;             return IfFalse(result: try trueResult())<br>&gt;&gt;&gt;         case false:<br>&gt;&gt;&gt;             return IfFalse(result: nil)<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Demo<br>&gt;&gt;&gt; let sB = true.ifTrue{&quot;True&quot;}.ifFalse{&quot;False&quot;} // &quot;True&quot; - for some reason needs {} and not () thinks () form throws<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Whilst the `??` operator is already a library function it is difficult to see in an expression, it gets buried, and is inconsistent in style because it is a non-mathematical operator and a symbol rather than a keyword or keyword followed by a symbol. The space either side of the `??` operator also makes it look like both arguments are of equal importance, whereas it is the left hand side that is important and the right hand side is just a catch.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Replacement for `??` operator<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Optional {<br>&gt;&gt;&gt;     func ifNil(@noescape nilResult: () throws -&gt; Wrapped) rethrows -&gt; Wrapped {<br>&gt;&gt;&gt;         switch self {<br>&gt;&gt;&gt;         case .None:<br>&gt;&gt;&gt;             return try nilResult()<br>&gt;&gt;&gt;         case .Some(let value):<br>&gt;&gt;&gt;             return value<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Demo<br>&gt;&gt;&gt; let o: String? = nil<br>&gt;&gt;&gt; let sO = o.ifNil{&quot;Nil&quot;} // &quot;Nil&quot; - for some reason needs {} and not () thinks () form throws<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 29 Dec 2015, at 4:00 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No exhaustiveness checking is a serious deficiency :-(<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/0a171b06/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 29, 2015 at 06:00:00am</p></header><div class="content"><p>I&#39;m with Matthew/Craig.<br></p><p>We discussed a couple very ternary-like versions earlier in the thread,<br>which I increasingly think are the best options.<br></p><p>The major objection to this came from Lattner, and his objection, if I have<br>it right, is &quot;this proposal doesn&#39;t add enough functionality to justify the<br>additional complexity/confusion&quot;<br></p><p>The sticking point, at the moment, is formulating a really persuasive<br>argument for &quot;why we need this.&quot; If we can&#39;t do that, this proposal is dead.<br></p><p><br></p><p><br></p><p><br>On Tue, Dec 29, 2015 at 5:38 AM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Dec 29, 2015, at 7:28 AM, Craig Cruden via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; That looks pretty ugly.<br>&gt;<br>&gt; I think the best we can hope for at this point is maybe another keyword<br>&gt; that mirrors switch but is expression based (aka match) — leaving the<br>&gt; ternary ? : expression as is - which is not all that bad since any if else<br>&gt; that becomes a compound expression or more than two resultant values<br>&gt; (chaining) quickly becomes a mess.<br>&gt;<br>&gt;<br>&gt; I agree that this is probably the best path forward at the moment.  There<br>&gt; was a post early on showing a ternary-like switch expression.  I don&#39;t<br>&gt; remember whether there were any specific problems with that idea or not,<br>&gt; but if there aren&#39;t that might best route forward.<br>&gt;<br>&gt;<br>&gt; I am not sure that even a “match” expression would be accepted at this<br>&gt; point because there seems to be general resistance to anything more than<br>&gt; the existing paradigm with a few functional decorations — and the way of<br>&gt; doing things is good enough.<br>&gt;<br>&gt; Concurrency is also currently off the table at this point -- the fact that<br>&gt; immutable pure functional code can theoretically be parsed into a<br>&gt; dependance graph which would allow for out of order [within scope] parallel<br>&gt; execution on different threads [not sure if the overhead of doing so would<br>&gt; outweigh the benefits]…. would also not be of sufficient benefit.<br>&gt;<br>&gt; The primary focus of Swift is a language for UI development, not server<br>&gt; development….<br>&gt;<br>&gt;<br>&gt; On 2015-12-29, at 15:07:57, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What if you could wrap the existing switch statement in a closure and<br>&gt; return a value from that closure like so<br>&gt;<br>&gt; Let value = { switch (other) {<br>&gt; Case .Some(let value):<br>&gt; Return value // because this is in a closure the closure will return the<br>&gt; value not the function this is in<br>&gt; Case .None:<br>&gt; Return &quot;hello&quot;<br>&gt; }}<br>&gt;<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 29 Dec 2015, at 07:53, Howard Lovatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; You can replace the proposed statement `which` (another thread), the<br>&gt; existing statement `?:` (this thread), and the global function `??` (which<br>&gt; is an odd ball) with matching library methods.<br>&gt;<br>&gt; A library method is likely slower than a built in at this stage until the<br>&gt; optimiser improves, but a library function:<br>&gt;<br>&gt;<br>&gt;    1. Is documented right in the IDE including code completion,<br>&gt;    statements aren’t (you don’t see quick help for `for`!)<br>&gt;    2. Having a library function allows the use case to be throughly<br>&gt;    investigated. Is worth while as a language statement? What exact features<br>&gt;    are useful? EG should `which` support pattern matching, general boolean<br>&gt;    expressions, or simply be `Equatable` as shown below?<br>&gt;    3. It is simpler to implement, maintain, and change a library function<br>&gt;    that a built-in.<br>&gt;    4. There is no need for a keyword.<br>&gt;<br>&gt;<br>&gt; First `which`:<br>&gt;<br>&gt; // Alternative to introducing `which` statement<br>&gt;<br>&gt; final<br>&gt; class Which&lt;I: Equatable, R&gt; {<br>&gt;     private<br>&gt;     var result: R?<br>&gt;<br>&gt;<br>&gt;     private<br>&gt;     let which: I<br>&gt;<br>&gt;<br>&gt;     init(_ which: I) {<br>&gt;         self.which = which<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     func match(value: I, @noescape matchResult: () throws -&gt; R) rethrows<br>&gt;  -&gt; Self {<br>&gt;         if self.result == nil &amp;&amp; self.which == value {<br>&gt;             self.result = try matchResult()<br>&gt;         }<br>&gt;         return self<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     func matchDefault(@noescape defaultResult: () throws -&gt; R) rethrows<br>&gt;  -&gt; R {<br>&gt;         switch self.result {<br>&gt;         case .None:<br>&gt;             return try defaultResult()<br>&gt;         case .Some(let value):<br>&gt;             return value<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; // Demo<br>&gt; enum Color {<br>&gt;     case Red, Blue, Green<br>&gt; }<br>&gt;<br>&gt; // Which with a default value<br>&gt; let i1 = Which(Color.Red) // i = 16711680<br>&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;     .match(.Green) { 0x00FF00 }<br>&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;     .matchDefault  { 0 }<br>&gt;<br>&gt; // Which that throws an error if it defaults<br>&gt; let i2: Int! = Which(Color.Green) // i = 16711680<br>&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;     .match(.Green) { 0x00FF00 }<br>&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;     .matchDefault  { nil }  // Cant type call to fatalError as no return,<br>&gt; hence nil and type Int! (note !)<br>&gt;<br>&gt;<br>&gt; Note runtime check for default rather than static check via compiler, not<br>&gt; as good but not a big deal most of the time. The vast majority of languages<br>&gt; don&#39;t do a compiler check on `switch`.<br>&gt;<br>&gt; Similarly the `?:` statement can be replaced:<br>&gt;<br>&gt; // Replacement for `?:` operator<br>&gt;<br>&gt; struct IfFalse&lt;R&gt; {<br>&gt;     private<br>&gt;     let result: R?<br>&gt;<br>&gt;<br>&gt;     func ifFalse(@noescape falseResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;         switch self.result {<br>&gt;         case .None:<br>&gt;             return try falseResult()<br>&gt;         case .Some(let value):<br>&gt;             return value<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; extension Bool {<br>&gt;     func ifTrue&lt;R&gt;(@noescape trueResult: () throws -&gt; R) rethrows -&gt;<br>&gt; IfFalse&lt;R&gt; {<br>&gt;         switch self {<br>&gt;         case true:<br>&gt;             return IfFalse(result: try trueResult())<br>&gt;         case false:<br>&gt;             return IfFalse(result: nil)<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; // Demo<br>&gt; let sB = true.ifTrue{&quot;True&quot;}.ifFalse{&quot;False&quot;} // &quot;True&quot; - for some reason<br>&gt; needs {} and not () thinks () form throws<br>&gt;<br>&gt;<br>&gt; Whilst the `??` operator is already a library function it is difficult to<br>&gt; see in an expression, it gets buried, and is inconsistent in style because<br>&gt; it is a non-mathematical operator and a symbol rather than a keyword or<br>&gt; keyword followed by a symbol. The space either side of the `??` operator<br>&gt; also makes it look like both arguments are of equal importance, whereas it<br>&gt; is the left hand side that is important and the right hand side is just a<br>&gt; catch.<br>&gt;<br>&gt; // Replacement for `??` operator<br>&gt;<br>&gt; extension Optional {<br>&gt;     func ifNil(@noescape nilResult: () throws -&gt; Wrapped) rethrows -&gt;<br>&gt; Wrapped {<br>&gt;         switch self {<br>&gt;         case .None:<br>&gt;             return try nilResult()<br>&gt;         case .Some(let value):<br>&gt;             return value<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; // Demo<br>&gt; let o: String? = nil<br>&gt; let sO = o.ifNil{&quot;Nil&quot;} // &quot;Nil&quot; - for some reason needs {} and not ()<br>&gt; thinks () form throws<br>&gt;<br>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On 29 Dec 2015, at 4:00 AM, Thorsten Seitz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; No exhaustiveness checking is a serious deficiency :-(<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;<br>&gt; Actually, this *almost* does what you want. No @autoclosure for the values<br>&gt; and no exhaustiveness checking, but otherwise...<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/66277494/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 29, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 29, 2015, at 8:54 AM, Charles Constant &lt;charles at charlesism.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m with Matthew/Craig.<br>&gt; <br>&gt; We discussed a couple very ternary-like versions earlier in the thread, which I increasingly think are the best options.<br>&gt; <br>&gt; The major objection to this came from Lattner, and his objection, if I have it right, is &quot;this proposal doesn&#39;t add enough functionality to justify the additional complexity/confusion&quot;<br>&gt; <br>&gt; The sticking point, at the moment, is formulating a really persuasive argument for &quot;why we need this.&quot; If we can&#39;t do that, this proposal is dead.<br></p><p>I was originally hoping we could remove ternary and just make if and switch expressions.  <br></p><p>However, It seems to be clear that 1) there are enough challenges to making if and switch expressions that it won’t happen any time soon, if ever and 2) the conciseness of ternary is highly valued and it will be hard to beat it on conciseness.<br></p><p>Given that, a ternary-like switch expression seems pretty valuable IMO.  I think concrete examples showing how it helps to increase readability over: 1) switch statements and 2) immediately invoked closures are the best way to demonstrate the need for this feature.<br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Dec 29, 2015 at 5:38 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Dec 29, 2015, at 7:28 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; That looks pretty ugly.  <br>&gt;&gt; <br>&gt;&gt; I think the best we can hope for at this point is maybe another keyword that mirrors switch but is expression based (aka match) — leaving the ternary ? : expression as is - which is not all that bad since any if else that becomes a compound expression or more than two resultant values (chaining) quickly becomes a mess.  <br>&gt; <br>&gt; I agree that this is probably the best path forward at the moment.  There was a post early on showing a ternary-like switch expression.  I don&#39;t remember whether there were any specific problems with that idea or not, but if there aren&#39;t that might best route forward.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I am not sure that even a “match” expression would be accepted at this point because there seems to be general resistance to anything more than the existing paradigm with a few functional decorations — and the way of doing things is good enough.  <br>&gt;&gt; <br>&gt;&gt; Concurrency is also currently off the table at this point -- the fact that immutable pure functional code can theoretically be parsed into a dependance graph which would allow for out of order [within scope] parallel execution on different threads [not sure if the overhead of doing so would outweigh the benefits]…. would also not be of sufficient benefit. <br>&gt;&gt; <br>&gt;&gt; The primary focus of Swift is a language for UI development, not server development….<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2015-12-29, at 15:07:57, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if you could wrap the existing switch statement in a closure and return a value from that closure like so<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let value = { switch (other) {<br>&gt;&gt;&gt; Case .Some(let value):<br>&gt;&gt;&gt; Return value // because this is in a closure the closure will return the value not the function this is in<br>&gt;&gt;&gt; Case .None:<br>&gt;&gt;&gt; Return &quot;hello&quot; <br>&gt;&gt;&gt; }}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 29 Dec 2015, at 07:53, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You can replace the proposed statement `which` (another thread), the existing statement `?:` (this thread), and the global function `??` (which is an odd ball) with matching library methods.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A library method is likely slower than a built in at this stage until the optimiser improves, but a library function:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is documented right in the IDE including code completion, statements aren’t (you don’t see quick help for `for`!)<br>&gt;&gt;&gt;&gt; Having a library function allows the use case to be throughly investigated. Is worth while as a language statement? What exact features are useful? EG should `which` support pattern matching, general boolean expressions, or simply be `Equatable` as shown below?<br>&gt;&gt;&gt;&gt; It is simpler to implement, maintain, and change a library function that a built-in.<br>&gt;&gt;&gt;&gt; There is no need for a keyword.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; First `which`:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Alternative to introducing `which` statement<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; final<br>&gt;&gt;&gt;&gt; class Which&lt;I: Equatable, R&gt; {<br>&gt;&gt;&gt;&gt;     private<br>&gt;&gt;&gt;&gt;     var result: R?<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     private<br>&gt;&gt;&gt;&gt;     let which: I<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     init(_ which: I) {<br>&gt;&gt;&gt;&gt;         self.which = which<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     func match(value: I, @noescape matchResult: () throws -&gt; R) rethrows -&gt; Self {<br>&gt;&gt;&gt;&gt;         if self.result == nil &amp;&amp; self.which == value {<br>&gt;&gt;&gt;&gt;             self.result = try matchResult()<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;         return self<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     func matchDefault(@noescape defaultResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;&gt;&gt;&gt;         switch self.result {<br>&gt;&gt;&gt;&gt;         case .None:<br>&gt;&gt;&gt;&gt;             return try defaultResult()<br>&gt;&gt;&gt;&gt;         case .Some(let value):<br>&gt;&gt;&gt;&gt;             return value<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Demo<br>&gt;&gt;&gt;&gt; enum Color {<br>&gt;&gt;&gt;&gt;     case Red, Blue, Green<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Which with a default value<br>&gt;&gt;&gt;&gt; let i1 = Which(Color.Red) // i = 16711680 &lt;tel:16711680&gt;<br>&gt;&gt;&gt;&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;&gt;&gt;&gt;     .match(.Green) { 0x00FF00 }<br>&gt;&gt;&gt;&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;&gt;&gt;&gt;     .matchDefault  { 0 }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Which that throws an error if it defaults<br>&gt;&gt;&gt;&gt; let i2: Int! = Which(Color.Green) // i = 16711680 &lt;tel:16711680&gt;<br>&gt;&gt;&gt;&gt;     .match(.Red)   { 0xFF0000 }<br>&gt;&gt;&gt;&gt;     .match(.Green) { 0x00FF00 }<br>&gt;&gt;&gt;&gt;     .match(.Blue)  { 0x00000FF }<br>&gt;&gt;&gt;&gt;     .matchDefault  { nil }  // Cant type call to fatalError as no return, hence nil and type Int! (note !)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Note runtime check for default rather than static check via compiler, not as good but not a big deal most of the time. The vast majority of languages don&#39;t do a compiler check on `switch`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Similarly the `?:` statement can be replaced:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Replacement for `?:` operator<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; struct IfFalse&lt;R&gt; {<br>&gt;&gt;&gt;&gt;     private<br>&gt;&gt;&gt;&gt;     let result: R?<br>&gt;&gt;&gt;&gt;     <br>&gt;&gt;&gt;&gt;     func ifFalse(@noescape falseResult: () throws -&gt; R) rethrows -&gt; R {<br>&gt;&gt;&gt;&gt;         switch self.result {<br>&gt;&gt;&gt;&gt;         case .None:<br>&gt;&gt;&gt;&gt;             return try falseResult()<br>&gt;&gt;&gt;&gt;         case .Some(let value):<br>&gt;&gt;&gt;&gt;             return value<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Bool {<br>&gt;&gt;&gt;&gt;     func ifTrue&lt;R&gt;(@noescape trueResult: () throws -&gt; R) rethrows -&gt; IfFalse&lt;R&gt; {<br>&gt;&gt;&gt;&gt;         switch self {<br>&gt;&gt;&gt;&gt;         case true:<br>&gt;&gt;&gt;&gt;             return IfFalse(result: try trueResult())<br>&gt;&gt;&gt;&gt;         case false:<br>&gt;&gt;&gt;&gt;             return IfFalse(result: nil)<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Demo<br>&gt;&gt;&gt;&gt; let sB = true.ifTrue{&quot;True&quot;}.ifFalse{&quot;False&quot;} // &quot;True&quot; - for some reason needs {} and not () thinks () form throws<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Whilst the `??` operator is already a library function it is difficult to see in an expression, it gets buried, and is inconsistent in style because it is a non-mathematical operator and a symbol rather than a keyword or keyword followed by a symbol. The space either side of the `??` operator also makes it look like both arguments are of equal importance, whereas it is the left hand side that is important and the right hand side is just a catch.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Replacement for `??` operator<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Optional {<br>&gt;&gt;&gt;&gt;     func ifNil(@noescape nilResult: () throws -&gt; Wrapped) rethrows -&gt; Wrapped {<br>&gt;&gt;&gt;&gt;         switch self {<br>&gt;&gt;&gt;&gt;         case .None:<br>&gt;&gt;&gt;&gt;             return try nilResult()<br>&gt;&gt;&gt;&gt;         case .Some(let value):<br>&gt;&gt;&gt;&gt;             return value<br>&gt;&gt;&gt;&gt;         }<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Demo<br>&gt;&gt;&gt;&gt; let o: String? = nil<br>&gt;&gt;&gt;&gt; let sO = o.ifNil{&quot;Nil&quot;} // &quot;Nil&quot; - for some reason needs {} and not () thinks () form throws<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 29 Dec 2015, at 4:00 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; No exhaustiveness checking is a serious deficiency :-(<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 17.12.2015 um 08:09 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Actually, this *almost* does what you want. No @autoclosure for the values and no exhaustiveness checking, but otherwise...<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/44a65c8b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ddfdaf0f44f9f985f1de1b27edc06ae9?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Vester Gottfried</string> &lt;vester.gottfried at gmail.com&gt;<p>December 17, 2015 at 01:00:00pm</p></header><div class="content"><p>What do you think about this?<br></p><p>let i = if(x == y, 123, 456)<br></p><p>the second parameter could be optional, so if the condition is false you<br>would get a nil<br></p><p>let i = if(x == y, 123) // may return nil<br></p><p>making it function like would make a bit more natural to chain other<br>functions<br></p><p>let i = if(x == y, 123).map( ... )<br></p><p>I am usually not an opponent of the ternary conditional operator, but I do<br>know instances where beginner were struggling with it, when they first<br>encountered it. That you cannot google it makes it worse. And in Swift the<br>question mark has a special meaning regarding optionals, that other<br>languages don&#39;t have.<br></p><p>This is just an quick idea though. I agree with Chris, that we should only<br>replace it, when we are really sure the new solution is better.<br></p><p><br>On Thu, Dec 17, 2015 at 4:36 AM, Charles Constant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; One more thought. This syntax would also placate ternary haters. I think<br>&gt; the traditional complaint about ternary expressions is that people can&#39;t<br>&gt; remember the order of the true and false values. This would not be an issue<br>&gt; with:<br>&gt;<br>&gt;  let i = boo ? ( true: 123, false: 456 )<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/bc815bfb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 4:36 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; So, just trying to understand if you think this is a good direction to continue with or you think it is inherently flawed. <br>&gt; <br>&gt; Can you give me an example of a function argument list or array separator that we would have a problem? I will see if I can address it.<br></p><p>Transform this into your proposed syntax.<br>func foo(a : Int, b : Float) {}<br>foo(true ? 1 : 2, 3)<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Thanks for the feedback!<br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 3:14 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 16, 2015, at 2:56 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I believe it also addresses the issues that Chris mentioned. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; to select from a boolean, a or b:<br>&gt;&gt;&gt; let a = sel -&gt;&gt; true, false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; to select from an enum values as in a switch:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let a = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3 <br>&gt;&gt;&gt; let b = sel -&gt;&gt; .Red: 1, .Green: 2, .Blue: 3, default: 4<br>&gt;&gt;&gt; let c = sel -&gt;&gt; case .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt;&gt;&gt; let d = sel -&gt;&gt; .Red: 1, (sel -&gt;&gt; .Sun: .Yellow, .Moon: .White, .Stars: .Twinkle), .Green: 2, .Blue: 3, default: 4<br>&gt;&gt;&gt; let e = sel -&gt;&gt; cases: .Red: 1, case .Green: 2, case .Blue: 3, default: 4<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Disadvantages:<br>&gt;&gt;&gt; • May be a slight improvement in readability. Operators have to be looked up if you are not familiar with them. <br>&gt;&gt;&gt; • New concept that will have to be learned and not present in most C like languages so needs to be learned. <br>&gt;&gt; <br>&gt;&gt; This specific proposal has another problem.  Since you’re using “,” you’ve introduced grammar problems.  For example, you wouldn’t be able to use this operator in a function argument list or array literal, because the , would be parsed as part of the argument list separator.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/7e8c549a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 15, 2015 at 08:00:00am</p></header><div class="content"><p>Thank you Paul for the initial draft.<br></p><p>Here is the a draft version that I intend to submit.<br></p><p>https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md<br></p><p>On Mon, Dec 14, 2015 at 10:41 PM, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Agreed, I was thinking to I really want turn something that was 2<br>&gt; characters into 10 and will I really be happy with that at the end of the<br>&gt; day. A properly formatted ternary can be quite easy to read, it is when<br>&gt; people get sloppy and try to cram too much into one expression that they<br>&gt; get really hard to follow. For example,<br>&gt;<br>&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;<br>&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;<br>&gt; return a &lt; b<br>&gt; ? b &lt; c<br>&gt; ? b<br>&gt; : a &lt; c<br>&gt; ? c<br>&gt; : a<br>&gt; : a &lt; c<br>&gt; ? a<br>&gt; : b &lt; c<br>&gt; ? c<br>&gt; : b<br>&gt;<br>&gt; Is this new syntax helping?<br>&gt;<br>&gt; return if a &lt; b<br>&gt; then if b &lt; c<br>&gt; then b<br>&gt; else if a &lt; c<br>&gt; then c<br>&gt; else a<br>&gt; else if a &lt; c<br>&gt; then a<br>&gt; else if b &lt; c<br>&gt; then c<br>&gt; else b<br>&gt;<br>&gt; I found this translation quite tricky to do. maybe parens help?<br>&gt;<br>&gt; return (if a &lt; b<br>&gt; then (if b &lt; c<br>&gt; then b<br>&gt; else (if a &lt; c<br>&gt; then c<br>&gt; else a))<br>&gt; else (if a &lt; c<br>&gt; then a<br>&gt; else (if b &lt; c<br>&gt; then c<br>&gt; else b)))<br>&gt;<br>&gt; Not really and I still I found this hugely frustrating, so much so that I<br>&gt; am going to drop all support for this proposal and remove my name from it.<br>&gt; If anyone wants to take over feel free.<br>&gt;<br>&gt; Others still keen on the idea should try this experiment. It convinced me<br>&gt; is horrible idea :-) I don’t want to be blamed for it by every Swift<br>&gt; programmer in the future.<br>&gt;<br>&gt; I do still however like the Swift Expressions.<br>&gt;<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 14, 2015, at 4:50 PM, Nick Shelley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I however frequently hear people saying ternary should be avoided because<br>&gt;&gt; they are hard to read or they hate them.<br>&gt;<br>&gt;<br>&gt; FWIW, I used to be one of those people, but then started working on a team<br>&gt; where one member liked them. He didn&#39;t force them on us, but after enough<br>&gt; code reviews where he showed us how to turn 5-line if/else statements into<br>&gt; simple one-line ternary expressions, I got used to reading them and now<br>&gt; love them and use them often.<br>&gt;<br>&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s<br>&gt; hard for them to read because it&#39;s not the for loop they&#39;re used to). I<br>&gt; think it&#39;s a simple matter of getting used to it.<br>&gt;<br>&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy<br>&gt;&gt; in responding to any email, it has a bit more to do with my cold than the<br>&gt;&gt; suggestions.<br>&gt;&gt;<br>&gt;&gt; I have split the original proposal into two proposals and incorporated a<br>&gt;&gt; bunch of feedback. Splitting it up has been extremely good, not only does<br>&gt;&gt; it improve readability, I am actually finding I could take or leave the<br>&gt;&gt; ternary replacement idea. But the proposal will be there if enough everyone<br>&gt;&gt; thinks it is a good idea. We could put it to a vote to see if there is<br>&gt;&gt; enough interest and I would be happy to take it further if there is. I<br>&gt;&gt; suspect this thread would not exist at all if there was no interest in it.<br>&gt;&gt; However, I am finding I am far more interested in getting switch<br>&gt;&gt; expressions.<br>&gt;&gt;<br>&gt;&gt; Ternary Replacement<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt; This is a valid question, there is an advantage in compactness to ternary<br>&gt;&gt; expressions. I however frequently hear people saying ternary should be<br>&gt;&gt; avoided because they are hard to read or they hate them. There seems to<br>&gt;&gt; many who either stronly dislike it or don&#39;t care.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; However, it doesn’t actually show that it is solving the objections<br>&gt;&gt; people have to the ternary operator.  It is true that some people find the<br>&gt;&gt; ?: syntax weird, but an equal number of people say that the problem is that<br>&gt;&gt; you’re putting complex conditional logic inline into the middle of an<br>&gt;&gt; expression - this proposal actually makes that objection worse.  There are<br>&gt;&gt; also other objections to ?:, and until you enumerate them, it is hard to<br>&gt;&gt; see whether this proposal is making things better or worse.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/4143c7fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 15, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 8:39 AM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thank you Paul for the initial draft. <br>&gt; <br>&gt; Here is the a draft version that I intend to submit. <br>&gt; <br>&gt; https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md &lt;https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md&gt;<br>Random comment, but in your code examples like this:<br></p><p> let color = (if stop then Color.red else Color.green)  <br></p><p><br>I’d suggest including the existing ternary version.  The proposal is really about replacing ternary with this syntax, so it should show the “before and after”, not just the after.  Your pitch is that code will look better / be easier to read if this proposal goes through, so you should demonstrate that.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/a890811e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/92cf2b89d0c7dbd6e31cb1809a4d5016?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>J. Cheyo Jimenez</string> &lt;cheyo84 at gmail.com&gt;<p>December 15, 2015 at 08:00:00am</p></header><div class="content"><p>Thank you Paul for the initial draft.<br></p><p>Here is the a draft version that I intend to submit.<br></p><p>https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md<br></p><p>On Monday, December 14, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Agreed, I was thinking to I really want turn something that was 2<br>&gt; characters into 10 and will I really be happy with that at the end of the<br>&gt; day. A properly formatted ternary can be quite easy to read, it is when<br>&gt; people get sloppy and try to cram too much into one expression that they<br>&gt; get really hard to follow. For example,<br>&gt;<br>&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;<br>&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;<br>&gt; return a &lt; b<br>&gt; ? b &lt; c<br>&gt; ? b<br>&gt; : a &lt; c<br>&gt; ? c<br>&gt; : a<br>&gt; : a &lt; c<br>&gt; ? a<br>&gt; : b &lt; c<br>&gt; ? c<br>&gt; : b<br>&gt;<br>&gt; Is this new syntax helping?<br>&gt;<br>&gt; return if a &lt; b<br>&gt; then if b &lt; c<br>&gt; then b<br>&gt; else if a &lt; c<br>&gt; then c<br>&gt; else a<br>&gt; else if a &lt; c<br>&gt; then a<br>&gt; else if b &lt; c<br>&gt; then c<br>&gt; else b<br>&gt;<br>&gt; I found this translation quite tricky to do. maybe parens help?<br>&gt;<br>&gt; return (if a &lt; b<br>&gt; then (if b &lt; c<br>&gt; then b<br>&gt; else (if a &lt; c<br>&gt; then c<br>&gt; else a))<br>&gt; else (if a &lt; c<br>&gt; then a<br>&gt; else (if b &lt; c<br>&gt; then c<br>&gt; else b)))<br>&gt;<br>&gt; Not really and I still I found this hugely frustrating, so much so that I<br>&gt; am going to drop all support for this proposal and remove my name from it.<br>&gt; If anyone wants to take over feel free.<br>&gt;<br>&gt; Others still keen on the idea should try this experiment. It convinced me<br>&gt; is horrible idea :-) I don’t want to be blamed for it by every Swift<br>&gt; programmer in the future.<br>&gt;<br>&gt; I do still however like the Swift Expressions.<br>&gt;<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 14, 2015, at 4:50 PM, Nick Shelley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I however frequently hear people saying ternary should be avoided because<br>&gt;&gt; they are hard to read or they hate them.<br>&gt;<br>&gt;<br>&gt; FWIW, I used to be one of those people, but then started working on a team<br>&gt; where one member liked them. He didn&#39;t force them on us, but after enough<br>&gt; code reviews where he showed us how to turn 5-line if/else statements into<br>&gt; simple one-line ternary expressions, I got used to reading them and now<br>&gt; love them and use them often.<br>&gt;<br>&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s<br>&gt; hard for them to read because it&#39;s not the for loop they&#39;re used to). I<br>&gt; think it&#39;s a simple matter of getting used to it.<br>&gt;<br>&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy<br>&gt;&gt; in responding to any email, it has a bit more to do with my cold than the<br>&gt;&gt; suggestions.<br>&gt;&gt;<br>&gt;&gt; I have split the original proposal into two proposals and incorporated a<br>&gt;&gt; bunch of feedback. Splitting it up has been extremely good, not only does<br>&gt;&gt; it improve readability, I am actually finding I could take or leave the<br>&gt;&gt; ternary replacement idea. But the proposal will be there if enough everyone<br>&gt;&gt; thinks it is a good idea. We could put it to a vote to see if there is<br>&gt;&gt; enough interest and I would be happy to take it further if there is. I<br>&gt;&gt; suspect this thread would not exist at all if there was no interest in it.<br>&gt;&gt; However, I am finding I am far more interested in getting switch<br>&gt;&gt; expressions.<br>&gt;&gt;<br>&gt;&gt; Ternary Replacement<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt; This is a valid question, there is an advantage in compactness to ternary<br>&gt;&gt; expressions. I however frequently hear people saying ternary should be<br>&gt;&gt; avoided because they are hard to read or they hate them. There seems to<br>&gt;&gt; many who either stronly dislike it or don&#39;t care.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; However, it doesn’t actually show that it is solving the objections<br>&gt;&gt; people have to the ternary operator.  It is true that some people find the<br>&gt;&gt; ?: syntax weird, but an equal number of people say that the problem is that<br>&gt;&gt; you’re putting complex conditional logic inline into the middle of an<br>&gt;&gt; expression - this proposal actually makes that objection worse.  There are<br>&gt;&gt; also other objections to ?:, and until you enumerate them, it is hard to<br>&gt;&gt; see whether this proposal is making things better or worse.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/701e2d9b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 15, 2015 at 09:00:00am</p></header><div class="content"><p>Specifically on this point:<br></p><p>The use of &#39;then&#39; is more of a modifier to the &#39;if&#39; statement than a keyword so it should be possible to allow the use of then in the same way &#39;let required = 1 ; let convenience = 1&#39; is legal in swift. <br></p><p>We can get away with this because &#39;required&#39; and &#39;convenience&#39; only appear in a type, where arbitrary expressions are not allowed. In this case, &#39;then&#39; is a separator between two expressions. We can probably recover if the user forgets it, but only if it&#39;s a true keyword.<br></p><p>I&#39;ll repost what I said on another thread: when adding new syntax, it&#39;s important to consider not just complete, correct code, but also the possible error and intermediate states that the compiler and SourceKit have to deal with.<br></p><p>Jordan<br></p><p><br></p><p>&gt; On Dec 15, 2015, at 8:38 , J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thank you Paul for the initial draft. <br>&gt; <br>&gt; Here is the a draft version that I intend to submit. <br>&gt; <br>&gt; https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md &lt;https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md&gt;<br>&gt; <br>&gt; On Monday, December 14, 2015, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Agreed, I was thinking to I really want turn something that was 2 characters into 10 and will I really be happy with that at the end of the day. A properly formatted ternary can be quite easy to read, it is when people get sloppy and try to cram too much into one expression that they get really hard to follow. For example,<br>&gt; <br>&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt; <br>&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt; <br>&gt;     return a &lt; b<br>&gt; 	? b &lt; c <br>&gt; 	  ? b <br>&gt;           : a &lt; c <br>&gt; 	     ? c <br>&gt; 	     : a <br>&gt; 	: a &lt; c <br>&gt; 	  ? a <br>&gt; 	  : b &lt; c  <br>&gt;              ? c <br>&gt; 	     : b<br>&gt; <br>&gt; Is this new syntax helping?<br>&gt; <br>&gt;     return if a &lt; b <br>&gt; 	then if b &lt; c  <br>&gt; 	  then b <br>&gt;           else if a &lt; c <br>&gt; 	     then c <br>&gt; 	     else a <br>&gt; 	else if a &lt; c <br>&gt; 	  then a <br>&gt; 	  else if b &lt; c  <br>&gt;              then c <br>&gt; 	     else b<br>&gt; <br>&gt; I found this translation quite tricky to do. maybe parens help?<br>&gt; <br>&gt;     return (if a &lt; b <br>&gt; 	then (if b &lt; c  <br>&gt; 	  then b <br>&gt;           else (if a &lt; c <br>&gt; 	     then c <br>&gt; 	     else a))<br>&gt; 	else (if a &lt; c <br>&gt; 	  then a <br>&gt; 	  else (if b &lt; c  <br>&gt;              then c <br>&gt; 	     else b)))<br>&gt; <br>&gt; Not really and I still I found this hugely frustrating, so much so that I am going to drop all support for this proposal and remove my name from it. If anyone wants to take over feel free. <br>&gt; <br>&gt; Others still keen on the idea should try this experiment. It convinced me is horrible idea :-) I don’t want to be blamed for it by every Swift programmer in the future. <br>&gt; <br>&gt; I do still however like the Swift Expressions.<br>&gt; <br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 14, 2015, at 4:50 PM, Nick Shelley via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them.<br>&gt;&gt; <br>&gt;&gt; FWIW, I used to be one of those people, but then started working on a team where one member liked them. He didn&#39;t force them on us, but after enough code reviews where he showed us how to turn 5-line if/else statements into simple one-line ternary expressions, I got used to reading them and now love them and use them often.<br>&gt;&gt; <br>&gt;&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s hard for them to read because it&#39;s not the for loop they&#39;re used to). I think it&#39;s a simple matter of getting used to it.<br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ternary Replacement<br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt; This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/947ca7b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 15, 2015 at 09:00:00am</p></header><div class="content"><p>Got it. I&#39;ll revise this.  Thank you.<br></p><p>On Tuesday, December 15, 2015, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; Specifically on this point:<br>&gt;<br>&gt; The use of &#39;then&#39; is more of a modifier to the &#39;if&#39; statement than a<br>&gt; keyword so it should be possible to allow the use of then in the same<br>&gt; way &#39;let required = 1 ; let convenience = 1&#39; is legal in swift.<br>&gt;<br>&gt;<br>&gt; We can get away with this because &#39;required&#39; and &#39;convenience&#39; only appear<br>&gt; in a type, where arbitrary expressions are not allowed. In this case,<br>&gt; &#39;then&#39; is a separator between two expressions. We can probably recover if<br>&gt; the user forgets it, but only if it&#39;s a true keyword.<br>&gt;<br>&gt; I&#39;ll repost what I said on another thread: when adding new syntax, it&#39;s<br>&gt; important to consider not just complete, correct code, but also the<br>&gt; possible error and intermediate states that the compiler and SourceKit have<br>&gt; to deal with.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 15, 2015, at 8:38 , J. Cheyo Jimenez via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Thank you Paul for the initial draft.<br>&gt;<br>&gt; Here is the a draft version that I intend to submit.<br>&gt;<br>&gt;<br>&gt; https://github.com/masters3d/swift-evolution/blob/ReplaceTernary/proposals/00-Replace%20%3F:%20Ternary%20Operator%20with%20if-then-else%20expression.md<br>&gt;<br>&gt; On Monday, December 14, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Agreed, I was thinking to I really want turn something that was 2<br>&gt;&gt; characters into 10 and will I really be happy with that at the end of the<br>&gt;&gt; day. A properly formatted ternary can be quite easy to read, it is when<br>&gt;&gt; people get sloppy and try to cram too much into one expression that they<br>&gt;&gt; get really hard to follow. For example,<br>&gt;&gt;<br>&gt;&gt;     return (a&lt;b) ? (b&lt;c) ? b : (a&lt;c) ? c : a : (a&lt;c) ? a : (b&lt;c) ? c : b;<br>&gt;&gt;<br>&gt;&gt; If formatted like this becomes easier follow the logic (at least to me):<br>&gt;&gt;<br>&gt;&gt; return a &lt; b<br>&gt;&gt; ? b &lt; c<br>&gt;&gt; ? b<br>&gt;&gt; : a &lt; c<br>&gt;&gt; ? c<br>&gt;&gt; : a<br>&gt;&gt; : a &lt; c<br>&gt;&gt; ? a<br>&gt;&gt; : b &lt; c<br>&gt;&gt; ? c<br>&gt;&gt; : b<br>&gt;&gt;<br>&gt;&gt; Is this new syntax helping?<br>&gt;&gt;<br>&gt;&gt; return if a &lt; b<br>&gt;&gt; then if b &lt; c<br>&gt;&gt; then b<br>&gt;&gt; else if a &lt; c<br>&gt;&gt; then c<br>&gt;&gt; else a<br>&gt;&gt; else if a &lt; c<br>&gt;&gt; then a<br>&gt;&gt; else if b &lt; c<br>&gt;&gt; then c<br>&gt;&gt; else b<br>&gt;&gt;<br>&gt;&gt; I found this translation quite tricky to do. maybe parens help?<br>&gt;&gt;<br>&gt;&gt; return (if a &lt; b<br>&gt;&gt; then (if b &lt; c<br>&gt;&gt; then b<br>&gt;&gt; else (if a &lt; c<br>&gt;&gt; then c<br>&gt;&gt; else a))<br>&gt;&gt; else (if a &lt; c<br>&gt;&gt; then a<br>&gt;&gt; else (if b &lt; c<br>&gt;&gt; then c<br>&gt;&gt; else b)))<br>&gt;&gt;<br>&gt;&gt; Not really and I still I found this hugely frustrating, so much so that I<br>&gt;&gt; am going to drop all support for this proposal and remove my name from it.<br>&gt;&gt; If anyone wants to take over feel free.<br>&gt;&gt;<br>&gt;&gt; Others still keen on the idea should try this experiment. It convinced me<br>&gt;&gt; is horrible idea :-) I don’t want to be blamed for it by every Swift<br>&gt;&gt; programmer in the future.<br>&gt;&gt;<br>&gt;&gt; I do still however like the Swift Expressions.<br>&gt;&gt;<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 14, 2015, at 4:50 PM, Nick Shelley via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I however frequently hear people saying ternary should be avoided because<br>&gt;&gt;&gt; they are hard to read or they hate them.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; FWIW, I used to be one of those people, but then started working on a<br>&gt;&gt; team where one member liked them. He didn&#39;t force them on us, but after<br>&gt;&gt; enough code reviews where he showed us how to turn 5-line if/else<br>&gt;&gt; statements into simple one-line ternary expressions, I got used to reading<br>&gt;&gt; them and now love them and use them often.<br>&gt;&gt;<br>&gt;&gt; People also hate map, flatMap, reduce, etc., for the same reasons (it&#39;s<br>&gt;&gt; hard for them to read because it&#39;s not the for loop they&#39;re used to). I<br>&gt;&gt; think it&#39;s a simple matter of getting used to it.<br>&gt;&gt;<br>&gt;&gt; On Mon, Dec 14, 2015 at 11:57 AM, Chris Lattner via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy<br>&gt;&gt;&gt; in responding to any email, it has a bit more to do with my cold than the<br>&gt;&gt;&gt; suggestions.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have split the original proposal into two proposals and incorporated a<br>&gt;&gt;&gt; bunch of feedback. Splitting it up has been extremely good, not only does<br>&gt;&gt;&gt; it improve readability, I am actually finding I could take or leave the<br>&gt;&gt;&gt; ternary replacement idea. But the proposal will be there if enough everyone<br>&gt;&gt;&gt; thinks it is a good idea. We could put it to a vote to see if there is<br>&gt;&gt;&gt; enough interest and I would be happy to take it further if there is. I<br>&gt;&gt;&gt; suspect this thread would not exist at all if there was no interest in it.<br>&gt;&gt;&gt; However, I am finding I am far more interested in getting switch<br>&gt;&gt;&gt; expressions.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ternary Replacement<br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt;&gt; This is a valid question, there is an advantage in compactness to<br>&gt;&gt;&gt; ternary expressions. I however frequently hear people saying ternary should<br>&gt;&gt;&gt; be avoided because they are hard to read or they hate them. There seems to<br>&gt;&gt;&gt; many who either stronly dislike it or don&#39;t care.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; However, it doesn’t actually show that it is solving the objections<br>&gt;&gt;&gt; people have to the ternary operator.  It is true that some people find the<br>&gt;&gt;&gt; ?: syntax weird, but an equal number of people say that the problem is that<br>&gt;&gt;&gt; you’re putting complex conditional logic inline into the middle of an<br>&gt;&gt;&gt; expression - this proposal actually makes that objection worse.  There are<br>&gt;&gt;&gt; also other objections to ?:, and until you enumerate them, it is hard to<br>&gt;&gt;&gt; see whether this proposal is making things better or worse.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/0aba19ab/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 14, 2015 at 09:00:00pm</p></header><div class="content"><p>Hi Chris,<br></p><p>Yes definitely, after splitting the proposal up, and some of the feedback I got on the first draft, I became less enamored of the idea and I understand the objections, and we need answer the question &quot;is this really better?”.  If others have strong reasons why they really don’t like ternary or reasons they may have heard, please let me know and I would be happy to add them to the proposal. <br></p><p>- Paul <br></p><p>&gt; On Dec 14, 2015, at 10:57 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt;&gt; <br>&gt;&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt;&gt; <br>&gt;&gt; Ternary Replacement<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt; Quick comment.  The proposal states:<br>&gt; <br>&gt; <br>&gt; Is it really better? Why not just keep ternary expressions?<br>&gt; This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br>&gt; <br>&gt; <br>&gt; However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/09fb8a2b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 15, 2015 at 12:00:00pm</p></header><div class="content"><p>I would actually prefer the if statement become more functional vs flow-control which would encompass the ternary statement.<br></p><p>So <br></p><p>let x = if (boolean) “true” else “false”<br></p><p>or <br></p><p>let x =<br>	if (boolean)<br>		“true”<br>	else <br>		“false”<br></p><p>or <br></p><p>let n = <br>	if (boolean) {<br>		print(“test”)<br>		“true”<br>	}<br>	else <br>		false<br></p><p><br>If becomes just another function as opposed to pure flow-control.<br></p><p>A similar approach to switch would also be nice.  <br></p><p>Before Swift was really just a vehicle for UI applications, but now it is aiming to be more of a general language for server as well (available on Linux).  UI’s generally by their nature are object-oriented, and thus extending it’s functional side was not a priority….. but moving forward it would be nice if it incorporated more of Scala’s functional paradigm into the language (where it does not overtly affect performance) so that developers can program functionally or object-oriented - whatever is the best fit.  <br></p><p>-Craig<br></p><p>&gt; On 2015-12-15, at 12:01:46, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; Yes definitely, after splitting the proposal up, and some of the feedback I got on the first draft, I became less enamored of the idea and I understand the objections, and we need answer the question &quot;is this really better?”.  If others have strong reasons why they really don’t like ternary or reasons they may have heard, please let me know and I would be happy to add them to the proposal. <br>&gt; <br>&gt; - Paul <br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 10:57 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 14, 2015, at 12:19 AM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Once again, thank you for all the feedback, if I sound in anyway grumpy in responding to any email, it has a bit more to do with my cold than the suggestions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have split the original proposal into two proposals and incorporated a bunch of feedback. Splitting it up has been extremely good, not only does it improve readability, I am actually finding I could take or leave the ternary replacement idea. But the proposal will be there if enough everyone thinks it is a good idea. We could put it to a vote to see if there is enough interest and I would be happy to take it further if there is. I suspect this thread would not exist at all if there was no interest in it. However, I am finding I am far more interested in getting switch expressions. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ternary Replacement<br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0021.md &lt;https://github.com/possen/swift-evolution/blob/master/0021.md&gt;<br>&gt;&gt; Quick comment.  The proposal states:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Is it really better? Why not just keep ternary expressions?<br>&gt;&gt; This is a valid question, there is an advantage in compactness to ternary expressions. I however frequently hear people saying ternary should be avoided because they are hard to read or they hate them. There seems to many who either stronly dislike it or don&#39;t care.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; However, it doesn’t actually show that it is solving the objections people have to the ternary operator.  It is true that some people find the ?: syntax weird, but an equal number of people say that the problem is that you’re putting complex conditional logic inline into the middle of an expression - this proposal actually makes that objection worse.  There are also other objections to ?:, and until you enumerate them, it is hard to see whether this proposal is making things better or worse.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/647bc056/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>I agree that keeping braces out of these expressions reads much better also it serves to differentiate statements vs expressions.  <br></p><p>&gt; On Dec 13, 2015, at 10:18 AM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt; wrote:<br>&gt; <br>&gt; Just wanted to add, in regards to the argument of &quot;why use &#39;then&#39; rather than keeping &#39;if condition { A } else { B }&#39;?&quot;: besides my personal opinion that inline braces look out-of-place, braces behave specially in xcode and are notorious for screwing up indentation. For example, since swift was released, multiple non-trailing closure arguments to a single function call (e.g. MagicalRecord.saveWithBlock) are indented inconsistently, with the second closure one indentation level higher than the first. More generally/summarily, braces carry special indentation rules that do not necessarily suit expressions.<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 13, 2015, 12:17 PM Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On Dec 13, 2015, at 6:11 AM, Marc Knaup &lt;marc at knaup.koeln &lt;mailto:marc at knaup.koeln&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I also have no preference yet so I&#39;ll just throw in some thoughts.<br>&gt;&gt; <br>&gt;&gt; ** Existing Code **<br>&gt;&gt; The removal of the ternary operator would likely affect a lot of existing code.<br>&gt;&gt; A quick search for &quot; ? &quot; (with spaces) over a large app of our team yields 304 results.<br>&gt;&gt; <br>&gt;&gt; Two simpler examples:<br>&gt;&gt; <br>&gt;&gt; [<br>&gt;&gt;     &quot;With Conditions&quot;:            hasReport ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;     &quot;With Image&quot;:                 hasImage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;     &quot;With Message&quot;:               hasMessage ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;     &quot;Shared on Facebook Profile&quot;: sharedOnFacebookProfile ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;     &quot;Shared in Facebook Group&quot;:   sharedOnFacebookGroup ? &quot;yes&quot; : &quot;no&quot;,<br>&gt;&gt;     &quot;Shared on Facebook Page&quot;:    sharedOnFacebookPage ? &quot;yes&quot; : &quot;no&quot;<br>&gt;&gt; ]<br>&gt;&gt; <br>&gt;&gt; view1.alpha = editing ? 1 : 0<br>&gt;&gt; view2.alpha = editing ? 1 : 0<br>&gt;&gt; view3.alpha = editing ? 0 : 1<br>&gt;&gt; view4.alpha = editing ? 1 : 0<br>&gt;&gt; <br>&gt;&gt; I am not sure using if…then…else would make this better to read &amp; understand or worse.<br>&gt;&gt; <br>&gt; <br>&gt; there seems to be a lot of people who dislike ternary operators. Other languages also are similar in dumping ternary. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; ** Keyword then **<br>&gt;&gt; Making then a keyword would also cost us another word so that change needs to be carefully considered.<br>&gt;&gt; In our large app I found just a single instance where then was used for a variable&#39;s name:<br>&gt;&gt; <br>&gt;&gt; func reloadConfigurationAndThen(then: () -&gt; Void) { … }<br>&gt;&gt; Promises use the word then rather extensively: https://promisesaplus.com &lt;https://promisesaplus.com/&gt;<br>&gt;&gt; <br>&gt; <br>&gt; Good point. Will think about it.<br>&gt; <br>&gt;&gt; On Sun, Dec 13, 2015 at 2:45 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt;&gt; <br>&gt;&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/cdeb0085/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 5:45 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m not quite sure how I feel about this specific proposal yet but in general I do want to see conditional expressions and removal of the ternary operator.<br>&gt; <br>&gt; I would like to see &quot;else if&quot; included in whatever we adopt as the final solution.  Is there a reason this is omitted from this proposal?  I apologize if that was discussed in the thread.  I haven&#39;t followed every post. <br></p><p>Good, point I am thinking that it should behave pretty much as ternary operators but this has not come up in this thread so I will explore it a bit.<br></p><p>if x then if y then “A” else “B&quot; else if y then “C” else “D” <br></p><p>which could be optionally surrounded with parens to help with readability, essentially as you would with ternary operators. <br></p><p>if x then (if y then “A” else “B”)  else (if y then “C” else “D”)<br></p><p>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Dec 12, 2015, at 11:54 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/3ce45946/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>Hi Paul,<br></p><p>thanks for gathering the ideas in a proposal!<br></p><p>You suggested to use if…then…else instead of just using the statement form if … {…} else {…}.<br>In that case I wonder whether it wouldn’t be better to use „then“ in if-statements as well for consistency:<br></p><p>if condition then {<br>	…<br>} else {<br>	…<br>}<br></p><p>For switch-expressions I’d just keep the statement syntax as there is only one pair of braces and not one per case. Separating the expressions, for which „then“ had to be introduced in case of the if-expression, is already done nicely by the „case“ keywords. <br>Here, too, my intent would be to keep the syntax of expression and statement the same for consistency.<br></p><p>Some remarks on the section about alternatives:<br></p><p>&gt; The problem with this is that in expressions all cases must be handled. In a statement it is common to not have else. So you could make it an expression if the return value is used. This makes it more complex from both the user&#39;s perspective and the compiler perspective. That means that if you were to change a &quot;if&quot; conditional into an expression suddenly you would get an an error if the &quot;else&quot; part was not provided.<br></p><p><br>I don’t see any problem here. The only rule is that expressions have to have an else clause. This is independent of syntax i.e. whether we uses braces or „then&quot;.<br></p><p>Especially for the switch expression I don’t think the standard statement syntax with braces looks bad (as there is only one pair of braces around all cases and not one per case like in the if-statement), at least if you format it a little bit different than in your proposal and drop the unnecessary parentheses:<br></p><p>let color =<br>    switch enumColor {<br>    case .Red:<br>        switch shade {<br>        case .DarkRed: 0xFFEEEE<br>        case .LightRed: 0xFF0000<br>        default: 0xFF1010<br>        }<br>    default: 0xFFFFFF<br>    }<br></p><p>-Thorsten<br></p><p>&gt; Am 13.12.2015 um 06:54 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello All, <br>&gt; <br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt; <br>&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt; <br>&gt; Thanks,<br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt; <br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt; <br>&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/60f74f28/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 10:00:00am</p></header><div class="content"><p>I see that this will help with consistency, this would address the question of when to use “then&quot;.  I would not want to require it on statements. I like how you can simply put the brace after then condition in the existing Swift. It would be required for expression but not for statements. I can add this change if others like it too.<br></p><p><br>&gt; On Dec 13, 2015, at 6:39 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; Hi Paul,<br>&gt; <br>&gt; thanks for gathering the ideas in a proposal!<br>&gt; <br>&gt; You suggested to use if…then…else instead of just using the statement form if … {…} else {…}.<br>&gt; In that case I wonder whether it wouldn’t be better to use „then“ in if-statements as well for consistency:<br>&gt; <br>&gt; if condition then {<br>&gt; 	…<br>&gt; } else {<br>&gt; 	…<br>&gt; }<br>&gt; <br>&gt; For switch-expressions I’d just keep the statement syntax as there is only one pair of braces and not one per case. Separating the expressions, for which „then“ had to be introduced in case of the if-expression, is already done nicely by the „case“ keywords. <br>&gt; Here, too, my intent would be to keep the syntax of expression and statement the same for consistency.<br>&gt; <br>&gt; Some remarks on the section about alternatives:<br>&gt; <br>&gt;&gt; The problem with this is that in expressions all cases must be handled. In a statement it is common to not have else. So you could make it an expression if the return value is used. This makes it more complex from both the user&#39;s perspective and the compiler perspective. That means that if you were to change a &quot;if&quot; conditional into an expression suddenly you would get an an error if the &quot;else&quot; part was not provided.<br>&gt; <br>&gt; <br>&gt; I don’t see any problem here. The only rule is that expressions have to have an else clause. This is independent of syntax i.e. whether we uses braces or „then&quot;.<br>&gt; <br>&gt; Especially for the switch expression I don’t think the standard statement syntax with braces looks bad (as there is only one pair of braces around all cases and not one per case like in the if-statement), at least if you format it a little bit different than in your proposal and drop the unnecessary parentheses:<br>&gt; <br>&gt; let color =<br>&gt;     switch enumColor {<br>&gt;     case .Red:<br>&gt;         switch shade {<br>&gt;         case .DarkRed: 0xFFEEEE<br>&gt;         case .LightRed: 0xFF0000<br>&gt;         default: 0xFF1010<br>&gt;         }<br>&gt;     default: 0xFFFFFF<br>&gt;     }<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt;&gt; Am 13.12.2015 um 06:54 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/4724c8be/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>December 13, 2015 at 03:00:00pm</p></header><div class="content"><p>Hi Paul, <br></p><p> what bothers me in your proposal is that you seem to allow only simple expressions. But it is often the case that one needs to have multiple statements to set up the value. For example:<br></p><p>  let data = if connection.valid <br>    connection.cached_data <br>  else {<br>    // generate the data again<br> } <br></p><p> I have been thinking a bit about how to implement this in connection with the idea of code blocks as closures proposal I have posted earlier (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html&gt;). Switch is a bit more complicated, but I think that the existing if statement can be easily turned into expression:<br></p><p>   func if_&lt;T&gt;(condition: Bool, then_: (()-&gt;T)?, else_: (()-&gt;T)?) -&gt; T? {<br>    var result: T?<br>    <br>    if condition {<br>        result = then_?()<br>    } else {<br>        result = else_?()<br>    }<br>    <br>    return result<br>}<br></p><p>the compiler would then translate all if statements into<br></p><p>   if_(condition, then_: then block, else_: else block)<br></p><p>if the else block is not present, it will be set to nil. In that case the if expression also evaluates to nil. Now, if the if is used as a statement, the above transformation is sufficient and the return value will be optimised away by the compiler. If the expression form is used (i.e. there is an assignment operation), the compiler will forcefully unwrap the result:<br></p><p> let x = if_(condition, then_: then block, else_: else block)!<br></p><p>This way, if else block is absent, the program will crash. A bit of tweaking will also generate a useful error message. I am also sure that it is possible to generate a warning (or even an error) at the compile time without too much effort. <br></p><p>I think the nice thing about this proposal is that it uses already existing mechanisms in the language and only requires some minimal transformations by the compiler. <br></p><p>The switch expression can be approached in a similar way, but would require more compiler magic. <br></p><p>Best, <br></p><p> Taras<br></p><p>&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello All, <br>&gt; <br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt; <br>&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt; <br>&gt; Thanks,<br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt; <br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt; <br>&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/4e46598c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 04:00:00pm</p></header><div class="content"><p>Using fully-fledged if/switch-statements as expressions is another proposal<br>and discussion (which already exists).<br></p><p>The replacement of the ternary operator should be just syntactic sugar for<br>the other proposal to have a shorter version of &quot;let x = if a {} else {}&quot;.<br></p><p>Regarding the &quot;then&quot; keyword:<br>What about &quot;do&quot;?<br></p><p>let x = if a do b else c<br></p><p>Yes, it reads a bit weird, but as if &amp; switch statements are moving towards<br>being expressions already then &quot;do&quot; blocks will likely too.<br></p><p>So the above example would just be another shortcut for<br></p><p>let x = if a { do { b } } else { c }<br></p><p><br></p><p>On Sun, Dec 13, 2015 at 3:56 PM, Taras Zakharko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi Paul,<br>&gt;<br>&gt;  what bothers me in your proposal is that you seem to allow only simple<br>&gt; expressions. But it is often the case that one needs to have multiple<br>&gt; statements to set up the value. For example:<br>&gt;<br>&gt;   let data = if connection.valid<br>&gt;     connection.cached_data<br>&gt;   else {<br>&gt;     // generate the data again<br>&gt;  }<br>&gt;<br>&gt;  I have been thinking a bit about how to implement this in connection with<br>&gt; the idea of code blocks as closures proposal I have posted earlier (<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html).<br>&gt; Switch is a bit more complicated, but I think that the existing if<br>&gt; statement can be easily turned into expression:<br>&gt;<br>&gt;    func if_&lt;T&gt;(condition: Bool, then_: (()-&gt;T)?, else_: (()-&gt;T)?) -&gt; T? {<br>&gt;     var result: T?<br>&gt;<br>&gt;     if condition {<br>&gt;         result = then_?()<br>&gt;     } else {<br>&gt;         result = else_?()<br>&gt;     }<br>&gt;<br>&gt;     return result<br>&gt; }<br>&gt;<br>&gt; the compiler would then translate all if statements into<br>&gt;<br>&gt;    if_(condition, then_: then block, else_: else block)<br>&gt;<br>&gt; if the else block is not present, it will be set to nil. In that case the<br>&gt; if expression also evaluates to nil. Now, if the if is used as a statement,<br>&gt; the above transformation is sufficient and the return value will be<br>&gt; optimised away by the compiler. If the expression form is used (i.e. there<br>&gt; is an assignment operation), the compiler will forcefully unwrap the result:<br>&gt;<br>&gt;  let x = if_(condition, then_: then block, else_: else block)!<br>&gt;<br>&gt; This way, if else block is absent, the program will crash. A bit of<br>&gt; tweaking will also generate a useful error message. I am also sure that it<br>&gt; is possible to generate a warning (or even an error) at the compile time<br>&gt; without too much effort.<br>&gt;<br>&gt; I think the nice thing about this proposal is that it uses already<br>&gt; existing mechanisms in the language and only requires some minimal<br>&gt; transformations by the compiler.<br>&gt;<br>&gt; The switch expression can be approached in a similar way, but would<br>&gt; require more compiler magic.<br>&gt;<br>&gt; Best,<br>&gt;<br>&gt;  Taras<br>&gt;<br>&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello All,<br>&gt;<br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;<br>&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt; and kept things as similar to the existing language constructs as possible.<br>&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;<br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;<br>&gt; Thanks,<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;<br>&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when<br>&gt; using “then” similar to how “guard&quot; requires “else”. This  will help to<br>&gt; make the difference between statements and expressions clear.<br>&gt;<br>&gt; let x = If cond then X else Y<br>&gt;<br>&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;<br>&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; 1. I would really hate to explain to someone when *if* needs a *then* and<br>&gt; when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added<br>&gt; lightly.<br>&gt;<br>&gt;<br>&gt; agreed definitely want to be careful with that. I think with braces<br>&gt; meaning statements that differentiation can be made clear. I would<br>&gt; certainly start with statements when describing, just as you usually don’t<br>&gt; talk about the ternary operator until later.<br>&gt;<br>&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;<br>&gt;<br>&gt; Yes that would be great.<br>&gt;<br>&gt;<br>&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;<br>&gt;<br>&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt; every outcome:<br>&gt;<br>&gt; if cond {<br>&gt; print(“hello”)<br>&gt; }<br>&gt;<br>&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;<br>&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;<br>&gt; unless you go seriously off the deep end:<br>&gt;<br>&gt; let say = if cond then “hello”<br>&gt;<br>&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/3e977188/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 07:00:00am</p></header><div class="content"><p>Thanks everyone for the feedback! I will look at it in detail and address or incorporate what makes sense for the proposed approach. <br></p><p>&gt; Using fully-fledged if/switch-statements as expressions is another proposal and discussion (which already exists).<br></p><p><br>can you point me to this? <br></p><p><br>&gt; On Dec 13, 2015, at 7:09 AM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Using fully-fledged if/switch-statements as expressions is another proposal and discussion (which already exists).<br>&gt; <br>&gt; The replacement of the ternary operator should be just syntactic sugar for the other proposal to have a shorter version of &quot;let x = if a {} else {}&quot;.<br>&gt; <br>&gt; Regarding the &quot;then&quot; keyword:<br>&gt; What about &quot;do&quot;?<br>&gt; <br>&gt; let x = if a do b else c<br>&gt; <br>&gt; Yes, it reads a bit weird, but as if &amp; switch statements are moving towards being expressions already then &quot;do&quot; blocks will likely too.<br>&gt; <br>&gt; So the above example would just be another shortcut for<br>&gt; <br>&gt; let x = if a { do { b } } else { c }<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sun, Dec 13, 2015 at 3:56 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi Paul, <br>&gt; <br>&gt;  what bothers me in your proposal is that you seem to allow only simple expressions. But it is often the case that one needs to have multiple statements to set up the value. For example:<br>&gt; <br>&gt;   let data = if connection.valid <br>&gt;     connection.cached_data <br>&gt;   else {<br>&gt;     // generate the data again<br>&gt;  } <br>&gt; <br>&gt;  I have been thinking a bit about how to implement this in connection with the idea of code blocks as closures proposal I have posted earlier (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html&gt;). Switch is a bit more complicated, but I think that the existing if statement can be easily turned into expression:<br>&gt; <br>&gt;    func if_&lt;T&gt;(condition: Bool, then_: (()-&gt;T)?, else_: (()-&gt;T)?) -&gt; T? {<br>&gt;     var result: T?<br>&gt;     <br>&gt;     if condition {<br>&gt;         result = then_?()<br>&gt;     } else {<br>&gt;         result = else_?()<br>&gt;     }<br>&gt;     <br>&gt;     return result<br>&gt; }<br>&gt; <br>&gt; the compiler would then translate all if statements into<br>&gt; <br>&gt;    if_(condition, then_: then block, else_: else block)<br>&gt; <br>&gt; if the else block is not present, it will be set to nil. In that case the if expression also evaluates to nil. Now, if the if is used as a statement, the above transformation is sufficient and the return value will be optimised away by the compiler. If the expression form is used (i.e. there is an assignment operation), the compiler will forcefully unwrap the result:<br>&gt; <br>&gt;  let x = if_(condition, then_: then block, else_: else block)!<br>&gt; <br>&gt; This way, if else block is absent, the program will crash. A bit of tweaking will also generate a useful error message. I am also sure that it is possible to generate a warning (or even an error) at the compile time without too much effort. <br>&gt; <br>&gt; I think the nice thing about this proposal is that it uses already existing mechanisms in the language and only requires some minimal transformations by the compiler. <br>&gt; <br>&gt; The switch expression can be approached in a similar way, but would require more compiler magic. <br>&gt; <br>&gt; Best, <br>&gt; <br>&gt;  Taras<br>&gt; <br>&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/ebfc9295/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 04:00:00pm</p></header><div class="content"><p>It&#39;s part of this one:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html<br></p><p><br>On Sun, Dec 13, 2015 at 4:25 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br></p><p>&gt; Thanks everyone for the feedback! I will look at it in detail and address<br>&gt; or incorporate what makes sense for the proposed approach.<br>&gt;<br>&gt; Using fully-fledged if/switch-statements as expressions is another<br>&gt; proposal and discussion (which already exists).<br>&gt;<br>&gt;<br>&gt; can you point me to this?<br>&gt;<br>&gt;<br>&gt; On Dec 13, 2015, at 7:09 AM, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Using fully-fledged if/switch-statements as expressions is another<br>&gt; proposal and discussion (which already exists).<br>&gt;<br>&gt; The replacement of the ternary operator should be just syntactic sugar for<br>&gt; the other proposal to have a shorter version of &quot;let x = if a {} else {}&quot;.<br>&gt;<br>&gt; Regarding the &quot;then&quot; keyword:<br>&gt; What about &quot;do&quot;?<br>&gt;<br>&gt; let x = if a do b else c<br>&gt;<br>&gt; Yes, it reads a bit weird, but as if &amp; switch statements are moving<br>&gt; towards being expressions already then &quot;do&quot; blocks will likely too.<br>&gt;<br>&gt; So the above example would just be another shortcut for<br>&gt;<br>&gt; let x = if a { do { b } } else { c }<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Dec 13, 2015 at 3:56 PM, Taras Zakharko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Paul,<br>&gt;&gt;<br>&gt;&gt;  what bothers me in your proposal is that you seem to allow only simple<br>&gt;&gt; expressions. But it is often the case that one needs to have multiple<br>&gt;&gt; statements to set up the value. For example:<br>&gt;&gt;<br>&gt;&gt;   let data = if connection.valid<br>&gt;&gt;     connection.cached_data<br>&gt;&gt;   else {<br>&gt;&gt;     // generate the data again<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt;  I have been thinking a bit about how to implement this in connection<br>&gt;&gt; with the idea of code blocks as closures proposal I have posted earlier (<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html).<br>&gt;&gt; Switch is a bit more complicated, but I think that the existing if<br>&gt;&gt; statement can be easily turned into expression:<br>&gt;&gt;<br>&gt;&gt;    func if_&lt;T&gt;(condition: Bool, then_: (()-&gt;T)?, else_: (()-&gt;T)?) -&gt; T? {<br>&gt;&gt;     var result: T?<br>&gt;&gt;<br>&gt;&gt;     if condition {<br>&gt;&gt;         result = then_?()<br>&gt;&gt;     } else {<br>&gt;&gt;         result = else_?()<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     return result<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; the compiler would then translate all if statements into<br>&gt;&gt;<br>&gt;&gt;    if_(condition, then_: then block, else_: else block)<br>&gt;&gt;<br>&gt;&gt; if the else block is not present, it will be set to nil. In that case the<br>&gt;&gt; if expression also evaluates to nil. Now, if the if is used as a statement,<br>&gt;&gt; the above transformation is sufficient and the return value will be<br>&gt;&gt; optimised away by the compiler. If the expression form is used (i.e. there<br>&gt;&gt; is an assignment operation), the compiler will forcefully unwrap the result:<br>&gt;&gt;<br>&gt;&gt;  let x = if_(condition, then_: then block, else_: else block)!<br>&gt;&gt;<br>&gt;&gt; This way, if else block is absent, the program will crash. A bit of<br>&gt;&gt; tweaking will also generate a useful error message. I am also sure that it<br>&gt;&gt; is possible to generate a warning (or even an error) at the compile time<br>&gt;&gt; without too much effort.<br>&gt;&gt;<br>&gt;&gt; I think the nice thing about this proposal is that it uses already<br>&gt;&gt; existing mechanisms in the language and only requires some minimal<br>&gt;&gt; transformations by the compiler.<br>&gt;&gt;<br>&gt;&gt; The switch expression can be approached in a similar way, but would<br>&gt;&gt; require more compiler magic.<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt;<br>&gt;&gt;  Taras<br>&gt;&gt;<br>&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello All,<br>&gt;&gt;<br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;<br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot;<br>&gt;&gt; when using “then” similar to how “guard&quot; requires “else”. This  will help<br>&gt;&gt; to make the difference between statements and expressions clear.<br>&gt;&gt;<br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;<br>&gt;&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; 1. I would really hate to explain to someone when *if* needs a *then* and<br>&gt;&gt; when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added<br>&gt;&gt; lightly.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; agreed definitely want to be careful with that. I think with braces<br>&gt;&gt; meaning statements that differentiation can be made clear. I would<br>&gt;&gt; certainly start with statements when describing, just as you usually don’t<br>&gt;&gt; talk about the ternary operator until later.<br>&gt;&gt;<br>&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt;&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes that would be great.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt;&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt;&gt; every outcome:<br>&gt;&gt;<br>&gt;&gt; if cond {<br>&gt;&gt; print(“hello”)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;<br>&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello”<br>&gt;&gt;<br>&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/9f6ec238/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 7:09 AM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Using fully-fledged if/switch-statements as expressions is another proposal and discussion (which already exists).<br>&gt; <br>&gt; The replacement of the ternary operator should be just syntactic sugar for the other proposal to have a shorter version of &quot;let x = if a {} else {}”.<br></p><p>This is the expression vs statement debate and whether they can be made the same. I don’t think they can easily see my response to Taras. <br></p><p>&gt; <br>&gt; Regarding the &quot;then&quot; keyword:<br>&gt; What about &quot;do&quot;?<br>&gt; <br>&gt; let x = if a do b else c<br>&gt; <br>&gt; Yes, it reads a bit weird, but as if &amp; switch statements are moving towards being expressions already then &quot;do&quot; blocks will likely too.<br>&gt; <br>&gt; So the above example would just be another shortcut for<br>&gt; <br>&gt; let x = if a { do { b } } else { c }<br>&gt; <br>&gt; <br></p><p>This is a possibility if “then” is deemed to useful in other contexts and the feedback is that we don’t want another keyword. I like the readability of “then&quot;<br></p><p><br>&gt; <br>&gt; On Sun, Dec 13, 2015 at 3:56 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi Paul, <br>&gt; <br>&gt;  what bothers me in your proposal is that you seem to allow only simple expressions. But it is often the case that one needs to have multiple statements to set up the value. For example:<br>&gt; <br>&gt;   let data = if connection.valid <br>&gt;     connection.cached_data <br>&gt;   else {<br>&gt;     // generate the data again<br>&gt;  } <br>&gt; <br>&gt;  I have been thinking a bit about how to implement this in connection with the idea of code blocks as closures proposal I have posted earlier (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/002056.html&gt;). Switch is a bit more complicated, but I think that the existing if statement can be easily turned into expression:<br>&gt; <br>&gt;    func if_&lt;T&gt;(condition: Bool, then_: (()-&gt;T)?, else_: (()-&gt;T)?) -&gt; T? {<br>&gt;     var result: T?<br>&gt;     <br>&gt;     if condition {<br>&gt;         result = then_?()<br>&gt;     } else {<br>&gt;         result = else_?()<br>&gt;     }<br>&gt;     <br>&gt;     return result<br>&gt; }<br>&gt; <br>&gt; the compiler would then translate all if statements into<br>&gt; <br>&gt;    if_(condition, then_: then block, else_: else block)<br>&gt; <br>&gt; if the else block is not present, it will be set to nil. In that case the if expression also evaluates to nil. Now, if the if is used as a statement, the above transformation is sufficient and the return value will be optimised away by the compiler. If the expression form is used (i.e. there is an assignment operation), the compiler will forcefully unwrap the result:<br>&gt; <br>&gt;  let x = if_(condition, then_: then block, else_: else block)!<br>&gt; <br>&gt; This way, if else block is absent, the program will crash. A bit of tweaking will also generate a useful error message. I am also sure that it is possible to generate a warning (or even an error) at the compile time without too much effort. <br>&gt; <br>&gt; I think the nice thing about this proposal is that it uses already existing mechanisms in the language and only requires some minimal transformations by the compiler. <br>&gt; <br>&gt; The switch expression can be approached in a similar way, but would require more compiler magic. <br>&gt; <br>&gt; Best, <br>&gt; <br>&gt;  Taras<br>&gt; <br>&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/99a1bd78/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 13, 2015 at 08:00:00am</p></header><div class="content"><p>This is great. Here is my take on it.<br></p><p>Should these be two proposals? One for the if-then-else expression and one<br>for the switch expression?<br>I think the proposal would have a better chance if it is focused first on<br>replacing ?: with if-then-else. It is a very emotional change for a lot of<br>people. At the end of the proposal you could just briefly mention the<br>switch expression possibility (I like Al&#39;s suggestions.)<br></p><p>If the if then else expression gets approved and implemented then it would<br>be easier to get a switch expression using the then keyword imo but I do<br>think we need to include it in the proposal but as a future implementation<br>and/or possibility.<br></p><p><br></p><p><br></p><p><br></p><p>On Saturday, December 12, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello All,<br>&gt;<br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;<br>&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt; and kept things as similar to the existing language constructs as possible.<br>&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;<br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;<br>&gt; Thanks,<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when<br>&gt; using “then” similar to how “guard&quot; requires “else”. This  will help to<br>&gt; make the difference between statements and expressions clear.<br>&gt;<br>&gt; let x = If cond then X else Y<br>&gt;<br>&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;<br>&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; 1. I would really hate to explain to someone when *if* needs a *then* and<br>&gt; when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added<br>&gt; lightly.<br>&gt;<br>&gt;<br>&gt; agreed definitely want to be careful with that. I think with braces<br>&gt; meaning statements that differentiation can be made clear. I would<br>&gt; certainly start with statements when describing, just as you usually don’t<br>&gt; talk about the ternary operator until later.<br>&gt;<br>&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;<br>&gt;<br>&gt; Yes that would be great.<br>&gt;<br>&gt;<br>&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;<br>&gt;<br>&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt; every outcome:<br>&gt;<br>&gt; if cond {<br>&gt; print(“hello”)<br>&gt; }<br>&gt;<br>&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;<br>&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;<br>&gt; unless you go seriously off the deep end:<br>&gt;<br>&gt; let say = if cond then “hello”<br>&gt;<br>&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/27075fe4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 05:00:00pm</p></header><div class="content"><p>I would start it independently and put a note somewhere that in case<br>if/switch/do become expressions on their own then your proposal will<br>automatically turn into a simplified syntax for them.<br></p><p>On Sun, Dec 13, 2015 at 5:05 PM, J. Cheyo Jimenez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is great. Here is my take on it.<br>&gt;<br>&gt; Should these be two proposals? One for the if-then-else expression and one<br>&gt; for the switch expression?<br>&gt; I think the proposal would have a better chance if it is focused first on<br>&gt; replacing ?: with if-then-else. It is a very emotional change for a lot of<br>&gt; people. At the end of the proposal you could just briefly mention the<br>&gt; switch expression possibility (I like Al&#39;s suggestions.)<br>&gt;<br>&gt; If the if then else expression gets approved and implemented then it would<br>&gt; be easier to get a switch expression using the then keyword imo but I do<br>&gt; think we need to include it in the proposal but as a future implementation<br>&gt; and/or possibility.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Saturday, December 12, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello All,<br>&gt;&gt;<br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;<br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot;<br>&gt;&gt; when using “then” similar to how “guard&quot; requires “else”. This  will help<br>&gt;&gt; to make the difference between statements and expressions clear.<br>&gt;&gt;<br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt;<br>&gt;&gt; is the full form, where “else&quot; can not be omitted.<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; 1. I would really hate to explain to someone when *if* needs a *then*<br>&gt;&gt; and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be<br>&gt;&gt; added lightly.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; agreed definitely want to be careful with that. I think with braces<br>&gt;&gt; meaning statements that differentiation can be made clear. I would<br>&gt;&gt; certainly start with statements when describing, just as you usually don’t<br>&gt;&gt; talk about the ternary operator until later.<br>&gt;&gt;<br>&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing<br>&gt;&gt; (A ? B : C) with some sort of (*if* A *then* B *else* C).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes that would be great.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be<br>&gt;&gt; usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify<br>&gt;&gt; every outcome:<br>&gt;&gt;<br>&gt;&gt; if cond {<br>&gt;&gt; print(“hello”)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;<br>&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;<br>&gt;&gt; let say = if cond then “hello”<br>&gt;&gt;<br>&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/0d4d8af1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>Good point, maybe breaking it up makes sense. <br></p><p>&gt; On Dec 13, 2015, at 8:05 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; This is great. Here is my take on it. <br>&gt; <br>&gt; Should these be two proposals? One for the if-then-else expression and one for the switch expression?<br>&gt; I think the proposal would have a better chance if it is focused first on replacing ?: with if-then-else. It is a very emotional change for a lot of people. At the end of the proposal you could just briefly mention the switch expression possibility (I like Al&#39;s suggestions.)<br>&gt; <br>&gt; If the if then else expression gets approved and implemented then it would be easier to get a switch expression using the then keyword imo but I do think we need to include it in the proposal but as a future implementation and/or possibility. <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Saturday, December 12, 2015, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello All, <br>&gt; <br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt; <br>&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt; <br>&gt; Thanks,<br>&gt; - Paul<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 3:51 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Implied in using the  “then&quot;, if…then…else would aways require “else&quot; when using “then” similar to how “guard&quot; requires “else”. This  will help to make the difference between statements and expressions clear.<br>&gt;&gt; <br>&gt;&gt; let x = If cond then X else Y<br>&gt;&gt; <br>&gt;&gt; is the full form, where “else&quot; can not be omitted. <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 12, 2015, at 12:59 PM, Paul Ossenbruggen &lt;possen at gmail.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;possen at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 12, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. I would really hate to explain to someone when if needs a then and when it doesn&#39;t. That&#39;s the sort of inconsistency that shouldn&#39;t be added lightly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; agreed definitely want to be careful with that. I think with braces meaning statements that differentiation can be made clear. I would certainly start with statements when describing, just as you usually don’t talk about the ternary operator until later. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. If we can somehow solve all of this, I think I&#39;ll be +1 for replacing (A ? B : C) with some sort of (if A then B else C).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes that would be great.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. Generally, I wonder how hard would it be for all statements to be usable as expressions? Why didn&#39;t Swift go that way from the start?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The biggest problem statement is you don’t need to exhaustively specify every outcome:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if cond {<br>&gt;&gt;&gt; 	print(“hello”)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; whereas in an expression you have to specify what happens in the else.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” else “goodbye&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; unless you go seriously off the deep end:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let say = if cond then “hello” <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  “say&quot; then becomes an optional, *shudder*<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/40cdd728/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4eebe2ce86d5fff312ce7e66d9a2a652?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jakob Egger</string> &lt;jakob at eggerapps.at&gt;<p>December 13, 2015 at 05:00:00pm</p></header><div class="content"><p>I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br></p><p>1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL construct &quot;case when cond then expr1 else expr2 end&quot;.<br></p><p>2) It makes Swift harder to learn. Newcomers will be confused why you sometimes need to use curly braces and why at other times you need to use the &quot;then&quot; keyword.<br></p><p>3) It doesn&#39;t help when you want to do multi-line calculations<br></p><p>But there is one good side to this proposal: it nests more naturally than the ternary operator:<br>&quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>vs.<br>&quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br></p><p>The proposed syntax for the switch statement is so confusing that I really don&#39;t think it is a good idea.<br></p><p>Why not just allow normal if statements to return values?<br>I don&#39;t see what&#39;s so bad about the following:<br>&quot;let value = if cond {expr1} else {expr2}&quot;<br></p><p>This would also extend to multiple lines:<br>let value = if cond {<br>  expr1<br>} else {<br>  let something = Object()<br>  something.doStuff()<br>  something<br>}<br></p><p>Jakob<br></p><p>&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello All, <br>&gt; <br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt; <br>&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt; <br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt; <br>&gt; Thanks,<br>&gt; - Paul<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/6c1dcf92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>December 13, 2015 at 05:00:00pm</p></header><div class="content"><p>I must say I agree with Jakob. Adding a ternary expression if variant only makes the language more complex (in every sense of this word) and does not really solve anything.  A general ‘if-as-expression’ is a more ‘sustainable’ solution and more inline with Swift3 spirit of simplification. <br></p><p>Best, <br></p><p> Taras<br></p><p>&gt; On 13 Dec 2015, at 17:11, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br>&gt; <br>&gt; 1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL construct &quot;case when cond then expr1 else expr2 end&quot;.<br>&gt; <br>&gt; 2) It makes Swift harder to learn. Newcomers will be confused why you sometimes need to use curly braces and why at other times you need to use the &quot;then&quot; keyword.<br>&gt; <br>&gt; 3) It doesn&#39;t help when you want to do multi-line calculations<br>&gt; <br>&gt; But there is one good side to this proposal: it nests more naturally than the ternary operator:<br>&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt; vs.<br>&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt; <br>&gt; The proposed syntax for the switch statement is so confusing that I really don&#39;t think it is a good idea.<br>&gt; <br>&gt; Why not just allow normal if statements to return values?<br>&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br>&gt; <br>&gt; This would also extend to multiple lines:<br>&gt; let value = if cond {<br>&gt;   expr1<br>&gt; } else {<br>&gt;   let something = Object()<br>&gt;   something.doStuff()<br>&gt;   something<br>&gt; }<br>&gt; <br>&gt; Jakob<br>&gt; <br>&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/9b51befb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 13, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On 13 Dec 2015, at 16:11, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why not just allow normal if statements to return values?<br>&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br></p><p>I’d be happy if the ‘if’ and ‘switch’ statements could somehow also behave as expressions. One problem is that an ‘if’ statement doesn’t require an ‘else’ clause, whereas an expression does.<br></p><p>Taras, earlier mentioned a possible solution, which would return ‘nil’ if the else clause was absent. I think any suggestion must have compile time checking to prevent runtime crashes occurring.<br></p><p>&gt; This would also extend to multiple lines:<br>&gt; let value = if cond {<br>&gt;   expr1<br>&gt; } else {<br>&gt;   let something = Object()<br>&gt;   something.doStuff()<br>&gt;   something<br>&gt; }<br></p><p><br>My personal preference here is that ‘if’ expressions should aim to fit onto one line and avoid invoking side-effecting functions. However, Swift isn’t a language which controls side-effects within the type system, so maybe my point is moot?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/71c1a303/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 8:11 AM, Jakob Egger &lt;jakob at eggerapps.at&gt; wrote:<br>&gt; <br>&gt; I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br>&gt; <br>&gt; 1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL construct &quot;case when cond then expr1 else expr2 end”.<br></p><p>Yeah it adds a few characters overall. What used to be 2 chars now takes 10. Clarity is preferred though by many. I head frequently people telling users to never use ternary operators because they are confusing to read. <br></p><p>&gt; <br>&gt; 2) It makes Swift harder to learn. Newcomers will be confused why you sometimes need to use curly braces and why at other times you need to use the &quot;then&quot; keyword.<br></p><p>I did mention this in Alternatives Considered section. By making the else part required, this emphasizes that it is different or we could go with an optional “then” for statements as was suggested by Thorsten. <br>&gt; <br>&gt; 3) It doesn&#39;t help when you want to do multi-line calculations<br></p><p>This is the case with the ternary as well, I think it is better to keep it simple. <br>&gt; <br>&gt; But there is one good side to this proposal: it nests more naturally than the ternary operator:<br>&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt; vs.<br>&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt; <br>&gt; The proposed syntax for the switch statement is so confusing that I really don&#39;t think it is a good idea.<br></p><p>Not sure why that is, it is essentially the same as the existing switch statement except everything is an expression instead of statements. Is there anything I can do in the examples or documentation to make things clearer?<br></p><p>&gt; <br>&gt; Why not just allow normal if statements to return values?<br>&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br>&gt; <br>&gt; This would also extend to multiple lines:<br>&gt; let value = if cond {<br>&gt;   expr1<br>&gt; } else {<br>&gt;   let something = Object()<br>&gt;   something.doStuff()<br>&gt;   something<br>&gt; }<br>&gt; <br></p><p>I answered this with others, also notice how there are braces everywhere? does that really work when you just want to put something on one line. What happens when one of your branches returns void? Expressions are guaranteed to have a result, statements don’t make such a guarantee. <br></p><p><br></p><p>&gt; Jakob<br>&gt; <br>&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello All, <br>&gt;&gt; <br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt; <br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt; <br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/1204a29c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 13, 2015 at 11:00:00am</p></header><div class="content"><p>&quot;or we could go with an optional “then” for statements as was suggested by<br>Thorsten. &quot;<br></p><p>I don&#39;t think this should go in the proposal. An else is alway required in<br>a guard statement, an expression should not return an optional imho.<br></p><p><br></p><p>On Sunday, December 13, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Dec 13, 2015, at 8:11 AM, Jakob Egger &lt;jakob at eggerapps.at<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;jakob at eggerapps.at&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br>&gt;<br>&gt; 1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL<br>&gt; construct &quot;case when cond then expr1 else expr2 end”.<br>&gt;<br>&gt;<br>&gt; Yeah it adds a few characters overall. What used to be 2 chars now takes<br>&gt; 10. Clarity is preferred though by many. I head frequently people telling<br>&gt; users to never use ternary operators because they are confusing to read.<br>&gt;<br>&gt;<br>&gt; 2) It makes Swift harder to learn. Newcomers will be confused why you<br>&gt; sometimes need to use curly braces and why at other times you need to use<br>&gt; the &quot;then&quot; keyword.<br>&gt;<br>&gt;<br>&gt; I did mention this in Alternatives Considered section. By making the else<br>&gt; part required, this emphasizes that it is different or we could go with an<br>&gt; optional “then” for statements as was suggested by Thorsten.<br>&gt;<br>&gt;<br>&gt; 3) It doesn&#39;t help when you want to do multi-line calculations<br>&gt;<br>&gt;<br>&gt; This is the case with the ternary as well, I think it is better to keep it<br>&gt; simple.<br>&gt;<br>&gt;<br>&gt; But there is one good side to this proposal: it nests more naturally than<br>&gt; the ternary operator:<br>&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt; vs.<br>&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt;<br>&gt; The proposed syntax for the switch statement is so confusing that I really<br>&gt; don&#39;t think it is a good idea.<br>&gt;<br>&gt;<br>&gt; Not sure why that is, it is essentially the same as the existing switch<br>&gt; statement except everything is an expression instead of statements. Is<br>&gt; there anything I can do in the examples or documentation to make things<br>&gt; clearer?<br>&gt;<br>&gt;<br>&gt; Why not just allow normal if statements to return values?<br>&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br>&gt;<br>&gt; This would also extend to multiple lines:<br>&gt; let value = if cond {<br>&gt;   expr1<br>&gt; } else {<br>&gt;   let something = Object()<br>&gt;   something.doStuff()<br>&gt;   something<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I answered this with others, also notice how there are braces everywhere?<br>&gt; does that really work when you just want to put something on one line. What<br>&gt; happens when one of your branches returns void? Expressions are guaranteed<br>&gt; to have a result, statements don’t make such a guarantee.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Jakob<br>&gt;<br>&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Hello All,<br>&gt;<br>&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;<br>&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt; and kept things as similar to the existing language constructs as possible.<br>&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;<br>&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;<br>&gt; Thanks,<br>&gt; - Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/d484b5ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 13, 2015 at 12:00:00pm</p></header><div class="content"><p>Ha. Disregard. I misread this.<br></p><p>On Sunday, December 13, 2015, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br></p><p>&gt; &quot;or we could go with an optional “then” for statements as was suggested by<br>&gt; Thorsten. &quot;<br>&gt;<br>&gt; I don&#39;t think this should go in the proposal. An else is alway required in<br>&gt; a guard statement, an expression should not return an optional imho.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sunday, December 13, 2015, Paul Ossenbruggen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 13, 2015, at 8:11 AM, Jakob Egger &lt;jakob at eggerapps.at&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br>&gt;&gt;<br>&gt;&gt; 1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL<br>&gt;&gt; construct &quot;case when cond then expr1 else expr2 end”.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yeah it adds a few characters overall. What used to be 2 chars now takes<br>&gt;&gt; 10. Clarity is preferred though by many. I head frequently people telling<br>&gt;&gt; users to never use ternary operators because they are confusing to read.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 2) It makes Swift harder to learn. Newcomers will be confused why you<br>&gt;&gt; sometimes need to use curly braces and why at other times you need to use<br>&gt;&gt; the &quot;then&quot; keyword.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I did mention this in Alternatives Considered section. By making the else<br>&gt;&gt; part required, this emphasizes that it is different or we could go with an<br>&gt;&gt; optional “then” for statements as was suggested by Thorsten.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; 3) It doesn&#39;t help when you want to do multi-line calculations<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This is the case with the ternary as well, I think it is better to keep<br>&gt;&gt; it simple.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; But there is one good side to this proposal: it nests more naturally than<br>&gt;&gt; the ternary operator:<br>&gt;&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt;&gt; vs.<br>&gt;&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt;&gt;<br>&gt;&gt; The proposed syntax for the switch statement is so confusing that I<br>&gt;&gt; really don&#39;t think it is a good idea.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not sure why that is, it is essentially the same as the existing switch<br>&gt;&gt; statement except everything is an expression instead of statements. Is<br>&gt;&gt; there anything I can do in the examples or documentation to make things<br>&gt;&gt; clearer?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Why not just allow normal if statements to return values?<br>&gt;&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt;&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br>&gt;&gt;<br>&gt;&gt; This would also extend to multiple lines:<br>&gt;&gt; let value = if cond {<br>&gt;&gt;   expr1<br>&gt;&gt; } else {<br>&gt;&gt;   let something = Object()<br>&gt;&gt;   something.doStuff()<br>&gt;&gt;   something<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I answered this with others, also notice how there are braces everywhere?<br>&gt;&gt; does that really work when you just want to put something on one line. What<br>&gt;&gt; happens when one of your branches returns void? Expressions are guaranteed<br>&gt;&gt; to have a result, statements don’t make such a guarantee.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Jakob<br>&gt;&gt;<br>&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello All,<br>&gt;&gt;<br>&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;<br>&gt;&gt; I did a rough draft of a proposal for implementing if expressions and<br>&gt;&gt; switch expressions based upon the discussions we had here. I have tried to<br>&gt;&gt; keep the scope of the changes as small as possible,  only added one keyword<br>&gt;&gt; and kept things as similar to the existing language constructs as possible.<br>&gt;&gt; If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;<br>&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - Paul<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/7e01ebd5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 14, 2015 at 05:00:00pm</p></header><div class="content"><p>I think there&#39;s been a misunderstanding or two...<br></p><p>First I proposed that if if-expressions would be written with &quot;then&quot; then if-statements should use &quot;then&quot;, too, for consistency. Always, not optionally.<br></p><p>Second I would require if-expressions to always have an &quot;else&quot; clause (as opposed to proposals that suggested to interpret missing &quot;else&quot; clauses as &quot;else nil&quot;, i.e making the result type of the if-expression optional).<br></p><p>-Thorsten<br></p><p>&gt; Am 13.12.2015 um 20:50 schrieb J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; &quot;or we could go with an optional “then” for statements as was suggested by Thorsten. &quot;<br>&gt; <br>&gt; I don&#39;t think this should go in the proposal. An else is alway required in a guard statement, an expression should not return an optional imho.<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Sunday, December 13, 2015, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 13, 2015, at 8:11 AM, Jakob Egger &lt;jakob at eggerapps.at&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL construct &quot;case when cond then expr1 else expr2 end”.<br>&gt;&gt; <br>&gt;&gt; Yeah it adds a few characters overall. What used to be 2 chars now takes 10. Clarity is preferred though by many. I head frequently people telling users to never use ternary operators because they are confusing to read. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2) It makes Swift harder to learn. Newcomers will be confused why you sometimes need to use curly braces and why at other times you need to use the &quot;then&quot; keyword.<br>&gt;&gt; <br>&gt;&gt; I did mention this in Alternatives Considered section. By making the else part required, this emphasizes that it is different or we could go with an optional “then” for statements as was suggested by Thorsten. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3) It doesn&#39;t help when you want to do multi-line calculations<br>&gt;&gt; <br>&gt;&gt; This is the case with the ternary as well, I think it is better to keep it simple. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But there is one good side to this proposal: it nests more naturally than the ternary operator:<br>&gt;&gt;&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt;&gt;&gt; vs.<br>&gt;&gt;&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed syntax for the switch statement is so confusing that I really don&#39;t think it is a good idea.<br>&gt;&gt; <br>&gt;&gt; Not sure why that is, it is essentially the same as the existing switch statement except everything is an expression instead of statements. Is there anything I can do in the examples or documentation to make things clearer?<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not just allow normal if statements to return values?<br>&gt;&gt;&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt;&gt;&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would also extend to multiple lines:<br>&gt;&gt;&gt; let value = if cond {<br>&gt;&gt;&gt;   expr1<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;   let something = Object()<br>&gt;&gt;&gt;   something.doStuff()<br>&gt;&gt;&gt;   something<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I answered this with others, also notice how there are braces everywhere? does that really work when you just want to put something on one line. What happens when one of your branches returns void? Expressions are guaranteed to have a result, statements don’t make such a guarantee. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Jakob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/e2fc8744/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 14, 2015 at 08:00:00pm</p></header><div class="content"><p>Yeah, I attributed adding “then” to statements to you but I added that it not be required. I did not want it to be required both because personally I like just putting the brace after the conditional, it not necessary in the statement form, and where possible I like to avoid visual clutter as much as possible. The benefit to new users is that don’t need to worry about when to use then. This helps with the consistency of the two forms and what current Swift users are used to. Also, it does not break existing code. <br></p><p><br></p><p>&gt; On Dec 14, 2015, at 8:24 AM, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; I think there&#39;s been a misunderstanding or two...<br>&gt; <br>&gt; First I proposed that if if-expressions would be written with &quot;then&quot; then if-statements should use &quot;then&quot;, too, for consistency. Always, not optionally.<br>&gt; <br>&gt; Second I would require if-expressions to always have an &quot;else&quot; clause (as opposed to proposals that suggested to interpret missing &quot;else&quot; clauses as &quot;else nil&quot;, i.e making the result type of the if-expression optional).<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; Am 13.12.2015 um 20:50 schrieb J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; &quot;or we could go with an optional “then” for statements as was suggested by Thorsten. &quot;<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this should go in the proposal. An else is alway required in a guard statement, an expression should not return an optional imho.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sunday, December 13, 2015, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 13, 2015, at 8:11 AM, Jakob Egger &lt;jakob at eggerapps.at &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;jakob at eggerapps.at&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I really don&#39;t like the &quot;if cond then expr1 else expr2&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) First of all, it&#39;s extremely verbose. It&#39;s almost as bad as the SQL construct &quot;case when cond then expr1 else expr2 end”.<br>&gt;&gt; <br>&gt;&gt; Yeah it adds a few characters overall. What used to be 2 chars now takes 10. Clarity is preferred though by many. I head frequently people telling users to never use ternary operators because they are confusing to read. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2) It makes Swift harder to learn. Newcomers will be confused why you sometimes need to use curly braces and why at other times you need to use the &quot;then&quot; keyword.<br>&gt;&gt; <br>&gt;&gt; I did mention this in Alternatives Considered section. By making the else part required, this emphasizes that it is different or we could go with an optional “then” for statements as was suggested by Thorsten. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3) It doesn&#39;t help when you want to do multi-line calculations<br>&gt;&gt; <br>&gt;&gt; This is the case with the ternary as well, I think it is better to keep it simple. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But there is one good side to this proposal: it nests more naturally than the ternary operator:<br>&gt;&gt;&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt;&gt;&gt; vs.<br>&gt;&gt;&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed syntax for the switch statement is so confusing that I really don&#39;t think it is a good idea.<br>&gt;&gt; <br>&gt;&gt; Not sure why that is, it is essentially the same as the existing switch statement except everything is an expression instead of statements. Is there anything I can do in the examples or documentation to make things clearer?<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not just allow normal if statements to return values?<br>&gt;&gt;&gt; I don&#39;t see what&#39;s so bad about the following:<br>&gt;&gt;&gt; &quot;let value = if cond {expr1} else {expr2}&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would also extend to multiple lines:<br>&gt;&gt;&gt; let value = if cond {<br>&gt;&gt;&gt;   expr1<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;   let something = Object()<br>&gt;&gt;&gt;   something.doStuff()<br>&gt;&gt;&gt;   something<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I answered this with others, also notice how there are braces everywhere? does that really work when you just want to put something on one line. What happens when one of your branches returns void? Expressions are guaranteed to have a result, statements don’t make such a guarantee. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Jakob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 13 Dec 2015, at 06:54, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello All, <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Been sick in bed all day, but decided to try to be productive…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I did a rough draft of a proposal for implementing if expressions and switch expressions based upon the discussions we had here. I have tried to keep the scope of the changes as small as possible,  only added one keyword and kept things as similar to the existing language constructs as possible. If anyone wants to help me with this, or has feedback, please let me know,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/possen/swift-evolution/blob/master/0020.md &lt;https://github.com/possen/swift-evolution/blob/master/0020.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Paul<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/b6f6eb11/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 14, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 8:11, Jakob Egger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But there is one good side to this proposal: it nests more naturally than the ternary operator:<br>&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt; vs.<br>&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt; <br></p><p>Without commenting on anything else in this thread, ?: nests properly (right-associative-ly) in every language other than PHP &lt;http://www.phpsadness.com/sad/30&gt;. Dropping the parens there is equivalent.<br></p><p>(That said, if I hadn&#39;t known that already it wouldn&#39;t have been something I could infer from the syntax. I&#39;d have to assume the author knew what they were doing. And I&#39;m the sort who will parenthesize &amp;&amp; expressions within || expressions, even though it&#39;s not strictly necessary.)<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/d2256797/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 15, 2015 at 12:00:00am</p></header><div class="content"><p>Good point Jordan. I think what Jakob was trying to say is that &#39;else if&#39;<br>is already a language construct, and thus it might be easier on the eye to<br>see &#39;if cond then expr1 else if cond2 then expr2 ...&#39;, than to see &#39;cond1 ?<br>expr1 : cond2 ? expr2 : ...&#39;<br></p><p>On Mon, Dec 14, 2015 at 6:38 PM Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 13, 2015, at 8:11, Jakob Egger via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; But there is one good side to this proposal: it nests more naturally than<br>&gt; the ternary operator:<br>&gt; &quot;if cond then expr1 else if cond2 then expr2 else expr3&quot;<br>&gt; vs.<br>&gt; &quot;cond ? expr1 : (cond2 ? expr2 : expr3)<br>&gt;<br>&gt;<br>&gt; Without commenting on anything else in this thread, ?: nests properly<br>&gt; (right-associative-ly) in every language other than PHP<br>&gt; &lt;http://www.phpsadness.com/sad/30&gt;. Dropping the parens there is<br>&gt; equivalent.<br>&gt;<br>&gt; (That said, if I hadn&#39;t known that already it wouldn&#39;t have been something<br>&gt; I could infer from the syntax. I&#39;d have to assume the author knew what they<br>&gt; were doing. And I&#39;m the sort who will parenthesize &amp;&amp; expressions within ||<br>&gt; expressions, even though it&#39;s not strictly necessary.)<br>&gt;<br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/99df6d6b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 11, 2015 at 05:00:00pm</p></header><div class="content"><p>+1 I personally really like the if then expression. I think is cleaner and<br>this way we can have if else expressions with curly braces too. Introducing<br>the then keyword also could allow for switch expressions.<br></p><p>let result =  switch (yourColor) {<br>               case .Red   then 1<br>               case .Green then 2<br>               case .Blue  then 3<br>          }<br></p><p><br>On Fri, Dec 11, 2015 at 5:31 PM, Al Skipp via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; How about:<br>&gt;<br>&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt;<br>&gt; No mysterious symbols or braces, or multiline monstrosity.<br>&gt;<br>&gt; &gt; On 12 Dec 2015, at 01:18, Andrey Tarantsov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Strong -1; this turns a quick one-liner into a multiline monstrosity.<br>&gt; When massaging coordinates and layouts in iOS apps, ?: is often helpful to<br>&gt; handle corner cases inline.<br>&gt; &gt;<br>&gt; &gt; A.<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/b7a00eeb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 11, 2015 at 05:00:00pm</p></header><div class="content"><p>I meant if else statements. If we introduce the then keyword we could have<br>and if then expression that is separate from the if else statement.<br></p><p>On Fri, Dec 11, 2015 at 5:44 PM, J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt; +1 I personally really like the if then expression. I think is cleaner and<br>&gt; this way we can have if else expressions with curly braces too. Introducing<br>&gt; the then keyword also could allow for switch expressions.<br>&gt;<br>&gt; let result =  switch (yourColor) {<br>&gt;                case .Red   then 1<br>&gt;                case .Green then 2<br>&gt;                case .Blue  then 3<br>&gt;           }<br>&gt;<br>&gt;<br>&gt; On Fri, Dec 11, 2015 at 5:31 PM, Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; How about:<br>&gt;&gt;<br>&gt;&gt; let v = if condition then “A&quot; else “B&quot;<br>&gt;&gt;<br>&gt;&gt; No mysterious symbols or braces, or multiline monstrosity.<br>&gt;&gt;<br>&gt;&gt; &gt; On 12 Dec 2015, at 01:18, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Strong -1; this turns a quick one-liner into a multiline monstrosity.<br>&gt;&gt; When massaging coordinates and layouts in iOS apps, ?: is often helpful to<br>&gt;&gt; handle corner cases inline.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; A.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/e6e866d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 12, 2015 at 07:00:00am</p></header><div class="content"><p>I actually agree; I like &#39;then&#39; in CoffeeScript which is used for the same purpose there.<br></p><p>But:<br></p><p>1) this is a bigger change than just a ternary operator<br></p><p>2) if we add &quot;then&quot;, I believe that both forms should be acceptable for both kinds of IF statements<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December 11, 2015 at 08:00:00pm</p></header><div class="content"><p>2) &quot;then&quot; would serve a way to differentiate the If statement and an if<br>expression.<br></p><p>1) I think that making an if-then expression would be less problematic than<br>making all if else statements into expressions. It was really easy for rust<br>to just drop ?: because they already had *if* as an expression but in swift<br>the *if* is a statement.<br>In swift we have if let and if case; adding if then to handle ternary<br>operations is probably no so bad.<br></p><p><br></p><p>On Fri, Dec 11, 2015 at 5:58 PM, Andrey Tarantsov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I actually agree; I like &#39;then&#39; in CoffeeScript which is used for the same<br>&gt; purpose there.<br>&gt;<br>&gt; But:<br>&gt;<br>&gt; 1) this is a bigger change than just a ternary operator<br>&gt;<br>&gt; 2) if we add &quot;then&quot;, I believe that both forms should be acceptable for<br>&gt; both kinds of IF statements<br>&gt;<br>&gt; A.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/47ebc1d8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December  6, 2015 at 11:00:00pm</p></header><div class="content"><p>Absolutely. Just the same rule: parts that were statements must be expressions. The else clause becomes mandatory.<br></p><p>-Thorsten <br></p><p>&gt; Am 06.12.2015 um 22:52 schrieb Alex Lew &lt;alexl.mail+swift at gmail.com&gt;:<br>&gt; <br>&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces. +1.  <br>&gt; <br>&gt; Would you allow the same thing with if?<br>&gt; <br>&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt;&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br>&gt;&gt; <br>&gt;&gt; +1<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let thisColor = switch thatColor {<br>&gt;&gt; &gt;         case .Red: .Green // must be an expression<br>&gt;&gt; &gt;         default: .Yellow      // must be an expression<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; No returns needed in the case clauses.<br>&gt;&gt; <br>&gt;&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt;&gt; <br>&gt;&gt; Readable and simple to learn.<br>&gt;&gt; <br>&gt;&gt; Fantastic!<br>&gt;&gt; <br>&gt;&gt; &gt; Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -Thorsten<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/f4998b89/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 05:00:00pm</p></header><div class="content"><p>👍<br></p><p>On Sun, Dec 6, 2015 at 5:12 PM, thorsten at portableinnovations.de &lt;<br>thorsten at portableinnovations.de&gt; wrote:<br></p><p>&gt; Absolutely. Just the same rule: parts that were statements must be<br>&gt; expressions. The else clause becomes mandatory.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; Am 06.12.2015 um 22:52 schrieb Alex Lew &lt;alexl.mail+swift at gmail.com&gt;:<br>&gt;<br>&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces.<br>&gt; +1.<br>&gt;<br>&gt; Would you allow the same thing with if?<br>&gt;<br>&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would prefer the expression to match the statement. The only<br>&gt;&gt; difference would be that all parts that were statements now have to be<br>&gt;&gt; expressions.<br>&gt;&gt;<br>&gt;&gt; +1<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let thisColor = switch thatColor {<br>&gt;&gt; &gt;         case .Red: .Green // must be an expression<br>&gt;&gt; &gt;         default: .Yellow      // must be an expression<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; No returns needed in the case clauses.<br>&gt;&gt;<br>&gt;&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt;&gt;<br>&gt;&gt; Readable and simple to learn.<br>&gt;&gt;<br>&gt;&gt; Fantastic!<br>&gt;&gt;<br>&gt;&gt; &gt; Formatting this as a one-liner would just require adding semicolons<br>&gt;&gt; (though I wouldn&#39;t recommend this).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -Thorsten<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/3fb93a4b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  6, 2015 at 07:00:00pm</p></header><div class="content"><p>I also agree with this.  I see no value in different syntax for statements and expressions, just unnecessary complexity.<br></p><p>Modifying the current syntax is an orthogonal issue.  If anyone feels the current switch syntax is to verbose I would recommend writing a new proposal to change it.  If such a proposal were adopted the new syntax should be used for both statements and expressions.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 6, 2015, at 4:14 PM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 👍<br>&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 5:12 PM, thorsten at portableinnovations.de &lt;thorsten at portableinnovations.de&gt; wrote:<br>&gt;&gt; Absolutely. Just the same rule: parts that were statements must be expressions. The else clause becomes mandatory.<br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt;&gt;&gt; Am 06.12.2015 um 22:52 schrieb Alex Lew &lt;alexl.mail+swift at gmail.com&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that it&#39;s simplest to just reuse switch keyword, and keep braces. +1.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would you allow the same thing with if?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let thisColor = if condition { .Red } else { .Blue }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 4:44 PM, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; On 06 Dec 2015, at 22:35, thorsten--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I would prefer the expression to match the statement. The only difference would be that all parts that were statements now have to be expressions.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Therefore the switch-expression should simply look like follows:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; let thisColor = switch thatColor {<br>&gt;&gt;&gt;&gt; &gt;         case .Red: .Green // must be an expression<br>&gt;&gt;&gt;&gt; &gt;         default: .Yellow      // must be an expression<br>&gt;&gt;&gt;&gt; &gt;     }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; No returns needed in the case clauses.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This actually looks great. One simple rule and zero new keywords.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Readable and simple to learn.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Fantastic!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Formatting this as a one-liner would just require adding semicolons (though I wouldn&#39;t recommend this).<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; -Thorsten<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/5e6ab41e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>I prefer making “case” optional if it can be accommodated, for compactness on a single line but maybe can be provided for those doing multiline so it is more explicit. <br></p><p>if not ? how about expression “switch?” to separate expression switch, from the switch statement? One issue is if is if ? is reserved for optionals.  So:<br></p><p>let myColor = yourColor switch? .Blue :  .Red, .Green: .Blue, .Red: .Green, default: .Yellow<br></p><p>or could be optionally with case with semicolons to separate, as a line continuation:<br></p><p>let myColor = yourColor switch? case .Blue : .Red; case .Green: .Blue;  case .Red: .Green; default: .Yellow<br> <br>But “case&quot; would be mostly for multiline:<br></p><p>let myColor = yourColor switch?<br>	case .Blue :  .Reds<br>	case .Green: .Blue <br>	case .Red: .Green<br>	default: .Yellow<br></p><p>could also be written as:<br></p><p>let myColor = yourColor switch?<br>	.Blue :  .Reds<br>	.Green: .Blue <br>	.Red: .Green<br>	default: .Yellow<br></p><p>Also, ”if&quot; could be expressionized: <br></p><p>let myColor = condition if?  .Blue; .Red<br></p><p><br>&gt; On Dec 6, 2015, at 11:48 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am not a fan of this approach based on the ternary operator.  The ternary operator is already a bit of an anomaly in that all other operators are unary or binary and do not perform any control flow (beyond possibly short circuiting an autoclosure argument).<br>&gt; <br>&gt; I would much rather features that perform control flow continue to use keywords, but allow them to be expressions.  <br>&gt; <br>&gt; Once we have control flow expressions I would like to see the ternary operator removed from the language as it would no longer server a purpose.  Removing the ternary operator seems to fit nicely with the direction to remove some features that are carried over from C-based languages but don’t necessarily fit with the direction Swift is heading.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 1:19 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ostensibly, case may not be necessary if you could delimit each case on one line with something (perhaps a comma, or something else if that would not fit well within the grammar):<br>&gt;&gt;  <br>&gt;&gt; let thisColor = thatColor ? .Blue: .Red, .Green: .Blue, .Red: .Green, default: .Yellow<br>&gt;&gt;  <br>&gt;&gt; On Sun, Dec 6, 2015, at 01:57 PM, Paul Ossenbruggen via swift-evolution wrote:<br>&gt;&gt;&gt; I like this too, seems more powerful.  Also, would single line expressions be allowed?  If not would case be required for example:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;&gt;&gt;     case .Blue: .Red<br>&gt;&gt;&gt;     case .Green: .Blue<br>&gt;&gt;&gt;     case .Red: .Green<br>&gt;&gt;&gt;     default: .Yellow<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 6, 2015, at 9:11 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I really like this train of thought. +1<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 6, 2015, at 11:02 AM, Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; What if we left the if { ...} else { ... } syntax alone (as a statement), and updated the ternary expression to be a more general pattern matching expression (closer to &quot;switch&quot;)? Something like<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let x = condition ?<br>&gt;&gt;&gt;&gt;&gt;    true: &quot;Hello&quot;<br>&gt;&gt;&gt;&gt;&gt;    false: &quot;Goodbye&quot;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let x = optionalValue ?<br>&gt;&gt;&gt;&gt;&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;&gt;&gt;&gt;&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;&gt;&gt;&gt;&gt;     .Blue: .Red<br>&gt;&gt;&gt;&gt;&gt;     .Green: .Blue<br>&gt;&gt;&gt;&gt;&gt;     .Red: .Green<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; let quadrant = (x, y) ?<br>&gt;&gt;&gt;&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;&gt;&gt;&gt;&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;&gt;&gt;&gt;&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;&gt;&gt;&gt;&gt;     default: &quot;bottom right&quot;<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; The colon comes from the fact that this is sort of a light-weight expression-based &quot;switch&quot; statement, where each branch can only contain an expression, not a series of statements.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; This is very similar to pattern matching expressions in languages like Haskell, ML, and Coq.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz&lt;thorsten.seitz at web.de &lt;mailto:thorsten.seitz at web.de&gt;&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an expression. You still want to be able to do this:<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; if (condition) {<br>&gt;&gt;&gt;&gt;&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt;&gt;&gt;&gt;&gt; } else {<br>&gt;&gt;&gt;&gt;&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; That would actually be no problem if Swift’s type system would have union types (Ceylon has union and intersection types which are quite awesome and enable lots of nice things quite naturally, seehttp://ceylon-lang.org/documentation/1.2/tour/types/ &lt;http://ceylon-lang.org/documentation/1.2/tour/types/&gt;).<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; In that case the type of such an expression would just be the union of both types, which is writtenInt | Stringin Ceylon.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/564c57b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>I strongly dislike the one liner with only punctuation to separate the cases because it is very difficult to spot the pairs.<br></p><p>I fail to see why we have to have new syntax for the expression case. <br></p><p>-Thorsten <br></p><p>&gt; Am 06.12.2015 um 21:30 schrieb Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; let myColor = yourColor switch? .Blue :  .Red, .Green: .Blue, .Red: .Green, default: .Yellow<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>I do like the idea of leaving the if else as an statement because it<br>may simplify things. Ideally the new ternary syntax would exclude the<br>question mark and colon. Without introducing new keywords, it could work<br>something like the following.<br></p><p>let result = where condition switch x else y<br></p><p>let result2 = where x &lt; y switch 1 else where y == x switch 2 else 3<br></p><p><br></p><p><br></p><p><br>On Sunday, December 6, 2015, Alex Lew via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What if we left the if { ...} else { ... } syntax alone (as a statement),<br>&gt; and updated the ternary expression to be a more general pattern matching<br>&gt; expression (closer to &quot;switch&quot;)? Something like<br>&gt;<br>&gt; let x = condition ?<br>&gt;    true: &quot;Hello&quot;<br>&gt;    false: &quot;Goodbye&quot;<br>&gt;<br>&gt; let x = optionalValue ?<br>&gt;    .Some(let unwrapped): &quot;Hello, \(unwrapped)&quot;<br>&gt;    .None: &quot;To Whom It May Concern&quot;<br>&gt;<br>&gt; let myFavoriteColor = yourFavoriteColor ?<br>&gt;     .Blue: .Red<br>&gt;     .Green: .Blue<br>&gt;     .Red: .Green<br>&gt;<br>&gt; let quadrant = (x, y) ?<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &lt; 50: &quot;top left&quot;<br>&gt;     let (x, y) where x &lt; 50 &amp;&amp; y &gt; 50: &quot;bottom left&quot;<br>&gt;     let (x, y) where x &gt; 50 &amp;&amp; y &lt; 50: &quot;top right&quot;<br>&gt;     default: &quot;bottom right&quot;<br>&gt;<br>&gt; The colon comes from the fact that this is sort of a light-weight<br>&gt; expression-based &quot;switch&quot; statement, where each branch can only contain an<br>&gt; expression, not a series of statements.<br>&gt;<br>&gt; This is very similar to pattern matching expressions in languages like<br>&gt; Haskell, ML, and Coq.<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 11:25 AM, Thorsten Seitz &lt;thorsten.seitz at web.de<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;thorsten.seitz at web.de&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Am 06.12.2015 um 01:28 schrieb Alex Lew via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think you can just get rid of the if statement in favor of an<br>&gt;&gt; expression. You still want to be able to do this:<br>&gt;&gt;<br>&gt;&gt; if (condition) {<br>&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt; } else {<br>&gt;&gt;     funcWithSideEffectsThatReturnsString()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; but that&#39;s not a valid expression (what is its type?).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That would actually be no problem if Swift’s type system would have union<br>&gt;&gt; types (Ceylon has union and intersection types which are quite awesome and<br>&gt;&gt; enable lots of nice things quite naturally, see<br>&gt;&gt; http://ceylon-lang.org/documentation/1.2/tour/types/).<br>&gt;&gt;<br>&gt;&gt; In that case the type of such an expression would just be the union of<br>&gt;&gt; both types, which is written Int | String in Ceylon.<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/2a70ecc7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d933552ea7fda10a4488a74223c00988?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;thorsten.seitz at web.de&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>Wouldn’t it be possible to still have if-statements?<br></p><p>When used as expression an if-expression would of course require an else-part, but when used as statement we would still have an if-statement (not an if-expression) and the else-part would be optional just like now.<br></p><p>-Thorsten<br></p><p>&gt; Am 06.12.2015 um 00:12 schrieb Ole Begemann via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt;&gt; This is subtle and requires thought<br>&gt;&gt; <br>&gt;&gt; What do you envision as the pitfalls of the design thinking behind if/switch expressions? I’m not a compiler programmer, but a prog-lang enthusiast. I wouldn’t mind a little nudge in the right direction.<br>&gt; <br>&gt; One thing that comes to mind is that if &quot;if&quot; is an expression, every if needs an else branch. This makes it harder to use if to conditionally perform side effects. For example, this is currently valid:<br>&gt; <br>&gt; func doSomething() { ... }<br>&gt; <br>&gt; if condition {<br>&gt;    doSomething()<br>&gt; }<br>&gt; <br>&gt; Should this be allowed? You could argue that this should work because (a) the expression result is unused and (b) the return type of doSomething is Void, so the compiler could conceivably implicitly construct an else branch that returns (). But it would be inconsistent with other expressions. Disallowing this style could make writing typical &quot;imperative&quot; code harder.<br>&gt; <br>&gt; – Ole<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 11:40 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt;&gt; This is subtle and requires thought<br>&gt; <br>&gt; What do you envision as the pitfalls of the design thinking behind if/switch expressions? I’m not a compiler programmer, but a prog-lang enthusiast. I wouldn’t mind a little nudge in the right direction.<br></p><p>I responded with some concerns and thoughts on the &quot;Control Flow Expressions” thread.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/3a2215c6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 02:00:00am</p></header><div class="content"><p>(I originally posted as possen p and since hopefully fixed that) <br></p><p>So, As Kevin Ballard and Ole Bergman pointed out, making a regular “if” an expression has some major complications. Having the potential to return different object types in a strictly typed language will not be easy. Also what to do if the if does not have an else. The ternary operator does not allow the if/else results of different types. In Python doing an expression with if/else is not a problem because it will let you return different types, this is legal, (which makes sense for Python):<br></p><p>val = 10 if p == 5 else “abc&quot;<br></p><p>it will not however let you omit the else part:<br></p><p>val = 10 if False  // produces an error. <br></p><p>so it appears if you assign to an expression in Python it will require the else part. So it is different than a regular if. <br></p><p>So I ask, is making the regular “if&quot; an expression truly desired for Swift? I do see other languages doing it, but it does seem a bit odd to assign from any “if”. In my original proposal I was suggesting that assignment is done like this:<br></p><p>let val = 10 else 40 if p == 5 <br></p><p>In this it is very similar to the ternary expression in that else part is required and both types must match, and has improved readability. This is overloading the if/else keywords to provide essentially the same thing as ternary operators.. <br></p><p>The following from Kevin Ballard&#39;s email:<br></p><p>&gt; let foo = if condition {<br>&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt; } else {<br>&gt;     funcWithSideEffectsThatReturnsString() <br>&gt; }<br></p><p><br>I find it is hard to tell that the two results are returning a value. To me it looks like it is either ignoring the return value or is returning void. <br></p><p>Maybe emphasizing the assignment would help as below does not have return values in the method names: <br></p><p>let foo if condition {<br>    = dosomething()<br>} else {<br>    = dosomethingelse() <br>}<br></p><p>putting the = after the else shows that it is returning a value for the let clause. It also helps emphasize that the return types must match and I think looks better. <br></p><p>Going back to my proposal with the = suggestion: <br></p><p>let foo = dosomething() else = dosomethingelse() if condition<br></p><p>this really shows that the let variable is being assigned. <br></p><p>Note that these are still chainable expressions: <br></p><p>var foo = ((10 else = 40 if p == 5) else = (15 else = 14 if p == 10) if p == 4)<br></p><p>It may be good to make the space optional after the else:<br></p><p>var foo = ((10 else= 40 if p == 5) else= (15 else= 14 if p == 10) if p == 4)<br></p><p>- Paul <br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/7a405aed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  6, 2015 at 02:00:00am</p></header><div class="content"><p>Another idea is put the conditional at the beginning:<br></p><p>let foo if conditional then = 10 else = 20<br></p><p>But that requires an additional keyword to separate out the conditional but might read better. <br></p><p><br></p><p>&gt; On Dec 6, 2015, at 2:14 AM, possen p &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; (I originally posted as possen p and since hopefully fixed that) <br>&gt; <br>&gt; So, As Kevin Ballard and Ole Bergman pointed out, making a regular “if” an expression has some major complications. Having the potential to return different object types in a strictly typed language will not be easy. Also what to do if the if does not have an else. The ternary operator does not allow the if/else results of different types. In Python doing an expression with if/else is not a problem because it will let you return different types, this is legal, (which makes sense for Python):<br>&gt; <br>&gt; val = 10 if p == 5 else “abc&quot;<br>&gt; <br>&gt; it will not however let you omit the else part:<br>&gt; <br>&gt; val = 10 if False  // produces an error. <br>&gt; <br>&gt; so it appears if you assign to an expression in Python it will require the else part. So it is different than a regular if. <br>&gt; <br>&gt; So I ask, is making the regular “if&quot; an expression truly desired for Swift? I do see other languages doing it, but it does seem a bit odd to assign from any “if”. In my original proposal I was suggesting that assignment is done like this:<br>&gt; <br>&gt; let val = 10 else 40 if p == 5 <br>&gt; <br>&gt; In this it is very similar to the ternary expression in that else part is required and both types must match, and has improved readability. This is overloading the if/else keywords to provide essentially the same thing as ternary operators.. <br>&gt; <br>&gt; The following from Kevin Ballard&#39;s email:<br>&gt; <br>&gt;&gt; let foo = if condition {<br>&gt;&gt;     funcWithSideEffectsThatReturnsInt()<br>&gt;&gt; } else {<br>&gt;&gt;     funcWithSideEffectsThatReturnsString() <br>&gt;&gt; }<br>&gt; <br>&gt; <br>&gt; I find it is hard to tell that the two results are returning a value. To me it looks like it is either ignoring the return value or is returning void. <br>&gt; <br>&gt; Maybe emphasizing the assignment would help as below does not have return values in the method names: <br>&gt; <br>&gt; let foo if condition {<br>&gt;     = dosomething()<br>&gt; } else {<br>&gt;     = dosomethingelse() <br>&gt; }<br>&gt; <br>&gt; putting the = after the else shows that it is returning a value for the let clause. It also helps emphasize that the return types must match and I think looks better. <br>&gt; <br>&gt; Going back to my proposal with the = suggestion: <br>&gt; <br>&gt; let foo = dosomething() else = dosomethingelse() if condition<br>&gt; <br>&gt; this really shows that the let variable is being assigned. <br>&gt; <br>&gt; Note that these are still chainable expressions: <br>&gt; <br>&gt; var foo = ((10 else = 40 if p == 5) else = (15 else = 14 if p == 10) if p == 4)<br>&gt; <br>&gt; It may be good to make the space optional after the else:<br>&gt; <br>&gt; var foo = ((10 else= 40 if p == 5) else= (15 else= 14 if p == 10) if p == 4)<br>&gt; <br>&gt; - Paul <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/53976f9b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>I think I have a solution for the ternary part, but I am not sure I fully understand what is being asked for in the case of switch.  Could someone clarify?<br></p><p>There is another thread which goes into the idea a little more, but the basic idea is that we replace the ternary operator with ‘if?&#39;<br></p><p>let x = value if? condition<br></p><p><br>If condition is true, then x is value… otherwise it is nil.  You can combine with the nil-coalescing operator to get else and else if style behavior:<br></p><p>let x = valueA if? conditionA ?? valueB if? conditionB ?? valueC<br></p><p><br>Thanks,<br>Jon<br></p><p><br>&gt; On Dec 5, 2015, at 9:09 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 11:43 AM, J. Cheyo Jimenez &lt;cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d like some feedback from the core team to see if eliminating the ternary operator and replacing it with if-else is even proposal worthy. <br>&gt;&gt; <br>&gt;&gt; Some interesting code in the standard library that uses the ternary operator quite a bit. <br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/masters3d/7b0c6f3653368afe4357 &lt;https://gist.github.com/masters3d/7b0c6f3653368afe4357&gt;<br>&gt; <br>&gt; FWIW, I have no love for the ternary operator (it is totally &quot;bizarre C magic”), but it does solve a problem that Swift currently otherwise has no solution for.<br>&gt; <br>&gt; If you’re interested in pursuing this, then the right path forward is to build a holistic proposal to turn statements (like if and switch) into expressions.  This is subtle and requires thought, but is widely desired and if someone were interested in driving the design and implementation, then I’d be interested to see it happen.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/f2dbfff0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>I believe the idea with switch is that it would be nice to be able to do<br>something like<br></p><p>// make sure we have different favorite colors<br>let myFavoriteColor =<br>switch yourFavoriteColor {<br>case .Red:<br>return .Blue<br>case .Green:<br>return .Red<br>case .Blue:<br>return .Green<br>}<br></p><p>This is useful and exists in other functional languages. For example, ML<br>has “case … of …”, Coq has “match…with…end”, etc.<br></p><p>This is similar to what you are proposing with if:<br></p><p>let x = if (condition) { return value } else { return otherValue }<br></p><p>because in both cases you are taking what is currently a statement in Swift<br>and enabling it to be used as an expression. (Of course, the syntax would<br>ideally be nicer — maybe we limit each case’s body to be a single<br>expression and get rid of the return keyword, for example.) Worth noting<br>that in both cases, the type-checker needs to ensure that the type of each<br>result is the same.<br></p><p>The semantics of what you’re now proposing — an if? binary operator that<br>evaluates a condition then evaluates to either nil (if false) or some value<br>(if true) — is slightly different. I’m not sure I love it — the general use<br>case would be something like “if __ then ___ else ___” and I don’t think it<br>reads that way. It also doesn’t allow for pattern matching (though to be<br>fair, neither does the ternary operator) — it could be cool to see<br>something like<br></p><p>let greeting = “Hello, \(name),” if let name = optionalName else “To Whom<br>It May Concern:”<br></p><p>-Alex<br></p><p>On Sat, Dec 5, 2015 at 6:28 PM, Jonathan Hull via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think I have a solution for the ternary part, but I am not sure I fully<br>&gt; understand what is being asked for in the case of switch.  Could someone<br>&gt; clarify?<br>&gt;<br>&gt; There is another thread which goes into the idea a little more, but the<br>&gt; basic idea is that we replace the ternary operator with ‘if?&#39;<br>&gt;<br>&gt; let x = value if? condition<br>&gt;<br>&gt;<br>&gt; If condition is true, then x is value… otherwise it is nil.  You can<br>&gt; combine with the nil-coalescing operator to get else and else if style<br>&gt; behavior:<br>&gt;<br>&gt; let x = valueA if? conditionA ?? valueB if? conditionB ?? valueC<br>&gt;<br>&gt;<br>&gt; Thanks,<br>&gt; Jon<br>&gt;<br>&gt;<br>&gt; On Dec 5, 2015, at 9:09 AM, Chris Lattner &lt; clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 4, 2015, at 11:43 AM, J. Cheyo Jimenez &lt; cheyo at masters3d.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I&#39;d like some feedback from the core team to see if eliminating<br>&gt; the ternary operator and replacing it with if-else is even proposal<br>&gt; worthy.<br>&gt;<br>&gt; Some interesting code in the standard library that uses the ternary<br>&gt; operator quite a bit.<br>&gt;<br>&gt; https://gist.github.com/masters3d/7b0c6f3653368afe4357<br>&gt;<br>&gt;<br>&gt; FWIW, I have no love for the ternary operator (it is totally &quot;bizarre C<br>&gt; magic”), but it does solve a problem that Swift currently otherwise has no<br>&gt; solution for.<br>&gt;<br>&gt; If you’re interested in pursuing this, then the right path forward is to<br>&gt; build a holistic proposal to turn statements (like if and switch) into<br>&gt; expressions.  This is subtle and requires thought, but is widely desired<br>&gt; and if someone were interested in driving the design and implementation,<br>&gt; then I’d be interested to see it happen.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; Untracked with Trackbuster &lt;https://trackbuster.com/?sig&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/ca3a3a96/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d933552ea7fda10a4488a74223c00988?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Thorsten Seitz</string> &lt;thorsten.seitz at web.de&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>I’d prefer if-expressions to have the same form as if-statements, i.e.<br></p><p>let greeting = if let name = optionalName { &quot;Hello, \(name),“ } else { “To Whom It May Concern:” }<br></p><p>-Thorsten<br></p><p><br>PS: As an aside this could also be written without an if-expression as follows:<br></p><p>let greeting = name.map(„Hello, \($0),“) ?? “To Whom It May Concern:”<br></p><p><br>With regards to the question about the required else part: <br>&gt; Am 06.12.2015 um 01:12 schrieb Alex Lew via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; let greeting = “Hello, \(name),” if let name = optionalName else “To Whom It May Concern:”<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/eb3fc4ad/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/080d676d788903407f4e99ef245ca707?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Alex Lew</string> &lt;alexl.mail at gmail.com&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>I believe the idea with switch is that it would be nice to be able to do something like<br></p><p>// make sure we have different favorite colors<br>let myFavoriteColor = <br>	switch yourFavoriteColor {<br>		case .Red:<br>		return .Blue<br>		case .Green:<br>		return .Red<br>		case .Blue:<br>		return .Green<br>	}<br></p><p>This is useful and exists in other functional languages. For example, ML has “case … of …”, Coq has “match…with…end”, etc.<br></p><p>This is similar to what you are proposing with if:<br></p><p>let x = if (condition) { return value } else { return otherValue }<br></p><p>because in both cases you are taking what is currently a statement in Swift and enabling it to be used as an expression. (Of course, the syntax would ideally be nicer — maybe we limit each case’s body to be a single expression and get rid of the return keyword, for example.) Worth noting that in both cases, the type-checker needs to ensure that the type of each result is the same.<br></p><p>The semantics of what you’re now proposing — an if? binary operator that evaluates a condition then evaluates to either nil (if false) or some value (if true) — is slightly different. I’m not sure I love it — the general use case would be something like “if __ then ___ else ___” and I don’t think it reads that way. It also doesn’t allow for pattern matching (though to be fair, neither does the ternary operator) — it could be cool to see something like<br></p><p>let greeting = “Hello, \(name),” if let name = optionalName else “To Whom It May Concern:”<br></p><p>-Alex<br></p><p>&gt; On Dec 5, 2015, at 6:28 PM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think I have a solution for the ternary part, but I am not sure I fully understand what is being asked for in the case of switch.  Could someone clarify?<br>&gt; <br>&gt; There is another thread which goes into the idea a little more, but the basic idea is that we replace the ternary operator with ‘if?&#39;<br>&gt; <br>&gt; let x = value if? condition<br>&gt; <br>&gt; <br>&gt; If condition is true, then x is value… otherwise it is nil.  You can combine with the nil-coalescing operator to get else and else if style behavior:<br>&gt; <br>&gt; let x = valueA if? conditionA ?? valueB if? conditionB ?? valueC<br>&gt; <br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 9:09 AM, Chris Lattner &lt; clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 11:43 AM, J. Cheyo Jimenez &lt; cheyo at masters3d.com &lt;mailto:cheyo at masters3d.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like some feedback from the core team to see if eliminating the ternary operator and replacing it with if-else is even proposal worthy. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some interesting code in the standard library that uses the ternary operator quite a bit. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/masters3d/7b0c6f3653368afe4357 &lt;https://gist.github.com/masters3d/7b0c6f3653368afe4357&gt; <br>&gt;&gt; <br>&gt;&gt; FWIW, I have no love for the ternary operator (it is totally &quot;bizarre C magic”), but it does solve a problem that Swift currently otherwise has no solution for.<br>&gt;&gt; <br>&gt;&gt; If you’re interested in pursuing this, then the right path forward is to build a holistic proposal to turn statements (like if and switch) into expressions.  This is subtle and requires thought, but is widely desired and if someone were interested in driving the design and implementation, then I’d be interested to see it happen.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________ <br>&gt;&gt; swift-evolution mailing list <br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution <br>&gt; <br>&gt; Untracked with Trackbuster &lt;https://trackbuster.com/?sig&gt;_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/1cd0d176/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
