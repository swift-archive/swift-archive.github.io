<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 25, 2016 at 09:00:00am</p></header><div class="content"><p>on Thu Mar 24 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; That<br>&gt;&gt;  would imply that floating types should not conform to Strideable,<br>&gt;&gt;  which raises the question of whether Strideable should be folded into<br>&gt;&gt;  the Integer protocol.<br>&gt;<br>&gt; Personally, I get a lot of mileage out of conforming NSDate to<br>&gt; Strideable. <br></p><p>I just recalled that Unsafe[Mutable]Pointers are also Strideable.  So<br>Strideable stays.<br></p><p>Question: by what unit should<br></p><p>        for d in d0...d2 {}<br></p><p>be iterating?  Or should it be disallowed without a .striding(by: )?<br></p><p>If the latter, NSDate might fall into the same bucket as floating types.<br></p><p>&gt; (Although obviously it ought to be using a float-friendly<br>&gt; Strideable.)<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 25, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 25, 2016, at 9:19 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Mar 24 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; That<br>&gt;&gt;&gt; would imply that floating types should not conform to Strideable,<br>&gt;&gt;&gt; which raises the question of whether Strideable should be folded into<br>&gt;&gt;&gt; the Integer protocol.<br>&gt;&gt; <br>&gt;&gt; Personally, I get a lot of mileage out of conforming NSDate to<br>&gt;&gt; Strideable. <br>&gt; <br>&gt; I just recalled that Unsafe[Mutable]Pointers are also Strideable.  So<br>&gt; Strideable stays.<br>&gt; <br>&gt; Question: by what unit should<br>&gt; <br>&gt;        for d in d0...d2 {}<br>&gt; <br>&gt; be iterating?  Or should it be disallowed without a .striding(by: )?<br>&gt; <br>&gt; If the latter, NSDate might fall into the same bucket as floating types.<br></p><p>Strong vote to require a unit here, especially given that .minutes, .hours, .days, .months, and .years are all non-uniform intervals that are nonetheless useful to stride by!<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 30, 2016 at 05:00:00pm</p></header><div class="content"><p>+1<br></p><p>-Thorsten <br></p><p>&gt; Am 25.03.2016 um 17:24 schrieb Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 25, 2016, at 9:19 , Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Mar 24 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; That<br>&gt;&gt;&gt;&gt; would imply that floating types should not conform to Strideable,<br>&gt;&gt;&gt;&gt; which raises the question of whether Strideable should be folded into<br>&gt;&gt;&gt;&gt; the Integer protocol.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Personally, I get a lot of mileage out of conforming NSDate to<br>&gt;&gt;&gt; Strideable.<br>&gt;&gt; <br>&gt;&gt; I just recalled that Unsafe[Mutable]Pointers are also Strideable.  So<br>&gt;&gt; Strideable stays.<br>&gt;&gt; <br>&gt;&gt; Question: by what unit should<br>&gt;&gt; <br>&gt;&gt;       for d in d0...d2 {}<br>&gt;&gt; <br>&gt;&gt; be iterating?  Or should it be disallowed without a .striding(by: )?<br>&gt;&gt; <br>&gt;&gt; If the latter, NSDate might fall into the same bucket as floating types.<br>&gt; <br>&gt; Strong vote to require a unit here, especially given that .minutes, .hours, .days, .months, and .years are all non-uniform intervals that are nonetheless useful to stride by!<br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 25, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; Question: by what unit should<br>&gt; <br>&gt;        for d in d0...d2 {}<br>&gt; <br>&gt; be iterating?  Or should it be disallowed without a .striding(by: )?<br>&gt; <br>&gt; If the latter, NSDate might fall into the same bucket as floating types.<br></p><p>Floating-point seconds (as NSTimeIntervals) are the natural Strideable.Stride, but it&#39;s not particularly clear to me that you want 1 second to be a default stride. It&#39;s the default you would guess, but it&#39;s not actually a particularly useful default.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 27, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri Mar 25 2016, Brent Royal-Gordon &lt;brent-AT-architechies.com&gt; wrote:<br></p><p>&gt;&gt; Question: by what unit should<br>&gt;&gt; <br>&gt;&gt;        for d in d0...d2 {}<br>&gt;&gt; <br>&gt;&gt; be iterating?  Or should it be disallowed without a .striding(by: )?<br>&gt;&gt; <br>&gt;&gt; If the latter, NSDate might fall into the same bucket as floating types.<br>&gt;<br>&gt; Floating-point seconds (as NSTimeIntervals) are the natural<br>&gt; Strideable.Stride, <br></p><p>In what sense, given what you say below?  Isn&#39;t this assertion of yours<br>just an artifact of how NSTimeInterval is defined, rather than anything<br>intrinsic to dates?<br></p><p>&gt; but it&#39;s not particularly clear to me that you want 1 second to be a<br>&gt; default stride. It&#39;s the default you would guess, but it&#39;s not<br>&gt; actually a particularly useful default.<br></p><p>-- <br>Dave<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 28, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 25, 2016, at 4:09 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Question: by what unit should<br>&gt;&gt; <br>&gt;&gt;       for d in d0...d2 {}<br>&gt;&gt; <br>&gt;&gt; be iterating?  Or should it be disallowed without a .striding(by: )?<br>&gt;&gt; <br>&gt;&gt; If the latter, NSDate might fall into the same bucket as floating types.<br>&gt; <br>&gt; Floating-point seconds (as NSTimeIntervals) are the natural Strideable.Stride, but it&#39;s not particularly clear to me that you want 1 second to be a default stride. It&#39;s the default you would guess, but it&#39;s not actually a particularly useful default.<br></p><p>Any fixed-time-period stride with dates is fraught with peril. Not every day is 24 hours, not every minute is 60 seconds, etc. Working with dates requires enough special domain knowledge that I think it&#39;d be harmful to try to genericize numeric concepts over it.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 28, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural Strideable.Stride, but it&#39;s not particularly clear to me that you want 1 second to be a default stride. It&#39;s the default you would guess, but it&#39;s not actually a particularly useful default.<br>&gt; <br>&gt; Any fixed-time-period stride with dates is fraught with peril. Not every day is 24 hours, not every minute is 60 seconds, etc. Working with dates requires enough special domain knowledge that I think it&#39;d be harmful to try to genericize numeric concepts over it.<br></p><p>While this is true, &quot;ten seconds from now&quot; is always ten seconds from now, and &quot;seconds between date1 and date2&quot; is always the same number of seconds. There is a basic level of time measurement and manipulation which is completely independent of time zones and calendars; that&#39;s what NSDate and NSTimeInterval represent. They are needed fairly often, and they are perfectly compatible with Strideable&#39;s semantics.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural Strideable.Stride, but it&#39;s not particularly clear to me that you want 1 second to be a default stride. It&#39;s the default you would guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt; <br>&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not every day is 24 hours, not every minute is 60 seconds, etc. Working with dates requires enough special domain knowledge that I think it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt; <br>&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds from now, and &quot;seconds between date1 and date2&quot; is always the same number of seconds. There is a basic level of time measurement and manipulation which is completely independent of time zones and calendars; that&#39;s what NSDate and NSTimeInterval represent. They are needed fairly often, and they are perfectly compatible with Strideable&#39;s semantics.<br></p><p>Perhaps, but if you make Date strideable by seconds and automatically receive a bunch of utility methods based on that, then it becomes really tempting to abuse absolute time periods, or to accidentally misuse generic Strideable utilities instead of calendar-aware ones. We don&#39;t make String a sequence for similar reasons (though perhaps, by analogy to String, there could be `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are Strideable).<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 30, 2016 at 02:00:00pm</p></header><div class="content"><p>Good idea to add `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views<br>that are Strideable<br></p><p>  -- Howard.<br></p><p>On 30 March 2016 at 13:57, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural<br>&gt; Strideable.Stride, but it&#39;s not particularly clear to me that you want 1<br>&gt; second to be a default stride. It&#39;s the default you would guess, but it&#39;s<br>&gt; not actually a particularly useful default.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not<br>&gt; every day is 24 hours, not every minute is 60 seconds, etc. Working with<br>&gt; dates requires enough special domain knowledge that I think it&#39;d be harmful<br>&gt; to try to genericize numeric concepts over it.<br>&gt; &gt;<br>&gt; &gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds from<br>&gt; now, and &quot;seconds between date1 and date2&quot; is always the same number of<br>&gt; seconds. There is a basic level of time measurement and manipulation which<br>&gt; is completely independent of time zones and calendars; that&#39;s what NSDate<br>&gt; and NSTimeInterval represent. They are needed fairly often, and they are<br>&gt; perfectly compatible with Strideable&#39;s semantics.<br>&gt;<br>&gt; Perhaps, but if you make Date strideable by seconds and automatically<br>&gt; receive a bunch of utility methods based on that, then it becomes really<br>&gt; tempting to abuse absolute time periods, or to accidentally misuse generic<br>&gt; Strideable utilities instead of calendar-aware ones. We don&#39;t make String a<br>&gt; sequence for similar reasons (though perhaps, by analogy to String, there<br>&gt; could be `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are<br>&gt; Strideable).<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/123c353a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>March 29, 2016 at 10:00:00pm</p></header><div class="content"><p>On Tue, Mar 29, 2016 at 9:57 PM, Joe Groff via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural Strideable.Stride, but it&#39;s not particularly clear to me that you want 1 second to be a default stride. It&#39;s the default you would guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not every day is 24 hours, not every minute is 60 seconds, etc. Working with dates requires enough special domain knowledge that I think it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt;&gt;<br>&gt;&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds from now, and &quot;seconds between date1 and date2&quot; is always the same number of seconds. There is a basic level of time measurement and manipulation which is completely independent of time zones and calendars; that&#39;s what NSDate and NSTimeInterval represent. They are needed fairly often, and they are perfectly compatible with Strideable&#39;s semantics.<br>&gt;<br>&gt; Perhaps, but if you make Date strideable by seconds and automatically receive a bunch of utility methods based on that, then it becomes really tempting to abuse absolute time periods, or to accidentally misuse generic Strideable utilities instead of calendar-aware ones. We don&#39;t make String a sequence for similar reasons (though perhaps, by analogy to String, there could be `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are Strideable).<br></p><p>That could still encourage abuse, however. If people aren&#39;t going to<br>seek out calendar-aware utilities, they&#39;re unlikely to be rolling<br>their own ways of guarding against assumptions such as &quot;24 hours from<br>now is tomorrow.&quot; It&#39;d be astonishing to such a user to find out that<br>striding by day doesn&#39;t necessarily give you each successive calendar<br>day (which it can&#39;t be guaranteed to do if &quot;day&quot; is simply a shorthand<br>for 86,400 seconds). And with leap seconds in the picture, it is<br>impossible to increment by any unit greater than seconds while still<br>aligning with the calendar, since two minutes from some future date<br>and time could be 121 or 122 seconds away.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Am 30.03.2016 um 05:58 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; On Tue, Mar 29, 2016 at 9:57 PM, Joe Groff via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural Strideable.Stride, but it&#39;s not particularly clear to me that you want 1 second to be a default stride. It&#39;s the default you would guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not every day is 24 hours, not every minute is 60 seconds, etc. Working with dates requires enough special domain knowledge that I think it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds from now, and &quot;seconds between date1 and date2&quot; is always the same number of seconds. There is a basic level of time measurement and manipulation which is completely independent of time zones and calendars; that&#39;s what NSDate and NSTimeInterval represent. They are needed fairly often, and they are perfectly compatible with Strideable&#39;s semantics.<br>&gt;&gt; <br>&gt;&gt; Perhaps, but if you make Date strideable by seconds and automatically receive a bunch of utility methods based on that, then it becomes really tempting to abuse absolute time periods, or to accidentally misuse generic Strideable utilities instead of calendar-aware ones. We don&#39;t make String a sequence for similar reasons (though perhaps, by analogy to String, there could be `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are Strideable).<br>&gt; <br>&gt; That could still encourage abuse, however. If people aren&#39;t going to<br>&gt; seek out calendar-aware utilities, they&#39;re unlikely to be rolling<br>&gt; their own ways of guarding against assumptions such as &quot;24 hours from<br>&gt; now is tomorrow.&quot; It&#39;d be astonishing to such a user to find out that<br>&gt; striding by day doesn&#39;t necessarily give you each successive calendar<br>&gt; day (which it can&#39;t be guaranteed to do if &quot;day&quot; is simply a shorthand<br>&gt; for 86,400 seconds). And with leap seconds in the picture, it is<br></p><p>These views should of course be calendar aware, so striding by day does exactly that and not by some number of seconds or whatever?<br></p><p>-Thorsten <br></p><p><br>&gt; impossible to increment by any unit greater than seconds while still<br>&gt; aligning with the calendar, since two minutes from some future date<br>&gt; and time could be 121 or 122 seconds away.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 29, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; We don&#39;t make String a sequence for similar reasons (though perhaps, by analogy to String, there could be `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are Strideable).<br></p><p>Well, you managed to nerd snipe me pretty hard with this suggestion.<br></p><p>First design: https://gist.github.com/brentdax/e73402b36f71feb7d8a8190fa1e1d096<br></p><p>	let date = NSDate()<br>	<br>	let now = date.unitView(.Day)<br>	let tomorrow = now + 1<br>	let yesterday = now - 1<br>	<br>	for view in yesterday.stride(through: tomorrow, by: 1) {<br>	    print(view.date)<br>	}<br></p><p>This seems to be really clunky. The linkage between date and unit/calendar is poorly motivated and arbitrary. The preconditions in `distanceTo(_:)` are scary, and converting back to a date is annoying and painful.<br></p><p>Second design: https://gist.github.com/brentdax/4272a3e01ed7037d2c5d6ba413ecf2a9<br></p><p>	let calendar = NSCalendar.currentCalendar()<br>	<br>	let now = NSDate()<br>	let tomorrow = now + calendar.interval(1, .Day)<br>	let yesterday = now - calendar.interval(1, .Day)<br>	<br>	for date in yesterday.stride(through: tomorrow, by: calendar.interval(1, .Day)) {<br>	    print(date)<br>	}<br></p><p>This could use a lot of design improvements—NSCalendar.Interval could carry an NSDateComponents, which would allow arithmetic with intervals, and the syntax could be improved with various conveniences to the point where you could write things like `days(1, in: calendar)` or just `days(1)`—but I think this is enough to get a sense of the direction.<br></p><p>Calendar intervals make more sense as a concept, and the implementation has fewer crazy preconditions—though there are still a couple—but `distanceTo` is unimplementable and there are various other ridiculous limitations. (One of them comes from Strideable indirectly requiring IntegerLiteralConvertible when it really just needs some way to construct a zero value.) Basically, you can make this work for the basics but it&#39;s not actually a good semantic match for Strideable.<br></p><p>The safety of both of these designs could benefit from dependent types, but of course we don&#39;t have those.<br></p><p>The general sense I have is that this badly needs some kind of context object, but Strideable is simply not designed that way.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 30, 2016 at 08:00:00am</p></header><div class="content"><p>on Tue Mar 29 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural<br>&gt;&gt;&gt; Strideable.Stride, but it&#39;s not particularly clear to me that you<br>&gt;&gt;&gt; want 1 second to be a default stride. It&#39;s the default you would<br>&gt;<br>&gt;&gt;&gt; guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not<br>&gt;&gt;&gt; every day is 24 hours, not every minute is 60 seconds, etc. Working<br>&gt;&gt;&gt; with dates requires enough special domain knowledge that I think<br>&gt;&gt;&gt; it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt;&gt; <br>&gt;&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds<br>&gt;&gt; from now, and &quot;seconds between date1 and date2&quot; is always the same<br>&gt;&gt; number of seconds. There is a basic level of time measurement and<br>&gt;&gt; manipulation which is completely independent of time zones and<br>&gt;&gt; calendars; that&#39;s what NSDate and NSTimeInterval represent. They are<br>&gt;&gt; needed fairly often, and they are perfectly compatible with<br>&gt;&gt; Strideable&#39;s semantics.<br>&gt;<br>&gt; Perhaps, but if you make Date strideable by seconds and automatically<br>&gt; receive a bunch of utility methods based on that, then it becomes<br>&gt; really tempting to abuse absolute time periods, or to accidentally<br>&gt; misuse generic Strideable utilities instead of calendar-aware ones. We<br>&gt; don&#39;t make String a sequence for similar reasons (though perhaps, by<br>&gt; analogy to String, there could be<br>&gt; `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are<br>&gt; Strideable).<br></p><p>Except that collections aren&#39;t Strideable.  A strideable type is a<br>value that has an implied unit of measure so that you can offset it<br>without reference to any collection.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 30, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 30, 2016, at 8:50 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Mar 29 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural<br>&gt;&gt;&gt;&gt; Strideable.Stride, but it&#39;s not particularly clear to me that you<br>&gt;&gt;&gt;&gt; want 1 second to be a default stride. It&#39;s the default you would<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not<br>&gt;&gt;&gt;&gt; every day is 24 hours, not every minute is 60 seconds, etc. Working<br>&gt;&gt;&gt;&gt; with dates requires enough special domain knowledge that I think<br>&gt;&gt;&gt;&gt; it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds<br>&gt;&gt;&gt; from now, and &quot;seconds between date1 and date2&quot; is always the same<br>&gt;&gt;&gt; number of seconds. There is a basic level of time measurement and<br>&gt;&gt;&gt; manipulation which is completely independent of time zones and<br>&gt;&gt;&gt; calendars; that&#39;s what NSDate and NSTimeInterval represent. They are<br>&gt;&gt;&gt; needed fairly often, and they are perfectly compatible with<br>&gt;&gt;&gt; Strideable&#39;s semantics.<br>&gt;&gt; <br>&gt;&gt; Perhaps, but if you make Date strideable by seconds and automatically<br>&gt;&gt; receive a bunch of utility methods based on that, then it becomes<br>&gt;&gt; really tempting to abuse absolute time periods, or to accidentally<br>&gt;&gt; misuse generic Strideable utilities instead of calendar-aware ones. We<br>&gt;&gt; don&#39;t make String a sequence for similar reasons (though perhaps, by<br>&gt;&gt; analogy to String, there could be<br>&gt;&gt; `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are<br>&gt;&gt; Strideable).<br>&gt; <br>&gt; Except that collections aren&#39;t Strideable.  A strideable type is a<br>&gt; value that has an implied unit of measure so that you can offset it<br>&gt; without reference to any collection.<br></p><p>Who said anything about collections?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 30, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Mar 30 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Mar 30, 2016, at 8:50 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Mar 29 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural<br>&gt;&gt;&gt;&gt;&gt; Strideable.Stride, but it&#39;s not particularly clear to me that you<br>&gt;&gt;&gt;&gt;&gt; want 1 second to be a default stride. It&#39;s the default you would<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not<br>&gt;&gt;&gt;&gt;&gt; every day is 24 hours, not every minute is 60 seconds, etc. Working<br>&gt;&gt;&gt;&gt;&gt; with dates requires enough special domain knowledge that I think<br>&gt;&gt;&gt;&gt;&gt; it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds<br>&gt;&gt;&gt;&gt; from now, and &quot;seconds between date1 and date2&quot; is always the same<br>&gt;&gt;&gt;&gt; number of seconds. There is a basic level of time measurement and<br>&gt;&gt;&gt;&gt; manipulation which is completely independent of time zones and<br>&gt;&gt;&gt;&gt; calendars; that&#39;s what NSDate and NSTimeInterval represent. They are<br>&gt;&gt;&gt;&gt; needed fairly often, and they are perfectly compatible with<br>&gt;&gt;&gt;&gt; Strideable&#39;s semantics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps, but if you make Date strideable by seconds and automatically<br>&gt;&gt;&gt; receive a bunch of utility methods based on that, then it becomes<br>&gt;&gt;&gt; really tempting to abuse absolute time periods, or to accidentally<br>&gt;&gt;&gt; misuse generic Strideable utilities instead of calendar-aware ones. We<br>&gt;&gt;&gt; don&#39;t make String a sequence for similar reasons (though perhaps, by<br>&gt;&gt;&gt; analogy to String, there could be<br>&gt;&gt;&gt; `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are<br>&gt;&gt;&gt; Strideable).<br>&gt;&gt; <br>&gt;&gt; Except that collections aren&#39;t Strideable.  A strideable type is a<br>&gt;&gt; value that has an implied unit of measure so that you can offset it<br>&gt;&gt; without reference to any collection.<br>&gt;<br>&gt; Who said anything about collections?<br></p><p>That&#39;s what those views are.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 30, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 30, 2016, at 11:42 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Mar 30 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Mar 30, 2016, at 8:50 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Mar 29 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mar 28, 2016, at 5:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Floating-point seconds (as NSTimeIntervals) are the natural<br>&gt;&gt;&gt;&gt;&gt;&gt; Strideable.Stride, but it&#39;s not particularly clear to me that you<br>&gt;&gt;&gt;&gt;&gt;&gt; want 1 second to be a default stride. It&#39;s the default you would<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; guess, but it&#39;s not actually a particularly useful default.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Any fixed-time-period stride with dates is fraught with peril. Not<br>&gt;&gt;&gt;&gt;&gt;&gt; every day is 24 hours, not every minute is 60 seconds, etc. Working<br>&gt;&gt;&gt;&gt;&gt;&gt; with dates requires enough special domain knowledge that I think<br>&gt;&gt;&gt;&gt;&gt;&gt; it&#39;d be harmful to try to genericize numeric concepts over it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; While this is true, &quot;ten seconds from now&quot; is always ten seconds<br>&gt;&gt;&gt;&gt;&gt; from now, and &quot;seconds between date1 and date2&quot; is always the same<br>&gt;&gt;&gt;&gt;&gt; number of seconds. There is a basic level of time measurement and<br>&gt;&gt;&gt;&gt;&gt; manipulation which is completely independent of time zones and<br>&gt;&gt;&gt;&gt;&gt; calendars; that&#39;s what NSDate and NSTimeInterval represent. They are<br>&gt;&gt;&gt;&gt;&gt; needed fairly often, and they are perfectly compatible with<br>&gt;&gt;&gt;&gt;&gt; Strideable&#39;s semantics.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Perhaps, but if you make Date strideable by seconds and automatically<br>&gt;&gt;&gt;&gt; receive a bunch of utility methods based on that, then it becomes<br>&gt;&gt;&gt;&gt; really tempting to abuse absolute time periods, or to accidentally<br>&gt;&gt;&gt;&gt; misuse generic Strideable utilities instead of calendar-aware ones. We<br>&gt;&gt;&gt;&gt; don&#39;t make String a sequence for similar reasons (though perhaps, by<br>&gt;&gt;&gt;&gt; analogy to String, there could be<br>&gt;&gt;&gt;&gt; `seconds`/`days`/`solarMonths`/`lunarMonths`/etc. views that are<br>&gt;&gt;&gt;&gt; Strideable).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Except that collections aren&#39;t Strideable.  A strideable type is a<br>&gt;&gt;&gt; value that has an implied unit of measure so that you can offset it<br>&gt;&gt;&gt; without reference to any collection.<br>&gt;&gt; <br>&gt;&gt; Who said anything about collections?<br>&gt; <br>&gt; That&#39;s what those views are.<br></p><p>Sure, but I was making an analogy. String isn&#39;t a Collection by itself because operating on pieces of a string usually requires a lot of domain-specific knowledge, yet we provide Collection views that present it as a collection of user-chosen units. Date (IMO) shouldn&#39;t be Strideable for similar reasons, since correctly manipulating dates requires a lot of domain-specific knowledge, yet we could provide Strideable views of a Date that advances by user-selected intervals. I wasn&#39;t claiming Date was a collection.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
