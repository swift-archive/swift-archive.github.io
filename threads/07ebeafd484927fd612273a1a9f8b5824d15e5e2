<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Philosophy of Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June  8, 2016 at 04:00:00pm</p></header><div class="content"><p>on Wed Jun 08 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The interplay of the first two and the last two is what makes the<br>&gt; language unique. For example, structs have a simple, high-level<br>&gt; programmer model — “pass by value semantics” — but the compiler jumps<br>&gt; through all those COW hoops to make them perform _most_ of the time as<br>&gt; if they were C structs statically allocated and then passed by<br>&gt; pointer.<br></p><p>I have no argument with most of what you wrote, but this part is just<br>inaccurate.  Plain structs are never CoW&#39;d, and the compiler doesn&#39;t<br>introduce CoW.  The standard library implements CoW “manually” for<br>specific types like Array and String. <br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Philosophy of Swift</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>June  8, 2016 at 06:00:00pm</p></header><div class="content"><p>On Jun 8, 2016, at 6:13 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Wed Jun 08 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The interplay of the first two and the last two is what makes the<br>&gt;&gt; language unique. For example, structs have a simple, high-level<br>&gt;&gt; programmer model — “pass by value semantics” — but the compiler jumps<br>&gt;&gt; through all those COW hoops to make them perform _most_ of the time as<br>&gt;&gt; if they were C structs statically allocated and then passed by<br>&gt;&gt; pointer.<br>&gt; <br>&gt; I have no argument with most of what you wrote, but this part is just<br>&gt; inaccurate.  Plain structs are never CoW&#39;d, and the compiler doesn&#39;t<br>&gt; introduce CoW.  The standard library implements CoW “manually” for<br>&gt; specific types like Array and String. <br></p><p>So then only language/runtime magic is isUniquelyReferenced(), and all the other “hoops” are in the standard lib?<br></p><p>I guess I just lump compiler and standard library together in my mind too carelessly!<br></p><p>P<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
