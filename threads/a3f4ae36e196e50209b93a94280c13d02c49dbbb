<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c95973962a6a9f56329d8d9515098ef?s=50"></div><header><strong>Improve Swift APIs for NSExpression and NSIncrementalStore</strong> from <string>Andrew Tetlaw</string> &lt;andrew at tetlaw.id.au&gt;<p>July 12, 2016 at 11:00:00am</p></header><div class="content"><p>Apologies if this has been discussed, I couldn&#39;t find any mention in the<br>list or on https://github.com/apple/swift-3-api-guidelines-review.<br></p><p>The NSIncrementalStore method:<br></p><p>    func referenceObjectForObjectID(_ objectID: NSManagedObjectID) -&gt;<br>AnyObject<br></p><p>Can thrown an exception, but it&#39;s not marked as throws. From the<br>documentation:<br></p><p>&quot;This method raises an NSInvalidArgumentException if the object ID was not<br>created by the receiving store.&quot;<br></p><p>NSExpression has a constantValue property:<br></p><p>    var constantValue: AnyObject { get }<br></p><p>that can raise an exception at runtime, but it&#39;s not marked as throws. From<br>the documentation:<br></p><p>&#39;Accessing this property raises an exception if it is not applicable to the<br>expression.&quot;<br></p><p>The NSExpression constantValue property can also return nil at runtime, but<br>it&#39;s return type is AnyObject; not an optional.<br></p><p>If you construct an NSComparisonPredicate with a format string like:<br></p><p>    &quot;property == nil&quot;<br></p><p>and you examine the expression returned by predicate.rightExpression. You<br>can&#39;t call expression.constantValue from Swift because it&#39;ll crash with<br>EXC_BAD_ACCESS. You also can&#39;t protect against a nil value because the<br>return type is not optional.<br></p><p><br>To protect Swift against both of these situations, you have to use<br>Objective-C wrapper functions. For example to protect against exceptions:<br></p><p>NSException *_Nullable IADCatchObjCException(void (^_Nullable block)())<br>{<br>    NSException *exception = nil;<br>    @try {<br>        if (block) {<br>            block();<br>        }<br>    } @catch (NSException *e) {<br>        exception = e;<br>    }<br>    return exception;<br>}<br></p><p>To protect against a surprise nil at runtime:<br></p><p>inline _Nullable id IADMaybeNilValue(_Nullable id value)<br>{<br>    return value ?: nil;<br>}<br></p><p>I was hoping this could be improved for the Swift API?<br></p><p>--<br>Andrew Tetlaw<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/a3f4dbbb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Improve Swift APIs for NSExpression and NSIncrementalStore</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 12, 2016 at 10:00:00am</p></header><div class="content"><p>[swift-evolution to bcc]<br></p><p>Hi, Andrew. Objective-C exceptions are not the same as Swift errors (the things that are thrown); they have effectively come to indicate fatal conditions in Apple’s frameworks, and neither Objective-C nor Swift are compiled exception-safe in the C++ sense.* (That is, if an Objective-C exception is raised, the program will leak, and some objects may be in an invalid state.)<br></p><p>Swift errors correspond to the Cocoa NSError idiom, and the latter is imported as such.<br></p><p>Separately, issues with Cocoa APIs should be filed as bug reports with Apple, rather than raised on the swift.org mailing lists or bug tracker. The Swift Open Source project does not control Apple’s APIs, and the features which do affect particular frameworks (the SDK “overlays” and “API notes”) come from the particular framework teams within Apple.<br></p><p>Best,<br>Jordan<br></p><p>* Objective-C can be compiled in an exception-safe mode, but it’s off by default. I don’t know if Apple’s frameworks are compiled in this mode.<br></p><p><br>&gt; On Jul 11, 2016, at 20:07, Andrew Tetlaw via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Apologies if this has been discussed, I couldn&#39;t find any mention in the list or on https://github.com/apple/swift-3-api-guidelines-review &lt;https://github.com/apple/swift-3-api-guidelines-review&gt;.<br>&gt; <br>&gt; The NSIncrementalStore method:<br>&gt; <br>&gt;     func referenceObjectForObjectID(_ objectID: NSManagedObjectID) -&gt; AnyObject<br>&gt; <br>&gt; Can thrown an exception, but it&#39;s not marked as throws. From the documentation:<br>&gt; <br>&gt; &quot;This method raises an NSInvalidArgumentException if the object ID was not created by the receiving store.&quot;<br>&gt; <br>&gt; NSExpression has a constantValue property:<br>&gt; <br>&gt;     var constantValue: AnyObject { get }<br>&gt; <br>&gt; that can raise an exception at runtime, but it&#39;s not marked as throws. From the documentation:<br>&gt; <br>&gt; &#39;Accessing this property raises an exception if it is not applicable to the expression.&quot;<br>&gt; <br>&gt; The NSExpression constantValue property can also return nil at runtime, but it&#39;s return type is AnyObject; not an optional.<br>&gt; <br>&gt; If you construct an NSComparisonPredicate with a format string like:<br>&gt; <br>&gt;     &quot;property == nil&quot;<br>&gt; <br>&gt; and you examine the expression returned by predicate.rightExpression. You can&#39;t call expression.constantValue from Swift because it&#39;ll crash with EXC_BAD_ACCESS. You also can&#39;t protect against a nil value because the return type is not optional.<br>&gt; <br>&gt; <br>&gt; To protect Swift against both of these situations, you have to use Objective-C wrapper functions. For example to protect against exceptions:<br>&gt; <br>&gt; NSException *_Nullable IADCatchObjCException(void (^_Nullable block)())<br>&gt; {<br>&gt;     NSException *exception = nil;<br>&gt;     @try {<br>&gt;         if (block) {<br>&gt;             block();<br>&gt;         }<br>&gt;     } @catch (NSException *e) {<br>&gt;         exception = e;<br>&gt;     }<br>&gt;     return exception;<br>&gt; }<br>&gt; <br>&gt; To protect against a surprise nil at runtime:<br>&gt; <br>&gt; inline _Nullable id IADMaybeNilValue(_Nullable id value)<br>&gt; {<br>&gt;     return value ?: nil;<br>&gt; }<br>&gt; <br>&gt; I was hoping this could be improved for the Swift API?<br>&gt; <br>&gt; --<br>&gt; Andrew Tetlaw<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/1e3b1fbb/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
