<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>[Proposal draft] Add `Clamp` function to standard library</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>September  3, 2016 at 01:00:00am</p></header><div class="content"><p>Introduction<br></p><p>The aim of this proposal is to introduce clamp functionality to the swift<br>standard library. The clamp function would take a value and a upper and<br>lower bounds to clamp the value to, ensuring that the return value of the<br>function is within the range specified by the upper and lower bounds.<br>Swift-evolution thread: Discussion thread topic for that proposal<br>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160829/026748.html&gt;<br>&lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#motivation&gt;<br>Motivation<br></p><p>The standard library already includes functionality for min and max but at<br>the time of this writing there is no global function for clamp. Adding a<br>clamp function would complement min and max really well and would also<br>eliminate the need for developers to write their own clamp functionality.<br>&lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#proposed-solution&gt;Proposed<br>solution<br></p><p>I propose that a global clamp function akin to min and max be added to the<br>standard library.<br>&lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#detailed-design&gt;Detailed<br>design<br></p><p>The implementation of the global clamp function would be as follows:<br></p><p>public func clamp&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T) -&gt; T {<br>  return max(lower, min(value, upper))<br>}<br></p><p>&lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#impact-on-existing-code&gt;Impact<br>on existing code<br></p><p>There are no impacts on existing code, this proposal is purely additive.<br>&lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#alternatives-considered&gt;Alternatives<br>considered<br></p><p>Aside from not making the additions that this proposal wishes to make to<br>the standard library no other alternatives have been considered.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/5a478a8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal draft] Add `Clamp` function to standard library</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  2, 2016 at 05:00:00pm</p></header><div class="content"><p>Besides my concern that this is not in scope for Swift 4 phase 1, or for<br>the standard library generally, the function as proposed is unsatisfactory<br>because the behavior is incorrect when lower &gt; upper.<br></p><p>Either<br></p><p>(a) the parameters should be labeled (and for consistency with ranges,<br>those labels should be &quot;lowerBound&quot; and &quot;upperBound&quot;) and a precondition<br>should exist before evaluation of the return value, or<br></p><p>(b) this function should take two arguments, one of these being a Range, or<br></p><p>(c) better still--this should be a method on numeric types or on Range. I&#39;m<br>not convinced that there is a use case for clamping values of any<br>Comparable type. What does it mean to clamp a String, for example?<br></p><p>Finally, it could possibly be more performant to compute the value using<br>the comparison operators &lt; and &gt; directly instead of using the functions<br>max and min. It would be nice to have benchmarks on that.<br></p><p>But I am still not convinced that this function is important enough *and*<br>susceptible enough to an incorrect implementation that the standard library<br>should provide its own.<br>On Fri, Sep 2, 2016 at 11:56 Nicholas Maccharoli via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Introduction<br>&gt;<br>&gt; The aim of this proposal is to introduce clamp functionality to the swift<br>&gt; standard library. The clamp function would take a value and a upper and<br>&gt; lower bounds to clamp the value to, ensuring that the return value of the<br>&gt; function is within the range specified by the upper and lower bounds.<br>&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160829/026748.html&gt;<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#motivation&gt;<br>&gt; Motivation<br>&gt;<br>&gt; The standard library already includes functionality for min and max but<br>&gt; at the time of this writing there is no global function for clamp. Adding<br>&gt; a clamp function would complement min and max really well and would also<br>&gt; eliminate the need for developers to write their own clamp functionality.<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#proposed-solution&gt;Proposed<br>&gt; solution<br>&gt;<br>&gt; I propose that a global clamp function akin to min and max be added to<br>&gt; the standard library.<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#detailed-design&gt;Detailed<br>&gt; design<br>&gt;<br>&gt; The implementation of the global clamp function would be as follows:<br>&gt;<br>&gt; public func clamp&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T) -&gt; T {<br>&gt;   return max(lower, min(value, upper))<br>&gt; }<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#impact-on-existing-code&gt;Impact<br>&gt; on existing code<br>&gt;<br>&gt; There are no impacts on existing code, this proposal is purely additive.<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#alternatives-considered&gt;Alternatives<br>&gt; considered<br>&gt;<br>&gt; Aside from not making the additions that this proposal wishes to make to<br>&gt; the standard library no other alternatives have been considered.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/79256269/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Proposal draft] Add `Clamp` function to standard library</strong> from <string>David RÃ¶nnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>September  2, 2016 at 10:00:00pm</p></header><div class="content"><p>There is already a `clamped` function for clamping one range to another and I feel that this function should be consistent with that one. As I see it, it can either be consistent in that it takes a Range as its argument, or in being an extension to Range. Probably something like either one of these:<br></p><p>extension Comparable { // or something else?<br>    func clamped(to range: Range&lt;Self&gt;) -&gt; Self <br>}<br></p><p>extension Range { <br>    func clamping(_ value: Bound) -&gt; Bound<br>}<br></p><p>Involving a range is good because that means that ensuring that the bounds checking (lower &lt; upper) is already taken care of.<br></p><p>I do feel that this a useful addition to the standard library. But it is purely additive, so it should wait until after Phase 1.<br></p><p>- David<br></p><p>Sent from my iPad<br></p><p>&gt; On 2 Sep 2016, at 18:55, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; The aim of this proposal is to introduce clamp functionality to the swift standard library. The clamp function would take a value and a upper and lower bounds to clamp the value to, ensuring that the return value of the function is within the range specified by the upper and lower bounds. Swift-evolution thread: Discussion thread topic for that proposal<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; The standard library already includes functionality for min and max but at the time of this writing there is no global function for clamp. Adding a clamp function would complement min and max really well and would also eliminate the need for developers to write their own clamp functionality.<br>&gt; <br>&gt; Proposed solution<br>&gt; <br>&gt; I propose that a global clamp function akin to min and max be added to the standard library.<br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; The implementation of the global clamp function would be as follows:<br>&gt; <br>&gt; public func clamp&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T) -&gt; T {<br>&gt;   return max(lower, min(value, upper))<br>&gt; }<br>&gt; Impact on existing code<br>&gt; <br>&gt; There are no impacts on existing code, this proposal is purely additive.<br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; Aside from not making the additions that this proposal wishes to make to the standard library no other alternatives have been considered.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/5937a662/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal draft] Add `Clamp` function to standard library</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  2, 2016 at 09:00:00pm</p></header><div class="content"><p>On some thought, Strideable rather than Comparable seems appropriate.<br>Strideable types have some meaningful concept of distance between two<br>values and would (or should, if they don&#39;t already?) include types like<br>Date. I like Strideable.clamped(to:) a lot, and the parallels with<br>Range.clamped(to:) make sense.<br>On Fri, Sep 2, 2016 at 15:58 David RÃ¶nnqvist via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There is already a `clamped` function for clamping one range to another<br>&gt; and I feel that this function should be consistent with that one. As I see<br>&gt; it, it can either be consistent in that it takes a Range as its argument,<br>&gt; or in being an extension to Range. Probably something like either one of<br>&gt; these:<br>&gt;<br>&gt; extension Comparable { // or something else?<br>&gt;     func clamped(to range: Range&lt;Self&gt;) -&gt; Self<br>&gt; }<br>&gt;<br>&gt; extension Range {<br>&gt;     func clamping(_ value: Bound) -&gt; Bound<br>&gt; }<br>&gt;<br>&gt; Involving a range is good because that means that ensuring that the bounds<br>&gt; checking (lower &lt; upper) is already taken care of.<br>&gt;<br>&gt; I do feel that this a useful addition to the standard library. But it is<br>&gt; purely additive, so it should wait until after Phase 1.<br>&gt;<br>&gt; - David<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On 2 Sep 2016, at 18:55, Nicholas Maccharoli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Introduction<br>&gt;<br>&gt; The aim of this proposal is to introduce clamp functionality to the swift<br>&gt; standard library. The clamp function would take a value and a upper and<br>&gt; lower bounds to clamp the value to, ensuring that the return value of the<br>&gt; function is within the range specified by the upper and lower bounds.<br>&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160829/026748.html&gt;<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#motivation&gt;<br>&gt; Motivation<br>&gt;<br>&gt; The standard library already includes functionality for min and max but<br>&gt; at the time of this writing there is no global function for clamp. Adding<br>&gt; a clamp function would complement min and max really well and would also<br>&gt; eliminate the need for developers to write their own clamp functionality.<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#proposed-solution&gt;Proposed<br>&gt; solution<br>&gt;<br>&gt; I propose that a global clamp function akin to min and max be added to<br>&gt; the standard library.<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#detailed-design&gt;Detailed<br>&gt; design<br>&gt;<br>&gt; The implementation of the global clamp function would be as follows:<br>&gt;<br>&gt; public func clamp&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T) -&gt; T {<br>&gt;   return max(lower, min(value, upper))<br>&gt; }<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#impact-on-existing-code&gt;Impact<br>&gt; on existing code<br>&gt;<br>&gt; There are no impacts on existing code, this proposal is purely additive.<br>&gt;<br>&gt; &lt;https://github.com/Nirma/swift-evolution/blob/clamp_proposal/proposals/NNNN-add-clamp-to-standard-library.md#alternatives-considered&gt;Alternatives<br>&gt; considered<br>&gt;<br>&gt; Aside from not making the additions that this proposal wishes to make to<br>&gt; the standard library no other alternatives have been considered.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/5466d413/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal draft] Add `Clamp` function to standard library</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>September  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 9:55 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; The aim of this proposal is to introduce clamp functionality to the swift standard library. The clamp function would take a value and a upper and lower bounds to clamp the value to, ensuring that the return value of the function is within the range specified by the upper and lower bounds. Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160829/026748.html&gt;<br>As others have pointed out, this is a purely additive change that is out of scope for Swift 4 stage 1.  We need to keep standard library work focused on things like String.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/36f884ea/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
