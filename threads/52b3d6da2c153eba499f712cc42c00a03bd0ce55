<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0016 - Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 25, 2016 at 09:00:00am</p></header><div class="content"><p>on Thu Mar 24 2016, Guillaume Lessard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt; I support this. Currently this requires the use of unsafeBitCast, which works okay but is unwieldy.<br>&gt; I used unsafeBitCast to implement tagged pointers in a previous<br>&gt; exploratory project, and I think this proposal would improve<br>&gt; readability without being an inducement to recklessness.<br>&gt;<br>&gt; “bitPattern” is a decent label, but that is also used for the lossy<br>&gt; int-to-int conversions; <br></p><p>No, we never use “bitPattern” for those conversions.  We have<br>“truncatingBitPattern” where conversions are lossy.<br></p><p>&gt; pointer-to-int casting may be different enough to warrant a different<br>&gt; label. “unsafeAddress” comes to mind, but may clash with the<br>&gt; similarly-named function.<br>&gt;<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;&gt; * If you have you used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Like uintptr_t, this requires an intentional step in order to do bit operations on pointers.<br>&gt;<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; A careful read and some experience trying this in swift.<br>&gt;<br>&gt; Cheers,<br>&gt; Guillaume Lessard<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
