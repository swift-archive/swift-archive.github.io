<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0c1c074a6e02963cd57f747ba0ccfe0b?s=50"></div><header><strong>NSRegularExpression.firstMatchInString() fails on Linux</strong> from <string>Mamatha Busi</string> &lt;mamabusi at in.ibm.com&gt;<p>March  2, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello<br></p><p>The following test case, that currently fails on Linux,  is extracted from <br>some of the excluded tests inside TestFoundation/TestNSRegularExpression. <br></p><p>import Foundation<br></p><p>let searchStr = &quot;123&quot;<br>let testRegex = try NSRegularExpression.init(pattern: <br>&quot;a(b|c|d)(x|y|z)*|123&quot;, options: [])<br>let firstMatch = testRegex.firstMatchInString(searchStr, options: [], <br>range: NSMakeRange(0,3))<br></p><p>if NSEqualRanges((firstMatch!.rangeAtIndex(1), NSMakeRange(NSNotFound,0)) <br>{<br>    print(&quot;Test passed&quot;)<br>} else {<br>    print(&quot;First match first capture range = <br>\(NSStringFromRange(firstMatch!.rangeAtIndex(1)))&quot;)<br>    print(&quot;Test failed&quot;)<br>}<br></p><p><br></p><p>In the above scenario, no capture group participates in the match. So, <br>firstMatch.rangeAtIndex(1) should ideally return range {NSNotFound, 0} but <br>the actual returned value is range {-1, 0}. Hence the failure.<br></p><p>Debugging on the CoreFoundation, it is observed that the value -1 is <br>coming from &#39;kCFNotFound&#39; which is defined as -1. On the Foundation side, <br>&#39;NSNotFound&#39; is defined with the value of ‘Int.max’ (which must be <br>Int32.max and Int64.max on 32 and 64 bit platforms respectively).<br></p><p>There are a couple of queries that I have:<br></p><p>-&gt; Is &#39;NSNotFound&#39; in Foundation mapped  to &#39;kCFNotFound&#39;  in <br>CoreFoundation?<br></p><p>-&gt; If so, then why do &#39;NSNotFound&#39; and &#39;kCFNotFound&#39; have different values <br>on the Foundation and CoreFoundation respectively?<br></p><p>Also, I tested by modifying the &#39;kCFNotFound&#39; value in <br>CoreFoundation/Base.subproj/CFBase.h  (See below code snippet):<br></p><p>#if TARGET_RT_64_BIT<br>static const CFIndex kCFNotFound = LONG_MAX;<br>#else<br>static const CFIndex kCFNotFound = INT_MAX;<br>#endif<br></p><p><br>With this change the above mentioned test-case passes but a lot of other <br>TestFoundation tests seem to fail.<br></p><p>Please provide your comments on the appropriate change that is needed <br>here. <br></p><p>Thank you.<br></p><p>Regards<br>Mamatha<br></p><p><br></p><p>Mamatha Busi<br></p><p><br>Java L3 Support<br></p><p>IBM Software Group<br> <br>India Software Labs<br> <br></p><p><br></p><p> <br></p><p><br></p><p> <br></p><p>e-mail:<br>mamabusi at in.ibm.com<br> <br></p><p>Java Technology India Group<br> <br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160302/36a45f91/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: not available<br>Type: image/gif<br>Size: 360 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160302/36a45f91/attachment.gif&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>NSRegularExpression.firstMatchInString() fails on Linux</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>March  3, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Mamatha,<br></p><p>&gt; On Mar 2, 2016, at 3:57 AM, Mamatha Busi via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello<br>&gt; <br>&gt; The following test case, that currently fails on Linux,  is extracted from some of the excluded tests inside TestFoundation/TestNSRegularExpression. <br>&gt; <br>&gt; import Foundation<br>&gt; <br>&gt; let searchStr = &quot;123&quot;<br>&gt; let testRegex = try NSRegularExpression.init(pattern: &quot;a(b|c|d)(x|y|z)*|123&quot;, options: [])<br>&gt; let firstMatch = testRegex.firstMatchInString(searchStr, options: [], range: NSMakeRange(0,3))<br>&gt; <br>&gt; if NSEqualRanges((firstMatch!.rangeAtIndex(1), NSMakeRange(NSNotFound,0)) {<br>&gt;     print(&quot;Test passed&quot;)<br>&gt; } else {<br>&gt;     print(&quot;First match first capture range = \(NSStringFromRange(firstMatch!.rangeAtIndex(1)))&quot;)<br>&gt;     print(&quot;Test failed&quot;)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; In the above scenario, no capture group participates in the match. So, firstMatch.rangeAtIndex(1) should ideally return range {NSNotFound, 0} but the actual returned value is range {-1, 0}. Hence the failure.<br>&gt; <br>&gt; Debugging on the CoreFoundation, it is observed that the value -1 is coming from &#39;kCFNotFound&#39; which is defined as -1. On the Foundation side, &#39;NSNotFound&#39; is defined with the value of ‘Int.max’ (which must be Int32.max and Int64.max on 32 and 64 bit platforms respectively).<br>&gt; <br>&gt; There are a couple of queries that I have:<br>&gt; <br>&gt; -&gt; Is &#39;NSNotFound&#39; in Foundation mapped  to &#39;kCFNotFound&#39;  in CoreFoundation?<br>&gt; <br>&gt; -&gt; If so, then why do &#39;NSNotFound&#39; and &#39;kCFNotFound&#39; have different values on the Foundation and CoreFoundation respectively?<br>&gt; <br></p><p>They don’t have the same value; we translate it manually in most places.<br></p><p>&gt; Also, I tested by modifying the &#39;kCFNotFound&#39; value in CoreFoundation/Base.subproj/CFBase.h  (See below code snippet):<br>&gt; <br>&gt; #if TARGET_RT_64_BIT<br>&gt; static const CFIndex kCFNotFound = LONG_MAX;<br>&gt; #else<br>&gt; static const CFIndex kCFNotFound = INT_MAX;<br>&gt; #endif<br>&gt; <br>&gt; <br>&gt; With this change the above mentioned test-case passes but a lot of other TestFoundation tests seem to fail.<br>&gt; <br>&gt; Please provide your comments on the appropriate change that is needed here. <br>&gt; <br>&gt; Thank you.<br></p><p>I think we probably just need to check the result from the CF function and translate it into an NSNotFound in this one particular case.<br></p><p>Thanks,<br>- Tony<br></p><p>&gt; <br>&gt; Regards<br>&gt; Mamatha<br>&gt; Mamatha Busi		<br>&gt; &lt;Mail Attachment.gif&gt;<br>&gt; Java L3 Support	<br>&gt; IBM Software Group	 <br>&gt; India Software Labs	 	<br>&gt;  	<br>&gt;  	<br>&gt; e-mail:	mamabusi at in.ibm.com	 	<br>&gt; Java Technology India Group &lt;http://bit.ly/a7KpQj&gt;	 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160303/f95dbfeb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSRegularExpression.firstMatchInString() fails on Linux</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March  3, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 3, 2016, at 10:22 AM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Mamatha,<br>&gt; <br>&gt;&gt; On Mar 2, 2016, at 3:57 AM, Mamatha Busi via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello<br>&gt;&gt; <br>&gt;&gt; The following test case, that currently fails on Linux,  is extracted from some of the excluded tests inside TestFoundation/TestNSRegularExpression. <br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; let searchStr = &quot;123&quot;<br>&gt;&gt; let testRegex = try NSRegularExpression.init(pattern: &quot;a(b|c|d)(x|y|z)*|123&quot;, options: [])<br>&gt;&gt; let firstMatch = testRegex.firstMatchInString(searchStr, options: [], range: NSMakeRange(0,3))<br>&gt;&gt; <br>&gt;&gt; if NSEqualRanges((firstMatch!.rangeAtIndex(1), NSMakeRange(NSNotFound,0)) {<br>&gt;&gt;     print(&quot;Test passed&quot;)<br>&gt;&gt; } else {<br>&gt;&gt;     print(&quot;First match first capture range = \(NSStringFromRange(firstMatch!.rangeAtIndex(1)))&quot;)<br>&gt;&gt;     print(&quot;Test failed&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; In the above scenario, no capture group participates in the match. So, firstMatch.rangeAtIndex(1) should ideally return range {NSNotFound, 0} but the actual returned value is range {-1, 0}. Hence the failure.<br>&gt;&gt; <br>&gt;&gt; Debugging on the CoreFoundation, it is observed that the value -1 is coming from &#39;kCFNotFound&#39; which is defined as -1. On the Foundation side, &#39;NSNotFound&#39; is defined with the value of ‘Int.max’ (which must be Int32.max and Int64.max on 32 and 64 bit platforms respectively).<br>&gt;&gt; <br>&gt;&gt; There are a couple of queries that I have:<br>&gt;&gt; <br>&gt;&gt; -&gt; Is &#39;NSNotFound&#39; in Foundation mapped  to &#39;kCFNotFound&#39;  in CoreFoundation?<br>&gt;&gt; <br>&gt;&gt; -&gt; If so, then why do &#39;NSNotFound&#39; and &#39;kCFNotFound&#39; have different values on the Foundation and CoreFoundation respectively?<br>&gt;&gt; <br>&gt; <br>&gt; They don’t have the same value; we translate it manually in most places.<br>&gt; <br>&gt;&gt; Also, I tested by modifying the &#39;kCFNotFound&#39; value in CoreFoundation/Base.subproj/CFBase.h  (See below code snippet):<br>&gt;&gt; <br>&gt;&gt; #if TARGET_RT_64_BIT<br>&gt;&gt; static const CFIndex kCFNotFound = LONG_MAX;<br>&gt;&gt; #else<br>&gt;&gt; static const CFIndex kCFNotFound = INT_MAX;<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; With this change the above mentioned test-case passes but a lot of other TestFoundation tests seem to fail.<br>&gt;&gt; <br>&gt;&gt; Please provide your comments on the appropriate change that is needed here. <br>&gt;&gt; <br>&gt;&gt; Thank you.<br>&gt; <br>&gt; I think we probably just need to check the result from the CF function and translate it into an NSNotFound in this one particular case.<br></p><p>I think the problem in this case is that we fetch a buffer of CFRanges and pass that to the result creation.<br></p><p>ranges: UnsafeMutablePointer&lt;CFRange&gt;<br>...<br>let result = NSTextCheckingResult.regularExpressionCheckingResultWithRanges(NSRangePointer(ranges), count: count, regularExpression: matcher.regex)<br></p><p>&gt; <br>&gt; Thanks,<br>&gt; - Tony<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Regards<br>&gt;&gt; Mamatha<br>&gt;&gt; Mamatha Busi		<br>&gt;&gt; &lt;Mail Attachment.gif&gt;<br>&gt;&gt; Java L3 Support	<br>&gt;&gt; IBM Software Group	 <br>&gt;&gt; India Software Labs	 	<br>&gt;&gt;  	<br>&gt;&gt;  	<br>&gt;&gt; e-mail:	mamabusi at in.ibm.com &lt;mailto:mamabusi at in.ibm.com&gt;	 	<br>&gt;&gt; Java Technology India Group &lt;http://bit.ly/a7KpQj&gt;	 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160303/a97d3bcb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0c1c074a6e02963cd57f747ba0ccfe0b?s=50"></div><header><strong>NSRegularExpression.firstMatchInString() fails on Linux</strong> from <string>Mamatha Busi</string> &lt;mamabusi at in.ibm.com&gt;<p>March  8, 2016 at 05:00:00pm</p></header><div class="content"><p>@Philippe Hausler, @Tony Parker: Thank you for the response. <br></p><p>As per Tony&#39;s suggestions I have translated CF&#39;s kCFNotFound into an <br>NSNotFound of Foundation in &#39;NSTextCheckingResult&#39;  (the place where the <br>ranges are being constructed). Below is the code snippet with the changes:<br></p><p> _regularExpression = regularExpression<br>        super.init()<br>        let notFound = NSRange(location: NSNotFound,length: 0)<br>        for i in 0..&lt;count {<br>            ranges[i].location == kCFNotFound ? _ranges.append(notFound) : <br>_ranges.append(ranges[i])<br>        }<br></p><p>@Philippe: Request your comments on the above code changes.<br></p><p>TestFoundation has been run and I see no failures with the above changes.<br></p><p>The tests &#39;test_complexRegularExpressions&#39; in the  TestNSRegularExpression <br>were excluded till date. I am now running the excluded tests as well and <br>there are a few test-cases here which deal with the ranges having <br>NSNotFound. Along with these should there be more tests written to test <br>the same? <br></p><p>Regards<br>Mamatha<br></p><p><br></p><p>Mamatha Busi<br></p><p><br>Java L3 Support<br></p><p>IBM Software Group<br> <br>India Software Labs<br> <br></p><p><br></p><p> <br></p><p><br></p><p> <br></p><p>e-mail:<br>mamabusi at in.ibm.com<br> <br></p><p>Java Technology India Group<br> <br></p><p><br></p><p><br></p><p><br></p><p>From:   Philippe Hausler &lt;phausler at apple.com&gt;<br>To:     Tony Parker &lt;anthony.parker at apple.com&gt;<br>Cc:     Mamatha Busi/India/IBM at IBMIN, swift-corelibs-dev at swift.org<br>Date:   03/04/2016 12:02 AM<br>Subject:        Re: [swift-corelibs-dev] <br>NSRegularExpression.firstMatchInString() fails  on Linux<br>Sent by:        phausler at apple.com<br></p><p><br></p><p><br>On Mar 3, 2016, at 10:22 AM, Tony Parker via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>Hi Mamatha,<br></p><p>On Mar 2, 2016, at 3:57 AM, Mamatha Busi via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>Hello<br></p><p>The following test case, that currently fails on Linux,  is extracted from <br>some of the excluded tests inside TestFoundation/TestNSRegularExpression. <br></p><p>import Foundation<br></p><p>let searchStr = &quot;123&quot;<br>let testRegex = try NSRegularExpression.init(pattern: <br>&quot;a(b|c|d)(x|y|z)*|123&quot;, options: [])<br>let firstMatch = testRegex.firstMatchInString(searchStr, options: [], <br>range: NSMakeRange(0,3))<br></p><p>if NSEqualRanges((firstMatch!.rangeAtIndex(1), NSMakeRange(NSNotFound,0)) <br>{<br>    print(&quot;Test passed&quot;)<br>} else {<br>    print(&quot;First match first capture range = <br>\(NSStringFromRange(firstMatch!.rangeAtIndex(1)))&quot;)<br>    print(&quot;Test failed&quot;)<br>}<br></p><p><br></p><p>In the above scenario, no capture group participates in the match. So, <br>firstMatch.rangeAtIndex(1) should ideally return range {NSNotFound, 0} but <br>the actual returned value is range {-1, 0}. Hence the failure.<br></p><p>Debugging on the CoreFoundation, it is observed that the value -1 is <br>coming from &#39;kCFNotFound&#39; which is defined as -1. On the Foundation side, <br>&#39;NSNotFound&#39; is defined with the value of ‘Int.max’ (which must be <br>Int32.max and Int64.max on 32 and 64 bit platforms respectively).<br></p><p>There are a couple of queries that I have:<br></p><p>-&gt; Is &#39;NSNotFound&#39; in Foundation mapped  to &#39;kCFNotFound&#39;  in <br>CoreFoundation?<br></p><p>-&gt; If so, then why do &#39;NSNotFound&#39; and &#39;kCFNotFound&#39; have different values <br>on the Foundation and CoreFoundation respectively?<br></p><p><br>They don’t have the same value; we translate it manually in most places.<br></p><p>Also, I tested by modifying the &#39;kCFNotFound&#39; value in <br>CoreFoundation/Base.subproj/CFBase.h  (See below code snippet):<br></p><p>#if TARGET_RT_64_BIT<br>static const CFIndex kCFNotFound = LONG_MAX;<br>#else<br>static const CFIndex kCFNotFound = INT_MAX;<br>#endif<br></p><p><br>With this change the above mentioned test-case passes but a lot of other <br>TestFoundation tests seem to fail.<br></p><p>Please provide your comments on the appropriate change that is needed <br>here. <br></p><p>Thank you.<br></p><p>I think we probably just need to check the result from the CF function and <br>translate it into an NSNotFound in this one particular case.<br></p><p>I think the problem in this case is that we fetch a buffer of CFRanges and <br>pass that to the result creation.<br></p><p>ranges: UnsafeMutablePointer&lt;CFRange&gt;<br>...<br>let result = <br>NSTextCheckingResult.regularExpressionCheckingResultWithRanges(NSRangePointer(ranges), <br>count: count, regularExpression: matcher.regex)<br></p><p><br>Thanks,<br>- Tony<br></p><p><br>Regards<br>Mamatha<br></p><p><br>Mamatha Busi<br></p><p>&lt;Mail Attachment.gif&gt;<br>Java L3 Support<br></p><p>IBM Software Group<br> <br>India Software Labs<br> <br></p><p><br></p><p> <br></p><p><br></p><p> <br></p><p>e-mail:<br>mamabusi at in.ibm.com<br> <br></p><p>Java Technology India Group<br> <br></p><p><br></p><p><br></p><p>_______________________________________________<br>swift-corelibs-dev mailing list<br>swift-corelibs-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>_______________________________________________<br>swift-corelibs-dev mailing list<br>swift-corelibs-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160308/d559c57b/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: not available<br>Type: image/gif<br>Size: 360 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160308/d559c57b/attachment.gif&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
