<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-dev] Rebinding UnsafePointer makes it mutable</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>September 19, 2016 at 11:00:00pm</p></header><div class="content"><p>on Mon Sep 19 2016, Andrew Trick &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Sep 19, 2016, at 1:24 AM, Martin R via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I noticed that both UnsafePointer and UnsafeMutablePointer have the identical method<br>&gt;&gt; <br>&gt;&gt;    public func withMemoryRebound&lt;T, Result&gt;(to: T.Type, capacity count: Int, _ body: (UnsafeMutablePointer&lt;T&gt;) throws -&gt; Result) rethrows -&gt; Result<br>&gt;<br>&gt;&gt; <br>&gt;&gt; so that rebinding an immutable pointer gives you a _mutable_ pointer. That is different from what<br>&gt;&gt; <br>&gt;&gt;    Unsafe[Mutable]Pointer&lt;Pointee&gt; {<br>&gt;&gt;      func withMemoryRebound&lt;T&gt;(to: T.Type, capacity count: Int,<br>&gt;&gt;        _ body: (Unsafe[Mutable]Pointer&lt;T&gt;) throws -&gt; ()) rethrows<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; in https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md indicates. Perhaps I am misunderstanding something. Shouldn&#39;t rebinding an UnsafePointer result in an UnsafePointer again?<br>&gt;&gt; <br>&gt;&gt; Martin<br>&gt;<br>&gt; I think you’re right about that. I didn’t notice the discrepancy until<br>&gt; source breaking changes were frozen and was concerned that fixing it<br>&gt; would be more restrictive.<br>&gt;<br>&gt; Some users may migrate their code to:<br>&gt;<br>&gt; constPtr.withMemoryRebound(to: T.self, capacity: 1) {<br>&gt;  takesMutablePointer($0)<br>&gt; }<br>&gt;<br>&gt; We probably want them to be more explicit:<br>&gt;<br>&gt; constPtr.withMemoryRebound(to: T.self, capacity: 1) {<br>&gt;  takesMutablePointer(UnsafeMutablePointer(mutating: $0))<br>&gt; }<br>&gt;<br>&gt; We could possibly justify correcting this in Swift 3 though on these grounds:<br>&gt;<br>&gt; - It’s effectively a bug considering that the proposal and<br>&gt; implementation are inconsistent.<br></p><p>It&#39;s definitely a bug, IMO.<br></p><p>&gt; - There is a correct way write the code that will continue to work<br>&gt; before and after fixing the bug.  <br>&gt; - A simple fixit will tell them to add the “mutating” label.<br>&gt;<br>&gt; If not, it’s something I was already planning to roll into Swift 4.<br>&gt;<br>&gt; -Andy<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-dev] Rebinding UnsafePointer makes it mutable</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September 20, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Sep 19, 2016, at 11:44 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Sep 19 2016, Andrew Trick &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Sep 19, 2016, at 1:24 AM, Martin R via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I noticed that both UnsafePointer and UnsafeMutablePointer have the identical method<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   public func withMemoryRebound&lt;T, Result&gt;(to: T.Type, capacity count: Int, _ body: (UnsafeMutablePointer&lt;T&gt;) throws -&gt; Result) rethrows -&gt; Result<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; so that rebinding an immutable pointer gives you a _mutable_ pointer. That is different from what<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   Unsafe[Mutable]Pointer&lt;Pointee&gt; {<br>&gt;&gt;&gt;     func withMemoryRebound&lt;T&gt;(to: T.Type, capacity count: Int,<br>&gt;&gt;&gt;       _ body: (Unsafe[Mutable]Pointer&lt;T&gt;) throws -&gt; ()) rethrows<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; in https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md indicates. Perhaps I am misunderstanding something. Shouldn&#39;t rebinding an UnsafePointer result in an UnsafePointer again?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Martin<br>&gt;&gt; <br>&gt;&gt; I think you’re right about that. I didn’t notice the discrepancy until<br>&gt;&gt; source breaking changes were frozen and was concerned that fixing it<br>&gt;&gt; would be more restrictive.<br>&gt;&gt; <br>&gt;&gt; Some users may migrate their code to:<br>&gt;&gt; <br>&gt;&gt; constPtr.withMemoryRebound(to: T.self, capacity: 1) {<br>&gt;&gt; takesMutablePointer($0)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; We probably want them to be more explicit:<br>&gt;&gt; <br>&gt;&gt; constPtr.withMemoryRebound(to: T.self, capacity: 1) {<br>&gt;&gt; takesMutablePointer(UnsafeMutablePointer(mutating: $0))<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; We could possibly justify correcting this in Swift 3 though on these grounds:<br>&gt;&gt; <br>&gt;&gt; - It’s effectively a bug considering that the proposal and<br>&gt;&gt; implementation are inconsistent.<br>&gt; <br>&gt; It&#39;s definitely a bug, IMO.<br>&gt; <br>&gt;&gt; - There is a correct way write the code that will continue to work<br>&gt;&gt; before and after fixing the bug.  <br>&gt;&gt; - A simple fixit will tell them to add the “mutating” label.<br>&gt;&gt; <br>&gt;&gt; If not, it’s something I was already planning to roll into Swift 4.<br></p><p>If there’s no objection, I’ll just go ahead with a fix on the 3.0 branch since it was already covered by SE-0107.<br>-Andy<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
