<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>April  3, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello all!<br></p><p>SR-710 &lt;https://bugs.swift.org/browse/SR-710&gt; tracks a major goal for Swift<br>3: having SwiftPM/corelibs-xctest automatically generate a list of test<br>methods to execute. The implementations we’re considering span various<br>parts of the codebase: libIDE, SourceKit, the reflection APIs, etc. We need<br>input from people familiar with these components.<br></p><p>Here’s the issue: currently, users of corelibs-xctest must manually list<br>each test they wish to execute:<br></p><p>class MyTestCase: XCTestCase {<br>    static var allTests: [(String, MyTestCase -&gt; () throws -&gt; Void)] {<br>        return [<br>            (&quot;testFoo&quot;, testFoo)<br>        ]<br>    }<br></p><p>    func testFoo() {<br>        XCTAssert(true)<br>    }<br></p><p>    // The user forgot to list this method in `allTests`, so it is never run.<br>    func testBar() {<br>        XCTAssert(true)<br>    }<br>}<br></p><p>This is tedious and error-prone. We need to do better by Swift 3!<br></p><p>Apple XCTest uses Objective-C reflection at runtime to compile a list of<br>NSInvocation to execute as tests. We can’t use the same approach in Swift:<br>as far as I know, there’s no reflection API that allows us to find instance<br>methods defined on a class, and adding such an API is considered a stretch<br>goal for Swift 3<br>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001682.html&gt;<br>.<br></p><p>Several commenters in SR-710 &lt;https://bugs.swift.org/browse/SR-710&gt; have<br>suggested using libIDE or SourceKit to determine the list of tests. I<br>believe this is the most feasible approach that could be implemented in<br>time for Swift 3. A few caveats:<br></p><p>   - SourceKit is coupled to XPC, which only works on OS X.<br>   - Logic like SourceKit::FuncDeclEntityInfo.IsTestCandidate<br>   &lt;https://github.com/apple/swift/blob/12593eff135ab2fa99529e9fa8ecc61ce268cd45/tools/SourceKit/include/SourceKit/Core/LangSupport.h#L54&gt;<br>   exists in SourceKit, but not libIDE.<br>   - libIDE defines a C++ interface, so we could not use it from Swift<br>   (should we choose to use Swift to generate the list of test methods).<br></p><p>I think we have three concrete options for implementing SR-710<br>&lt;https://bugs.swift.org/browse/SR-710&gt;:<br></p><p>   1. Port SourceKit to Linux, using a different form of IPC since XPC is<br>   not available.<br>   2. Move business logic like IsTestCandidate to libIDE. If the tool to<br>   generate the list of tests will be written in Swift, we can add a C header<br>   (like libclang or sourcekitd). The tool would link against libIDE and use<br>   the C header.<br>   3. Move business logic like IsTestCandidate to libIDE and add a swiftc<br>   option to interface with its functionality. The tool that generates the<br>   list of tests would invoke swiftc to get the list.<br></p><p>I think #2 is the best option. It’s less work than both #1 and #3. I<br>believe logic like IsTestCandidate belongs in libIDE anyway—SourceKit<br>should stick to XPC and asynchronous communication with libIDE.<br></p><p>Not being an expert in many of these components, I have several questions:<br></p><p>   - I’m assuming the reflection API to return a list of instance methods<br>   on a XCTestCase subclass is not ready yet, and won’t be for some time.<br>   Is this accurate?<br>   - I’m assuming that SourceKit is intended to be an asynchronous wrapper<br>   over libIDE, and that logic like IsTestCandidate should be moved to<br>   libIDE. Is this accurate?<br>   - I’m assuming that SourceKit is coupled with XPC, and that it would be<br>   more work to port it to Linux than it would be to move its logic to libIDE.<br>   Is this accurate?<br></p><p>If you have thoughts/feedback, please reply to this email or comment on<br>SR-710 &lt;https://bugs.swift.org/browse/SR-710&gt;. Your input would be greatly<br>appreciated!!<br></p><p>Brian Gesiak<br>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160403/fafbaebe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April  3, 2016 at 03:00:00pm</p></header><div class="content"><p>On Sun, Apr 3, 2016 at 2:11 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; I think #2 is the best option. It’s less work than both #1 and #3. I believe<br>&gt; logic like IsTestCandidate belongs in libIDE anyway—SourceKit should stick<br>&gt; to XPC and asynchronous communication with libIDE.<br></p><p>I like #3 better (an option to swiftc), because that would decouple<br>the test discovery tool from the Swift compiler.  That would allow you<br>to use the discovery tool with different compilers.  And, because we<br>would avoid statically linking libIDE, it would mean one less copy of<br>LLVM, Clang and Swift in the toolchain.<br></p><p>&gt; Not being an expert in many of these components, I have several questions:<br>&gt;<br>&gt; I’m assuming the reflection API to return a list of instance methods on a<br>&gt; XCTestCase subclass is not ready yet, and won’t be for some time. Is this<br>&gt; accurate?<br></p><p>I think so.<br></p><p>&gt; I’m assuming that SourceKit is intended to be an asynchronous wrapper over<br>&gt; libIDE, and that logic like IsTestCandidate should be moved to libIDE. Is<br>&gt; this accurate?<br></p><p>SourceKit has a lot of functionality of its own, but moving this<br>particular piece of logic to libIDE sounds reasonable.<br></p><p>&gt; I’m assuming that SourceKit is coupled with XPC, and that it would be more<br>&gt; work to port it to Linux than it would be to move its logic to libIDE. Is<br>&gt; this accurate?<br></p><p>It is not tightly coupled with XPC, there is a portability layer that<br>you could implement for Linux.  You would need to decide on an IPC<br>mechanism and serialization format though.<br></p><p>&gt; If you have thoughts/feedback, please reply to this email or comment on<br>&gt; SR-710. Your input would be greatly appreciated!!<br></p><p>I&#39;m wondering how feasible is it to change the XCTest API to<br>accommodate better the Swift language that we have, rather than trying<br>to add custom tooling to make the existing API work.  Adding magic<br>tooling that adds behavior not present in the language seems unnatural<br>to me.<br></p><p>Compare with StdlibUnittest -- by using an API to build tests we get<br>the following advantages:<br></p><p>- We completely avoid having the issue of test discovery, executing<br>the code discovers the tests.  No reflection needed!<br></p><p>- We can add attributes to tests (for example, skip, xfail).  In the<br>current XCTest API this would require adding some kind of user-defined<br>attributes, which is another language which is a long way from being<br>designed and implemented.<br></p><p>- We can define data-parameterized tests.<br></p><p>- Tests can be dynamically synthesized by control flow.  In the<br>current XCTest API, dynamically generating tests would mean<br>dynamically generating methods, which is even more far off than<br>read-only method reflection.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>April  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Thanks for the feedback, Dmitri!<br></p><p>I think I misstated options #2 and #3: where I typed &quot;move business logic<br>like IsTestCandidate to libIDE&quot;, I meant &quot;move a lot of the<br>non-XCTest-specific logic from SourceKit to libIDE, such that implementing<br>IsTestCandidate would be trivial in SourceKit and our test generation<br>tool&quot;. The last thing I&#39;d want to do is couple libIDE and XCTest!<br></p><p>On Sun, Apr 3, 2016 at 6:36 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Sun, Apr 3, 2016 at 2:11 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; &gt; I think #2 is the best option. It’s less work than both #1 and #3. I<br>&gt; believe<br>&gt; &gt; logic like IsTestCandidate belongs in libIDE anyway—SourceKit should<br>&gt; stick<br>&gt; &gt; to XPC and asynchronous communication with libIDE.<br>&gt;<br>&gt; I like #3 better (an option to swiftc), because that would decouple<br>&gt; the test discovery tool from the Swift compiler.  That would allow you<br>&gt; to use the discovery tool with different compilers.  And, because we<br>&gt; would avoid statically linking libIDE, it would mean one less copy of<br>&gt; LLVM, Clang and Swift in the toolchain.<br>&gt;<br>&gt;<br>My concern with adding a swiftc option would be deciding upon an interface<br>to it. Would we want something like clang-query--a generic method of<br>finding methods that match a set of criteria? That seems like it would be a<br>lot of work to implement.<br></p><p>Perhaps I&#39;m misunderstanding what you have in mind for swiftc. Could you<br>elaborate?<br></p><p><br>&gt; &gt; Not being an expert in many of these components, I have several<br>&gt; questions:<br>&gt; &gt;<br>&gt; &gt; I’m assuming the reflection API to return a list of instance methods on a<br>&gt; &gt; XCTestCase subclass is not ready yet, and won’t be for some time. Is this<br>&gt; &gt; accurate?<br>&gt;<br>&gt; I think so.<br>&gt;<br>&gt; &gt; I’m assuming that SourceKit is intended to be an asynchronous wrapper<br>&gt; over<br>&gt; &gt; libIDE, and that logic like IsTestCandidate should be moved to libIDE. Is<br>&gt; &gt; this accurate?<br>&gt;<br>&gt; SourceKit has a lot of functionality of its own, but moving this<br>&gt; particular piece of logic to libIDE sounds reasonable.<br>&gt;<br>&gt; &gt; I’m assuming that SourceKit is coupled with XPC, and that it would be<br>&gt; more<br>&gt; &gt; work to port it to Linux than it would be to move its logic to libIDE. Is<br>&gt; &gt; this accurate?<br>&gt;<br>&gt; It is not tightly coupled with XPC, there is a portability layer that<br>&gt; you could implement for Linux.  You would need to decide on an IPC<br>&gt; mechanism and serialization format though.<br>&gt;<br>&gt; &gt; If you have thoughts/feedback, please reply to this email or comment on<br>&gt; &gt; SR-710. Your input would be greatly appreciated!!<br>&gt;<br>&gt; I&#39;m wondering how feasible is it to change the XCTest API to<br>&gt; accommodate better the Swift language that we have, rather than trying<br>&gt; to add custom tooling to make the existing API work.  Adding magic<br>&gt; tooling that adds behavior not present in the language seems unnatural<br>&gt; to me.<br>&gt;<br>&gt; Compare with StdlibUnittest -- by using an API to build tests we get<br>&gt; the following advantages:<br>&gt;<br>&gt; - We completely avoid having the issue of test discovery, executing<br>&gt; the code discovers the tests.  No reflection needed!<br>&gt;<br>&gt; - We can add attributes to tests (for example, skip, xfail).  In the<br>&gt; current XCTest API this would require adding some kind of user-defined<br>&gt; attributes, which is another language which is a long way from being<br>&gt; designed and implemented.<br>&gt;<br>&gt; - We can define data-parameterized tests.<br>&gt;<br>&gt; - Tests can be dynamically synthesized by control flow.  In the<br>&gt; current XCTest API, dynamically generating tests would mean<br>&gt; dynamically generating methods, which is even more far off than<br>&gt; read-only method reflection.<br>&gt;<br></p><p>I definitely agree that all of these are fantastic features. However, the<br>corelibs-xctest README spells out the following goal for the project: &quot;This<br>version of XCTest uses the same API as the XCTest you are familiar with<br>from Xcode. Our goal is to enable your project&#39;s tests to run on all Swift<br>platforms without having to rewrite them.&quot;<br></p><p>This goal often conflicts with what would be the best API for a Swift<br>testing framework--we are forced to use mutable reference types, extensive<br>subclassing, include a ton of optional properties--all in order to mirror<br>exactly the Apple XCTest API.<br></p><p>I suppose we *could* modify the SDK overlay for XCTest to provide an API<br>more suitable for Swift, but I think that would involve a lot of<br>coordination with Apple XCTest and Xcode teams, some swift-evolution<br>proposals, and a potentially harsh migration path for developers writing<br>their tests in Apple XCTest. So while I think corelibs-xctest and Apple<br>XCTest can (and should) evolve to better take advantage of Swift features<br>over time, I don&#39;t think we can migrate both before Swift 3&#39;s release.<br></p><p>(+CC Mike Ferris, who works on Apple XCTest and corelibs-xctest.)<br></p><p>- Brian Gesiak<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160403/eb32fc4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April  3, 2016 at 06:00:00pm</p></header><div class="content"><p>On Sun, Apr 3, 2016 at 4:53 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; My concern with adding a swiftc option would be deciding upon an interface<br>&gt; to it. Would we want something like clang-query--a generic method of finding<br>&gt; methods that match a set of criteria? That seems like it would be a lot of<br>&gt; work to implement.<br></p><p>I imagined it would be an XCTest-specific flag, to only find<br>XCTest-style test methods.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>April  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Hmm... but then wouldn&#39;t that more tightly couple the test discovery tool<br>and the Swift compiler? In an earlier email you said you &quot;like #3 better<br>[...] because that would decouple the test discovery tool from the Swift<br>compiler.&quot; I think that part is confusing me.<br></p><p>In any case, so far it sounds like we&#39;ll be moving logic from SourceKit<br>into libIDE (although we&#39;re still mulling over options #2 or #3). Of<br>course, if anyone recommends a different approach, please reply to this<br>thread!<br></p><p>- Brian Gesiak<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160403/3b06c99d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April  3, 2016 at 08:00:00pm</p></header><div class="content"><p>On Sun, Apr 3, 2016 at 7:56 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; Hmm... but then wouldn&#39;t that more tightly couple the test discovery tool<br>&gt; and the Swift compiler? In an earlier email you said you &quot;like #3 better<br>&gt; [...] because that would decouple the test discovery tool from the Swift<br>&gt; compiler.&quot; I think that part is confusing me.<br></p><p>Sorry -- what I meant is that the compiler remains the point of truth<br>about the language and can find the tests.  The tools that actually<br>generate glue code won&#39;t need to parse code, and would be decoupled<br>from the compiler.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April 17, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Apr 3, 2016, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; Hmm... but then wouldn&#39;t that more tightly couple the test discovery tool<br>&gt;&gt; and the Swift compiler? In an earlier email you said you &quot;like #3 better<br>&gt;&gt; [...] because that would decouple the test discovery tool from the Swift<br>&gt;&gt; compiler.&quot; I think that part is confusing me.<br>&gt; <br>&gt; Sorry -- what I meant is that the compiler remains the point of truth<br>&gt; about the language and can find the tests.  The tools that actually<br>&gt; generate glue code won&#39;t need to parse code, and would be decoupled<br>&gt; from the compiler.<br></p><p>I am internally shipping a test framework that discovers tests via an out-of-tree parser.  Teaching swiftc about XCTest syntax is not sufficient to deprecate my parser, and therefore is not sufficient for the compiler to be the source of truth for my tests.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160417/00b0efb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>April 24, 2016 at 11:00:00pm</p></header><div class="content"><p>Thanks to this commit<br>&lt;https://github.com/apple/swift/commit/ad269b0e1fbc12037ae2c16634b5b451061657c6&gt;<br>it looks as if IsTestCandidate has been moved out of SourceKit and into<br>libIndex:<br></p><p>   - isTestCandidate(swift::ValueDecl)<br>   &lt;https://github.com/apple/swift/blob/8dad7f780347788f6032ad9e25ce5340aecf4073/lib/Index/Index.cpp#L754&gt;<br>   - swift::index::FuncDeclIndexSymbol.IsTestCandidate<br>   &lt;https://github.com/apple/swift/blob/41e4e9b6efc745f04df23bd6a803a467c57a66b8/include/swift/Index/IndexSymbol.h#L102&gt;<br>   and where it’s set<br>   &lt;https://github.com/apple/swift/blob/8dad7f780347788f6032ad9e25ce5340aecf4073/lib/Index/Index.cpp#L786&gt;<br>   .<br></p><p>I’m looking into adding an option to swiftc to emit XCTest candidate<br>methods. How does swiftc -frontend -dump-xctest-methods sound?<br></p><p>- Brian Gesiak<br>​<br></p><p>On Sun, Apr 17, 2016 at 5:50 PM, Drew Crawford &lt;drew at sealedabstract.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Apr 3, 2016, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hmm... but then wouldn&#39;t that more tightly couple the test discovery tool<br>&gt; and the Swift compiler? In an earlier email you said you &quot;like #3 better<br>&gt; [...] because that would decouple the test discovery tool from the Swift<br>&gt; compiler.&quot; I think that part is confusing me.<br>&gt;<br>&gt;<br>&gt; Sorry -- what I meant is that the compiler remains the point of truth<br>&gt; about the language and can find the tests.  The tools that actually<br>&gt; generate glue code won&#39;t need to parse code, and would be decoupled<br>&gt; from the compiler.<br>&gt;<br>&gt;<br>&gt; I am internally shipping a test framework that discovers tests via an<br>&gt; out-of-tree parser.  Teaching swiftc about XCTest syntax is not sufficient<br>&gt; to deprecate my parser, and therefore is not sufficient for the compiler to<br>&gt; be the source of truth for my tests.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160424/e2b2f941/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>May  1, 2016 at 08:00:00pm</p></header><div class="content"><p>I made an attempt at adding `swiftc -frontend -dump-xctest-methods`:<br>https://github.com/apple/swift/pull/2364<br></p><p>Feedback appreciated!!<br></p><p>- Brian Gesiak<br></p><p><br>On Sun, Apr 24, 2016 at 8:59 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br></p><p>&gt; Thanks to this commit<br>&gt; &lt;https://github.com/apple/swift/commit/ad269b0e1fbc12037ae2c16634b5b451061657c6&gt;<br>&gt; it looks as if IsTestCandidate has been moved out of SourceKit and into<br>&gt; libIndex:<br>&gt;<br>&gt;    - isTestCandidate(swift::ValueDecl)<br>&gt;    &lt;https://github.com/apple/swift/blob/8dad7f780347788f6032ad9e25ce5340aecf4073/lib/Index/Index.cpp#L754&gt;<br>&gt;    - swift::index::FuncDeclIndexSymbol.IsTestCandidate<br>&gt;    &lt;https://github.com/apple/swift/blob/41e4e9b6efc745f04df23bd6a803a467c57a66b8/include/swift/Index/IndexSymbol.h#L102&gt;<br>&gt;    and where it’s set<br>&gt;    &lt;https://github.com/apple/swift/blob/8dad7f780347788f6032ad9e25ce5340aecf4073/lib/Index/Index.cpp#L786&gt;<br>&gt;    .<br>&gt;<br>&gt; I’m looking into adding an option to swiftc to emit XCTest candidate<br>&gt; methods. How does swiftc -frontend -dump-xctest-methods sound?<br>&gt;<br>&gt; - Brian Gesiak<br>&gt; ​<br>&gt;<br>&gt; On Sun, Apr 17, 2016 at 5:50 PM, Drew Crawford &lt;drew at sealedabstract.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Apr 3, 2016, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hmm... but then wouldn&#39;t that more tightly couple the test discovery tool<br>&gt;&gt; and the Swift compiler? In an earlier email you said you &quot;like #3 better<br>&gt;&gt; [...] because that would decouple the test discovery tool from the Swift<br>&gt;&gt; compiler.&quot; I think that part is confusing me.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sorry -- what I meant is that the compiler remains the point of truth<br>&gt;&gt; about the language and can find the tests.  The tools that actually<br>&gt;&gt; generate glue code won&#39;t need to parse code, and would be decoupled<br>&gt;&gt; from the compiler.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I am internally shipping a test framework that discovers tests via an<br>&gt;&gt; out-of-tree parser.  Teaching swiftc about XCTest syntax is not sufficient<br>&gt;&gt; to deprecate my parser, and therefore is not sufficient for the compiler to<br>&gt;&gt; be the source of truth for my tests.<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160501/d4e751d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May  6, 2016 at 01:00:00pm</p></header><div class="content"><p>Sorry for the delay in following up.<br></p><p>I have had several long discussions on this topic with Dmitri and others, which<br>I will try to summarize here:<br></p><p>*TL;DR*: We think the right long-term path forward is to pursue porting<br>SourceKit to Linux, and would like to explore that direction first before trying<br>to develop a compromise which either (a) uses internal and likely-to-break APIs<br>(e.g., dump-ast) or (b) devotes significant engineering resources to a &quot;right<br>solution&quot; for this problem, but which will only solve this problem and not other<br>issues where having an API for use with the Swift language.<br></p><p>## Problem Statement<br></p><p>The XCTest API has historically been defined in terms of methods with a<br>particular naming convention `test...` which were in subclasses of XCTestCase.<br></p><p>On OS X, these methods can be found via the Objective-C runtime but that does<br>not work on Linux. Our current solution on Linux requires manual specification<br>of all of the test methods, and is a huge maintenance burden for people trying<br>to use XCTest on Linux or maintain cross-platform projects.<br></p><p>## Background<br></p><p>This feature works on OS X in two ways:<br></p><p>1. As mentioned, tests are run by dynamic discovery through the Objective-C<br>   runtime when the bundle containing the tests is executed.<br>   <br>2. Within the Xcode IDE, tests are &quot;discovered&quot; (for use in UI) through the use<br>   of the Xcode indexer.<br>   <br>   The mechanism at work here, for Swift, is a combination of functionality in<br>   the indexing engine (to aggregate and query results) and the raw underlying<br>   data provided by SourceKit.<br>   <br>   We would like any implementation of this feature to share as much code as<br>   possible with SourceKit and Xcode&#39;s implementation in order for<br>   cross-platform projects to behave predictably.<br>   <br>It also happens that SwiftPM has several other needs for API-based interactions<br>with the functionality in the Swift compiler. Several examples:<br>   <br>* We would like to be able to enforce the strictness of the `Package.swift`<br>  manifest file format. This requires APIs to interact with the Swift<br>  AST. https://bugs.swift.org/browse/SR-1433<br>  <br>* We would like to support advanced features for dealing with automatic<br>  inter-module dependencies. For example, one idea which has been proposed is<br>  that if a module attempted to import a module upon which it did not have a<br>  dependency, that we would prompt the developer if this dependency should<br>  automatically be added to the manifest. Doing this feature well requires<br>  APIs to interact with the Swift compiler as it parses source code and<br>  reports diagnostics.<br>  <br>* We would like to understand the current level of parallelism being used by<br>  the Swift compiler, so that llbuild can accurately schedule work. This<br>  requires APIs for interacting with an in-flight compilation process.<br></p><p>## Discussion<br></p><p>We discussed several avenues of attack on this problem. I will go through them<br>one by one. I am just attempting to summarize the conversation, obviously there<br>is a ton of nuance to each point, and hopefully other people will chime in if I<br>missed something important.<br></p><p>### Language Features<br></p><p>One way to view this problem is that XCTest&#39;s API (i.e., depending on test<br>naming and dynamic discovery) is a poor fit for Swift today, and that this<br>problem should be tackled in that direction.<br></p><p>For example, the Swift compiler itself has a test framework that does not depend<br>on dynamic discovery. One could also imagine language-level features which would<br>solve the arbitrary problem of wanting to find discoverable things; that could<br>take the form of an `@XCTest` attribute, or &quot;generalized attribute&quot; support.<br></p><p>The current mission for Swift 3, however, is API parity between Linux and OS X,<br>and so this direction does not lead to any short term solution. For that reason,<br>while many of us ultimately think this is the right long term direction, we need<br>to find another one as well.<br></p><p>### Custom &quot;Supported&quot; XCTest Feature<br></p><p>The next option is to pursue a custom, but &quot;supported&quot; feature intended to<br>tackle this problem head on. Some proposals that have come up are, e.g., a new<br>compiler flag which emits the list of test methods.<br></p><p>This approach has a couple unfortunate properties:<br></p><p>1. It is non-trivial. We can either design this as an incredibly XCTest specific<br>   feature requiring understanding of the backend (compiler directly emits<br>   metadata into .o file), or a midway feature (compiler tells us list of test<br>   methods, but then we have to manage incremental compilation and the desire to<br>   not compile things multiple times more than necessary ourselves).<br>   <br>2. It is not-reusable. The work we do here doesn&#39;t help with any of the other<br>   ways we want to use the Swift compiler as an API.<br>   <br>### Implement an API-based Interface<br></p><p>This approach means porting SourceKit to Linux, and then building this feature<br>on top of that (that itself will be non-trivial, which is something not to be<br>glossed over).<br></p><p>Everyone generally agrees we should have some kind of API-based access to the<br>compiler, so this is in line with our long-term direction, but in a way which is<br>actionable now (it does not require design).<br></p><p>This approach has its own issues:<br></p><p>1. Porting SourceKit may require a fair amount of work. The current code base is<br>   very OS X specific in particular areas (generally around the use of<br>   `libxpc`). This will require adding abstractions, developing alternatives,<br>   and writing the code and build system changes to get this to happen.<br>   <br>2. Somehwat unrelated, but the compiler itself (`swiftc`) is not yet written in<br>   a way that it can be used from SourceKit. If we do port and use SourceKit, it<br>   will mean the toolchains increase in size because we effectively will have<br>   two copies of many parts of Swift/Clang/LLVM installed.<br>   <br>3. By itself, this does not fully solve the issue. As mentioned in the<br>   background, SourceKit itself does not directly manage all parts of XCTest<br>   discovery today on OS X, it is a collaboration between SourceKit and the<br>   Xcode indexer to do discovery without execution. The expectation, however, is<br>   that we can, however, use SourceKit&#39;s APIs to implement this feature in a way<br>   that is &quot;supported&quot;.<br></p><p>## Conclusion<br></p><p>The conclusion was that after weighing all of the tradeoffs, it made the most<br>sense to encourage porting of SourceKit to Linux and then using it to build out<br>the Linux test discovery feature. This was most in line with a desirable<br>long-term direction without being blocked on language design.<br></p><p>I don&#39;t think we are particularly firm in this conclusion. If you feel that the work<br>you have already invested gets us so close that it is worth prioritizing that<br>approach, then please push back.<br></p><p> - Daniel<br></p><p>&gt; On May 1, 2016, at 8:19 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; I made an attempt at adding `swiftc -frontend -dump-xctest-methods`: https://github.com/apple/swift/pull/2364 &lt;https://github.com/apple/swift/pull/2364&gt;<br>&gt; <br>&gt; Feedback appreciated!!<br>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Sun, Apr 24, 2016 at 8:59 PM, Brian Gesiak &lt;modocache at gmail.com &lt;mailto:modocache at gmail.com&gt;&gt; wrote:<br>&gt; Thanks to this commit &lt;https://github.com/apple/swift/commit/ad269b0e1fbc12037ae2c16634b5b451061657c6&gt; it looks as if IsTestCandidate has been moved out of SourceKit and into libIndex:<br>&gt; <br>&gt; isTestCandidate(swift::ValueDecl) &lt;https://github.com/apple/swift/blob/8dad7f780347788f6032ad9e25ce5340aecf4073/lib/Index/Index.cpp#L754&gt;<br>&gt; swift::index::FuncDeclIndexSymbol.IsTestCandidate &lt;https://github.com/apple/swift/blob/41e4e9b6efc745f04df23bd6a803a467c57a66b8/include/swift/Index/IndexSymbol.h#L102&gt; and where it’s set &lt;https://github.com/apple/swift/blob/8dad7f780347788f6032ad9e25ce5340aecf4073/lib/Index/Index.cpp#L786&gt;.<br>&gt; I’m looking into adding an option to swiftc to emit XCTest candidate methods. How does swiftc -frontend -dump-xctest-methods sound?<br>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Sun, Apr 17, 2016 at 5:50 PM, Drew Crawford &lt;drew at sealedabstract.com &lt;mailto:drew at sealedabstract.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Apr 3, 2016, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hmm... but then wouldn&#39;t that more tightly couple the test discovery tool<br>&gt;&gt;&gt; and the Swift compiler? In an earlier email you said you &quot;like #3 better<br>&gt;&gt;&gt; [...] because that would decouple the test discovery tool from the Swift<br>&gt;&gt;&gt; compiler.&quot; I think that part is confusing me.<br>&gt;&gt; <br>&gt;&gt; Sorry -- what I meant is that the compiler remains the point of truth<br>&gt;&gt; about the language and can find the tests.  The tools that actually<br>&gt;&gt; generate glue code won&#39;t need to parse code, and would be decoupled<br>&gt;&gt; from the compiler.<br>&gt; <br>&gt; I am internally shipping a test framework that discovers tests via an out-of-tree parser.  Teaching swiftc about XCTest syntax is not sufficient to deprecate my parser, and therefore is not sufficient for the compiler to be the source of truth for my tests.<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160506/18a6bec8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>May  7, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; On May 6, 2016, at 3:04 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; The conclusion was that after weighing all of the tradeoffs, it made the most<br>&gt; sense to encourage porting of SourceKit to Linux and then using it to build out<br>&gt; the Linux test discovery feature. This was most in line with a desirable<br>&gt; long-term direction without being blocked on language design.<br></p><p>For whatever it&#39;s worth, this direction is a win on my side as well.<br></p><p>In addition to the problem of test discovery (for which I&#39;m using an out-of-tree parser), I have a lot of other problems entirely outside of testing that rely on source-level queries similar to the XCTest problem.  This is things like parsing comments for documentation, implementing dispatch-by-string, etc.  I currently rely on SK in many cases, but lack of support on Linux is a major issue.  Lack of features exposed in the SK APIs is another issue.<br></p><p>IMO it is a clear win to invest in resolving these problems inside SK.  Right now it is basically a glorified Xcode daemon, but I think it can have a bright future as a multi-client tool if we&#39;re willing to invest in making that happen.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160507/9e7c5a6d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>May  9, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks for the feedback, everyone!<br></p><p>Porting SourceKit to Linux seems like a reasonable solution to me. Still,<br>there are 354 lines of code in tools/SourceKit that reference &quot;XPC&quot;, so a<br>Linux port will take more than a few lines of source code changes.<br></p><p>I imagine we&#39;ll need to insert some sort of shim layer that will use libxpc<br>on OS X, and a hand-rolled solution for Linux. Alternatively, if anyone<br>knows of a good open-source library that implements IPC for Linux (and that<br>has a permissible license), that would be a great help here.<br></p><p>I&#39;ve also seen the idea proposed that Apple could open-source libxpc, which<br>we could then port to Linux. This would involve less work than installing a<br>shim layer in SourceKit, then in addition implementing a Linux IPC library<br>behind the shim. I don&#39;t know who I could talk about making this happen,<br>but in any case, I filed a Radar:<br></p><p>* rdar://26187442<br>* https://openradar.appspot.com/26187442<br></p><p>&gt; 2. Somehwat unrelated, but the compiler itself (`swiftc`) is not yet<br>written in a way that it can be used from SourceKit.<br></p><p>Could you explain this further?<br></p><p>- Brian Gesiak<br></p><p><br>On Sat, May 7, 2016 at 4:18 AM, Drew Crawford &lt;drew at sealedabstract.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 6, 2016, at 3:04 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;<br>&gt; The conclusion was that after weighing all of the tradeoffs, it made the<br>&gt; most<br>&gt; sense to encourage porting of SourceKit to Linux and then using it to<br>&gt; build out<br>&gt; the Linux test discovery feature. This was most in line with a desirable<br>&gt; long-term direction without being blocked on language design.<br>&gt;<br>&gt;<br>&gt; For whatever it&#39;s worth, this direction is a win on my side as well.<br>&gt;<br>&gt; In addition to the problem of test discovery (for which I&#39;m using an<br>&gt; out-of-tree parser), I have a lot of other problems entirely outside of<br>&gt; testing that rely on source-level queries similar to the XCTest problem.<br>&gt; This is things like parsing comments for documentation, implementing<br>&gt; dispatch-by-string, etc.  I currently rely on SK in many cases, but lack of<br>&gt; support on Linux is a major issue.  Lack of features exposed in the SK APIs<br>&gt; is another issue.<br>&gt;<br>&gt; IMO it is a clear win to invest in resolving these problems inside SK.<br>&gt; Right now it is basically a glorified Xcode daemon, but I think it can have<br>&gt; a bright future as a multi-client tool if we&#39;re willing to invest in making<br>&gt; that happen.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160509/78386387/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ffe95d2e2584a3b4adda3ca0e19c375d?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Luke Howard</string> &lt;lukeh at padl.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>There is libxpc from NextBSD:<br></p><p>https://github.com/NextBSD/libxpc &lt;https://github.com/NextBSD/libxpc&gt;<br></p><p>You’d still need to implement Mach IPC on top of something though.<br></p><p>— Luke<br></p><p>&gt; On 10 May 2016, at 12:35 PM, Brian Gesiak via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for the feedback, everyone!<br>&gt; <br>&gt; Porting SourceKit to Linux seems like a reasonable solution to me. Still, there are 354 lines of code in tools/SourceKit that reference &quot;XPC&quot;, so a Linux port will take more than a few lines of source code changes.<br>&gt; <br>&gt; I imagine we&#39;ll need to insert some sort of shim layer that will use libxpc on OS X, and a hand-rolled solution for Linux. Alternatively, if anyone knows of a good open-source library that implements IPC for Linux (and that has a permissible license), that would be a great help here.<br>&gt; <br>&gt; I&#39;ve also seen the idea proposed that Apple could open-source libxpc, which we could then port to Linux. This would involve less work than installing a shim layer in SourceKit, then in addition implementing a Linux IPC library behind the shim. I don&#39;t know who I could talk about making this happen, but in any case, I filed a Radar:<br>&gt; <br>&gt; * rdar://26187442<br>&gt; * https://openradar.appspot.com/26187442 &lt;https://openradar.appspot.com/26187442&gt;<br>&gt; &gt; 2. Somehwat unrelated, but the compiler itself (`swiftc`) is not yet written in a way that it can be used from SourceKit.<br>&gt; <br>&gt; Could you explain this further?<br>&gt; <br>&gt; - Brian Gesiak<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160510/a02b3e74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ffe95d2e2584a3b4adda3ca0e19c375d?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Luke Howard</string> &lt;lukeh at padl.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Or maybe not, looks like there’s a Unix transport in transports/unix.c.<br></p><p>&gt; On 10 May 2016, at 1:48 PM, Luke Howard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; There is libxpc from NextBSD:<br>&gt; <br>&gt; https://github.com/NextBSD/libxpc &lt;https://github.com/NextBSD/libxpc&gt;<br>&gt; <br>&gt; You’d still need to implement Mach IPC on top of something though.<br>&gt; <br>&gt; — Luke<br>&gt; <br>&gt;&gt; On 10 May 2016, at 12:35 PM, Brian Gesiak via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for the feedback, everyone!<br>&gt;&gt; <br>&gt;&gt; Porting SourceKit to Linux seems like a reasonable solution to me. Still, there are 354 lines of code in tools/SourceKit that reference &quot;XPC&quot;, so a Linux port will take more than a few lines of source code changes.<br>&gt;&gt; <br>&gt;&gt; I imagine we&#39;ll need to insert some sort of shim layer that will use libxpc on OS X, and a hand-rolled solution for Linux. Alternatively, if anyone knows of a good open-source library that implements IPC for Linux (and that has a permissible license), that would be a great help here.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve also seen the idea proposed that Apple could open-source libxpc, which we could then port to Linux. This would involve less work than installing a shim layer in SourceKit, then in addition implementing a Linux IPC library behind the shim. I don&#39;t know who I could talk about making this happen, but in any case, I filed a Radar:<br>&gt;&gt; <br>&gt;&gt; * rdar://26187442 &lt;rdar://26187442&gt;<br>&gt;&gt; * https://openradar.appspot.com/26187442 &lt;https://openradar.appspot.com/26187442&gt;<br>&gt;&gt; &gt; 2. Somehwat unrelated, but the compiler itself (`swiftc`) is not yet written in a way that it can be used from SourceKit.<br>&gt;&gt; <br>&gt;&gt; Could you explain this further?<br>&gt;&gt; <br>&gt;&gt; - Brian Gesiak<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>--<br>www.lukehoward.com<br>soundcloud.com/lukehoward<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160510/52340c03/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May  9, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, May 9, 2016 at 7:35 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; Thanks for the feedback, everyone!<br>&gt;<br>&gt; Porting SourceKit to Linux seems like a reasonable solution to me. Still,<br>&gt; there are 354 lines of code in tools/SourceKit that reference &quot;XPC&quot;, so a<br>&gt; Linux port will take more than a few lines of source code changes.<br>&gt;<br>&gt; I imagine we&#39;ll need to insert some sort of shim layer that will use libxpc<br>&gt; on OS X, and a hand-rolled solution for Linux. Alternatively, if anyone<br>&gt; knows of a good open-source library that implements IPC for Linux (and that<br>&gt; has a permissible license), that would be a great help here.<br></p><p>SourceKit actually supports &quot;pluggable&quot; transports.  There are two:<br>XPC, and an in-memory one (which could be bit-rotten a bit).  You can<br>either add the third one, or try to bootstrap with the in-memory one<br>for the first pass.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>May  9, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 9, 2016, at 7:35 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thanks for the feedback, everyone!<br>&gt; <br>&gt; Porting SourceKit to Linux seems like a reasonable solution to me. Still, there are 354 lines of code in tools/SourceKit that reference &quot;XPC&quot;, so a Linux port will take more than a few lines of source code changes.<br>&gt; <br>&gt; I imagine we&#39;ll need to insert some sort of shim layer that will use libxpc on OS X, and a hand-rolled solution for Linux. Alternatively, if anyone knows of a good open-source library that implements IPC for Linux (and that has a permissible license), that would be a great help here.<br>&gt; <br>&gt; I&#39;ve also seen the idea proposed that Apple could open-source libxpc, which we could then port to Linux. This would involve less work than installing a shim layer in SourceKit, then in addition implementing a Linux IPC library behind the shim. I don&#39;t know who I could talk about making this happen, but in any case, I filed a Radar:<br>&gt; <br>&gt; * rdar://26187442<br>&gt; * https://openradar.appspot.com/26187442 &lt;https://openradar.appspot.com/26187442&gt;<br>&gt; &gt; 2. Somehwat unrelated, but the compiler itself (`swiftc`) is not yet written in a way that it can be used from SourceKit.<br>&gt; <br>&gt; Could you explain this further?<br></p><p>Basically, I just meant that SourceKit doesn&#39;t currently have APIs for driving the compiler (driver), just interrogating the AST.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Sat, May 7, 2016 at 4:18 AM, Drew Crawford &lt;drew at sealedabstract.com &lt;mailto:drew at sealedabstract.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 6, 2016, at 3:04 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The conclusion was that after weighing all of the tradeoffs, it made the most<br>&gt;&gt; sense to encourage porting of SourceKit to Linux and then using it to build out<br>&gt;&gt; the Linux test discovery feature. This was most in line with a desirable<br>&gt;&gt; long-term direction without being blocked on language design.<br>&gt; <br>&gt; For whatever it&#39;s worth, this direction is a win on my side as well.<br>&gt; <br>&gt; In addition to the problem of test discovery (for which I&#39;m using an out-of-tree parser), I have a lot of other problems entirely outside of testing that rely on source-level queries similar to the XCTest problem.  This is things like parsing comments for documentation, implementing dispatch-by-string, etc.  I currently rely on SK in many cases, but lack of support on Linux is a major issue.  Lack of features exposed in the SK APIs is another issue.<br>&gt; <br>&gt; IMO it is a clear win to invest in resolving these problems inside SK.  Right now it is basically a glorified Xcode daemon, but I think it can have a bright future as a multi-client tool if we&#39;re willing to invest in making that happen.<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160509/1cbd8688/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d4e52c8c225598ff284e7eb192dde623?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Argyrios Kyrtzidis</string> &lt;kyrtzidis at apple.com&gt;<p>May 10, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 9, 2016, at 7:35 PM, Brian Gesiak via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for the feedback, everyone!<br>&gt; <br>&gt; Porting SourceKit to Linux seems like a reasonable solution to me. Still, there are 354 lines of code in tools/SourceKit that reference &quot;XPC&quot;, so a Linux port will take more than a few lines of source code changes.<br>&gt; <br>&gt; I imagine we&#39;ll need to insert some sort of shim layer that will use libxpc on OS X, and a hand-rolled solution for Linux. Alternatively, if anyone knows of a good open-source library that implements IPC for Linux (and that has a permissible license), that would be a great help here.<br></p><p>Note that implementing IPC for linux is not ‘essential’ to get SourceKit working, we could have it use in-memory C++ dictionaries/arrays objects for the ‘communication’ part.<br></p><p>Also, on the topic of detecting the unit tests via the index request of SourceKit, see my comments in https://github.com/apple/swift/pull/2455 on an enhancement to assist with this.<br></p><p>&gt; <br>&gt; I&#39;ve also seen the idea proposed that Apple could open-source libxpc, which we could then port to Linux. This would involve less work than installing a shim layer in SourceKit, then in addition implementing a Linux IPC library behind the shim. I don&#39;t know who I could talk about making this happen, but in any case, I filed a Radar:<br>&gt; <br>&gt; * rdar://26187442<br>&gt; * https://openradar.appspot.com/26187442 &lt;https://openradar.appspot.com/26187442&gt;<br>&gt; &gt; 2. Somehwat unrelated, but the compiler itself (`swiftc`) is not yet written in a way that it can be used from SourceKit.<br>&gt; <br>&gt; Could you explain this further?<br>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Sat, May 7, 2016 at 4:18 AM, Drew Crawford &lt;drew at sealedabstract.com &lt;mailto:drew at sealedabstract.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 6, 2016, at 3:04 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The conclusion was that after weighing all of the tradeoffs, it made the most<br>&gt;&gt; sense to encourage porting of SourceKit to Linux and then using it to build out<br>&gt;&gt; the Linux test discovery feature. This was most in line with a desirable<br>&gt;&gt; long-term direction without being blocked on language design.<br>&gt; <br>&gt; For whatever it&#39;s worth, this direction is a win on my side as well.<br>&gt; <br>&gt; In addition to the problem of test discovery (for which I&#39;m using an out-of-tree parser), I have a lot of other problems entirely outside of testing that rely on source-level queries similar to the XCTest problem.  This is things like parsing comments for documentation, implementing dispatch-by-string, etc.  I currently rely on SK in many cases, but lack of support on Linux is a major issue.  Lack of features exposed in the SK APIs is another issue.<br>&gt; <br>&gt; IMO it is a clear win to invest in resolving these problems inside SK.  Right now it is basically a glorified Xcode daemon, but I think it can have a bright future as a multi-client tool if we&#39;re willing to invest in making that happen.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160510/1d5e9b53/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>April  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Apr 3, 2016, at 3:36 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sun, Apr 3, 2016 at 2:11 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt;&gt; I think #2 is the best option. It’s less work than both #1 and #3. I believe<br>&gt;&gt; logic like IsTestCandidate belongs in libIDE anyway—SourceKit should stick<br>&gt;&gt; to XPC and asynchronous communication with libIDE.<br>&gt; <br>&gt; I like #3 better (an option to swiftc), because that would decouple<br>&gt; the test discovery tool from the Swift compiler.  That would allow you<br>&gt; to use the discovery tool with different compilers.  And, because we<br>&gt; would avoid statically linking libIDE, it would mean one less copy of<br>&gt; LLVM, Clang and Swift in the toolchain.<br></p><p>Ultimately my opinion is that it is likely that the package manager will want an API interface to Swift in any case. I personally would rather we simply plan on that.<br></p><p>I also would like to avoid duplicating anything in the toolchain, but think that should be done by moving the driver to sitting on top of a shared library.<br></p><p>&gt;&gt; Not being an expert in many of these components, I have several questions:<br>&gt;&gt; <br>&gt;&gt; I’m assuming the reflection API to return a list of instance methods on a<br>&gt;&gt; XCTestCase subclass is not ready yet, and won’t be for some time. Is this<br>&gt;&gt; accurate?<br>&gt; <br>&gt; I think so.<br>&gt; <br>&gt;&gt; I’m assuming that SourceKit is intended to be an asynchronous wrapper over<br>&gt;&gt; libIDE, and that logic like IsTestCandidate should be moved to libIDE. Is<br>&gt;&gt; this accurate?<br>&gt; <br>&gt; SourceKit has a lot of functionality of its own, but moving this<br>&gt; particular piece of logic to libIDE sounds reasonable.<br>&gt; <br>&gt;&gt; I’m assuming that SourceKit is coupled with XPC, and that it would be more<br>&gt;&gt; work to port it to Linux than it would be to move its logic to libIDE. Is<br>&gt;&gt; this accurate?<br>&gt; <br>&gt; It is not tightly coupled with XPC, there is a portability layer that<br>&gt; you could implement for Linux.  You would need to decide on an IPC<br>&gt; mechanism and serialization format though.<br></p><p>For our purposes, I don&#39;t think we need IPC. I think a direct (C) library interface would be fine. Clients can implement the IPC/XPC if they need it.<br></p><p>&gt;&gt; If you have thoughts/feedback, please reply to this email or comment on<br>&gt;&gt; SR-710. Your input would be greatly appreciated!!<br>&gt; <br>&gt; I&#39;m wondering how feasible is it to change the XCTest API to<br>&gt; accommodate better the Swift language that we have, rather than trying<br>&gt; to add custom tooling to make the existing API work.  Adding magic<br>&gt; tooling that adds behavior not present in the language seems unnatural<br>&gt; to me.<br></p><p>I agree with you that it is unnatural, but I think this ship has sailed for XCTest, we have a need to support the existing API in a cross platform manner. <br></p><p>My personal preference is that eventually we would build features like this on top of general support for attributes (a la Java/Python/C#).<br></p><p>&gt; Compare with StdlibUnittest -- by using an API to build tests we get<br>&gt; the following advantages:<br>&gt; <br>&gt; - We completely avoid having the issue of test discovery, executing<br>&gt; the code discovers the tests.  No reflection needed!<br></p><p>While I think StdlibUnittest is neat, I also believe that there are very good reasons for supporting test discovery in a test suite. I have used these features in other suites to great avail to create (bidirectional, sometimes) lit bridge adaptors between various test frameworks (Python unittest, googletest, XCTest).<br></p><p>In an IDE context, it is also very useful to be able to perform test discovery independent of test execution.<br></p><p>As one other example, I&#39;ve used lit with suites with hundreds of thousands of tests... it would be unfortunate to have to dynamically discover all of those tests when the user is just trying to run a single one.<br></p><p>&gt; - We can add attributes to tests (for example, skip, xfail).  In the<br>&gt; current XCTest API this would require adding some kind of user-defined<br>&gt; attributes, which is another language which is a long way from being<br>&gt; designed and implemented.<br></p><p>This isn&#39;t necessarily the case, XCTest could in theory provide explicit APIs to do these things as part of test execution. I agree attributes are a better fit in the current model.<br></p><p>&gt; - We can define data-parameterized tests.<br></p><p>&gt; - Tests can be dynamically synthesized by control flow.  In the<br>&gt; current XCTest API, dynamically generating tests would mean<br>&gt; dynamically generating methods, which is even more far off than<br>&gt; read-only method reflection.<br></p><p>FWIW, XCTest has some support for doing these kinds of things, they just don&#39;t take the form of the pattern-matched methods.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[SR-710][RFC] Automatically detecting XCTest test methods on Linux: Reflection? SourceKit?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>April 17, 2016 at 02:00:00pm</p></header><div class="content"><p>In case anyone interested missed it, John Holdsworth mentions another<br>approach in a comment on https://bugs.swift.org/browse/SR-710: using<br>runtime metadata to find a list of tests. The linked project contains an<br>example. It:<br></p><p>1. Specifies a test method regex:<br>https://github.com/johnno1962/TestRunner/blob/201bd04af14fdebf1a7fa2ae0a419fc59d6266ed/TestRunner/AppDelegate.swift#L69<br>2. In Swift, the project exposes metadata information for Swift objects:<br>https://github.com/johnno1962/TestRunner/blob/201bd04af14fdebf1a7fa2ae0a419fc59d6266ed/TestRunner/TestRunner.swift#L52<br>3. Uses an UnsafeMutablePointer&lt;ClassMetadataSwift&gt; to get a reference to<br>the methods defined on an instance:<br>https://github.com/johnno1962/TestRunner/blob/201bd04af14fdebf1a7fa2ae0a419fc59d6266ed/TestRunner/TestRunner.swift#L97<br></p><p>I assume this approach won&#39;t be acceptable to some because it relies on<br>private information about Swift objects, but I don&#39;t know for sure. Please<br>chime in if this approach seems reasonable to you!<br></p><p>Based on the assumption that we can&#39;t use metadata, however, I&#39;m going to<br>try to begin working on approaches #2 or #3, which I mentioned in my<br>original email. I think the preliminary work is the same (like<br>moving SourceKit::FuncDeclEntityInfo.IsTestCandidate to libIDE), so I&#39;ll<br>hold off on making a hard decision between #2 and #3 until necessary.<br></p><p>- Brian Gesiak<br></p><p><br>On Mon, Apr 4, 2016 at 12:23 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; &gt; On Apr 3, 2016, at 3:36 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Sun, Apr 3, 2016 at 2:11 PM, Brian Gesiak &lt;modocache at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt; I think #2 is the best option. It’s less work than both #1 and #3. I<br>&gt; believe<br>&gt; &gt;&gt; logic like IsTestCandidate belongs in libIDE anyway—SourceKit should<br>&gt; stick<br>&gt; &gt;&gt; to XPC and asynchronous communication with libIDE.<br>&gt; &gt;<br>&gt; &gt; I like #3 better (an option to swiftc), because that would decouple<br>&gt; &gt; the test discovery tool from the Swift compiler.  That would allow you<br>&gt; &gt; to use the discovery tool with different compilers.  And, because we<br>&gt; &gt; would avoid statically linking libIDE, it would mean one less copy of<br>&gt; &gt; LLVM, Clang and Swift in the toolchain.<br>&gt;<br>&gt; Ultimately my opinion is that it is likely that the package manager will<br>&gt; want an API interface to Swift in any case. I personally would rather we<br>&gt; simply plan on that.<br>&gt;<br>&gt; I also would like to avoid duplicating anything in the toolchain, but<br>&gt; think that should be done by moving the driver to sitting on top of a<br>&gt; shared library.<br>&gt;<br>&gt; &gt;&gt; Not being an expert in many of these components, I have several<br>&gt; questions:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I’m assuming the reflection API to return a list of instance methods on<br>&gt; a<br>&gt; &gt;&gt; XCTestCase subclass is not ready yet, and won’t be for some time. Is<br>&gt; this<br>&gt; &gt;&gt; accurate?<br>&gt; &gt;<br>&gt; &gt; I think so.<br>&gt; &gt;<br>&gt; &gt;&gt; I’m assuming that SourceKit is intended to be an asynchronous wrapper<br>&gt; over<br>&gt; &gt;&gt; libIDE, and that logic like IsTestCandidate should be moved to libIDE.<br>&gt; Is<br>&gt; &gt;&gt; this accurate?<br>&gt; &gt;<br>&gt; &gt; SourceKit has a lot of functionality of its own, but moving this<br>&gt; &gt; particular piece of logic to libIDE sounds reasonable.<br>&gt; &gt;<br>&gt; &gt;&gt; I’m assuming that SourceKit is coupled with XPC, and that it would be<br>&gt; more<br>&gt; &gt;&gt; work to port it to Linux than it would be to move its logic to libIDE.<br>&gt; Is<br>&gt; &gt;&gt; this accurate?<br>&gt; &gt;<br>&gt; &gt; It is not tightly coupled with XPC, there is a portability layer that<br>&gt; &gt; you could implement for Linux.  You would need to decide on an IPC<br>&gt; &gt; mechanism and serialization format though.<br>&gt;<br>&gt; For our purposes, I don&#39;t think we need IPC. I think a direct (C) library<br>&gt; interface would be fine. Clients can implement the IPC/XPC if they need it.<br>&gt;<br>&gt; &gt;&gt; If you have thoughts/feedback, please reply to this email or comment on<br>&gt; &gt;&gt; SR-710. Your input would be greatly appreciated!!<br>&gt; &gt;<br>&gt; &gt; I&#39;m wondering how feasible is it to change the XCTest API to<br>&gt; &gt; accommodate better the Swift language that we have, rather than trying<br>&gt; &gt; to add custom tooling to make the existing API work.  Adding magic<br>&gt; &gt; tooling that adds behavior not present in the language seems unnatural<br>&gt; &gt; to me.<br>&gt;<br>&gt; I agree with you that it is unnatural, but I think this ship has sailed<br>&gt; for XCTest, we have a need to support the existing API in a cross platform<br>&gt; manner.<br>&gt;<br>&gt; My personal preference is that eventually we would build features like<br>&gt; this on top of general support for attributes (a la Java/Python/C#).<br>&gt;<br>&gt; &gt; Compare with StdlibUnittest -- by using an API to build tests we get<br>&gt; &gt; the following advantages:<br>&gt; &gt;<br>&gt; &gt; - We completely avoid having the issue of test discovery, executing<br>&gt; &gt; the code discovers the tests.  No reflection needed!<br>&gt;<br>&gt; While I think StdlibUnittest is neat, I also believe that there are very<br>&gt; good reasons for supporting test discovery in a test suite. I have used<br>&gt; these features in other suites to great avail to create (bidirectional,<br>&gt; sometimes) lit bridge adaptors between various test frameworks (Python<br>&gt; unittest, googletest, XCTest).<br>&gt;<br>&gt; In an IDE context, it is also very useful to be able to perform test<br>&gt; discovery independent of test execution.<br>&gt;<br>&gt; As one other example, I&#39;ve used lit with suites with hundreds of thousands<br>&gt; of tests... it would be unfortunate to have to dynamically discover all of<br>&gt; those tests when the user is just trying to run a single one.<br>&gt;<br>&gt; &gt; - We can add attributes to tests (for example, skip, xfail).  In the<br>&gt; &gt; current XCTest API this would require adding some kind of user-defined<br>&gt; &gt; attributes, which is another language which is a long way from being<br>&gt; &gt; designed and implemented.<br>&gt;<br>&gt; This isn&#39;t necessarily the case, XCTest could in theory provide explicit<br>&gt; APIs to do these things as part of test execution. I agree attributes are a<br>&gt; better fit in the current model.<br>&gt;<br>&gt; &gt; - We can define data-parameterized tests.<br>&gt;<br>&gt; &gt; - Tests can be dynamically synthesized by control flow.  In the<br>&gt; &gt; current XCTest API, dynamically generating tests would mean<br>&gt; &gt; dynamically generating methods, which is even more far off than<br>&gt; &gt; read-only method reflection.<br>&gt;<br>&gt; FWIW, XCTest has some support for doing these kinds of things, they just<br>&gt; don&#39;t take the form of the pattern-matched methods.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Dmitri<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160417/1346eb08/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
