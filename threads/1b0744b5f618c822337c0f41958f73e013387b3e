<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff617958ff06c59145d97b2e7e638920?s=50"></div><header><strong>Final by default for classes and methods</strong> from <string>Tomáš Linhart</string> &lt;tomas at linhart.me&gt;<p>December 21, 2015 at 06:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I must say, I am not big fun of this proposal because currently in Swift<br>only way how to mock classes is to subclass them. If this proposal becomes<br>reality, it will make mocking of all third-party libraries impossible<br>unless they mark their classes non-final and I am afraid authors will just<br>use the default behaviour so at the end people will stop testing code that<br>is using third-party libraries or they will have to fork the libraries or<br>ask the authors. This can be fixed by having better testing support in<br>Swift but I don&#39;t think, this will happen anytime soon.<br></p><p>I would rather see introduction of better reflection so mock frameworks can<br>be reality. I would like to see also other building block of<br>objected-oriented-programming such as abstract classes, protocols with<br>generic type parameters and not just abstract types (associated types) that<br>allows to design better APIs that don&#39;t depend so much on overriding<br>regular classes.<br></p><p>Tomáš<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/1b077b3e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Final by default for classes and methods</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>December 21, 2015 at 05:00:00pm</p></header><div class="content"><p>I think it&#39;s just as important for methods. If you make a class final, all<br>methods become final, so that&#39;s OK. But if you make a class subclassable,<br>and then forget to mark some of it&#39;s methods final, then all methods would<br>be overridable which is probably not what you&#39;d want in must cases.<br>On Mon, Dec 21, 2015 at 9:19 AM Tomáš Linhart &lt;tomas at linhart.me&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I must say, I am not big fun of this proposal because currently in Swift<br>&gt; only way how to mock classes is to subclass them. If this proposal becomes<br>&gt; reality, it will make mocking of all third-party libraries impossible<br>&gt; unless they mark their classes non-final and I am afraid authors will just<br>&gt; use the default behaviour so at the end people will stop testing code that<br>&gt; is using third-party libraries or they will have to fork the libraries or<br>&gt; ask the authors. This can be fixed by having better testing support in<br>&gt; Swift but I don&#39;t think, this will happen anytime soon.<br>&gt;<br>&gt; I would rather see introduction of better reflection so mock frameworks<br>&gt; can be reality. I would like to see also other building block of<br>&gt; objected-oriented-programming such as abstract classes, protocols with<br>&gt; generic type parameters and not just abstract types (associated types) that<br>&gt; allows to design better APIs that don&#39;t depend so much on overriding<br>&gt; regular classes.<br>&gt;<br>&gt; Tomáš<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/d00580cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Final by default for classes</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 11:31 AM, Javier Soto via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it&#39;s just as important for methods. If you make a class final, all methods become final, so that&#39;s OK. But if you make a class subclassable, and then forget to mark some of it&#39;s methods final, then all methods would be overridable which is probably not what you&#39;d want in must cases. <br></p><p>I agree.  I am wondering if we should separate the two topics into distinct threads though.  As this topic has most recently been focused on classes perhaps we should  adjust the subject line and start a new thread focused on methods within classes that are not final.  <br></p><p>&gt; On Mon, Dec 21, 2015 at 9:19 AM Tomáš Linhart &lt;tomas at linhart.me &lt;mailto:tomas at linhart.me&gt;&gt; wrote:<br>&gt; Hello,<br>&gt; <br>&gt; I must say, I am not big fun of this proposal because currently in Swift only way how to mock classes is to subclass them. If this proposal becomes reality, it will make mocking of all third-party libraries impossible unless they mark their classes non-final and I am afraid authors will just use the default behaviour so at the end people will stop testing code that is using third-party libraries or they will have to fork the libraries or ask the authors. This can be fixed by having better testing support in Swift but I don&#39;t think, this will happen anytime soon.<br>&gt; <br>&gt; I would rather see introduction of better reflection so mock frameworks can be reality. I would like to see also other building block of objected-oriented-programming such as abstract classes, protocols with generic type parameters and not just abstract types (associated types) that allows to design better APIs that don&#39;t depend so much on overriding regular classes.<br>&gt; <br>&gt; Tomáš<br>&gt; -- <br>&gt; Javier Soto  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/a8f1e658/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff617958ff06c59145d97b2e7e638920?s=50"></div><header><strong>Final by default for classes and methods</strong> from <string>Tomáš Linhart</string> &lt;tomas at linhart.me&gt;<p>December 21, 2015 at 06:00:00pm</p></header><div class="content"><p>But tell me how will you test your code that is depending on a class<br>provided by external party? You cannot subclass so you cannot override the<br>behaviour that you need stub, at the you will wrap entire library in your<br>own classes that you can subclass but what for? Subclassing rarely breaks<br>things and if it does, you should mark it final but it shouldn&#39;t be<br>explicit.<br></p><p>Tomáš<br></p><p>On Mon, Dec 21, 2015 at 6:31 PM, Javier Soto &lt;javier.api at gmail.com&gt; wrote:<br></p><p>&gt; I think it&#39;s just as important for methods. If you make a class final, all<br>&gt; methods become final, so that&#39;s OK. But if you make a class subclassable,<br>&gt; and then forget to mark some of it&#39;s methods final, then all methods would<br>&gt; be overridable which is probably not what you&#39;d want in must cases.<br>&gt; On Mon, Dec 21, 2015 at 9:19 AM Tomáš Linhart &lt;tomas at linhart.me&gt; wrote:<br>&gt;<br>&gt;&gt; Hello,<br>&gt;&gt;<br>&gt;&gt; I must say, I am not big fun of this proposal because currently in Swift<br>&gt;&gt; only way how to mock classes is to subclass them. If this proposal becomes<br>&gt;&gt; reality, it will make mocking of all third-party libraries impossible<br>&gt;&gt; unless they mark their classes non-final and I am afraid authors will just<br>&gt;&gt; use the default behaviour so at the end people will stop testing code that<br>&gt;&gt; is using third-party libraries or they will have to fork the libraries or<br>&gt;&gt; ask the authors. This can be fixed by having better testing support in<br>&gt;&gt; Swift but I don&#39;t think, this will happen anytime soon.<br>&gt;&gt;<br>&gt;&gt; I would rather see introduction of better reflection so mock frameworks<br>&gt;&gt; can be reality. I would like to see also other building block of<br>&gt;&gt; objected-oriented-programming such as abstract classes, protocols with<br>&gt;&gt; generic type parameters and not just abstract types (associated types) that<br>&gt;&gt; allows to design better APIs that don&#39;t depend so much on overriding<br>&gt;&gt; regular classes.<br>&gt;&gt;<br>&gt;&gt; Tomáš<br>&gt;&gt;<br>&gt; --<br>&gt; Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/da9355bb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Final by default for classes and methods</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>Overriding is not normally how you test classes to begin with.<br></p><p>The traditional Obj-C way of testing classes like that is to use a<br>mocking library, that provides NSProxy objects that forward non-stubbed<br>methods to the original class (or forward everything and merely record<br>which methods were invoked). This of course only works for classes that<br>use the Obj-C runtime.<br></p><p>The approach that is often recommended for Swift is to use protocol-<br>oriented programming, where you expose things as protocols instead of as<br>classes. That way you can provide your own implementation of the<br>protocol in order to mock something out.<br></p><p>-Kevin Ballard<br></p><p>On Mon, Dec 21, 2015, at 09:35 AM, Tomáš Linhart via swift-evolution wrote:<br>&gt; But tell me how will you test your code that is depending on a class<br>&gt; provided by external party? You cannot subclass so you cannot override<br>&gt; the behaviour that you need stub, at the you will wrap entire library<br>&gt; in your own classes that you can subclass but what for? Subclassing<br>&gt; rarely breaks things and if it does, you should mark it final but it<br>&gt; shouldn&#39;t be explicit.<br>&gt;<br>&gt; Tomáš<br>&gt;<br>&gt; On Mon, Dec 21, 2015 at 6:31 PM, Javier Soto<br>&gt; &lt;javier.api at gmail.com&gt; wrote:<br>&gt;&gt; I think it&#39;s just as important for methods. If you make a class<br>&gt;&gt; final, all methods become final, so that&#39;s OK. But if you make a<br>&gt;&gt; class subclassable, and then forget to mark some of it&#39;s methods<br>&gt;&gt; final, then all methods would be overridable which is probably not<br>&gt;&gt; what you&#39;d want in must cases. On Mon, Dec 21, 2015 at 9:19 AM Tomáš<br>&gt;&gt; Linhart &lt;tomas at linhart.me&gt; wrote:<br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I must say, I am not big fun of this proposal because currently in<br>&gt;&gt;&gt; Swift only way how to mock classes is to subclass them. If this<br>&gt;&gt;&gt; proposal becomes reality, it will make mocking of all third-party<br>&gt;&gt;&gt; libraries impossible unless they mark their classes non-final and I<br>&gt;&gt;&gt; am afraid authors will just use the default behaviour so at the end<br>&gt;&gt;&gt; people will stop testing code that is using third-party libraries or<br>&gt;&gt;&gt; they will have to fork the libraries or ask the authors. This can be<br>&gt;&gt;&gt; fixed by having better testing support in Swift but I don&#39;t think,<br>&gt;&gt;&gt; this will happen anytime soon.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I would rather see introduction of better reflection so mock<br>&gt;&gt;&gt; frameworks can be reality. I would like to see also other building<br>&gt;&gt;&gt; block of objected-oriented-programming such as abstract classes,<br>&gt;&gt;&gt; protocols with generic type parameters and not just abstract types<br>&gt;&gt;&gt; (associated types) that allows to design better APIs that don&#39;t<br>&gt;&gt;&gt; depend so much on overriding regular classes.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Tomáš<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Javier Soto<br>&gt;&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/5a1eb8c3/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Final by default for classes and methods</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December 21, 2015 at 03:00:00pm</p></header><div class="content"><p>A proposal could allow subclassing final/sealed classes when using @testable import<br></p><p>-DW<br>Sent with my Thumbs<br></p><p>&gt; On Dec 21, 2015, at 10:18 AM, Tomáš Linhart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I must say, I am not big fun of this proposal because currently in Swift only way how to mock classes is to subclass them. If this proposal becomes reality, it will make mocking of all third-party libraries impossible unless they mark their classes non-final and I am afraid authors will just use the default behaviour so at the end people will stop testing code that is using third-party libraries or they will have to fork the libraries or ask the authors. This can be fixed by having better testing support in Swift but I don&#39;t think, this will happen anytime soon.<br>&gt; <br>&gt; I would rather see introduction of better reflection so mock frameworks can be reality. I would like to see also other building block of objected-oriented-programming such as abstract classes, protocols with generic type parameters and not just abstract types (associated types) that allows to design better APIs that don&#39;t depend so much on overriding regular classes.<br>&gt; <br>&gt; Tomáš<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/cfad6e2a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
