<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 06:00:00pm</p></header><div class="content"><p>on Fri May 06 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 6, 2016, at 7:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri May 06 2016, Cole Campbell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but<br>&gt;&gt;&gt; I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39;<br>&gt;&gt;&gt; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer<br>&gt;&gt;&gt; it). <br>&gt;&gt; <br>&gt;&gt; It&#39;s not, IMO.  “Reduce” was chosen deliberately over “fold” because we<br>&gt;&gt; think it is more in “common currency” among programmers, in no small<br>&gt;&gt; part to the notice that MapReduce has gotten.<br>&gt;<br>&gt; I was guessing this was the rationale.  But if it’s not too late and<br>&gt; “fold” solves the “unfold” naming problem maybe we that balances out<br>&gt; the equation.<br></p><p>Personally, I&#39;m not confident “unfold” would be considered to meet the<br>utility bar, even if we changed the name of “reduce,” FWIW.<br></p><p>&gt; Which name do you think best communicates the essence of the<br>&gt; operation?  IMO “fold” does a much better job of this.<br></p><p>Personally I think “accumulate” does that better than either name, but<br>it doesn&#39;t matter.  What matters, IMO, is what more people will be<br>familiar with.<br></p><p>&gt;<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; I think changing it now with other source-breaking changes is better<br>&gt;&gt;&gt; than moving forward with &#39;reduce&#39; and a corresponding function with a<br>&gt;&gt;&gt; confusing name. Fold/unfold would fit in beautifully with the<br>&gt;&gt;&gt; prefix/suffix pairings already in the standard library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cole<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    * When I first encountered it, I understood exactly what it did because I<br>&gt;&gt;&gt;    knew that term of art. If it was named sequence, I would have been confused.<br>&gt;&gt;&gt;    * If we are discussing name changes, I&#39;d personally vote to change it to<br>&gt;&gt;&gt;    fold. It is the other term of art used for it, and it makes unfold work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    David<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    On 05 May 2016, at 22:39, Chris Lattner via swift-evolution<br>&gt;&gt;&gt;    &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt;&gt;&gt;            wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution<br>&gt;&gt;&gt;            &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                Proposal link:<br>&gt;&gt;&gt;                https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are<br>&gt;&gt;&gt;                *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/<br>&gt;&gt;&gt;            `drop` pairs that linguistically matched.Nonetheless I&#39;m gratified<br>&gt;&gt;&gt;            these are hopping into the language. That said, I&#39;m going to put on<br>&gt;&gt;&gt;            my painters cap to consider selecting some exterior latex for the<br>&gt;&gt;&gt;            feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            Core team writes:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;                unfold(_:applying:) - This addition is *rejected* by the core<br>&gt;&gt;&gt;                team as written, but deserves more discussion in the community,<br>&gt;&gt;&gt;                and potentially could be the subject of a future proposal. The<br>&gt;&gt;&gt;                core team felt that the utility of this operation is high enough<br>&gt;&gt;&gt;                to be worth including in the standard library, but could not<br>&gt;&gt;&gt;                find an acceptable name for it. “unfold” is problematic, despite<br>&gt;&gt;&gt;                its precedence in other language, because Swift calls the<br>&gt;&gt;&gt;                corresponding operation “reduce” and not “fold”. No one could<br>&gt;&gt;&gt;                get excited about “unreduce”. “iterate” was also considered, but<br>&gt;&gt;&gt;                a noun is more appropriate than an verb in this case. Given the<br>&gt;&gt;&gt;                lack of a good name, the core team preferred to reject to let<br>&gt;&gt;&gt;                the community discuss it more.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            A few thoughts:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;            * I&#39;m not sure why a noun is more appropriate than a verb. Reduce<br>&gt;&gt;&gt;            isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        I’m not a naming guru, but my understanding is that ‘reduce’ was picked<br>&gt;&gt;&gt;        because it was term of art (like map), which is what allowed the misuse<br>&gt;&gt;&gt;        of a verb.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        One idea that came out of the core team discussion was something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        sequence(from: 0) { $0 += 42 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        Since it returns a sequence.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        _______________________________________________<br>&gt;&gt;&gt;        swift-evolution mailing list<br>&gt;&gt;&gt;        swift-evolution at swift.org<br>&gt;&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    _______________________________________________<br>&gt;&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;&gt;    swift-evolution at swift.org<br>&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  6, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 6, 2016, at 8:15 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri May 06 2016, Matthew Johnson &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 7:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri May 06 2016, Cole Campbell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but<br>&gt;&gt;&gt;&gt; I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39;<br>&gt;&gt;&gt;&gt; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer<br>&gt;&gt;&gt;&gt; it). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s not, IMO.  “Reduce” was chosen deliberately over “fold” because we<br>&gt;&gt;&gt; think it is more in “common currency” among programmers, in no small<br>&gt;&gt;&gt; part to the notice that MapReduce has gotten.<br>&gt;&gt; <br>&gt;&gt; I was guessing this was the rationale.  But if it’s not too late and<br>&gt;&gt; “fold” solves the “unfold” naming problem maybe we that balances out<br>&gt;&gt; the equation.<br>&gt; <br>&gt; Personally, I&#39;m not confident “unfold” would be considered to meet the<br>&gt; utility bar, even if we changed the name of “reduce,” FWIW.<br>&gt; <br>&gt;&gt; Which name do you think best communicates the essence of the<br>&gt;&gt; operation?  IMO “fold” does a much better job of this.<br>&gt; <br>&gt; Personally I think “accumulate” does that better than either name, but<br>&gt; it doesn&#39;t matter.  What matters, IMO, is what more people will be<br>&gt; familiar with.<br></p><p>Fair enough.<br></p><p>FWIW, the reason I like fold is that it helps me to visualize the process mentally.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think changing it now with other source-breaking changes is better<br>&gt;&gt;&gt;&gt; than moving forward with &#39;reduce&#39; and a corresponding function with a<br>&gt;&gt;&gt;&gt; confusing name. Fold/unfold would fit in beautifully with the<br>&gt;&gt;&gt;&gt; prefix/suffix pairings already in the standard library.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cole<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   * When I first encountered it, I understood exactly what it did because I<br>&gt;&gt;&gt;&gt;   knew that term of art. If it was named sequence, I would have been confused.<br>&gt;&gt;&gt;&gt;   * If we are discussing name changes, I&#39;d personally vote to change it to<br>&gt;&gt;&gt;&gt;   fold. It is the other term of art used for it, and it makes unfold work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   David<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   On 05 May 2016, at 22:39, Chris Lattner via swift-evolution<br>&gt;&gt;&gt;&gt;   &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt;&gt;&gt;&gt;           wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution<br>&gt;&gt;&gt;&gt;           &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;               Proposal link:<br>&gt;&gt;&gt;&gt;               https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;               Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are<br>&gt;&gt;&gt;&gt;               *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/<br>&gt;&gt;&gt;&gt;           `drop` pairs that linguistically matched.Nonetheless I&#39;m gratified<br>&gt;&gt;&gt;&gt;           these are hopping into the language. That said, I&#39;m going to put on<br>&gt;&gt;&gt;&gt;           my painters cap to consider selecting some exterior latex for the<br>&gt;&gt;&gt;&gt;           feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           Core team writes:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;               unfold(_:applying:) - This addition is *rejected* by the core<br>&gt;&gt;&gt;&gt;               team as written, but deserves more discussion in the community,<br>&gt;&gt;&gt;&gt;               and potentially could be the subject of a future proposal. The<br>&gt;&gt;&gt;&gt;               core team felt that the utility of this operation is high enough<br>&gt;&gt;&gt;&gt;               to be worth including in the standard library, but could not<br>&gt;&gt;&gt;&gt;               find an acceptable name for it. “unfold” is problematic, despite<br>&gt;&gt;&gt;&gt;               its precedence in other language, because Swift calls the<br>&gt;&gt;&gt;&gt;               corresponding operation “reduce” and not “fold”. No one could<br>&gt;&gt;&gt;&gt;               get excited about “unreduce”. “iterate” was also considered, but<br>&gt;&gt;&gt;&gt;               a noun is more appropriate than an verb in this case. Given the<br>&gt;&gt;&gt;&gt;               lack of a good name, the core team preferred to reject to let<br>&gt;&gt;&gt;&gt;               the community discuss it more.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           A few thoughts:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;           * I&#39;m not sure why a noun is more appropriate than a verb. Reduce<br>&gt;&gt;&gt;&gt;           isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       I’m not a naming guru, but my understanding is that ‘reduce’ was picked<br>&gt;&gt;&gt;&gt;       because it was term of art (like map), which is what allowed the misuse<br>&gt;&gt;&gt;&gt;       of a verb.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       One idea that came out of the core team discussion was something like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       sequence(from: 0) { $0 += 42 }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       Since it returns a sequence.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       -Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       _______________________________________________<br>&gt;&gt;&gt;&gt;       swift-evolution mailing list<br>&gt;&gt;&gt;&gt;       swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   _______________________________________________<br>&gt;&gt;&gt;&gt;   swift-evolution mailing list<br>&gt;&gt;&gt;&gt;   swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;   https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/d46bdaa7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May  6, 2016 at 07:00:00pm</p></header><div class="content"><p>On Fri, May 6, 2016, at 06:15 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; <br>&gt; on Fri May 06 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt;&gt; On May 6, 2016, at 7:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; on Fri May 06 2016, Cole Campbell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but<br>&gt; &gt;&gt;&gt; I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39;<br>&gt; &gt;&gt;&gt; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer<br>&gt; &gt;&gt;&gt; it). <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; It&#39;s not, IMO.  “Reduce” was chosen deliberately over “fold” because we<br>&gt; &gt;&gt; think it is more in “common currency” among programmers, in no small<br>&gt; &gt;&gt; part to the notice that MapReduce has gotten.<br>&gt; &gt;<br>&gt; &gt; I was guessing this was the rationale.  But if it’s not too late and<br>&gt; &gt; “fold” solves the “unfold” naming problem maybe we that balances out<br>&gt; &gt; the equation.<br>&gt; <br>&gt; Personally, I&#39;m not confident “unfold” would be considered to meet the<br>&gt; utility bar, even if we changed the name of “reduce,” FWIW.<br></p><p>As I said to Chris in an off-list email, unfold() was actually the function that I was the most excited about in the proposal, because it allows for a very elegant solution to a variety of looping needs, especially now that we&#39;ve gotten rid of the C-style for loops. One example of its use is something like<br></p><p>  // Iterate over self.view and all its ancestor views.<br>  for view in unfold(self.view, applying: { $0.superview }) {<br>      // ...<br>  }<br></p><p>In fact, just today I hit this exact issue and wished I had unfold(). This same pattern works for any case where an object has a property of the same type and you want to walk the entire chain, such as UIViewController.presentingViewController, or NSError.userInfo[NSUnderlyingErrorKey].<br></p><p>It also integrates very nicely with the other sequence methods, including drop(while:) and prefix(while:). For example:<br></p><p>  // Iterate over someView and all its ancestors, stopping at self.view<br>  for view in unfold(someView, applying: { $0.superview }).prefix(while: { $0 !== self.view }) {<br>      // ...<br>  }<br></p><p>Incidentally, I tried writing up an example of using the stateful version to reimplement zip(), but it ended up being a good argument in favor of the suggestion someone (maybe you?) had for turning the state into an inout parameter.<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
