<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June  5, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Jun 02 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;  On Jun 2, 2016, at 10:03 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;  That proposal was returned for revision; as far as user ergonomics in Swift 3, .self is going to be a consideration. Best to find a solution<br>&gt;  that reads nicely regardless of the situation with .self removal.<br>&gt;<br>&gt; From the core team decision:<br>&gt;<br>&gt; &quot;The core team would definitely like to circle back to this proposal after Swift 3 is out the door.&quot;<br>&gt;<br>&gt; I think we should consider the best long-term design. <br></p><p>Yes.  While it is true that disturbing the language as little as<br>possible helps ensure acceptance, a proposal that makes incremental<br>steps when the best solution is already acheivable is at a great<br>disadvantage, as it creates needless churn for users.<br></p><p>&gt; If that happens to be dropping labels great, but if not, maybe we<br>&gt; don’t want to do that just because it will look better in Swift 3 at<br>&gt; the cost of a better design when “.self” is not required.<br>&gt;<br>&gt; Dave’s MemoryLayout approach avoids the question of labels entirely. This is another subtle nudge in that direction IMO.<br>&gt;<br>&gt;  On Thu, Jun 2, 2016 at 9:57 AM Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;<br>&gt;  On Jun 2, 2016, at 9:43 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt;  Supporting Dave A, type-based calls are much more likely to be used than instance calls, unlike with dynamicType/type(of:)<br>&gt;<br>&gt;  Term stdlib search gist search Google site:github +swift <br>&gt;  sizeof 157 169 4880 <br>&gt;  sizeofValue 4 34 584 <br>&gt;  alignof 44 11 334 <br>&gt;  alignofValue 5 5 154 <br>&gt;  strideof 347 19 347 <br>&gt;  strideofValue 4 5 163 <br>&gt;  Type-based calls like sizeof() are poor candidates for parameter labels. While it&#39;s acceptable to write sizeof(Int), but one<br>&gt;  must write size(of: Int.self) (with the trailing self) when the function has a label. <br>&gt;<br>&gt;  Isn’t this a short-term concern? I thought that requirement was going away.<br>&gt;<br>&gt;  For this reason, this proposal prefers using no-label calls for types (otherwise they would have been ofType) and labeled<br>&gt;  calls for values:<br>&gt;<br>&gt; print(sizeof(Int)) // works<br>&gt; print(sizeof(Int.self)) // works<br>&gt;<br>&gt; func withoutLabel&lt;T&gt;(thetype: T.Type) -&gt; Int { return sizeof(T) }<br>&gt; func withLabel&lt;T&gt;(label label: T.Type) -&gt; Int { return sizeof(T) }<br>&gt;<br>&gt; // Works<br>&gt; print(withoutLabel(Int))<br>&gt;<br>&gt; // Works<br>&gt; print(withLabel(label: Int.self))<br>&gt;<br>&gt; // Does not work<br>&gt; // error: cannot create a single-element tuple with an element label<br>&gt; // print(withLabel(label: Int)) <br>&gt;<br>&gt;  So with this in mind:<br>&gt;<br>&gt; /// Returns the contiguous memory footprint of `T`.<br>&gt; ///<br>&gt; /// Does not include any dynamically-allocated or &quot;remote&quot; storage.<br>&gt; /// In particular, `size(X.self)`, when `X` is a class type, is the<br>&gt; /// same regardless of how many stored properties `X` has.<br>&gt; public func size&lt;T&gt;(_: T.Type) -&gt; Int<br>&gt;<br>&gt; /// Returns the contiguous memory footprint of  `T`.<br>&gt; ///<br>&gt; /// Does not include any dynamically-allocated or &quot;remote&quot; storage.<br>&gt; /// In particular, `size(of: a)`, when `a` is a class instance, is the<br>&gt; /// same regardless of how many stored properties `a` has.<br>&gt; public func size&lt;T&gt;(of: T) -&gt; Int<br>&gt;<br>&gt; /// Returns the least possible interval between distinct instances of<br>&gt; /// `T` in memory.  The result is always positive.<br>&gt; public func spacing&lt;T&gt;(_: T.Type) -&gt; Int<br>&gt;<br>&gt; /// Returns the least possible interval between distinct instances of<br>&gt; /// `T` in memory.  The result is always positive.<br>&gt; public func spacing&lt;T&gt;(of: T) -&gt; Int<br>&gt;<br>&gt; /// Returns the minimum memory alignment of `T`.<br>&gt; public func alignment&lt;T&gt;(_: T.Type) -&gt; Int<br>&gt;<br>&gt; /// Returns the minimum memory alignment of `T`.<br>&gt; public func alignment&lt;T&gt;(of: T) -&gt; Int<br>&gt;  -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
