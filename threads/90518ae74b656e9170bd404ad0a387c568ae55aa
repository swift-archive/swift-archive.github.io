<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 26, 2016 at 11:00:00am</p></header><div class="content"><p>on Sun Jan 24 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yes, I think they are a lot like sum (or union) types. In Ceylon enums<br>&gt; actually are modeled as union types (there is no specific enum<br>&gt; syntax).<br></p><p>Enums in Swift are exactly that; Ceylon chose the name &quot;union;&quot; we chose<br>&quot;enum.&quot;  But Trent is saying that enum *cases* are like types.<br></p><p>&gt; -Thorsten<br>&gt;<br>&gt;&gt; Am 23.01.2016 um 19:57 schrieb Trent Nadeau via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; While enum cases may not be types from a compiler perspective, I think they are from a user&#39;s level.<br>&gt;&gt; <br>&gt;&gt; Consider:<br>&gt;&gt; <br>&gt;&gt; enum MyError: ErrorType {<br>&gt;&gt;     case FileError(fileName: String)<br>&gt;&gt;     case SocketError(ipAddr: String, port: Int16)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; From a compiler perspective, it&#39;s a tagged union (one type), but for<br>&gt;&gt; a user this is a set of disjoint types that happen to share the same<br>&gt;&gt; space and have exhaustiveness checking, etc. It&#39;s a much more<br>&gt;&gt; efficient and convenient version of multiple structs or tuples.<br>&gt;&gt; <br>&gt;&gt; On Sat, Jan 23, 2016 at 1:49 PM, Joe Groff<br>&gt;&gt; &lt;jgroff at apple.com<br>&gt;&gt; &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jan 23, 2016, at 10:24 AM, Trent Nadeau<br>&gt;&gt; &gt; &lt;tanadeau at gmail.com<br>&gt;&gt; &gt; &lt;mailto:tanadeau at gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I think it makes sense for enum cases to be UpperCamelCase as they<br>&gt;&gt; &gt; can be thought of as scoped types (singleton types in the case of<br>&gt;&gt; &gt; cases with no associated types).<br>&gt;&gt; <br>&gt;&gt; They aren&#39;t, though. I don&#39;t see much value in setting false expectations.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Trent Nadeau<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 26, 2016 at 07:00:00pm</p></header><div class="content"><p>I should clarify. I mean that they&#39;re like types in that they have a unique<br>scoped name with fields. A union with cases with associated values is a sum<br>types of product types. Obviously, they can&#39;t be used like &quot;real&quot; types as<br>formal parameters, etc.<br></p><p>I don&#39;t see them as values or initializers but very constrained types. For<br>instance, in C you could have something like:<br></p><p>struct Foo {<br></p><p>    int tag;<br></p><p><br>    union {<br></p><p>        struct Bar {<br></p><p>           int x;<br></p><p>           int y;<br></p><p>        } bar;<br></p><p><br></p><p>        struct Baz {<br></p><p>          double a;<br></p><p>          double b;<br></p><p>        } baz;<br></p><p>    } data;<br></p><p>};<br></p><p>which would be equivalent to Swift&#39;s:<br></p><p>enum Foo {<br>    case Bar(x: Int, y: Int)<br>    case Baz(a: Double, b: Double)<br>}<br></p><p>Bar and Baz in the C code above are actual types just unusable outside of<br>the sum type (tagged union). If that&#39;s not similar to Swift, please correct<br>me.<br></p><p>On Tue, Jan 26, 2016 at 2:02 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Sun Jan 24 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Yes, I think they are a lot like sum (or union) types. In Ceylon enums<br>&gt; &gt; actually are modeled as union types (there is no specific enum<br>&gt; &gt; syntax).<br>&gt;<br>&gt; Enums in Swift are exactly that; Ceylon chose the name &quot;union;&quot; we chose<br>&gt; &quot;enum.&quot;  But Trent is saying that enum *cases* are like types.<br>&gt;<br>&gt; &gt; -Thorsten<br>&gt; &gt;<br>&gt; &gt;&gt; Am 23.01.2016 um 19:57 schrieb Trent Nadeau via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; While enum cases may not be types from a compiler perspective, I think<br>&gt; they are from a user&#39;s level.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Consider:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; enum MyError: ErrorType {<br>&gt; &gt;&gt;     case FileError(fileName: String)<br>&gt; &gt;&gt;     case SocketError(ipAddr: String, port: Int16)<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; From a compiler perspective, it&#39;s a tagged union (one type), but for<br>&gt; &gt;&gt; a user this is a set of disjoint types that happen to share the same<br>&gt; &gt;&gt; space and have exhaustiveness checking, etc. It&#39;s a much more<br>&gt; &gt;&gt; efficient and convenient version of multiple structs or tuples.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Sat, Jan 23, 2016 at 1:49 PM, Joe Groff<br>&gt; &gt;&gt; &lt;jgroff at apple.com<br>&gt; &gt;&gt; &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; On Jan 23, 2016, at 10:24 AM, Trent Nadeau<br>&gt; &gt;&gt; &gt; &lt;tanadeau at gmail.com<br>&gt; &gt;&gt; &gt; &lt;mailto:tanadeau at gmail.com&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; I think it makes sense for enum cases to be UpperCamelCase as they<br>&gt; &gt;&gt; &gt; can be thought of as scoped types (singleton types in the case of<br>&gt; &gt;&gt; &gt; cases with no associated types).<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; They aren&#39;t, though. I don&#39;t see much value in setting false<br>&gt; expectations.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -Joe<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Trent Nadeau<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/86723c40/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
