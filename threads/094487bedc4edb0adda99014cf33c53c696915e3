<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dda25e0a2e78da4fe5ca01c69c2e5893?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Ryan Walklin</string> &lt;ryan at testtoast.com&gt;<p>January 26, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi All,<br></p><p>I have a function which returns a closure, which then returns an array of objects conforming to a protocol. <br></p><p>ie. <br></p><p>protocol MyProtocol {}<br></p><p>extension Float: MyProtocol {}<br>extension OtherType: MyProtocol {}<br></p><p>When I try to return an array of Floats, I get the error “Cannot convert value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br></p><p>Other struct-based types work fine.<br></p><p>Is this not possible with standard library types?<br></p><p>Regards,<br></p><p>Ryan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160126/094415e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 25, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi Ryan,<br></p><p>Are you sure it works with user-defined struct types? I tried the following code, and got the same error:<br></p><p>protocol MyProtocol {}<br></p><p>struct Blah : MyProtocol { }<br></p><p>func foo() -&gt; [MyProtocol] {<br>  let a = [Blah(), Blah()] as [Blah]<br>  return a<br>}<br></p><p>&#39;class Blah&#39; works fine.<br></p><p>Even so, this is not the behavior I would have expected. Perhaps someone else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T : P.<br></p><p>Best,<br>Austin<br></p><p><br>&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi All,<br>&gt; <br>&gt; I have a function which returns a closure, which then returns an array of objects conforming to a protocol. <br>&gt; <br>&gt; ie. <br>&gt; <br>&gt; protocol MyProtocol {}<br>&gt; <br>&gt; extension Float: MyProtocol {}<br>&gt; extension OtherType: MyProtocol {}<br>&gt; <br>&gt; When I try to return an array of Floats, I get the error “Cannot convert value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt; <br>&gt; Other struct-based types work fine.<br>&gt; <br>&gt; Is this not possible with standard library types?<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Ryan<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/fcaefe96/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 25, 2016 at 10:00:00pm</p></header><div class="content"><p>That code works fine for me if I change the cast to &quot;as [MyProtocol]&quot;.<br></p><p>protocol MyProtocol {}<br></p><p>struct Blah : MyProtocol { }<br></p><p>func foo() -&gt; [MyProtocol] {<br>  let a = [Blah(), Blah()] as [MyProtocol]<br>  return a<br>}<br></p><p>On Mon, Jan 25, 2016 at 10:47 PM, Austin Zheng via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi Ryan,<br>&gt;<br>&gt; Are you sure it works with user-defined struct types? I tried the<br>&gt; following code, and got the same error:<br>&gt;<br>&gt; protocol MyProtocol {}<br>&gt;<br>&gt; struct Blah : MyProtocol { }<br>&gt;<br>&gt; func foo() -&gt; [MyProtocol] {<br>&gt;   let a = [Blah(), Blah()] as [Blah]<br>&gt;   return a<br>&gt; }<br>&gt;<br>&gt; &#39;class Blah&#39; works fine.<br>&gt;<br>&gt; Even so, this is not the behavior I would have expected. Perhaps someone<br>&gt; else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T<br>&gt; : P.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi All,<br>&gt;<br>&gt; I have a function which returns a closure, which then returns an array of<br>&gt; objects conforming to a protocol.<br>&gt;<br>&gt; ie.<br>&gt;<br>&gt; protocol MyProtocol {}<br>&gt;<br>&gt; extension Float: MyProtocol {}<br>&gt; extension OtherType: MyProtocol {}<br>&gt;<br>&gt; When I try to return an array of Floats, I get the error “Cannot convert<br>&gt; value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt;<br>&gt; Other struct-based types work fine.<br>&gt;<br>&gt; Is this not possible with standard library types?<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; Ryan<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/c1ad6155/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 25, 2016 at 10:00:00pm</p></header><div class="content"><p>I think arrays along with other generics are invariant.<br></p><p>On Mon, Jan 25, 2016 at 10:50 PM, Trent Nadeau &lt;tanadeau at gmail.com&gt; wrote:<br></p><p>&gt; That code works fine for me if I change the cast to &quot;as [MyProtocol]&quot;.<br>&gt;<br>&gt; protocol MyProtocol {}<br>&gt;<br>&gt; struct Blah : MyProtocol { }<br>&gt;<br>&gt; func foo() -&gt; [MyProtocol] {<br>&gt;   let a = [Blah(), Blah()] as [MyProtocol]<br>&gt;   return a<br>&gt; }<br>&gt;<br>&gt; On Mon, Jan 25, 2016 at 10:47 PM, Austin Zheng via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Ryan,<br>&gt;&gt;<br>&gt;&gt; Are you sure it works with user-defined struct types? I tried the<br>&gt;&gt; following code, and got the same error:<br>&gt;&gt;<br>&gt;&gt; protocol MyProtocol {}<br>&gt;&gt;<br>&gt;&gt; struct Blah : MyProtocol { }<br>&gt;&gt;<br>&gt;&gt; func foo() -&gt; [MyProtocol] {<br>&gt;&gt;   let a = [Blah(), Blah()] as [Blah]<br>&gt;&gt;   return a<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; &#39;class Blah&#39; works fine.<br>&gt;&gt;<br>&gt;&gt; Even so, this is not the behavior I would have expected. Perhaps someone<br>&gt;&gt; else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T<br>&gt;&gt; : P.<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi All,<br>&gt;&gt;<br>&gt;&gt; I have a function which returns a closure, which then returns an array of<br>&gt;&gt; objects conforming to a protocol.<br>&gt;&gt;<br>&gt;&gt; ie.<br>&gt;&gt;<br>&gt;&gt; protocol MyProtocol {}<br>&gt;&gt;<br>&gt;&gt; extension Float: MyProtocol {}<br>&gt;&gt; extension OtherType: MyProtocol {}<br>&gt;&gt;<br>&gt;&gt; When I try to return an array of Floats, I get the error “Cannot convert<br>&gt;&gt; value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt;&gt;<br>&gt;&gt; Other struct-based types work fine.<br>&gt;&gt;<br>&gt;&gt; Is this not possible with standard library types?<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt;<br>&gt;&gt; Ryan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/617e104c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 25, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m reasonably sure Arrays and other collections are covariant, but any user-defined generic type is invariant. This came up in the discussion about making all generics covariant by default.<br></p><p>For some reason this works for me:<br></p><p>protocol MyProtocol {}<br>extension Float: MyProtocol {}<br></p><p>func foo() -&gt; [MyProtocol] {<br>  let a = [Float(1), Float(2)] as [MyProtocol]<br>  return a<br>}<br></p><p>but this doesn&#39;t (with or without the cast):<br></p><p>func foo() -&gt; [MyProtocol] {<br>  let a = [Float(1), Float(2)] //as [Float]<br>  return a as [MyProtocol]<br>}<br></p><p>Nor does this:<br></p><p>func foo() -&gt; [MyProtocol] {<br>  let a = [Float(1), Float(2)] as [Float]<br>  let b = a as [MyProtocol]<br>  return b<br>}<br></p><p>This definitely looks like a bug, or at least something that needs a better compiler error message. (I&#39;m running this in an OS X Xcode project with Swift 2.1, but it doesn&#39;t work with Swift 2.2 either.)<br></p><p>Best,<br>Austin<br></p><p>&gt; On Jan 25, 2016, at 7:51 PM, Trent Nadeau &lt;tanadeau at gmail.com&gt; wrote:<br>&gt; <br>&gt; I think arrays along with other generics are invariant.<br>&gt; <br>&gt; On Mon, Jan 25, 2016 at 10:50 PM, Trent Nadeau &lt;tanadeau at gmail.com &lt;mailto:tanadeau at gmail.com&gt;&gt; wrote:<br>&gt; That code works fine for me if I change the cast to &quot;as [MyProtocol]&quot;.<br>&gt; <br>&gt; protocol MyProtocol {}<br>&gt; <br>&gt; struct Blah : MyProtocol { }<br>&gt; <br>&gt; func foo() -&gt; [MyProtocol] {<br>&gt;   let a = [Blah(), Blah()] as [MyProtocol]<br>&gt;   return a<br>&gt; }<br>&gt; <br>&gt; On Mon, Jan 25, 2016 at 10:47 PM, Austin Zheng via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hi Ryan,<br>&gt; <br>&gt; Are you sure it works with user-defined struct types? I tried the following code, and got the same error:<br>&gt; <br>&gt; protocol MyProtocol {}<br>&gt; <br>&gt; struct Blah : MyProtocol { }<br>&gt; <br>&gt; func foo() -&gt; [MyProtocol] {<br>&gt;   let a = [Blah(), Blah()] as [Blah]<br>&gt;   return a<br>&gt; }<br>&gt; <br>&gt; &#39;class Blah&#39; works fine.<br>&gt; <br>&gt; Even so, this is not the behavior I would have expected. Perhaps someone else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T : P.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi All,<br>&gt;&gt; <br>&gt;&gt; I have a function which returns a closure, which then returns an array of objects conforming to a protocol. <br>&gt;&gt; <br>&gt;&gt; ie. <br>&gt;&gt; <br>&gt;&gt; protocol MyProtocol {}<br>&gt;&gt; <br>&gt;&gt; extension Float: MyProtocol {}<br>&gt;&gt; extension OtherType: MyProtocol {}<br>&gt;&gt; <br>&gt;&gt; When I try to return an array of Floats, I get the error “Cannot convert value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt;&gt; <br>&gt;&gt; Other struct-based types work fine.<br>&gt;&gt; <br>&gt;&gt; Is this not possible with standard library types?<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; Ryan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Trent Nadeau<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160125/c7c9db16/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dda25e0a2e78da4fe5ca01c69c2e5893?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Ryan Walklin</string> &lt;ryan at testtoast.com&gt;<p>January 26, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Austin, <br></p><p>Thanks for your reply. Sorry you’re right, my struct types don’t work if they are in in existing array of type [MyType] as below.<br></p><p>I’ve been trying to work round it and found that with the following code: <br></p><p>extension MyType: MyProtocol {}<br></p><p>var array1: [MyType]<br></p><p>fun foo() -&gt; [MyProtocol] {<br>    return array1<br>}<br></p><p>func foo2 -&gt; [MyProtocol] {<br>    return [myType1, myType2]<br>}<br></p><p><br>The foo pattern fails, but the foo2 pattern works. My existing code with struct type was all of type foo2, so I didn’t appreciate the error. As you stay, still seems like a problem with type inference.<br></p><p>Ryan<br></p><p>&gt; On 26 Jan 2016, at 2:47 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Ryan,<br>&gt; <br>&gt; Are you sure it works with user-defined struct types? I tried the following code, and got the same error:<br>&gt; <br>&gt; protocol MyProtocol {}<br>&gt; <br>&gt; struct Blah : MyProtocol { }<br>&gt; <br>&gt; func foo() -&gt; [MyProtocol] {<br>&gt;   let a = [Blah(), Blah()] as [Blah]<br>&gt;   return a<br>&gt; }<br>&gt; <br>&gt; &#39;class Blah&#39; works fine.<br>&gt; <br>&gt; Even so, this is not the behavior I would have expected. Perhaps someone else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T : P.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi All,<br>&gt;&gt; <br>&gt;&gt; I have a function which returns a closure, which then returns an array of objects conforming to a protocol. <br>&gt;&gt; <br>&gt;&gt; ie. <br>&gt;&gt; <br>&gt;&gt; protocol MyProtocol {}<br>&gt;&gt; <br>&gt;&gt; extension Float: MyProtocol {}<br>&gt;&gt; extension OtherType: MyProtocol {}<br>&gt;&gt; <br>&gt;&gt; When I try to return an array of Floats, I get the error “Cannot convert value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt;&gt; <br>&gt;&gt; Other struct-based types work fine.<br>&gt;&gt; <br>&gt;&gt; Is this not possible with standard library types?<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; Ryan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160126/fee2feec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 26, 2016 at 10:00:00am</p></header><div class="content"><p>The problem is that an array of protocols is stored using a different representation from an array of plain structs (or classes, for that matter). Converting from [Float] to [MyProtocol] is therefore an O(N) operation, while a normal upcast between class types is O(1) (by sharing the underlying storage).<br></p><p>This does keep tripping people up, though, so maybe an explicit &quot;as&quot; should be considered good enough. The typical workarounds are either to use &quot;as [MyProtocol]&quot; to begin with (as Trent mentioned) or to use &#39;map&#39; to build a new array (&quot;return a.map { $0 }&quot;).<br></p><p>(Any change in this space would need to go through the Swift Evolution Process &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;.)<br></p><p>Best,<br>Jordan<br></p><p><br>&gt; On Jan 25, 2016, at 19:58, Ryan Walklin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Austin, <br>&gt; <br>&gt; Thanks for your reply. Sorry you’re right, my struct types don’t work if they are in in existing array of type [MyType] as below.<br>&gt; <br>&gt; I’ve been trying to work round it and found that with the following code: <br>&gt; <br>&gt; extension MyType: MyProtocol {}<br>&gt; <br>&gt; var array1: [MyType]<br>&gt; <br>&gt; fun foo() -&gt; [MyProtocol] {<br>&gt;     return array1<br>&gt; }<br>&gt; <br>&gt; func foo2 -&gt; [MyProtocol] {<br>&gt;     return [myType1, myType2]<br>&gt; }<br>&gt; <br>&gt; <br>&gt; The foo pattern fails, but the foo2 pattern works. My existing code with struct type was all of type foo2, so I didn’t appreciate the error. As you stay, still seems like a problem with type inference.<br>&gt; <br>&gt; Ryan<br>&gt; <br>&gt;&gt; On 26 Jan 2016, at 2:47 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Ryan,<br>&gt;&gt; <br>&gt;&gt; Are you sure it works with user-defined struct types? I tried the following code, and got the same error:<br>&gt;&gt; <br>&gt;&gt; protocol MyProtocol {}<br>&gt;&gt; <br>&gt;&gt; struct Blah : MyProtocol { }<br>&gt;&gt; <br>&gt;&gt; func foo() -&gt; [MyProtocol] {<br>&gt;&gt;   let a = [Blah(), Blah()] as [Blah]<br>&gt;&gt;   return a<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; &#39;class Blah&#39; works fine.<br>&gt;&gt; <br>&gt;&gt; Even so, this is not the behavior I would have expected. Perhaps someone else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T : P.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have a function which returns a closure, which then returns an array of objects conforming to a protocol. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ie. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol MyProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Float: MyProtocol {}<br>&gt;&gt;&gt; extension OtherType: MyProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When I try to return an array of Floats, I get the error “Cannot convert value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other struct-based types work fine.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this not possible with standard library types?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ryan<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160126/da322b4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dda25e0a2e78da4fe5ca01c69c2e5893?s=50"></div><header><strong>returning an array of Protocol-conforming objects from a function</strong> from <string>Ryan Walklin</string> &lt;ryan at testtoast.com&gt;<p>January 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Jordan,<br></p><p>Thanks for your reply. I’ve since discovered the differences in memory representation that you mention, and the performance implications of the conversion. <br></p><p>I’ve worked around this by just using a typed array, as the eventual destination for the array is a Metal buffer via memcpy, so I need a contiguous array.<br></p><p>Regards,<br></p><p>Ryan<br></p><p><br>&gt; On 27 Jan 2016, at 5:56 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; The problem is that an array of protocols is stored using a different representation from an array of plain structs (or classes, for that matter). Converting from [Float] to [MyProtocol] is therefore an O(N) operation, while a normal upcast between class types is O(1) (by sharing the underlying storage).<br>&gt; <br>&gt; This does keep tripping people up, though, so maybe an explicit &quot;as&quot; should be considered good enough. The typical workarounds are either to use &quot;as [MyProtocol]&quot; to begin with (as Trent mentioned) or to use &#39;map&#39; to build a new array (&quot;return a.map { $0 }&quot;).<br>&gt; <br>&gt; (Any change in this space would need to go through the Swift Evolution Process &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;.)<br>&gt; <br>&gt; Best,<br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 25, 2016, at 19:58, Ryan Walklin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Austin, <br>&gt;&gt; <br>&gt;&gt; Thanks for your reply. Sorry you’re right, my struct types don’t work if they are in in existing array of type [MyType] as below.<br>&gt;&gt; <br>&gt;&gt; I’ve been trying to work round it and found that with the following code: <br>&gt;&gt; <br>&gt;&gt; extension MyType: MyProtocol {}<br>&gt;&gt; <br>&gt;&gt; var array1: [MyType]<br>&gt;&gt; <br>&gt;&gt; fun foo() -&gt; [MyProtocol] {<br>&gt;&gt;     return array1<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func foo2 -&gt; [MyProtocol] {<br>&gt;&gt;     return [myType1, myType2]<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The foo pattern fails, but the foo2 pattern works. My existing code with struct type was all of type foo2, so I didn’t appreciate the error. As you stay, still seems like a problem with type inference.<br>&gt;&gt; <br>&gt;&gt; Ryan<br>&gt;&gt; <br>&gt;&gt;&gt; On 26 Jan 2016, at 2:47 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Ryan,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are you sure it works with user-defined struct types? I tried the following code, and got the same error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol MyProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct Blah : MyProtocol { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo() -&gt; [MyProtocol] {<br>&gt;&gt;&gt;   let a = [Blah(), Blah()] as [Blah]<br>&gt;&gt;&gt;   return a<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &#39;class Blah&#39; works fine.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even so, this is not the behavior I would have expected. Perhaps someone else can explain why [T] can&#39;t be upcasted to [P] when T is a struct and T : P.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 25, 2016, at 7:36 PM, Ryan Walklin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have a function which returns a closure, which then returns an array of objects conforming to a protocol. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ie. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol MyProtocol {}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension Float: MyProtocol {}<br>&gt;&gt;&gt;&gt; extension OtherType: MyProtocol {}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When I try to return an array of Floats, I get the error “Cannot convert value of type &#39;[Float]&#39; to closure result type ‘[MyProtocol]”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Other struct-based types work fine.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is this not possible with standard library types?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ryan<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160127/15caa0dc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
