<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4db4fede2f4e473341b873406b68e4e1?s=50"></div><header><strong>Proof-of-concept port of Swift for Android</strong> from <string>Geordie Jay</string> &lt;geojay at gmail.com&gt;<p>December 11, 2015 at 08:00:00pm</p></header><div class="content"><p>Hi @zhuowei. I have been (somewhat verbosely) documenting my progress getting your SwiftAndroid build working on the reddit thread here https://www.reddit.com/r/swift/comments/3w0xrd/im_patching_the_opensource_swift_compiler_to/ &lt;https://www.reddit.com/r/swift/comments/3w0xrd/im_patching_the_opensource_swift_compiler_to/&gt; (as ephemer9). Given that I’ve now worked through a lot of issues, I think together we can make this build repeatable for everyone (that is if you need my help at all - you seem to be doing a mighty fine job yourself so far). What I’d like to do is work on the JNI integration part of this. Before I can though, I have to get through a few problems here still:<br></p><p>After dealing with the dependency issues (see reddit), the SwiftAndroid build finally completed. It had plenty of warnings along the way, but in the end I was left with binaries that seemed to do something. I was then able to use swiftc to compile for linux x86_64 as usual. I couldn&#39;t figure out how to cross-compile to armv7 though. This is what I tried:<br></p><p>    swiftc -target armv7-none-linux-androideabi -target-cpu armv7 test.swift<br></p><p>This unfortunately produces a segfault on my machine: &quot;&lt;unknown&gt;:0: error: the clang compiler does not support &#39;-mcpu=armv7&#39;&quot;<br></p><p>Removing -target-cpu from the `swiftc` call leads to an error about missing `swift.ld` for architecture x86_64. It is looking under android/x86_64 - I symlinked the linker file from android/armv7 into that path and got this instead:<br></p><p>    me at linuxbox:~# swiftc -target armv7-none-linux-androideabi test.swift -vSwift version 2.2-dev (LLVM 7bae82deaa, Clang 53d04af5ce, Swift 65921fc110)<br>    Target: armv7-none-linux-android<br>    /me/swift/build/Ninja-Release/swift-linux-x86_64/bin/swift -frontend -c -primary-file test.swift -target armv7-none-linux-android -disable-objc-interop -color-diagnostics -module-name test -o /tmp/test-706f67.o<br>    /me/swift/build/Ninja-Release/swift-linux-x86_64/bin/swift-autolink-extract /tmp/test-706f67.o -o /tmp/test-58bef6.autolink<br>    /usr/bin/clang++ /tmp/test-706f67.o -L /me/swift/build/Ninja-Release/swift-linux-x86_64/lib/swift/android -Xlinker -rpath -Xlinker /me/swift/build/Ninja-Release/swift-linux-x86_64/lib/swift/android -lswiftCore @/tmp/test-58bef6.autolink -Xlinker -T /me/swift/build/Ninja-Release/swift-linux-x86_64/lib/swift/android/x86_64/swift.ld -o test<br>    /usr/bin/ld: /tmp/test-706f67.o: Relocations in generic ELF (EM: 40)<br>    /usr/bin/ld: /tmp/test-706f67.o: Relocations in generic ELF (EM: 40)<br>    /tmp/test-706f67.o: error adding symbols: File in wrong format<br>    clang: error: linker command failed with exit code 1 (use -v to see invocation)<br>    &lt;unknown&gt;:0: error: link command failed with exit code 1 (use -v to see invocation)<br></p><p>I’m assuming this is because it’s trying to link the armv7 binary with the x86_64 standard library or something illogical like that. In any case I’m a little stuck now as to how to proceed. Given that clang is telling me it doesn’t support armv7, I imagine I’m just entering the wrong arguments for swiftc. Or do I have to make LLVM-IR first and link using the android toolchain for now? Can you or anyone else give me an idea as to how to cross-compile using swiftc?<br></p><p>Many thanks,<br>Geordie<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/7346ec8e/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 195 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/7346ec8e/attachment.sig&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
