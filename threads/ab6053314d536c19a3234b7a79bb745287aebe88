<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0ca88ca6c43034ed39668bb10783618?s=50"></div><header><strong>[Proposal] Make optional protocol methods first class citizens</strong> from <string>Yuval Tal</string> &lt;yuvalt at pblc.co&gt;<p>March 30, 2016 at 10:00:00am</p></header><div class="content"><p>Hi,<br></p><p>I find that optional protocol methods to be very useful. However, there is<br>a caveat -- it needs to be mapped to @objc. This puts a set of limitations,<br>such as: structures cannot be used as parameters as it does not map to<br>objective-c. What do you think about removing the requirement of using<br>@objc and allow to create optional methods without these limitations?<br></p><p>Thank you,<br></p><p>-Yuval<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/ab60be88/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Make optional protocol methods first class citizens</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 30, 2016 at 03:00:00pm</p></header><div class="content"><p>I’m not sure, why not just define an additional protocol with the optional method(s) you’d like to add? The whole point of protocols is to guarantee access to some baseline capability, so I’m not sure that optional capabilities are well covered except by adding new protocols that extend each other.<br></p><p>Objective-C conversion has the ability because Objective-C is unusual by comparison thanks to its ability to have “method calls” (messages) with no actual destination. I think it’s good for Swift to be more structured and strict than that.<br></p><p>&gt; On 30 Mar 2016, at 15:08, Yuval Tal via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I find that optional protocol methods to be very useful. However, there is a caveat -- it needs to be mapped to @objc. This puts a set of limitations, such as: structures cannot be used as parameters as it does not map to objective-c. What do you think about removing the requirement of using @objc and allow to create optional methods without these limitations?<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Yuval<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27ca9066ad05bd8aa9ec366115f3cd38?s=50"></div><header><strong>[Proposal] Make optional protocol methods first class citizens</strong> from <string>Kurt Werle</string> &lt;kurt at circlew.org&gt;<p>March 30, 2016 at 08:00:00am</p></header><div class="content"><p>Another alternative is to add a protocol extension with<br>blank/harmless/default methods for things that are optional and always call<br>&#39;em.<br></p><p>On Wed, Mar 30, 2016 at 7:18 AM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m not sure, why not just define an additional protocol with the optional<br>&gt; method(s) you’d like to add? The whole point of protocols is to guarantee<br>&gt; access to some baseline capability, so I’m not sure that optional<br>&gt; capabilities are well covered except by adding new protocols that extend<br>&gt; each other.<br>&gt;<br>&gt; Objective-C conversion has the ability because Objective-C is unusual by<br>&gt; comparison thanks to its ability to have “method calls” (messages) with no<br>&gt; actual destination. I think it’s good for Swift to be more structured and<br>&gt; strict than that.<br>&gt;<br>&gt; &gt; On 30 Mar 2016, at 15:08, Yuval Tal via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hi,<br>&gt; &gt;<br>&gt; &gt; I find that optional protocol methods to be very useful. However, there<br>&gt; is a caveat -- it needs to be mapped to @objc. This puts a set of<br>&gt; limitations, such as: structures cannot be used as parameters as it does<br>&gt; not map to objective-c. What do you think about removing the requirement of<br>&gt; using @objc and allow to create optional methods without these limitations?<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Yuval<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>kurt at CircleW.org<br>http://www.CircleW.org/kurt/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/5eb9832b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0ca88ca6c43034ed39668bb10783618?s=50"></div><header><strong>[Proposal] Make optional protocol methods first class citizens</strong> from <string>Yuval Tal</string> &lt;yuvalt at pblc.co&gt;<p>March 30, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I&#39;m aware of all the protocol/extension or multiple protocol options. I<br>think that for the sake of code readability and the ability to easily<br>create components, it is extremely useful. For example, if I want to create<br>a class that has a delegate, it is extremely useful for the caller to<br>easily know what is required to be implemented and what is optional. Having<br>multiple protocols is probably not a great idea, and using the protocol<br>extension method makes it non-intuitive for the caller to clearly<br>understand what is optional. Note that I&#39;m not suggesting a new language<br>constructs, just to ease the requirement on existing one, that honestly, I<br>found extremely clear and making interfaces much more obvious.<br></p><p>-Yuval<br></p><p>On Wed, Mar 30, 2016 at 10:18 AM, Haravikk &lt;swift-evolution at haravikk.me&gt;<br>wrote:<br></p><p>&gt; I’m not sure, why not just define an additional protocol with the optional<br>&gt; method(s) you’d like to add? The whole point of protocols is to guarantee<br>&gt; access to some baseline capability, so I’m not sure that optional<br>&gt; capabilities are well covered except by adding new protocols that extend<br>&gt; each other.<br>&gt;<br>&gt; Objective-C conversion has the ability because Objective-C is unusual by<br>&gt; comparison thanks to its ability to have “method calls” (messages) with no<br>&gt; actual destination. I think it’s good for Swift to be more structured and<br>&gt; strict than that.<br>&gt;<br>&gt; &gt; On 30 Mar 2016, at 15:08, Yuval Tal via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hi,<br>&gt; &gt;<br>&gt; &gt; I find that optional protocol methods to be very useful. However, there<br>&gt; is a caveat -- it needs to be mapped to @objc. This puts a set of<br>&gt; limitations, such as: structures cannot be used as parameters as it does<br>&gt; not map to objective-c. What do you think about removing the requirement of<br>&gt; using @objc and allow to create optional methods without these limitations?<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Yuval<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/f74506d3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>[Proposal] Make optional protocol methods first class citizens</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 31, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;m missing those optional methods too, but protocol extensions sound like a better solution for this.<br></p><p>(For those suggesting a separate protocol, consider UITableView. How many protocols would it take to model all the optional delegate methods as separate protocols? Certainly more than 10, perhaps a few dozen.)<br></p><p>I would welcome a standardized way to document the methods as optional-to-implement, though, beyond just requiring a protocol extension. My ideal option would be to allow the optional keyword and change it to simply require a default implementation in a protocol extension.<br></p><p>If we don&#39;t want a language change, then perhaps a conventional doc tag?<br></p><p>A.<br></p><p><br>&gt; On Mar 30, 2016, at 8:08 PM, Yuval Tal via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I find that optional protocol methods to be very useful. However, there is a caveat -- it needs to be mapped to @objc. This puts a set of limitations, such as: structures cannot be used as parameters as it does not map to objective-c. What do you think about removing the requirement of using @objc and allow to create optional methods without these limitations?<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Yuval<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Proposal] Make optional protocol methods first class citizens</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March 31, 2016 at 11:00:00pm</p></header><div class="content"><p>I think it&#39;s a bad idea because current model (with no optional methods) encourages decomposing protocols into smaller ones, thus discouraging partial functions and making our code safer and more predictable.<br></p><p>In my opinion, right now, if you really need an optional protocol method, consider adding a default implementation for it. You&#39;d be surprised how often it&#39;s enough to satisfy the need for an optional method.<br></p><p><br>Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Yuval Tal via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 30.03.2016, o godz. 16:08:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I find that optional protocol methods to be very useful. However, there is a caveat -- it needs to be mapped to @objc. This puts a set of limitations, such as: structures cannot be used as parameters as it does not map to objective-c. What do you think about removing the requirement of using @objc and allow to create optional methods without these limitations?<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Yuval<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/4d2dd374/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
