<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Discussion] Deprecation Linking</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>April  7, 2016 at 11:00:00pm</p></header><div class="content"><p>I work on an API and like any API, we frequently deprecate methods (more than we would like). I think would be useful, when you deprecate something there is a link from the old method to the new method(s). With this facility it would be possible to match the old parameter name with the new names, assuming they match in type and name and automatically fill in much of the information so you don’t have to do as much work to adopt the new API. The user would just have to add the new parameters, if a parameter is removed, it would delete it. There would also be some basic checking done to make sure the new API matched. This would work on the vast bulk of APIs. When there are multiple choices, multiple replacements would be shown and selected in the IDE. It would use most of the current attributes available in Swift. I am thinking of syntax something like this, very rough: <br></p><p>#begindeprecation(message=“optional comment”, available=iOS 8.0)<br>func fetchProjects(query query : String?) {<br>   // some code<br>}<br>#replacement(message=“some comment”), available=iOS 9.0)<br>func fetchProjects(query query : String?, scope : String?) {<br>   // some code<br>}<br>#replacement(message=“some comment 2”, available=iOS 9.0) <br>func fetchProjects((query query : String?, scope : NSPredicate) {<br>}<br>#enddeprecation<br></p><p>In this example, the IDE would show the two replacements, and let you select one of them, then it would automatically fill in the “query&quot; with the replacement, and then leave a place for you to enter the “scope” parameter. If it is just deprecated with no replacements you would just leave out the #replacement part. The comment part is optional. The comments would also appear in the documentation for the method as it currently does with the deprecation attributes. Eventually when you are done supporting the deprecation, you would remove the # and the old methods. <br></p><p>The idea is to enhance the process of deprecation, as well as simplify and speed adoption of the new APIs. The user would not have to spend as much time researching the new way to do things, they would just be presented with the new way. I imagine this would also be useful to developers on the same team. I speak specifically of methods here but this would apply to other entities that you might want to deprecate as well. I am sure there is more to consider here but thought I would start out simple and the most common case. <br></p><p>- Paul <br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/92761521/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion] Deprecation Linking</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 12, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; #begindeprecation(message=“optional comment”, available=iOS 8.0)<br>&gt; func fetchProjects(query query : String?) {<br>&gt;    // some code<br>&gt; }<br>&gt; #replacement(message=“some comment”), available=iOS 9.0)<br>&gt; func fetchProjects(query query : String?, scope : String?) {<br>&gt;    // some code<br>&gt; }<br>&gt; #replacement(message=“some comment 2”, available=iOS 9.0) <br>&gt; func fetchProjects((query query : String?, scope : NSPredicate) {<br>&gt; }<br>&gt; #enddeprecation<br></p><p>Swift already offers this similar syntax (I&#39;m using a future syntax tweak here):<br></p><p>	@available(iOS, unavailable, renamed: &quot;fetchProjects(query:)&quot;)<br>	func fetchProjects(_ query: String?) { ... }<br></p><p>What if that was extended to allow it to be applied to deprecations, and to allow for differences in signature for functions?<br></p><p>	@available(iOS, introduced: 8.0, deprecated: 9.0, renamed: &quot;fetchProjects(query:scope:)&quot;)<br>	func fetchProjects(query query: String?) { ... }<br></p><p>Alternatively, we could use a `replaced` keyword to distinguish between simple renames and more complicated changes.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
