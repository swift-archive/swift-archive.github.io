<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d2fcdd5a6abf7204973117f37a18671?s=50"></div><header><strong>How to bridge between CoreFoundation and SwiftFoundation on Linux?</strong> from <string>Bouke Haarsma</string> &lt;bouke at haarsma.eu&gt;<p>September 21, 2016 at 06:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>When working with CoreFoundation objects (e.g. CFReadStream, <br>CFWriteStream) it isn&#39;t immediately obvious to me how to bridge them to <br>SwiftFoundation counterparts (InputStream / OutputStream).<br></p><p>The following works on OSX, but doesn&#39;t work on Linux;<br></p><p>    let readStream: CFReadStream = ...<br>    readStream as InputStream<br>    // error: cannot convert value of type &#39;CFReadStream&#39; to expected <br>argument type &#39;InputStream&#39;<br></p><p>In some other places I need to bridge a String to a CFString, the <br>following works on OSX, but doesn&#39;t work on Linux;<br></p><p>    let string: String = ...<br>    string as CFString<br>    // error: error: &#39;String&#39; is not convertible to &#39;CFString&#39;; did you <br>mean to use &#39;as!&#39; to force downcast?<br></p><p>Thanks.<br></p><p>-- <br>-Bouke<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>How to bridge between CoreFoundation and SwiftFoundation on Linux?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September 21, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Sep 20, 2016, at 9:38 PM, Bouke Haarsma via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; When working with CoreFoundation objects (e.g. CFReadStream, CFWriteStream) it isn&#39;t immediately obvious to me how to bridge them to SwiftFoundation counterparts (InputStream / OutputStream).<br>&gt; <br>&gt; The following works on OSX, but doesn&#39;t work on Linux;<br></p><p>What implementation of CF are you using on Linux? OpenStep?<br></p><p>The bridging between Swift and Obj-C Foundation classes is only implemented on Apple platforms. It’s not part of the open source release. The plan is to implement classes like InputStream in native Swift as part of the standard library; that work is in progress.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160921/65302023/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d2fcdd5a6abf7204973117f37a18671?s=50"></div><header><strong>How to bridge between CoreFoundation and SwiftFoundation on Linux?</strong> from <string>Bouke Haarsma</string> &lt;bouke at haarsma.eu&gt;<p>September 21, 2016 at 10:00:00pm</p></header><div class="content"><p>The one that comes with SwiftFoundation (https://github.com/apple/swift-corelibs-foundation/tree/master/CoreFoundation &lt;https://github.com/apple/swift-corelibs-foundation/tree/master/CoreFoundation&gt;).<br></p><p>I think it should be a bug that CFReadStream cannot be bridged to (NS)InputStream, as otherwise there’s no way to intertwine Sockets (CFSockets) with SwiftFoundation. As the implementation already uses a CFReadStream internally (https://github.com/apple/swift-corelibs-foundation/blob/d3872cb094124d5dd189839505ae73e2fa717cfd/Foundation/NSStream.swift#L122 &lt;https://github.com/apple/swift-corelibs-foundation/blob/d3872cb094124d5dd189839505ae73e2fa717cfd/Foundation/NSStream.swift#L122&gt;), it would be a matter of adding an initializer. However the value is private, so adding the initializer cannot be done from an extension.<br></p><p>—<br>Bouke<br></p><p>&gt; On 21 Sep 2016, at 21:22, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 20, 2016, at 9:38 PM, Bouke Haarsma via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; When working with CoreFoundation objects (e.g. CFReadStream, CFWriteStream) it isn&#39;t immediately obvious to me how to bridge them to SwiftFoundation counterparts (InputStream / OutputStream).<br>&gt;&gt; <br>&gt;&gt; The following works on OSX, but doesn&#39;t work on Linux;<br>&gt; <br>&gt; What implementation of CF are you using on Linux? OpenStep?<br>&gt; <br>&gt; The bridging between Swift and Obj-C Foundation classes is only implemented on Apple platforms. It’s not part of the open source release. The plan is to implement classes like InputStream in native Swift as part of the standard library; that work is in progress.<br>&gt; <br>&gt; —Jens<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160921/861f3f36/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>How to bridge between CoreFoundation and SwiftFoundation on Linux?</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>September 21, 2016 at 01:00:00pm</p></header><div class="content"><p>I would suggest that the way to do it is to follow the NSString/NSNumber approach used in swift-corelibs-foundation where the structural size is equivalent.<br></p><p>the layout would roughly look like:<br></p><p><br>open class InputStream : Stream {<br>    typealias CFType = CFReadStream<br>    // This layout MUST be the same as CFReadStream so that they are bridgeable<br>    private var _base = _CFInfo(typeID: CFReadStreamGetTypeID())<br>    private var _flags: CFOptionFlags = 0<br>    private var _error: UnsafeMutableRawPointer? = nil<br>    private var _info: UnsafeMutableRawPointer? = nil<br>    private var _callBacks: UnsafeMutableRawPointer? = nil<br>#if os(OSX) || os(iOS)<br>    private var _lock = pthread_mutex_t()<br>#elseif os(Linux)<br>    private var _lock = Int32(0)<br>#endif<br>    private var _previousRunloopsAndModes: UnsafeMutableRawPointer? = nil<br>#if DEPLOYMENT_ENABLE_LIBDISPATCH<br>    private var _queue: UnsafeMutableRawPointer? = nil<br>#endif<br></p><p>    internal var _cfObject: CFType {<br>        return unsafeBitCast(self, to: CFType.self)<br>    }<br></p><p>    ...<br>}<br></p><p>This would ensure the memory size of the allocation of InputStream would be the same as CFReadStream. <br></p><p>These two calls would then need to be un-commented in NSSwiftRuntime.swift<br></p><p>//    _CFRuntimeBridgeTypeToClass(CFReadStreamGetTypeID(), unsafeBitCast(InputStream.self, UnsafeRawPointer.self))<br>//    _CFRuntimeBridgeTypeToClass(CFWriteStreamGetTypeID(), unsafeBitCast(OutputStream.self, UnsafeRawPointer.self))<br></p><p>and __CFSwiftBridge would need entries for calling out to swift for subclassers.<br></p><p><br>&gt; On Sep 21, 2016, at 1:03 PM, Bouke Haarsma via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The one that comes with SwiftFoundation (https://github.com/apple/swift-corelibs-foundation/tree/master/CoreFoundation &lt;https://github.com/apple/swift-corelibs-foundation/tree/master/CoreFoundation&gt;).<br>&gt; <br>&gt; I think it should be a bug that CFReadStream cannot be bridged to (NS)InputStream, as otherwise there’s no way to intertwine Sockets (CFSockets) with SwiftFoundation. As the implementation already uses a CFReadStream internally (https://github.com/apple/swift-corelibs-foundation/blob/d3872cb094124d5dd189839505ae73e2fa717cfd/Foundation/NSStream.swift#L122 &lt;https://github.com/apple/swift-corelibs-foundation/blob/d3872cb094124d5dd189839505ae73e2fa717cfd/Foundation/NSStream.swift#L122&gt;), it would be a matter of adding an initializer. However the value is private, so adding the initializer cannot be done from an extension.<br>&gt; <br>&gt; —<br>&gt; Bouke<br>&gt; <br>&gt;&gt; On 21 Sep 2016, at 21:22, Jens Alfke &lt;jens at mooseyard.com &lt;mailto:jens at mooseyard.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 20, 2016, at 9:38 PM, Bouke Haarsma via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When working with CoreFoundation objects (e.g. CFReadStream, CFWriteStream) it isn&#39;t immediately obvious to me how to bridge them to SwiftFoundation counterparts (InputStream / OutputStream).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The following works on OSX, but doesn&#39;t work on Linux;<br>&gt;&gt; <br>&gt;&gt; What implementation of CF are you using on Linux? OpenStep?<br>&gt;&gt; <br>&gt;&gt; The bridging between Swift and Obj-C Foundation classes is only implemented on Apple platforms. It’s not part of the open source release. The plan is to implement classes like InputStream in native Swift as part of the standard library; that work is in progress.<br>&gt;&gt; <br>&gt;&gt; —Jens<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160921/a1e955d6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
