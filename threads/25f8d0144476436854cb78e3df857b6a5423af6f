<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Brainstorming: Optional sugar inferred map</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>February 17, 2016 at 06:00:00pm</p></header><div class="content"><p>You make a good point. However, you could break that statement up into multiple smaller statements if it’s essential to know which functions get executed, don’t you think? That seems like nicer code than we now sometimes have to deal with, regarding the boilerplate code this thread is about.<br></p><p>&gt; Optional chaining is different because of the asymmetry between receiver and arguments (Swift is using single dispatch and not multiple dispatch) and moreover because it is linear and the execution order is clear and simple to understand, i.e. when evaluating<br>&gt; <br>&gt; a?.foo()?.bar()?.baz()<br>&gt; <br>&gt; I know that when bar() answers nil that foo() has been executed but baz() has not.<br>&gt; <br>&gt; When evaluating<br>&gt; <br>&gt; a.foo()? + b.bar()? * baz(c?)<br>&gt; <br>&gt; I think is is much more difficult to understand what will have been executed when c answers nil, for example.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; &gt; Am 16.02.2016 um 15:10 schrieb tvermeulen via swift-evolution&lt;swift-evolution at swift.org&gt;:<br>&gt; &gt; <br>&gt; &gt; But wouldn’t you say optional chaining is almost the same thing? I’m a bit puzzled why people say this new proposal makes the code confusing, while the current implementation of optional chaining isn’t frowned upon.<br>&gt; &gt; <br>&gt; &gt; let a: String? = &quot;123&quot;<br>&gt; &gt; let b: String = &quot;456&quot;<br>&gt; &gt; let c = a?.stringByAppendingString(b)<br>&gt; &gt; <br>&gt; &gt; This works as expected.<br>&gt; &gt; <br>&gt; &gt; let a: String = &quot;123&quot;<br>&gt; &gt; let b: String? = &quot;456&quot;<br>&gt; &gt; let c = a.stringByAppendingString(b?)<br>&gt; &gt; <br>&gt; &gt; This, however, does not work. I think the only reason the second example seems a bit off is because we’re not used to it, but both seem equally readable to me. The second example is basically equivalent to this:<br>&gt; &gt; <br>&gt; &gt; let a: String = “123”<br>&gt; &gt; let b: String? = “456”<br>&gt; &gt; let c = b?.stringByPrependingString(a)<br>&gt; &gt; <br>&gt; &gt; Which would work, if only there is no such function. I guess the point I’m trying to make is that currently, whether we have to use a lot of boilerplate code depends on the choice of receiver and argument of the function, which could be completely arbitrary.<br>&gt; &gt; <br>&gt; &gt; &gt; &gt; To address this, the nil-coalescing operator would allow $$, where $$ is the unwrapped unnamed result of the expression when non nil:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; func doSomething(value: Int) -&gt;Int {<br>&gt; &gt; &gt; &gt; return value<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; let ra = a ?? doSomething($$)<br>&gt; &gt; &gt; &gt; let rc = c ?? doSomething($$)<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; ra -&gt;5<br>&gt; &gt; &gt; &gt; rc -&gt;nil<br>&gt; &gt; &gt; I think this is completely the wrong way to approach this.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; *If* you want to implement this feature, I think the way to do it is to say that you can put ? after any optional parameter to a normal function call, and Swift will unwrap all the parameters so marked and make the call return `nil` if any of them are nil.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; let ra = doSomething(a?)<br>&gt; &gt; &gt; let rc = doSomething(c?)<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Naturally, since operators are just function calls with a funny syntax, this would also extend to operators.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; a? + b // a.k.a. +(a?, b)<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Even in this form, however, I don&#39;t think this is a feature worth having. Too indirect and specialized.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; Brent Royal-Gordon<br>&gt; &gt; &gt; Architechies<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
