<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 16, 2016 at 07:00:00am</p></header><div class="content"><p>on Thu Jun 16 2016, Jonathan Hull &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; …Thus, I don’t really see the harm in renaming these to match the rest<br>&gt; of Swift.  It won’t cause any confusion that can’t be easily recovered<br>&gt; from.  <br></p><p>I&#39;m beginning to think you may be right.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 16, 2016 at 09:00:00am</p></header><div class="content"><p>I’ve always considered the term of art argument to be at least partially a red herring.<br></p><p>These methods are difficult because you don’t have guarantees of non-mutability until you get to Collection - on Sequence, a dropFirst method may mean that neither the original nor returned sequence can address that item anymore. Names have to indicate that a Sequence may or may not consume an item.<br></p><p>It makes me wonder if we should evaluate doing something more aggressive, such as eliminating the support of one-time/destructive Sequences completely.<br></p><p>-DW<br></p><p>&gt; On Jun 16, 2016, at 8:45 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jun 16 2016, Jonathan Hull &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; …Thus, I don’t really see the harm in renaming these to match the rest<br>&gt;&gt; of Swift.  It won’t cause any confusion that can’t be easily recovered<br>&gt;&gt; from.  <br>&gt; <br>&gt; I&#39;m beginning to think you may be right.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>June 16, 2016 at 07:00:00pm</p></header><div class="content"><p>Hmm, after some consideration I think we should reconsider renaming all of<br>the exceptions (map =&gt; mapped, filter =&gt; filtered, etc).<br></p><p>The main reason to use a term of art is such that people already familiar<br>with the term will immediately understand it. However as Jonathan points<br>out, since the modified terms are very close to the terms of art they are<br>unlikely to hinder in this objective and any initial confusion would be<br>very quickly and easily recovered from. Any mental pattern matching would<br>quickly transfer to the Swift forms.<br></p><p>– Basically* all benefits of using a term of art still apply.*<br>– The likelihood, duration and impact of any confusion would all be very<br>low.<br>– It&#39;d be a lot more consistent (which also aids the mind to learn to<br>pattern match on -ed/-ing).<br></p><p>On Thu, Jun 16, 2016 at 5:51 PM, David Waite via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’ve always considered the term of art argument to be at least partially a<br>&gt; red herring.<br>&gt;<br>&gt; These methods are difficult because you don’t have guarantees of<br>&gt; non-mutability until you get to Collection - on Sequence, a dropFirst<br>&gt; method may mean that neither the original nor returned sequence can address<br>&gt; that item anymore. Names have to indicate that a Sequence may or may not<br>&gt; consume an item.<br>&gt;<br>&gt; It makes me wonder if we should evaluate doing something more aggressive,<br>&gt; such as eliminating the support of one-time/destructive Sequences<br>&gt; completely.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; &gt; On Jun 16, 2016, at 8:45 AM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Thu Jun 16 2016, Jonathan Hull &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; …Thus, I don’t really see the harm in renaming these to match the rest<br>&gt; &gt;&gt; of Swift.  It won’t cause any confusion that can’t be easily recovered<br>&gt; &gt;&gt; from.<br>&gt; &gt;<br>&gt; &gt; I&#39;m beginning to think you may be right.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; -Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/cf90f1c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 16, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 16, 2016, at 11:40 AM, Patrick Pijnappel &lt;patrickpijnappel at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hmm, after some consideration I think we should reconsider renaming all of the exceptions (map =&gt; mapped, filter =&gt; filtered, etc).<br>&gt; <br>&gt; The main reason to use a term of art is such that people already familiar with the term will immediately understand it. However as Jonathan points out, since the modified terms are very close to the terms of art they are unlikely to hinder in this objective and any initial confusion would be very quickly and easily recovered from. Any mental pattern matching would quickly transfer to the Swift forms.<br>&gt; <br>&gt; – Basically all benefits of using a term of art still apply.<br>&gt; – The likelihood, duration and impact of any confusion would all be very low.<br>&gt; – It&#39;d be a lot more consistent (which also aids the mind to learn to pattern match on -ed/-ing).<br></p><p>I believe my points still apply - Sequences may be one time use and thus mutating (such as a socket-backed Sequence). Neither mapped() nor mapping() is universally appropriate.<br></p><p>-DW<br></p><p>&gt; <br>&gt; On Thu, Jun 16, 2016 at 5:51 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I’ve always considered the term of art argument to be at least partially a red herring.<br>&gt; <br>&gt; These methods are difficult because you don’t have guarantees of non-mutability until you get to Collection - on Sequence, a dropFirst method may mean that neither the original nor returned sequence can address that item anymore. Names have to indicate that a Sequence may or may not consume an item.<br>&gt; <br>&gt; It makes me wonder if we should evaluate doing something more aggressive, such as eliminating the support of one-time/destructive Sequences completely.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt; &gt; On Jun 16, 2016, at 8:45 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Thu Jun 16 2016, Jonathan Hull &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; …Thus, I don’t really see the harm in renaming these to match the rest<br>&gt; &gt;&gt; of Swift.  It won’t cause any confusion that can’t be easily recovered<br>&gt; &gt;&gt; from.<br>&gt; &gt;<br>&gt; &gt; I&#39;m beginning to think you may be right.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; -Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/3fda36f3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>June 16, 2016 at 06:00:00pm</p></header><div class="content"><p>I agree the essence of the &quot;terms of art&quot; can still exist in the base name<br>while applying the &quot;ed/ing rule&quot;. I would vote to have these renamed to<br>better align with Swift and less with the terms of art.<br></p><p>-Shawn<br></p><p>On Thu, Jun 16, 2016 at 10:41 AM Patrick Pijnappel via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hmm, after some consideration I think we should reconsider renaming all of<br>&gt; the exceptions (map =&gt; mapped, filter =&gt; filtered, etc).<br>&gt;<br>&gt; The main reason to use a term of art is such that people already familiar<br>&gt; with the term will immediately understand it. However as Jonathan points<br>&gt; out, since the modified terms are very close to the terms of art they are<br>&gt; unlikely to hinder in this objective and any initial confusion would be<br>&gt; very quickly and easily recovered from. Any mental pattern matching would<br>&gt; quickly transfer to the Swift forms.<br>&gt;<br>&gt; – Basically* all benefits of using a term of art still apply.*<br>&gt; – The likelihood, duration and impact of any confusion would all be very<br>&gt; low.<br>&gt; – It&#39;d be a lot more consistent (which also aids the mind to learn to<br>&gt; pattern match on -ed/-ing).<br>&gt;<br>&gt; On Thu, Jun 16, 2016 at 5:51 PM, David Waite via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I’ve always considered the term of art argument to be at least partially<br>&gt;&gt; a red herring.<br>&gt;&gt;<br>&gt;&gt; These methods are difficult because you don’t have guarantees of<br>&gt;&gt; non-mutability until you get to Collection - on Sequence, a dropFirst<br>&gt;&gt; method may mean that neither the original nor returned sequence can address<br>&gt;&gt; that item anymore. Names have to indicate that a Sequence may or may not<br>&gt;&gt; consume an item.<br>&gt;&gt;<br>&gt;&gt; It makes me wonder if we should evaluate doing something more aggressive,<br>&gt;&gt; such as eliminating the support of one-time/destructive Sequences<br>&gt;&gt; completely.<br>&gt;&gt;<br>&gt;&gt; -DW<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 16, 2016, at 8:45 AM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; on Thu Jun 16 2016, Jonathan Hull &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; …Thus, I don’t really see the harm in renaming these to match the rest<br>&gt;&gt; &gt;&gt; of Swift.  It won’t cause any confusion that can’t be easily recovered<br>&gt;&gt; &gt;&gt; from.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;m beginning to think you may be right.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; -Dave<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/52806514/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>June 16, 2016 at 09:00:00pm</p></header><div class="content"><p>There seems to be a decent amount of support for revisiting these. I<br>drafted a proposal here: [thread]<br>&lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20864&gt;<br></p><p>On Thu, Jun 16, 2016 at 8:56 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; I agree the essence of the &quot;terms of art&quot; can still exist in the base name<br>&gt; while applying the &quot;ed/ing rule&quot;. I would vote to have these renamed to<br>&gt; better align with Swift and less with the terms of art.<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt;<br>&gt; On Thu, Jun 16, 2016 at 10:41 AM Patrick Pijnappel via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hmm, after some consideration I think we should reconsider renaming all<br>&gt;&gt; of the exceptions (map =&gt; mapped, filter =&gt; filtered, etc).<br>&gt;&gt;<br>&gt;&gt; The main reason to use a term of art is such that people already familiar<br>&gt;&gt; with the term will immediately understand it. However as Jonathan points<br>&gt;&gt; out, since the modified terms are very close to the terms of art they are<br>&gt;&gt; unlikely to hinder in this objective and any initial confusion would be<br>&gt;&gt; very quickly and easily recovered from. Any mental pattern matching would<br>&gt;&gt; quickly transfer to the Swift forms.<br>&gt;&gt;<br>&gt;&gt; – Basically* all benefits of using a term of art still apply.*<br>&gt;&gt; – The likelihood, duration and impact of any confusion would all be very<br>&gt;&gt; low.<br>&gt;&gt; – It&#39;d be a lot more consistent (which also aids the mind to learn to<br>&gt;&gt; pattern match on -ed/-ing).<br>&gt;&gt;<br>&gt;&gt; On Thu, Jun 16, 2016 at 5:51 PM, David Waite via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I’ve always considered the term of art argument to be at least partially<br>&gt;&gt;&gt; a red herring.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; These methods are difficult because you don’t have guarantees of<br>&gt;&gt;&gt; non-mutability until you get to Collection - on Sequence, a dropFirst<br>&gt;&gt;&gt; method may mean that neither the original nor returned sequence can address<br>&gt;&gt;&gt; that item anymore. Names have to indicate that a Sequence may or may not<br>&gt;&gt;&gt; consume an item.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It makes me wonder if we should evaluate doing something more<br>&gt;&gt;&gt; aggressive, such as eliminating the support of one-time/destructive<br>&gt;&gt;&gt; Sequences completely.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -DW<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jun 16, 2016, at 8:45 AM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; on Thu Jun 16 2016, Jonathan Hull &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; …Thus, I don’t really see the harm in renaming these to match the rest<br>&gt;&gt;&gt; &gt;&gt; of Swift.  It won’t cause any confusion that can’t be easily recovered<br>&gt;&gt;&gt; &gt;&gt; from.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I&#39;m beginning to think you may be right.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt; &gt; -Dave<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/e65a5f4f/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines: dropFirst?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 17, 2016 at 03:00:00pm</p></header><div class="content"><p>on Thu Jun 16 2016, David Waite &lt;david-AT-alkaline-solutions.com&gt; wrote:<br></p><p>&gt; I’ve always considered the term of art argument to be at least partially a red herring.<br>&gt;<br>&gt; These methods are difficult because you don’t have guarantees of<br>&gt; non-mutability until you get to Collection - on Sequence, a dropFirst<br>&gt; method may mean that neither the original nor returned sequence can<br>&gt; address that item anymore. Names have to indicate that a Sequence may<br>&gt; or may not consume an item.<br>&gt;<br>&gt; It makes me wonder if we should evaluate doing something more<br>&gt; aggressive, such as eliminating the support of one-time/destructive<br>&gt; Sequences completely.<br></p><p>That is something I&#39;ve been considering, too.  Another possibile<br>approach, though I admit I don&#39;t really understand how this one plays<br>out yet, would be to break the refinement relationship between Sequence<br>and Collection.<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
