<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5db80630abdbef749e968ed6efd7cfe9?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>jazzbox)</string> &lt;jazzbox at 7zz.de (Bernd Ohr&gt;<p>April  6, 2016 at 09:00:00am</p></header><div class="content"><p>I am using a typealias for this:<br></p><p>struct MyStruct {<br>    private typealias _Self = MyStruct<br></p><p>    static func staticMethod() { print(&quot;staticMethod&quot;) }<br>        <br>    func instanceMethod() {<br>        _Self.staticMethod()<br>    }<br>}<br></p><p><br></p><p>&gt; &gt; On Apr 5, 2016, at 4:17 PM, Timothy Wood&lt;tjw at me.com(mailto:tjw at me.com)&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; On Apr 5, 2016, at 3:04 PM, Joe Groff via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; What you&#39;re describing should be spelled `Self`, IMO. I think Tim intended `#Self` to mean the *static* type the code is declared inside (which is the same as Self unless you&#39;re in a class).<br>&gt; &gt; <br>&gt; &gt; Yes, that is what I was aiming for. `#Self` would be a pretty much textual replacement just like #file, etc. That is, I could imaging it being used in a bunch of cases (not useful here, but just intending to enumerate the possible uses I see):<br>&gt; Please check to ensure that the changes I just made match your expectations:<br>&gt; <br>&gt; https://gist.github.com/erica/c60c7d51809889f3dfd47cdb482d6227<br>&gt; <br>&gt; -- E<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>April  6, 2016 at 10:00:00am</p></header><div class="content"><p>+1 for Self and the proposal.<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Bernd Ohr (jazzbox) via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 06.04.2016, o godz. 09:11:<br>&gt; <br>&gt; I am using a typealias for this:<br>&gt; <br>&gt; struct MyStruct {<br>&gt;    private typealias _Self = MyStruct<br>&gt; <br>&gt;    static func staticMethod() { print(&quot;staticMethod&quot;) }<br>&gt; <br>&gt;    func instanceMethod() {<br>&gt;        _Self.staticMethod()<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Apr 5, 2016, at 4:17 PM, Timothy Wood&lt;tjw at me.com(mailto:tjw at me.com)&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 5, 2016, at 3:04 PM, Joe Groff via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt;&gt;&gt;&gt; What you&#39;re describing should be spelled `Self`, IMO. I think Tim intended `#Self` to mean the *static* type the code is declared inside (which is the same as Self unless you&#39;re in a class).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, that is what I was aiming for. `#Self` would be a pretty much textual replacement just like #file, etc. That is, I could imaging it being used in a bunch of cases (not useful here, but just intending to enumerate the possible uses I see):<br>&gt;&gt; Please check to ensure that the changes I just made match your expectations:<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/erica/c60c7d51809889f3dfd47cdb482d6227<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160406/a2070796/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>April  6, 2016 at 11:00:00am</p></header><div class="content"><p>I think I would be -1 on this.<br></p><p>The proposal is that there be two names, Self and self that refer to different objects but are differentiated only by the capitalisation of the first letter and these could be mixed in the same context. <br></p><p>I think this would make code that uses both harder to read. If typing ‘self.dynamicType’ is too onerous, how about shortening it in a different way? Why, for instance is ‘self.&#39; mandatory? Alternatively, why is it ‘dynamicType’ and not just ‘type’?<br></p><p>&gt; On 6 Apr 2016, at 10:51, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for Self and the proposal.<br>&gt; <br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Bernd Ohr (jazzbox) via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 06.04.2016, o godz. 09:11:<br>&gt;&gt; <br>&gt;&gt; I am using a typealias for this:<br>&gt;&gt; <br>&gt;&gt; struct MyStruct {<br>&gt;&gt;    private typealias _Self = MyStruct<br>&gt;&gt; <br>&gt;&gt;    static func staticMethod() { print(&quot;staticMethod&quot;) }<br>&gt;&gt; <br>&gt;&gt;    func instanceMethod() {<br>&gt;&gt;        _Self.staticMethod()<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 5, 2016, at 4:17 PM, Timothy Wood&lt;tjw at me.com(mailto:tjw at me.com)&gt;wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 5, 2016, at 3:04 PM, Joe Groff via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; What you&#39;re describing should be spelled `Self`, IMO. I think Tim intended `#Self` to mean the *static* type the code is declared inside (which is the same as Self unless you&#39;re in a class).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes, that is what I was aiming for. `#Self` would be a pretty much textual replacement just like #file, etc. That is, I could imaging it being used in a bunch of cases (not useful here, but just intending to enumerate the possible uses I see):<br>&gt;&gt;&gt; Please check to ensure that the changes I just made match your expectations:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/erica/c60c7d51809889f3dfd47cdb482d6227<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Adding a Self type name shortcut for static member access</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  6, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; Alternatively, why is it ‘dynamicType’ and not just ‘type’?<br></p><p>I suspect this has something to do with the 27 methods in various OS X frameworks named `type`. (To be fair, 17 of those are in WebKit&#39;s DOM classes.)<br></p><p>What I&#39;m less sure about is why it&#39;s not a free function instead. Other than the `dynamicType` and `self` pseudo-properties, I&#39;m not aware of any members which are present on all types. We might be better off making `dynamicType` a free `typeof(_:)` function (or should it be `type(of:)`? are `sizeof` and friends changing?) and `self` a free `identity(_:)` function; these would make them non-magical parts of the language, which would be kind of neat.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
