<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/<br>0086-drop-foundation-ns.md&gt;<br></p><p>+1 to dropping the NS prefix; type names are more readable. However:<br></p><p>* AppKit, CoreData, and TextKit will still use the NS prefix.<br>* Prefixed names (in all frameworks) are more &quot;googleable&quot;.<br>* Should deprecated types (e.g. NSMessagePort) keep the prefix?<br></p><p>+1 to using nested enums/options; it will make method signatures shorter.<br></p><p>You could also have a nested RunLoop.Timer class (cf. CFRunLoopTimer) and<br>move your experimental `scheduledTimer` method to the RunLoop class.<br></p><p>Will top-level constants/functions also be nested? For example:<br></p><p>* SE-0033: Import Objective-C Constants as Swift Types<br>* SE-0044: Import as Member<br></p><p>Missing from the &quot;Drop NS prefix&quot; list:<br></p><p>* NSBinarySearchingOptions<br>* NSCopying, NSMutableCopying<br>* NSDirectoryEnumerator<br>* NSEnumerationOptions<br>* NSEnumerator<br>* NSExpression<br>* NSNull<br>* NSSecureCoding<br>* NSSortOptions<br></p><p>Missing from the &quot;Hoisted types&quot; list:<br></p><p>* NSAffineTransformStruct<br>* NSDateComponentsFormatterUnitsStyle<br>* NSDateComponentsFormatterZeroFormattingBehavior<br>* NSRoundingMode<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 11:11 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/<br>&gt; 0086-drop-foundation-ns.md&gt;<br>&gt; <br>&gt; +1 to dropping the NS prefix; type names are more readable. However:<br>&gt; <br>&gt; * AppKit, CoreData, and TextKit will still use the NS prefix.<br>&gt; * Prefixed names (in all frameworks) are more &quot;googleable&quot;.<br>&gt; * Should deprecated types (e.g. NSMessagePort) keep the prefix?<br>&gt; <br>&gt; +1 to using nested enums/options; it will make method signatures shorter.<br>&gt; <br>&gt; You could also have a nested RunLoop.Timer class (cf. CFRunLoopTimer) and<br>&gt; move your experimental `scheduledTimer` method to the RunLoop class.<br>&gt; <br>&gt; Will top-level constants/functions also be nested? For example:<br>&gt; <br>&gt; * SE-0033: Import Objective-C Constants as Swift Types<br>&gt; * SE-0044: Import as Member<br>&gt; <br>&gt; Missing from the &quot;Drop NS prefix&quot; list:<br>&gt; <br>&gt; * NSBinarySearchingOptions<br>&gt; * NSCopying, NSMutableCopying<br></p><p>The reasoning behind these keeping NS is that almost all of the mutable copying items have a correlative structural type; e.g. Data, Array, Dictionary, Set etc.<br></p><p>&gt; * NSDirectoryEnumerator<br></p><p>NSDirectoryEnumerator is going to be hoisted into FileManager.DirectoryEnumerator (I think the proposal may have missed this one)<br></p><p>&gt; * NSEnumerationOptions<br>&gt; * NSEnumerator<br></p><p>NSEnumerator is used to enumerate the NS collections of references<br></p><p>&gt; * NSExpression<br></p><p>This is very tied to KVC and reference collections<br></p><p>&gt; * NSNull<br></p><p>Not really applicable in swift since you can have an array of options etc.<br></p><p>&gt; * NSSecureCoding<br>&gt; * NSSortOptions<br>&gt; <br>&gt; Missing from the &quot;Hoisted types&quot; list:<br>&gt; <br>&gt; * NSAffineTransformStruct<br></p><p>This one is actually being renamed a bit differently; it will be called AffineTransform to the counterpart reference type NSAffineTransform<br></p><p>&gt; * NSDateComponentsFormatterUnitsStyle<br></p><p>This is missing from the proposal and should be listed as DateComponentsFormatter.UnitsStyle<br></p><p>&gt; * NSDateComponentsFormatterZeroFormattingBehavior<br></p><p>This is missing from the proposal and should be listed as DateComponentsFormatter.ZeroFormattingBehavior<br></p><p>&gt; * NSRoundingMode<br></p><p>This is missing from the proposal and should be listed as Decimal.RoundingMode<br></p><p>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>The others I need to follow up on with Tony to determine if they need better refinements.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 12:48 PM, Philippe Hausler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 10, 2016, at 11:11 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/<br>&gt;&gt; 0086-drop-foundation-ns.md&gt;<br>&gt;&gt; <br>&gt;&gt; +1 to dropping the NS prefix; type names are more readable. However:<br>&gt;&gt; <br>&gt;&gt; * AppKit, CoreData, and TextKit will still use the NS prefix.<br>&gt;&gt; * Prefixed names (in all frameworks) are more &quot;googleable&quot;.<br>&gt;&gt; * Should deprecated types (e.g. NSMessagePort) keep the prefix?<br>&gt;&gt; <br>&gt;&gt; +1 to using nested enums/options; it will make method signatures shorter.<br>&gt;&gt; <br>&gt;&gt; You could also have a nested RunLoop.Timer class (cf. CFRunLoopTimer) and<br>&gt;&gt; move your experimental `scheduledTimer` method to the RunLoop class.<br>&gt;&gt; <br>&gt;&gt; Will top-level constants/functions also be nested? For example:<br>&gt;&gt; <br>&gt;&gt; * SE-0033: Import Objective-C Constants as Swift Types<br>&gt;&gt; * SE-0044: Import as Member<br>&gt;&gt; <br>&gt;&gt; Missing from the &quot;Drop NS prefix&quot; list:<br>&gt;&gt; <br>&gt;&gt; * NSBinarySearchingOptions<br></p><p>More corrections: this will drop it’s NS<br></p><p>&gt;&gt; * NSCopying, NSMutableCopying<br>&gt; <br>&gt; The reasoning behind these keeping NS is that almost all of the mutable copying items have a correlative structural type; e.g. Data, Array, Dictionary, Set etc.<br>&gt; <br>&gt;&gt; * NSDirectoryEnumerator<br>&gt; <br>&gt; NSDirectoryEnumerator is going to be hoisted into FileManager.DirectoryEnumerator (I think the proposal may have missed this one)<br>&gt; <br>&gt;&gt; * NSEnumerationOptions<br></p><p>As will this.<br></p><p>&gt;&gt; * NSEnumerator<br>&gt; <br>&gt; NSEnumerator is used to enumerate the NS collections of references<br>&gt; <br>&gt;&gt; * NSExpression<br>&gt; <br>&gt; This is very tied to KVC and reference collections<br>&gt; <br>&gt;&gt; * NSNull<br>&gt; <br>&gt; Not really applicable in swift since you can have an array of options etc.<br>&gt; <br>&gt;&gt; * NSSecureCoding<br></p><p>This was an oversight and should have it’s prefix dropped as well.<br></p><p>&gt;&gt; * NSSortOptions<br></p><p>NSSortOptions  also will shed it’s prefix<br></p><p>&gt;&gt; <br>&gt;&gt; Missing from the &quot;Hoisted types&quot; list:<br>&gt;&gt; <br>&gt;&gt; * NSAffineTransformStruct<br>&gt; <br>&gt; This one is actually being renamed a bit differently; it will be called AffineTransform to the counterpart reference type NSAffineTransform<br>&gt; <br>&gt;&gt; * NSDateComponentsFormatterUnitsStyle<br>&gt; <br>&gt; This is missing from the proposal and should be listed as DateComponentsFormatter.UnitsStyle<br>&gt; <br>&gt;&gt; * NSDateComponentsFormatterZeroFormattingBehavior<br>&gt; <br>&gt; This is missing from the proposal and should be listed as DateComponentsFormatter.ZeroFormattingBehavior<br>&gt; <br>&gt;&gt; * NSRoundingMode<br>&gt; <br>&gt; This is missing from the proposal and should be listed as Decimal.RoundingMode<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- Ben<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; The others I need to follow up on with Tony to determine if they need better refinements.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f422e3eb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
