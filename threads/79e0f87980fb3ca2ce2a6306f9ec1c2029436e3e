<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fda162b7805f56b22d58a90236a3583a?s=50"></div><header><strong>Suppress unused result warnings on try? if attempted statement does not return</strong> from <string>Jonathan Cotton</string> &lt;joncotton at icloud.com&gt;<p>June 17, 2016 at 12:00:00pm</p></header><div class="content"><p>I propose that the compiler warnings for unused results are removed from try? if the statement being ‘tried’ does not return itself. This is inline with how try works and although try? does have a possible return value itself (nil) the warning isn’t adding/helping any if the result is either going to be nil or void.<br></p><p>When try? is used in this way, it is essentially the caller saying they don’t care if the operation fails and any consequences of that failure will be handled later on.<br></p><p>I have a slightly contrived example here on gist of where this could be useful https://gist.github.com/joncottonskyuk/abc6caad8be137193d4e1e58cc8d2e06<br></p><p>basically, in the person model, I don’t always care if the emailAddress is set, but in some cases I do, to differentiate between the two use cases, the caller can choose to use either try when they do care and want to handle the specific error, or try? if they don’t care about the failure and just want to carry on with the usual execution path.<br></p><p>The alternative is to just leave this as it is and the caller must then use _ = try? … to suppress the warnings. However, whilst _ = is very useful for suppressing this warning in most cases, as it shows intent for future maintainers of the code, in this case I don’t think it really adds any value. If the statement being attempted does not return itself then you are left with no choice but to assign to nothing to suppress the warning as opposed to assigning to some local reference and then just throwing that away.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Suppress unused result warnings on try? if attempted statement does not return</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 17, 2016 at 01:00:00pm</p></header><div class="content"><p>+1. The required _ = try? on what used to be a BOOL result in ObjC is incredibly annoying, mostly with NSXML* classes on OS X where you really don&#39;t care about the error 99% of the time, but care just about the result (nodesForXPath, etc).<br></p><p>&gt; On Jun 17, 2016, at 1:04 PM, Jonathan Cotton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I propose that the compiler warnings for unused results are removed from try? if the statement being ‘tried’ does not return itself. This is inline with how try works and although try? does have a possible return value itself (nil) the warning isn’t adding/helping any if the result is either going to be nil or void.<br>&gt; <br>&gt; When try? is used in this way, it is essentially the caller saying they don’t care if the operation fails and any consequences of that failure will be handled later on.<br>&gt; <br>&gt; I have a slightly contrived example here on gist of where this could be useful https://gist.github.com/joncottonskyuk/abc6caad8be137193d4e1e58cc8d2e06<br>&gt; <br>&gt; basically, in the person model, I don’t always care if the emailAddress is set, but in some cases I do, to differentiate between the two use cases, the caller can choose to use either try when they do care and want to handle the specific error, or try? if they don’t care about the failure and just want to carry on with the usual execution path.<br>&gt; <br>&gt; The alternative is to just leave this as it is and the caller must then use _ = try? … to suppress the warnings. However, whilst _ = is very useful for suppressing this warning in most cases, as it shows intent for future maintainers of the code, in this case I don’t think it really adds any value. If the statement being attempted does not return itself then you are left with no choice but to assign to nothing to suppress the warning as opposed to assigning to some local reference and then just throwing that away.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Suppress unused result warnings on try? if attempted statement does not return</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 17, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; The required _ = try? on what used to be a BOOL result in ObjC is incredibly annoying, mostly with NSXML* classes on OS X where you really don&#39;t care about the error 99% of the time, but care just about the result (nodesForXPath, etc).<br></p><p>Are you in control of the XPath strings? If so, you should probably be using `try!`, because any mistake in your queries would be a programmer error.<br></p><p>I&#39;m also not sure why you would call `nodes(forXPath:)` in void context at all—it doesn&#39;t have any useful side effects.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Suppress unused result warnings on try? if attempted statement does not return</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 17, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 17, 2016, at 1:20 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; The required _ = try? on what used to be a BOOL result in ObjC is incredibly annoying, mostly with NSXML* classes on OS X where you really don&#39;t care about the error 99% of the time, but care just about the result (nodesForXPath, etc).<br>&gt; <br>&gt; Are you in control of the XPath strings? If so, you should probably be using `try!`, because any mistake in your queries would be a programmer error.<br></p><p>I might be, but I&#39;ve come across XMLs where the XPaths were correct (confirmed), yet the nodes(forXPath:) failed with an error. Mostly when multiple namespaces were present.<br></p><p>&gt; I&#39;m also not sure why you would call `nodes(forXPath:)` in void context at all—it doesn&#39;t have any useful side effects.<br></p><p>Sorry, this is my fault, kind of got side-tracked since I&#39;ve recently dealt quite a lot with XML and it was freshly in my mind.<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
