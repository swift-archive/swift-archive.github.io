<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9565ff81dfe9a664c36d487d7cd2eae?s=50"></div><header><strong>Optional assignment operator</strong> from <string>Jose Manuel Sánchez Peñarroja</string> &lt;josema at vitaminew.com&gt;<p>May 12, 2016 at 03:00:00pm</p></header><div class="content"><p>Sorry if this has already been discussed, if so I couldn’t find it.<br></p><p>I would like to propose to add to Swift an optional assignment operator ?=<br>I think this would nicely align with the other uses of ?, and avoid repetition in this case:<br></p><p>	var value = 5<br></p><p>	var possibleNewValue: Int? = nil<br></p><p>	value = possibleNewValue ?? value<br></p><p>It would be used like this:<br></p><p>	value ?= possibleNewValue<br></p><p>I’ve found quite a few cases in which this would be very useful to me. It is already possible to implement it, but having it defined in the standard library would define an standard, and prevent different semantics depending on who implements it.<br></p><p><br>	infix operator ?= {<br>  	  associativity right<br> 	   precedence 90<br> 	   assignment<br>	}<br></p><p>	func ?= &lt;T&gt;(inout lhs: T, rhs: T?) {<br>	    lhs = rhs ?? lhs<br>	}<br></p><p><br>Regards,<br>José Manuel Sanchez<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Optional assignment operator</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>May 13, 2016 at 12:00:00am</p></header><div class="content"><p>I’m tentatively supportive of this proposal. I definitely see the use case (assign only if not not nil).  Interested to hear the opinions of others here :)<br></p><p>-Rod<br></p><p><br>&gt; On 12 May 2016, at 11:59 PM, Jose Manuel Sánchez Peñarroja via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry if this has already been discussed, if so I couldn’t find it.<br>&gt; <br>&gt; I would like to propose to add to Swift an optional assignment operator ?=<br>&gt; I think this would nicely align with the other uses of ?, and avoid repetition in this case:<br>&gt; <br>&gt; 	var value = 5<br>&gt; <br>&gt; 	var possibleNewValue: Int? = nil<br>&gt; <br>&gt; 	value = possibleNewValue ?? value<br>&gt; <br>&gt; It would be used like this:<br>&gt; <br>&gt; 	value ?= possibleNewValue<br>&gt; <br>&gt; I’ve found quite a few cases in which this would be very useful to me. It is already possible to implement it, but having it defined in the standard library would define an standard, and prevent different semantics depending on who implements it.<br>&gt; <br>&gt; <br>&gt; 	infix operator ?= {<br>&gt;  	  associativity right<br>&gt; 	   precedence 90<br>&gt; 	   assignment<br>&gt; 	}<br>&gt; <br>&gt; 	func ?= &lt;T&gt;(inout lhs: T, rhs: T?) {<br>&gt; 	    lhs = rhs ?? lhs<br>&gt; 	}<br>&gt; <br>&gt; <br>&gt; Regards,<br>&gt; José Manuel Sanchez<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>Optional assignment operator</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>May 12, 2016 at 10:00:00am</p></header><div class="content"><p>This same operator (except spelled as ??=) was up as a proposal and<br>rejected in February. See<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/7694.<br></p><p>On Thu, May 12, 2016 at 10:41 AM, Rod Brown via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m tentatively supportive of this proposal. I definitely see the use case<br>&gt; (assign only if not not nil).  Interested to hear the opinions of others<br>&gt; here :)<br>&gt;<br>&gt; -Rod<br>&gt;<br>&gt;<br>&gt; &gt; On 12 May 2016, at 11:59 PM, Jose Manuel Sánchez Peñarroja via<br>&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Sorry if this has already been discussed, if so I couldn’t find it.<br>&gt; &gt;<br>&gt; &gt; I would like to propose to add to Swift an optional assignment operator<br>&gt; ?=<br>&gt; &gt; I think this would nicely align with the other uses of ?, and avoid<br>&gt; repetition in this case:<br>&gt; &gt;<br>&gt; &gt;       var value = 5<br>&gt; &gt;<br>&gt; &gt;       var possibleNewValue: Int? = nil<br>&gt; &gt;<br>&gt; &gt;       value = possibleNewValue ?? value<br>&gt; &gt;<br>&gt; &gt; It would be used like this:<br>&gt; &gt;<br>&gt; &gt;       value ?= possibleNewValue<br>&gt; &gt;<br>&gt; &gt; I’ve found quite a few cases in which this would be very useful to me.<br>&gt; It is already possible to implement it, but having it defined in the<br>&gt; standard library would define an standard, and prevent different semantics<br>&gt; depending on who implements it.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;       infix operator ?= {<br>&gt; &gt;         associativity right<br>&gt; &gt;          precedence 90<br>&gt; &gt;          assignment<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt;       func ?= &lt;T&gt;(inout lhs: T, rhs: T?) {<br>&gt; &gt;           lhs = rhs ?? lhs<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Regards,<br>&gt; &gt; José Manuel Sanchez<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/78bf88bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/18be32aa5ee2c4aa6ba2f23cf6ac42f7?s=50"></div><header><strong>Optional assignment operator</strong> from <string>Tod Cunningham</string> &lt;tcunningham at vectorform.com&gt;<p>May 12, 2016 at 09:00:00pm</p></header><div class="content"><p>I ended up creating a ??= operator about a month ago to do something very similar.  It’s a shame it won’t be made part of the official library.  Although, it is very easy to add.<br></p><p><br>Just like the ?? operator the default value is only evaluated if the optional in nil.  However, unlike ?? it will<br></p><p>change the optional to be equal to the value on the right, iff the optional was nil.<br></p><p><br>infix operator ??= {<br></p><p>    associativity right<br></p><p>    precedence 90<br></p><p>    assignment<br></p><p>}<br></p><p><br>public func ??=&lt;VALUE&gt;(inout optional: VALUE?, @autoclosure defaultValue: () throws -&gt; VALUE) rethrows -&gt; VALUE {<br></p><p>    if let value = optional {<br></p><p>        return value<br></p><p>    } else {<br></p><p>        let value = try defaultValue()<br></p><p>        optional = value<br></p><p>        return value<br></p><p>    }<br></p><p>}<br></p><p><br>- Tod<br></p><p>From: &lt;swift-evolution-bounces at swift.org&lt;mailto:swift-evolution-bounces at swift.org&gt;&gt; on behalf of Trent Nadeau via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Reply-To: Trent Nadeau &lt;tanadeau at gmail.com&lt;mailto:tanadeau at gmail.com&gt;&gt;<br>Date: Thursday, May 12, 2016 at 10:52 AM<br>To: Rod Brown &lt;rodney.brown6 at icloud.com&lt;mailto:rodney.brown6 at icloud.com&gt;&gt;<br>Cc: Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Optional assignment operator<br></p><p>This same operator (except spelled as ??=) was up as a proposal and rejected in February. See http://thread.gmane.org/gmane.comp.lang.swift.evolution/7694.<br></p><p>On Thu, May 12, 2016 at 10:41 AM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>I’m tentatively supportive of this proposal. I definitely see the use case (assign only if not not nil).  Interested to hear the opinions of others here :)<br></p><p>-Rod<br></p><p><br>&gt; On 12 May 2016, at 11:59 PM, Jose Manuel Sánchez Peñarroja via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt; Sorry if this has already been discussed, if so I couldn’t find it.<br>&gt;<br>&gt; I would like to propose to add to Swift an optional assignment operator ?=<br>&gt; I think this would nicely align with the other uses of ?, and avoid repetition in this case:<br>&gt;<br>&gt;       var value = 5<br>&gt;<br>&gt;       var possibleNewValue: Int? = nil<br>&gt;<br>&gt;       value = possibleNewValue ?? value<br>&gt;<br>&gt; It would be used like this:<br>&gt;<br>&gt;       value ?= possibleNewValue<br>&gt;<br>&gt; I’ve found quite a few cases in which this would be very useful to me. It is already possible to implement it, but having it defined in the standard library would define an standard, and prevent different semantics depending on who implements it.<br>&gt;<br>&gt;<br>&gt;       infix operator ?= {<br>&gt;         associativity right<br>&gt;          precedence 90<br>&gt;          assignment<br>&gt;       }<br>&gt;<br>&gt;       func ?= &lt;T&gt;(inout lhs: T, rhs: T?) {<br>&gt;           lhs = rhs ?? lhs<br>&gt;       }<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt; José Manuel Sanchez<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>--<br>Trent Nadeau<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Optional assignment operator</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 12, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 2:38 PM, Tod Cunningham via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I ended up creating a ??= operator about a month ago to do something very similar.  It’s a shame it won’t be made part of the official library.  Although, it is very easy to add.<br>&gt; <br>&gt; <br>&gt; Just like the ?? operator the default value is only evaluated if the optional in nil.  However, unlike ?? it will<br>&gt; <br>&gt; change the optional to be equal to the value on the right, iff the optional was nil.<br></p><p>We formally discussed &amp; rejected this already:<br>http://article.gmane.org/gmane.comp.lang.swift.evolution/7694<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Optional assignment operator</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 13, 2016 at 11:00:00am</p></header><div class="content"><p>Yeah, as previously discussed you’d usually be better doing something like:<br></p><p>	struct Foo {<br>		var value:Int?<br></p><p>		func someMethod() {<br>			let value = self.value ?? 0 // This is no longer optional<br>			…<br>		}<br>	}<br></p><p>Since you end up with a non-optional version to work with, which this operator wouldn’t do (requiring you to unwrap it to use it anyway). To make the operator be as useful it would have to implicitly shadow the variable that it’s being assigned to, which would be strange and require some syntax of its own to be clear; in effect the ?? operator already has all the information you need as shown above, it’s a little longer but it’s more self-documenting so I think it covers the use-cases of an optional assignment pretty well.<br></p><p>&gt; On 12 May 2016, at 23:12, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 12, 2016, at 2:38 PM, Tod Cunningham via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I ended up creating a ??= operator about a month ago to do something very similar.  It’s a shame it won’t be made part of the official library.  Although, it is very easy to add.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Just like the ?? operator the default value is only evaluated if the optional in nil.  However, unlike ?? it will<br>&gt;&gt; <br>&gt;&gt; change the optional to be equal to the value on the right, iff the optional was nil.<br>&gt; <br>&gt; We formally discussed &amp; rejected this already:<br>&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/7694<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/0b942d50/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
