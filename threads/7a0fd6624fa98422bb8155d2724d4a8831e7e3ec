<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/939ca2785b6433f7a73992ae2ff6d736?s=50"></div><header><strong>[pre-proposal] Automatic unwrapper boolean properties using unless keyword</strong> from <string>Guilherme Torres Castro</string> &lt;guilherme.torres.castro at gmail.com&gt;<p>March 31, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>This is a Idea I got from Objetive-C, where nil is evaluate no false, this<br>feature can keep the code clean. For example:<br></p><p>if (![myList isEmpty]) { ... }<br></p><p>Will evaluate true or false even if myList is nil.<br>I know that Swift is not Design to work like Objetive-C, but sometimes this<br>make the code cleaner.<br></p><p>Example:<br></p><p>if !myList?.isEmpty { print(&quot;Ok&quot;) }<br></p><p>This is much more cleaner and easy to read than:<br></p><p>if !(myList != nill &amp;&amp; mylist!.isEmpty) { print(&quot;Ok&quot;) }<br></p><p>Moreover the tip from the Xcode (when you type the  lead user to generate<br>wrong code when you type this code :<br></p><p>if !((myList?.isEmpty)) != nil { print(&quot;Ok&quot;) }<br></p><p>As you can see the suggestion made by the Xcode will not work, because<br>event if the list is empty the expression will return true.<br></p><p>My ideia is to use some special syntax that permit optional to be evaluate<br>to boolean expression. Those syntax may be like in ruby<br>&lt;http://www.tutorialspoint.com/ruby/ruby_if_else.htm&gt;.<br></p><p>code if condition<br></p><p>So the code from the example will be:<br></p><p>print (&quot;Ok&quot;) if !myList?.isEmpty<br></p><p>Or using the unless keyword:<br></p><p>unless myList?.isEmpty print(&quot;not empty&quot;) else print &quot;empty&quot;<br></p><p><br>I didn&#39;t spent much time thinking about the syntax keyword, because I want<br>to know first if you will consider a great addition to the language, if so,<br>we can work on details and a formal proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/7a0fe3ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[pre-proposal] Automatic unwrapper boolean properties using unless keyword</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>March 31, 2016 at 05:00:00pm</p></header><div class="content"><p>What I often do is use ?? to provide a default (usually false).<br></p><p>if myList?.isEmpty ?? false {<br>    print(“Empty”)<br>} else {<br>    print(“Not empty”)<br>}<br></p><p>The other thing you can do, of course, is to use a ‘where’ statement:<br></p><p>if let list = myList where list.isEmpty {<br>    print(“Empty”)<br>} else {<br>    print(“Not empty”)<br>}<br></p><p>Charles<br></p><p>&gt; On Mar 31, 2016, at 4:54 PM, Guilherme Torres Castro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; This is a Idea I got from Objetive-C, where nil is evaluate no false, this feature can keep the code clean. For example:<br>&gt; <br>&gt; if (![myList isEmpty]) { ... }<br>&gt; Will evaluate true or false even if myList is nil.<br>&gt; I know that Swift is not Design to work like Objetive-C, but sometimes this make the code cleaner.  <br>&gt; <br>&gt; Example:<br>&gt; if !myList?.isEmpty { print(&quot;Ok&quot;) }<br>&gt; This is much more cleaner and easy to read than:<br>&gt; <br>&gt; if !(myList != nill &amp;&amp; mylist!.isEmpty) { print(&quot;Ok&quot;) }<br>&gt; Moreover the tip from the Xcode (when you type the  lead user to generate wrong code when you type this code :<br>&gt; <br>&gt; if !((myList?.isEmpty)) != nil { print(&quot;Ok&quot;) }<br>&gt; As you can see the suggestion made by the Xcode will not work, because event if the list is empty the expression will return true.<br>&gt; <br>&gt; My ideia is to use some special syntax that permit optional to be evaluate to boolean expression. Those syntax may be like in ruby &lt;http://www.tutorialspoint.com/ruby/ruby_if_else.htm&gt;. <br>&gt; <br>&gt; <br>&gt; code if condition<br>&gt; So the code from the example will be:<br>&gt; <br>&gt; print (&quot;Ok&quot;) if !myList?.isEmpty<br>&gt; Or using the unless keyword:<br>&gt; <br>&gt; unless myList?.isEmpty print(&quot;not empty&quot;) else print &quot;empty&quot;<br>&gt; <br>&gt; I didn&#39;t spent much time thinking about the syntax keyword, because I want to know first if you will consider a great addition to the language, if so, we can work on details and a formal proposal.<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/fe7b8cd5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[pre-proposal] Automatic unwrapper boolean properties using unless keyword</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>March 31, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 31, 2016, at 5:04 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What I often do is use ?? to provide a default (usually false).<br>&gt; <br>&gt; if myList?.isEmpty ?? false {<br>&gt;     print(“Empty”)<br>&gt; } else {<br>&gt;     print(“Not empty”)<br>&gt; }<br></p><p>That’s what I get for writing a reply quickly; in this particular case the default should probably be true, since you probably want to treat a nil list as empty.<br></p><p>if myList?.isEmpty ?? true {<br>    print(“Empty”)<br>} else {<br>    print(“Not empty”)<br>}<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/24d2480d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[pre-proposal] Automatic unwrapper boolean properties using unless keyword</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>March 31, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 31, 2016, at 3:54 PM, Guilherme Torres Castro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Example:<br>&gt; if !myList?.isEmpty { print(&quot;Ok&quot;) }<br></p><p>Swift originally had Optionals be boolean evaluable. Unfortunately, nil does not always mean false, and assuming so by default can mask issues. I believe there may have also been an issue with types being promoted to optional and then evaluated as true.<br></p><p>One option here is to use a new custom prefix operator to indicate you desire optional == false behavior. I chose “??” in the code below:<br></p><p>prefix operator ?? {}<br></p><p>prefix func ??(arg:Bool?) -&gt; Bool {<br>  return arg ?? false<br>}<br></p><p>let data:[String:Bool?] = [&quot;nil&quot;: nil, &quot;true&quot;: true, &quot;false&quot;: false]<br></p><p>for (key, value) in data {<br>  if ??value {<br>    print(key)<br>  }<br>} # prints true<br></p><p>I don’t think a negated form is as clear, since this is a shortcut for two checks. However, I wrote one for completeness:<br></p><p>prefix operator ‽‽ {}<br>prefix func ‽‽(arg:Bool?) -&gt; Bool {<br>  return !(arg ?? false)<br>}<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/a030d5e6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
