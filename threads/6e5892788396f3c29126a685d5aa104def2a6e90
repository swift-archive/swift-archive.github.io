<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December  5, 2015 at 10:00:00am</p></header><div class="content"><p>The current ternary operator, for this example: <br></p><p>let val = p == 5 ? 10 : 40               <br></p><p>Which I have always thought was hard to read but I do like the functionality it provides. That is, in one expression you can compactly get two different values based upon a condition. Swift seems to have adopted the C style ternary operators probably to not completly change everytihg. Similar to the drop of the ++ and -- operator I am proposing that there is to replace the ternary operator to improve readability but continue to provide that functionality.  <br></p><p>Recommendation: most readable but changes rules about if-else always having braces and puts the “if” at end. It is only a little bit longer than the original. I think it is clearer to have the conditional at the end so the assignment part is where the variable is assigned. This also does not introduce new keywords or operators. <br></p><p>let val = 10 else 40 if p == 5<br></p><p>In looking at the Nil-Coalescing operator there is a similar idea but it is really not the same. In that the left hand side of the ?? operator returns itself when non nil, and the behavior of the ternary operator is different. It is also harder to read. <br></p><p>let val = 10 ?? 40 if p = 5<br></p><p>I also considered a bunch of other possibilities like using “where&quot; or “when&quot; instead of “if”, the python of putting conditional in the middle or the ruby style of “if&quot; returning a value but did not like those. <br></p><p>// python style<br>let  val = 10 if p == 5 else 40 <br></p><p>// ruby style<br>let val = if p == 5 then 10 else 40  <br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/6e586e90/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>ternary operator ?: suggestion</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>Hmm… that is really interesting.  I wonder if we can use optionals to make this work in an elegant way.<br></p><p>Forget about else for a second.  What if there is an operation which says, this is either this value or nil based on whether it meets a condition?  Then else (and else if) can be handled by a combination of that operation and the nil-coelecing operator.<br></p><p>I once wrote a small DSL which had this behavior and it was really nice.<br></p><p>What about something like:<br></p><p>	let x = value if? condition<br></p><p>x would have value if condition evaluates to true, or it would be nil. If I wanted an else statement:<br></p><p>	let x = value if? condition ?? otherValue<br></p><p>Now it works just like the ternary operator, but is IMHO more readable.  Note: these can also be chained to give you else if style behavior:<br></p><p>	let x = value if? condition ?? otherValue if? otherCondition ?? evenMoreValue<br></p><p>You could optionally (ha!) put things in parentheses as well, which I always end up doing with the ternary:<br></p><p>	let x = (value if? condition) ?? (otherValue if? otherCondition) ?? evenMoreValue<br></p><p><br>Not a 100% there yet, but I do think it is a good start at something more elegant…<br></p><p>Thanks,<br>Jon<br></p><p><br></p><p>&gt; On Dec 5, 2015, at 10:29 AM, possen p &lt;possen at gmail.com&gt; wrote:<br>&gt; <br>&gt; The current ternary operator, for this example: <br>&gt; <br>&gt; let val = p == 5 ? 10 : 40               <br>&gt; <br>&gt; Which I have always thought was hard to read but I do like the functionality it provides. That is, in one expression you can compactly get two different values based upon a condition. Swift seems to have adopted the C style ternary operators probably to not completly change everytihg. Similar to the drop of the ++ and -- operator I am proposing that there is to replace the ternary operator to improve readability but continue to provide that functionality.  <br>&gt; <br>&gt; Recommendation: most readable but changes rules about if-else always having braces and puts the “if” at end. It is only a little bit longer than the original. I think it is clearer to have the conditional at the end so the assignment part is where the variable is assigned. This also does not introduce new keywords or operators. <br>&gt; <br>&gt; let val = 10 else 40 if p == 5<br>&gt; <br>&gt; In looking at the Nil-Coalescing operator there is a similar idea but it is really not the same. In that the left hand side of the ?? operator returns itself when non nil, and the behavior of the ternary operator is different. It is also harder to read. <br>&gt; <br>&gt; let val = 10 ?? 40 if p = 5<br>&gt; <br>&gt; I also considered a bunch of other possibilities like using “where&quot; or “when&quot; instead of “if”, the python of putting conditional in the middle or the ruby style of “if&quot; returning a value but did not like those. <br>&gt; <br>&gt; // python style<br>&gt; let  val = 10 if p == 5 else 40 <br>&gt; <br>&gt; // ruby style<br>&gt; let val = if p == 5 then 10 else 40  <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/b963b936/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
