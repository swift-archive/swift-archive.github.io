<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Pure/isUniquelyReferenced and C libraries</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>February  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Background<br>==========<br></p><p>I have recently been thinking about clang attributes and how we can take advantage of the work other people have done in terms of putting attributes in their headers especially in terms of ARC.<br></p><p>The two most pervasive such attributes are the const/pure attributes. Trivially the const attribute (since it can not read global memory) can not read or write reference counts. But what about pure? For those who are unfamiliar pure in &quot;c&quot; means that a function&#39;s value is only dependent on its arguments and reading global memory. Being able to only read global memory is an interesting property from the ARC perspective since there is only one ARC function that reads a reference count that is exported from the runtime, the uniqueness check. All other ways to read/write a reference count are either restricted to pure swift code or if they are allowed in C++ code write to reference counts. If we were able to say that it is undefined behavior to invoke isUniquelyReferenced from non-swift runtime functions, we immediately could get nice speed boosts when using imported c code that is pure without any further work on the maintainers part.<br></p><p>Proposal<br>=======<br></p><p>State that is is undefined behavior to reference isUniquelyReferenced in a non-swift function in 3rd party libraries.<br></p><p>Thoughts?<br>Michael<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/d0936194/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Pure/isUniquelyReferenced and C libraries</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>February  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 1:03 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Background<br>&gt; ==========<br>&gt; <br>&gt; I have recently been thinking about clang attributes and how we can take advantage of the work other people have done in terms of putting attributes in their headers especially in terms of ARC.<br>&gt; <br>&gt; The two most pervasive such attributes are the const/pure attributes. Trivially the const attribute (since it can not read global memory) can not read or write reference counts. But what about pure? For those who are unfamiliar pure in &quot;c&quot; means that a function&#39;s value is only dependent on its arguments and reading global memory. Being able to only read global memory is an interesting property from the ARC perspective since there is only one ARC function that reads a reference count that is exported from the runtime, the uniqueness check. All other ways to read/write a reference count are either restricted to pure swift code or if they are allowed in C++ code write to reference counts. If we were able to say that it is undefined behavior to invoke isUniquelyReferenced from non-swift runtime functions, we immediately could get nice speed boosts when using imported c code that is pure without any further work on the maintainers part.<br>&gt; <br>&gt; Proposal<br>&gt; =======<br>&gt; <br>&gt; State that is is undefined behavior to reference isUniquelyReferenced in a non-swift function in 3rd party libraries.<br></p><p>*NOTE* I am talking about the &quot;c&quot; attribute for pure, not the &quot;swift&quot; attribute (whatever that ends up being eventually).<br></p><p>&gt; <br>&gt; Thoughts?<br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/d59e8bdf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Pure/isUniquelyReferenced and C libraries</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>February  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Jordan and I have ben arguing about this over IM a little bit and reached a satisfactory solution. Additionally, turns out we are already doing this (I am not sure if the uniqueness check aspect was thought about).<br></p><p>Anyways, I am just going to close the discussion.<br></p><p>Michael<br></p><p>&gt; On Feb 2, 2016, at 1:09 PM, Michael Gottesman &lt;mgottesman at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 2, 2016, at 1:03 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Background<br>&gt;&gt; ==========<br>&gt;&gt; <br>&gt;&gt; I have recently been thinking about clang attributes and how we can take advantage of the work other people have done in terms of putting attributes in their headers especially in terms of ARC.<br>&gt;&gt; <br>&gt;&gt; The two most pervasive such attributes are the const/pure attributes. Trivially the const attribute (since it can not read global memory) can not read or write reference counts. But what about pure? For those who are unfamiliar pure in &quot;c&quot; means that a function&#39;s value is only dependent on its arguments and reading global memory. Being able to only read global memory is an interesting property from the ARC perspective since there is only one ARC function that reads a reference count that is exported from the runtime, the uniqueness check. All other ways to read/write a reference count are either restricted to pure swift code or if they are allowed in C++ code write to reference counts. If we were able to say that it is undefined behavior to invoke isUniquelyReferenced from non-swift runtime functions, we immediately could get nice speed boosts when using imported c code that is pure without any further work on the maintainers part.<br>&gt;&gt; <br>&gt;&gt; Proposal<br>&gt;&gt; =======<br>&gt;&gt; <br>&gt;&gt; State that is is undefined behavior to reference isUniquelyReferenced in a non-swift function in 3rd party libraries.<br>&gt; <br>&gt; *NOTE* I am talking about the &quot;c&quot; attribute for pure, not the &quot;swift&quot; attribute (whatever that ends up being eventually).<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; Michael<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/2df8983e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Pure/isUniquelyReferenced and C libraries</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Ha, oops, I shouldâ€™ve checked before sending my other reply.<br>&gt; On Feb 2, 2016, at 15:23, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Jordan and I have ben arguing about this over IM a little bit and reached a satisfactory solution. Additionally, turns out we are already doing this (I am not sure if the uniqueness check aspect was thought about).<br>&gt; <br>&gt; Anyways, I am just going to close the discussion.<br>&gt; <br>&gt; Michael<br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 1:09 PM, Michael Gottesman &lt;mgottesman at apple.com &lt;mailto:mgottesman at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 1:03 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Background<br>&gt;&gt;&gt; ==========<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have recently been thinking about clang attributes and how we can take advantage of the work other people have done in terms of putting attributes in their headers especially in terms of ARC.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The two most pervasive such attributes are the const/pure attributes. Trivially the const attribute (since it can not read global memory) can not read or write reference counts. But what about pure? For those who are unfamiliar pure in &quot;c&quot; means that a function&#39;s value is only dependent on its arguments and reading global memory. Being able to only read global memory is an interesting property from the ARC perspective since there is only one ARC function that reads a reference count that is exported from the runtime, the uniqueness check. All other ways to read/write a reference count are either restricted to pure swift code or if they are allowed in C++ code write to reference counts. If we were able to say that it is undefined behavior to invoke isUniquelyReferenced from non-swift runtime functions, we immediately could get nice speed boosts when using imported c code that is pure without any further work on the maintainers part.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal<br>&gt;&gt;&gt; =======<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; State that is is undefined behavior to reference isUniquelyReferenced in a non-swift function in 3rd party libraries.<br>&gt;&gt; <br>&gt;&gt; *NOTE* I am talking about the &quot;c&quot; attribute for pure, not the &quot;swift&quot; attribute (whatever that ends up being eventually).<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; Michael<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/88da603d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Pure/isUniquelyReferenced and C libraries</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>February  2, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 3:23 PM, Michael Gottesman &lt;mgottesman at apple.com&gt; wrote:<br>&gt; <br>&gt; Jordan and I have ben arguing about this over IM a little bit and reached a satisfactory solution. Additionally, turns out we are already doing this (I am not sure if the uniqueness check aspect was thought about).<br></p><p>To be clear, what I was referring to was that we are treating read only functions as not touching reference counts. Nothing more than that.<br></p><p>&gt; <br>&gt; Anyways, I am just going to close the discussion.<br>&gt; <br>&gt; Michael<br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 1:09 PM, Michael Gottesman &lt;mgottesman at apple.com &lt;mailto:mgottesman at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 1:03 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Background<br>&gt;&gt;&gt; ==========<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have recently been thinking about clang attributes and how we can take advantage of the work other people have done in terms of putting attributes in their headers especially in terms of ARC.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The two most pervasive such attributes are the const/pure attributes. Trivially the const attribute (since it can not read global memory) can not read or write reference counts. But what about pure? For those who are unfamiliar pure in &quot;c&quot; means that a function&#39;s value is only dependent on its arguments and reading global memory. Being able to only read global memory is an interesting property from the ARC perspective since there is only one ARC function that reads a reference count that is exported from the runtime, the uniqueness check. All other ways to read/write a reference count are either restricted to pure swift code or if they are allowed in C++ code write to reference counts. If we were able to say that it is undefined behavior to invoke isUniquelyReferenced from non-swift runtime functions, we immediately could get nice speed boosts when using imported c code that is pure without any further work on the maintainers part.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal<br>&gt;&gt;&gt; =======<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; State that is is undefined behavior to reference isUniquelyReferenced in a non-swift function in 3rd party libraries.<br>&gt;&gt; <br>&gt;&gt; *NOTE* I am talking about the &quot;c&quot; attribute for pure, not the &quot;swift&quot; attribute (whatever that ends up being eventually).<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; Michael<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/a09a8b53/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Pure/isUniquelyReferenced and C libraries</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Speedups are Very Good, but IMHO undefined behavior is Very Very Bad. How hard would it be for the compiler to detect this? If so, would it be possible to throw a warning or something and revert to the slower path if someone calls isUniquelyReferenced?<br></p><p>&gt; On Feb 2, 2016, at 13:03, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Background<br>&gt; ==========<br>&gt; <br>&gt; I have recently been thinking about clang attributes and how we can take advantage of the work other people have done in terms of putting attributes in their headers especially in terms of ARC.<br>&gt; <br>&gt; The two most pervasive such attributes are the const/pure attributes. Trivially the const attribute (since it can not read global memory) can not read or write reference counts. But what about pure? For those who are unfamiliar pure in &quot;c&quot; means that a function&#39;s value is only dependent on its arguments and reading global memory. Being able to only read global memory is an interesting property from the ARC perspective since there is only one ARC function that reads a reference count that is exported from the runtime, the uniqueness check. All other ways to read/write a reference count are either restricted to pure swift code or if they are allowed in C++ code write to reference counts. If we were able to say that it is undefined behavior to invoke isUniquelyReferenced from non-swift runtime functions, we immediately could get nice speed boosts when using imported c code that is pure without any further work on the maintainers part.<br>&gt; <br>&gt; Proposal<br>&gt; =======<br>&gt; <br>&gt; State that is is undefined behavior to reference isUniquelyReferenced in a non-swift function in 3rd party libraries.<br>&gt; <br>&gt; Thoughts?<br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/0b46f08a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
