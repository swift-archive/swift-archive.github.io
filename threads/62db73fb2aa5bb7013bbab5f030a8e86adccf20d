<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac24d28fde53d4a6f05a6dcbb781a002?s=50"></div><header><strong>Proposal: Enclosed variable in extension scope</strong> from <string>Nutchaphon Rewik</string> &lt;nRewik at outlook.com&gt;<p>December 14, 2015 at 03:00:00am</p></header><div class="content"><p>Extension is a powerful feature in Swift, allowing type extensibility in various way. However, there are some limitations that everyone has to cope with. We cannot add stored variables to extension scope. ( enclosed variable )<br></p><p><br>To workaround with the problem, associated object has been used so far by many Swift/Obj-c library that we are using today. This technique facilitates the power of extension. It allows extension to have enclosed stored property at runtime. However, we can only apply this method to NSObject subclass type. And I think it is some kind of hack, and when it comes to Swift the syntax looks messy.<br></p><p><br>So, I would like to propose an idea of storing variable inside extension scope. &#39;enclose&#39;, is a prefix keyword, stating that a variable is only visible inside an extension block scope.<br></p><p><br></p><p>?protocol Incrementor{<br></p><p>    func increase()<br></p><p>    func otherFunc()<br></p><p>}<br></p><p><br>extension Incrementor{<br></p><p><br></p><p>    /*<br></p><p>        enclose keyword only allow to be used in extension scope<br></p><p>    */<br></p><p>    enclose var count = 1 // count is visible only in this extension scope.<br></p><p><br></p><p>    func increase(){<br></p><p>        print(count)<br></p><p>        count = count + 1<br></p><p>    }<br></p><p>}<br></p><p><br>// another extension scope<br></p><p>extension Incrementor{<br></p><p><br></p><p>    // can&#39;t see &#39;count&#39; because it&#39;s in another extension scope.<br></p><p>    func otherFunc(){<br></p><p>        print(&quot;do whatever but you will not see &#39;count&#39; in this&quot;)<br></p><p>    }<br></p><p>}<br></p><p><br></p><p><br>This allows mixins composition style. It has no side-effect to other parts, and is considered to have better separation of concerns. Since we have protocol extension in Swift 2.0, this feature will empower composition scheme, and eliminates associated object hacking from Swift/Obj-c.<br></p><p><br>Think about rewriting massive view controller as extensions composition. We don&#39;t have to store all states of the view controller class in one place. We can separate it to multiple part, each part consists of it own states using enclose keyword.<br></p><p><br>I&#39;m pretty sure it will be very useful. So, I would like to ask the opinions of you guys about pros and cons of doing this. What might be an alternative solution? Is it consistent ?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/62dbf20d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: Enclosed variable in extension scope</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 13, 2015 at 09:00:00pm</p></header><div class="content"><p>You are proposing two things:<br></p><p>1. Allow stored properties in extensions.<br>2. Introduce an access modifier that restricts visibility to the current scope.<br></p><p>I know the first topic has been discussed quite a bit.  I believe some of that discussion has happened on the list.  You should be able to find it by searching the archives.<br></p><p>The second topic has also been discussed quite a bit and a proposal is being developed.  The thread for that topic is &quot;access control proposal”.<br></p><p>Matthew<br></p><p>&gt; On Dec 13, 2015, at 9:19 PM, Nutchaphon Rewik via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Extension is a powerful feature in Swift, allowing type extensibility in various way. However, there are some limitations that everyone has to cope with. We cannot add stored variables to extension scope. ( enclosed variable )<br>&gt; <br>&gt; To workaround with the problem, associated object has been used so far by many Swift/Obj-c library that we are using today. This technique facilitates the power of extension. It allows extension to have enclosed stored property at runtime. However, we can only apply this method to NSObject subclass type. And I think it is some kind of hack, and when it comes to Swift the syntax looks messy.<br>&gt; <br>&gt; So, I would like to propose an idea of storing variable inside extension scope. &#39;enclose&#39;, is a prefix keyword, stating that a variable is only visible inside an extension block scope.<br>&gt; <br>&gt; <br>&gt; ​protocol Incrementor{<br>&gt;     func increase()<br>&gt;     func otherFunc()<br>&gt; }<br>&gt; <br>&gt; extension Incrementor{<br>&gt;     <br>&gt;     /* <br>&gt;         enclose keyword only allow to be used in extension scope<br>&gt;     */<br>&gt;     enclose var count = 1 // count is visible only in this extension scope.<br>&gt;     <br>&gt;     func increase(){<br>&gt;         print(count)<br>&gt;         count = count + 1<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; // another extension scope<br>&gt; extension Incrementor{<br>&gt;     <br>&gt;     // can&#39;t see &#39;count&#39; because it&#39;s in another extension scope.<br>&gt;     func otherFunc(){<br>&gt;         print(&quot;do whatever but you will not see &#39;count&#39; in this&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; This allows mixins composition style. It has no side-effect to other parts, and is considered to have better separation of concerns. Since we have protocol extension in Swift 2.0, this feature will empower composition scheme, and eliminates associated object hacking from Swift/Obj-c. <br>&gt; <br>&gt; Think about rewriting massive view controller as extensions composition. We don&#39;t have to store all states of the view controller class in one place. We can separate it to multiple part, each part consists of it own states using enclose keyword.<br>&gt; <br>&gt; I&#39;m pretty sure it will be very useful. So, I would like to ask the opinions of you guys about pros and cons of doing this. What might be an alternative solution? Is it consistent ?<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151213/3d2bfc89/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
