<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 08:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md<br></p><p>Hello Swift Community,<br></p><p>The review of &quot;SE-0088: Modernize libdispatch for Swift 3 naming conventions&quot; ran from May 10…17, 2016. The proposal is *accepted with revisions* for Swift 3.<br></p><p>The community and core team are both very positive about this massive improvement to the libdispatch APIs.  Much of the discussion has centered around specific details in the proposal - for example the “.asynchronously” method on DispatchQueue.  This great discussion leads to several requested revisions in the proposal:<br></p><p>- Rename the DispatchQueue.[a]synchronously methods to &quot;.async” and &quot;.sync”, to follow the term of art.<br>- Rename DispatchIO setHighWater, setLowWater --&gt; setLimit(highWater:), setLimit(lowWater:)<br>- Rename setTargetQueue(queue:) and DispatchSource.setTimer <br>- Rename Semaphore, Group and WorkItem: .wait(timeout:) --&gt; wait() and wait(withTimeout:)<br>- Expand source handler methods to take the same arguments as async()<br>- Expand DispatchQueue.after to take the same arguments as async() in addition to the when: argument<br></p><p>Thank you to Matt Wright proposing this, and for all of the implementation work that has gone into this so far!<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 20, 2016 at 02:00:00pm</p></header><div class="content"><p>Great stuff! Truly is a massive improvement to an already venerable API.<br></p><p>Was there any consideration to make this a new module ‘Dispatch’, and drop all the Dispatch- prefixes? Or rather, what is the reason for keeping the prefixes? (Group could become WorkGroup to lessen naming conflicts)<br></p><p><br>&gt; On 20 May 2016, at 1:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md<br>&gt; <br>&gt; Hello Swift Community,<br>&gt; <br>&gt; The review of &quot;SE-0088: Modernize libdispatch for Swift 3 naming conventions&quot; ran from May 10…17, 2016. The proposal is *accepted with revisions* for Swift 3.<br>&gt; <br>&gt; The community and core team are both very positive about this massive improvement to the libdispatch APIs.  Much of the discussion has centered around specific details in the proposal - for example the “.asynchronously” method on DispatchQueue.  This great discussion leads to several requested revisions in the proposal:<br>&gt; <br>&gt; - Rename the DispatchQueue.[a]synchronously methods to &quot;.async” and &quot;.sync”, to follow the term of art.<br>&gt; - Rename DispatchIO setHighWater, setLowWater --&gt; setLimit(highWater:), setLimit(lowWater:)<br>&gt; - Rename setTargetQueue(queue:) and DispatchSource.setTimer <br>&gt; - Rename Semaphore, Group and WorkItem: .wait(timeout:) --&gt; wait() and wait(withTimeout:)<br>&gt; - Expand source handler methods to take the same arguments as async()<br>&gt; - Expand DispatchQueue.after to take the same arguments as async() in addition to the when: argument<br>&gt; <br>&gt; Thank you to Matt Wright proposing this, and for all of the implementation work that has gone into this so far!<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 20, 2016 at 04:00:00am</p></header><div class="content"><p>This is great!<br></p><p>What will setTargetQueue and setTimer become? It would be great if the<br>proposal doc could be updated with the API that was accepted.<br>On Thu, May 19, 2016 at 9:03 PM Patrick Smith via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Great stuff! Truly is a massive improvement to an already venerable API.<br>&gt;<br>&gt; Was there any consideration to make this a new module ‘Dispatch’, and drop<br>&gt; all the Dispatch- prefixes? Or rather, what is the reason for keeping the<br>&gt; prefixes? (Group could become WorkGroup to lessen naming conflicts)<br>&gt;<br>&gt;<br>&gt; &gt; On 20 May 2016, at 1:57 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md<br>&gt; &gt;<br>&gt; &gt; Hello Swift Community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0088: Modernize libdispatch for Swift 3 naming<br>&gt; conventions&quot; ran from May 10…17, 2016. The proposal is *accepted with<br>&gt; revisions* for Swift 3.<br>&gt; &gt;<br>&gt; &gt; The community and core team are both very positive about this massive<br>&gt; improvement to the libdispatch APIs.  Much of the discussion has centered<br>&gt; around specific details in the proposal - for example the “.asynchronously”<br>&gt; method on DispatchQueue.  This great discussion leads to several requested<br>&gt; revisions in the proposal:<br>&gt; &gt;<br>&gt; &gt; - Rename the DispatchQueue.[a]synchronously methods to &quot;.async” and<br>&gt; &quot;.sync”, to follow the term of art.<br>&gt; &gt; - Rename DispatchIO setHighWater, setLowWater --&gt; setLimit(highWater:),<br>&gt; setLimit(lowWater:)<br>&gt; &gt; - Rename setTargetQueue(queue:) and DispatchSource.setTimer<br>&gt; &gt; - Rename Semaphore, Group and WorkItem: .wait(timeout:) --&gt; wait() and<br>&gt; wait(withTimeout:)<br>&gt; &gt; - Expand source handler methods to take the same arguments as async()<br>&gt; &gt; - Expand DispatchQueue.after to take the same arguments as async() in<br>&gt; addition to the when: argument<br>&gt; &gt;<br>&gt; &gt; Thank you to Matt Wright proposing this, and for all of the<br>&gt; implementation work that has gone into this so far!<br>&gt; &gt;<br>&gt; &gt; -Chris Lattner<br>&gt; &gt; Review Manager<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/d133432a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 9:07 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is great!<br>&gt; <br>&gt; What will setTargetQueue and setTimer become? It would be great if the proposal doc could be updated with the API that was accepted.<br></p><p>Yep, I’ve asked Matt to do that.<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 9:02 PM, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt; <br>&gt; Great stuff! Truly is a massive improvement to an already venerable API.<br>&gt; <br>&gt; Was there any consideration to make this a new module ‘Dispatch’, and drop all the Dispatch- prefixes? Or rather, what is the reason for keeping the prefixes? (Group could become WorkGroup to lessen naming conflicts)<br></p><p>We discussed it briefly, but Swift currently lacks a developed model for submodules, and tackling it should only be done with a holistic design.  If/when we introduce them and adapt dispatch to use them, we believe that we can do so without massive impact to users code (we can phase it in over time).<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 20, 2016 at 04:00:00am</p></header><div class="content"><p>Does this mean that all current code using Dispatch is broken? Why not just<br>have a `Dispatch` module which would wrap the current C `LibDispatch`<br>module (per SPM naming convention). This way, not only would existing code<br>still work after simply changing `import Dispatch` to `import LibDispatch`,<br>but the implementation of the new Dispatch module would be much simpler<br>since it simply be a wrapper. Plenty of third party libraries do this<br>already (provide a Swifty api built on top of the current c api&#39;s). I don&#39;t<br>see any practical reason why Apple&#39;s Dispatch module should get this<br>special treatment. I mentioned this on the mailing list but got mostly<br>ignored...<br></p><p>On Thu, May 19, 2016 at 9:49 PM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On May 19, 2016, at 9:02 PM, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Great stuff! Truly is a massive improvement to an already venerable API.<br>&gt; &gt;<br>&gt; &gt; Was there any consideration to make this a new module ‘Dispatch’, and<br>&gt; drop all the Dispatch- prefixes? Or rather, what is the reason for keeping<br>&gt; the prefixes? (Group could become WorkGroup to lessen naming conflicts)<br>&gt;<br>&gt; We discussed it briefly, but Swift currently lacks a developed model for<br>&gt; submodules, and tackling it should only be done with a holistic design.<br>&gt; If/when we introduce them and adapt dispatch to use them, we believe that<br>&gt; we can do so without massive impact to users code (we can phase it in over<br>&gt; time).<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/65993c91/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 9:53 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Does this mean that all current code using Dispatch is broken?<br></p><p>Are you asking about Swift 2.2 code?  <br></p><p>Swift 2.2 code is generally completely incompatible with Swift 3 for a lot of other reasons (e.g. major changes to the standard library APIs).  Swift 2.2 code should be run through a migrator, which is able to automatically handle changes like this.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 20, 2016 at 05:00:00am</p></header><div class="content"><p>&gt;Swift 2.2 code should be run through a migrator, which is able to<br>automatically handle changes like this.<br></p><p>Yes, but that&#39;s not really my point. Why do it this &quot;magical&quot; way? It&#39;s<br>already possible (and actually very easy) to wrap C modules such as<br>libdispatch in a Swifty API (see Venice &lt;https://github.com/VeniceX/Venice&gt;,<br>OpenSSL &lt;https://github.com/Zewo/OpenSSL&gt;, PostreSQL<br>&lt;https://github.com/Zewo/PostgreSQL&gt; as examples). I know that LibDispatch<br>is special to Swift and Apple, but I just don&#39;t see a reason to give it<br>such a special treatment.<br></p><p>Dan<br></p><p>On Thu, May 19, 2016 at 9:56 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On May 19, 2016, at 9:53 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Does this mean that all current code using Dispatch is broken?<br>&gt;<br>&gt; Are you asking about Swift 2.2 code?<br>&gt;<br>&gt; Swift 2.2 code is generally completely incompatible with Swift 3 for a lot<br>&gt; of other reasons (e.g. major changes to the standard library APIs).  Swift<br>&gt; 2.2 code should be run through a migrator, which is able to automatically<br>&gt; handle changes like this.<br>&gt;<br>&gt; -Chris<br></p><p>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/3b420073/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 10:02 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; <br>&gt; &gt;Swift 2.2 code should be run through a migrator, which is able to automatically handle changes like this.<br>&gt; <br>&gt; Yes, but that&#39;s not really my point. Why do it this &quot;magical&quot; way?<br></p><p>Because it means that there is exactly one API: not a canonical API and a similar-but-different and less efficient wrapper.  The approach taken here generalizes to other (similarly structured) C APIs as well.<br></p><p>As I mentioned before this isn’t about breaking code, so let me flip your question around: Why not do it?  <br></p><p>-Chris<br></p><p><br>&gt; It&#39;s already possible (and actually very easy) to wrap C modules such as libdispatch in a Swifty API (see Venice &lt;https://github.com/VeniceX/Venice&gt;, OpenSSL &lt;https://github.com/Zewo/OpenSSL&gt;, PostreSQL &lt;https://github.com/Zewo/PostgreSQL&gt; as examples). I know that LibDispatch is special to Swift and Apple, but I just don&#39;t see a reason to give it such a special treatment.<br>&gt; <br>&gt; Dan<br>&gt; <br>&gt; On Thu, May 19, 2016 at 9:56 PM Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On May 19, 2016, at 9:53 PM, Dan Appel &lt;dan.appel00 at gmail.com &lt;mailto:dan.appel00 at gmail.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Does this mean that all current code using Dispatch is broken?<br>&gt; <br>&gt; Are you asking about Swift 2.2 code?<br>&gt; <br>&gt; Swift 2.2 code is generally completely incompatible with Swift 3 for a lot of other reasons (e.g. major changes to the standard library APIs).  Swift 2.2 code should be run through a migrator, which is able to automatically handle changes like this.<br>&gt; <br>&gt; -Chris<br>&gt; -- <br>&gt; Dan Appel<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/f5e204bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 20, 2016 at 05:00:00am</p></header><div class="content"><p>&gt;Because it means that there is exactly one API: not a canonical API and a<br>similar-but-different and less efficient wrapper.<br></p><p>Fair enough.<br></p><p>&gt;The approach taken here generalizes to other (similarly structured) C APIs<br>as well.<br></p><p>I don&#39;t see any mention of this in the proposal. Is this related to the<br>other C api translation proposal?<br></p><p>&gt;Why not do it?<br></p><p>Well, I want &quot;equal opportunity&quot; for all libraries. I am a huge fan of the<br>structured concurrency scheme that Venice<br>&lt;https://github.com/VeniceX/Venice&gt; provides by wrapping libmill, and I<br>don&#39;t want it (or any other C libraries) to lag behind LibDispatch simply<br>because it is not Apple&#39;s own. If the changes in this proposal do affect<br>all c libraries, then obviously I am all for it. But the way I see it, and<br>please correct me if I am mistaken, giving LibDispatch special treatment<br>adds an extra crutch to other third party libraries which would otherwise<br>be on a level playing field.<br></p><p>Dan<br></p><p>On Thu, May 19, 2016 at 10:05 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; On May 19, 2016, at 10:02 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt;Swift 2.2 code should be run through a migrator, which is able to<br>&gt; automatically handle changes like this.<br>&gt;<br>&gt; Yes, but that&#39;s not really my point. Why do it this &quot;magical&quot; way?<br>&gt;<br>&gt;<br>&gt; Because it means that there is exactly one API: not a canonical API and a<br>&gt; similar-but-different and less efficient wrapper.  The approach taken here<br>&gt; generalizes to other (similarly structured) C APIs as well.<br>&gt;<br>&gt; As I mentioned before this isn’t about breaking code, so let me flip your<br>&gt; question around: Why not do it?<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt; It&#39;s already possible (and actually very easy) to wrap C modules such as<br>&gt; libdispatch in a Swifty API (see Venice<br>&gt; &lt;https://github.com/VeniceX/Venice&gt;, OpenSSL<br>&gt; &lt;https://github.com/Zewo/OpenSSL&gt;, PostreSQL<br>&gt; &lt;https://github.com/Zewo/PostgreSQL&gt; as examples). I know that<br>&gt; LibDispatch is special to Swift and Apple, but I just don&#39;t see a reason to<br>&gt; give it such a special treatment.<br>&gt;<br>&gt; Dan<br>&gt;<br>&gt; On Thu, May 19, 2016 at 9:56 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On May 19, 2016, at 9:53 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Does this mean that all current code using Dispatch is broken?<br>&gt;&gt;<br>&gt;&gt; Are you asking about Swift 2.2 code?<br>&gt;&gt;<br>&gt;&gt; Swift 2.2 code is generally completely incompatible with Swift 3 for a<br>&gt;&gt; lot of other reasons (e.g. major changes to the standard library APIs).<br>&gt;&gt; Swift 2.2 code should be run through a migrator, which is able to<br>&gt;&gt; automatically handle changes like this.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;<br>&gt; --<br>&gt; Dan Appel<br>&gt;<br>&gt; --<br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/efdce5bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 10:00:00pm</p></header><div class="content"><p>On May 19, 2016, at 10:17 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; &gt;Because it means that there is exactly one API: not a canonical API and a similar-but-different and less efficient wrapper.<br>&gt; <br>&gt; Fair enough. <br>&gt; <br>&gt; &gt;The approach taken here generalizes to other (similarly structured) C APIs as well.<br>&gt; <br>&gt; I don&#39;t see any mention of this in the proposal. Is this related to the other C api translation proposal?<br></p><p>Yes, this is basically a “review libdispatch’s adoption of SE-0044 and other recent features” proposal.<br></p><p>&gt; &gt;Why not do it?<br>&gt; <br>&gt; Well, I want &quot;equal opportunity&quot; for all libraries. <br></p><p>I agree.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 20, 2016 at 05:00:00am</p></header><div class="content"><p>Well, I am in full support then. Thanks for being patient here!<br></p><p>On Thu, May 19, 2016 at 10:23 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; On May 19, 2016, at 10:17 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; &gt; &gt;Because it means that there is exactly one API: not a canonical API and<br>&gt; a similar-but-different and less efficient wrapper.<br>&gt; &gt;<br>&gt; &gt; Fair enough.<br>&gt; &gt;<br>&gt; &gt; &gt;The approach taken here generalizes to other (similarly structured) C<br>&gt; APIs as well.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t see any mention of this in the proposal. Is this related to the<br>&gt; other C api translation proposal?<br>&gt;<br>&gt; Yes, this is basically a “review libdispatch’s adoption of SE-0044 and<br>&gt; other recent features” proposal.<br>&gt;<br>&gt; &gt; &gt;Why not do it?<br>&gt; &gt;<br>&gt; &gt; Well, I want &quot;equal opportunity&quot; for all libraries.<br>&gt;<br>&gt; I agree.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; --<br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/8f534d77/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with Revision] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 19, 2016 at 10:00:00pm</p></header><div class="content"><p>On May 19, 2016, at 10:26 PM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; Well, I am in full support then. Thanks for being patient here!<br></p><p>No problem at all, thanks!<br></p><p>-Chris<br></p><p>&gt; <br>&gt; On Thu, May 19, 2016 at 10:23 PM Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; On May 19, 2016, at 10:17 PM, Dan Appel &lt;dan.appel00 at gmail.com &lt;mailto:dan.appel00 at gmail.com&gt;&gt; wrote:<br>&gt; &gt; &gt;Because it means that there is exactly one API: not a canonical API and a similar-but-different and less efficient wrapper.<br>&gt; &gt;<br>&gt; &gt; Fair enough.<br>&gt; &gt;<br>&gt; &gt; &gt;The approach taken here generalizes to other (similarly structured) C APIs as well.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t see any mention of this in the proposal. Is this related to the other C api translation proposal?<br>&gt; <br>&gt; Yes, this is basically a “review libdispatch’s adoption of SE-0044 and other recent features” proposal.<br>&gt; <br>&gt; &gt; &gt;Why not do it?<br>&gt; &gt;<br>&gt; &gt; Well, I want &quot;equal opportunity&quot; for all libraries.<br>&gt; <br>&gt; I agree.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; -- <br>&gt; Dan Appel<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/ef48213c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
