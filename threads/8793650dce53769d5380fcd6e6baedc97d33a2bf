<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 11, 2016 at 03:00:00pm</p></header><div class="content"><p>I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br></p><p>I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br></p><p>/// De-initialize the `count` `Pointee`s starting at `self`, returning<br>/// their memory to an uninitialized state.<br>///<br>/// - Precondition: The `Pointee`s at `self..&lt;self + count` are<br>///   initialized.<br>///<br>/// - Postcondition: The memory is uninitialized.<br>public func deinitialize(count: Int = default)<br>To cut it short:<br></p><p>Could we make default function parameter values more transparent in Swift 3?<br>Why are default parameter values translated to default rather than the actual value?<br>Can we make this independent from docs?<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160611/8793a2bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 13, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jun 11, 2016, at 3:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br>&gt; <br>&gt; I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br>&gt; <br>&gt; /// De-initialize the `count` `Pointee`s starting at `self`, returning<br>&gt; /// their memory to an uninitialized state.<br>&gt; ///<br>&gt; /// - Precondition: The `Pointee`s at `self..&lt;self + count` are<br>&gt; ///   initialized.<br>&gt; ///<br>&gt; /// - Postcondition: The memory is uninitialized.<br>&gt; public func deinitialize(count: Int = default)<br>&gt; To cut it short:<br>&gt; <br>&gt; Could we make default function parameter values more transparent in Swift 3?<br>&gt; Why are default parameter values translated to default rather than the actual value?<br>I guess that in some cases you don&#39;t want the default value to be known, or is irrelevant. Most importantly, it can be a more complex expression - e.g. creating an object and calling something on it:<br></p><p>private let mySecretNumber = 0x999<br>public func deinitialize(count: Int = NSProcessInfo().processorCount + mySecretNumber)<br></p><p>And that&#39;s a pretty example, it can get much nastier. Since mySecretNumber is private, it definitely cannot be exposed.<br></p><p><br>&gt; Can we make this independent from docs?<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/c9091657/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>True but I think we should consider some consitency for apis, I&#39;d prefer docs independent transparency but I could live with good documentation (guidline update?).<br></p><p>--  <br>Adrian Zubarev<br>Sent with Airmail  <br></p><p>Am 13. Juni 2016 um 06:27:22, Charlie Monroe (charlie at charliemonroe.net(mailto:charlie at charliemonroe.net)) schrieb:<br></p><p>&gt;  <br>&gt;  <br>&gt; &gt; On Jun 11, 2016, at 3:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt; wrote:  <br>&gt; &gt;  <br>&gt; &gt; I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br>&gt; &gt;  <br>&gt; &gt;  <br>&gt; &gt; I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br>&gt; &gt;  <br>&gt; &gt; /// De-initialize the `count` `Pointee`s starting at `self`, returning /// their memory to an uninitialized state. /// /// - Precondition: The `Pointee`s at `self..&lt;self + count` are /// initialized. /// /// - Postcondition: The memory is uninitialized. public func deinitialize(count: Int = default)  <br>&gt; &gt;  <br>&gt; &gt; To cut it short:<br>&gt; &gt;  <br>&gt; &gt; Could we make default function parameter values more transparent in Swift 3?<br>&gt; &gt; Why are default parameter values translated to default rather than the actual value?<br>&gt; &gt;  <br>&gt; &gt;  <br>&gt; &gt;  <br>&gt;  <br>&gt; I guess that in some cases you don&#39;t want the default value to be known, or is irrelevant. Most importantly, it can be a more complex expression - e.g. creating an object and calling something on it:<br>&gt;  <br>&gt; private let mySecretNumber = 0x999  <br>&gt; public func deinitialize(count: Int = NSProcessInfo().processorCount + mySecretNumber)<br>&gt;  <br>&gt; And that&#39;s a pretty example, it can get much nastier. Since mySecretNumber is private, it definitely cannot be exposed.  <br>&gt;  <br>&gt;  <br>&gt; &gt; Can we make this independent from docs?  <br>&gt; &gt;  <br>&gt; &gt;  <br>&gt; &gt;  <br>&gt; &gt; --  <br>&gt; &gt; Adrian Zubarev<br>&gt; &gt; Sent with Airmail  <br>&gt; &gt;  <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/d501a1f9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>June 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 12, 2016, at 11:27 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 11, 2016, at 3:35 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br>&gt;&gt; <br>&gt;&gt; I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br>&gt;&gt; <br>&gt;&gt; /// De-initialize the `count` `Pointee`s starting at `self`, returning<br>&gt;&gt; /// their memory to an uninitialized state.<br>&gt;&gt; ///<br>&gt;&gt; /// - Precondition: The `Pointee`s at `self..&lt;self + count` are<br>&gt;&gt; ///   initialized.<br>&gt;&gt; ///<br>&gt;&gt; /// - Postcondition: The memory is uninitialized.<br>&gt;&gt; public func deinitialize(count: Int = default)<br>&gt;&gt; To cut it short:<br>&gt;&gt; <br>&gt;&gt; Could we make default function parameter values more transparent in Swift 3?<br>&gt;&gt; Why are default parameter values translated to default rather than the actual value?<br>&gt; I guess that in some cases you don&#39;t want the default value to be known, or is irrelevant. Most importantly, it can be a more complex expression - e.g. creating an object and calling something on it:<br>&gt; <br>&gt; private let mySecretNumber = 0x999<br>&gt; public func deinitialize(count: Int = NSProcessInfo().processorCount + mySecretNumber)<br>&gt; <br>&gt; And that&#39;s a pretty example, it can get much nastier. Since mySecretNumber is private, it definitely cannot be exposed.<br></p><p>That was my reaction as well, but this change is already in the pipeline, according to Apple’s published plans.<br></p><p>https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst#default-argument-expressions &lt;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst#default-argument-expressions&gt;<br></p><p>Presumably, once this goes through, it will no longer be possible to use a secret number as a default value.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/8c1879ff/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>As Charlie says the default value may not actually be public.<br></p><p>There was a thread a while ago about allowing defaults to be defined in protocols, but I don’t think it ever got made into a proposal; this would be useful however in cases where you want a consistent, known default. Either that or you need the option of declaring a default value as public perhaps?<br></p><p>&gt; On 11 Jun 2016, at 14:35, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br>&gt; <br>&gt; I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br>&gt; <br>&gt; /// De-initialize the `count` `Pointee`s starting at `self`, returning<br>&gt; /// their memory to an uninitialized state.<br>&gt; ///<br>&gt; /// - Precondition: The `Pointee`s at `self..&lt;self + count` are<br>&gt; ///   initialized.<br>&gt; ///<br>&gt; /// - Postcondition: The memory is uninitialized.<br>&gt; public func deinitialize(count: Int = default)<br>&gt; To cut it short:<br>&gt; <br>&gt; Could we make default function parameter values more transparent in Swift 3?<br>&gt; Why are default parameter values translated to default rather than the actual value?<br>&gt; Can we make this independent from docs?<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/95e84c12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 13, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;m not sure what enhancing defaults would look like, especially for protocols. Are you suggesting if there&#39;s a protocol like:<br></p><p>protocol A {<br>   func requiredFunction(a, b, c) -&gt; T<br>}<br></p><p>that you could then extend <br></p><p>extension A {<br>    func requiredFunction(a, b = somedefault, c) -&gt; T;<br>}<br></p><p>as a declaration without an implementation?<br></p><p>-- E<br></p><p>&gt; On Jun 13, 2016, at 2:17 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As Charlie says the default value may not actually be public.<br>&gt; <br>&gt; There was a thread a while ago about allowing defaults to be defined in protocols, but I don’t think it ever got made into a proposal; this would be useful however in cases where you want a consistent, known default. Either that or you need the option of declaring a default value as public perhaps?<br>&gt; <br>&gt;&gt; On 11 Jun 2016, at 14:35, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br>&gt;&gt; <br>&gt;&gt; I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br>&gt;&gt; <br>&gt;&gt; /// De-initialize the `count` `Pointee`s starting at `self`, returning<br>&gt;&gt; /// their memory to an uninitialized state.<br>&gt;&gt; ///<br>&gt;&gt; /// - Precondition: The `Pointee`s at `self..&lt;self + count` are<br>&gt;&gt; ///   initialized.<br>&gt;&gt; ///<br>&gt;&gt; /// - Postcondition: The memory is uninitialized.<br>&gt;&gt; public func deinitialize(count: Int = default)<br>&gt;&gt; To cut it short:<br>&gt;&gt; <br>&gt;&gt; Could we make default function parameter values more transparent in Swift 3?<br>&gt;&gt; Why are default parameter values translated to default rather than the actual value?<br>&gt;&gt; Can we make this independent from docs?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/be4f790c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 13, 2016 at 05:00:00pm</p></header><div class="content"><p>I would understand the java notion of default implementation directly in the protocol for optional methods, but default values across any implementation ever dies not ring a bell as something I ever wished I had.<br></p><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 13, 2016, at 4:52 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m not sure what enhancing defaults would look like, especially for protocols. Are you suggesting if there&#39;s a protocol like:<br>&gt; <br>&gt; protocol A {<br>&gt;    func requiredFunction(a, b, c) -&gt; T<br>&gt; }<br>&gt; <br>&gt; that you could then extend <br>&gt; <br>&gt; extension A {<br>&gt;     func requiredFunction(a, b = somedefault, c) -&gt; T;<br>&gt; }<br>&gt; <br>&gt; as a declaration without an implementation?<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Jun 13, 2016, at 2:17 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As Charlie says the default value may not actually be public.<br>&gt;&gt; <br>&gt;&gt; There was a thread a while ago about allowing defaults to be defined in protocols, but I don’t think it ever got made into a proposal; this would be useful however in cases where you want a consistent, known default. Either that or you need the option of declaring a default value as public perhaps?<br>&gt;&gt; <br>&gt;&gt;&gt; On 11 Jun 2016, at 14:35, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I just installed the current Swift 3 snapshot to play around with it (last from may crashed my Xcode all the time).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wanted to re-build a small project with (currently implemented) Swift 3 changes. Basically I had to look up on GitHub what the default value for deinitialize(count:) function was for UnsafeMutablePointer, just because Xcode and the docs can’t tell me that:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// De-initialize the `count` `Pointee`s starting at `self`, returning<br>&gt;&gt;&gt; /// their memory to an uninitialized state.<br>&gt;&gt;&gt; ///<br>&gt;&gt;&gt; /// - Precondition: The `Pointee`s at `self..&lt;self + count` are<br>&gt;&gt;&gt; ///   initialized.<br>&gt;&gt;&gt; ///<br>&gt;&gt;&gt; /// - Postcondition: The memory is uninitialized.<br>&gt;&gt;&gt; public func deinitialize(count: Int = default)<br>&gt;&gt;&gt; To cut it short:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Could we make default function parameter values more transparent in Swift 3?<br>&gt;&gt;&gt; Why are default parameter values translated to default rather than the actual value?<br>&gt;&gt;&gt; Can we make this independent from docs?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/87741393/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Make `default` function parameter values more transparent</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 13, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On 13 Jun 2016, at 15:52, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m not sure what enhancing defaults would look like, especially for protocols. Are you suggesting if there&#39;s a protocol like:<br>&gt; <br>&gt; protocol A {<br>&gt;    func requiredFunction(a, b, c) -&gt; T<br>&gt; }<br>&gt; <br>&gt; that you could then extend <br>&gt; <br>&gt; extension A {<br>&gt;     func requiredFunction(a, b = somedefault, c) -&gt; T;<br>&gt; }<br>&gt; <br>&gt; as a declaration without an implementation?<br></p><p>I was thinking more that we could allow a fixed default on protocols where it makes sense to, for example:<br></p><p>	protocol A {<br>		func requiredFunction(a, b = somedefault, c) -&gt; T<br>	}<br></p><p>In this case all conforming types need to specify the same default for absolute consistency, but this may be a bit divergent from what the OP actually wants, I just mentioned it because it seemed a bit similar. This would come with the caveat that most of the time you don’t want to do this (as it could unnecessarily limit implementations) but it would mean that you know what the default is for every single conforming type.<br></p><p><br>Specifically for the OP though an attribute might make more sense, like:<br></p><p>	struct Foo : A {<br>		func requiredFunction(a, b = @public somedefault, c) -&gt; T { … }<br>	}<br></p><p>Here the default for b is explicitly declared as public, so would be exposed via documentation automatically; this would require that it isn’t derived from anything hidden (allowing this to be checked) and wouldn’t involve exposing every default value implicitly just for being on a public method as the OP was questioning.<br></p><p><br>Just some options anyway, since I don’t think exposing all defaults automatically is really viable.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160613/5b01609a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
