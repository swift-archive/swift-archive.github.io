<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7848d95e9528b1130084ef3e81ab01c?s=50"></div><header><strong>fcntl() should be added to the standard library.</strong> from <string>Bill Abt</string> &lt;babt at me.com&gt;<p>December  4, 2015 at 11:00:00pm</p></header><div class="content"><p>The fcntl() API is a variadic standard “C” library and as such not supported currently by Swift.  Any visit to GitHub looking for a socket implementation will invariably find a .c or .mm file included that exposes fcntl() to Swift via a shim.  There are only 3 forms of this API, all returning int.  The first takes 2 integers and sets the 3rd to 0.  The second takes 3 integers.  The last and final form take 2 integers and a void pointer.  Looking at the standard library source, it’s trivial to implement.  It’ll take longer to write the tests than it will to write the functions.  Once implemented, it would eliminate the need for shims for this API.<br></p><p>This seems like one of those obvious things that just haven’t been implemented yet, no?<br></p><p><br>Regards,<br>	Bill Abt<br>	babt at me.com &lt;mailto:babt at me.com&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/0b311f44/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>fcntl() should be added to the standard library.</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 8:36 PM, Bill Abt &lt;babt at me.com&gt; wrote:<br>&gt; <br>&gt; The fcntl() API is a variadic standard “C” library and as such not supported currently by Swift.  Any visit to GitHub looking for a socket implementation will invariably find a .c or .mm file included that exposes fcntl() to Swift via a shim.  There are only 3 forms of this API, all returning int.  The first takes 2 integers and sets the 3rd to 0.  The second takes 3 integers.  The last and final form take 2 integers and a void pointer.  Looking at the standard library source, it’s trivial to implement.  It’ll take longer to write the tests than it will to write the functions.  Once implemented, it would eliminate the need for shims for this API.<br>&gt; <br>&gt; This seems like one of those obvious things that just haven’t been implemented yet, no?<br></p><p>Hi Bill,<br></p><p>The Swift standard library doesn’t provide this sort of functionality, but I agree that it makes sense for the Darwin/Glibc modules to provide this interface.  We have a system of “overlays” to provide functionality that the clang importer can’t do automatically.  For example, the Glibc overlay is here:<br>https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift&gt;<br></p><p>The darwin overlay is more filled out:<br>https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift&gt;<br></p><p>It doesn’t look like it provides fcntl specifically, but it does provide open, which has the same varargs sort of implementation issues.  Adding support for fcntl to the overlays makes sense in principle to me.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/1b6f6211/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>fcntl() should be added to the standard library.</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>December 10, 2015 at 05:00:00pm</p></header><div class="content"><p>I agree Chris’s points here.<br></p><p>One of the original reasons the SDK Overlay was conceived was to help massage the interface between C APIs (such as ones using variadics) and Swift.  This seems right in that category.  I think for changes like this all that is needed is a code owner to review these changes.  I don’t think this needs to go through the swift-evolution process unless it is a major API change.<br></p><p>Bill: do you still have a pull request handy for this change?<br></p><p>Ted<br></p><p>&gt; On Dec 5, 2015, at 11:11 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 4, 2015, at 8:36 PM, Bill Abt &lt;babt at me.com &lt;mailto:babt at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The fcntl() API is a variadic standard “C” library and as such not supported currently by Swift.  Any visit to GitHub looking for a socket implementation will invariably find a .c or .mm file included that exposes fcntl() to Swift via a shim.  There are only 3 forms of this API, all returning int.  The first takes 2 integers and sets the 3rd to 0.  The second takes 3 integers.  The last and final form take 2 integers and a void pointer.  Looking at the standard library source, it’s trivial to implement.  It’ll take longer to write the tests than it will to write the functions.  Once implemented, it would eliminate the need for shims for this API.<br>&gt;&gt; <br>&gt;&gt; This seems like one of those obvious things that just haven’t been implemented yet, no?<br>&gt; <br>&gt; Hi Bill,<br>&gt; <br>&gt; The Swift standard library doesn’t provide this sort of functionality, but I agree that it makes sense for the Darwin/Glibc modules to provide this interface.  We have a system of “overlays” to provide functionality that the clang importer can’t do automatically.  For example, the Glibc overlay is here:<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift&gt;<br>&gt; <br>&gt; The darwin overlay is more filled out:<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift&gt;<br>&gt; <br>&gt; It doesn’t look like it provides fcntl specifically, but it does provide open, which has the same varargs sort of implementation issues.  Adding support for fcntl to the overlays makes sense in principle to me.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/ed603007/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7848d95e9528b1130084ef3e81ab01c?s=50"></div><header><strong>fcntl() should be added to the standard library.</strong> from <string>Bill Abt</string> &lt;babt at me.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>Yes,  I closed the original PR and created a new one that consolidates the changes into a single commit.  Dmitri just reviewed it and asked me to make a few formatting changes.  I’ve just completed them and am doing a build on both OS X and Linux.  When that’s complete, I’ve written a small Swift test program that I’ll compile with the newly built compiler.  Assuming all goes well, I’ll push these last set of changes and it should be good to go.<br></p><p>-Bill<br></p><p>&gt; On Dec 10, 2015, at 8:17 PM, Ted Kremenek &lt;kremenek at apple.com&gt; wrote:<br>&gt; <br>&gt; I agree Chris’s points here.<br>&gt; <br>&gt; One of the original reasons the SDK Overlay was conceived was to help massage the interface between C APIs (such as ones using variadics) and Swift.  This seems right in that category.  I think for changes like this all that is needed is a code owner to review these changes.  I don’t think this needs to go through the swift-evolution process unless it is a major API change.<br>&gt; <br>&gt; Bill: do you still have a pull request handy for this change?<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 11:11 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 8:36 PM, Bill Abt &lt;babt at me.com &lt;mailto:babt at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The fcntl() API is a variadic standard “C” library and as such not supported currently by Swift.  Any visit to GitHub looking for a socket implementation will invariably find a .c or .mm file included that exposes fcntl() to Swift via a shim.  There are only 3 forms of this API, all returning int.  The first takes 2 integers and sets the 3rd to 0.  The second takes 3 integers.  The last and final form take 2 integers and a void pointer.  Looking at the standard library source, it’s trivial to implement.  It’ll take longer to write the tests than it will to write the functions.  Once implemented, it would eliminate the need for shims for this API.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This seems like one of those obvious things that just haven’t been implemented yet, no?<br>&gt;&gt; <br>&gt;&gt; Hi Bill,<br>&gt;&gt; <br>&gt;&gt; The Swift standard library doesn’t provide this sort of functionality, but I agree that it makes sense for the Darwin/Glibc modules to provide this interface.  We have a system of “overlays” to provide functionality that the clang importer can’t do automatically.  For example, the Glibc overlay is here:<br>&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/Glibc/Glibc.swift&gt;<br>&gt;&gt; <br>&gt;&gt; The darwin overlay is more filled out:<br>&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/SDK/Darwin/Darwin.swift&gt;<br>&gt;&gt; <br>&gt;&gt; It doesn’t look like it provides fcntl specifically, but it does provide open, which has the same varargs sort of implementation issues.  Adding support for fcntl to the overlays makes sense in principle to me.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/f43bf2db/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
