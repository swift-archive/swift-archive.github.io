<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>Implicit Type Conversion For Numerics Where Possible.</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>March 30, 2016 at 04:00:00pm</p></header><div class="content"><p>Would a valid stop-gap be to define operators for some of the common cases?<br></p><p>For example:<br></p><p>func * (lhs:Double, rhs:Int)-&gt;Double<br></p><p>Are there issues with this approach that I am unaware of?  It seems like the desired cast (and the resulting effect) is obvious there, and you don’t get surprising casts elsewhere.<br></p><p>Basically, the rule (as thought of by the programmer) would be in math which mixes Ints &amp; Doubles, the Int is treated as a double.  You could make a similar rule for Int + CGFloat.<br></p><p>For math on mixed types, the result IMHO should follow this scale of promotion (with the parameter farthest left on the scale also being the result type):<br></p><p>CGFloat &lt;- Double &lt;- Float &lt;- Int<br></p><p>I put CGFloat as the highest because in real-world code you often multiply a CGFloat by a constant Double such as M_PI.  I can’t think of many cases where you have a CGFloat and want anything but a CGFloat in return.<br></p><p>Thanks,<br>Jon<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Implicit Type Conversion For Numerics Where Possible.</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 30, 2016 at 06:00:00pm</p></header><div class="content"><p>Is it reasonable to think that the hypothetical type promotion system that Chris Lattner was alluding to *might* result in function signatures that are subtly different than what you’re proposing? If so, I’d be very hesitant to introduce them into the standard library. Perhaps there could be a “PossiblySketchyInSwift4MathStuff” package, once the package manager is ready?<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 30, 2016, at 6:10 PM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Would a valid stop-gap be to define operators for some of the common cases?<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; func * (lhs:Double, rhs:Int)-&gt;Double<br>&gt; <br>&gt; Are there issues with this approach that I am unaware of?  It seems like the desired cast (and the resulting effect) is obvious there, and you don’t get surprising casts elsewhere.<br>&gt; <br>&gt; Basically, the rule (as thought of by the programmer) would be in math which mixes Ints &amp; Doubles, the Int is treated as a double.  You could make a similar rule for Int + CGFloat.<br>&gt; <br>&gt; For math on mixed types, the result IMHO should follow this scale of promotion (with the parameter farthest left on the scale also being the result type):<br>&gt; <br>&gt; CGFloat &lt;- Double &lt;- Float &lt;- Int<br>&gt; <br>&gt; I put CGFloat as the highest because in real-world code you often multiply a CGFloat by a constant Double such as M_PI.  I can’t think of many cases where you have a CGFloat and want anything but a CGFloat in return.<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Implicit Type Conversion For Numerics Where Possible.</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 30, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 30, 2016, at 4:10 PM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Would a valid stop-gap be to define operators for some of the common cases?<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; func * (lhs:Double, rhs:Int)-&gt;Double<br>&gt; <br>&gt; Are there issues with this approach that I am unaware of?  It seems like the desired cast (and the resulting effect) is obvious there, and you don’t get surprising casts elsewhere.<br></p><p>The major problem with this is type checker scalability.  It would drive it to be much more exponential than it is today, by completely exploding the overload sets for these operators.  <br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
