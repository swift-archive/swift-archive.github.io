<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  6, 2015 at 02:00:00am</p></header><div class="content"><p>Hi,<br></p><p>If someone is interested in working on a simple and useful starter<br>project, here is one.<br></p><p>We need to remove old mirrors from the standard library and the runtime.<br></p><p>The first step is very simple: all old mirrors in the standard library<br>and SDK overlays should be migrated to the new CustomReflectable APIs.<br>All mirrors that didn&#39;t have tests and are affected by this conversion<br>should get tests.<br></p><p>The dump() function needs to be rewritten to use new mirrors.<br></p><p>We need new runtime entry points that make sense for the new mirror<br>implementation.  The current entry points (the _reflect() function and<br>all its implementation details) directly depend on the old mirrors.<br>This step is slightly harder, but not doesn&#39;t require extraordinary<br>skills.  This part requires writing a proposal, because the runtime<br>API is going to be stable.<br></p><p>This project is tracked by https://bugs.swift.org/browse/SR-88<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December  6, 2015 at 04:00:00am</p></header><div class="content"><p>I&#39;d be interested in working on this, if nobody else minds.<br></p><p>Austin<br></p><p>On Sun, Dec 6, 2015 at 2:20 AM, Dmitri Gribenko via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; If someone is interested in working on a simple and useful starter<br>&gt; project, here is one.<br>&gt;<br>&gt; We need to remove old mirrors from the standard library and the runtime.<br>&gt;<br>&gt; The first step is very simple: all old mirrors in the standard library<br>&gt; and SDK overlays should be migrated to the new CustomReflectable APIs.<br>&gt; All mirrors that didn&#39;t have tests and are affected by this conversion<br>&gt; should get tests.<br>&gt;<br>&gt; The dump() function needs to be rewritten to use new mirrors.<br>&gt;<br>&gt; We need new runtime entry points that make sense for the new mirror<br>&gt; implementation.  The current entry points (the _reflect() function and<br>&gt; all its implementation details) directly depend on the old mirrors.<br>&gt; This step is slightly harder, but not doesn&#39;t require extraordinary<br>&gt; skills.  This part requires writing a proposal, because the runtime<br>&gt; API is going to be stable.<br>&gt;<br>&gt; This project is tracked by https://bugs.swift.org/browse/SR-88<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151206/d77f2e4f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 2:20 AM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; We need new runtime entry points that make sense for the new mirror<br>&gt; implementation.  The current entry points (the _reflect() function and<br>&gt; all its implementation details) directly depend on the old mirrors.<br>&gt; This step is slightly harder, but not doesn&#39;t require extraordinary<br>&gt; skills.  This part requires writing a proposal, because the runtime<br>&gt; API is going to be stable.<br></p><p><br>Note that I&#39;m already working on this part. The Swift runtime needs to provide low-level reflection interfaces that allow the standard library to implement Mirror without depending on private runtime ABI.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a0ae72b2f6bdc4476f1fcb63396e717?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Jean-Pierre Simard</string> &lt;jp at jpsim.com&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; Note that I&#39;m already working on this part. The Swift runtime needs to<br>provide low-level reflection interfaces that allow the standard library to<br>implement Mirror without depending on private runtime ABI.<br></p><p>That&#39;s great to hear! Is there any chance that this work could introduce<br>type-level reflection APIs that would allow reflecting uninstantiated<br>types? Or should I make a formal proposal for this functionality in<br>swift-evolution?<br></p><p>On Mon, Dec 7, 2015 at 9:01 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org<br>&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 6, 2015, at 2:20 AM, Dmitri Gribenko via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; We need new runtime entry points that make sense for the new mirror<br>&gt; &gt; implementation.  The current entry points (the _reflect() function and<br>&gt; &gt; all its implementation details) directly depend on the old mirrors.<br>&gt; &gt; This step is slightly harder, but not doesn&#39;t require extraordinary<br>&gt; &gt; skills.  This part requires writing a proposal, because the runtime<br>&gt; &gt; API is going to be stable.<br>&gt;<br>&gt;<br>&gt; Note that I&#39;m already working on this part. The Swift runtime needs to<br>&gt; provide low-level reflection interfaces that allow the standard library to<br>&gt; implement Mirror without depending on private runtime ABI.<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151207/8e9952ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 12:21 PM, Jean-Pierre Simard &lt;jp at jpsim.com&gt; wrote:<br>&gt; <br>&gt; &gt; Note that I&#39;m already working on this part. The Swift runtime needs to provide low-level reflection interfaces that allow the standard library to implement Mirror without depending on private runtime ABI.<br>&gt; <br>&gt; That&#39;s great to hear! Is there any chance that this work could introduce type-level reflection APIs that would allow reflecting uninstantiated types? Or should I make a formal proposal for this functionality in swift-evolution?<br></p><p>You should propose any new functionality you&#39;d like to see. Our first goal necessarily has to be to support the functionality that already exists.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>December  7, 2015 at 11:00:00pm</p></header><div class="content"><p>Hi Jean-Pierre,<br></p><p><br>&gt; On Dec 7, 2015, at 12:21 PM, Jean-Pierre Simard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; Note that I&#39;m already working on this part. The Swift runtime needs to provide low-level reflection interfaces that allow the standard library to implement Mirror without depending on private runtime ABI.<br>&gt; <br>&gt; That&#39;s great to hear! Is there any chance that this work could introduce type-level reflection APIs that would allow reflecting uninstantiated types? Or should I make a formal proposal for this functionality in swift-evolution?<br></p><p>There is a proposal for uninstantiated type metadata reflection in the GitHub repo in docs/proposals/RemoteMirrors.rst, but it might not cover your specific use-case. As Joe hinted, starting from concrete requirements is the best way forward here.<br></p><p>Slava<br></p><p>&gt; <br>&gt; On Mon, Dec 7, 2015 at 9:01 AM, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Dec 6, 2015, at 2:20 AM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; We need new runtime entry points that make sense for the new mirror<br>&gt; &gt; implementation.  The current entry points (the _reflect() function and<br>&gt; &gt; all its implementation details) directly depend on the old mirrors.<br>&gt; &gt; This step is slightly harder, but not doesn&#39;t require extraordinary<br>&gt; &gt; skills.  This part requires writing a proposal, because the runtime<br>&gt; &gt; API is going to be stable.<br>&gt; <br>&gt; <br>&gt; Note that I&#39;m already working on this part. The Swift runtime needs to provide low-level reflection interfaces that allow the standard library to implement Mirror without depending on private runtime ABI.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151207/33947e7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a0ae72b2f6bdc4476f1fcb63396e717?s=50"></div><header><strong>Starter project: Remove old mirrors</strong> from <string>Jean-Pierre Simard</string> &lt;jp at jpsim.com&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>Thanks for sharing that, Slava! Reading that really helped me gain a better<br>understanding of how the current reflection model works and how it could be<br>extended.<br></p><p>Although my intended use cases are more for in-process type-level<br>reflection akin to objc_copyClassList and class_copyPropertyList.<br></p><p>In any case, swift-dev isn&#39;t the best place to discuss this, so I&#39;ll<br>synthesize my thoughts into a swift-evolution proposal shortly.<br></p><p>On Mon, Dec 7, 2015 at 11:51 PM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br></p><p>&gt; Hi Jean-Pierre,<br>&gt;<br>&gt;<br>&gt; On Dec 7, 2015, at 12:21 PM, Jean-Pierre Simard via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Note that I&#39;m already working on this part. The Swift runtime needs to<br>&gt; provide low-level reflection interfaces that allow the standard library to<br>&gt; implement Mirror without depending on private runtime ABI.<br>&gt;<br>&gt; That&#39;s great to hear! Is there any chance that this work could introduce<br>&gt; type-level reflection APIs that would allow reflecting uninstantiated<br>&gt; types? Or should I make a formal proposal for this functionality in<br>&gt; swift-evolution?<br>&gt;<br>&gt;<br>&gt; There is a proposal for uninstantiated type metadata reflection in the<br>&gt; GitHub repo in docs/proposals/RemoteMirrors.rst, but it might not cover<br>&gt; your specific use-case. As Joe hinted, starting from concrete requirements<br>&gt; is the best way forward here.<br>&gt;<br>&gt; Slava<br>&gt;<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 9:01 AM, Joe Groff via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Dec 6, 2015, at 2:20 AM, Dmitri Gribenko via swift-dev &lt;<br>&gt;&gt; swift-dev at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We need new runtime entry points that make sense for the new mirror<br>&gt;&gt; &gt; implementation.  The current entry points (the _reflect() function and<br>&gt;&gt; &gt; all its implementation details) directly depend on the old mirrors.<br>&gt;&gt; &gt; This step is slightly harder, but not doesn&#39;t require extraordinary<br>&gt;&gt; &gt; skills.  This part requires writing a proposal, because the runtime<br>&gt;&gt; &gt; API is going to be stable.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Note that I&#39;m already working on this part. The Swift runtime needs to<br>&gt;&gt; provide low-level reflection interfaces that allow the standard library to<br>&gt;&gt; implement Mirror without depending on private runtime ABI.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151209/b2d1e2b5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
