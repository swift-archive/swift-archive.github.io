<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c65faa002b79348ac10e1fb9c1a9ad83?s=50"></div><header><strong>#if Support for Module Presence</strong> from <string>Colin Cornaby</string> &lt;colin.cornaby at mac.com&gt;<p>January 26, 2016 at 08:00:00pm</p></header><div class="content"><p>I was augmenting code that used OpenGL with a new Metal backend, but having some issues. MetalKit.framework is present in the iOS SDK, but not the iOS Simulator SDK. Under Obj-C I’d use ifdef to check to see if I was compiling for the simulator, and exclude our Metal backend and associated functions with preprocessor functionality (and fallback to OpenGL). But under Swift I couldn’t get the #if functionality to honor the TARGET_OS_SIMULATOR macro. My best way around was checking for a combination of the iOS platform with an i386 or x86_64 processor types using Swift’s #if functionality. This feels pretty hacky. Having been through the Intel transition, assuming that if I’m on in iOS running on Intel that I must be in the Simulator is not an assumption I want to make. :)<br></p><p>A direct way to fix this issue would be to add something to #if that would let me check for the presence of a module. For example, I’d like to see something like:<br>#if module(MetalKit)<br></p><p>Even with that functionality, I’d still have concerns about other sharp edges that are now exposed without a preprocessor. For example, AVFoundation is present in both the simulator and device SDKs, but AVFoundation is missing some API in simulator. In our existing iOS code, we also just check to see if we’re in a simulator target, and then just drop sections of code that require that API. Being able to check for the presence of a module doesn’t solve that problem. Another ask might be to have #if better support C macros. I can check something like TARGET_OS_SIMULATOR at runtime, but that doesn’t help me if I’m having issues at compile time because API or modules are missing in one SDK but not another. #if TARGET_OS_SIMULATOR is accepted by the Swift compiler, but the code within is never conditionally compiled no matter the current SDK.<br></p><p>Thanks!<br>Colin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>#if Support for Module Presence</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>January 27, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 26, 2016, at 8:35 PM, Colin Cornaby via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was augmenting code that used OpenGL with a new Metal backend, but having some issues. MetalKit.framework is present in the iOS SDK, but not the iOS Simulator SDK. Under Obj-C I’d use ifdef to check to see if I was compiling for the simulator, and exclude our Metal backend and associated functions with preprocessor functionality (and fallback to OpenGL). But under Swift I couldn’t get the #if functionality to honor the TARGET_OS_SIMULATOR macro. My best way around was checking for a combination of the iOS platform with an i386 or x86_64 processor types using Swift’s #if functionality. This feels pretty hacky. Having been through the Intel transition, assuming that if I’m on in iOS running on Intel that I must be in the Simulator is not an assumption I want to make. :)<br>&gt; <br>&gt; A direct way to fix this issue would be to add something to #if that would let me check for the presence of a module. For example, I’d like to see something like:<br>&gt; #if module(MetalKit)<br>&gt; <br>&gt; Even with that functionality, I’d still have concerns about other sharp edges that are now exposed without a preprocessor. For example, AVFoundation is present in both the simulator and device SDKs, but AVFoundation is missing some API in simulator. In our existing iOS code, we also just check to see if we’re in a simulator target, and then just drop sections of code that require that API. Being able to check for the presence of a module doesn’t solve that problem. Another ask might be to have #if better support C macros. I can check something like TARGET_OS_SIMULATOR at runtime, but that doesn’t help me if I’m having issues at compile time because API or modules are missing in one SDK but not another. #if TARGET_OS_SIMULATOR is accepted by the Swift compiler, but the code within is never conditionally compiled no matter the current SDK.<br></p><p>Swift&#39;s #if doesn&#39;t recognize C macros. `#if TARGET_OS_SIMULATOR` will never be true.<br></p><p>(Should #if warn if a condition identifier is not defined and there is a real identifier with the same name in scope? That would catch incorrect use of things like `#if TARGET_OS_SIMULATOR`.)<br></p><p>You should file a bug report requesting #if support for simulator platforms.<br></p><p>Workaround: You can define your own condition for Swift #if to recognize. You could configure your Xcode project to define some condition for iOS device builds and not define it for iOS simulator builds.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
