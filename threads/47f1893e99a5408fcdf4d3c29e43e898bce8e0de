<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>Does @IBAction imply @objc?</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>February  9, 2016 at 12:00:00pm</p></header><div class="content"><p>I’m currently migrating some code to the new #selector syntax and came across an issue re: @objc visibility.<br></p><p>I have this method:<br></p><p>@IBAction private func tapGestureRecognized(gesture: UIGestureRecognizer) {…}<br></p><p>…and use this code to set up the recognizer:<br></p><p>let tapSelector = #selector(MyClass.tapGestureRecognized(_:))<br>let tapGesture = UITapGestureRecognizer(target: self, action: tapSelector)<br></p><p>The previous version with Selector(“…&quot;) worked fine. Now that I use #selector, I get this warning:<br></p><p>Argument of &#39;#selector&#39; refers to a method that is not exposed to Objective-C<br></p><p>My understanding was that @IBAction always implied @objc. I can easily fix the warning, either by adding @objc or by removing the private modifier, but I’d like to understand why @objc @IBAction works, but @IBAction does not. I’d like to keep the private modifier. If this is a bug/limitation, I will file a bug report. Just wanted to make sure that I understand it correctly.<br></p><p>Cheers<br>Sebastian<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160209/47f1e0de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Does @IBAction imply @objc?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  9, 2016 at 09:00:00am</p></header><div class="content"><p>Hm. There are several levels to this answer:<br></p><p>- The implementation of @IBAction uses @objc.<br>- In theory we could some day have @IBActions that do not use the ObjC runtime.<br>- But I agree that having to type &quot;@IBAction @objc private func foo…&quot; seems like a bit much.<br></p><p>Doug, what do you think?<br></p><p>Jordan<br></p><p><br>&gt; On Feb 9, 2016, at 3:24 , Sebastian Hagedorn via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m currently migrating some code to the new #selector syntax and came across an issue re: @objc visibility.<br>&gt; <br>&gt; I have this method:<br>&gt; <br>&gt; @IBAction private func tapGestureRecognized(gesture: UIGestureRecognizer) {…}<br>&gt; <br>&gt; …and use this code to set up the recognizer:<br>&gt; <br>&gt; let tapSelector = #selector(MyClass.tapGestureRecognized(_:))<br>&gt; let tapGesture = UITapGestureRecognizer(target: self, action: tapSelector)<br>&gt; <br>&gt; The previous version with Selector(“…&quot;) worked fine. Now that I use #selector, I get this warning:<br>&gt; <br>&gt; Argument of &#39;#selector&#39; refers to a method that is not exposed to Objective-C<br>&gt; <br>&gt; My understanding was that @IBAction always implied @objc. I can easily fix the warning, either by adding @objc or by removing the private modifier, but I’d like to understand why @objc @IBAction works, but @IBAction does not. I’d like to keep the private modifier. If this is a bug/limitation, I will file a bug report. Just wanted to make sure that I understand it correctly.<br>&gt; <br>&gt; Cheers<br>&gt; Sebastian<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160209/25a6b7ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>Does @IBAction imply @objc?</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>March  4, 2016 at 11:00:00am</p></header><div class="content"><p>May I send a ping regarding this question? :)<br></p><p>Thanks for taking a look at this!<br></p><p><br>&gt; On 09 Feb 2016, at 18:17, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Hm. There are several levels to this answer:<br>&gt; <br>&gt; - The implementation of @IBAction uses @objc.<br>&gt; - In theory we could some day have @IBActions that do not use the ObjC runtime.<br>&gt; - But I agree that having to type &quot;@IBAction @objc private func foo…&quot; seems like a bit much.<br>&gt; <br>&gt; Doug, what do you think?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 9, 2016, at 3:24 , Sebastian Hagedorn via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m currently migrating some code to the new #selector syntax and came across an issue re: @objc visibility.<br>&gt;&gt; <br>&gt;&gt; I have this method:<br>&gt;&gt; <br>&gt;&gt; @IBAction private func tapGestureRecognized(gesture: UIGestureRecognizer) {…}<br>&gt;&gt; <br>&gt;&gt; …and use this code to set up the recognizer:<br>&gt;&gt; <br>&gt;&gt; let tapSelector = #selector(MyClass.tapGestureRecognized(_:))<br>&gt;&gt; let tapGesture = UITapGestureRecognizer(target: self, action: tapSelector)<br>&gt;&gt; <br>&gt;&gt; The previous version with Selector(“…&quot;) worked fine. Now that I use #selector, I get this warning:<br>&gt;&gt; <br>&gt;&gt; Argument of &#39;#selector&#39; refers to a method that is not exposed to Objective-C<br>&gt;&gt; <br>&gt;&gt; My understanding was that @IBAction always implied @objc. I can easily fix the warning, either by adding @objc or by removing the private modifier, but I’d like to understand why @objc @IBAction works, but @IBAction does not. I’d like to keep the private modifier. If this is a bug/limitation, I will file a bug report. Just wanted to make sure that I understand it correctly.<br>&gt;&gt; <br>&gt;&gt; Cheers<br>&gt;&gt; Sebastian<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160304/589496b5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
