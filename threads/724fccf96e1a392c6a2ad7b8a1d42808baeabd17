<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  8, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Feb 08 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Dave,<br>&gt;<br>&gt; First of all, thank you for enduring our nitpicks and complaints and<br>&gt; continuing to explore the subject :) I think we’re all better off for<br>&gt; it, and getting closer to the solution with each iteration.<br>&gt;<br>&gt; You asked:<br>&gt;<br>&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;   all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;   which they produce results you couldn&#39;t live with?<br>&gt;<br>&gt; And I think, by this standard, the guidelines you proposed seem to be<br>&gt; a success. Looking through Doug’s diffs, I see a lot of method names<br>&gt; that I don’t *love*, but I couldn’t find something I would hate.<br></p><p>That&#39;s great news!  Keep in mind, though, that Doug&#39;s results are just<br>the result of trying to approximate application of the guidelines by<br>using heuristics.  To do a complete evaluation also need to think about<br>what applying the guidelines will do to your own code.<br></p><p>Thanks,<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; To do a complete evaluation also need to think about<br>&gt; what applying the guidelines will do to your own code.<br></p><p>You’re right! I extracted the list of method definitions from my app and looked through it.<br></p><p>The overwhelming majority of my methods either take no arguments, or start with a verb and make a phrase where the first parameter doesn’t require a label (rule B1).<br></p><p>Some methods I noticed (I don’t know if this is useful for you, but if it is then here you go):<br></p><p>	private func setHandoffState(hash hash: String, fallbackURL: String, title: String? = nil, searchable: Bool) {<br></p><p>This seems OK to me, but I’m not entirely sure if the guidelines suggest I _should_ put a preposition there, i.e.<br></p><p>	setHandoffStateFor(hash: a, fallbackURL: b, …)<br></p><p>I don’t think I should — I don’t see how “for” adds to clarity here, but I want to make sure if I interpret the proposed guidelines right.<br></p><p>	func actionForCommand(command: UIKeyCommand) -&gt; String? {<br></p><p>This should become “actionFor(command: c)” — which isn’t an obvious win, but I certainly don’t mind it.<br></p><p>	private func createAttribute(tag: SecItemAttr, _ data: NSString?) -&gt; SecKeychainAttribute? {<br></p><p>Forgive my barbaric removal of external labels. It should be `createAttribute(tag: t, data: d)`. Alternatively, it could be `attributeFor(tag: t, data: d)` — I could go either way.<br></p><p>(adding to my thoughts on the later proposal of moving preposition inside parens, the symmetry in param labels would likely be broken here, because it doesn’t seem necessary to add “for”/“with” when I go with “createAttribute”, but for the noun-only version it would have to be “attribute(forTag: t, data: d)”.)<br></p><p>	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>	func attachmentForData(data: NSData) -&gt; Attachment {<br>	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br></p><p>This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and `attachmentFor(fileURL:)`. This seems like a win, since related methods for different data types are grouped more tightly together. (I could also — like you suggested about not optimizing for method families — make an enum, but it would be overkill since it’s not API for public consumption. I should mark those as private.)<br></p><p>	private func messageCell(label label: String) -&gt; MessageCell {<br>	private func cellForTask(task: Task, enabled: Bool = true) -&gt; TaskCell {<br></p><p>Hm, those are inconsistent. I could go with `cellFor(message:)` and `cellFor(task:)`, which would be consistent with the guidelines. OTOH, since they return different types, I liked that they had different names… `taskCellFor(task:)` is redundant. Perhaps `taskCellFor(_:)` and `messageCellFor(_:)`.<br></p><p>	func generate(fill: Double, text: String) -&gt; CLKComplicationTemplate {<br></p><p>`templateFor(fill:, text:)`<br></p><p>	func update(from old: TaskCommentRowModel?, to new: TaskCommentRowModel) {<br></p><p>That’s the, IMO rare, circumstance where the preposition *does* make sense to go inside the parens.<br></p><p>* * *<br></p><p>I mentioned this in some other post before, but I also found a bunch of methods where the first parameter should be labeled, but isn’t, because without an easy shortcut like the old #param, I was just too lazy to do The Right Thing.<br></p><p>PS. If someone wanted to do the same thing and review methods in their project, here’s the quick&amp;dirty Ruby script for this: https://gist.github.com/radex/b425c73afde84d88e4ca &lt;https://gist.github.com/radex/b425c73afde84d88e4ca&gt; <br></p><p>HTH,<br>— Radek<br></p><p>&gt; On 08 Feb 2016, at 21:55, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 08 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Dave,<br>&gt;&gt; <br>&gt;&gt; First of all, thank you for enduring our nitpicks and complaints and<br>&gt;&gt; continuing to explore the subject :) I think we’re all better off for<br>&gt;&gt; it, and getting closer to the solution with each iteration.<br>&gt;&gt; <br>&gt;&gt; You asked:<br>&gt;&gt; <br>&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;  all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;  which they produce results you couldn&#39;t live with?<br>&gt;&gt; <br>&gt;&gt; And I think, by this standard, the guidelines you proposed seem to be<br>&gt;&gt; a success. Looking through Doug’s diffs, I see a lot of method names<br>&gt;&gt; that I don’t *love*, but I couldn’t find something I would hate.<br>&gt; <br>&gt; That&#39;s great news!  Keep in mind, though, that Doug&#39;s results are just<br>&gt; the result of trying to approximate application of the guidelines by<br>&gt; using heuristics.  To do a complete evaluation also need to think about<br>&gt; what applying the guidelines will do to your own code.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/717ed2a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February 11, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>&gt; Le 11 févr. 2016 à 12:34, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; PS. If someone wanted to do the same thing and review methods in their project, here’s the quick&amp;dirty Ruby script for this: https://gist.github.com/radex/b425c73afde84d88e4ca <br></p><p>Thanks, it’s much useful.<br></p><p>&gt; <br>&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt; <br>&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and `attachmentFor(fileURL:)`. This seems like a win, since related methods for different data types are grouped more tightly together. (I could also — like you suggested about not optimizing for method families — make an enum, but it would be overkill since it’s not API for public consumption. I should mark those as private.)<br></p><p>If such convention were to be adopted, we could throw away our favorite grep tools.<br></p><p>Functions with many parameters are often more legible when their invocation is split across several lines. And generally speaking, a developer can liberally call a function on a single line, or on several lines:<br></p><p>	attachmentFor(image: …, extraParam: …)<br>	attachmentFor(<br>	    image: …,<br>	    extraParam: …)<br></p><p><br>OK so now if I want to look for all invocations of attachmentFor(image:extraParam:) in my code, I have to look for &quot;attachmentFor&quot;, and get all the unrelated results attachmentFor(data:…), attachmentFor(fileURL:…), etc.<br></p><p>Whereas if the function were named attachmentForImage(_:extraParam:), I could look for &quot;attachmentForImage&quot;, and get much more precise search results.<br></p><p>So… I’m happy people discuss how nice `attachmentFor(image:)` looks, and my opinion on how nice or ugly it looks is not my point. My point is that I want my tools to help me doing my job.<br></p><p>Gwendal<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February 11, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Le 11 févr. 2016 à 13:02, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; a écrit :<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt;&gt; Le 11 févr. 2016 à 12:34, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; PS. If someone wanted to do the same thing and review methods in their project, here’s the quick&amp;dirty Ruby script for this: https://gist.github.com/radex/b425c73afde84d88e4ca <br>&gt; <br>&gt; Thanks, it’s much useful.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt;&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt;&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt;&gt; <br>&gt;&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and `attachmentFor(fileURL:)`. This seems like a win, since related methods for different data types are grouped more tightly together. (I could also — like you suggested about not optimizing for method families — make an enum, but it would be overkill since it’s not API for public consumption. I should mark those as private.)<br>&gt; <br>&gt; If such convention were to be adopted, we could throw away our favorite grep tools.<br>&gt; <br>&gt; Functions with many parameters are often more legible when their invocation is split across several lines. And generally speaking, a developer can liberally call a function on a single line, or on several lines:<br>&gt; <br>&gt; 	attachmentFor(image: …, extraParam: …)<br>&gt; 	attachmentFor(<br>&gt; 	    image: …,<br>&gt; 	    extraParam: …)<br>&gt; <br>&gt; <br>&gt; OK so now if I want to look for all invocations of attachmentFor(image:extraParam:) in my code, I have to look for &quot;attachmentFor&quot;, and get all the unrelated results attachmentFor(data:…), attachmentFor(fileURL:…), etc.<br>&gt; <br>&gt; Whereas if the function were named attachmentForImage(_:extraParam:), I could look for &quot;attachmentForImage&quot;, and get much more precise search results.<br>&gt; <br>&gt; So… I’m happy people discuss how nice `attachmentFor(image:)` looks, and my opinion on how nice or ugly it looks is not my point. My point is that I want my tools to help me doing my job.<br></p><p>I admit that it’s hard to leave coding habits, and I have slightly over-reacted above.<br></p><p>I can’t wait for Xcode to bring better Swift code navigation tools, that would make lower the usefulness of text searching.<br></p><p>Gwendal<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt;&gt;&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt;&gt;&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt;&gt;&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and `attachmentFor(fileURL:)`. This seems like a win, since related methods for different data types are grouped more tightly together. (I could also — like you suggested about not optimizing for method families — make an enum, but it would be overkill since it’s not API for public consumption. I should mark those as private.)<br>&gt;&gt; <br>&gt;&gt; If such convention were to be adopted, we could throw away our favorite grep tools.<br>&gt;&gt; <br>&gt;&gt; Functions with many parameters are often more legible when their invocation is split across several lines. And generally speaking, a developer can liberally call a function on a single line, or on several lines:<br>&gt;&gt; <br>&gt;&gt; 	attachmentFor(image: …, extraParam: …)<br>&gt;&gt; 	attachmentFor(<br>&gt;&gt; 	    image: …,<br>&gt;&gt; 	    extraParam: …)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; OK so now if I want to look for all invocations of attachmentFor(image:extraParam:) in my code, I have to look for &quot;attachmentFor&quot;, and get all the unrelated results attachmentFor(data:…), attachmentFor(fileURL:…), etc.<br>&gt;&gt; <br>&gt;&gt; Whereas if the function were named attachmentForImage(_:extraParam:), I could look for &quot;attachmentForImage&quot;, and get much more precise search results.<br>&gt;&gt; <br>&gt;&gt; So… I’m happy people discuss how nice `attachmentFor(image:)` looks, and my opinion on how nice or ugly it looks is not my point. My point is that I want my tools to help me doing my job.<br>&gt; <br>&gt; I admit that it’s hard to leave coding habits, and I have slightly over-reacted above.<br>&gt; <br>&gt; I can’t wait for Xcode to bring better Swift code navigation tools, that would make lower the usefulness of text searching.<br>&gt; <br>&gt; Gwendal<br></p><p><br>Right. I’m not compelled by this argument, because it’s a tooling problem. I don’t believe language design lives in vacuum, outside of what the tools allow. Notice how the guidelines argue for the removal of type information repeated in the name — the information is already there and in situations when the context isn’t enough, it’s easy to view this information.<br></p><p>Besides — this seems like an edge case anyway. I very rarely see invocations long enough to be compelled to split it into multiple lines, and even if I would, I’d do it like this:<br></p><p>	attachmentFor(image: …,<br>				extraParam: ….)<br></p><p>And you can always search for /attachmentFor\(\s*image:/m in the (imho very rare) circumstance when you have a method family like that AND you want to search for just one of them AND there’s so many you can’t just look through the search results for `attachmentFor` AND you follow a convention where the first parameter label wouldn’t be in the same line as the method name.<br></p><p>— Radek<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/513d4cb2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Le 11 févr. 2016 à 15:06, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; a écrit :<br>&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt;&gt;&gt;&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt;&gt;&gt;&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and `attachmentFor(fileURL:)`. This seems like a win, since related methods for different data types are grouped more tightly together. (I could also — like you suggested about not optimizing for method families — make an enum, but it would be overkill since it’s not API for public consumption. I should mark those as private.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If such convention were to be adopted, we could throw away our favorite grep tools.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Functions with many parameters are often more legible when their invocation is split across several lines. And generally speaking, a developer can liberally call a function on a single line, or on several lines:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	attachmentFor(image: …, extraParam: …)<br>&gt;&gt;&gt; 	attachmentFor(<br>&gt;&gt;&gt; 	    image: …,<br>&gt;&gt;&gt; 	    extraParam: …)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; OK so now if I want to look for all invocations of attachmentFor(image:extraParam:) in my code, I have to look for &quot;attachmentFor&quot;, and get all the unrelated results attachmentFor(data:…), attachmentFor(fileURL:…), etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Whereas if the function were named attachmentForImage(_:extraParam:), I could look for &quot;attachmentForImage&quot;, and get much more precise search results.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So… I’m happy people discuss how nice `attachmentFor(image:)` looks, and my opinion on how nice or ugly it looks is not my point. My point is that I want my tools to help me doing my job.<br>&gt;&gt; <br>&gt;&gt; I admit that it’s hard to leave coding habits, and I have slightly over-reacted above.<br>&gt;&gt; <br>&gt;&gt; I can’t wait for Xcode to bring better Swift code navigation tools, that would make lower the usefulness of text searching.<br>&gt;&gt; <br>&gt;&gt; Gwendal<br>&gt; <br>&gt; <br>&gt; Right. I’m not compelled by this argument, because it’s a tooling problem.<br>&gt; <br>&gt; I don’t believe language design lives in vacuum, outside of what the tools allow. Notice how the guidelines argue for the removal of type information repeated in the name — the information is already there and in situations when the context isn’t enough, it’s easy to view this information.<br></p><p>Sure. But when the tools are lagging, we end with a plain and simple regression. So I’ll follow you for the sole reason that Swift is still experimental, and that we don’t have to expect a environment that matches the one we used to have until Swift 3.x or Swift 4.<br></p><p>&gt; Besides — this seems like an edge case anyway. I very rarely see invocations long enough to be compelled to split it into multiple lines, and even if I would, I’d do it like this:<br>&gt; <br>&gt; 	attachmentFor(image: …,<br>&gt; 				extraParam: ….)<br>&gt; <br>&gt; And you can always search for /attachmentFor\(\s*image:/m in the (imho very rare) circumstance when you have a method family like that AND you want to search for just one of them AND there’s so many you can’t just look through the search results for `attachmentFor` AND you follow a convention where the first parameter label wouldn’t be in the same line as the method name.<br></p><p>Sometimes, one need to find *all* invocations of a method. It maybe is not common. But we’re not always able to write a perfect test suite that makes refactoring an always successful trial and error process. Sometimes we have to think hard, and look at code thoroughly. In this context, a poor signal/noise ratio does not help when you look for something in your code. Searchability is important. If will suffer with the new conventions.<br></p><p>But it’s only a tooling problem.<br></p><p>Gwendal<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/2b593714/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Besides — this seems like an edge case anyway. I very rarely see invocations long enough to be compelled to split it into multiple lines, and even if I would, I’d do it like this:<br>&gt; <br>&gt; 	attachmentFor(image: …,<br>&gt; 				extraParam: ….)<br></p><p>Rule: invocation may use two parameters on the same line, unless that’s too long.<br>Hack: Use the same line for poorly-named methods names that look like they came form Objective-C.<br></p><p>function(argument1: 1, argument2: true)<br></p><p>function(<br>   argument1: 1,<br>   argument2: true,<br>   argument3: &quot;Troo&quot;<br>)<br></p><p>functionWithLongName(<br>   longArgumentLabel1: longArgumentName,<br>   longArgumentLabel2: longArgumentName<br>)<br></p><p>functionNamedWrongWithArgument1(1,<br>   argument2: true,<br>   argument3: &quot;Troo&quot;<br>)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/37861df1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Le 11 févr. 2016 à 15:06, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; a écrit :<br>&gt; <br>&gt; Besides — this seems like an edge case anyway. I very rarely see invocations long enough to be compelled to split it into multiple lines, and even if I would, I’d do it like this:<br>&gt; <br>&gt; 	attachmentFor(image: …,<br>&gt; 				extraParam: ….)<br></p><p>This goes against Xcode automatic indentation: it will blow your example code into a white space chaos.<br></p><p>But maybe you are using other tools. With Xcode, a serious tool that deserves consideration as much as critics, the only pragmatic way to invoke a function using several lines is the following:<br></p><p>	attachmentFor(<br>	    image: …,<br>	    extraParam: ….)<br></p><p>Oh, and this is not an edge case. Just look at UIView animation methods.<br></p><p>Gwendal<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/5bd4364d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 4:02 AM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>[snipped]<br>&gt; <br>&gt; If such convention were to be adopted, we could throw away our favorite grep tools.<br>&gt; <br>&gt; Functions with many parameters are often more legible when their invocation is split across several lines. And generally speaking, a developer can liberally call a function on a single line, or on several lines:<br>&gt; <br>&gt; 	attachmentFor(image: …, extraParam: …)<br>&gt; 	attachmentFor(<br>&gt; 	    image: …,<br>&gt; 	    extraParam: …)<br>&gt; <br>&gt; OK so now if I want to look for all invocations of attachmentFor(image:extraParam:) in my code, I have to look for &quot;attachmentFor&quot;, and get all the unrelated results attachmentFor(data:…), attachmentFor(fileURL:…), etc.<br></p><p>The “Find&gt;References” function in Xcode will let you specifically find functions like these that differ only in their parameter labels. As I mentioned earlier in this thread, if you’re on Linux or just using different tools, you’re right: it does become a difficult problem to do it reliably.<br></p><p>—CK<br></p><p>&gt; <br>&gt; Whereas if the function were named attachmentForImage(_:extraParam:), I could look for &quot;attachmentForImage&quot;, and get much more precise search results.<br>&gt; <br>&gt; So… I’m happy people discuss how nice `attachmentFor(image:)` looks, and my opinion on how nice or ugly it looks is not my point. My point is that I want my tools to help me doing my job.<br>&gt; <br>&gt; Gwendal<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
