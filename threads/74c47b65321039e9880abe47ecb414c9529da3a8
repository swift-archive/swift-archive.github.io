<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>on Fri Jan 29 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is very cute but limited in terms of application. Recall that<br>&gt; there are several members that can be described in protocols, not just<br>&gt; method members, such as initializers, subscripts, etc. This is a nice<br>&gt; rule to have in a personal style guide, but I think it&#39;s far too<br>&gt; narrow for Apple-sourced guidance.<br></p><p>+1<br></p><p>&gt; -- E<br>&gt;<br>&gt;&gt; On Jan 28, 2016, at 9:33 PM, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For protocols named XXXble I think they should have a main method<br>&gt;&gt; named XXX. If this were adopted then many protocol names would<br>&gt;&gt; change, e.g.:<br>&gt;&gt; <br>&gt;&gt;     1. ForwardIndexType would be Advanceable because it has advance<br>&gt;&gt; methods and method successor() would be renamed advance().<br>&gt;&gt;     2. Indexable would be Subscriptable because it has a subscript method.<br>&gt;&gt;     3. Etc.<br>&gt;&gt; <br>&gt;&gt; On 29 January 2016 at 05:03, Erica Sadun via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 27, 2016, at 11:42 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Jan 27 2016, Dave<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Huh… Yeah, you’re right. I guess I saw “CollectionType” and<br>&gt;&gt;&gt;&gt; “CustomStringConvertible” or something and made a connection that<br>&gt;&gt;&gt;&gt; wasn’t there.<br>&gt;&gt;&gt;&gt; Well, FWIW, that convention (plus the occasional “HasNoun”, and<br>&gt;&gt;&gt;&gt; -ableType for constraining the element of custom collections) tends to<br>&gt;&gt;&gt;&gt; work well for me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What’s been the deciding factor between -Type and -able so far?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When there&#39;s no reasonable -able or -ible name, use -Type.<br>&gt;&gt; <br>&gt;&gt; This is where I never know whether to keep my nose out of things or<br>&gt;&gt; just jump in. I find there are generally two kinds of protocols:<br>&gt;&gt; verby-ones (&quot;this is how this thing works&quot;) and nouny-ones (&quot;this is<br>&gt;&gt; what this thing is&quot;). Here&#39;s the guidance I&#39;ve been giving:<br>&gt;&gt; <br>&gt;&gt; Swift protocols describe the surface that connect a feature provider<br>&gt;&gt; API with its consumer. Protocols establish a communication<br>&gt;&gt; contract. They ensure a fit between each required member and the<br>&gt;&gt; provider’s implementation. It’s like whether a virus can attach to a<br>&gt;&gt; host cell’s receptors, or whatever the actual biological equivalent<br>&gt;&gt; is. The standard library describes protocols using nouns (typically<br>&gt;&gt; ending in Type, e.g. MirrorPathType, MutableCollectionType,<br>&gt;&gt; ErrorType) and adjectives (typically ending in ble, like Streamable,<br>&gt;&gt; Strideable, ArrayLiteralConvertible). The former more commonly<br>&gt;&gt; discuss what a conforming type is and the latter what it does.<br>&gt;&gt; <br>&gt;&gt; When naming a protocol, you’re not limited to Type and ble<br>&gt;&gt; endings. Your protocol can be, for example, a DataProvider or a<br>&gt;&gt; FloatConsumer. A protocol can describe a relationship<br>&gt;&gt; DownloadProcessingDelegate or ListViewDataSource. You may implement<br>&gt;&gt; an OutputDestination or an IntegerSink. The current API Design<br>&gt;&gt; guidelines say &quot;omit needless words&quot;, so you might prefer to go with<br>&gt;&gt; DataProvider over DataProviderType or MirrorPath over<br>&gt;&gt; MirrorPathType, but I wouldn&#39;t give much more constraint to naming<br>&gt;&gt; beyond that.<br>&gt;&gt; <br>&gt;&gt; For example, for &quot;HasNoun&quot;, I&#39;d go with something more like NounContainingType or NounSupplier.<br>&gt;&gt; <br>&gt;&gt; Non-Abrahams Dave writes: &quot;I like -Type for protocols that can only<br>&gt;&gt; be used a generic constraint, and -able/-ible for protocols that can<br>&gt;&gt; be “concrete” types.<br>&gt;&gt; <br>&gt;&gt; And Canonical Dave replies: &quot;But that&#39;s not how they&#39;re used.  I&#39;d<br>&gt;&gt; have to rename Equatable and Comparable to follow that convention.&quot;<br>&gt;&gt; <br>&gt;&gt; I agree in that I&#39;m not convinced it&#39;s the role of a protocol to<br>&gt;&gt; describe implementation details. (I&#39;d say the same for method names,<br>&gt;&gt; but that&#39;s different thread about mutability and side effects,<br>&gt;&gt; etc). Going that way leads you to over-designated hungarian-esque<br>&gt;&gt; guidelines that I&#39;d rather keep loose, friendly, and sensible.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;   -- Howard.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
