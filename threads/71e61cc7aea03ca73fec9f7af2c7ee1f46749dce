<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/175ad9e0827a836bfb3d1d06fe3182ec?s=50"></div><header><strong>Covariance in protocol adoption</strong> from <string>Diego Sánchez</string> &lt;diego.sanchezr at gmail.com&gt;<p>February 16, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>Covariance works properly with classes:<br></p><p>class MyType {}<br>class MySubtype: MyType {}<br>class MyClass {<br>    func createMyType() -&gt; MyType {<br>        return MyType()<br>    }<br>}<br></p><p>class MySubClass: MyClass {<br>    override func createMyType() -&gt; MySubtype {<br>        return MySubtype()<br>    }<br>}<br></p><p>However it doesn&#39;t work for protocol conformance:<br></p><p>protocol MyProtocol {<br>    func createMyType() -&gt; MyType<br>}<br></p><p>class MyConformingClass: MyProtocol {<br>    func createMyType() -&gt; MySubtype {<br>        return MySubtype()<br>    }<br>}<br></p><p>Compiler error for this case:<br>error: type &#39;MyConformingClass&#39; does not conform to protocol &#39;MyProtocol&#39;<br>note: protocol requires function &#39;createMyType()&#39; with type &#39;() -&gt; MyType&#39;<br>note: candidate has non-matching type &#39;() -&gt; MySubtype&#39;<br></p><p>I know I can fix it by using associated objects in MyProtocol definition,<br>but then if I want to declare a property of type MyProtocol I have to go<br>dancing with generics everywhere.<br></p><p>Is this a known limitation/bug? Any plans to improve this?<br></p><p>Cheers,<br>Diego<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160216/71e69dce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Covariance in protocol adoption</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February 16, 2016 at 01:00:00pm</p></header><div class="content"><p>I think it’s something to do with subclasses overriding the method and potentially returning a type that’s different that what the compiler is expecting. Or something like that. <br></p><p>I hope it gets addressed at some point, though, because it drives me nuts, too.<br></p><p>&gt; On Feb 16, 2016, at 1:47 PM, Diego Sánchez via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Covariance works properly with classes:<br>&gt; class MyType {}<br>&gt; class MySubtype: MyType {}<br>&gt; <br>&gt; class MyClass {<br>&gt;     func createMyType() -&gt; MyType {<br>&gt;         return MyType()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; class MySubClass: MyClass {<br>&gt;     override func createMyType() -&gt; MySubtype {<br>&gt;         return MySubtype()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; However it doesn&#39;t work for protocol conformance:<br>&gt; <br>&gt; protocol MyProtocol {<br>&gt;     func createMyType() -&gt; MyType<br>&gt; }<br>&gt; <br>&gt; class MyConformingClass: MyProtocol {<br>&gt;     func createMyType() -&gt; MySubtype {<br>&gt;         return MySubtype()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Compiler error for this case:<br>&gt; error: type &#39;MyConformingClass&#39; does not conform to protocol &#39;MyProtocol&#39;<br>&gt; note: protocol requires function &#39;createMyType()&#39; with type &#39;() -&gt; MyType&#39;<br>&gt; note: candidate has non-matching type &#39;() -&gt; MySubtype&#39;<br>&gt; <br>&gt; I know I can fix it by using associated objects in MyProtocol definition, but then if I want to declare a property of type MyProtocol I have to go dancing with generics everywhere.<br>&gt; <br>&gt; Is this a known limitation/bug? Any plans to improve this?<br>&gt; <br>&gt; Cheers,<br>&gt; Diego<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160216/04962a09/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Covariance in protocol adoption</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>February 16, 2016 at 12:00:00pm</p></header><div class="content"><p>Swift 3.0 will bring many changes to protocols. I expect these issues will<br>be discussed a lot more once 2.2 is shipped.<br></p><p>-david<br></p><p>On Tue, Feb 16, 2016 at 11:54 AM, David Sweeris via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I think it’s something to do with subclasses overriding the method and<br>&gt; potentially returning a type that’s different that what the compiler is<br>&gt; expecting. Or something like that.<br>&gt;<br>&gt; I hope it gets addressed at some point, though, because it drives me nuts,<br>&gt; too.<br>&gt;<br>&gt; On Feb 16, 2016, at 1:47 PM, Diego Sánchez via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; Covariance works properly with classes:<br>&gt;<br>&gt; class MyType {}<br>&gt; class MySubtype: MyType {}<br>&gt; class MyClass {<br>&gt;     func createMyType() -&gt; MyType {<br>&gt;         return MyType()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; class MySubClass: MyClass {<br>&gt;     override func createMyType() -&gt; MySubtype {<br>&gt;         return MySubtype()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; However it doesn&#39;t work for protocol conformance:<br>&gt;<br>&gt; protocol MyProtocol {<br>&gt;     func createMyType() -&gt; MyType<br>&gt; }<br>&gt;<br>&gt; class MyConformingClass: MyProtocol {<br>&gt;     func createMyType() -&gt; MySubtype {<br>&gt;         return MySubtype()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Compiler error for this case:<br>&gt; error: type &#39;MyConformingClass&#39; does not conform to protocol &#39;MyProtocol&#39;<br>&gt; note: protocol requires function &#39;createMyType()&#39; with type &#39;() -&gt; MyType&#39;<br>&gt; note: candidate has non-matching type &#39;() -&gt; MySubtype&#39;<br>&gt;<br>&gt; I know I can fix it by using associated objects in MyProtocol definition,<br>&gt; but then if I want to declare a property of type MyProtocol I have to go<br>&gt; dancing with generics everywhere.<br>&gt;<br>&gt; Is this a known limitation/bug? Any plans to improve this?<br>&gt;<br>&gt; Cheers,<br>&gt; Diego<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160216/9d5091de/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Covariance in protocol adoption</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 16, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 16, 2016, at 11:47 AM, Diego Sánchez via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is this a known limitation/bug? Any plans to improve this?<br>&gt; <br>Yeah, this is a known limitation we&#39;d like to address some day.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160216/2b47cf58/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
