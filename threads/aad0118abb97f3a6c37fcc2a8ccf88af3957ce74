<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>What exactly does it mean for a Swift pointer to be initialized?</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>August  5, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;m trying to understand the new Swift 3 (4?) pointer API and Swift&#39;s<br>memory model.<br></p><p>More specifically, I&#39;d like to know more about what exactly it means for a<br>pointer to be initialized or not.<br></p><p>For example, I suppose the following code example doesn&#39;t satisfy the<br>precondition in the subscript documentation (ie floatsPtr not being<br>initialized when using its subscript):<br></p><p>let numFloats = 123<br>let floatsPtr = UnsafeMutablePointer&lt;Float&gt;.allocate(capacity: numFloats)<br>for i in 0 ..&lt; numFloats { floatsPtr[i] = Float(i) * 0.1 } // Setting values<br>for i in 0 ..&lt; numFloats { print(floatsPtr[i]) } // Getting values<br>floatsPtr.deallocate(capacity: numFloats)<br></p><p>I&#39;d like to understand why/how this could lead to undefined behavior, and<br>what exactly it means for a pointer to be initialized or not.<br></p><p>I&#39;ve read<br>https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br></p><p>But I don&#39;t feel that I fully understand what it means for a pointer to be<br>initialized, or bound, and if the preconditions and rules for undef<br>behavior are the same no matter if Pointee is a trivial type or a class<br>type.<br></p><p>/Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160805/aad0ce74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>What exactly does it mean for a Swift pointer to be initialized?</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>August  5, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Aug 5, 2016, at 12:43 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m trying to understand the new Swift 3 (4?) pointer API and Swift&#39;s memory model.<br>&gt; <br>&gt; More specifically, I&#39;d like to know more about what exactly it means for a pointer to be initialized or not.<br>&gt; <br>&gt; For example, I suppose the following code example doesn&#39;t satisfy the precondition in the subscript documentation (ie floatsPtr not being initialized when using its subscript):<br>&gt; <br>&gt; let numFloats = 123<br>&gt; let floatsPtr = UnsafeMutablePointer&lt;Float&gt;.allocate(capacity: numFloats)<br>&gt; for i in 0 ..&lt; numFloats { floatsPtr[i] = Float(i) * 0.1 } // Setting values<br>&gt; for i in 0 ..&lt; numFloats { print(floatsPtr[i]) } // Getting values<br>&gt; floatsPtr.deallocate(capacity: numFloats)<br>&gt; <br>&gt; I&#39;d like to understand why/how this could lead to undefined behavior, and what exactly it means for a pointer to be initialized or not.<br>&gt; <br>&gt; I&#39;ve read https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt; <br>&gt; But I don&#39;t feel that I fully understand what it means for a pointer to be initialized, or bound, and if the preconditions and rules for undef behavior are the same no matter if Pointee is a trivial type or a class type. <br></p><p>I think it’s common practice to initialize trivial types via subscript assignment. Earlier versions of the proposal actually showed examples of this and claimed that it was valid pattern. However, during review those examples were removed because it encouraged bad practice and complicated the issue.<br></p><p>The fact is, code like this is not going to break anything in the compiler and it’s common enough that any model model verifier is going to need to special-case trivial types. I think it would be fine to rewrite the subscript precondition as follows:<br></p><p>/// - Precondition: the pointee at `self + i` is initialized.<br>should read<br>/// - Precondition: either the pointee at `self + i` is initialized<br>///   or `Pointee` is a trivial type.<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#trivial-types<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160805/bb3780ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>What exactly does it mean for a Swift pointer to be initialized?</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>August  5, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks, +1 for rewriting it like that.<br>/Jens<br></p><p>On Fri, Aug 5, 2016 at 9:58 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Aug 5, 2016, at 12:43 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt;<br>&gt; I&#39;m trying to understand the new Swift 3 (4?) pointer API and Swift&#39;s<br>&gt; memory model.<br>&gt;<br>&gt; More specifically, I&#39;d like to know more about what exactly it means for a<br>&gt; pointer to be initialized or not.<br>&gt;<br>&gt; For example, I suppose the following code example doesn&#39;t satisfy the<br>&gt; precondition in the subscript documentation (ie floatsPtr not being<br>&gt; initialized when using its subscript):<br>&gt;<br>&gt; let numFloats = 123<br>&gt; let floatsPtr = UnsafeMutablePointer&lt;Float&gt;.allocate(capacity: numFloats)<br>&gt; for i in 0 ..&lt; numFloats { floatsPtr[i] = Float(i) * 0.1 } // Setting<br>&gt; values<br>&gt; for i in 0 ..&lt; numFloats { print(floatsPtr[i]) } // Getting values<br>&gt; floatsPtr.deallocate(capacity: numFloats)<br>&gt;<br>&gt; I&#39;d like to understand why/how this could lead to undefined behavior, and<br>&gt; what exactly it means for a pointer to be initialized or not.<br>&gt;<br>&gt; I&#39;ve read https://github.com/apple/swift-evolution/blob/master/<br>&gt; proposals/0107-unsaferawpointer.md<br>&gt;<br>&gt; But I don&#39;t feel that I fully understand what it means for a pointer to be<br>&gt; initialized, or bound, and if the preconditions and rules for undef<br>&gt; behavior are the same no matter if Pointee is a trivial type or a class<br>&gt; type.<br>&gt;<br>&gt;<br>&gt; I think it’s common practice to initialize trivial types via subscript<br>&gt; assignment. Earlier versions of the proposal actually showed examples of<br>&gt; this and claimed that it was valid pattern. However, during review those<br>&gt; examples were removed because it encouraged bad practice and complicated<br>&gt; the issue.<br>&gt;<br>&gt; The fact is, code like this is not going to break anything in the compiler<br>&gt; and it’s common enough that any model model verifier is going to need to<br>&gt; special-case trivial types. I think it would be fine to rewrite the<br>&gt; subscript precondition as follows:<br>&gt;<br>&gt; /// - Precondition: the pointee at `self + i` is initialized.<br>&gt; should read<br>&gt; /// - Precondition: either the pointee at `self + i` is initialized<br>&gt; ///   or `Pointee` is a trivial type.<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-<br>&gt; unsaferawpointer.md#trivial-types<br>&gt;<br>&gt; -Andy<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160805/821a5dd0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
