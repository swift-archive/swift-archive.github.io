<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Pitch] Clarify behavior of comments near operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>December 20, 2015 at 02:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>Following a discussion on swift-dev &lt;https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151214/000348.html&gt; about bug SR-186 &lt;https://bugs.swift.org/browse/SR-186&gt;, I would like to propose a rule about how Swift should handle comments next to operators in order to make it clear how to resolve some existing bugs &amp; inconsistencies.<br></p><p>Please take a look at the pseudo-proposal below. I believe it is in line with the current intention of the language reference, but I’m interested in hearing differing opinions. Also, most of the cases in which this comes up are pretty contrived, so I’d love to hear if anyone has any common/important cases where this makes a difference.<br></p><p>Thanks,<br>Jesse<br></p><p><br>Background<br></p><p>At the moment, comments next to operators are generally treated as non-whitespace for the purpose of determining whether an operator is prefix/postfix/binary &lt;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID418&gt;, meaning that this fails to compile:<br></p><p>if /* comment */!foo { … }<br></p><p>Because the “!” is parsed as binary operator (no whitespace on either side), rather than as a prefix operator, which seems undesirable. This behavior is also not consistently applied. For example, this currently works:<br></p><p>1 +/* comment */2<br></p><p>(I believe this is unintentional; the &quot;+/*&quot; is treated as one token and sees the whitespace to its right.)<br></p><p>In order to resolve these issues, we need a general rule about how this is expected to behave.<br></p><p>Proposed changes<br></p><p>Comments should be treated as whitespace for all of the purposes in the “operators” section of the swift language reference: determining whether an operator is binary, prefix, or postfix, as well as the special rules around the “!” and “?” predefined operators.<br></p><p>Impact on existing code<br></p><p>Only code with comments immediately next to operators will be affected. This is not expected to be very common, and could be fixed by adding a space next to the operator in question or moving the comment outside of the expression. It would probably be possible to produce fix-its for these, though I’m not sure it’s worth it. Here are some examples of the changes.<br></p><p>Some cases which were previously errors will now work:<br></p><p>/* */!foo<br>1/**/+ 2<br>1 /**/+ 2<br>1 +/*hi*/2<br></p><p>Some cases which would previously work will now error (these are breaking changes):<br></p><p>foo/* */?.description<br>foo/* */!<br>1/**/+2<br>1+/**/2<br></p><p>Examples of things which will continue to be errors:<br></p><p>!/* */foo<br>1+/* */2<br></p><p>And things which will continue to work:<br></p><p>foo!// this is dangerous<br>1 +/**/ 2<br>1 +/* hi */2<br></p><p>Alternatives considered<br></p><p>We could instead specify that comments are treated as though they are not present. This more-closely matches some people’s mental model of comments. However, it is harder to describe (the characters are not removed entirely as they still separate tokens) and goes against the current general rule in the language reference that comments are whitespace.<br></p><p>This also has the disadvantage that you have to look at the other side of a comment to determine if an operator has whitespace around it. For example:<br></p><p>a = 1 +/* a very long comment */2<br></p><p>You can’t tell just by looking near the “+” whether it is a binary or prefix operator. <br></p><p>Another alternative is a more precise rule about how comments are handled everywhere in the language (e.g. there must be no effect when replacing a comment with a space character). This has the advantage of possibly resolving other ambiguities, but has potentially far-reaching consequences in various edge cases (for example, multi-line comments which span lines are currently treated as end-of-line). <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/5c0032ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Clarify behavior of comments near operators</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 21, 2015 at 12:00:00pm</p></header><div class="content"><p>After looking at all your examples, I think I prefer &quot;comments are not there&quot; with a possible &quot;multi-line comments are treated like newlines&quot; extension. But either way I think having an actual model here and sticking to it is an improvement!<br></p><p>Jordan<br></p><p>&gt; On Dec 20, 2015, at 11:55 , Jesse Rusak via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Following a discussion on swift-dev &lt;https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151214/000348.html&gt; about bug SR-186 &lt;https://bugs.swift.org/browse/SR-186&gt;, I would like to propose a rule about how Swift should handle comments next to operators in order to make it clear how to resolve some existing bugs &amp; inconsistencies.<br>&gt; <br>&gt; Please take a look at the pseudo-proposal below. I believe it is in line with the current intention of the language reference, but I’m interested in hearing differing opinions. Also, most of the cases in which this comes up are pretty contrived, so I’d love to hear if anyone has any common/important cases where this makes a difference.<br>&gt; <br>&gt; Thanks,<br>&gt; Jesse<br>&gt; <br>&gt; <br>&gt; Background<br>&gt; <br>&gt; At the moment, comments next to operators are generally treated as non-whitespace for the purpose of determining whether an operator is prefix/postfix/binary &lt;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID418&gt;, meaning that this fails to compile:<br>&gt; <br>&gt; if /* comment */!foo { … }<br>&gt; <br>&gt; Because the “!” is parsed as binary operator (no whitespace on either side), rather than as a prefix operator, which seems undesirable. This behavior is also not consistently applied. For example, this currently works:<br>&gt; <br>&gt; 1 +/* comment */2<br>&gt; <br>&gt; (I believe this is unintentional; the &quot;+/*&quot; is treated as one token and sees the whitespace to its right.)<br>&gt; <br>&gt; In order to resolve these issues, we need a general rule about how this is expected to behave.<br>&gt; <br>&gt; Proposed changes<br>&gt; <br>&gt; Comments should be treated as whitespace for all of the purposes in the “operators” section of the swift language reference: determining whether an operator is binary, prefix, or postfix, as well as the special rules around the “!” and “?” predefined operators.<br>&gt; <br>&gt; Impact on existing code<br>&gt; <br>&gt; Only code with comments immediately next to operators will be affected. This is not expected to be very common, and could be fixed by adding a space next to the operator in question or moving the comment outside of the expression. It would probably be possible to produce fix-its for these, though I’m not sure it’s worth it. Here are some examples of the changes.<br>&gt; <br>&gt; Some cases which were previously errors will now work:<br>&gt; <br>&gt; /* */!foo<br>&gt; 1/**/+ 2<br>&gt; 1 /**/+ 2<br>&gt; 1 +/*hi*/2<br>&gt; <br>&gt; Some cases which would previously work will now error (these are breaking changes):<br>&gt; <br>&gt; foo/* */?.description<br>&gt; foo/* */!<br>&gt; 1/**/+2<br>&gt; 1+/**/2<br>&gt; <br>&gt; Examples of things which will continue to be errors:<br>&gt; <br>&gt; !/* */foo<br>&gt; 1+/* */2<br>&gt; <br>&gt; And things which will continue to work:<br>&gt; <br>&gt; foo!// this is dangerous<br>&gt; 1 +/**/ 2<br>&gt; 1 +/* hi */2<br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; We could instead specify that comments are treated as though they are not present. This more-closely matches some people’s mental model of comments. However, it is harder to describe (the characters are not removed entirely as they still separate tokens) and goes against the current general rule in the language reference that comments are whitespace.<br>&gt; <br>&gt; This also has the disadvantage that you have to look at the other side of a comment to determine if an operator has whitespace around it. For example:<br>&gt; <br>&gt; a = 1 +/* a very long comment */2<br>&gt; <br>&gt; You can’t tell just by looking near the “+” whether it is a binary or prefix operator. <br>&gt; <br>&gt; Another alternative is a more precise rule about how comments are handled everywhere in the language (e.g. there must be no effect when replacing a comment with a space character). This has the advantage of possibly resolving other ambiguities, but has potentially far-reaching consequences in various edge cases (for example, multi-line comments which span lines are currently treated as end-of-line). <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/d580e0e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Pitch] Clarify behavior of comments near operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>December 21, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 3:18 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; After looking at all your examples, I think I prefer &quot;comments are not there&quot; with a possible &quot;multi-line comments are treated like newlines&quot; extension. But either way I think having an actual model here and sticking to it is an improvement!<br></p><p>Thanks for your thoughts! To be clear, are you suggesting “comments are not there” for the purposes of whitespace near operators, or as part of a more-general rule to be applied everywhere? (i.e. do you mean the first or second of the alternatives I listed?)<br></p><p>- Jesse<br></p><p>&gt;&gt; On Dec 20, 2015, at 11:55 , Jesse Rusak via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; Following a discussion on swift-dev &lt;https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151214/000348.html&gt; about bug SR-186 &lt;https://bugs.swift.org/browse/SR-186&gt;, I would like to propose a rule about how Swift should handle comments next to operators in order to make it clear how to resolve some existing bugs &amp; inconsistencies.<br>&gt;&gt; <br>&gt;&gt; Please take a look at the pseudo-proposal below. I believe it is in line with the current intention of the language reference, but I’m interested in hearing differing opinions. Also, most of the cases in which this comes up are pretty contrived, so I’d love to hear if anyone has any common/important cases where this makes a difference.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Jesse<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Background<br>&gt;&gt; <br>&gt;&gt; At the moment, comments next to operators are generally treated as non-whitespace for the purpose of determining whether an operator is prefix/postfix/binary &lt;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID418&gt;, meaning that this fails to compile:<br>&gt;&gt; <br>&gt;&gt; if /* comment */!foo { … }<br>&gt;&gt; <br>&gt;&gt; Because the “!” is parsed as binary operator (no whitespace on either side), rather than as a prefix operator, which seems undesirable. This behavior is also not consistently applied. For example, this currently works:<br>&gt;&gt; <br>&gt;&gt; 1 +/* comment */2<br>&gt;&gt; <br>&gt;&gt; (I believe this is unintentional; the &quot;+/*&quot; is treated as one token and sees the whitespace to its right.)<br>&gt;&gt; <br>&gt;&gt; In order to resolve these issues, we need a general rule about how this is expected to behave.<br>&gt;&gt; <br>&gt;&gt; Proposed changes<br>&gt;&gt; <br>&gt;&gt; Comments should be treated as whitespace for all of the purposes in the “operators” section of the swift language reference: determining whether an operator is binary, prefix, or postfix, as well as the special rules around the “!” and “?” predefined operators.<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; Only code with comments immediately next to operators will be affected. This is not expected to be very common, and could be fixed by adding a space next to the operator in question or moving the comment outside of the expression. It would probably be possible to produce fix-its for these, though I’m not sure it’s worth it. Here are some examples of the changes.<br>&gt;&gt; <br>&gt;&gt; Some cases which were previously errors will now work:<br>&gt;&gt; <br>&gt;&gt; /* */!foo<br>&gt;&gt; 1/**/+ 2<br>&gt;&gt; 1 /**/+ 2<br>&gt;&gt; 1 +/*hi*/2<br>&gt;&gt; <br>&gt;&gt; Some cases which would previously work will now error (these are breaking changes):<br>&gt;&gt; <br>&gt;&gt; foo/* */?.description<br>&gt;&gt; foo/* */!<br>&gt;&gt; 1/**/+2<br>&gt;&gt; 1+/**/2<br>&gt;&gt; <br>&gt;&gt; Examples of things which will continue to be errors:<br>&gt;&gt; <br>&gt;&gt; !/* */foo<br>&gt;&gt; 1+/* */2<br>&gt;&gt; <br>&gt;&gt; And things which will continue to work:<br>&gt;&gt; <br>&gt;&gt; foo!// this is dangerous<br>&gt;&gt; 1 +/**/ 2<br>&gt;&gt; 1 +/* hi */2<br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; We could instead specify that comments are treated as though they are not present. This more-closely matches some people’s mental model of comments. However, it is harder to describe (the characters are not removed entirely as they still separate tokens) and goes against the current general rule in the language reference that comments are whitespace.<br>&gt;&gt; <br>&gt;&gt; This also has the disadvantage that you have to look at the other side of a comment to determine if an operator has whitespace around it. For example:<br>&gt;&gt; <br>&gt;&gt; a = 1 +/* a very long comment */2<br>&gt;&gt; <br>&gt;&gt; You can’t tell just by looking near the “+” whether it is a binary or prefix operator. <br>&gt;&gt; <br>&gt;&gt; Another alternative is a more precise rule about how comments are handled everywhere in the language (e.g. there must be no effect when replacing a comment with a space character). This has the advantage of possibly resolving other ambiguities, but has potentially far-reaching consequences in various edge cases (for example, multi-line comments which span lines are currently treated as end-of-line). <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/d93ca709/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Clarify behavior of comments near operators</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 22, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 19:23, Jesse Rusak &lt;me at jesserusak.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 3:18 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; After looking at all your examples, I think I prefer &quot;comments are not there&quot; with a possible &quot;multi-line comments are treated like newlines&quot; extension. But either way I think having an actual model here and sticking to it is an improvement!<br>&gt; <br>&gt; Thanks for your thoughts! To be clear, are you suggesting “comments are not there” for the purposes of whitespace near operators, or as part of a more-general rule to be applied everywhere? (i.e. do you mean the first or second of the alternatives I listed?)<br></p><p>I&#39;m not sure how your two alternatives map to these options, but I think the model I like has<br></p><p>foo/*abc*/!<br></p><p>as a postfix &#39;!&#39;. I&#39;m not sure if I want to count<br></p><p>foo/*abc<br>*/+ bar<br></p><p>as an infix &#39;+&#39;, as an error, or as a de-facto line continuation mechanism (making a postfix &#39;+&#39;). I do agree it&#39;s important to pick something.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151222/509ab0c6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Pitch] Clarify behavior of comments near operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>December 28, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 22, 2015, at 1:39 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 19:23, Jesse Rusak &lt;me at jesserusak.com &lt;mailto:me at jesserusak.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 21, 2015, at 3:18 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; After looking at all your examples, I think I prefer &quot;comments are not there&quot; with a possible &quot;multi-line comments are treated like newlines&quot; extension. But either way I think having an actual model here and sticking to it is an improvement!<br>&gt;&gt; <br>&gt;&gt; Thanks for your thoughts! To be clear, are you suggesting “comments are not there” for the purposes of whitespace near operators, or as part of a more-general rule to be applied everywhere? (i.e. do you mean the first or second of the alternatives I listed?)<br>&gt; <br>&gt; I&#39;m not sure how your two alternatives map to these options, but I think the model I like has<br>&gt; <br>&gt; foo/*abc*/!<br>&gt; <br>&gt; as a postfix &#39;!&#39;. I&#39;m not sure if I want to count<br>&gt; <br>&gt; foo/*abc<br>&gt; */+ bar<br>&gt; <br>&gt; as an infix &#39;+&#39;, as an error, or as a de-facto line continuation mechanism (making a postfix &#39;+&#39;). I do agree it&#39;s important to pick something.<br></p><p>I’ve spent some more time thinking about this. I think that “comments are whitespace” is a simpler model, but I do think it’s more surprising for many people, and (as Chris pointed out earlier) is less flexible, since you can always add whitespace next to a comment if you want it. So, I think I’m coming around to the “comments are not there” behavior. <br></p><p>For your latter example, my feeling is that having the *content* of a comment affect the parsing of the surrounding code (i.e. treating your last example as an error or infix +) is surprising. For example, it would surprise me that this works:<br></p><p>a+/* something */b<br></p><p>but this doesn’t:<br></p><p>a+/* something <br>       something */b<br></p><p>So, I think I’ll write up a draft proposal with the “comments are not there” behavior and see how it looks.<br></p><p>- Jesse<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151228/c771ebae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Pitch] Clarify behavior of comments near operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>December 28, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 28, 2015, at 11:49 AM, Jesse Rusak &lt;me at jesserusak.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 22, 2015, at 1:39 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 21, 2015, at 19:23, Jesse Rusak &lt;me at jesserusak.com &lt;mailto:me at jesserusak.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 21, 2015, at 3:18 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; After looking at all your examples, I think I prefer &quot;comments are not there&quot; with a possible &quot;multi-line comments are treated like newlines&quot; extension. But either way I think having an actual model here and sticking to it is an improvement!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for your thoughts! To be clear, are you suggesting “comments are not there” for the purposes of whitespace near operators, or as part of a more-general rule to be applied everywhere? (i.e. do you mean the first or second of the alternatives I listed?)<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure how your two alternatives map to these options, but I think the model I like has<br>&gt;&gt; <br>&gt;&gt; foo/*abc*/!<br>&gt;&gt; <br>&gt;&gt; as a postfix &#39;!&#39;. I&#39;m not sure if I want to count<br>&gt;&gt; <br>&gt;&gt; foo/*abc<br>&gt;&gt; */+ bar<br>&gt;&gt; <br>&gt;&gt; as an infix &#39;+&#39;, as an error, or as a de-facto line continuation mechanism (making a postfix &#39;+&#39;). I do agree it&#39;s important to pick something.<br>&gt; <br>&gt; I’ve spent some more time thinking about this. I think that “comments are whitespace” is a simpler model, but I do think it’s more surprising for many people, and (as Chris pointed out earlier) is less flexible, since you can always add whitespace next to a comment if you want it. So, I think I’m coming around to the “comments are not there” behavior. <br>&gt; <br>&gt; For your latter example, my feeling is that having the *content* of a comment affect the parsing of the surrounding code (i.e. treating your last example as an error or infix +) is surprising. For example, it would surprise me that this works:<br>&gt; <br>&gt; a+/* something */b<br>&gt; <br>&gt; but this doesn’t:<br>&gt; <br>&gt; a+/* something <br>&gt;        something */b<br>&gt; <br>&gt; So, I think I’ll write up a draft proposal with the “comments are not there” behavior and see how it looks.<br></p><p>And here’s the draft proposal: https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md<br></p><p>- Jesse<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151228/c7f36244/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
