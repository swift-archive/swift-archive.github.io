<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30531676aaa28c283443b2bbe04e1a7b?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Alexey Demedetskiy</string> &lt;dalog at me.com&gt;<p>February 12, 2016 at 09:00:00am</p></header><div class="content"><p>I would like to read it exactly opposite :)<br></p><p>func addInt(inout a: Int, inout b: Int) <br>addInt(inout a, inout b)<br></p><p>But +1 for unified semantic anyway.<br></p><p>&gt; func addInt(a:&amp;Int, b:&amp;Int)<br>&gt; addInt(&amp;a,&amp;b)<br></p><p>&gt; Cc:&quot;swift-evolution at swift.org&quot;&lt;swift-evolution at swift.org&gt;<br>&gt; Subject:[swift-evolution] thoughts on &#39;inout&#39;<br>&gt; Date:12 февраля 2016 г., 01:51:10 GMT+2<br>&gt; <br>&gt; <br>&gt; If we were to change stuff for greater conciseness, don’t you think<br>&gt; <br>&gt; func addInt(a:&amp;Int, b:&amp;Int)<br>&gt; addInt(&amp;a,&amp;b)<br>&gt; <br>&gt; would be a less confusing solution than messing with : and = ?<br>&gt; — Radek<br>&gt; &gt; On 12 Feb 2016, at 00:17, Oliver M via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; Regarding In-Out Parameters:<br>&gt; &gt; <br>&gt; &gt; My gut reaction to typing &#39;inout&#39; in front of every parameter I want to call by reference is that it makes code look rather waffly.<br>&gt; &gt; <br>&gt; &gt; So I&#39;m reflecting an idea on this:<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Use = to assign values.<br>&gt; &gt; <br>&gt; &gt; Use : to associate variables.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; A function declaration would look like this:<br>&gt; &gt; <br>&gt; &gt; func addInt(add intToAdd = Int, to counterInt : Int ) {<br>&gt; &gt; counterInt += intToAdd<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Here is example code for a game of &#39;think of a number&#39; where you pick a random number and do some basic maths on it.<br>&gt; &gt; <br>&gt; &gt; //declare the function<br>&gt; &gt; <br>&gt; &gt; func multiplyAdd(multiplyBy intToMultiply = Int, add intToAdd = Int, toNumber pickedInt : Int) {<br>&gt; &gt; pickedInt*= intToMultiply<br>&gt; &gt; pickedInt+= intToAdd<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; //declare some variables<br>&gt; &gt; <br>&gt; &gt; var multiplier = 2<br>&gt; &gt; var adder = 3<br>&gt; &gt; var pickNumber = 4<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; //call the function<br>&gt; &gt; <br>&gt; &gt; multiplyAdd(multiplyBy = multiplier, add = adder, toNumber : pickNumber)<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; It takes a little getting used to, but it does look quite clean.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/56cb5a1cac292ddd8f5688fc031e0103?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Oliver M</string> &lt;selectedfordeletion at yahoo.com&gt;<p>February 12, 2016 at 09:00:00pm</p></header><div class="content"><p>@Brent Royal-GordonThe code below is with different spacing for = and : so it should look more distinguishable and familiar.I&#39;m not sure what you mean by heavier and lighter.I&#39;ve never looked at the statement var a = 7and wished I could use a lighter : instead of the =(did I understand you correctly on this point?)inout parameters are not rare in my code. I&#39;d say they are about as common as only in parameters,and even then, the vast majority of my functions have them. <br></p><p><br></p><p>//main body code:<br>expandFibonacciSequence(inArray: fibonacciArray, by = 100)<br>combine(transform = localTransform, withTransform = parentTransform, toOutput: globalTransform) <br>addNoise(toColours: colourArray, withMaxRandomFactor = 0.05, outputColours: noisyColourArray)<br></p><p><br></p><p>//the corresponding function declarations:<br>expandFibonacciSequence(inArray numberArray: [Ints], by maxAdditions = Int) { var inCount = numberArray.count  for addIndex in 0…(maxAdditions - 1) { numberArray[inCount + addIndex] = numberArray[inCount + addIndex - 1] + numberArray[inCount + addIndex - 2] }}<br></p><p>addNoise(toColours originalColours: [Double], withMaxRandomFactor maxFactor = 0.05, outputColours newColours: [Double]) { //the originalColours array is passed by reference (associated variable) to keep memory usage low.<br> let numOfColours = originalColours.count for index in 0…numOfColours { let randomNumber = drand48() * maxFactor - maxFactor/2 newColours[index] = originalColours[index] + randomNumber }}<br></p><p>combine(transform localMatrix = [double], withTransform parentMatrix = [double], toOutput outputMatrix: [double]) {  outputMatrix[0] = localMatrix[0] * parentMatrix[0] + localMatrix[1] * parentMatrix[4] + localMatrix[2] * parentMatrix[8] + localMatrix[3] * parentMatrix[12]  outputMatrix[1] = localMatrix[0] * parentMatrix[1] + localMatrix[1] * parentMatrix[5] + localMatrix[2] * parentMatrix[9] + localMatrix[3] * parentMatrix[13]  //outputMatrix[2] ... //outputMatrix[3] … //outputMatrix[4] ... //and so on } <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/a6f2d40b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; I&#39;m not sure what you mean by heavier and lighter.<br>&gt; I&#39;ve never looked at the statement <br>&gt; var a = 7<br>&gt; and wished I could use a lighter : instead of the =<br>&gt; (did I understand you correctly on this point?)<br></p><p>What I mean is that `:` is visually &quot;smaller&quot; than `=`; when you&#39;re reading code, it shows up less prominently. That means colon is better suited for the more common and less dangerous role of marking in-only parameters.<br></p><p>&gt; inout parameters are not rare in my code. I&#39;d say they are about as common as only in parameters,<br>&gt; and even then, the vast majority of my functions have them. <br></p><p>Then I think you&#39;re writing in a fairly unusual style, which may explain the disconnect. Most Swift code I&#39;ve seen uses inout parameters very rarely—perhaps one function in fifty will have an inout parameter. <br></p><p>Are you sure that using inout instead of passing, modifying, and returning the arrays is gaining you anything? Swift arrays are backed by copy-on-write storage, so in theory with optimizations enabled you might not not need to copy the data in a pass-and-assign-back pattern. If this were the case, it would probably only show up in optimized builds, not debug builds.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
