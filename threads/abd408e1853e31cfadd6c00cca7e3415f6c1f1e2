<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June 25, 2016 at 12:00:00am</p></header><div class="content"><p>I’ve implemented a linked list. Now I’d like to be able to view the elements of a linked list in the debugger just like with an array. In the debugger, an array is represented like this:<br></p><p>[0] = the first element<br>[1] = the second element<br>etc<br></p><p>I wonder if I can do the same for my linked list. I already implemented CustomReflectable, so the code `dump(myLinkedList)` shows this in the console:<br></p><p>3 elements<br>  - first element<br>  - second elements<br>  - third element<br></p><p>I thought this would also change the appearance of my linked list in the debugger, but unfortunately it’s unchanged. Is there a way to do what I’m trying to do?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 26, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 3:53 PM, Tim Vermeulen via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; I’ve implemented a linked list. Now I’d like to be able to view the elements of a linked list in the debugger just like with an array. In the debugger, an array is represented like this:<br>&gt;<br>&gt; [0] = the first element<br>&gt; [1] = the second element<br>&gt; etc<br>&gt;<br>&gt; I wonder if I can do the same for my linked list. I already implemented CustomReflectable, so the code `dump(myLinkedList)` shows this in the console:<br>&gt;<br>&gt; 3 elements<br>&gt;   - first element<br>&gt;   - second elements<br>&gt;   - third element<br>&gt;<br>&gt; I thought this would also change the appearance of my linked list in the debugger, but unfortunately it’s unchanged. Is there a way to do what I’m trying to do?<br></p><p>Try setting &quot;displayStyle: .collection&quot; when you call the Mirror initializer.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June 27, 2016 at 02:00:00am</p></header><div class="content"><p>I already did that, sorry for not providing any code. Take this as an example:<br></p><p>public struct Wrapper&lt;Element&gt; {<br>    <br>    private var elements: [Element]<br>    <br>    public init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ sequence: S) {<br>        elements = [Element](sequence)<br>    }<br>    <br>}<br></p><p>extension Wrapper: Collection {<br>    <br>    public var startIndex: Int { return elements.startIndex }<br>    public var endIndex: Int { return elements.endIndex }<br>    <br>    public func index(after index: Int) -&gt; Int {<br>        return index + 1<br>    }<br>    <br>    public subscript(position: Int) -&gt; Element {<br>        return elements[position]<br>    }<br>    <br>}<br></p><p>extension Wrapper: CustomReflectable {<br>    <br>    public var customMirror: Mirror {<br>        return Mirror(self, unlabeledChildren: self, displayStyle: .collection)<br>    }<br>    <br>}<br></p><p>If I debug an instance of this Wrapper type, then Xcode’s Variables View will show<br></p><p>▿ wrapper<br>  ▿ elements = x values<br>    [0] = 0<br>    [1] = …<br></p><p>But the `elements` property is an implementation detail. What I would really want to see is this:<br></p><p>▿ wrapper = x values<br>  [0] = 0<br>  [1] = …<br></p><p>But I’m not sure if this is even possible. That’s basically why I’m asking this. Hopefully it’s clearer now :)<br></p><p>One last thing to note, the code `dump(wrapper)` will print<br></p><p>▿ 3 elements<br>  - 1<br>  - 2<br>  - 3<br></p><p>to the console, which is good. If I don’t implement CustomReflectable, then `dump(wrapper)` will show this:<br></p><p>▿ Wrapper&lt;Swift.Int&gt;<br>  ▿ elements: 3 elements<br>    - 1<br>    - 2<br>    - 3<br></p><p>So my CustomReflectable conformance is definitely doing something, but I would like to see the results in the variables view as well.<br></p><p>&gt; On 27 Jun 2016, at 01:40, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 24, 2016 at 3:53 PM, Tim Vermeulen via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; I’ve implemented a linked list. Now I’d like to be able to view the elements of a linked list in the debugger just like with an array. In the debugger, an array is represented like this:<br>&gt;&gt; <br>&gt;&gt; [0] = the first element<br>&gt;&gt; [1] = the second element<br>&gt;&gt; etc<br>&gt;&gt; <br>&gt;&gt; I wonder if I can do the same for my linked list. I already implemented CustomReflectable, so the code `dump(myLinkedList)` shows this in the console:<br>&gt;&gt; <br>&gt;&gt; 3 elements<br>&gt;&gt;  - first element<br>&gt;&gt;  - second elements<br>&gt;&gt;  - third element<br>&gt;&gt; <br>&gt;&gt; I thought this would also change the appearance of my linked list in the debugger, but unfortunately it’s unchanged. Is there a way to do what I’m trying to do?<br>&gt; <br>&gt; Try setting &quot;displayStyle: .collection&quot; when you call the Mirror initializer.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160627/1e9b36bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>June 26, 2016 at 09:00:00pm</p></header><div class="content"><p>On Sun, Jun 26, 2016 at 5:03 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; I already did that, sorry for not providing any code. Take this as an<br>&gt; example:<br>&gt;<br>&gt; public struct Wrapper&lt;Element&gt; {<br>&gt;<br>&gt;     private var elements: [Element]<br>&gt;<br>&gt;     public init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ sequence:<br>&gt; S) {<br>&gt;         elements = [Element](sequence)<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; extension Wrapper: Collection {<br>&gt;<br>&gt;     public var startIndex: Int { return elements.startIndex }<br>&gt;     public var endIndex: Int { return elements.endIndex }<br>&gt;<br>&gt;     public func index(after index: Int) -&gt; Int {<br>&gt;         return index + 1<br>&gt;     }<br>&gt;<br>&gt;     public subscript(position: Int) -&gt; Element {<br>&gt;         return elements[position]<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; extension Wrapper: CustomReflectable {<br>&gt;<br>&gt;     public var customMirror: Mirror {<br>&gt;         return Mirror(self, unlabeledChildren: self, displayStyle:<br>&gt; .collection)<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; If I debug an instance of this Wrapper type, then Xcode’s Variables View<br>&gt; will show<br>&gt;<br>&gt; ▿ wrapper<br>&gt;   ▿ elements = x values<br>&gt;     [0] = 0<br>&gt;     [1] = …<br></p><p>I see.  I&#39;m not sure there&#39;s a way to hide anything from Xcode&#39;s variables view.<br></p><p>+Enrico.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/150165bdd736d49ea3773df671eb3829?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Enrico Granata</string> &lt;egranata at apple.com&gt;<p>June 29, 2016 at 10:00:00am</p></header><div class="content"><p>Tim,<br>the Xcode variables view is controlled by a different mechanism than the playgrounds/po - there is a reference for that mechanism at http://lldb.llvm.org/varformats.html &lt;http://lldb.llvm.org/varformats.html&gt;<br>The gist of it is that you&#39;re going to want to make a synthetic child provider that returns no child elements for your object - that will be what the variables view picks up<br></p><p>&gt; On Jun 26, 2016, at 9:41 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sun, Jun 26, 2016 at 5:03 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt;&gt; I already did that, sorry for not providing any code. Take this as an<br>&gt;&gt; example:<br>&gt;&gt; <br>&gt;&gt; public struct Wrapper&lt;Element&gt; {<br>&gt;&gt; <br>&gt;&gt;    private var elements: [Element]<br>&gt;&gt; <br>&gt;&gt;    public init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ sequence:<br>&gt;&gt; S) {<br>&gt;&gt;        elements = [Element](sequence)<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Wrapper: Collection {<br>&gt;&gt; <br>&gt;&gt;    public var startIndex: Int { return elements.startIndex }<br>&gt;&gt;    public var endIndex: Int { return elements.endIndex }<br>&gt;&gt; <br>&gt;&gt;    public func index(after index: Int) -&gt; Int {<br>&gt;&gt;        return index + 1<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    public subscript(position: Int) -&gt; Element {<br>&gt;&gt;        return elements[position]<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Wrapper: CustomReflectable {<br>&gt;&gt; <br>&gt;&gt;    public var customMirror: Mirror {<br>&gt;&gt;        return Mirror(self, unlabeledChildren: self, displayStyle:<br>&gt;&gt; .collection)<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If I debug an instance of this Wrapper type, then Xcode’s Variables View<br>&gt;&gt; will show<br>&gt;&gt; <br>&gt;&gt; ▿ wrapper<br>&gt;&gt;  ▿ elements = x values<br>&gt;&gt;    [0] = 0<br>&gt;&gt;    [1] = …<br>&gt; <br>&gt; I see.  I&#39;m not sure there&#39;s a way to hide anything from Xcode&#39;s variables view.<br>&gt; <br>&gt; +Enrico.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p><br>Thanks,<br>- Enrico<br>📩 egranata@.com ☎️ 27683<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160629/863a863c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July 11, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi Enrico,<br>Thanks for your reply. This means, however, that I can’t easily distribute my code along with this synthetic child provider in a package or a library, correct?<br></p><p>&gt; On 29 Jun 2016, at 19:16, Enrico Granata &lt;egranata at apple.com&gt; wrote:<br>&gt; <br>&gt; Tim,<br>&gt; the Xcode variables view is controlled by a different mechanism than the playgrounds/po - there is a reference for that mechanism at http://lldb.llvm.org/varformats.html &lt;http://lldb.llvm.org/varformats.html&gt;<br>&gt; The gist of it is that you&#39;re going to want to make a synthetic child provider that returns no child elements for your object - that will be what the variables view picks up<br>&gt; <br>&gt;&gt; On Jun 26, 2016, at 9:41 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sun, Jun 26, 2016 at 5:03 PM, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; I already did that, sorry for not providing any code. Take this as an<br>&gt;&gt;&gt; example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public struct Wrapper&lt;Element&gt; {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    private var elements: [Element]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    public init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ sequence:<br>&gt;&gt;&gt; S) {<br>&gt;&gt;&gt;        elements = [Element](sequence)<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Wrapper: Collection {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    public var startIndex: Int { return elements.startIndex }<br>&gt;&gt;&gt;    public var endIndex: Int { return elements.endIndex }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    public func index(after index: Int) -&gt; Int {<br>&gt;&gt;&gt;        return index + 1<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    public subscript(position: Int) -&gt; Element {<br>&gt;&gt;&gt;        return elements[position]<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Wrapper: CustomReflectable {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    public var customMirror: Mirror {<br>&gt;&gt;&gt;        return Mirror(self, unlabeledChildren: self, displayStyle:<br>&gt;&gt;&gt; .collection)<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If I debug an instance of this Wrapper type, then Xcode’s Variables View<br>&gt;&gt;&gt; will show<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ▿ wrapper<br>&gt;&gt;&gt;  ▿ elements = x values<br>&gt;&gt;&gt;    [0] = 0<br>&gt;&gt;&gt;    [1] = …<br>&gt;&gt; <br>&gt;&gt; I see.  I&#39;m not sure there&#39;s a way to hide anything from Xcode&#39;s variables view.<br>&gt;&gt; <br>&gt;&gt; +Enrico.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; <br>&gt; <br>&gt; Thanks,<br>&gt; - Enrico<br>&gt; 📩 egranata@.com ☎️ 27683<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160711/ab27f9b9/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52cd4e8dbbba27ff1ea5fa122af8bd56?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Jim Ingham</string> &lt;jingham at apple.com&gt;<p>June 26, 2016 at 10:00:00pm</p></header><div class="content"><p>The display in the variables view uses synthetic child providers:<br></p><p>http://lldb.llvm.org/varformats.html<br></p><p>We could hook up the Mirrors to the synthetic child providers if there is no formatter registered, but Mirrors always run code and we try not to run code for the variables view if we can avoid it as it slows down debugging more than somewhat.<br></p><p>Jim<br></p><p><br>&gt; On Jun 26, 2016, at 5:03 PM, Tim Vermeulen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I already did that, sorry for not providing any code. Take this as an example:<br>&gt; <br>&gt; public struct Wrapper&lt;Element&gt; {<br>&gt;     <br>&gt;     private var elements: [Element]<br>&gt;     <br>&gt;     public init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ sequence: S) {<br>&gt;         elements = [Element](sequence)<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; extension Wrapper: Collection {<br>&gt;     <br>&gt;     public var startIndex: Int { return elements.startIndex }<br>&gt;     public var endIndex: Int { return elements.endIndex }<br>&gt;     <br>&gt;     public func index(after index: Int) -&gt; Int {<br>&gt;         return index + 1<br>&gt;     }<br>&gt;     <br>&gt;     public subscript(position: Int) -&gt; Element {<br>&gt;         return elements[position]<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; extension Wrapper: CustomReflectable {<br>&gt;     <br>&gt;     public var customMirror: Mirror {<br>&gt;         return Mirror(self, unlabeledChildren: self, displayStyle: .collection)<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; If I debug an instance of this Wrapper type, then Xcode’s Variables View will show<br>&gt; <br>&gt; ▿ wrapper<br>&gt;   ▿ elements = x values<br>&gt;     [0] = 0<br>&gt;     [1] = …<br>&gt; <br>&gt; But the `elements` property is an implementation detail. What I would really want to see is this:<br>&gt; <br>&gt; ▿ wrapper = x values<br>&gt;   [0] = 0<br>&gt;   [1] = …<br>&gt; <br>&gt; But I’m not sure if this is even possible. That’s basically why I’m asking this. Hopefully it’s clearer now :)<br>&gt; <br>&gt; One last thing to note, the code `dump(wrapper)` will print<br>&gt; <br>&gt; ▿ 3 elements<br>&gt;   - 1<br>&gt;   - 2<br>&gt;   - 3<br>&gt; <br>&gt; to the console, which is good. If I don’t implement CustomReflectable, then `dump(wrapper)` will show this:<br>&gt; <br>&gt; ▿ Wrapper&lt;Swift.Int&gt;<br>&gt;   ▿ elements: 3 elements<br>&gt;     - 1<br>&gt;     - 2<br>&gt;     - 3<br>&gt; <br>&gt; So my CustomReflectable conformance is definitely doing something, but I would like to see the results in the variables view as well.<br>&gt; <br>&gt;&gt; On 27 Jun 2016, at 01:40, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jun 24, 2016 at 3:53 PM, Tim Vermeulen via swift-users<br>&gt;&gt; &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I’ve implemented a linked list. Now I’d like to be able to view the elements of a linked list in the debugger just like with an array. In the debugger, an array is represented like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [0] = the first element<br>&gt;&gt;&gt; [1] = the second element<br>&gt;&gt;&gt; etc<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wonder if I can do the same for my linked list. I already implemented CustomReflectable, so the code `dump(myLinkedList)` shows this in the console:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3 elements<br>&gt;&gt;&gt;  - first element<br>&gt;&gt;&gt;  - second elements<br>&gt;&gt;&gt;  - third element<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought this would also change the appearance of my linked list in the debugger, but unfortunately it’s unchanged. Is there a way to do what I’m trying to do?<br>&gt;&gt; <br>&gt;&gt; Try setting &quot;displayStyle: .collection&quot; when you call the Mirror initializer.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160626/e1c50f68/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d631f09a3a336a15ae258e01899cb736?s=50"></div><header><strong>Customizing my custom type&#39;s appearance in the debugger</strong> from <string>Kate Stone</string> &lt;k8stone at apple.com&gt;<p>June 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 26, 2016, at 10:56 PM, Jim Ingham via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The display in the variables view uses synthetic child providers:<br>&gt; <br>&gt; http://lldb.llvm.org/varformats.html &lt;http://lldb.llvm.org/varformats.html&gt;<br>&gt; <br>&gt; We could hook up the Mirrors to the synthetic child providers if there is no formatter registered, but Mirrors always run code and we try not to run code for the variables view if we can avoid it as it slows down debugging more than somewhat.<br></p><p>I&#39;d add that running code when trying to display variables can have much more serious effects than just slowing debugging.  It allows for arbitrary side effects, which aren&#39;t always desirable, and depends on the code execution, which isn&#39;t always possible in situations where the target process has deadlocked or crashed.<br></p><p>Writing custom formatters that run in LLDB&quot;s process as described by Jim above is indeed the way to change the default display in the Variables View.<br></p><p>&gt;&gt; On Jun 26, 2016, at 5:03 PM, Tim Vermeulen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I already did that, sorry for not providing any code. Take this as an example:<br>&gt;&gt; <br>&gt;&gt; public struct Wrapper&lt;Element&gt; {<br>&gt;&gt;     <br>&gt;&gt;     private var elements: [Element]<br>&gt;&gt;     <br>&gt;&gt;     public init&lt;S: Sequence where S.Iterator.Element == Element&gt;(_ sequence: S) {<br>&gt;&gt;         elements = [Element](sequence)<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Wrapper: Collection {<br>&gt;&gt;     <br>&gt;&gt;     public var startIndex: Int { return elements.startIndex }<br>&gt;&gt;     public var endIndex: Int { return elements.endIndex }<br>&gt;&gt;     <br>&gt;&gt;     public func index(after index: Int) -&gt; Int {<br>&gt;&gt;         return index + 1<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     public subscript(position: Int) -&gt; Element {<br>&gt;&gt;         return elements[position]<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Wrapper: CustomReflectable {<br>&gt;&gt;     <br>&gt;&gt;     public var customMirror: Mirror {<br>&gt;&gt;         return Mirror(self, unlabeledChildren: self, displayStyle: .collection)<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If I debug an instance of this Wrapper type, then Xcode’s Variables View will show<br>&gt;&gt; <br>&gt;&gt; ▿ wrapper<br>&gt;&gt;   ▿ elements = x values<br>&gt;&gt;     [0] = 0<br>&gt;&gt;     [1] = …<br>&gt;&gt; <br>&gt;&gt; But the `elements` property is an implementation detail. What I would really want to see is this:<br>&gt;&gt; <br>&gt;&gt; ▿ wrapper = x values<br>&gt;&gt;   [0] = 0<br>&gt;&gt;   [1] = …<br>&gt;&gt; <br>&gt;&gt; But I’m not sure if this is even possible. That’s basically why I’m asking this. Hopefully it’s clearer now :)<br>&gt;&gt; <br>&gt;&gt; One last thing to note, the code `dump(wrapper)` will print<br>&gt;&gt; <br>&gt;&gt; ▿ 3 elements<br>&gt;&gt;   - 1<br>&gt;&gt;   - 2<br>&gt;&gt;   - 3<br>&gt;&gt; <br>&gt;&gt; to the console, which is good. If I don’t implement CustomReflectable, then `dump(wrapper)` will show this:<br>&gt;&gt; <br>&gt;&gt; ▿ Wrapper&lt;Swift.Int&gt;<br>&gt;&gt;   ▿ elements: 3 elements<br>&gt;&gt;     - 1<br>&gt;&gt;     - 2<br>&gt;&gt;     - 3<br>&gt;&gt; <br>&gt;&gt; So my CustomReflectable conformance is definitely doing something, but I would like to see the results in the variables view as well.<br>&gt;&gt; <br>&gt;&gt;&gt; On 27 Jun 2016, at 01:40, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jun 24, 2016 at 3:53 PM, Tim Vermeulen via swift-users<br>&gt;&gt;&gt; &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I’ve implemented a linked list. Now I’d like to be able to view the elements of a linked list in the debugger just like with an array. In the debugger, an array is represented like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [0] = the first element<br>&gt;&gt;&gt;&gt; [1] = the second element<br>&gt;&gt;&gt;&gt; etc<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wonder if I can do the same for my linked list. I already implemented CustomReflectable, so the code `dump(myLinkedList)` shows this in the console:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3 elements<br>&gt;&gt;&gt;&gt;  - first element<br>&gt;&gt;&gt;&gt;  - second elements<br>&gt;&gt;&gt;&gt;  - third element<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I thought this would also change the appearance of my linked list in the debugger, but unfortunately it’s unchanged. Is there a way to do what I’m trying to do?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Try setting &quot;displayStyle: .collection&quot; when you call the Mirror initializer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160627/13c58f10/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
