<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e20cea33ea274cfa8a17fabf7ce404ee?s=50"></div><header><strong>Proposal: Extend unnamed let variable scope</strong> from <string>Jason Pollack</string> &lt;jlpollack at gmail.com&gt;<p>December 10, 2015 at 11:00:00am</p></header><div class="content"><p>I was experimenting in Swift with RAII, a technique I find very useful from<br>C++.  In general it works well, but there is something I found unexpected.<br></p><p>Consider this class:<br></p><p>class RAII {<br>    init() {<br>        print(&quot;some resource acquired&quot;)<br>    }<br>    deinit {<br>        print(&quot;some resource released&quot;)<br>    }<br>}<br></p><p>And this sample code:<br></p><p>        let b = true<br>        if (b)<br>        {<br>            print(&quot;Entered scope&quot;)<br>            let raii = RAII()<br>            print(&quot;Going out of scope&quot;)<br>        }<br>        print(&quot;Left scope&quot;)<br></p><p>As expected, I see the output:<br></p><p>Entered scope<br>some resource acquired<br>Going out of scope<br>some resource released<br>Left scope<br></p><p>However, the compiler gives me a warning on the &#39;let raii = &#39; line:<br> &quot;Initialization of immutable value &#39;raii&#39; was never used; consider<br>replacing with assignment to &#39;_&#39; or removing it&quot;<br></p><p>If I change that line to:<br></p><p>let _ = RAII()<br></p><p>the warning goes away, but I get the unexpected output:<br></p><p>Entered scope<br>some resource acquired<br>some resource released<br>Going out of scope<br>Left scope<br></p><p>It appears the object instance is being destroyed immediately after being<br>created, because the compiler correctly sees that nobody needs it.<br></p><p>Therefore, I propose that such instances stay referenced until the end of<br>the scope they are declared in.<br></p><p>(As an aside, I would like to see a deinit on a struct to support this<br>technique as well.)<br></p><p>Thanks,<br>-Jason-<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/930a5efe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: Extend unnamed let variable scope</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 10, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 8:46 AM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was experimenting in Swift with RAII, a technique I find very useful from C++.  In general it works well, but there is something I found unexpected.<br>&gt; <br>&gt; Consider this class:<br>&gt; <br>&gt; class RAII {<br>&gt;     init() {<br>&gt;         print(&quot;some resource acquired&quot;)<br>&gt;     }<br>&gt;     deinit {<br>&gt;         print(&quot;some resource released&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; And this sample code:<br>&gt; <br>&gt;         let b = true<br>&gt;         if (b)<br>&gt;         {<br>&gt;             print(&quot;Entered scope&quot;)<br>&gt;             let raii = RAII()<br>&gt;             print(&quot;Going out of scope&quot;)<br>&gt;         }<br>&gt;         print(&quot;Left scope&quot;)<br>&gt; <br>&gt; As expected, I see the output:<br>&gt; <br>&gt; Entered scope<br>&gt; some resource acquired<br>&gt; Going out of scope<br>&gt; some resource released<br>&gt; Left scope<br>&gt; <br>&gt; However, the compiler gives me a warning on the &#39;let raii = &#39; line:  &quot;Initialization of immutable value &#39;raii&#39; was never used; consider replacing with assignment to &#39;_&#39; or removing it&quot;<br>&gt; <br>&gt; If I change that line to:<br>&gt; <br>&gt; let _ = RAII()<br>&gt; <br>&gt; the warning goes away, but I get the unexpected output:<br>&gt; <br>&gt; Entered scope<br>&gt; some resource acquired<br>&gt; some resource released<br>&gt; Going out of scope<br>&gt; Left scope<br>&gt; <br>&gt; It appears the object instance is being destroyed immediately after being created, because the compiler correctly sees that nobody needs it.<br>&gt; <br>&gt; Therefore, I propose that such instances stay referenced until the end of the scope they are declared in. <br></p><p>ARC does not normally guarantee scoped lifetimes; the optimizer will shorten lifetimes so that objects get released after their last use, not when their variable goes out of scope. If you don&#39;t use the result of a computation at all, it will likely be immediately released. You can use `withExtendedLifetime` to set a minimum bound for the lifetime of a reference:<br></p><p>withExtendedLifetime(RAII()) {<br>  print(&quot;Going out of scope&quot;)<br>}<br></p><p>&gt; (As an aside, I would like to see a deinit on a struct to support this technique as well.)<br></p><p>If structs support destructors, then they potentially also need to support copy constructors and all the other complexity of C++ to describe what happens when they get copied. Resources really do have referential identity in practice; classes are the appropriate way to model them.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/e6f5ddbd/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
