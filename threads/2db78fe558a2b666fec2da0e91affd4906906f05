<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0078: Implement a rotate algorithm, equivalent to std::rotate() in C++</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  3, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>+1. A very useful function to have on collections.<br></p><p>In FORTRAN and in languages that take inspiration from it, the same<br>function is called a &quot;circular shift&quot;--IMO, it&#39;s a clearer name both by its<br>associations with other uses of the term &quot;shifting&quot; and because googling<br>the term will give much more useful results.<br></p><p>IMO, the parameter label could also use some bikeshedding. One reason is<br>that, with an `Array&lt;Int&gt;` (as illustrated in the examples given), the<br>argument in `array.rotate(firstFrom: 5)` does not obviously refer to an<br>index. Superficially, this could mean first from the first element equal to<br>5.<br></p><p>One suggestion I would put forward is: `circularShift(leftBy:<br>IndexDistance)`. For bidirectional and random access collections, this<br>function could possibly be complemented by `circularShift(rightBy:<br>IndexDistance)`.<br></p><p>Finally, I wonder whether the C++11-like behavior of returning the new<br>index of the former first item is a very Swifty behavior. I could be<br>persuaded if the return value is demonstrably something that is not always<br>trivial to compute.<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>It&#39;s an additive feature, and it&#39;s hard to see any drawbacks.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes, it&#39;s an algorithm of appropriate complexity and general utility to be<br>added to the stdlib.<br></p><p><br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>This proposal presents the same algorithm as found in other languages but<br>borrows the name from C++. Other names may be more self-documenting (see<br>above).<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>I have read the proposal to a medium depth.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/2db76f05/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/67a361b77f5c6cba256d06ba641f2af8?s=50"></div><header><strong>[Review] SE-0078: Implement a rotate algorithm, equivalent to std::rotate() in C++</strong> from <string>Nate Cook</string> &lt;nate at natecook.com&gt;<p>May  4, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On May 3, 2016, at 11:51 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; <br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; +1. A very useful function to have on collections.<br>&gt; <br>&gt; In FORTRAN and in languages that take inspiration from it, the same function is called a &quot;circular shift&quot;--IMO, it&#39;s a clearer name both by its associations with other uses of the term &quot;shifting&quot; and because googling the term will give much more useful results.<br>&gt; <br>&gt; IMO, the parameter label could also use some bikeshedding. One reason is that, with an `Array&lt;Int&gt;` (as illustrated in the examples given), the argument in `array.rotate(firstFrom: 5)` does not obviously refer to an index. Superficially, this could mean first from the first element equal to 5.<br>&gt; <br>&gt; One suggestion I would put forward is: `circularShift(leftBy: IndexDistance)`. For bidirectional and random access collections, this function could possibly be complemented by `circularShift(rightBy: IndexDistance)`.<br>&gt; <br>&gt; Finally, I wonder whether the C++11-like behavior of returning the new index of the former first item is a very Swifty behavior. I could be persuaded if the return value is demonstrably something that is not always trivial to compute.<br></p><p>For random-access collections, calculating the new index is trivial, but for forward or bidirectional collections it&#39;s an O(n) operation if not calculated as part of the rotation. For the same reason, it&#39;s important that the parameter is an index and not just a distance.<br></p><p>Nate<br></p><p>&gt;&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; It&#39;s an additive feature, and it&#39;s hard to see any drawbacks.<br>&gt;  <br>&gt;&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes, it&#39;s an algorithm of appropriate complexity and general utility to be added to the stdlib.<br>&gt;  <br>&gt;&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; This proposal presents the same algorithm as found in other languages but borrows the name from C++. Other names may be more self-documenting (see above).<br>&gt;  <br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I have read the proposal to a medium depth.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/7e61cc34/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
