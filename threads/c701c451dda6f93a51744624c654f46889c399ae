<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July  6, 2016 at 01:00:00pm</p></header><div class="content"><p>RangeReplaceableCollection has three initialisers: init(), init(_:) and init(repeating:count:). The latter two are implemented using the empty initialiser. But why are these initialisers part of this particular protocol? As far as I can tell, no other methods of this protocol depend on these initialisers. The requirement of the empty initialiser makes it impossible to have a collection conform to this protocol that needs additional data for its initialisation.<br></p><p>For instance, I was making an array that works with any Strideable indices, not just integers. A startIndex is needed for its initialisation, so I can’t really conform it to RangeReplaceableCollection. If I do it anyways (with a fatalError() in the required empty initialiser) everything seems to work just fine, except for the protocol’s three initialisers.<br></p><p>Perhaps these initialisers should be moved to a (possible new) different protocol?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>According to the document of Swift 3, Array has already conformed<br>protocol RangeReplaceableCollection.<br></p><p>Zhaoxin<br></p><p>On Wed, Jul 6, 2016 at 7:09 PM, Tim Vermeulen via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; RangeReplaceableCollection has three initialisers: init(), init(_:) and<br>&gt; init(repeating:count:). The latter two are implemented using the empty<br>&gt; initialiser. But why are these initialisers part of this particular<br>&gt; protocol? As far as I can tell, no other methods of this protocol depend on<br>&gt; these initialisers. The requirement of the empty initialiser makes it<br>&gt; impossible to have a collection conform to this protocol that needs<br>&gt; additional data for its initialisation.<br>&gt;<br>&gt; For instance, I was making an array that works with any Strideable<br>&gt; indices, not just integers. A startIndex is needed for its initialisation,<br>&gt; so I can’t really conform it to RangeReplaceableCollection. If I do it<br>&gt; anyways (with a fatalError() in the required empty initialiser) everything<br>&gt; seems to work just fine, except for the protocol’s three initialisers.<br>&gt;<br>&gt; Perhaps these initialisers should be moved to a (possible new) different<br>&gt; protocol?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/a919e3b2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July  6, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 6 Jul 2016, at 14:03, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; According to the document of Swift 3, Array has already conformed protocol RangeReplaceableCollection.<br></p><p>That’s exactly why I also want to conform my wrapper to that protocol? I think there’s a misunderstanding. I’m making a collection that can be subscripted with any index (that conforms to Strideable), but behaves like an array otherwise.<br></p><p>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Wed, Jul 6, 2016 at 7:09 PM, Tim Vermeulen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; RangeReplaceableCollection has three initialisers: init(), init(_:) and init(repeating:count:). The latter two are implemented using the empty initialiser. But why are these initialisers part of this particular protocol? As far as I can tell, no other methods of this protocol depend on these initialisers. The requirement of the empty initialiser makes it impossible to have a collection conform to this protocol that needs additional data for its initialisation.<br>&gt; <br>&gt; For instance, I was making an array that works with any Strideable indices, not just integers. A startIndex is needed for its initialisation, so I can’t really conform it to RangeReplaceableCollection. If I do it anyways (with a fatalError() in the required empty initialiser) everything seems to work just fine, except for the protocol’s three initialisers.<br>&gt; <br>&gt; Perhaps these initialisers should be moved to a (possible new) different protocol?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/d23ad0f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>Then how you defined the index to conform to Strideable? Below code does<br>work as it seams that you can&#39;t use generics in subscripts.<br></p><p>subscript&lt;T:Strideable&gt;(index:T) -&gt; Element<br></p><p><br>Zhaoxin<br></p><p>On Wed, Jul 6, 2016 at 8:32 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt;<br>&gt; On 6 Jul 2016, at 14:03, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt; According to the document of Swift 3, Array has already conformed<br>&gt; protocol RangeReplaceableCollection.<br>&gt;<br>&gt;<br>&gt; That’s exactly why I also want to conform my wrapper to that protocol? I<br>&gt; think there’s a misunderstanding. I’m making a collection that can be<br>&gt; subscripted with any index (that conforms to Strideable), but behaves like<br>&gt; an array otherwise.<br>&gt;<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Wed, Jul 6, 2016 at 7:09 PM, Tim Vermeulen via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; RangeReplaceableCollection has three initialisers: init(), init(_:) and<br>&gt;&gt; init(repeating:count:). The latter two are implemented using the empty<br>&gt;&gt; initialiser. But why are these initialisers part of this particular<br>&gt;&gt; protocol? As far as I can tell, no other methods of this protocol depend on<br>&gt;&gt; these initialisers. The requirement of the empty initialiser makes it<br>&gt;&gt; impossible to have a collection conform to this protocol that needs<br>&gt;&gt; additional data for its initialisation.<br>&gt;&gt;<br>&gt;&gt; For instance, I was making an array that works with any Strideable<br>&gt;&gt; indices, not just integers. A startIndex is needed for its initialisation,<br>&gt;&gt; so I can’t really conform it to RangeReplaceableCollection. If I do it<br>&gt;&gt; anyways (with a fatalError() in the required empty initialiser) everything<br>&gt;&gt; seems to work just fine, except for the protocol’s three initialisers.<br>&gt;&gt;<br>&gt;&gt; Perhaps these initialisers should be moved to a (possible new) different<br>&gt;&gt; protocol?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/4b79db3a/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>Hi there,<br></p><p>&gt; The requirement of the empty initialiser makes it impossible to have a collection conform to this protocol that needs additional data for its initialisation.<br>But if there is no guarantee for an empty initializer, you always need a piece of data to create an instance — and when you do heavy &quot;metaprogramming&quot; (generics, protocols…), it can become very hard to supply this additional data.<br>In those situations, it is very valuable when you can create an object out of thin air…<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>I thought this was it, but none of the default implementations of RangeReplaceableCollection seem to use this empty initialiser (except for the two other initialisers and `removeAll(keepingCapacity:)`, the latter of which can be implemented using `removeSubrange(_:)` instead). This makes me wonder whether this is the right protocol to put an empty initialiser.<br></p><p>&gt; On 6 Jul 2016, at 20:12, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt; Hi there,<br>&gt; <br>&gt;&gt; The requirement of the empty initialiser makes it impossible to have a collection conform to this protocol that needs additional data for its initialisation.<br>&gt; But if there is no guarantee for an empty initializer, you always need a piece of data to create an instance — and when you do heavy &quot;metaprogramming&quot; (generics, protocols…), it can become very hard to supply this additional data.<br>&gt; In those situations, it is very valuable when you can create an object out of thin air…<br>&gt; <br>&gt; Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  6, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; I thought this was it, but none of the default implementations of RangeReplaceableCollection seem to use this empty initialiser<br>I haven&#39;t worked with RangeReplaceableCollection yet, but I wasn&#39;t speaking of how the protocol is used in the libraries, but by &quot;regular users&quot;:<br></p><p>class Factory&lt;T: RangeReplaceableCollectionType&gt; {<br>	func create() -&gt; T{<br>		return T()<br>	}<br>}<br></p><p>Doing something like this can become really hard when you need parameters.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/8997460e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July  7, 2016 at 01:00:00am</p></header><div class="content"><p>The same is true for protocols such as `RandomAccessCollection` and `MutableCollection`.<br></p><p>&gt; On 6 Jul 2016, at 22:07, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; I thought this was it, but none of the default implementations of RangeReplaceableCollection seem to use this empty initialiser<br>&gt; I haven&#39;t worked with RangeReplaceableCollection yet, but I wasn&#39;t speaking of how the protocol is used in the libraries, but by &quot;regular users&quot;:<br>&gt; <br>&gt; class Factory&lt;T: RangeReplaceableCollectionType&gt; {<br>&gt; 	func create() -&gt; T{<br>&gt; 		return T()<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; Doing something like this can become really hard when you need parameters.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160707/ffd9ef12/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>Why does RangeReplaceableCollection require an empty initialiser?</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>July  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I have the same misgivings. The other day, I was wanted to add a piece<br>of metadata to a Slice type conforming to RangeReplaceableCollection<br>(coming from the containing collection) but couldn&#39;t figure out a way to<br>make it safe with the empty initializer. It&#39;s bugged me a few times<br>similarly.<br></p><p>Cheers!<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p>On Wed, Jul 6, 2016, at 04:09 AM, Tim Vermeulen via swift-users wrote:<br>&gt; RangeReplaceableCollection has three initialisers: init(), init(_:) and<br>&gt; init(repeating:count:). The latter two are implemented using the empty<br>&gt; initialiser. But why are these initialisers part of this particular<br>&gt; protocol? As far as I can tell, no other methods of this protocol depend<br>&gt; on these initialisers. The requirement of the empty initialiser makes it<br>&gt; impossible to have a collection conform to this protocol that needs<br>&gt; additional data for its initialisation.<br>&gt; <br>&gt; For instance, I was making an array that works with any Strideable<br>&gt; indices, not just integers. A startIndex is needed for its<br>&gt; initialisation, so I can’t really conform it to<br>&gt; RangeReplaceableCollection. If I do it anyways (with a fatalError() in<br>&gt; the required empty initialiser) everything seems to work just fine,<br>&gt; except for the protocol’s three initialisers.<br>&gt; <br>&gt; Perhaps these initialisers should be moved to a (possible new) different<br>&gt; protocol?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
