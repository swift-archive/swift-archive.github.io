<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Pre-proposal: &quot;private(extension)&quot; access modifier?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  5, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>One popular use of extensions is to take the definition of a type (e.g.<br>MyBigClass) and to split it up over a number of files, grouping related<br>methods together for increased code comprehensibility. However, access<br>control makes doing so more difficult: members that are implementation<br>details and declared as &#39;private&#39; can&#39;t be seen from other files.<br></p><p>I&#39;d like to suggest an access modifier: &quot;private(extension)&quot;. This follows<br>in the spirit of the existing &quot;private(set)&quot; for properties. It would work<br>in the following way:<br></p><p>- A member declared private(set) would be visible throughout the file<br>within which it was declared, exactly as if it had been declared &quot;private&quot;<br>today.<br>- A member declared private(set) would be visible in any file containing an<br>extension to the member&#39;s type, throughout the entire file.<br>- This would only work for extensions to types declared within the same<br>module; it would not be meant as a way to expose impl details to other<br>modules or application code consuming the module.<br>- A property in T meant to be only gettable from other files, but settable<br>from extensions to T in other files, would be declared &quot;private(set,<br>extension)&quot;.<br></p><p>I think this is a reasonably elegant, small-surface-area solution to a<br>common problem, but I can see some potential objections:<br></p><p>- It adds some complexity to the access control subsystem. Maybe that<br>subsystem is complex enough as is.<br>- It might leak implementation details of a type T to code belonging to<br>another type or global function, residing within the same file as an<br>extension to T.<br>- Maybe there might be more elegant ways to improve or extend the access<br>control subsystem.<br></p><p>Any thoughts?<br></p><p>Best,<br>Austin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/b232eab8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Pre-proposal: &quot;private(extension)&quot; access modifier?</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  5, 2016 at 08:00:00pm</p></header><div class="content"><p>Maybe it&#39;s because I know too much about it, but to me, private(extension) doesn&#39;t follow the spirit of private(set).<br></p><p>In Swift, access modifiers are tied to the linker&#39;s notion of symbol visibility. Private symbols are accessible only within the current file because they&#39;re not exported at all. Internal symbols are accessible only within the module because they don&#39;t make it to the public symbol table. When you have private(set), all you&#39;re saying is &quot;make the setter private&quot;, and this is easy.<br></p><p>In general, your definition of private(extension) makes it identical to internal, except that autocomplete won&#39;t be cluttered with private(extension) members in files that don&#39;t extend the class. Because of that, I don&#39;t think that it adds a lot of technical complexity to access control, but it also makes me think that it might not be worth it.<br></p><p>Since private(extension) can be (ab)used to make any member internal, I wonder if we couldn&#39;t fix this with finer-grained autocomplete or something instead.<br></p><p>Félix<br></p><p>&gt; Le 5 janv. 2016 à 19:59:11, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; One popular use of extensions is to take the definition of a type (e.g. MyBigClass) and to split it up over a number of files, grouping related methods together for increased code comprehensibility. However, access control makes doing so more difficult: members that are implementation details and declared as &#39;private&#39; can&#39;t be seen from other files.<br>&gt; <br>&gt; I&#39;d like to suggest an access modifier: &quot;private(extension)&quot;. This follows in the spirit of the existing &quot;private(set)&quot; for properties. It would work in the following way:<br>&gt; <br>&gt; - A member declared private(set) would be visible throughout the file within which it was declared, exactly as if it had been declared &quot;private&quot; today.<br>&gt; - A member declared private(set) would be visible in any file containing an extension to the member&#39;s type, throughout the entire file.<br>&gt; - This would only work for extensions to types declared within the same module; it would not be meant as a way to expose impl details to other modules or application code consuming the module.<br>&gt; - A property in T meant to be only gettable from other files, but settable from extensions to T in other files, would be declared &quot;private(set, extension)&quot;.<br>&gt; <br>&gt; I think this is a reasonably elegant, small-surface-area solution to a common problem, but I can see some potential objections:<br>&gt; <br>&gt; - It adds some complexity to the access control subsystem. Maybe that subsystem is complex enough as is.<br>&gt; - It might leak implementation details of a type T to code belonging to another type or global function, residing within the same file as an extension to T.<br>&gt; - Maybe there might be more elegant ways to improve or extend the access control subsystem.<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/ebfa8ed7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Pre-proposal: &quot;private(extension)&quot; access modifier?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  7, 2016 at 01:00:00pm</p></header><div class="content"><p>I see your point, and I think it&#39;s a good one. I&#39;m don&#39;t think this<br>proposal is worth pursuing further, although I would like some notion of<br>more flexible access control in the future.<br></p><p>Thanks,<br>Austin<br></p><p>On Tue, Jan 5, 2016 at 5:47 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; Maybe it&#39;s because I know too much about it, but to me, private(extension)<br>&gt; doesn&#39;t follow the spirit of private(set).<br>&gt;<br>&gt; In Swift, access modifiers are tied to the linker&#39;s notion of symbol<br>&gt; visibility. Private symbols are accessible only within the current file<br>&gt; because they&#39;re not exported at all. Internal symbols are accessible only<br>&gt; within the module because they don&#39;t make it to the public symbol table.<br>&gt; When you have private(set), all you&#39;re saying is &quot;make the setter private&quot;,<br>&gt; and this is easy.<br>&gt;<br>&gt; In general, your definition of private(extension) makes it identical to<br>&gt; internal, except that autocomplete won&#39;t be cluttered with<br>&gt; private(extension) members in files that don&#39;t extend the class. Because of<br>&gt; that, I don&#39;t think that it adds a lot of technical complexity to access<br>&gt; control, but it also makes me think that it might not be worth it.<br>&gt;<br>&gt; Since private(extension) can be (ab)used to make any member internal, I<br>&gt; wonder if we couldn&#39;t fix this with finer-grained autocomplete or something<br>&gt; instead.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 5 janv. 2016 à 19:59:11, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; One popular use of extensions is to take the definition of a type (e.g.<br>&gt; MyBigClass) and to split it up over a number of files, grouping related<br>&gt; methods together for increased code comprehensibility. However, access<br>&gt; control makes doing so more difficult: members that are implementation<br>&gt; details and declared as &#39;private&#39; can&#39;t be seen from other files.<br>&gt;<br>&gt; I&#39;d like to suggest an access modifier: &quot;private(extension)&quot;. This follows<br>&gt; in the spirit of the existing &quot;private(set)&quot; for properties. It would work<br>&gt; in the following way:<br>&gt;<br>&gt; - A member declared private(set) would be visible throughout the file<br>&gt; within which it was declared, exactly as if it had been declared &quot;private&quot;<br>&gt; today.<br>&gt; - A member declared private(set) would be visible in any file containing<br>&gt; an extension to the member&#39;s type, throughout the entire file.<br>&gt; - This would only work for extensions to types declared within the same<br>&gt; module; it would not be meant as a way to expose impl details to other<br>&gt; modules or application code consuming the module.<br>&gt; - A property in T meant to be only gettable from other files, but settable<br>&gt; from extensions to T in other files, would be declared &quot;private(set,<br>&gt; extension)&quot;.<br>&gt;<br>&gt; I think this is a reasonably elegant, small-surface-area solution to a<br>&gt; common problem, but I can see some potential objections:<br>&gt;<br>&gt; - It adds some complexity to the access control subsystem. Maybe that<br>&gt; subsystem is complex enough as is.<br>&gt; - It might leak implementation details of a type T to code belonging to<br>&gt; another type or global function, residing within the same file as an<br>&gt; extension to T.<br>&gt; - Maybe there might be more elegant ways to improve or extend the access<br>&gt; control subsystem.<br>&gt;<br>&gt; Any thoughts?<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/fe223305/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
