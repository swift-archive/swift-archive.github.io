<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Disambiguate Return Type With Void</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 26, 2016 at 04:00:00pm</p></header><div class="content"><p>+1<br></p><p>&gt; Also, technically we can assign a value to Void function<br>This proposal will not disallow that. Just non-Void functions will be<br>preferred when result is used.<br></p><p>array.sort(..) // mutating<br>let array2 = array.sort(..) // non-mutating, instead of array.sorted()<br></p><p>I think, that&#39;s actually the best solution to mutating / non-mutating<br>convention!<br></p><p>Andrew, why not generalize this proposal to functions with @unusedResult?<br></p><p>In terms of &quot;precedence&quot; when result is used:<br>Non-Void &gt; @unusedResult &gt; Void (+warning)<br></p><p>When unused:<br>Void &gt; @unusedResult &gt; Non-Void (+warning)<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/966c7ba5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Disambiguate Return Type With Void</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 26, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 06:57, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; &gt; Also, technically we can assign a value to Void function<br>&gt; This proposal will not disallow that. Just non-Void functions will be preferred when result is used.<br>&gt; array.sort(..) // mutating<br>&gt; let array2 = array.sort(..) // non-mutating, instead of array.sorted()<br>&gt; I think, that&#39;s actually the best solution to mutating / non-mutating convention!<br></p><p>There are mutating methods that have return values, like Dictionary.removeValue(forKey:). Admittedly there’s no non-mutating version of that at the moment, but that doesn’t mean there couldn’t be.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/f819d8c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Disambiguate Return Type With Void</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 26, 2016 at 08:00:00pm</p></header><div class="content"><p>Let&#39;s expand on that situation. Dictionary would have these methods:<br></p><p>@discardableResult func removeValue(forKey key: Key) -&gt; Value?<br>func removeValue(forKey key: Key) -&gt; Self<br></p><p>I would argue that these two versions are not semantically identical: (1)<br>returns removed value while (2) does not.<br>Therefore they should have different names. In this case, we can rename<br>them like this:<br></p><p>@discardableResult func removeValue(forKey key: Key) -&gt; Value?<br>func remove(key key: Key) -&gt; Self<br></p><p>Or like this:<br></p><p>func removeValue(forKey key: Key) -&gt; Value?<br>func remove(key key: Key) -&gt; Void<br>func remove(key key: Key) -&gt; Self<br></p><p>- Anton<br></p><p>2016-04-26 19:26 GMT+03:00 Jordan Rose &lt;jordan_rose at apple.com&gt;:<br></p><p>&gt;<br>&gt; On Apr 26, 2016, at 06:57, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1<br>&gt;<br>&gt; &gt; Also, technically we can assign a value to Void function<br>&gt; This proposal will not disallow that. Just non-Void functions will be<br>&gt; preferred when result is used.<br>&gt;<br>&gt; array.sort(..) // mutating<br>&gt; let array2 = array.sort(..) // non-mutating, instead of array.sorted()<br>&gt;<br>&gt; I think, that&#39;s actually the best solution to mutating / non-mutating convention!<br>&gt;<br>&gt; There are mutating methods that have return values, like<br>&gt; Dictionary.removeValue(forKey:). Admittedly there’s no non-mutating version<br>&gt; of that at the moment, but that doesn’t mean there couldn’t be.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/47495b9a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Disambiguate Return Type With Void</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>April 27, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m happy to add `@unusedResult`, with a little more discussion. I&#39;m not<br>sure when it would actually be used though.<br></p><p>I&#39;m not sure if you can define both of these functions:<br></p><p>   @unusedResult func example() -&gt; Int<br>   func example() -&gt; Int<br></p><p>Either way, a method with @unusedResult should probably have a different<br>name to one without.<br></p><p>You can define both of these functions:<br></p><p>   @unusedResult func example() -&gt; Int<br>   func example() -&gt; String<br></p><p>However, if the methods return different non-void values they should<br>probably have different names.<br></p><p><br>On Tue, Apr 26, 2016 at 11:57 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; &gt; Also, technically we can assign a value to Void function<br>&gt; This proposal will not disallow that. Just non-Void functions will be<br>&gt; preferred when result is used.<br>&gt;<br>&gt; array.sort(..) // mutating<br>&gt; let array2 = array.sort(..) // non-mutating, instead of array.sorted()<br>&gt;<br>&gt; I think, that&#39;s actually the best solution to mutating / non-mutating convention!<br>&gt;<br>&gt; Andrew, why not generalize this proposal to functions with @unusedResult?<br>&gt;<br>&gt; In terms of &quot;precedence&quot; when result is used:<br>&gt; Non-Void &gt; @unusedResult &gt; Void (+warning)<br>&gt;<br>&gt; When unused:<br>&gt; Void &gt; @unusedResult &gt; Non-Void (+warning)<br>&gt;<br>&gt; - Anton<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/ec238738/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Disambiguate Return Type With Void</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Agreed. That would only allow to disambiguate call with unused result, but<br>would not solve this problem. Jordan pointed at it.<br>It would be consistent therefore to leave @discardableResult functions with<br>usual non-Void functions.<br></p><p>- Anton<br></p><p>2016-04-27 12:01 GMT+03:00 Andrew Bennett &lt;cacoyi at gmail.com&gt;:<br></p><p>&gt; I&#39;m happy to add `@unusedResult`, with a little more discussion. I&#39;m not<br>&gt; sure when it would actually be used though.<br>&gt;<br>&gt; I&#39;m not sure if you can define both of these functions:<br>&gt;<br>&gt;    @unusedResult func example() -&gt; Int<br>&gt;    func example() -&gt; Int<br>&gt;<br>&gt; Either way, a method with @unusedResult should probably have a different<br>&gt; name to one without.<br>&gt;<br>&gt; You can define both of these functions:<br>&gt;<br>&gt;    @unusedResult func example() -&gt; Int<br>&gt;    func example() -&gt; String<br>&gt;<br>&gt; However, if the methods return different non-void values they should<br>&gt; probably have different names.<br>&gt;<br>&gt;<br>&gt; On Tue, Apr 26, 2016 at 11:57 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; +1<br>&gt;&gt;<br>&gt;&gt; &gt; Also, technically we can assign a value to Void function<br>&gt;&gt; This proposal will not disallow that. Just non-Void functions will be<br>&gt;&gt; preferred when result is used.<br>&gt;&gt;<br>&gt;&gt; array.sort(..) // mutating<br>&gt;&gt; let array2 = array.sort(..) // non-mutating, instead of array.sorted()<br>&gt;&gt;<br>&gt;&gt; I think, that&#39;s actually the best solution to mutating / non-mutating convention!<br>&gt;&gt;<br>&gt;&gt; Andrew, why not generalize this proposal to functions with @unusedResult?<br>&gt;&gt;<br>&gt;&gt; In terms of &quot;precedence&quot; when result is used:<br>&gt;&gt; Non-Void &gt; @unusedResult &gt; Void (+warning)<br>&gt;&gt;<br>&gt;&gt; When unused:<br>&gt;&gt; Void &gt; @unusedResult &gt; Non-Void (+warning)<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/d03a8cb9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
