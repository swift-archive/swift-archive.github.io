<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Implementing += for optional arrays</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 20, 2016 at 05:00:00pm</p></header><div class="content"><p>When working with URLComponents query items, it would be nice to write code like this:<br></p><p>var oqi: [URLQueryItem]? = [..., ..., ...]<br></p><p>var comps = URLComponents(…)<br>comps.queryItems += oqi<br></p><p>The problem is that queryItems is [URLQueryItem]?, and so I can&#39;t just append. I&#39;d like to write a version of += that:<br></p><p>• Takes an LHS of [URLQueryItems]?, RHS of [things possibly derived from URLQueryItem]?<br>• if LHS != nil, make an array of LHS, and optionally append RHS, and return that<br>• if LHS == nil &amp;&amp; RHS != nil, return RHS<br>• If both are nil, return nil<br></p><p>I&#39;d like to do this in a generic way that works for any type on the left and possibly-dervied types on the right.<br></p><p>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4bec62b7bae8a30100a5599916ab3dba?s=50"></div><header><strong>Implementing += for optional arrays</strong> from <string>Ben Cohen</string> &lt;ben_cohen at apple.com&gt;<p>October 20, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Rick,<br></p><p>I think you’re looking for something like this? Assuming when you say “return” in your bullet spec you mean assign-in-place since we’re talking about +=<br></p><p>func +=&lt;T&gt;(lhs: inout [T]?, rhs: [T]?) {<br>    switch (lhs,rhs) {<br>    case (_,nil): return                             // no-op whether lhs is nil or not when rhs is<br>    case (nil,_?): lhs = rhs                         // lhs of nil gets replaced<br>    case (_?,let rhs?): lhs!.append(contentsOf: rhs) // neither nil: append in-place<br>    }<br>}<br></p><p>(you could make rhs generic over sequences too but then you don’t get automatic handling of subclasses of T on the rhs)<br></p><p>But it’s probably not a good idea to overload += like this since the extra handling of nils, especially on the lhs, is a bit out of the expected behavior for += and could backfire if you accidentally used it somewhere you didn’t expect. So maybe make it a method with a new name, like:<br></p><p>extension Optional where Wrapped: RangeReplaceableCollection {<br>    mutating func maybeAppend(others: [Wrapped.Iterator.Element]?) {<br>        switch (self,others) {<br>        case (_,nil): return<br>        case (nil,let x?): self = Wrapped(x)<br>        case (_?,let x?): self!.append(contentsOf: x)<br>        }<br>    }<br>}<br></p><p><br>&gt; On Oct 20, 2016, at 5:17 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; When working with URLComponents query items, it would be nice to write code like this:<br>&gt; <br>&gt; var oqi: [URLQueryItem]? = [..., ..., ...]<br>&gt; <br>&gt; var comps = URLComponents(…)<br>&gt; comps.queryItems += oqi<br>&gt; <br>&gt; The problem is that queryItems is [URLQueryItem]?, and so I can&#39;t just append. I&#39;d like to write a version of += that:<br>&gt; <br>&gt; • Takes an LHS of [URLQueryItems]?, RHS of [things possibly derived from URLQueryItem]?<br>&gt; • if LHS != nil, make an array of LHS, and optionally append RHS, and return that<br>&gt; • if LHS == nil &amp;&amp; RHS != nil, return RHS<br>&gt; • If both are nil, return nil<br>&gt; <br>&gt; I&#39;d like to do this in a generic way that works for any type on the left and possibly-dervied types on the right.<br>&gt; <br>&gt; -- <br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161020/17559744/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
