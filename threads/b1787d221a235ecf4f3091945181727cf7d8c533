<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May  4, 2016 at 01:00:00pm</p></header><div class="content"><p>I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values. <br></p><p>Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br></p><p>I performed a gmane search and did not find a previous thread on this subject.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May  4, 2016 at 07:00:00pm</p></header><div class="content"><p>It&#39;s worth looking into CoffeeScript, in which true/false, yes/no, and<br>on/off are all accepted.<br>On Wed, May 4, 2016 at 12:04 PM Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I propose adding yes and no to the standard library as aliases for true<br>&gt; and false Boolean values. When answering the questions posed by Boolean<br>&gt; properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot;<br>&gt; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection<br>&gt; contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro<br>&gt; equivalents, admittedly with some attendant fuzziness because boolean<br>&gt; implementation details allowed non 0/1 truth values.<br>&gt;<br>&gt; Swift on the other hand has very firm ideas about true and false. Adding<br>&gt; yes and no literal aliases would enhance code readability with little cost.<br>&gt; There&#39;s minimal historic support among languages for yes/no but Swift is an<br>&gt; Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt;<br>&gt; I performed a gmane search and did not find a previous thread on this<br>&gt; subject.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/781238f5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May  4, 2016 at 03:00:00pm</p></header><div class="content"><p>I am a soft no on this if only because it seems unnecessary to augment such well-defined and meaningful constants to match Objective-C [e.g. we’re subject to the same set of “why does Swift use YES and NO when it already has true and false” questions that exist if you search around for “YES NO Objective-C”]. Plus, if you want your own private definition of truthiness, a couple of let constants can cook up a DSL just fine.<br></p><p>As an aside, I have a hunch this isn&#39;t the reason YES and NO wound up in Objective-C in the first place.  To me, it seems like the authors of the early runtimes needed a pre-stdbool way of talking about truthiness and falsiness knowing that C++ was already using true and false, MacTypes was already using TRUE and FALSE, and PascalCase identifiers were reserved for class names.<br></p><p>&gt; On May 4, 2016, at 3:04 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values.<br>&gt; <br>&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt; <br>&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/76e76fc9/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May  5, 2016 at 01:00:00am</p></header><div class="content"><p>Furthermore, YES/NO in Objective-C is not the same as true/false in Swift:<br>I&#39;m always watching out for code that checks if a BOOL value is YES, because YES just isn&#39;t the only true value in Objective C. The following code has a subtle bug in Objective-C whereas it works nicely in Swift. (One could also argue that the bug is in the code that produced bogus x/y-values in the first place, but anyhow.)<br></p><p>if(x || y) {<br>   if(x == y) {<br>      print(&quot;x and y are both true&quot;)<br>   } else {<br>      print(&quot;only one of x and y is true&quot;)<br>   }<br>} else {<br>   print(&quot;x and y are both false&quot;)<br>}<br></p><p>Of the three print()-statements above, 2 are wrong in Objective-C, and only the last one is true. E.g. if x is YES and y is 2, Objective-C will print &quot;only one of x and y is true&quot;. That&#39;s at least counter-intuitive, and once you spend an hour tracking down a bug related to it you&#39;ll appreciate a real Bool type that can really only be true or false, and nothing else. (Sure, booleans should only be YES or NO in Objective-C, and IMHO the culprit are usually implicit (or even explicit!) conversions from int or char (or id) to BOOL.) The Bool-semantics of Swift are the same as Java&#39;s, so I think it makes sense to call the literals true and false also.<br></p><p>-Michael<br></p><p>&gt; Am 04.05.2016 um 21:51 schrieb Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I am a soft no on this if only because it seems unnecessary to augment such well-defined and meaningful constants to match Objective-C [e.g. we’re subject to the same set of “why does Swift use YES and NO when it already has true and false” questions that exist if you search around for “YES NO Objective-C”]. Plus, if you want your own private definition of truthiness, a couple of let constants can cook up a DSL just fine.<br>&gt; <br>&gt; As an aside, I have a hunch this isn&#39;t the reason YES and NO wound up in Objective-C in the first place.  To me, it seems like the authors of the early runtimes needed a pre-stdbool way of talking about truthiness and falsiness knowing that C++ was already using true and false, MacTypes was already using TRUE and FALSE, and PascalCase identifiers were reserved for class names.<br>&gt; <br>&gt;&gt; On May 4, 2016, at 3:04 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values.<br>&gt;&gt; <br>&gt;&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt;&gt; <br>&gt;&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  4, 2016 at 01:00:00pm</p></header><div class="content"><p>-1 from me. We should not introduce two equivalent spellings for the same thing.<br></p><p>(Yes, there are sometimes multiple ways to accomplish something, but they are not nearly this close.)<br></p><p>Jordan<br></p><p><br>&gt; On May 4, 2016, at 12:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values. <br>&gt; <br>&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt; <br>&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b74cd4039f0c53145a186868ab569c0?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Josh Parmenter</string> &lt;jparmenter at vectorform.com&gt;<p>May  4, 2016 at 09:00:00pm</p></header><div class="content"><p>I agree - please - just don’t. This is easy enough to create on your own if you wish, but I think it is easier for new developers to the language not to have to ask what differences there are between ‘true’ and ‘yes’ and ‘YES&#39; … etc<br></p><p><br>On May 4, 2016, at 1:35 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>-1 from me. We should not introduce two equivalent spellings for the same thing.<br></p><p>(Yes, there are sometimes multiple ways to accomplish something, but they are not nearly this close.)<br></p><p>Jordan<br></p><p><br>On May 4, 2016, at 12:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values.<br></p><p>Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br></p><p>I performed a gmane search and did not find a previous thread on this subject.<br></p><p>-- E<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br>Joshua Parmenter | Software Development<br></p><p>T 248 777 7777<br>C 206 437 1551<br>F 248 616 1980<br>www.vectorform.com&lt;http://www.vectorform.com/&gt;<br></p><p>Vectorform<br>2107 Elliott Ave Suite 303<br>Seattle, WA  98121 USA<br></p><p>Think Tank. Lab. Studio.<br>We invent digital products and experiences.<br></p><p>SEATTLE | DETROIT | NEW YORK | MUNICH | HYDERABAD<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>May  4, 2016 at 02:00:00pm</p></header><div class="content"><p>Agreed. -1. <br></p><p>Sent from my iPhone<br></p><p>&gt; On May 4, 2016, at 1:35 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 from me. We should not introduce two equivalent spellings for the same thing.<br>&gt; <br>&gt; (Yes, there are sometimes multiple ways to accomplish something, but they are not nearly this close.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On May 4, 2016, at 12:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values. <br>&gt;&gt; <br>&gt;&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt;&gt; <br>&gt;&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  4, 2016 at 09:00:00pm</p></header><div class="content"><p>On May 4, 2016, at 1:35 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; -1 from me. We should not introduce two equivalent spellings for the same thing.<br></p><p>I agree with Jordan in this case.  I’m aware of the ObjC precedent, but keep in mind that that precedent was formed in the pre-ANSI-C days.  IMO, it is better to have a single way to specify a concept, rather than two identical ways.  Also, YAGNI :-)<br></p><p>I agree that we haven’t had a thread on this concept though!<br></p><p>-Chris<br></p><p><br></p><p>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On May 4, 2016, at 12:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values. <br>&gt;&gt; <br>&gt;&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt;&gt; <br>&gt;&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Same, -1 from me. I’m not saying its a bad idea, just no worth polluting the standard library.<br></p><p>&gt; On 05 May 2016, at 06:06, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 4, 2016, at 1:35 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; -1 from me. We should not introduce two equivalent spellings for the same thing.<br>&gt; <br>&gt; I agree with Jordan in this case.  I’m aware of the ObjC precedent, but keep in mind that that precedent was formed in the pre-ANSI-C days.  IMO, it is better to have a single way to specify a concept, rather than two identical ways.  Also, YAGNI :-)<br>&gt; <br>&gt; I agree that we haven’t had a thread on this concept though!<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 4, 2016, at 12:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May  4, 2016 at 11:00:00pm</p></header><div class="content"><p>I’m a big fan of natural language style statements in code, but I think it would have to be a change of true/false or yes/no across the entire language, introducing lots of options creates uncertainty, especially for newer programmers. However I’m not sure if I’d want that, as true/false are the more appropriate options when you think of it in terms of logic statements, and they do still read to a reasonable degree as natural language, in fact when you think of it in terms of logic it evokes more of the sense that a statement is absolutely true or false, whereas yes or no, though still positive or negative, don’t quite have that same impact.<br></p><p>So I appreciate the intent behind this, but I think I agree with others that we don’t really want to add synonyms where there’s no clear advantage, and the possibility of confusion.<br></p><p>&gt; On 4 May 2016, at 20:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I propose adding yes and no to the standard library as aliases for true and false Boolean values. When answering the questions posed by Boolean properties and methods, &quot;yes&quot; and &quot;no&quot; may provide better fits than &quot;true&quot; and &quot;false&quot;.  &quot;Should this view be hidden?&quot; &quot;Yes!&quot; &quot;Does this collection contain the number 2?&quot; &quot;No!&quot;. Objective-C solved this by adding macro equivalents, admittedly with some attendant fuzziness because boolean implementation details allowed non 0/1 truth values. <br>&gt; <br>&gt; Swift on the other hand has very firm ideas about true and false. Adding yes and no literal aliases would enhance code readability with little cost. There&#39;s minimal historic support among languages for yes/no but Swift is an Apple-y kind of language and yes/no is an Apple-y kindness to developers.<br>&gt; <br>&gt; I performed a gmane search and did not find a previous thread on this subject.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>May  5, 2016 at 09:00:00am</p></header><div class="content"><p>I have seen wrong usage of bool values in Objective-C many times, and although most of those weren&#39;t real problems, I&#39;d rather prefer to be forced to use a single pair of words for true/false.<br>If this single pair is true/false or yes/no (or even .yes/.no [enum]) isn&#39;t that important to me, so I&#39;m less opposed to change the names instead of introducing an alias.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>May  5, 2016 at 09:00:00am</p></header><div class="content"><p>I think the descriptive/natural language aspect of Objective-C and Cocoa was and is a strength that should be kept in Swift too. <br>It may be perceived as a pragmatist attempt to simplify the language somewhat or make it appear friendlier, but it is not a bad thing in and of itself. <br></p><p>[[iOS messageWithData:ideas] broadcast]<br></p><p>&gt; On 5 May 2016, at 08:54, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I have seen wrong usage of bool values in Objective-C many times, and although most of those weren&#39;t real problems, I&#39;d rather prefer to be forced to use a single pair of words for true/false.<br>&gt; If this single pair is true/false or yes/no (or even .yes/.no [enum]) isn&#39;t that important to me, so I&#39;m less opposed to change the names instead of introducing an alias.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ab8ff5d36ad4f40d7905509956e5c706?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Jacopo Andrea Giola</string> &lt;swift-evolution at jacopo.giola.org&gt;<p>May  5, 2016 at 11:00:00am</p></header><div class="content"><p>-1 for me as well.<br></p><p>One of the most FAQ of other fellow developers coming from other languages are often confuse by the YES/NO boolean in Obj-C and always asks why I use those and not true/false (and don’t get me started on nil/Nil/NULL).<br>I don’t want to find in the future discussion on StackOverflow with titles like “What are the differences between true/yes/on and false/no/off in Swift?” or “Is more correct to use yes or on in method x?”<br></p><p>Jacopo<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Including yes/no in stdlib as aliases for true/false</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May  5, 2016 at 01:00:00pm</p></header><div class="content"><p>-1 as well. Everything has already been said by the community. Swift should evolve on its own and don&#39;t care around old garbage. true and false is and was the best way to express a boolean.<br></p><p>--  <br>Adrian Zubarev  <br></p><p>Am 5. Mai 2016 um 11:56:55, Jacopo Andrea Giola via swift-evolution (swift-evolution at swift.org(mailto:swift-evolution at swift.org)) schrieb:<br></p><p>&gt;  <br>&gt; -1 for me as well.<br>&gt;  <br>&gt; One of the most FAQ of other fellow developers coming from other languages are often confuse by the YES/NO boolean in Obj-C and always asks why I use those and not true/false (and don’t get me started on nil/Nil/NULL).<br>&gt; I don’t want to find in the future discussion on StackOverflow with titles like “What are the differences between true/yes/on and false/no/off in Swift?” or “Is more correct to use yes or on in method x?”<br>&gt;  <br>&gt; Jacopo<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/7a443f15/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
