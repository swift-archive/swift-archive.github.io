<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>incomplete implementation warning functions</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>January 21, 2016 at 05:00:00am</p></header><div class="content"><p>Hello,<br></p><p>I would like to propose functions that warn about incomplete implementations without calling NSUnimplemented/fatalError. They could provide a standard interface for reminding/warning about incomplete implementations while things are being built.<br></p><p>I was thinking of two utility functions:<br>1) NSWarnIncompleteImplementation: Prints a warning message once. Can make potential issues clear (without flooding the console), particularly for classes where most of the implementation is there, but something could fail for certain parameters/configurations.<br>2) NSWarnUnimplemented: prints a warning on each call, ex. in a setter that doesn’t do anything<br></p><p>Something like:<br>https://github.com/e78l/swift-corelibs-foundation/commit/f69f174ef0cfcdd32fb43912c2c88179fce07ce3<br></p><p>Are there are any recommendations/thoughts about incorporating these functions?<br></p><p>Regards,<br>Will Stanton<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>incomplete implementation warning functions</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 21, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Will,<br></p><p>The reason we chose fatalError() was that we felt that the safest course of action when reaching unimplemented code was to immediately crash. If we continue instead, aren’t we putting the app into an unknown state?<br></p><p>- Tony<br></p><p>&gt; On Jan 21, 2016, at 2:55 AM, Will Stanton via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I would like to propose functions that warn about incomplete implementations without calling NSUnimplemented/fatalError. They could provide a standard interface for reminding/warning about incomplete implementations while things are being built.<br>&gt; <br>&gt; I was thinking of two utility functions:<br>&gt; 1) NSWarnIncompleteImplementation: Prints a warning message once. Can make potential issues clear (without flooding the console), particularly for classes where most of the implementation is there, but something could fail for certain parameters/configurations.<br>&gt; 2) NSWarnUnimplemented: prints a warning on each call, ex. in a setter that doesn’t do anything<br>&gt; <br>&gt; Something like:<br>&gt; https://github.com/e78l/swift-corelibs-foundation/commit/f69f174ef0cfcdd32fb43912c2c88179fce07ce3<br>&gt; <br>&gt; Are there are any recommendations/thoughts about incorporating these functions?<br>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>incomplete implementation warning functions</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>January 21, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello Tony,<br></p><p>In my view, crashing immediately isn’t best when ‘most’ of the implementation is present. A function could work most of the time but still need some work – no need to always crash.<br>Is it possible to conditionally call NSUnimplemented, in the cases where something doesn’t work? Maybe, but it might not be worth the time to write the potentially numerous checks.<br></p><p>Also, I would rather see messages in the console about something which might not work over nothing (i.e. a partial implementation).<br>I like the current rate of review and merges, but ex. NSDateFormatter doesn’t fully implement its time/date style properties, and this appears to have led to confusion: The submitter of SR-208 https://bugs.swift.org/browse/SR-208 spent time writing up cases and investigating the Swift toolchain, when there’s a telling line in NSDateFormatter.swift saying // TODO: Set up attributes here<br>A function like NSWarnIncompleteImplementation(“Date formatter attributes not set”) could have saved some time (presuming the console message was understood)!<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Jan 21, 2016, at 1:04 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Will,<br>&gt; <br>&gt; The reason we chose fatalError() was that we felt that the safest course of action when reaching unimplemented code was to immediately crash. If we continue instead, aren’t we putting the app into an unknown state?<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 2:55 AM, Will Stanton via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I would like to propose functions that warn about incomplete implementations without calling NSUnimplemented/fatalError. They could provide a standard interface for reminding/warning about incomplete implementations while things are being built.<br>&gt;&gt; <br>&gt;&gt; I was thinking of two utility functions:<br>&gt;&gt; 1) NSWarnIncompleteImplementation: Prints a warning message once. Can make potential issues clear (without flooding the console), particularly for classes where most of the implementation is there, but something could fail for certain parameters/configurations.<br>&gt;&gt; 2) NSWarnUnimplemented: prints a warning on each call, ex. in a setter that doesn’t do anything<br>&gt;&gt; <br>&gt;&gt; Something like:<br>&gt;&gt; https://github.com/e78l/swift-corelibs-foundation/commit/f69f174ef0cfcdd32fb43912c2c88179fce07ce3<br>&gt;&gt; <br>&gt;&gt; Are there are any recommendations/thoughts about incorporating these functions?<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; Will Stanton<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>incomplete implementation warning functions</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 21, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Will,<br></p><p>&gt; On Jan 21, 2016, at 2:27 PM, Will Stanton &lt;willstanton1 at yahoo.com&gt; wrote:<br>&gt; <br>&gt; Hello Tony,<br>&gt; <br>&gt; In my view, crashing immediately isn’t best when ‘most’ of the implementation is present. A function could work most of the time but still need some work – no need to always crash.<br>&gt; Is it possible to conditionally call NSUnimplemented, in the cases where something doesn’t work? Maybe, but it might not be worth the time to write the potentially numerous checks.<br>&gt; <br></p><p>I think this is probably the right approach.<br></p><p>&gt; Also, I would rather see messages in the console about something which might not work over nothing (i.e. a partial implementation).<br>&gt; I like the current rate of review and merges, but ex. NSDateFormatter doesn’t fully implement its time/date style properties, and this appears to have led to confusion: The submitter of SR-208 https://bugs.swift.org/browse/SR-208 spent time writing up cases and investigating the Swift toolchain, when there’s a telling line in NSDateFormatter.swift saying // TODO: Set up attributes here<br>&gt; A function like NSWarnIncompleteImplementation(“Date formatter attributes not set”) could have saved some time (presuming the console message was understood)!<br>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br></p><p>We’re in a somewhat tricky situation here where we want to enable incremental progress (and testability, so that prevents crashing), and yet I think it’s really important for users to understand when they’ve run across some code we haven’t implemented yet. I think in this case we should prioritize fixing the TODO and in future merges we should make sure it’s functional enough to work when merged, or crashes if you’re doing something that we haven’t yet implemented yet.<br></p><p>I find log messages tough to swallow in the end - I feel like there are so many that they become easy to ignore and therefore not as useful as we wanted in the first place…<br></p><p>- Tony<br></p><p>&gt; <br>&gt;&gt; On Jan 21, 2016, at 1:04 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Will,<br>&gt;&gt; <br>&gt;&gt; The reason we chose fatalError() was that we felt that the safest course of action when reaching unimplemented code was to immediately crash. If we continue instead, aren’t we putting the app into an unknown state?<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 21, 2016, at 2:55 AM, Will Stanton via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would like to propose functions that warn about incomplete implementations without calling NSUnimplemented/fatalError. They could provide a standard interface for reminding/warning about incomplete implementations while things are being built.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was thinking of two utility functions:<br>&gt;&gt;&gt; 1) NSWarnIncompleteImplementation: Prints a warning message once. Can make potential issues clear (without flooding the console), particularly for classes where most of the implementation is there, but something could fail for certain parameters/configurations.<br>&gt;&gt;&gt; 2) NSWarnUnimplemented: prints a warning on each call, ex. in a setter that doesn’t do anything<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Something like:<br>&gt;&gt;&gt; https://github.com/e78l/swift-corelibs-foundation/commit/f69f174ef0cfcdd32fb43912c2c88179fce07ce3<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are there are any recommendations/thoughts about incorporating these functions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; Will Stanton<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>incomplete implementation warning functions</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>January 25, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello Tony,<br></p><p>Thanks for your reply and sorry for my late one – I thought I could fix the whole file but then saw how long it was, and snow came. Oops!<br></p><p>I think the approach to future merges is very reasonable.<br>Still, I am skeptical log messages would be unbearable, especially once/run for debug.<br></p><p>Finally, some implementations seem hard to write without knowing how Apple Foundation does it, but I’ll save that for another day!<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Jan 21, 2016, at 6:38 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; We’re in a somewhat tricky situation here where we want to enable incremental progress (and testability, so that prevents crashing), and yet I think it’s really important for users to understand when they’ve run across some code we haven’t implemented yet. I think in this case we should prioritize fixing the TODO and in future merges we should make sure it’s functional enough to work when merged, or crashes if you’re doing something that we haven’t yet implemented yet.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>incomplete implementation warning functions</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January 26, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 25, 2016, at 6:28 PM, Will Stanton &lt;willstanton1 at yahoo.com&gt; wrote:<br>&gt; <br>&gt; Hello Tony,<br>&gt; <br>&gt; Thanks for your reply and sorry for my late one – I thought I could fix the whole file but then saw how long it was, and snow came. Oops!<br>&gt; <br>&gt; I think the approach to future merges is very reasonable.<br>&gt; Still, I am skeptical log messages would be unbearable, especially once/run for debug.<br>&gt; <br>&gt; Finally, some implementations seem hard to write without knowing how Apple Foundation does it, but I’ll save that for another day!<br></p><p>Sure thing. We’re happy to provide feedback on this part of course. =)<br></p><p>- Tony<br></p><p>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 6:38 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We’re in a somewhat tricky situation here where we want to enable incremental progress (and testability, so that prevents crashing), and yet I think it’s really important for users to understand when they’ve run across some code we haven’t implemented yet. I think in this case we should prioritize fixing the TODO and in future merges we should make sure it’s functional enough to work when merged, or crashes if you’re doing something that we haven’t yet implemented yet.<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
