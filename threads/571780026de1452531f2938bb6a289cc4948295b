<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>Pluggable hash algorithm for containers</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>Last year, Howard Hinnant proposed a composable hash algorithm framework for C++ that I was impressed with.<br></p><p>His proposal is here: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3980.html &lt;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3980.html&gt;<br>A live presentation is here: https://www.youtube.com/watch?v=Njjp_MJsgt8 &lt;https://www.youtube.com/watch?v=Njjp_MJsgt8&gt;<br></p><p>A type with multiple fields you inevitably want to do a hash_combine but this pollutes the hashing algorithm.  It turns out that (nearly) all hashing algorithms can be abstracted into 3 phases: initialization, digestion and finalization.  It might be cool if Swift Hashable adopted this pluggable architecture.  <br></p><p>1. Easily adopt Hashable<br>2. Easily change and compare hash algorithms based on performance / security needs<br>3. Make good hash implementations trivial for users.<br></p><p>Wondering if anyone has thought about this already / if it would be worthwhile pursuing more.<br></p><p>Best wishes,<br>Ray<br></p><p>PS:  I have always thought that it is a bummer that compound types such as tuples can?t conform to protocols and therefore be Hashable.  <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/5717295b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Pluggable hash algorithm for containers</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  3, 2015 at 08:00:00pm</p></header><div class="content"><p>On Thu, Dec 3, 2015 at 4:14 PM, Ray Fix &lt;rayfix at gmail.com&gt; wrote:<br>&gt;<br>&gt; Last year, Howard Hinnant proposed a composable hash algorithm framework for C++ that I was impressed with.<br>&gt;<br>&gt; His proposal is here: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3980.html<br>&gt; A live presentation is here: https://www.youtube.com/watch?v=Njjp_MJsgt8<br>&gt;<br>&gt; A type with multiple fields you inevitably want to do a hash_combine but this pollutes the hashing algorithm.  It turns out that (nearly) all hashing algorithms can be abstracted into 3 phases: initialization, digestion and finalization.  It might be cool if Swift Hashable adopted this pluggable architecture.<br></p><p>Hi Ray,<br></p><p>A prototype is here (written before Howard&#39;s talk, so it probably uses<br>different terms):<br></p><p>https://github.com/apple/swift/blob/master/validation-test/stdlib/HashingPrototype.swift<br></p><p>However, I couldn&#39;t make it interoperate with NSObject.hash in both<br>directions: you should be able to override &#39;var hash&#39; and get an<br>implementation of Hashable based on that, and vice versa.  It could be<br>solvable with protocol extensions now, I haven&#39;t looked at that<br>prototype for more than a year -- help and patches appreciated.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>Pluggable hash algorithm for containers</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 8:29 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; A prototype is here (written before Howard&#39;s talk, so it probably uses<br>&gt; different terms):<br>&gt; <br>&gt; https://github.com/apple/swift/blob/master/validation-test/stdlib/HashingPrototype.swift<br>&gt; <br></p><p>Thank your for the excellent pointer, Dmitri.  I will look into that as I get setup to build, test, and make actual changes.<br></p><p>&gt; However, I couldn&#39;t make it interoperate with NSObject.hash in both<br>&gt; directions: you should be able to override &#39;var hash&#39; and get an<br>&gt; implementation of Hashable based on that, and vice versa.  It could be<br>&gt; solvable with protocol extensions now, I haven&#39;t looked at that<br>&gt; prototype for more than a year -- help and patches appreciated.<br>&gt; <br></p><p>As you know, a hashing algorithm just needs to consume raw bytes.  The HasherType protocol could use protocol extensions to provide a clean API to standard types like Int and Float, Double, String, Bool, UInt32, Sequences, etc.  <br></p><p>extension CGPoint : NewHashable {<br>  func combineInto(hasher: Hasher) {<br>    x.combineInto(hasher)<br>    y.combineInto(hasher)<br>  }<br></p><p>What would be even better is if there was some interspection with a default implementation so the user code could look like this:<br></p><p>extension CGPoint : NewHashable {}<br></p><p>but that is dependent on another language feature.<br></p><p>The default implementation of hash is to call combineInto(Hasher) with a legacy hasher and immediately squeeze.  Might even want this to be statically dispatched (an extension with no protocol definition).  <br></p><p>extension NewHashable {<br>    var hash: Int {<br>         var h = LegacyHasher()<br>         self.combineInto(h)<br>         return h.squeezeHashValue()<br>    }<br>}<br></p><p>Any thoughts?<br></p><p>Ray<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Pluggable hash algorithm for containers</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 10:45 AM, Ray Fix &lt;rayfix at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 3, 2015, at 8:29 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; A prototype is here (written before Howard&#39;s talk, so it probably uses<br>&gt;&gt; different terms):<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift/blob/master/validation-test/stdlib/HashingPrototype.swift<br>&gt;&gt;<br>&gt;<br>&gt; Thank your for the excellent pointer, Dmitri.  I will look into that as I get setup to build, test, and make actual changes.<br>&gt;<br>&gt;&gt; However, I couldn&#39;t make it interoperate with NSObject.hash in both<br>&gt;&gt; directions: you should be able to override &#39;var hash&#39; and get an<br>&gt;&gt; implementation of Hashable based on that, and vice versa.  It could be<br>&gt;&gt; solvable with protocol extensions now, I haven&#39;t looked at that<br>&gt;&gt; prototype for more than a year -- help and patches appreciated.<br>&gt;&gt;<br>&gt;<br>&gt; As you know, a hashing algorithm just needs to consume raw bytes.  The HasherType protocol could use protocol extensions to provide a clean API to standard types like Int and Float, Double, String, Bool, UInt32, Sequences, etc.<br>&gt;<br>&gt; extension CGPoint : NewHashable {<br>&gt;   func combineInto(hasher: Hasher) {<br>&gt;     x.combineInto(hasher)<br>&gt;     y.combineInto(hasher)<br>&gt;   }<br></p><p>I definitely agree.<br></p><p>&gt; What would be even better is if there was some interspection with a default implementation so the user code could look like this:<br>&gt;<br>&gt; extension CGPoint : NewHashable {}<br>&gt;<br>&gt; but that is dependent on another language feature.<br></p><p>Right, there are a lot of interesting things we could do if we had<br>more introspection language features.<br></p><p>&gt; The default implementation of hash is to call combineInto(Hasher) with a legacy hasher and immediately squeeze.  Might even want this to be statically dispatched (an extension with no protocol definition).<br>&gt;<br>&gt; extension NewHashable {<br>&gt;     var hash: Int {<br>&gt;          var h = LegacyHasher()<br>&gt;          self.combineInto(h)<br>&gt;          return h.squeezeHashValue()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Any thoughts?<br></p><p>The interop issue is the following.  Consider a subclass of NSObject,<br>possibly defined in Objective-C, that does not conform to NewHashable:<br>we want to use its &#39;hash&#39; implementation.  If someone subclasses<br>NSObject in Swift and implements NewHashable, we should use its API<br>instead.  If someone further subclasses that Swift class in<br>Objective-C, they should be able to add more properties, and override<br>&#39;var hash&#39;, since that&#39;s the only API available in Objective-C.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
