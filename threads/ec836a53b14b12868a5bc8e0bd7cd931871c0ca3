<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5daa1633e5f933f7901a26b0329015cd?s=50"></div><header><strong>another issue with tuples</strong> from <string>Aaron Bohannon</string> &lt;aaron678 at gmail.com&gt;<p>July  5, 2016 at 11:00:00pm</p></header><div class="content"><p>Yesterday, it was pointed out that a variable name referring to a tuple<br>cannot be used as a pattern.  I have noticed another sort of inconsistency<br>in how tuples are treated when they are referenced by name:<br></p><p>func f() -&gt; Int { return 5 }<br></p><p>let t = (&quot;a&quot;, f)<br></p><p>let _: (String, () throws -&gt; Int) = t  // type error<br>let _: (String, () throws -&gt; Int) = (t.0, t.1)  // OK<br></p><p>This situation leads to a different sort of type error; however, the error<br>seems equally unwarranted.  I can&#39;t see any good reason for a well-typed<br>program to become ill-typed when `(t.0, t.1)` is replaced with `t`<br>(assuming `t` is a pair).<br></p><p>Should I file a separate bug for the specific example above?<br></p><p>- Aaron<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/ec830ca3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>another issue with tuples</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  6, 2016 at 02:00:00pm</p></header><div class="content"><p>Tuple is not designed to be used as commonly as classes and structs.<br></p><p>NOTE<br>&gt; Tuples are useful for temporary groups of related values. They are not<br>&gt; suited to the creation of complex data structures. If your data structure<br>&gt; is likely to persist beyond a temporary scope, model it as a class or<br>&gt; structure, rather than as a tuple. For more information, see Classes and<br>&gt; Structures.<br></p><p><br></p><p>quoting from:<br>&gt; https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html<br>&gt;<br></p><p><br>If you looking up in the documents, there is no struct nor class called<br>Tuple. The normal using on tuple in my option is to returning multiple<br>values in a function, or switch-case matching.<br></p><p>So you are right, tuple is not well-formed. But it is designed to be used<br>only temporarily. Please feel free to file another bug.<br></p><p>Zhaoxin<br></p><p><br>On Wed, Jul 6, 2016 at 1:48 PM, Aaron Bohannon via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Yesterday, it was pointed out that a variable name referring to a tuple<br>&gt; cannot be used as a pattern.  I have noticed another sort of inconsistency<br>&gt; in how tuples are treated when they are referenced by name:<br>&gt;<br>&gt; func f() -&gt; Int { return 5 }<br>&gt;<br>&gt; let t = (&quot;a&quot;, f)<br>&gt;<br>&gt; let _: (String, () throws -&gt; Int) = t  // type error<br>&gt; let _: (String, () throws -&gt; Int) = (t.0, t.1)  // OK<br>&gt;<br>&gt; This situation leads to a different sort of type error; however, the error<br>&gt; seems equally unwarranted.  I can&#39;t see any good reason for a well-typed<br>&gt; program to become ill-typed when `(t.0, t.1)` is replaced with `t`<br>&gt; (assuming `t` is a pair).<br>&gt;<br>&gt; Should I file a separate bug for the specific example above?<br>&gt;<br>&gt; - Aaron<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/e661f23f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cb1ca7c823f65ddac613a22234a1c81?s=50"></div><header><strong>another issue with tuples</strong> from <string>Shane S</string> &lt;electro_alchemy at hotmail.com&gt;<p>July  6, 2016 at 01:00:00pm</p></header><div class="content"><p>Aaron this works for me in both Swift 2.2 and Swift 3 provided that you remove the ‘throws’ keyword.<br></p><p>What seems odd to me is not the first assignment, but rather the second that _allows_ the use of ‘throws’ when t.1 (i.e. f) does not throw - is your concern the same?<br></p><p>Shane<br></p><p><br>On Jul 5, 2016, at 10:48 PM, Aaron Bohannon via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Yesterday, it was pointed out that a variable name referring to a tuple cannot be used as a pattern.  I have noticed another sort of inconsistency in how tuples are treated when they are referenced by name:<br></p><p>func f() -&gt; Int { return 5 }<br></p><p>let t = (&quot;a&quot;, f)<br></p><p>let _: (String, () throws -&gt; Int) = t  // type error<br>let _: (String, () throws -&gt; Int) = (t.0, t.1)  // OK<br></p><p>This situation leads to a different sort of type error; however, the error seems equally unwarranted.  I can&#39;t see any good reason for a well-typed program to become ill-typed when `(t.0, t.1)` is replaced with `t` (assuming `t` is a pair).<br></p><p>Should I file a separate bug for the specific example above?<br></p><p>- Aaron<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/075a8ecb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>another issue with tuples</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>July  6, 2016 at 10:00:00am</p></header><div class="content"><p>The language reference says that “Assignment is performed from each part of the value to the corresponding part of the expression. A String value can be assigned to a String, and a () -&gt; Int value can be assigned to a () throws -&gt; Int, so one would reasonably expect that both tuple assignments would work. <br></p><p>My hunch would be that the compiler has two different code paths for an assignment whose RHS is an identifier and an assignment whose RHS is a  parenthesized-expression; that in the first case starts about by asking whether the RHS type is the same or a subtype of the LHS type, and reporting an error when it isn’t, but that in the second case, it starts with an element-by-element type comparison, which succeeds.<br></p><p>Regards,<br></p><p>	Neil<br></p><p>&gt; On Jul 6, 2016, at 9:55 AM, Shane S via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Aaron this works for me in both Swift 2.2 and Swift 3 provided that you remove the ‘throws’ keyword.<br>&gt; <br>&gt; What seems odd to me is not the first assignment, but rather the second that _allows_ the use of ‘throws’ when t.1 (i.e. f) does not throw - is your concern the same?<br>&gt; <br>&gt; Shane<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 5, 2016, at 10:48 PM, Aaron Bohannon via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yesterday, it was pointed out that a variable name referring to a tuple cannot be used as a pattern.  I have noticed another sort of inconsistency in how tuples are treated when they are referenced by name:<br>&gt;&gt; <br>&gt;&gt; func f() -&gt; Int { return 5 }<br>&gt;&gt; <br>&gt;&gt; let t = (&quot;a&quot;, f)<br>&gt;&gt; <br>&gt;&gt; let _: (String, () throws -&gt; Int) = t  // type error<br>&gt;&gt; let _: (String, () throws -&gt; Int) = (t.0, t.1)  // OK<br>&gt;&gt; <br>&gt;&gt; This situation leads to a different sort of type error; however, the error seems equally unwarranted.  I can&#39;t see any good reason for a well-typed program to become ill-typed when `(t.0, t.1)` is replaced with `t` (assuming `t` is a pair).<br>&gt;&gt; <br>&gt;&gt; Should I file a separate bug for the specific example above?<br>&gt;&gt; <br>&gt;&gt; - Aaron<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/dfd3586e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cb1ca7c823f65ddac613a22234a1c81?s=50"></div><header><strong>another issue with tuples</strong> from <string>Shane S</string> &lt;electro_alchemy at hotmail.com&gt;<p>July  6, 2016 at 02:00:00pm</p></header><div class="content"><p>The section you are referencing is regarding ‘assignment’; however, in the example below we aren’t talking about assignment, this is &#39;constant-declaration&#39;, which is different than a ‘parenthesized expression’.<br></p><p>But overall I get it, and I think I’m trending toward the same conclusion you reached re: checking the full type of the identifier -vs- comparing the types of the constituent elements - interesting stuff!<br></p><p>Shane<br></p><p><br>On Jul 6, 2016, at 7:34 AM, Neil Faiman &lt;neil.swift at faiman.org&lt;mailto:neil.swift at faiman.org&gt;&gt; wrote:<br></p><p>The language reference says that “Assignment is performed from each part of the value to the corresponding part of the expression. A String value can be assigned to a String, and a () -&gt; Int value can be assigned to a () throws -&gt; Int, so one would reasonably expect that both tuple assignments would work.<br></p><p>My hunch would be that the compiler has two different code paths for an assignment whose RHS is an identifier and an assignment whose RHS is a  parenthesized-expression; that in the first case starts about by asking whether the RHS type is the same or a subtype of the LHS type, and reporting an error when it isn’t, but that in the second case, it starts with an element-by-element type comparison, which succeeds.<br></p><p>Regards,<br></p><p>Neil<br></p><p>On Jul 6, 2016, at 9:55 AM, Shane S via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Aaron this works for me in both Swift 2.2 and Swift 3 provided that you remove the ‘throws’ keyword.<br></p><p>What seems odd to me is not the first assignment, but rather the second that _allows_ the use of ‘throws’ when t.1 (i.e. f) does not throw - is your concern the same?<br></p><p>Shane<br></p><p><br>On Jul 5, 2016, at 10:48 PM, Aaron Bohannon via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Yesterday, it was pointed out that a variable name referring to a tuple cannot be used as a pattern.  I have noticed another sort of inconsistency in how tuples are treated when they are referenced by name:<br></p><p>func f() -&gt; Int { return 5 }<br></p><p>let t = (&quot;a&quot;, f)<br></p><p>let _: (String, () throws -&gt; Int) = t  // type error<br>let _: (String, () throws -&gt; Int) = (t.0, t.1)  // OK<br></p><p>This situation leads to a different sort of type error; however, the error seems equally unwarranted.  I can&#39;t see any good reason for a well-typed program to become ill-typed when `(t.0, t.1)` is replaced with `t` (assuming `t` is a pair).<br></p><p>Should I file a separate bug for the specific example above?<br></p><p>- Aaron<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/9474f06c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5daa1633e5f933f7901a26b0329015cd?s=50"></div><header><strong>another issue with tuples</strong> from <string>Aaron Bohannon</string> &lt;aaron678 at gmail.com&gt;<p>July 10, 2016 at 07:00:00pm</p></header><div class="content"><p>This inconsistency is not limited to situations in which a tuple is a<br>non-temporary value:<br></p><p><br>class C {}<br></p><p>let _ = (C(), 3 as Int) as (Any, Int?)  // WORKS FINE<br>let _ = (C(), 3) as (C, Int) as (Any, Int?)  // TYPE ERROR<br>let _ = ((C(), 3), true).0 as (Any, Int?)  // TYPE ERROR<br></p><p><br>It can even cause the compiler to crash during type-checking on expressions<br>like the one below (which ought to be considered well-typed):<br></p><p><br>let _ = &quot;a&quot;.isEmpty ? (C(), 3) as (C, Int) : (C(), 3) as (Any, Int?)<br></p><p><br>And it leads to some rather amusing output if you compile and run this code:<br></p><p><br>if (C(), 3 as Int) is (Any, Int?) {<br>  print(&quot;test is true&quot;)<br>} else {<br>  print(&quot;test is false&quot;)<br>}<br></p><p><br>The outcome will look something like this:<br></p><p><br></p><p><br></p><p>*test.swift:88:20: warning: &#39;is&#39; test is always trueif (C(), 3 as Int) is<br>(Any, Int?) {                   ^test is false*<br></p><p><br></p><p>My bug report contains versions of all of those examples:<br></p><p>https://bugs.swift.org/browse/SR-2041<br></p><p>I used type casts above in order to make the origin of the problem as clear<br>as possible; however, it&#39;s also worth adding one more example to illustrate<br>that this problem is not limited to code that is contrived or uses tuples<br>in ways that are stylistically discouraged:<br></p><p><br>func returnPair() -&gt; (C, Int) { return (C(), 3) }<br>var x: Int? = nil<br></p><p>x = returnPair().1  // WORKS FINE<br></p><p>(_, x) = returnPair()  // TYPE ERROR<br></p><p><br>- Aaron<br></p><p><br>On Wed, Jul 6, 2016 at 8:57 AM, Shane S &lt;electro_alchemy at hotmail.com&gt; wrote:<br></p><p>&gt; The section you are referencing is regarding ‘assignment’; however, in the<br>&gt; example below we aren’t talking about assignment, this is<br>&gt; &#39;constant-declaration&#39;, which is different than a ‘parenthesized<br>&gt; expression’.<br>&gt;<br>&gt; But overall I get it, and I think I’m trending toward the same conclusion<br>&gt; you reached re: checking the full type of the identifier -vs- comparing the<br>&gt; types of the constituent elements - interesting stuff!<br>&gt;<br>&gt; Shane<br>&gt;<br>&gt;<br>&gt; On Jul 6, 2016, at 7:34 AM, Neil Faiman &lt;neil.swift at faiman.org&gt; wrote:<br>&gt;<br>&gt; The language reference says that “Assignment is performed from each part<br>&gt; of the *value* to the corresponding part of the *expression*. A *String* value<br>&gt; can be assigned to a *String*, and a *() -&gt; Int* value can be assigned to<br>&gt; a *() throws -&gt; Int*, so one would reasonably expect that both tuple<br>&gt; assignments would work.<br>&gt;<br>&gt; My hunch would be that the compiler has two different code paths for an<br>&gt; assignment whose RHS is an *identifier* and an assignment whose RHS is a<br>&gt; *parenthesized-expression*; that in the first case starts about by asking<br>&gt; whether the RHS type is the same or a subtype of the LHS type, and<br>&gt; reporting an error when it isn’t, but that in the second case, it starts<br>&gt; with an element-by-element type comparison, which succeeds.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; Neil<br>&gt;<br>&gt; On Jul 6, 2016, at 9:55 AM, Shane S via swift-users &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Aaron this works for me in both Swift 2.2 and Swift 3 provided that you<br>&gt; remove the ‘throws’ keyword.<br>&gt;<br>&gt; What seems odd to me is not the first assignment, but rather the second<br>&gt; that _allows_ the use of ‘throws’ when t.1 (i.e. f) does not throw - is<br>&gt; your concern the same?<br>&gt;<br>&gt; Shane<br>&gt;<br>&gt;<br>&gt; On Jul 5, 2016, at 10:48 PM, Aaron Bohannon via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Yesterday, it was pointed out that a variable name referring to a tuple<br>&gt; cannot be used as a pattern.  I have noticed another sort of inconsistency<br>&gt; in how tuples are treated when they are referenced by name:<br>&gt;<br>&gt; func f() -&gt; Int { return 5 }<br>&gt;<br>&gt; let t = (&quot;a&quot;, f)<br>&gt;<br>&gt; let _: (String, () throws -&gt; Int) = t  // type error<br>&gt; let _: (String, () throws -&gt; Int) = (t.0, t.1)  // OK<br>&gt;<br>&gt; This situation leads to a different sort of type error; however, the error<br>&gt; seems equally unwarranted.  I can&#39;t see any good reason for a well-typed<br>&gt; program to become ill-typed when `(t.0, t.1)` is replaced with `t`<br>&gt; (assuming `t` is a pair).<br>&gt;<br>&gt; Should I file a separate bug for the specific example above?<br>&gt;<br>&gt; - Aaron<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160710/252d4ff0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
