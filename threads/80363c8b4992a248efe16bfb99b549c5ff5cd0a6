<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e20cea33ea274cfa8a17fabf7ce404ee?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Jason Pollack</string> &lt;jlpollack at gmail.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>I&#39;d like to propose a small enhancement to the repeat loop.<br></p><p>Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do<br>something like:<br></p><p>for _ in 0 ..&lt; count {<br>   //Do something here<br>}<br></p><p>It looks and feels a little awkward. We need to create an unnamed variable,<br>and it&#39;s easy to forget (especially for language newcomers) that the loop<br>starts with 0 and doesn&#39;t include count.<br></p><p>We can also do:<br></p><p>var i = 0<br>repeat {<br>    //Some code<br>    i += 1<br>} while i &lt; 10<br></p><p>This is worse, in that it introduces a variable in the outer scope, and<br>puts the repeat count at the end. Plus, if the expression inside the repeat<br>is complex, the value of i may never be incremented, or may be incremented<br>more than once.<br></p><p><br>I propose the following:<br></p><p>repeat count {<br>    //Do something here<br>}<br></p><p>It&#39;s cleaner, and IMO clearer what this code is intended to do.<br></p><p>Naturally &#39;count&#39; should be non-negative. A while clause is not needed,<br>although I could imagine it being supplied, to create a construct such as:<br></p><p>var ok = true<br>repeat numberOfTimes {<br>    //Do something, possibly set ok to false<br>} while ok<br></p><p>This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be<br>ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break<br>statement).<br></p><p>Thoughts?<br></p><p>Thanks!<br>-Jason-<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/8036d0a6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c673fa52f8aa5b3e9205e51230764ca?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Kevin Kachikian</string> &lt;kevyk at mac.com&gt;<p>December  8, 2015 at 01:00:00pm</p></header><div class="content"><p>I like it!<br></p><p>Anything to keep heading down the cleaner syntax path as Swift cleans up so much of the visual noise that ObjC used to present.<br></p><p>That said, with. map and other capabilities, how often would this be used?<br></p><p><br>&gt; On Dec 8, 2015, at 1:54 PM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt; <br>&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt; <br>&gt; for _ in 0 ..&lt; count {<br>&gt;    //Do something here<br>&gt; }<br>&gt; <br>&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt; <br>&gt; We can also do:<br>&gt; <br>&gt; var i = 0<br>&gt; repeat {<br>&gt;     //Some code<br>&gt;     i += 1<br>&gt; } while i &lt; 10<br>&gt; <br>&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt; <br>&gt; <br>&gt; I propose the following:<br>&gt; <br>&gt; repeat count {<br>&gt;     //Do something here<br>&gt; }<br>&gt; <br>&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt; <br>&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt; <br>&gt; var ok = true<br>&gt; repeat numberOfTimes {<br>&gt;     //Do something, possibly set ok to false<br>&gt; } while ok<br>&gt; <br>&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Thanks!<br>&gt; -Jason-<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/ded00fed/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  8, 2015 at 05:00:00pm</p></header><div class="content"><p>On Tue, Dec 8, 2015 at 4:54 PM, Jason Pollack via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I propose the following:<br>&gt;<br>&gt; repeat count {<br>&gt;     //Do something here<br>&gt; }<br>&gt;<br>&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt;<br></p><p>I&#39;m not sure I like the idea of adding this functionality over &quot;repeat&quot;. If<br>&quot;for _ in&quot; is ugly, there&#39;s always the opportunity to add a helper, e.g.:<br></p><p>    extension Int {<br>        func times(@autoclosure while condition: () -&gt; Bool = true, body:<br>() -&gt; Void) {<br>            // ...<br>        }<br>    }<br></p><p>    5.times {<br>        // ...<br>    }<br></p><p><br>&gt; var ok = true<br>&gt;<br>repeat numberOfTimes {<br>&gt;     //Do something, possibly set ok to false<br>&gt; } while ok<br>&gt;<br>&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be<br>&gt; ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break<br>&gt; statement).<br>&gt;<br></p><p>You can use a &quot;where&quot; clause to handle this in a for-in loop:<br></p><p>    var ok = true<br>    for _ in 0..&lt;numberOfTimes where ok {<br>        // ...<br>    }<br></p><p>Stephen<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/04f27383/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  8, 2015 at 03:00:00pm</p></header><div class="content"><p>You can do:<br></p><p>(0 ..&lt; count).forEach {<br>    // Do something here<br>}<br></p><p>You can also easily extend Int for a similar result:<br></p><p>public extension Int {<br>    func times(@noescape body: () -&gt; Void) {(0..&lt;self).forEach{_ in body()}}<br>}<br></p><p>-- E<br></p><p>&gt; On Dec 8, 2015, at 2:54 PM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt; <br>&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt; <br>&gt; for _ in 0 ..&lt; count {<br>&gt;    //Do something here<br>&gt; }<br>&gt; <br>&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt; <br>&gt; We can also do:<br>&gt; <br>&gt; var i = 0<br>&gt; repeat {<br>&gt;     //Some code<br>&gt;     i += 1<br>&gt; } while i &lt; 10<br>&gt; <br>&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt; <br>&gt; <br>&gt; I propose the following:<br>&gt; <br>&gt; repeat count {<br>&gt;     //Do something here<br>&gt; }<br>&gt; <br>&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt; <br>&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt; <br>&gt; var ok = true<br>&gt; repeat numberOfTimes {<br>&gt;     //Do something, possibly set ok to false<br>&gt; } while ok<br>&gt; <br>&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Thanks!<br>&gt; -Jason-<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/fac737d4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>I&#39;ve also thought of this idea before, but how often in code do you actually repeat something a given number of times? There are only a few use cases I can think of:<br></p><p>- retries before giving up on something<br>- emitting padding when doing formatted output of some kind<br>- reading formatted data when you have a given number of rows/records to read<br></p><p>If it&#39;s that rare, I&#39;m not sure it&#39;s worth dedicating syntax to.<br>Jordan<br></p><p>&gt; On Dec 8, 2015, at 13:54, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt; <br>&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt; <br>&gt; for _ in 0 ..&lt; count {<br>&gt;    //Do something here<br>&gt; }<br>&gt; <br>&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt; <br>&gt; We can also do:<br>&gt; <br>&gt; var i = 0<br>&gt; repeat {<br>&gt;     //Some code<br>&gt;     i += 1<br>&gt; } while i &lt; 10<br>&gt; <br>&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt; <br>&gt; <br>&gt; I propose the following:<br>&gt; <br>&gt; repeat count {<br>&gt;     //Do something here<br>&gt; }<br>&gt; <br>&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt; <br>&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt; <br>&gt; var ok = true<br>&gt; repeat numberOfTimes {<br>&gt;     //Do something, possibly set ok to false<br>&gt; } while ok<br>&gt; <br>&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Thanks!<br>&gt; -Jason-<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/bf9e56ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>December  8, 2015 at 06:00:00pm</p></header><div class="content"><p>For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br></p><p>I&#39;m not ready to introduce for but repetition is a useful notion. I used to add repeat() in an extension to Int<br></p><p>5.repeat{ ...}<br></p><p>Is easier to describe than <br></p><p>for _ in 1...5 {...}<br></p><p>The _ and 1...5 are wonderful for us but often cause newbies to stumble<br></p><p>Now that repeat is a keyword I haven&#39;t come up with a good replacement yet<br></p><p>Daniel<br></p><p>&gt; On Dec 8, 2015, at 6:21 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve also thought of this idea before, but how often in code do you actually repeat something a given number of times? There are only a few use cases I can think of:<br>&gt; <br>&gt; - retries before giving up on something<br>&gt; - emitting padding when doing formatted output of some kind<br>&gt; - reading formatted data when you have a given number of rows/records to read<br>&gt; <br>&gt; If it&#39;s that rare, I&#39;m not sure it&#39;s worth dedicating syntax to.<br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 13:54, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt;&gt; <br>&gt;&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt;&gt; <br>&gt;&gt; for _ in 0 ..&lt; count {<br>&gt;&gt;    //Do something here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt;&gt; <br>&gt;&gt; We can also do:<br>&gt;&gt; <br>&gt;&gt; var i = 0<br>&gt;&gt; repeat {<br>&gt;&gt;     //Some code<br>&gt;&gt;     i += 1<br>&gt;&gt; } while i &lt; 10<br>&gt;&gt; <br>&gt;&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I propose the following:<br>&gt;&gt; <br>&gt;&gt; repeat count {<br>&gt;&gt;     //Do something here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt;&gt; <br>&gt;&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt;&gt; <br>&gt;&gt; var ok = true<br>&gt;&gt; repeat numberOfTimes {<br>&gt;&gt;     //Do something, possibly set ok to false<br>&gt;&gt; } while ok<br>&gt;&gt; <br>&gt;&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; -Jason-<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/f98f446d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br></p><p>This is a very valid use case.<br></p><p>FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br></p><p>I’d say that the pro’s and con’s of this are:<br></p><p>+ Makes a simple case very simple, particularly important in teaching.<br>+ Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>- It is “just syntactic sugar”, which makes the language more complex.<br>- It is a very narrow feature that is useful in few practical situations.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/95be8ce4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/998d3d631acb87e0aa687abc0085f990?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>André Videla</string> &lt;zephyz at me.com&gt;<p>December  9, 2015 at 07:00:00am</p></header><div class="content"><p>How about having a default implementation in the standard library for it? <br>We avoid syntactic sugar and we allow for this very simple yet useful expression.<br>And we’ve seen solutions in this thread using autoclosurses and extensions<br></p><p>5.times {<br>   …<br>}<br></p><p>or a function<br></p><p>repeat(4) {<br>   …<br>}<br></p><p>all sound good to me.<br></p><p>- André<br></p><p><br>&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt; <br>&gt; This is a very valid use case.<br>&gt; <br>&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt; <br>&gt; I’d say that the pro’s and con’s of this are:<br>&gt; <br>&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/eec3a2b1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  8, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 10:05 PM, André Videla &lt;zephyz at me.com&gt; wrote:<br>&gt; <br>&gt; How about having a default implementation in the standard library for it? <br>&gt; We avoid syntactic sugar and we allow for this very simple yet useful expression.<br>&gt; And we’ve seen solutions in this thread using autoclosurses and extensions<br>&gt; <br>&gt; 5.times {<br>&gt;    …<br>&gt; }<br></p><p>If the teaching angle is the motivation, then I’d say that this is worse.  <br></p><p>&gt; <br>&gt; or a function<br>&gt; <br>&gt; repeat(4) {<br>&gt;    …<br>&gt; }<br></p><p>Note that this *is* the proposal. :-)  “repeat” is a keyword in swift.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; all sound good to me.<br>&gt; <br>&gt; - André<br>&gt; <br>&gt; <br>&gt;&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt;&gt; <br>&gt;&gt; This is a very valid use case.<br>&gt;&gt; <br>&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt; <br>&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt; <br>&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/d842794f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e20cea33ea274cfa8a17fabf7ce404ee?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Jason Pollack</string> &lt;jlpollack at gmail.com&gt;<p>December  9, 2015 at 09:00:00am</p></header><div class="content"><p>Solutions like this look reasonable, until you try to use normal control<br>flow statements as you would in other loops. In the closure, a break or<br>continue are illegal, and a return acts like a continue.<br></p><p>var ok = true<br></p><p>5.times {<br>    ok = someTest()<br></p><p>    if (!ok) {<br>        //break - Nope!<br>        return //Sure, but loop continues anyway<br>    }<br>}<br></p><p>Sure, it&#39;s a contrived example, but it&#39;s easy to see how this construct is<br>not like other loops.<br></p><p>On the other hand, it might be nice to be able to decorate a closure such<br>that break and continue behave as one might expect inside a loop, but that<br>sounds like a can of worms.<br></p><p><br></p><p><br>On Wed, Dec 9, 2015 at 1:05 AM, André Videla &lt;zephyz at me.com&gt; wrote:<br></p><p>&gt; How about having a default implementation in the standard library for it?<br>&gt; We avoid syntactic sugar and we allow for this very simple yet useful<br>&gt; expression.<br>&gt; And we’ve seen solutions in this thread using autoclosurses and extensions<br>&gt;<br>&gt; 5.times {<br>&gt;    …<br>&gt; }<br>&gt;<br>&gt; or a function<br>&gt;<br>&gt; repeat(4) {<br>&gt;    …<br>&gt; }<br>&gt;<br>&gt; all sound good to me.<br>&gt;<br>&gt; - André<br>&gt;<br>&gt;<br>&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; For me this comes up when teaching children or new programmers. (Perhaps<br>&gt; not a valid use case)<br>&gt;<br>&gt;<br>&gt; This is a very valid use case.<br>&gt;<br>&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2<br>&gt; implementation of the feature, but was cut due to schedule limitations.<br>&gt; There is precedent for this sort of feature in many teaching oriented<br>&gt; languages (e.g. Logo).<br>&gt;<br>&gt; I’d say that the pro’s and con’s of this are:<br>&gt;<br>&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what<br>&gt; the behavior is.<br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/117495d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  9, 2015 at 10:00:00am</p></header><div class="content"><p>On Wed, Dec 9, 2015 at 9:41 AM, Jason Pollack via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Solutions like this look reasonable, until you try to use normal control<br>&gt; flow statements as you would in other loops. In the closure, a break or<br>&gt; continue are illegal, and a return acts like a continue.<br>&gt;<br>&gt; var ok = true<br>&gt;<br>&gt; 5.times {<br>&gt;     ok = someTest()<br>&gt;<br>&gt;     if (!ok) {<br>&gt;         //break - Nope!<br>&gt;         return //Sure, but loop continues anyway<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Sure, it&#39;s a contrived example, but it&#39;s easy to see how this construct is<br>&gt; not like other loops.<br>&gt;<br>&gt; On the other hand, it might be nice to be able to decorate a closure such<br>&gt; that break and continue behave as one might expect inside a loop, but that<br>&gt; sounds like a can of worms.<br>&gt;<br>Joe Groff suggested that here:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001150.html<br></p><p><br>If you can think of reasons why it might be a can of worms, I&#39;d love to<br>hear them. It&#39;d be a nice tool to have in the toolchain.<br></p><p>Stephen<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/a0182352/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e20cea33ea274cfa8a17fabf7ce404ee?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Jason Pollack</string> &lt;jlpollack at gmail.com&gt;<p>December  9, 2015 at 10:00:00am</p></header><div class="content"><p>Neat, I was thinking something along the same lines. My &#39;can of worms&#39;<br>thought is that it might be hard to distinguish between local and non-local<br>break/continue, and if the closure were a standalone function, would the<br>syntax even work? (I have an idea on this, but this ought to be a different<br>thread.) But I agree, would be a very nice tool to have.<br></p><p>On Wed, Dec 9, 2015 at 10:02 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; Joe Groff suggested that here:<br>&gt;<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001150.html<br>&gt;<br>&gt;<br>&gt; If you can think of reasons why it might be a can of worms, I&#39;d love to<br>&gt; hear them. It&#39;d be a nice tool to have in the toolchain.<br>&gt;<br>&gt; Stephen<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/04dbbcbf/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  9, 2015 at 12:00:00pm</p></header><div class="content"><p>I’m still of the belief that all types of loops could be condensed down to a single type of loop, the repeat-for loop<br></p><p>Consider:<br></p><p><br>The for-in loop:<br></p><p>repeat for x in 0..&lt;5 {<br>    // code<br>}<br></p><p>The C style for loop and the while loop:<br></p><p>repeat for var i = 0 while someCondition(i) {<br>    // code<br>} <br></p><p><br>The repeat while:<br></p><p>repeat for var i = 0 {<br>    // code<br>} while someConditionEvaluatedAfterFirstLoop() // The i variable would likely have to be considered in scope in the while expression<br></p><p><br>The currently discussed repeat loop<br></p><p>repeat 5 {<br>    // code<br>}<br></p><p>All follow a very basic pattern: The repeat keyword followed by a for declaration of loop scoped variables, then either a condition in the case of while or an iterator in the case of for-in. Optionally the language could include an “always” keyword that would specify a set of statements that were guaranteed to execute after each run of the loop. For example:<br></p><p>repeat for var i = 0 while i &lt; 5 {<br>    <br>} always i += 1<br></p><p>If this were the case then all current loop constructs and their features could be subsumed by a single type of loop (including the to-be-removed C style for). This does have the problem of increasing the length of some current loop constructs though, specifically for-in.<br></p><p>Tyler<br></p><p><br>&gt; On Dec 8, 2015, at 10:05 PM, André Videla via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How about having a default implementation in the standard library for it? <br>&gt; We avoid syntactic sugar and we allow for this very simple yet useful expression.<br>&gt; And we’ve seen solutions in this thread using autoclosurses and extensions<br>&gt; <br>&gt; 5.times {<br>&gt;    …<br>&gt; }<br>&gt; <br>&gt; or a function<br>&gt; <br>&gt; repeat(4) {<br>&gt;    …<br>&gt; }<br>&gt; <br>&gt; all sound good to me.<br>&gt; <br>&gt; - André<br>&gt; <br>&gt; <br>&gt;&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt;&gt; <br>&gt;&gt; This is a very valid use case.<br>&gt;&gt; <br>&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt; <br>&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt; <br>&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/ece753c8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>Oooh and one more, the Infinite Loop:<br></p><p>repeat {<br></p><p>}<br></p><p>&gt; On Dec 9, 2015, at 12:58 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m still of the belief that all types of loops could be condensed down to a single type of loop, the repeat-for loop<br>&gt; <br>&gt; Consider:<br>&gt; <br>&gt; <br>&gt; The for-in loop:<br>&gt; <br>&gt; repeat for x in 0..&lt;5 {<br>&gt;     // code<br>&gt; }<br>&gt; <br>&gt; The C style for loop and the while loop:<br>&gt; <br>&gt; repeat for var i = 0 while someCondition(i) {<br>&gt;     // code<br>&gt; } <br>&gt; <br>&gt; <br>&gt; The repeat while:<br>&gt; <br>&gt; repeat for var i = 0 {<br>&gt;     // code<br>&gt; } while someConditionEvaluatedAfterFirstLoop() // The i variable would likely have to be considered in scope in the while expression<br>&gt; <br>&gt; <br>&gt; The currently discussed repeat loop<br>&gt; <br>&gt; repeat 5 {<br>&gt;     // code<br>&gt; }<br>&gt; <br>&gt; All follow a very basic pattern: The repeat keyword followed by a for declaration of loop scoped variables, then either a condition in the case of while or an iterator in the case of for-in. Optionally the language could include an “always” keyword that would specify a set of statements that were guaranteed to execute after each run of the loop. For example:<br>&gt; <br>&gt; repeat for var i = 0 while i &lt; 5 {<br>&gt;     <br>&gt; } always i += 1<br>&gt; <br>&gt; If this were the case then all current loop constructs and their features could be subsumed by a single type of loop (including the to-be-removed C style for). This does have the problem of increasing the length of some current loop constructs though, specifically for-in.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 10:05 PM, André Videla via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How about having a default implementation in the standard library for it? <br>&gt;&gt; We avoid syntactic sugar and we allow for this very simple yet useful expression.<br>&gt;&gt; And we’ve seen solutions in this thread using autoclosurses and extensions<br>&gt;&gt; <br>&gt;&gt; 5.times {<br>&gt;&gt;    …<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; or a function<br>&gt;&gt; <br>&gt;&gt; repeat(4) {<br>&gt;&gt;    …<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; all sound good to me.<br>&gt;&gt; <br>&gt;&gt; - André<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/cbe75274/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a129ee11a8f35c906aef3bce561d4b5?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Tyler Cloutier</string> &lt;tcloutier at machinezone.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>Sorry, something is up with my email address. <br></p><p><br>Oooh and one more, the Infinite Loop:<br></p><p>repeat {<br></p><p>}<br></p><p><br>&gt; On Dec 9, 2015, at 12:58 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; I’m still of the belief that all types of loops could be condensed down to a single type of loop, the repeat-for loop<br>&gt; <br>&gt; Consider:<br>&gt; <br>&gt; <br>&gt; The for-in loop:<br>&gt; <br>&gt; repeat for x in 0..&lt;5 {<br>&gt;     // code<br>&gt; }<br>&gt; <br>&gt; The C style for loop and the while loop:<br>&gt; <br>&gt; repeat for var i = 0 while someCondition(i) {<br>&gt;     // code<br>&gt; } <br>&gt; <br>&gt; <br>&gt; The repeat while:<br>&gt; <br>&gt; repeat for var i = 0 {<br>&gt;     // code<br>&gt; } while someConditionEvaluatedAfterFirstLoop() // The i variable would likely have to be considered in scope in the while expression<br>&gt; <br>&gt; <br>&gt; The currently discussed repeat loop<br>&gt; <br>&gt; repeat 5 {<br>&gt;     // code<br>&gt; }<br>&gt; <br>&gt; All follow a very basic pattern: The repeat keyword followed by a for declaration of loop scoped variables, then either a condition in the case of while or an iterator in the case of for-in. Optionally the language could include an “always” keyword that would specify a set of statements that were guaranteed to execute after each run of the loop. For example:<br>&gt; <br>&gt; repeat for var i = 0 while i &lt; 5 {<br>&gt;     <br>&gt; } always i += 1<br>&gt; <br>&gt; If this were the case then all current loop constructs and their features could be subsumed by a single type of loop (including the to-be-removed C style for). This does have the problem of increasing the length of some current loop constructs though, specifically for-in.<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; On Dec 8, 2015, at 10:05 PM, André Videla via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How about having a default implementation in the standard library for it? <br>&gt;&gt; We avoid syntactic sugar and we allow for this very simple yet useful expression.<br>&gt;&gt; And we’ve seen solutions in this thread using autoclosurses and extensions<br>&gt;&gt; <br>&gt;&gt; 5.times {<br>&gt;&gt;    …<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; or a function<br>&gt;&gt; <br>&gt;&gt; repeat(4) {<br>&gt;&gt;    …<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; all sound good to me.<br>&gt;&gt; <br>&gt;&gt; - André<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/f90e92d9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>Even better (shorter)<br></p><p>loop {<br>    // code<br>}<br></p><p>loop for x in 0..&lt;5 {<br>    // code<br>}<br></p><p>loop for var i = 0 while someCondition(i) {<br>    // code<br>}<br></p><p>loop for var i = 0 {<br>    // code<br>} while someCondition(i) // The i variable would likely have to be considered in scope in the while expression<br></p><p>loop 5 {<br>    // code<br>}<br></p><p>loop for var i = 0 while i &lt; 5 {<br>    // code<br>} always i += 1<br></p><p><br></p><p>&gt; On Dec 9, 2015, at 1:29 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, something is up with my email address. <br>&gt; <br>&gt; <br>&gt; Oooh and one more, the Infinite Loop:<br>&gt; <br>&gt; repeat {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 12:58 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m still of the belief that all types of loops could be condensed down to a single type of loop, the repeat-for loop<br>&gt;&gt; <br>&gt;&gt; Consider:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The for-in loop:<br>&gt;&gt; <br>&gt;&gt; repeat for x in 0..&lt;5 {<br>&gt;&gt;     // code<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The C style for loop and the while loop:<br>&gt;&gt; <br>&gt;&gt; repeat for var i = 0 while someCondition(i) {<br>&gt;&gt;     // code<br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The repeat while:<br>&gt;&gt; <br>&gt;&gt; repeat for var i = 0 {<br>&gt;&gt;     // code<br>&gt;&gt; } while someConditionEvaluatedAfterFirstLoop() // The i variable would likely have to be considered in scope in the while expression<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The currently discussed repeat loop<br>&gt;&gt; <br>&gt;&gt; repeat 5 {<br>&gt;&gt;     // code<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; All follow a very basic pattern: The repeat keyword followed by a for declaration of loop scoped variables, then either a condition in the case of while or an iterator in the case of for-in. Optionally the language could include an “always” keyword that would specify a set of statements that were guaranteed to execute after each run of the loop. For example:<br>&gt;&gt; <br>&gt;&gt; repeat for var i = 0 while i &lt; 5 {<br>&gt;&gt;     <br>&gt;&gt; } always i += 1<br>&gt;&gt; <br>&gt;&gt; If this were the case then all current loop constructs and their features could be subsumed by a single type of loop (including the to-be-removed C style for). This does have the problem of increasing the length of some current loop constructs though, specifically for-in.<br>&gt;&gt; <br>&gt;&gt; Tyler<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; On Dec 8, 2015, at 10:05 PM, André Videla via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about having a default implementation in the standard library for it? <br>&gt;&gt;&gt; We avoid syntactic sugar and we allow for this very simple yet useful expression.<br>&gt;&gt;&gt; And we’ve seen solutions in this thread using autoclosurses and extensions<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5.times {<br>&gt;&gt;&gt;    …<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or a function<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; repeat(4) {<br>&gt;&gt;&gt;    …<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; all sound good to me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - André<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; On 09 Dec 2015, at 06:58, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/a5224d32/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December  9, 2015 at 05:00:00pm</p></header><div class="content"><p>Le 9 déc. 2015 à 16:12, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt; Oooh and one more, the Infinite Loop:<br>&gt; <br>&gt; repeat {<br>&gt; <br>&gt; }<br></p><p>I actually tried to get an infinite loop this way once, after I saw that &quot;repeat&quot; was a keyword. It took me 10 minutes before I noticed the while after it was mandatory. Then I settled for &quot;while true&quot;.<br></p><p>In case someone wants to fix the diagnostic message:<br>https://bugs.swift.org/browse/SR-165<br></p><p>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>Why not define a times() or timesRepeat() method on Int taking a closure to execute multiple times, like Erica recently posted and which is common in other languages like Ruby, Smalltalk or (I think) Scala:<br></p><p>5.times { ... }<br></p><p>or <br></p><p>5.timesRepeat { ... }<br></p><p>That reads quite naturally and does not need any language extension.<br></p><p>-Thorsten <br></p><p>&gt; Am 09.12.2015 um 06:58 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 4:43 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; For me this comes up when teaching children or new programmers. (Perhaps not a valid use case)<br>&gt; <br>&gt; This is a very valid use case.<br>&gt; <br>&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt; <br>&gt; I’d say that the pro’s and con’s of this are:<br>&gt; <br>&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/6261c1c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 14, 2015 at 03:00:00am</p></header><div class="content"><p>&gt; Why not define a times() or timesRepeat() method on Int taking a closure to execute multiple times, like Erica recently posted and which is common in other languages like Ruby, Smalltalk or (I think) Scala:<br></p><p>In the teaching context, the answer is because it doesn’t actually teach you anything that can be extended to other parts of the language. `times` is a great fit for Ruby because many other Ruby looping constructs are also methods on an object (particularly the `each` loop), and because it works with all the usual loop flow control like `break`. None of these things are true about Swift, so you’re effectively teaching your students a dead end.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>So, maybe it would be better to make &quot;break&quot; and &quot;continue&quot; behave like &quot;break&quot; and &quot;next&quot; in Ruby and enable non local return?<br>Then we would not need new syntax for new control structures but could create them as needed within the language.<br></p><p>-Thorsten<br></p><p>Am 14.12.2015 um 12:26 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br></p><p>&gt;&gt; Why not define a times() or timesRepeat() method on Int taking a closure to execute multiple times, like Erica recently posted and which is common in other languages like Ruby, Smalltalk or (I think) Scala:<br>&gt; <br>&gt; In the teaching context, the answer is because it doesn’t actually teach you anything that can be extended to other parts of the language. `times` is a great fit for Ruby because many other Ruby looping constructs are also methods on an object (particularly the `each` loop), and because it works with all the usual loop flow control like `break`. None of these things are true about Swift, so you’re effectively teaching your students a dead end.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December 16, 2015 at 05:00:00pm</p></header><div class="content"><p>+1 on ‘for 1…5 {‘. It seems intuitive when you already know for-ins, one look at it and you know what it does.Also, in a education setting, it seems easy to grasp and easy to then extend into more complicated for’s.<br></p><p>-1 for adding a new keyword like ‘repeat’. It seems way easier to keep fewer keywords, both for students and for programmers. I already don’t like the fact that we use both ‘for’ and ‘while’ to express loops (this was particularly vexing when I was learning CS) :/<br></p><p>&gt; On Dec 16, 2015, at 5:06 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So, maybe it would be better to make &quot;break&quot; and &quot;continue&quot; behave like &quot;break&quot; and &quot;next&quot; in Ruby and enable non local return?<br>&gt; Then we would not need new syntax for new control structures but could create them as needed within the language.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; Am 14.12.2015 um 12:26 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt;&gt; Why not define a times() or timesRepeat() method on Int taking a closure to execute multiple times, like Erica recently posted and which is common in other languages like Ruby, Smalltalk or (I think) Scala:<br>&gt;&gt; <br>&gt;&gt; In the teaching context, the answer is because it doesn’t actually teach you anything that can be extended to other parts of the language. `times` is a great fit for Ruby because many other Ruby looping constructs are also methods on an object (particularly the `each` loop), and because it works with all the usual loop flow control like `break`. None of these things are true about Swift, so you’re effectively teaching your students a dead end.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>If the goal is to avoid leaking variables into the outer scope, you might<br>be happy with something like<br></p><p>repeat var x = 0 {<br>    // ...<br>    [update x]<br>} while [condition that has access to x]<br></p><p>// x is out of scope here<br></p><p>Jacob<br></p><p>On Tue, Dec 8, 2015 at 1:54 PM, Jason Pollack via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt;<br>&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to<br>&gt; do something like:<br>&gt;<br>&gt; for _ in 0 ..&lt; count {<br>&gt;    //Do something here<br>&gt; }<br>&gt;<br>&gt; It looks and feels a little awkward. We need to create an unnamed<br>&gt; variable, and it&#39;s easy to forget (especially for language newcomers) that<br>&gt; the loop starts with 0 and doesn&#39;t include count.<br>&gt;<br>&gt; We can also do:<br>&gt;<br>&gt; var i = 0<br>&gt; repeat {<br>&gt;     //Some code<br>&gt;     i += 1<br>&gt; } while i &lt; 10<br>&gt;<br>&gt; This is worse, in that it introduces a variable in the outer scope, and<br>&gt; puts the repeat count at the end. Plus, if the expression inside the repeat<br>&gt; is complex, the value of i may never be incremented, or may be incremented<br>&gt; more than once.<br>&gt;<br>&gt;<br>&gt; I propose the following:<br>&gt;<br>&gt; repeat count {<br>&gt;     //Do something here<br>&gt; }<br>&gt;<br>&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt;<br>&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed,<br>&gt; although I could imagine it being supplied, to create a construct such as:<br>&gt;<br>&gt; var ok = true<br>&gt; repeat numberOfTimes {<br>&gt;     //Do something, possibly set ok to false<br>&gt; } while ok<br>&gt;<br>&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be<br>&gt; ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break<br>&gt; statement).<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; Thanks!<br>&gt; -Jason-<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/8971bda4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>Why don’t you just do<br></p><p>for x in 1...5 {<br>	… some code...<br>}<br></p><p>If you’re teaching to newcomers:<br></p><p>- there’s no need to explain that counting starts at 0 because it doesn’t<br>- if “x” is not used within the loop, then they will get a warning. That would be the perfect time to explain that they can just replace index with “_” when you don’t need to use the value within the loop.<br></p><p>BTW, I hate the “in x ..&lt; count” syntax. If you mean count from 0 to 4, then just write 0…4<br></p><p>-Kenny<br> <br></p><p>Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2 Prerelease).” iBooks. <br></p><p>&gt; On Dec 8, 2015, at 1:54 PM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt; <br>&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt; <br>&gt; for _ in 0 ..&lt; count {<br>&gt;    //Do something here<br>&gt; }<br>&gt; <br>&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt; <br>&gt; We can also do:<br>&gt; <br>&gt; var i = 0<br>&gt; repeat {<br>&gt;     //Some code<br>&gt;     i += 1<br>&gt; } while i &lt; 10<br>&gt; <br>&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt; <br>&gt; <br>&gt; I propose the following:<br>&gt; <br>&gt; repeat count {<br>&gt;     //Do something here<br>&gt; }<br>&gt; <br>&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt; <br>&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt; <br>&gt; var ok = true<br>&gt; repeat numberOfTimes {<br>&gt;     //Do something, possibly set ok to false<br>&gt; } while ok<br>&gt; <br>&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Thanks!<br>&gt; -Jason-<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3f3cb1bca3feed6f54a74c095a8b24b?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Eli Hini</string> &lt;ehini at venovis.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>+1 <br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 8, 2015, at 21:10, Kenny Leung via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why don’t you just do<br>&gt; <br>&gt; for x in 1...5 {<br>&gt;    … some code...<br>&gt; }<br>&gt; <br>&gt; If you’re teaching to newcomers:<br>&gt; <br>&gt; - there’s no need to explain that counting starts at 0 because it doesn’t<br>&gt; - if “x” is not used within the loop, then they will get a warning. That would be the perfect time to explain that they can just replace index with “_” when you don’t need to use the value within the loop.<br>&gt; <br>&gt; BTW, I hate the “in x ..&lt; count” syntax. If you mean count from 0 to 4, then just write 0…4<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt; Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2 Prerelease).” iBooks. <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 1:54 PM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt;&gt; <br>&gt;&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt;&gt; <br>&gt;&gt; for _ in 0 ..&lt; count {<br>&gt;&gt;   //Do something here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt;&gt; <br>&gt;&gt; We can also do:<br>&gt;&gt; <br>&gt;&gt; var i = 0<br>&gt;&gt; repeat {<br>&gt;&gt;    //Some code<br>&gt;&gt;    i += 1<br>&gt;&gt; } while i &lt; 10<br>&gt;&gt; <br>&gt;&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I propose the following:<br>&gt;&gt; <br>&gt;&gt; repeat count {<br>&gt;&gt;    //Do something here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt;&gt; <br>&gt;&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt;&gt; <br>&gt;&gt; var ok = true<br>&gt;&gt; repeat numberOfTimes {<br>&gt;&gt;    //Do something, possibly set ok to false<br>&gt;&gt; } while ok<br>&gt;&gt; <br>&gt;&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; -Jason-<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>December  9, 2015 at 07:00:00am</p></header><div class="content"><p>Thanks Kenny<br></p><p>It’s so difficult for us to remember when these constructs weren’t familiar to us - to remember how much complexity there is in this code:<br></p><p>&gt; <br>&gt; for x in 1...5 {<br>&gt; 	… some code…<br>&gt; }<br></p><p>for x in 1…5 - what does 1 … 5 mean? What does it mean for x to be in 1 … 5? Now you tell me x isn’t in 1 … 5 and I can replace x with _  what does it mean for _ to be in 1 … 5 and why do I need _ at all? _ isn’t in the loop either. What’s a loop?<br></p><p>That’s not to say I haven’t taught this - I’m saying it’s a lot harder for someone new to programming to grasp than many people think. <br></p><p>I understand that it’s not a goal of the language to introduce syntax we only use in passing until they are ready to understand the for syntax so I won’t continue to argue the point. I was just voicing my support for the proposal and adding a use case where it might apply.<br></p><p>Best,<br></p><p>Daniel<br></p><p>&gt; <br>&gt; If you’re teaching to newcomers:<br>&gt; <br>&gt; - there’s no need to explain that counting starts at 0 because it doesn’t<br>&gt; - if “x” is not used within the loop, then they will get a warning. That would be the perfect time to explain that they can just replace index with “_” when you don’t need to use the value within the loop.<br>&gt; <br>&gt; BTW, I hate the “in x ..&lt; count” syntax. If you mean count from 0 to 4, then just write 0…4<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt; Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2 Prerelease).” iBooks. <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 1:54 PM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt;&gt; <br>&gt;&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt;&gt; <br>&gt;&gt; for _ in 0 ..&lt; count {<br>&gt;&gt;   //Do something here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt;&gt; <br>&gt;&gt; We can also do:<br>&gt;&gt; <br>&gt;&gt; var i = 0<br>&gt;&gt; repeat {<br>&gt;&gt;    //Some code<br>&gt;&gt;    i += 1<br>&gt;&gt; } while i &lt; 10<br>&gt;&gt; <br>&gt;&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I propose the following:<br>&gt;&gt; <br>&gt;&gt; repeat count {<br>&gt;&gt;    //Do something here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt;&gt; <br>&gt;&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt;&gt; <br>&gt;&gt; var ok = true<br>&gt;&gt; repeat numberOfTimes {<br>&gt;&gt;    //Do something, possibly set ok to false<br>&gt;&gt; } while ok<br>&gt;&gt; <br>&gt;&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; -Jason-<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7877c384b6a5494c1b0283eb805831c?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Liam Butler-Lawrence</string> &lt;liamdunn at me.com&gt;<p>December  9, 2015 at 10:00:00am</p></header><div class="content"><p>+1 for repeat X { } (as a keyword/statement, not a function).<br></p><p>It&#39;s definitely syntax sugar, but I agree it would give beginners an easy &quot;in&quot; to for loops. It would also make some of the code we write a bit smaller and more readable, which is always a good thing. I haven&#39;t seen any serious detriments put forward either.<br></p><p>Liam<br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 9, 2015, at 8:30 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks Kenny<br>&gt; <br>&gt; It’s so difficult for us to remember when these constructs weren’t familiar to us - to remember how much complexity there is in this code:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; for x in 1...5 {<br>&gt;&gt;    … some code…<br>&gt;&gt; }<br>&gt; <br>&gt; for x in 1…5 - what does 1 … 5 mean? What does it mean for x to be in 1 … 5? Now you tell me x isn’t in 1 … 5 and I can replace x with _  what does it mean for _ to be in 1 … 5 and why do I need _ at all? _ isn’t in the loop either. What’s a loop?<br>&gt; <br>&gt; That’s not to say I haven’t taught this - I’m saying it’s a lot harder for someone new to programming to grasp than many people think. <br>&gt; <br>&gt; I understand that it’s not a goal of the language to introduce syntax we only use in passing until they are ready to understand the for syntax so I won’t continue to argue the point. I was just voicing my support for the proposal and adding a use case where it might apply.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; Daniel<br>&gt; <br>&gt;&gt; <br>&gt;&gt; If you’re teaching to newcomers:<br>&gt;&gt; <br>&gt;&gt; - there’s no need to explain that counting starts at 0 because it doesn’t<br>&gt;&gt; - if “x” is not used within the loop, then they will get a warning. That would be the perfect time to explain that they can just replace index with “_” when you don’t need to use the value within the loop.<br>&gt;&gt; <br>&gt;&gt; BTW, I hate the “in x ..&lt; count” syntax. If you mean count from 0 to 4, then just write 0…4<br>&gt;&gt; <br>&gt;&gt; -Kenny<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2 Prerelease).” iBooks. <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 8, 2015, at 1:54 PM, Jason Pollack via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to propose a small enhancement to the repeat loop.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently if we want to perform &#39;count&#39; iterations in a loop, we need to do something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for _ in 0 ..&lt; count {<br>&gt;&gt;&gt;  //Do something here<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It looks and feels a little awkward. We need to create an unnamed variable, and it&#39;s easy to forget (especially for language newcomers) that the loop starts with 0 and doesn&#39;t include count.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We can also do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var i = 0<br>&gt;&gt;&gt; repeat {<br>&gt;&gt;&gt;   //Some code<br>&gt;&gt;&gt;   i += 1<br>&gt;&gt;&gt; } while i &lt; 10<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is worse, in that it introduces a variable in the outer scope, and puts the repeat count at the end. Plus, if the expression inside the repeat is complex, the value of i may never be incremented, or may be incremented more than once.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; repeat count {<br>&gt;&gt;&gt;   //Do something here<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s cleaner, and IMO clearer what this code is intended to do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Naturally &#39;count&#39; should be non-negative. A while clause is not needed, although I could imagine it being supplied, to create a construct such as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var ok = true<br>&gt;&gt;&gt; repeat numberOfTimes {<br>&gt;&gt;&gt;   //Do something, possibly set ok to false<br>&gt;&gt;&gt; } while ok<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would repeat the loop a maximum of  &#39;numberOfTimes&#39;, but could be ended early if some signal &#39;ok&#39; is set to false (or, of course, by a break statement).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; -Jason-<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/7e591381/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt;&gt; for x in 1...5 {<br>&gt;&gt; 	… some code…<br>&gt;&gt; }<br>&gt; <br>&gt; for x in 1…5 - what does 1 … 5 mean? What does it mean for x to be in 1 … 5? Now you tell me x isn’t in 1 … 5 and I can replace x with _ what does it mean for _ to be in 1 … 5 and why do I need _ at all? _ isn’t in the loop either. What’s a loop?<br></p><p>You know, I look at this and wonder, why can’t you just say `for 1…5`?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  9, 2015 at 03:00:00pm</p></header><div class="content"><p>This seems like the most sensible thing to me - if you don’t need the variable, just leave it out! Nice and clean and no confusion.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 9, 2015, at 3:18 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; for x in 1...5 {<br>&gt;&gt;&gt; 	… some code…<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for x in 1…5 - what does 1 … 5 mean? What does it mean for x to be in 1 … 5? Now you tell me x isn’t in 1 … 5 and I can replace x with _ what does it mean for _ to be in 1 … 5 and why do I need _ at all? _ isn’t in the loop either. What’s a loop?<br>&gt; <br>&gt; You know, I look at this and wonder, why can’t you just say `for 1…5`?<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>Likely because <br></p><p>for 1…5 {<br></p><p>}<br></p><p>is the same as <br></p><p>for 2…6 or for 0…4 <br></p><p>which is confusing.<br></p><p>Tyler<br></p><p>&gt; On Dec 9, 2015, at 1:20 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This seems like the most sensible thing to me - if you don’t need the variable, just leave it out! Nice and clean and no confusion.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 3:18 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; for x in 1...5 {<br>&gt;&gt;&gt;&gt; 	… some code…<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for x in 1…5 - what does 1 … 5 mean? What does it mean for x to be in 1 … 5? Now you tell me x isn’t in 1 … 5 and I can replace x with _ what does it mean for _ to be in 1 … 5 and why do I need _ at all? _ isn’t in the loop either. What’s a loop?<br>&gt;&gt; <br>&gt;&gt; You know, I look at this and wonder, why can’t you just say `for 1…5`?<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  9, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; Likely because <br>&gt; <br>&gt; for 1…5 {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; is the same as <br>&gt; <br>&gt; for 2…6 or for 0…4 <br>&gt; <br>&gt; which is confusing.<br></p><p>Sure, but the same is true of `for _ in 1…5`. The way I see it, this allows you to start by introducing “here’s how you do something five times”:<br></p><p>	for 1…5 {<br>		print(“Hello!”)<br>	}<br></p><p>And then extend the very same syntax to “here’s how you find out which time you’re on”:<br></p><p>	for i in 1…5 {<br>		print(“Hello \(i)!”)<br>	}<br></p><p>And from there, you can talk about how `1…5` can have different starting and ending points, can be a list of values instead of a series of numbers, etc. Seems like a nice way to make sure that learners *start* by using the same construct they’ll *finish* with.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>repeat loop enhancement</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  9, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 3:21 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt; Likely because <br>&gt; <br>&gt; for 1…5 {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; is the same as <br>&gt; <br>&gt; for 2…6 or for 0…4 <br>&gt; <br>&gt; which is confusing.<br></p><p>Those ranges are the same length and basic math would tell you that. I don’t think it’d be that big a deal. In a learning context, you wouldn’t teach it that way anyway and the students who tried it would probably end up feeling clever.<br></p><p>Anyway, if Swift-for is to be modified, I’d say my desire would be for the following forms:<br></p><p>for (range) {}<br>for (thing) in (range) {}<br>for (thing) in (range) where (stuff) {}<br>for (any of the above) {} else {}<br></p><p>Multidimensional support also seems awesome, but I could live without it. (Well okay, I could live without any of this.. but you know what I mean. :P)<br></p><p>l8r<br>Sean<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
