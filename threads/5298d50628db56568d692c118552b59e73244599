<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 13, 2016 at 11:00:00pm</p></header><div class="content"><p>Please do NOT drop the current distinction between *private* and *fileprivate*<br>as it is now in Swift 3<br>It is needed for correct OOP.  <br></p><p>As written before, but now a bit more compact, I hope:<br></p><p>I would like to have the inner members of a class as default private, <br>(not fileprivate)  that is, that each entity inside the class body is not visible <br>in the outer scope. not even in the same file!<br></p><p>I would only reveal entities of a class to the outer scope that are needed.there.<br>(as is the case with class properties in Objective-C and most other OOP supporting languages)<br></p><p>This is what I have to do now,<br>Each and every entity that I wish to keep hidden<br>I have to prefix with *private*: like in this example class: <br>This is tedious and should be unnecessary.<br></p><p>class TG3DGauge: SCNNode<br>{<br>    <br>    private var needles = [SCNNode]()<br>    private var fmtStr = “&quot; // private should be the default!<br>    <br>    var value: CGFloat = 0  // access default “internal”! Visible to the outside world.<br>    {<br>        didSet  // trigger value change, rotate needles etc.<br>        {<br>            valueChange()<br>        }<br>    }<br>    <br>    private var nodeUnitText = SCNNode()<br>    private var nodeValueText = SCNNode()<br>    <br>    private var valRange: ClosedRange&lt;CGFloat&gt; = (0...100.0)<br>    private var valScaleFactor: CGFloat = 1<br></p><p>	// etc. much more stuff here and<br>        // most of it should be private, that is<br>        // only visible within the class body!<br>	.<br>        .<br>} // end class TG3DGauge<br></p><p>If I don’t specify an access modifier, then the default<br>for the items defined in classes is *internal*,<br>which means that these items are visible in the whole application source.<br></p><p>However, this is only desirable for items that I want to<br>reveal explicitly, of course. <br>That is exactly why I need the *private* access modifier as it is now <br>and not *fileprivate*  <br>So I am very glad that this access modifier *private* finally became <br>available in Swift 3<br></p><p>In my classes, *private* is probably the most used keyword, but<br>*private* should be the default for entities within a class body<br>just like it is for entities within functions.<br></p><p>As far as I know, prefixing with *private* is the only solution in Swift to protect<br>functions, vars etc. in my class against unwanted access <br>from the outer scope. I think this is not the way it should be. <br></p><p>Making all entities in a class private prevents this.<br>and offers also reasonable protection against<br>the Fragile Base Class problem, (thanks Chris for url) :<br> https://en.wikipedia.org/wiki/Fragile_base_class &lt;https://en.wikipedia.org/wiki/Fragile_base_class&gt;<br></p><p>A solution for as it is now, albeit not a perfect one would be, <br>to have some sort of access modifier which defines <br>all items within the class to be private by default.<br>perhaps the keyword *closedscope* like in this example:<br></p><p>closedscope class TG3DGauge: SCNNode<br>{<br>    <br>    var needles = [SCNNode]()  // is now private by default<br>    var fmtStr = “&quot;            // is now private by default<br></p><p>    public var value: CGFloat = 0 // Public!! visible outside class <br>                               // “fileprivate&quot; or “internal”  can also be used.<br>    {<br>        didSet  // trigger value change, rotate needles etc.<br>        {<br>            valueChange()<br>        }<br>    }<br>    <br>    var nodeUnitText = SCNNode()  // is now private by default<br>    var nodeValueText = SCNNode() // is now private by default<br></p><p>    //etc.<br></p><p><br>Again, for this reasons, don’t drop the distinction between<br>between *fileprivate* and *private* <br>if this is done, there is afaics no way to protect items within a class body.<br>Leave it as it is now, please. (also to prevent source breaking as well)<br></p><p>(btw, the above TG3DGauge class is a perfect example: <br>With real gauges it would not be a good idea if one can touch<br>the needles and gears inside the gauge’s casing,<br>which is exactly the case with OOP. e.g.<br>In my class example people would e.g. be able to set the angle<br>from needles (if not declared private)  directly, without updating the value.) <br></p><p><br>TedvG<br>www.tedvg.com &lt;http://www.tedvg.com/&gt;  (see my gauges from above class here)<br></p><p><br></p><p>&gt;&gt; Le 13 oct. 2016 à 07:52, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; On Oct 12, 2016, at 9:56 PM, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I actually consider it very lucky that most of our changes so far have been fairly non-controversial. Everybody has a different idea of what would make Swift a better language, and all of us well-meaning. But when those ideas conflict, some group is going to end up unhappy. I&#39;m actually very glad that (a) we haven&#39;t had too many of these cases, and (b) even when we have, people have been able to accept it and move on to contributing to the next issue.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Strong agreement here as well. This proposal has been litigated numerous times already, and the bar for source-breaking changes is much higher now. To effectively re-open the discussion would require a proposal that significant changes the model with a lot of evidence that such a new model is a drastic improvement over what we have now. “Back out SE-0025” is not a viable option now.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not really. This proposal could be backed out without source-breaking changes by treating private as a synonym for fileprivate and we’d have Swift 2 behavior without breaking source. If the core team doesn’t want to consider that then we can just move on and live with it. <br>&gt;&gt; <br>&gt;&gt; Not speaking for the core team, just MHO:<br>&gt;&gt; <br>&gt;&gt; I agree with Russ here, and with others who have said upthread that the “thing that has changed” is that we are starting to get usage experience with fileprivate vs private.  I think we all understand the value of having fewer access control levels, and so if “private” isn’t conceptually pulling its weight, then it is reasonable to consider phasing it out.<br>&gt;&gt; <br>&gt;&gt; That said, there is no specific rush to have this discussion, and I think it is reasonable to put a pretty high burden of proof on someone who wants to drive such a proposal.  For example, if we had the discussion in the spring timeframe, we should have a pretty large body of Swift 3 code readily at hand (e.g. SwiftPM packages and other various github repos).<br>&gt;&gt; <br>&gt;&gt; Given that, it should be easy enough to see how widely private is actually being used in practice.  If it is very rare, then the argument to ditch it (make it a synonym for fileprivate, and eventually phasing out fileprivate) is strong.  If lots of people are using private and only some are using fileprivate, then the discussion is quite different.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; I don’t think monitoring the usage of private vs fileprivate is fair. By default, people will use private until they encounter visibility issues and discover they need to change to fileprivate. So private will probably being use far more than fileprivate.<br>&gt; Nonetheless it does not mean people chosen private because it effectively reduce the visibility to the class scope, but just because it is easier to discover and to type than fileprivate and fit in many cases.<br>&gt; <br>&gt; I tend to write class will all ivars private by default (as it is a sensible default), and then, when I start to write extensions and other parts, I have to switch to fileprivate for a bunch of ivars. It create an inconsistent mess in my ivars declaration as it is difficult to know if an ivar is private because I has to be, or because I didn’t encounter a case that need it to be fileprivate instead.<br>&gt; <br>&gt; Honestly, I don’t see any value in the introduction of fileprivate.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161013/52984599/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/45196398e9685000d195ec626d477f0e?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Trans</string> &lt;transfire at gmail.com&gt;<p>October 13, 2016 at 06:00:00pm</p></header><div class="content"><p>On Thu, Oct 13, 2016 at 5:27 PM, Ted F.A. van Gaalen via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Please do NOT drop the current distinction between *private* and<br>&gt; *fileprivate*<br>&gt; as it is now in Swift 3<br>&gt; It is needed for correct OOP.<br></p><p>Sorry, but that is laughable. So far I haven&#39;t seen a sole on here<br>that seems to really know anything about OOP. You all are just copying<br>and extrapolating on ObjC/C++/Java. Which got it all sorts of wrong<br>from the get go.<br></p><p>Go learn you some SmallTalk for the greater good.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/45196398e9685000d195ec626d477f0e?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Trans</string> &lt;transfire at gmail.com&gt;<p>October 13, 2016 at 08:00:00pm</p></header><div class="content"><p>Sorry, that was a little harsh. I just think there are a lot of<br>opinions here based on personal biases and not necessary the best<br>prior experiences. If you want good OOP it is best to let people with<br>*real* OOP experience, like SmallTalk, work it out.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 14, 2016 at 12:00:00pm</p></header><div class="content"><p>Most disturbing, <br>What are you trying to achieve?<br></p><p>Well, I can be a little harsh at times too, perhaps at times<br>when I do not fully understand or misinterpret situations or people.<br>in that case I will admit my shortcoming and apologise if necessary.<br></p><p>However, you are being very negative, rude and insulting,<br>Btw, I also work with Smalltalk and assure that you are <br>completely out of touch with the Smalltalk community<br>which is very friendly and social and so is the Swift community.<br></p><p>I see no need to further converse with you.<br></p><p>TedvG<br></p><p><br></p><p><br></p><p><br>&gt; On 14 Oct 2016, at 02:14, Trans &lt;transfire at gmail.com&gt; wrote:<br>&gt; <br>&gt; Sorry, that was a little harsh. I just think there are a lot of<br>&gt; opinions here based on personal biases and not necessary the best<br>&gt; prior experiences. If you want good OOP it is best to let people with<br>&gt; *real* OOP experience, like SmallTalk, work it out.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>October 14, 2016 at 10:00:00am</p></header><div class="content"><p>Well, this is some good attitude ;).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 14 Oct 2016, at 00:50, Trans via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Oct 13, 2016 at 5:27 PM, Ted F.A. van Gaalen via<br>&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Please do NOT drop the current distinction between *private* and<br>&gt;&gt; *fileprivate*<br>&gt;&gt; as it is now in Swift 3<br>&gt;&gt; It is needed for correct OOP.<br>&gt; <br>&gt; Sorry, but that is laughable. So far I haven&#39;t seen a sole on here<br>&gt; that seems to really know anything about OOP. You all are just copying<br>&gt; and extrapolating on ObjC/C++/Java. Which got it all sorts of wrong<br>&gt; from the get go.<br>&gt; <br>&gt; Go learn you some SmallTalk for the greater good.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad368bb0d5d1ab9934cbe9217545f08f?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Jamie Lemon</string> &lt;jl at contagious.co.uk&gt;<p>October 14, 2016 at 08:00:00am</p></header><div class="content"><p>I agree with Ted that I would have expected the inner members of a class to be private by default. (Not a big deal if I have to explicitly prefix most of my concerned vars now - but it is just different to what I would have expected). Certainly, in the past, I would be more used to having to explicitly define chosen vars as “public” ( e.g. in the past world of Objective C I  was used to defining selected vars with @synthesize to “open them up&quot; )<br></p><p>On 13 Oct 2016, at 22:27, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>Please do NOT drop the current distinction between *private* and *fileprivate*<br>as it is now in Swift 3<br>It is needed for correct OOP.<br></p><p>As written before, but now a bit more compact, I hope:<br></p><p>I would like to have the inner members of a class as default private,<br>(not fileprivate)  that is, that each entity inside the class body is not visible<br>in the outer scope. not even in the same file!<br></p><p>I would only reveal entities of a class to the outer scope that are needed.there.<br>(as is the case with class properties in Objective-C and most other OOP supporting languages)<br></p><p>This is what I have to do now,<br>Each and every entity that I wish to keep hidden<br>I have to prefix with *private*: like in this example class:<br>This is tedious and should be unnecessary.<br></p><p>class TG3DGauge: SCNNode<br>{<br></p><p>    private var needles = [SCNNode]()<br>    private var fmtStr = “&quot; // private should be the default!<br></p><p>    var value: CGFloat = 0  // access default “internal”! Visible to the outside world.<br>    {<br>        didSet  // trigger value change, rotate needles etc.<br>        {<br>            valueChange()<br>        }<br>    }<br></p><p>    private var nodeUnitText = SCNNode()<br>    private var nodeValueText = SCNNode()<br></p><p>    private var valRange: ClosedRange&lt;CGFloat&gt; = (0...100.0)<br>    private var valScaleFactor: CGFloat = 1<br></p><p>// etc. much more stuff here and<br>        // most of it should be private, that is<br>        // only visible within the class body!<br>.<br>        .<br>} // end class TG3DGauge<br></p><p>If I don’t specify an access modifier, then the default<br>for the items defined in classes is *internal*,<br>which means that these items are visible in the whole application source.<br></p><p>However, this is only desirable for items that I want to<br>reveal explicitly, of course.<br>That is exactly why I need the *private* access modifier as it is now<br>and not *fileprivate*<br>So I am very glad that this access modifier *private* finally became<br>available in Swift 3<br></p><p>In my classes, *private* is probably the most used keyword, but<br>*private* should be the default for entities within a class body<br>just like it is for entities within functions.<br></p><p>As far as I know, prefixing with *private* is the only solution in Swift to protect<br>functions, vars etc. in my class against unwanted access<br>from the outer scope. I think this is not the way it should be.<br></p><p>Making all entities in a class private prevents this.<br>and offers also reasonable protection against<br>the Fragile Base Class problem, (thanks Chris for url) :<br> https://en.wikipedia.org/wiki/Fragile_base_class<br></p><p>A solution for as it is now, albeit not a perfect one would be,<br>to have some sort of access modifier which defines<br>all items within the class to be private by default.<br>perhaps the keyword *closedscope* like in this example:<br></p><p>closedscope class TG3DGauge: SCNNode<br>{<br></p><p>    var needles = [SCNNode]()  // is now private by default<br>    var fmtStr = “&quot;            // is now private by default<br></p><p>    public var value: CGFloat = 0 // Public!! visible outside class<br>                               // “fileprivate&quot; or “internal”  can also be used.<br>    {<br>        didSet  // trigger value change, rotate needles etc.<br>        {<br>            valueChange()<br>        }<br>    }<br></p><p>    var nodeUnitText = SCNNode()  // is now private by default<br>    var nodeValueText = SCNNode() // is now private by default<br></p><p>    //etc.<br></p><p><br>Again, for this reasons, don’t drop the distinction between<br>between *fileprivate* and *private*<br>if this is done, there is afaics no way to protect items within a class body.<br>Leave it as it is now, please. (also to prevent source breaking as well)<br></p><p>(btw, the above TG3DGauge class is a perfect example:<br>With real gauges it would not be a good idea if one can touch<br>the needles and gears inside the gauge’s casing,<br>which is exactly the case with OOP. e.g.<br>In my class example people would e.g. be able to set the angle<br>from needles (if not declared private)  directly, without updating the value.)<br></p><p><br>TedvG<br>www.tedvg.com&lt;http://www.tedvg.com/&gt;  (see my gauges from above class here)<br></p><p><br></p><p>Le 13 oct. 2016 à 07:52, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br></p><p>On Oct 12, 2016, at 9:56 PM, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>I actually consider it very lucky that most of our changes so far have been fairly non-controversial. Everybody has a different idea of what would make Swift a better language, and all of us well-meaning. But when those ideas conflict, some group is going to end up unhappy. I&#39;m actually very glad that (a) we haven&#39;t had too many of these cases, and (b) even when we have, people have been able to accept it and move on to contributing to the next issue.<br></p><p><br>Strong agreement here as well. This proposal has been litigated numerous times already, and the bar for source-breaking changes is much higher now. To effectively re-open the discussion would require a proposal that significant changes the model with a lot of evidence that such a new model is a drastic improvement over what we have now. “Back out SE-0025” is not a viable option now.<br></p><p>- Doug<br></p><p>Not really. This proposal could be backed out without source-breaking changes by treating private as a synonym for fileprivate and we’d have Swift 2 behavior without breaking source. If the core team doesn’t want to consider that then we can just move on and live with it.<br></p><p>Not speaking for the core team, just MHO:<br></p><p>I agree with Russ here, and with others who have said upthread that the “thing that has changed” is that we are starting to get usage experience with fileprivate vs private.  I think we all understand the value of having fewer access control levels, and so if “private” isn’t conceptually pulling its weight, then it is reasonable to consider phasing it out.<br></p><p>That said, there is no specific rush to have this discussion, and I think it is reasonable to put a pretty high burden of proof on someone who wants to drive such a proposal.  For example, if we had the discussion in the spring timeframe, we should have a pretty large body of Swift 3 code readily at hand (e.g. SwiftPM packages and other various github repos).<br></p><p>Given that, it should be easy enough to see how widely private is actually being used in practice.  If it is very rare, then the argument to ditch it (make it a synonym for fileprivate, and eventually phasing out fileprivate) is strong.  If lots of people are using private and only some are using fileprivate, then the discussion is quite different.<br></p><p>-Chris<br></p><p>I don’t think monitoring the usage of private vs fileprivate is fair. By default, people will use private until they encounter visibility issues and discover they need to change to fileprivate. So private will probably being use far more than fileprivate.<br>Nonetheless it does not mean people chosen private because it effectively reduce the visibility to the class scope, but just because it is easier to discover and to type than fileprivate and fit in many cases.<br></p><p>I tend to write class will all ivars private by default (as it is a sensible default), and then, when I start to write extensions and other parts, I have to switch to fileprivate for a bunch of ivars. It create an inconsistent mess in my ivars declaration as it is difficult to know if an ivar is private because I has to be, or because I didn’t encounter a case that need it to be fileprivate instead.<br></p><p>Honestly, I don’t see any value in the introduction of fileprivate.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/43b67027/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>October 14, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 14 Oct 2016, at 09:35, Jamie Lemon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree with Ted that I would have expected the inner members of a class to be private by default. (Not a big deal if I have to explicitly prefix most of my concerned vars now - but it is just different to what I would have expected). Certainly, in the past, I would be more used to having to explicitly define chosen vars as “public” ( e.g. in the past world of Objective C I  was used to defining selected vars with @synthesize to “open them up&quot; ) <br></p><p>@synthesize has nothing to do with instance variable visibility, all it did was synthesise an instance variable to back a property (which  was really a pair of methods). In Objective-C instance variables are protected (i.e. visible to subclasses) by default and all methods (which by extension means properties too) are public. <br></p><p>The waters are somewhat muddied by the fact that the Objective-C compiler can only see declarations in the current code unit and any imports, so you can hide non private instance variables by putting them in the @implementation and you can hide properties and methods by declaring them in a category that isn’t in an import. However, anybody can defeat the second of these by declaring their own category with the hidden method signatures in it.<br></p><p>private by default is comparatively rare, it’s not true of Java, C#, Javascript, or Python. Having said, that it does make sense to me but would be an enormous breaking change for Swift now.<br></p><p>I was against the private/fileprivate distinction when it was proposed, but now it’s done and I’ve applied it to my own code, I am fine with it. I did a global replace of fileprivate with private in one of my largest converted source files and experienced only one breakage. I think there is a use case for fileprivate, so I wouldn’t want to get rid of it but I think it’s rare enough that the ugliness of its name doesn’t bother me. <br></p><p>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5f87c6d6b2f41c3ac647171eb30e34?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Jean-Daniel</string> &lt;dev at xenonium.com&gt;<p>October 15, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; Le 13 oct. 2016 à 23:27, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; a écrit :<br>&gt; <br>&gt; Please do NOT drop the current distinction between *private* and *fileprivate*<br>&gt; as it is now in Swift 3<br>&gt; It is needed for correct OOP.  <br>&gt; <br></p><p>That argument don’t apply for a language where you can structure your code in extensions as in Swift.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>October 15, 2016 at 09:00:00pm</p></header><div class="content"><p>We will see how this will fare one way or the other in say 10-15 years.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 15 Oct 2016, at 14:43, Jean-Daniel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 13 oct. 2016 à 23:27, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Please do NOT drop the current distinction between *private* and *fileprivate*<br>&gt;&gt; as it is now in Swift 3<br>&gt;&gt; It is needed for correct OOP.  <br>&gt;&gt; <br>&gt; <br>&gt; That argument don’t apply for a language where you can structure your code in extensions as in Swift.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>private &amp; fileprivate</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>October 15, 2016 at 11:00:00pm</p></header><div class="content"><p>in 10-15 years compilers/interpreters are merged and update themselves as AI.<br>so we can tell in human language what an app should do :o)<br></p><p>@Jean: can you explain that about extensions in this context (oop) ?<br></p><p>TedvG<br></p><p><br>ted van gaalen<br></p><p>&gt; On 15 Oct 2016, at 21:44, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt; <br>&gt; We will see how this will fare one way or the other in say 10-15 years.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 15 Oct 2016, at 14:43, Jean-Daniel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Le 13 oct. 2016 à 23:27, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please do NOT drop the current distinction between *private* and *fileprivate*<br>&gt;&gt;&gt; as it is now in Swift 3<br>&gt;&gt;&gt; It is needed for correct OOP.  <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That argument don’t apply for a language where you can structure your code in extensions as in Swift.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161015/38c8781f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
