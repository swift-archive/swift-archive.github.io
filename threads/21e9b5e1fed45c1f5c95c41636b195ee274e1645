<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 20, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed Jan 20 2016, Jordan Rose via swift-users &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 16, 2016, at 15:07, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sat, Jan 16, 2016 at 2:46 PM, Adriano Ferreira via swift-users<br>&gt;&gt; &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; Isn’t the subscript supposed to return an optional as well?<br>&gt;&gt; <br>&gt;&gt; Not arrays. They stop your program when out of bounds.<br>&gt;&gt;  <br>&gt;<br>&gt; For the record, this isn&#39;t a difference between arrays and other<br>&gt; collections. All Collections return a non-optional value when<br>&gt; subscripted by an Index, with the assumption that you shouldn&#39;t be<br>&gt; putting random indexes into a collection unless they came from that<br>&gt; collection in the first place, or have been already validated in some<br>&gt; way. With &#39;first&#39;, on the other hand, it&#39;s very convenient to be able<br>&gt; to say &quot;collection.first ?? defaultValue&quot;.<br>&gt;<br>&gt; &quot;But what about dictionaries?&quot; Ah, but a dictionary key is not an<br>&gt; Index (note the capital). The relation between a Collection and an<br>&gt; Index is that there must be a constant-time operation to get to a<br>&gt; value from an Index. <br></p><p>Well, but that also applies to dictionary keys.  The difference is that<br>a sequence of consecutive indices can be used to access all the elements<br>of the collection.<br></p><p>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>January 20, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 20, 2016, at 12:28 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; &quot;But what about dictionaries?&quot; Ah, but a dictionary key is not an<br>&gt;&gt; Index (note the capital). The relation between a Collection and an<br>&gt;&gt; Index is that there must be a constant-time operation to get to a<br>&gt;&gt; value from an Index. <br>&gt; <br>&gt; Well, but that also applies to dictionary keys. <br></p><p>Not necessarily. It does if the dictionary is based on a [well-implemented] hash table. But if it’s implemented as a search tree (as C++’s std::map is), it’s not — lookup time is O(log n).<br></p><p>Quibbling aside, there are significant differences between looking up array items and lookup up dictionary keys. It’s extremely common to look up a key that might validly not exist in the dictionary, but it’s pretty rare to do the same with an array — usually if the array index is out of bounds it’s a programmer error.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160120/a6527a6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 21, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed Jan 20 2016, Jens Alfke &lt;jens-AT-mooseyard.com&gt; wrote:<br></p><p>&gt;&gt; On Jan 20, 2016, at 12:28 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; &quot;But what about dictionaries?&quot; Ah, but a dictionary key is not an<br>&gt;&gt;&gt; Index (note the capital). The relation between a Collection and an<br>&gt;&gt;&gt; Index is that there must be a constant-time operation to get to a<br>&gt;&gt;&gt; value from an Index. <br>&gt;&gt; <br>&gt;&gt; Well, but that also applies to dictionary keys. <br>&gt;<br>&gt; Not necessarily. It does if the dictionary is based on a<br>&gt; [well-implemented] hash table. But if it’s implemented as a search<br>&gt; tree (as C++’s std::map is), it’s not — lookup time is O(log n).<br></p><p>Swift Dictionaries are documented as having O(1) lookup.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>On Thu, Jan 21, 2016 at 12:23 PM, Dave Abrahams via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Swift Dictionaries are documented as having O(1) lookup.<br>&gt;<br></p><p>Only the lookup by index is O(1). Lookup by key is not specified. You can&#39;t<br>O(1) by key without a perfect hash function.<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/bff76c9d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 1:02 PM, David Turnbull &lt;dturnbull at gmail.com&gt; wrote:<br>&gt; <br>&gt; Only the lookup by index is O(1). Lookup by key is not specified. You can&#39;t O(1) by key without a perfect hash function.<br></p><p>Hash tables are generally considered O(1) even without perfect hashing. If the table grows sufficiently as items are added, so that there are few collisions, it will almost always take 1 probe to find a value. If it sometimes takes 2 or 3 or more, that just raises the average a little, and an average of (say) 1.053 probes is still O(1) because it doesn’t increase as the data set grows.<br></p><p>My point earlier was that the built-in Dictionary class is not the only possible class with associative-array semantics, and other implementations of associative arrays can have very different performance characteristics.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/5990450c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>on Thu Jan 21 2016, David Turnbull &lt;dturnbull-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Thu, Jan 21, 2016 at 12:23 PM, Dave Abrahams via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Swift Dictionaries are documented as having O(1) lookup.<br>&gt;&gt;<br>&gt;<br>&gt; Only the lookup by index is O(1). Lookup by key is not specified. <br></p><p>Then that&#39;s a bug in our documentation; please file a ticket!  It should<br>guarantee O(1) as long as the Dictionary isn&#39;t backed by NSDictionary<br>and the hash function is good.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 21, 2016 at 01:00:00pm</p></header><div class="content"><p>The documentation is correct. Thinking about key lookups as O(1) is what<br>led to this problem...<br>http://www.ocert.org/advisories/ocert-2011-003.html<br></p><p>-david<br></p><p>On Thu, Jan 21, 2016 at 1:36 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Jan 21 2016, David Turnbull &lt;dturnbull-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Thu, Jan 21, 2016 at 12:23 PM, Dave Abrahams via swift-users &lt;<br>&gt; &gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Swift Dictionaries are documented as having O(1) lookup.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Only the lookup by index is O(1). Lookup by key is not specified.<br>&gt;<br>&gt; Then that&#39;s a bug in our documentation; please file a ticket!  It should<br>&gt; guarantee O(1) as long as the Dictionary isn&#39;t backed by NSDictionary<br>&gt; and the hash function is good.<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/9da410b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 21, 2016 at 02:00:00pm</p></header><div class="content"><p>on Thu Jan 21 2016, David Turnbull &lt;dturnbull-AT-gmail.com&gt; wrote:<br></p><p>&gt; The documentation is correct. Thinking about key lookups as O(1) is what<br>&gt; led to this problem...<br>&gt; http://www.ocert.org/advisories/ocert-2011-003.html<br></p><p>Sorry, no, the documentation isn&#39;t correct, in that it doesn&#39;t reflect<br>our intention.  It should say that Dictionary lookups are amortized O(1)<br>when the dictionary isn&#39;t backed by an NSDictionary, subject to the<br>quality of the hash function (which as we all know, is a big caveat).<br></p><p>&gt;<br>&gt; -david<br>&gt;<br>&gt; On Thu, Jan 21, 2016 at 1:36 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Thu Jan 21 2016, David Turnbull &lt;dturnbull-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; On Thu, Jan 21, 2016 at 12:23 PM, Dave Abrahams via swift-users &lt;<br>&gt;&gt; &gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Swift Dictionaries are documented as having O(1) lookup.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Only the lookup by index is O(1). Lookup by key is not specified.<br>&gt;&gt;<br>&gt;&gt; Then that&#39;s a bug in our documentation; please file a ticket!  It should<br>&gt;&gt; guarantee O(1) as long as the Dictionary isn&#39;t backed by NSDictionary<br>&gt;&gt; and the hash function is good.<br>&gt;&gt;<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>January 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 2:51 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; It should say that Dictionary lookups are amortized O(1)<br>&gt; when the dictionary isn&#39;t backed by an NSDictionary<br></p><p>Isn’t NSDictionary O(1) too? It’s definitely a hash table.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/d3e5cfac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>array.first vs. array[0]</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 21, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 16:36 , Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 21, 2016, at 2:51 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It should say that Dictionary lookups are amortized O(1)<br>&gt;&gt; when the dictionary isn&#39;t backed by an NSDictionary<br>&gt; <br>&gt; Isn’t NSDictionary O(1) too? It’s definitely a hash table.<br></p><p>The default implementation of NSDictionary is a hash table, but because you&#39;re allowed to subclass it (if discouraged &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDictionary_Class/index.html#//apple_ref/doc/uid/20000140-DontLinkElementID_1&gt;) we can&#39;t 100% promise anything about a bridged dictionary&#39;s behavior.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160121/48115657/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
