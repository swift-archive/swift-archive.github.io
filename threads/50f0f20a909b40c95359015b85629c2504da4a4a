<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 14, 2016 at 05:00:00pm</p></header><div class="content"><p>on Sun Feb 14 2016, Tony Parker &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi Ricardo,<br>&gt;<br>&gt; Your idea for exclusiveOr as a default arg had a lot of appeal to me<br>&gt; at first, but when I went to go try it I realized that it doesn’t<br>&gt; appear to be possible to enforce a value for a default argument in a<br>&gt; protocol (which is the root of the API we’re talking about, in<br>&gt; SetAlgebraType).<br>&gt;<br>&gt; All adopters of the protocol would be required to provide the default<br>&gt; value in their implementation. It’s less than ideal to me to have each<br>&gt; type that adopts the protocol decide what the default is, because a<br>&gt; mistake would lead to confusing behavior:<br>&gt;<br>&gt; var s1 = /// … some kind of SetAlgebraType, where func merge(other:<br>&gt; Self, removingMembersInCommon: Bool = true)<br>&gt; var s2 = /// … some other kind of SetAlgebraType, where func<br>&gt; merge(other: Self, removingMembersInCommon: Bool = false)<br>&gt;<br>&gt; s1.merge(s2) // xor<br>&gt; s2.merge(s1) // union<br>&gt;<br>&gt; It is possible to set the default in a protocol extension, but both<br>&gt; union and exclusiveOr are abstract in today’s SetAlgebraType.<br></p><p>One good answer for that is that it&#39;s a language limitation that should<br>be fixed eventually and in the meantime shouldn&#39;t affect the way our Set<br>interface looks for all time.<br></p><p>There are other ways, e.g.<br></p><p>  extension Set : SetAlgebraType {} // missing conformance (already in the branch)<br>  var x: Set = [1, 4, 5]<br></p><p>  // #1<br>  extension SetAlgebraType {<br>    mutating func mergeRemovingMembersInCommon(other: Self) { <br>      self.exclusiveOrInPlace(other) <br>    }<br>  }<br>  x.mergeRemovingMembersInCommon([4, 6])<br></p><p>  // #2<br>  enum RemovingMembersInCommon { case removingMembersInCommon }<br>  extension SetAlgebraType {<br>    mutating func merge(other: Self, _: RemovingMembersInCommon) { <br>      self.exclusiveOrInPlace(other) <br>    }<br>  }<br>  x.merge([4, 6], .removingMembersInCommon)<br></p><p>  // #3<br>  extension SetAlgebraType {<br>    mutating func merge(other: Self, removingMembersInCommon: ()) { <br>      self.exclusiveOrInPlace(other) <br>    }<br>  }<br>  x.merge([4, 6], removingMembersInCommon: ())<br></p><p>These do create one more top-level method than one might otherwise see,<br>but it&#39;s debatable whether these two pieces of functionality should<br>ideally be funneled through a single method.<br></p><p>&gt; Of course the blame lies on the implementation of s1 here, but this<br>&gt; approach does introduce a unique kind of sharp edge that we cannot<br>&gt; warn about at compile time. I think that this is a consequence of<br>&gt; putting something fundamental to the behavior of the method into an<br>&gt; argument instead of into the base name.<br>&gt;<br>&gt; Here is another idea that we are considering:<br>&gt;<br>&gt; func intersected(other: Self) -&gt; Self // was: intersect<br>&gt; mutating func intersect(other: Self) // was: intersectInPlace<br>&gt; func invertedIntersection(other: Self) -&gt; Self // was: exclusiveOr<br>&gt; mutating func invertIntersection(other: Self) // was:<br>&gt; exclusiveOrInPlace<br></p><p>AFAICT, “inverting the intersection has the wrong sense;” it doesn&#39;t<br>imply anything about including elements not in the intersection in the<br>result.<br></p><p>&gt; - Tony<br>&gt;<br>&gt;&gt; On Feb 14, 2016, at 2:36 PM, Ricardo Parada via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi David,<br>&gt;&gt; <br>&gt;&gt; It had to read your code a few times to realize what you had<br>&gt;&gt; changed. :-) It&#39;s subtle and makes the names more consistent. I<br>&gt;&gt; agree with your suggestion.<br>&gt;&gt; <br>&gt;&gt; As for whether or not the &#39;with&#39; label should be removed from the<br>&gt;&gt; mutable merge, I think it would work well either way.  However the<br>&gt;&gt; code is more concise without it and still reads well.<br>&gt;&gt; <br>&gt;&gt; Ricardo Parada<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 14, 2016, at 11:52 AM, David Hart via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; a.members(notIn: b)<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
