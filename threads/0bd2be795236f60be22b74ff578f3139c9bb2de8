<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>An Alternative for Extensibility Modifiers</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>July 12, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; It seems to me adding such an escape hatch makes the entire point of <br>&gt; the proposal moot.<br>What was the point of the proposal to you then?  This proposal makes several things possible that are not currently possible (or are at least not easy) in Swift.  For example, this lets you create subclasses inside your module, but still mark the class as final externally.  It also allows you to declare something final without an escape hatch if you so desire.<br></p><p>&gt; If I say a class I define is internal or private, you have no business <br>&gt; poking at it from an external module; if I say my class is sealed or <br>&gt; final, you have no business subclassing it from an external module. <br>&gt; Swift provides no escape hatch that exposes internal components of a <br>&gt; module; I don&#39;t see why subclassibility requirements should be treated <br>&gt; otherwise.<br>You have the option of marking something as final if you want that guarantee to hold.  What we are talking about here with ‘sealed’ and the escape hatch is the case where you didn’t actually say anything.  You haven’t chosen Open or Final.  In this case, subclassing is discouraged, but still allowed (with the caller acknowledging and taking responsibility that the code they are writing is brittle).<br></p><p>I have written at length in other posts as to why this is necessary with real world code.<br>&gt; Note that most popular OOP languages provide well-known patterns for <br>&gt; creating sealed but public classes, where only the author is able to <br>&gt; create subclasses. These patterns typically involve hiding class <br>&gt; constructors from external modules. If Swift was changed to support <br>&gt; sealed classes the same way, would you then propose a language feature <br>&gt; to defeat access modifiers?<br>All I will say is that I avoid using those languages as much as possible.  It is a separate topic, but in my opinion/experience languages which encourage too much planning/architecture lead to complicated programming structures (as an effort to work around limitations within the rules) and nothing of worth actually ends up getting accomplished.  Give me smalltalk or objC any day.<br></p><p>Thanks,<br>Jon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/0bd22de8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>An Alternative for Extensibility Modifiers</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>July 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 2016-07-12, at 13:29, Jonathan Hull &lt;jhull at gbis.com&gt; wrote:<br>&gt;&gt; Note that most popular OOP languages provide well-known patterns for <br>&gt;&gt; creating sealed but public classes, where only the author is able to <br>&gt;&gt; create subclasses. These patterns typically involve hiding class <br>&gt;&gt; constructors from external modules. If Swift was changed to support <br>&gt;&gt; sealed classes the same way, would you then propose a language feature <br>&gt;&gt; to defeat access modifiers?<br>&gt; All I will say is that I avoid using those languages as much as possible.  It is a separate topic, but in my opinion/experience languages which encourage too much planning/architecture lead to complicated programming structures (as an effort to work around limitations within the rules) and nothing of worth actually ends up getting accomplished.  Give me smalltalk or objC any day.<br></p><p>There is truly nothing wrong with preferring the Objective-C/Smalltalk/Ruby/Python/JavaScript class of languages to the Java/C++/C#/Rust/Go camp. Most reasonable people would say that lots of worth has been accomplished in each of them. Also, most people would say that too little planning/architecture can be just as damaging (or more) as too much.<br></p><p>But Swift is obviously in the second camp, and has been since 1.0.<br></p><p>I doubt there is a good middle ground between the two approaches; they seem to be mutually incompatible. Most concessions to “loose&quot; languages in a “strict” language feel out of place, and vice versa.<br></p><p>Swift does provide an important concession to Objective-C in its @objc attribute, whose interaction with final/sealed classes could perhaps be tweaked to achive what you want.<br></p><p>-- <br>Karoly<br>@lorentey<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/29f961e4/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
