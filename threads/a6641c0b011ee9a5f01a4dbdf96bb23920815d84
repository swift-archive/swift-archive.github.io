<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 24, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0134: Rename two UTF8-related properties on String&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 25, 2016 at 09:00:00am</p></header><div class="content"><p>+1. Seems logical.<br></p><p>&gt; On Jul 25, 2016, at 8:18 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0134: Rename two UTF8-related properties on String&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July 25, 2016 at 01:00:00pm</p></header><div class="content"><p>+1. A small but good improvement.<br></p><p>It makes even more sense since the documentation for these calls it “null-terminated” (was called “nul-terminated” in the 2.2 documentation).<br></p><p>- David<br></p><p>&gt; On 25 Jul 2016, at 08:18, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0134: Rename two UTF8-related properties on String&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 25, 2016 at 03:00:00pm</p></header><div class="content"><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md&gt;<br></p><p>My suggestion for SE-0134 is to use the `utf8CString` name, overloading for CSignedChar and CUnsignedChar:<br></p><p>	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CString.swift&gt;<br></p><p>	extension String {<br>	- init(cString: UnsafePointer&lt;CChar&gt;)<br>	- init(cString: UnsafePointer&lt;UInt8&gt;)<br>	- init?(validatingUTF8 cString: UnsafePointer&lt;CChar&gt;)<br></p><p>	+ init(utf8CString: UnsafePointer&lt;CSignedChar&gt;)<br>	+ init(utf8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>	+ init?(validatingUTF8CString: UnsafePointer&lt;CSignedChar&gt;)<br>	+ init?(validatingUTF8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>	}<br></p><p>The properties would change to methods, overloaded by return type:<br></p><p>	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/StringUTF8.swift&gt;<br></p><p>	extension String {<br>	- var nulTerminatedUTF8CString: ContiguousArray&lt;CChar&gt;<br>	- var nulTerminatedUTF8: ContiguousArray&lt;UTF8.CodeUnit&gt;<br></p><p>	+ func utf8CString() -&gt; ContiguousArray&lt;CSignedChar&gt;<br>	+ func utf8CString() -&gt; ContiguousArray&lt;CUnsignedChar&gt;<br>	}<br></p><p>## NOTES ##<br></p><p>UTF8.CodeUnit is defined as UInt8, and CChar is currently defined as Int8:<br></p><p>	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CTypes.swift&gt;<br></p><p>	/// The C &#39;char&#39; type.<br>	///<br>	/// This will be the same as either `CSignedChar` (in the common<br>	/// case) or `CUnsignedChar`, depending on the platform.<br>	public typealias CChar = Int8<br></p><p>	/// The C &#39;signed char&#39; type.<br>	public typealias CSignedChar = Int8<br></p><p>	/// The C &#39;unsigned char&#39; type.<br>	public typealias CUnsignedChar = UInt8<br></p><p>There&#39;s an abandoned proposal to update CChar:<br></p><p>	&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7925/focus=8158&gt;<br></p><p>	&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8419&gt;<br></p><p>String.init(cString: UnsafePointer&lt;UInt8&gt;) and nulTerminatedUTF8CString were added by SE-0107:<br></p><p>	&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#cstring-conversion&gt;<br></p><p>	&lt;https://github.com/apple/swift/commit/c7aa8284c905a73959ad69255cb56c38db80d039&gt;<br></p><p>Foundation.NSString uses the `utf8String` name instead:<br></p><p>	&lt;https://developer.apple.com/reference/foundation/nsstring/1412128-init&gt;<br></p><p>	&lt;https://developer.apple.com/reference/foundation/nsstring/1411189-utf8string&gt;<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 25 Jul 2016, at 15:27, Ben Rimmington wrote:<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md&gt;<br>&gt; <br>&gt; My suggestion for SE-0134 is to use the `utf8CString` name, overloading for CSignedChar and CUnsignedChar:<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CString.swift&gt;<br>&gt; <br>&gt; 	extension String {<br>&gt; 	- init(cString: UnsafePointer&lt;CChar&gt;)<br>&gt; 	- init(cString: UnsafePointer&lt;UInt8&gt;)<br>&gt; 	- init?(validatingUTF8 cString: UnsafePointer&lt;CChar&gt;)<br>&gt; <br>&gt; 	+ init(utf8CString: UnsafePointer&lt;CSignedChar&gt;)<br>&gt; 	+ init(utf8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>&gt; 	+ init?(validatingUTF8CString: UnsafePointer&lt;CSignedChar&gt;)<br>&gt; 	+ init?(validatingUTF8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>&gt; 	}<br>&gt; <br>&gt; The properties would change to methods, overloaded by return type:<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/StringUTF8.swift&gt;<br>&gt; <br>&gt; 	extension String {<br>&gt; 	- var nulTerminatedUTF8CString: ContiguousArray&lt;CChar&gt;<br>&gt; 	- var nulTerminatedUTF8: ContiguousArray&lt;UTF8.CodeUnit&gt;<br>&gt; <br>&gt; 	+ func utf8CString() -&gt; ContiguousArray&lt;CSignedChar&gt;<br>&gt; 	+ func utf8CString() -&gt; ContiguousArray&lt;CUnsignedChar&gt;<br>&gt; 	}<br>&gt; <br>&gt; ## NOTES ##<br>&gt; <br>&gt; UTF8.CodeUnit is defined as UInt8, and CChar is currently defined as Int8:<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CTypes.swift&gt;<br>&gt; <br>&gt; 	/// The C &#39;char&#39; type.<br>&gt; 	///<br>&gt; 	/// This will be the same as either `CSignedChar` (in the common<br>&gt; 	/// case) or `CUnsignedChar`, depending on the platform.<br>&gt; 	public typealias CChar = Int8<br>&gt; <br>&gt; 	/// The C &#39;signed char&#39; type.<br>&gt; 	public typealias CSignedChar = Int8<br>&gt; <br>&gt; 	/// The C &#39;unsigned char&#39; type.<br>&gt; 	public typealias CUnsignedChar = UInt8<br>&gt; <br>&gt; There&#39;s an abandoned proposal to update CChar:<br>&gt; <br>&gt; 	&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7925/focus=8158&gt;<br>&gt; <br>&gt; 	&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8419&gt;<br>&gt; <br>&gt; String.init(cString: UnsafePointer&lt;UInt8&gt;) and nulTerminatedUTF8CString were added by SE-0107:<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#cstring-conversion&gt;<br>&gt; <br>&gt; 	&lt;https://github.com/apple/swift/commit/c7aa8284c905a73959ad69255cb56c38db80d039&gt;<br>&gt; <br>&gt; Foundation.NSString uses the `utf8String` name instead:<br>&gt; <br>&gt; 	&lt;https://developer.apple.com/reference/foundation/nsstring/1412128-init&gt;<br>&gt; <br>&gt; 	&lt;https://developer.apple.com/reference/foundation/nsstring/1411189-utf8string&gt;<br></p><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md&gt;<br></p><p>There&#39;s another method for SE-0134 which could be renamed or removed:<br></p><p>	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/LifetimeManager.swift&gt;<br></p><p>	extension String {<br>	- func withCString&lt;Result&gt;(<br>	-   _ body: @noescape (UnsafePointer&lt;Int8&gt;) throws -&gt; Result<br>	- ) rethrows -&gt; Result<br></p><p>	+ func withUTF8CString&lt;Result&gt;(<br>	+   _ body: @noescape (UnsafePointer&lt;CSignedChar&gt;) throws -&gt; Result<br>	+ ) rethrows -&gt; Result<br></p><p>	+ func withUTF8CString&lt;Result&gt;(<br>	+   _ body: @noescape (UnsafePointer&lt;CUnsignedChar&gt;) throws -&gt; Result<br>	+ ) rethrows -&gt; Result<br>	}<br></p><p>The overloads (CSignedChar and CUnsignedChar) are needed if CChar will become UInt8 on some platforms.<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Ben, while I&#39;m broadly sympathetic to making CChar work more widely, if I<br>recall correctly this was a rather complex discussion topic you&#39;re raising<br>again. Besides the unprecedented name (Unsigned is never spelled out at the<br>moment), I wonder if all the other salient issues involved are best left<br>for a wider discussion than is possible here, especially since the pitch<br>and proposal have been limited to two properties.<br>On Wed, Jul 27, 2016 at 07:33 Ben Rimmington via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 25 Jul 2016, at 15:27, Ben Rimmington wrote:<br>&gt; &gt;<br>&gt; &gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; My suggestion for SE-0134 is to use the `utf8CString` name, overloading<br>&gt; for CSignedChar and CUnsignedChar:<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/CString.swift<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;       extension String {<br>&gt; &gt;       - init(cString: UnsafePointer&lt;CChar&gt;)<br>&gt; &gt;       - init(cString: UnsafePointer&lt;UInt8&gt;)<br>&gt; &gt;       - init?(validatingUTF8 cString: UnsafePointer&lt;CChar&gt;)<br>&gt; &gt;<br>&gt; &gt;       + init(utf8CString: UnsafePointer&lt;CSignedChar&gt;)<br>&gt; &gt;       + init(utf8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>&gt; &gt;       + init?(validatingUTF8CString: UnsafePointer&lt;CSignedChar&gt;)<br>&gt; &gt;       + init?(validatingUTF8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; The properties would change to methods, overloaded by return type:<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/StringUTF8.swift<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;       extension String {<br>&gt; &gt;       - var nulTerminatedUTF8CString: ContiguousArray&lt;CChar&gt;<br>&gt; &gt;       - var nulTerminatedUTF8: ContiguousArray&lt;UTF8.CodeUnit&gt;<br>&gt; &gt;<br>&gt; &gt;       + func utf8CString() -&gt; ContiguousArray&lt;CSignedChar&gt;<br>&gt; &gt;       + func utf8CString() -&gt; ContiguousArray&lt;CUnsignedChar&gt;<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; ## NOTES ##<br>&gt; &gt;<br>&gt; &gt; UTF8.CodeUnit is defined as UInt8, and CChar is currently defined as<br>&gt; Int8:<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/CTypes.swift<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;       /// The C &#39;char&#39; type.<br>&gt; &gt;       ///<br>&gt; &gt;       /// This will be the same as either `CSignedChar` (in the common<br>&gt; &gt;       /// case) or `CUnsignedChar`, depending on the platform.<br>&gt; &gt;       public typealias CChar = Int8<br>&gt; &gt;<br>&gt; &gt;       /// The C &#39;signed char&#39; type.<br>&gt; &gt;       public typealias CSignedChar = Int8<br>&gt; &gt;<br>&gt; &gt;       /// The C &#39;unsigned char&#39; type.<br>&gt; &gt;       public typealias CUnsignedChar = UInt8<br>&gt; &gt;<br>&gt; &gt; There&#39;s an abandoned proposal to update CChar:<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/7925/focus=8158&gt;<br>&gt; &gt;<br>&gt; &gt;       &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8419&gt;<br>&gt; &gt;<br>&gt; &gt; String.init(cString: UnsafePointer&lt;UInt8&gt;) and nulTerminatedUTF8CString<br>&gt; were added by SE-0107:<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#cstring-conversion<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://github.com/apple/swift/commit/c7aa8284c905a73959ad69255cb56c38db80d039<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Foundation.NSString uses the `utf8String` name instead:<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://developer.apple.com/reference/foundation/nsstring/1412128-init&gt;<br>&gt; &gt;<br>&gt; &gt;       &lt;<br>&gt; https://developer.apple.com/reference/foundation/nsstring/1411189-utf8string<br>&gt; &gt;<br>&gt;<br>&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md<br>&gt; &gt;<br>&gt;<br>&gt; There&#39;s another method for SE-0134 which could be renamed or removed:<br>&gt;<br>&gt;         &lt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/LifetimeManager.swift<br>&gt; &gt;<br>&gt;<br>&gt;         extension String {<br>&gt;         - func withCString&lt;Result&gt;(<br>&gt;         -   _ body: @noescape (UnsafePointer&lt;Int8&gt;) throws -&gt; Result<br>&gt;         - ) rethrows -&gt; Result<br>&gt;<br>&gt;         + func withUTF8CString&lt;Result&gt;(<br>&gt;         +   _ body: @noescape (UnsafePointer&lt;CSignedChar&gt;) throws -&gt; Result<br>&gt;         + ) rethrows -&gt; Result<br>&gt;<br>&gt;         + func withUTF8CString&lt;Result&gt;(<br>&gt;         +   _ body: @noescape (UnsafePointer&lt;CUnsignedChar&gt;) throws -&gt;<br>&gt; Result<br>&gt;         + ) rethrows -&gt; Result<br>&gt;         }<br>&gt;<br>&gt; The overloads (CSignedChar and CUnsignedChar) are needed if CChar will<br>&gt; become UInt8 on some platforms.<br>&gt;<br>&gt; -- Ben<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/37870025/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>July 27, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;m +1 on the proposal.<br></p><p>Félix<br></p><p>&gt; Le 27 juil. 2016 à 07:08:44, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Ben, while I&#39;m broadly sympathetic to making CChar work more widely, if I recall correctly this was a rather complex discussion topic you&#39;re raising again. Besides the unprecedented name (Unsigned is never spelled out at the moment), I wonder if all the other salient issues involved are best left for a wider discussion than is possible here, especially since the pitch and proposal have been limited to two properties.<br>&gt; On Wed, Jul 27, 2016 at 07:33 Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On 25 Jul 2016, at 15:27, Ben Rimmington wrote:<br>&gt; &gt;<br>&gt; &gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md&gt;&gt;<br>&gt; &gt;<br>&gt; &gt; My suggestion for SE-0134 is to use the `utf8CString` name, overloading for CSignedChar and CUnsignedChar:<br>&gt; &gt;<br>&gt; &gt;       &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CString.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CString.swift&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;       extension String {<br>&gt; &gt;       - init(cString: UnsafePointer&lt;CChar&gt;)<br>&gt; &gt;       - init(cString: UnsafePointer&lt;UInt8&gt;)<br>&gt; &gt;       - init?(validatingUTF8 cString: UnsafePointer&lt;CChar&gt;)<br>&gt; &gt;<br>&gt; &gt;       + init(utf8CString: UnsafePointer&lt;CSignedChar&gt;)<br>&gt; &gt;       + init(utf8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>&gt; &gt;       + init?(validatingUTF8CString: UnsafePointer&lt;CSignedChar&gt;)<br>&gt; &gt;       + init?(validatingUTF8CString: UnsafePointer&lt;CUnsignedChar&gt;)<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; The properties would change to methods, overloaded by return type:<br>&gt; &gt;<br>&gt; &gt;       &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/StringUTF8.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/StringUTF8.swift&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;       extension String {<br>&gt; &gt;       - var nulTerminatedUTF8CString: ContiguousArray&lt;CChar&gt;<br>&gt; &gt;       - var nulTerminatedUTF8: ContiguousArray&lt;UTF8.CodeUnit&gt;<br>&gt; &gt;<br>&gt; &gt;       + func utf8CString() -&gt; ContiguousArray&lt;CSignedChar&gt;<br>&gt; &gt;       + func utf8CString() -&gt; ContiguousArray&lt;CUnsignedChar&gt;<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; ## NOTES ##<br>&gt; &gt;<br>&gt; &gt; UTF8.CodeUnit is defined as UInt8, and CChar is currently defined as Int8:<br>&gt; &gt;<br>&gt; &gt;       &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CTypes.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CTypes.swift&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;       /// The C &#39;char&#39; type.<br>&gt; &gt;       ///<br>&gt; &gt;       /// This will be the same as either `CSignedChar` (in the common<br>&gt; &gt;       /// case) or `CUnsignedChar`, depending on the platform.<br>&gt; &gt;       public typealias CChar = Int8<br>&gt; &gt;<br>&gt; &gt;       /// The C &#39;signed char&#39; type.<br>&gt; &gt;       public typealias CSignedChar = Int8<br>&gt; &gt;<br>&gt; &gt;       /// The C &#39;unsigned char&#39; type.<br>&gt; &gt;       public typealias CUnsignedChar = UInt8<br>&gt; &gt;<br>&gt; &gt; There&#39;s an abandoned proposal to update CChar:<br>&gt; &gt;<br>&gt; &gt;       &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7925/focus=8158 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7925/focus=8158&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;       &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8419 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8419&gt;&gt;<br>&gt; &gt;<br>&gt; &gt; String.init(cString: UnsafePointer&lt;UInt8&gt;) and nulTerminatedUTF8CString were added by SE-0107:<br>&gt; &gt;<br>&gt; &gt;       &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#cstring-conversion &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md#cstring-conversion&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;       &lt;https://github.com/apple/swift/commit/c7aa8284c905a73959ad69255cb56c38db80d039 &lt;https://github.com/apple/swift/commit/c7aa8284c905a73959ad69255cb56c38db80d039&gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Foundation.NSString uses the `utf8String` name instead:<br>&gt; &gt;<br>&gt; &gt;       &lt;https://developer.apple.com/reference/foundation/nsstring/1412128-init &lt;https://developer.apple.com/reference/foundation/nsstring/1412128-init&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;       &lt;https://developer.apple.com/reference/foundation/nsstring/1411189-utf8string &lt;https://developer.apple.com/reference/foundation/nsstring/1411189-utf8string&gt;&gt;<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md&gt;&gt;<br>&gt; <br>&gt; There&#39;s another method for SE-0134 which could be renamed or removed:<br>&gt; <br>&gt;         &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/LifetimeManager.swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/LifetimeManager.swift&gt;&gt;<br>&gt; <br>&gt;         extension String {<br>&gt;         - func withCString&lt;Result&gt;(<br>&gt;         -   _ body: @noescape (UnsafePointer&lt;Int8&gt;) throws -&gt; Result<br>&gt;         - ) rethrows -&gt; Result<br>&gt; <br>&gt;         + func withUTF8CString&lt;Result&gt;(<br>&gt;         +   _ body: @noescape (UnsafePointer&lt;CSignedChar&gt;) throws -&gt; Result<br>&gt;         + ) rethrows -&gt; Result<br>&gt; <br>&gt;         + func withUTF8CString&lt;Result&gt;(<br>&gt;         +   _ body: @noescape (UnsafePointer&lt;CUnsignedChar&gt;) throws -&gt; Result<br>&gt;         + ) rethrows -&gt; Result<br>&gt;         }<br>&gt; <br>&gt; The overloads (CSignedChar and CUnsignedChar) are needed if CChar will become UInt8 on some platforms.<br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/dfe2e7de/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 27, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 27 Jul 2016, at 15:08, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Ben, while I&#39;m broadly sympathetic to making CChar work more widely, if I recall correctly this was a rather complex discussion topic you&#39;re raising again.<br></p><p>Yes, I linked to the previous threads:<br></p><p>	&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7925/focus=8158&gt;<br></p><p>	&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/8419&gt;<br></p><p>&gt; Besides the unprecedented name (Unsigned is never spelled out at the moment),<br></p><p>No, CSignedChar and CUnsignedChar already exist:<br></p><p>	&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/CTypes.swift&gt;<br></p><p>The equivalent Int8 and UInt8 could be used instead.<br></p><p>&gt; I wonder if all the other salient issues involved are best left for a wider discussion than is possible here, especially since the pitch and proposal have been limited to two properties.<br></p><p>Yes, the core team will probably merge &lt;https://github.com/apple/swift/pull/3742&gt; without ammendment.<br></p><p>But the fundamental issue is that UTF-8 characters can be treated as signed or unsigned:<br></p><p>	&lt;https://github.com/apple/swift/commit/c7aa8284c905a73959ad69255cb56c38db80d039&gt;<br></p><p>The utf8CString() methods -- overloaded by return type -- could be useful when writing cross-platform code.<br></p><p>I also suggested the other changes for two reasons:<br></p><p>1. Foundation.NSString has many deprecated `cString` APIs, because it wasn&#39;t clear whether they used the UTF-8 or Mac OS Roman encoding?<br></p><p>2. If the CChar typealias will be defined as UInt8 on some platforms, the initializers will conflict:<br></p><p>	extension String {<br>	  init(cString: UnsafePointer&lt;CChar&gt;) // Added by SE-0006.<br>	  init(cString: UnsafePointer&lt;UInt8&gt;) // Added by SE-0107.<br>	}<br></p><p>-- Ben<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[SHORT Review] SE-0134: Rename two UTF8-related properties on String</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 25, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jul 24, 2016, at 11:18 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0134: Rename two UTF8-related properties on String&quot; begins now and runs through July 26.  Apologies for the short review cycle, but we’re right up against the end of source breaking changes for Swift 3.  The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0134-rename-string-properties.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>+1<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>Yes<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read thread. <br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
