<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a83279e420d8a16da6441b8333b93775?s=50"></div><header><strong>[Draft] Mixins</strong> from <string>David Scrève</string> &lt;david.screve at dlta-studio.com&gt;<p>February 27, 2016 at 09:00:00pm</p></header><div class="content"><p>I have already considered adding store properties to protocols before proposing abstract classes, but there are some issues : <br></p><p>1 - If protocols can have stored properties and default method implementation, how do you explain to newby the difference between a class and a protocol ? There is the same problem with Java 8 and interface which make learning to student really painfull….<br>In short words, protocol will became a sort of class and no longer a true kind of contract to conform to.<br></p><p>2 - What about compatibility with Objective C ?<br></p><p>3- more interesting problem : At the moment, multiple inheritance for protocol is allowed. When introducing store property in protocol, you introduce a major issue that C++ have : the diamond problem.<br></p><p>Example : <br></p><p>protocol A {<br>	var value = 34<br>} <br></p><p>protocol B {<br>	var value = 23<br>}<br></p><p>class myClass : A, B {<br>    func init {<br>        print(&quot;Value  : \(value));<br>    }<br>}<br></p><p>What should be print out ? how do you manage access to A.value and B.value ?<br></p><p><br>&gt; Some people opposed to Abstract Classes proposal (including myself) have<br>&gt; said that mixins could solve the problem better.<br>&gt; So I prepaired a proposal draft to add stored properties to protocols. Here<br>&gt; it is:<br>&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c &lt;https://gist.github.com/Anton3/f0550922c1be0fc5447c&gt;<br>&gt; <br>&gt; P.S. I added a `mixin` keyword in the beginning, but we can opt to just<br>&gt; extend protocols, which I mention in &quot;alternatives&quot;.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/9d4d1db0/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4233 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/9d4d1db0/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9a60c0cf6f281d6d169561e77ba5c006?s=50"></div><header><strong>[Draft] Mixins</strong> from <string>Jim Driscoll</string> &lt;jim.a.driscoll at gmail.com&gt;<p>February 27, 2016 at 08:00:00pm</p></header><div class="content"><p>Regarding multiple inheritance of protocols, it shouldn’t be a huge problem from the developer’s perspective to have multiple values for the same property because you’d have the same expectation as if there had just been multiple assignments: last one wins. The problem I’d see for the example scenario is that the semantics of the property may be completely different, in which case having a value that the protocol doesn’t expect may break it. The only adequate protections for that kind of matter is either preventing declarations of the same property across multiple included protocols or giving them their own namespaces (which would be a problem in itself).<br></p><p>&gt; On 27 Feb 2016, at 20:30, David Scrève via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	I have already considered adding store properties to protocols before proposing abstract classes, but there are some issues : <br>&gt; <br>&gt; 1 - If protocols can have stored properties and default method implementation, how do you explain to newby the difference between a class and a protocol ? There is the same problem with Java 8 and interface which make learning to student really painfull….<br>&gt; In short words, protocol will became a sort of class and no longer a true kind of contract to conform to.<br>&gt; <br>&gt; 2 - What about compatibility with Objective C ?<br>&gt; <br>&gt; 3- more interesting problem : At the moment, multiple inheritance for protocol is allowed. When introducing store property in protocol, you introduce a major issue that C++ have : the diamond problem.<br>&gt; <br>&gt; Example : <br>&gt; <br>&gt; protocol A {<br>&gt; 	var value = 34<br>&gt; } <br>&gt; <br>&gt; protocol B {<br>&gt; 	var value = 23<br>&gt; }<br>&gt; <br>&gt; class myClass : A, B {<br>&gt;     func init {<br>&gt;         print(&quot;Value  : \(value));<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; What should be print out ? how do you manage access to A.value and B.value ?<br>&gt; <br>&gt; <br>&gt;&gt; Some people opposed to Abstract Classes proposal (including myself) have<br>&gt;&gt; said that mixins could solve the problem better.<br>&gt;&gt; So I prepaired a proposal draft to add stored properties to protocols. Here<br>&gt;&gt; it is:<br>&gt;&gt; https://gist.github.com/Anton3/f0550922c1be0fc5447c &lt;https://gist.github.com/Anton3/f0550922c1be0fc5447c&gt;<br>&gt;&gt; <br>&gt;&gt; P.S. I added a `mixin` keyword in the beginning, but we can opt to just<br>&gt;&gt; extend protocols, which I mention in &quot;alternatives&quot;.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/eba16568/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
