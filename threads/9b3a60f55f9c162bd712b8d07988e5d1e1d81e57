<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>[Opinion] Thoughts about the SE-0025 (Scoped Access Level) proposal</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>May  8, 2016 at 05:00:00pm</p></header><div class="content"><p>Hello.<br></p><p><br>I had a health problem and recently I needed a surgery because of it. Now<br>I&#39;m fine (yay!), but I missed all the discussions and threads at this time.<br></p><p>Reading the SE-0025 proposal, which I find quite valid, I found it the<br>(ugly) keyword `fileprivate` and the lack of a `protected` scope. I know it<br>should be late for you to turn back, but below is my suggestion about the<br>access level scopes the Swift language could implement:<br></p><p><br>*public*<br>Nothing to change. Symbols will be visible to the CONTAINING TYPE and ALL<br>MODULES.<br></p><p>*protected **<br>Symbols visibility will be limited to the CONTAINING TYPE and DERIVED TYPES<br>from the containing type. (Rookies calling `myView.layoutSubviews()` no<br>more...)<br></p><p>*internal*<br>Nothing to change. Symbols will be visible to the CONTAINING TYPE and the<br>CURRENT MODULE.<br></p><p>*protected internal ****<br>Symbols visibility will be limited to the CONTAINING TYPE and DERIVED TYPES<br>from the containing type or the CURRENT MODULE. (They will be `protected`<br>when used by other modules, but `internal` when used by the current module.)<br></p><p>*private*<br>The symbols will be visible within the CONTAINING TYPE and the OTHER TYPES<br>in the SAME FILE. (This is the `fileprivate` proposed in SE-0025.)<br></p><p>*local ****<br>The symbols will be visible within the CONTAINING TYPE ONLY. (No other<br>types accessing my variables anymore... This is the proposed `private`in<br>SE-0025)<br></p><p><br>*The items marked with * denote new access levels. The other remain as they<br>are implemented in Swift 2.x*<br></p><p><br>Well... That was it.<br></p><p><br>Regards,<br></p><p>Vanderlei Martinelli<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/9b3a1e57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Opinion] Thoughts about the SE-0025 (Scoped Access Level) proposal</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>May  8, 2016 at 10:00:00pm</p></header><div class="content"><p>When you say you missed all the discussions and threads... you missed<br>probably the longest bikeshedding discussion we&#39;ve had on Swift Evolution<br>so far.<br>First: no-one&#39;s ruled out a &#39;protected&#39; access level yet. Equally, as far<br>as I recall, it hasn&#39;t been presented for review yet. It&#39;s neither accepted<br>nor rejected. How its type-based access nature works with Swift&#39;s<br>scope-based access system will be an interesting topic. Perhaps now&#39;s a<br>good time to start it.<br>Second: however ugly you find &#39;fileprivate&#39;, you understood what it meant.<br>Not knowing which of &#39;local&#39; and &#39;private&#39; was implicitly more private<br>drove a lot of that discussion; that&#39;s why &#39;fileprivate&#39; won. It&#39;s also a<br>relative term - for example, since it would be pointless to declare a<br>protocol as &#39;local&#39; in your hierarchy (since it would then be impossible<br>for another type to conform to it), the protocol would be declared as<br>&#39;private&#39; but would have &#39;fileprivate&#39; visibility, which means you wouldn&#39;t<br>see &#39;fileprivate&#39; perhaps as often as you&#39;re concerned about.<br></p><p>On Sun, May 8, 2016 at 9:13 PM, Vanderlei Martinelli via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello.<br>&gt;<br>&gt;<br>&gt; I had a health problem and recently I needed a surgery because of it. Now<br>&gt; I&#39;m fine (yay!), but I missed all the discussions and threads at this time.<br>&gt;<br>&gt; Reading the SE-0025 proposal, which I find quite valid, I found it the<br>&gt; (ugly) keyword `fileprivate` and the lack of a `protected` scope. I know it<br>&gt; should be late for you to turn back, but below is my suggestion about the<br>&gt; access level scopes the Swift language could implement:<br>&gt;<br>&gt;<br>&gt; *public*<br>&gt; Nothing to change. Symbols will be visible to the CONTAINING TYPE and ALL<br>&gt; MODULES.<br>&gt;<br>&gt; *protected **<br>&gt; Symbols visibility will be limited to the CONTAINING TYPE and DERIVED<br>&gt; TYPES from the containing type. (Rookies calling `myView.layoutSubviews()`<br>&gt; no more...)<br>&gt;<br>&gt; *internal*<br>&gt; Nothing to change. Symbols will be visible to the CONTAINING TYPE and the<br>&gt; CURRENT MODULE.<br>&gt;<br>&gt; *protected internal ****<br>&gt; Symbols visibility will be limited to the CONTAINING TYPE and DERIVED<br>&gt; TYPES from the containing type or the CURRENT MODULE. (They will be<br>&gt; `protected` when used by other modules, but `internal` when used by the<br>&gt; current module.)<br>&gt;<br>&gt; *private*<br>&gt; The symbols will be visible within the CONTAINING TYPE and the OTHER TYPES<br>&gt; in the SAME FILE. (This is the `fileprivate` proposed in SE-0025.)<br>&gt;<br>&gt; *local ****<br>&gt; The symbols will be visible within the CONTAINING TYPE ONLY. (No other<br>&gt; types accessing my variables anymore... This is the proposed `private`in<br>&gt; SE-0025)<br>&gt;<br>&gt;<br>&gt; *The items marked with * denote new access levels. The other remain as<br>&gt; they are implemented in Swift 2.x*<br>&gt;<br>&gt;<br>&gt; Well... That was it.<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; Vanderlei Martinelli<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/006a258c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
