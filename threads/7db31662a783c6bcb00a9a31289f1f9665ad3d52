<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>modifying Array&lt;Element&gt; to return Element! when subscripted</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 28, 2016 at 11:00:00am</p></header><div class="content"><p>on Thu Jun 23 2016, &quot;L. Mihalkovic via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jun 23, 2016, at 6:07 PM, Pranjal Satija via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Would modifying array subscripts to return implicitly unwrapped<br>&gt;&gt; optionals be a bad idea? This way, if an array is indexed out of<br>&gt;&gt; bounds,<br>&gt;<br>&gt; Most out of bounds errors originate in bad code. So now instead of<br>&gt; forcing people to rewrite it or at least have more bad code to be more<br>&gt; defensive, this would give an incentive to ignore the original problem<br>&gt; and never learn to code properly.<br></p><p>+1; I am opposed to this.  If it&#39;s not already on the list of<br>commonly-rejected proposals, I&#39;m surprised, as it comes up often.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>modifying Array&lt;Element&gt; to return Element! when subscripted</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>June 29, 2016 at 11:00:00am</p></header><div class="content"><p>What about an additional method? No subscripting, just a method that throws<br>instead of trapping?<br></p><p>On Tue, Jun 28, 2016 at 2:08 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Jun 23 2016, &quot;L. Mihalkovic via swift-evolution&quot; &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Jun 23, 2016, at 6:07 PM, Pranjal Satija via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Would modifying array subscripts to return implicitly unwrapped<br>&gt; &gt;&gt; optionals be a bad idea? This way, if an array is indexed out of<br>&gt; &gt;&gt; bounds,<br>&gt; &gt;<br>&gt; &gt; Most out of bounds errors originate in bad code. So now instead of<br>&gt; &gt; forcing people to rewrite it or at least have more bad code to be more<br>&gt; &gt; defensive, this would give an incentive to ignore the original problem<br>&gt; &gt; and never learn to code properly.<br>&gt;<br>&gt; +1; I am opposed to this.  If it&#39;s not already on the list of<br>&gt; commonly-rejected proposals, I&#39;m surprised, as it comes up often.<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/e465e14a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>modifying Array&lt;Element&gt; to return Element! when subscripted</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 29, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jun 29, 2016 at 10:06 AM, T.J. Usiyan via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What about an additional method? No subscripting, just a method that<br>&gt; throws instead of trapping?<br>&gt;<br></p><p>What about it? You can add it yourself via extension. What&#39;s your case that<br>it should be in the stdlib?<br></p><p><br>&gt; On Tue, Jun 28, 2016 at 2:08 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Thu Jun 23 2016, &quot;L. Mihalkovic via swift-evolution&quot; &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;&gt; On Jun 23, 2016, at 6:07 PM, Pranjal Satija via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Would modifying array subscripts to return implicitly unwrapped<br>&gt;&gt; &gt;&gt; optionals be a bad idea? This way, if an array is indexed out of<br>&gt;&gt; &gt;&gt; bounds,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Most out of bounds errors originate in bad code. So now instead of<br>&gt;&gt; &gt; forcing people to rewrite it or at least have more bad code to be more<br>&gt;&gt; &gt; defensive, this would give an incentive to ignore the original problem<br>&gt;&gt; &gt; and never learn to code properly.<br>&gt;&gt;<br>&gt;&gt; +1; I am opposed to this.  If it&#39;s not already on the list of<br>&gt;&gt; commonly-rejected proposals, I&#39;m surprised, as it comes up often.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/cc949794/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
