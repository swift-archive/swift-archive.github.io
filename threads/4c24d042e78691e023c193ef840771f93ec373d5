<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Very unexpected automatic behaviour between StringLiteralConvertible and pattern matching!</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January  5, 2016 at 06:00:00pm</p></header><div class="content"><p>How is it that Swift allows code like this:<br></p><p>struct Sneaky: StringLiteralConvertible {<br>	init(stringLiteral value: String) {}<br>	init(extendedGraphemeClusterLiteral value: String) {}<br>	init(unicodeScalarLiteral value: String) {}<br>}<br></p><p>func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>	return false<br>}<br></p><p>enum NormalEnum: String {<br>	case Super = &quot;super&quot;<br>	case Mario = &quot;mario&quot;<br>}<br></p><p>let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br></p><p>It hit completely by surprise today because of of a Regex library:<br></p><p>struct Regex: StringLiteralConvertible {<br>	init(stringLiteral value: String) {}<br>	init(extendedGraphemeClusterLiteral value: String) {}<br>	init(unicodeScalarLiteral value: String) {}<br></p><p>	//...<br>}<br></p><p>func ~=(regex: Regex, string: String) -&gt; Bool {<br>	return regex.matches(string)<br>}<br></p><p>If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>What can we do about it?<br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/4c2473d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Very unexpected automatic behaviour between StringLiteralConvertible and pattern matching!</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January  6, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 5, 2016, at 9:28 AM, David Hart via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; How is it that Swift allows code like this:<br>&gt; <br>&gt; struct Sneaky: StringLiteralConvertible {<br>&gt; 	init(stringLiteral value: String) {}<br>&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt; }<br>&gt; <br>&gt; func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>&gt; 	return false<br>&gt; }<br>&gt; <br>&gt; enum NormalEnum: String {<br>&gt; 	case Super = &quot;super&quot;<br>&gt; 	case Mario = &quot;mario&quot;<br>&gt; }<br>&gt; <br>&gt; let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br></p><p>I see two bugs here. When an enum has a raw value type, the compiler generates this initializer:<br></p><p>init(rawValue: String) {<br>  switch rawValue {<br>  case &quot;super&quot;:<br>    self = .Super<br>  ...<br>  }<br>}<br></p><p>so uses ~= pattern matching to match the raw value. It would be more sensible to always use `==` comparison in the synthesized initializer. However, I&#39;m surprised too that the type checker favors ~=(Sneaky, String) over ~=(String, String); it should at best be ambiguous. Do you have time to file these two bugs?<br></p><p>-Joe<br></p><p>&gt; <br>&gt; It hit completely by surprise today because of of a Regex library:<br>&gt; <br>&gt; struct Regex: StringLiteralConvertible {<br>&gt; 	init(stringLiteral value: String) {}<br>&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt; <br>&gt; 	//...<br>&gt; }<br>&gt; <br>&gt; func ~=(regex: Regex, string: String) -&gt; Bool {<br>&gt; 	return regex.matches(string)<br>&gt; }<br>&gt; <br>&gt; If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>&gt; What can we do about it?<br>&gt; <br>&gt; David.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160106/d830f7dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Very unexpected automatic behaviour between StringLiteralConvertible and pattern matching!</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>January  6, 2016 at 11:00:00pm</p></header><div class="content"><p>I can file those bugs. Would it be beneficial if I also created failing unit tests?<br>David.<br></p><p>&gt; On 06 Jan 2016, at 20:05, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 5, 2016, at 9:28 AM, David Hart via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How is it that Swift allows code like this:<br>&gt;&gt; <br>&gt;&gt; struct Sneaky: StringLiteralConvertible {<br>&gt;&gt; 	init(stringLiteral value: String) {}<br>&gt;&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt;&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ~=(sneaky: Sneaky, string: String) -&gt; Bool {<br>&gt;&gt; 	return false<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; enum NormalEnum: String {<br>&gt;&gt; 	case Super = &quot;super&quot;<br>&gt;&gt; 	case Mario = &quot;mario&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let value = NormalEnum(rawValue: &quot;super”) // return nil!!!!<br>&gt; <br>&gt; I see two bugs here. When an enum has a raw value type, the compiler generates this initializer:<br>&gt; <br>&gt; init(rawValue: String) {<br>&gt;   switch rawValue {<br>&gt;   case &quot;super&quot;:<br>&gt;     self = .Super<br>&gt;   ...<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; so uses ~= pattern matching to match the raw value. It would be more sensible to always use `==` comparison in the synthesized initializer. However, I&#39;m surprised too that the type checker favors ~=(Sneaky, String) over ~=(String, String); it should at best be ambiguous. Do you have time to file these two bugs?<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; <br>&gt;&gt; It hit completely by surprise today because of of a Regex library:<br>&gt;&gt; <br>&gt;&gt; struct Regex: StringLiteralConvertible {<br>&gt;&gt; 	init(stringLiteral value: String) {}<br>&gt;&gt; 	init(extendedGraphemeClusterLiteral value: String) {}<br>&gt;&gt; 	init(unicodeScalarLiteral value: String) {}<br>&gt;&gt; <br>&gt;&gt; 	//...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ~=(regex: Regex, string: String) -&gt; Bool {<br>&gt;&gt; 	return regex.matches(string)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If I was not already a Swift enthusiast, this behaviour would have left me completely dumbfounded.<br>&gt;&gt; What can we do about it?<br>&gt;&gt; <br>&gt;&gt; David.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160106/4b6ecf71/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Very unexpected automatic behaviour between StringLiteralConvertible and pattern matching!</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January  6, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 2:31 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I can file those bugs. Would it be beneficial if I also created failing unit tests?<br>&gt; David.<br></p><p>Definitely. Thanks for uncovering these issues.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
