<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/094f3e16a9a1276cde39096860496ad8?s=50"></div><header><strong>Canvasing Opinions About Testing</strong> from <string>Joshua Scott Emmons</string> &lt;skia at skia.net&gt;<p>December 13, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; The proposal process for swiftpm is the same as that for Swift; we will submit a proper document later today (if possible) and everyone will be able to submit feedback. It is important to note that our proposal is just as valid as yours, so if you dislike what you read you should feel free to submit your own via the same process. <br></p><p>I haven&#39;t seen this go up on github.com/apple/swift-package-manager yet — maybe I&#39;m looking in the wrong place? But to kick off some conversation, my own naive proposal would be something like:<br></p><p>* By convention, tests live in &quot;./Tests&quot; relative to &quot;Package.swift&quot; (though this location could be explicitly set in the manifest, just like ./Sources)<br></p><p>* Running `swift test` from the &quot;Package.swift&quot; directory would first build the package libraries, then build everything in &quot;./Tests&quot; linked with those libs.<br></p><p>* In the fullness of time, the build system would find all subclasses of `XCTestCase`, running each method of said subclass beginning with `test…`<br></p><p>* Until we have the necessary introspection capabilities, though, we can create a &quot;main.swift&quot; file that creates `XCTMain` with the list of tests to run. Once introspection is up to par, we should be able to delete &quot;main.swift&quot; and everything will just work.<br></p><p>* Subdirectories under &quot;/Tests&quot; could specify different &quot;test suites&quot;. Each would have its own &quot;main.swift&quot;, to aide in organization of tests for large packages. Test suites could be run individually via argument to the command line.<br></p><p>I&#39;m sure there&#39;s tons that&#39;s being overlooked here. Comments?<br></p><p><br>-- <br>Cheers,<br>-jemmons<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Canvasing Opinions About Testing</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 13, 2015 at 09:00:00pm</p></header><div class="content"><p>Do you refer to this proposal?<br>https://github.com/apple/swift-evolution/pull/51/files<br></p><p>On Sun, Dec 13, 2015 at 9:26 PM, Joshua Scott Emmons via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; &gt; The proposal process for swiftpm is the same as that for Swift; we will<br>&gt; submit a proper document later today (if possible) and everyone will be<br>&gt; able to submit feedback. It is important to note that our proposal is just<br>&gt; as valid as yours, so if you dislike what you read you should feel free to<br>&gt; submit your own via the same process.<br>&gt;<br>&gt; I haven&#39;t seen this go up on github.com/apple/swift-package-manager yet —<br>&gt; maybe I&#39;m looking in the wrong place? But to kick off some conversation, my<br>&gt; own naive proposal would be something like:<br>&gt;<br>&gt; * By convention, tests live in &quot;./Tests&quot; relative to &quot;Package.swift&quot;<br>&gt; (though this location could be explicitly set in the manifest, just like<br>&gt; ./Sources)<br>&gt;<br>&gt; * Running `swift test` from the &quot;Package.swift&quot; directory would first<br>&gt; build the package libraries, then build everything in &quot;./Tests&quot; linked with<br>&gt; those libs.<br>&gt;<br>&gt; * In the fullness of time, the build system would find all subclasses of<br>&gt; `XCTestCase`, running each method of said subclass beginning with `test…`<br>&gt;<br>&gt; * Until we have the necessary introspection capabilities, though, we can<br>&gt; create a &quot;main.swift&quot; file that creates `XCTMain` with the list of tests to<br>&gt; run. Once introspection is up to par, we should be able to delete<br>&gt; &quot;main.swift&quot; and everything will just work.<br>&gt;<br>&gt; * Subdirectories under &quot;/Tests&quot; could specify different &quot;test suites&quot;.<br>&gt; Each would have its own &quot;main.swift&quot;, to aide in organization of tests for<br>&gt; large packages. Test suites could be run individually via argument to the<br>&gt; command line.<br>&gt;<br>&gt; I&#39;m sure there&#39;s tons that&#39;s being overlooked here. Comments?<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Cheers,<br>&gt; -jemmons<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151213/b033f0e9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Canvasing Opinions About Testing</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 13, 2015 at 01:00:00pm</p></header><div class="content"><p>As Marc noted, can you take a look at:<br>  https://github.com/apple/swift-evolution/pull/51/files &lt;https://github.com/apple/swift-evolution/pull/51/files&gt;<br>and see if there are specific changes you would propose? It matches most of your proposals, I think.<br></p><p>&gt; On Dec 13, 2015, at 12:26 PM, Joshua Scott Emmons via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The proposal process for swiftpm is the same as that for Swift; we will submit a proper document later today (if possible) and everyone will be able to submit feedback. It is important to note that our proposal is just as valid as yours, so if you dislike what you read you should feel free to submit your own via the same process. <br>&gt; <br>&gt; I haven&#39;t seen this go up on github.com/apple/swift-package-manager yet — maybe I&#39;m looking in the wrong place? But to kick off some conversation, my own naive proposal would be something like:<br>&gt; <br>&gt; * By convention, tests live in &quot;./Tests&quot; relative to &quot;Package.swift&quot; (though this location could be explicitly set in the manifest, just like ./Sources)<br>&gt; <br>&gt; * Running `swift test` from the &quot;Package.swift&quot; directory would first build the package libraries, then build everything in &quot;./Tests&quot; linked with those libs.<br></p><p>Our intention is to build everything together, and not impose any artificial serialization point.<br></p><p>&gt; * In the fullness of time, the build system would find all subclasses of `XCTestCase`, running each method of said subclass beginning with `test…`<br>&gt; <br>&gt; * Until we have the necessary introspection capabilities, though, we can create a &quot;main.swift&quot; file that creates `XCTMain` with the list of tests to run. Once introspection is up to par, we should be able to delete &quot;main.swift&quot; and everything will just work.<br></p><p>As far as running the tests goes, for now the plan is to just use XCTest&#39;s facilities for running all the tests in a &quot;test target&quot; (bundle on OS X, executable on Linux). Evolving those facilities should be done under the auspices of XCTest.<br></p><p> - Daniel<br></p><p>&gt; * Subdirectories under &quot;/Tests&quot; could specify different &quot;test suites&quot;. Each would have its own &quot;main.swift&quot;, to aide in organization of tests for large packages. Test suites could be run individually via argument to the command line.<br>&gt; <br>&gt; I&#39;m sure there&#39;s tons that&#39;s being overlooked here. Comments?<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Cheers,<br>&gt; -jemmons<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151213/6d626c4e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
