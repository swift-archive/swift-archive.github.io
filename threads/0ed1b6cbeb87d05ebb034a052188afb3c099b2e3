<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 12, 2016 at 10:00:00pm</p></header><div class="content"><p>a block of nested &#39;if else’  is not really nice, i think: <br>	<br>	• if condition 1 {<br>	• statements to execute if condition 1 is true<br>	• } else if condition 2 {<br>	• statements to execute if condition 2 is true<br>	• } else {<br>	• statements to execute if both conditions are false<br>	• }<br></p><p>what I currently do to prevent this:<br></p><p> switch true<br> { <br>case  film == 2010: <br>         itsFullOfStars(monolith)<br>     <br>case terriblyWrongPresident():<br>        initiateNewElections()<br></p><p>case b &gt; c:<br>        c = b<br></p><p>case d &gt; c: <br>        c = d<br></p><p>default:<br>       break    // or something else to do, if all other conditions are fase<br>}<br></p><p><br>This works perfectly well, looks good too, I think, but is it right thing to do it this way,<br>as in principle &#39;switch’  is perhaps more intended to evaluate variables?<br></p><p>Python has its “elif”  keyword… <br></p><p>So what about, an ‘ifs’  statement group in Swift:  <br></p><p><br>ifcases      // or another keyword, perhaps                   <br>{<br> case a &gt; b: <br>    b = a<br>case  c &lt; d:<br>   b = c<br>} <br>without  fall-through option. <br>perhaps also without  default<br></p><p><br>What do you think?<br></p><p>TedvG<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27ca9066ad05bd8aa9ec366115f3cd38?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>Kurt Werle</string> &lt;kurt at circlew.org&gt;<p>March 12, 2016 at 03:00:00pm</p></header><div class="content"><p>let x = 1<br>let y = 2<br>let z = 3<br></p><p>let condition1 = x &gt; y<br>let condition2 = z &gt; x<br></p><p>switch (condition1, condition2) { // Treat your conditions as peers<br>case (true, _): // true &amp; whatever<br>    break<br>case (false, true): // false, true<br>    break<br>case (false, false): // false, false<br>    break<br>// no default needed - we covered all the cases<br>}<br></p><p><br>On Sat, Mar 12, 2016 at 1:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; a block of nested &#39;if else’  is not really nice, i think:<br>&gt;<br>&gt;         • if condition 1 {<br>&gt;         • statements to execute if condition 1 is true<br>&gt;         • } else if condition 2 {<br>&gt;         • statements to execute if condition 2 is true<br>&gt;         • } else {<br>&gt;         • statements to execute if both conditions are false<br>&gt;         • }<br>&gt;<br>&gt; what I currently do to prevent this:<br>&gt;<br>&gt;  switch true<br>&gt;  {<br>&gt; case  film == 2010:<br>&gt;          itsFullOfStars(monolith)<br>&gt;<br>&gt; case terriblyWrongPresident():<br>&gt;         initiateNewElections()<br>&gt;<br>&gt; case b &gt; c:<br>&gt;         c = b<br>&gt;<br>&gt; case d &gt; c:<br>&gt;         c = d<br>&gt;<br>&gt; default:<br>&gt;        break    // or something else to do, if all other conditions are<br>&gt; fase<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This works perfectly well, looks good too, I think, but is it right thing<br>&gt; to do it this way,<br>&gt; as in principle &#39;switch’  is perhaps more intended to evaluate variables?<br>&gt;<br>&gt; Python has its “elif”  keyword…<br>&gt;<br>&gt; So what about, an ‘ifs’  statement group in Swift:<br>&gt;<br>&gt;<br>&gt; ifcases      // or another keyword, perhaps<br>&gt; {<br>&gt;  case a &gt; b:<br>&gt;     b = a<br>&gt; case  c &lt; d:<br>&gt;    b = c<br>&gt; }<br>&gt; without  fall-through option.<br>&gt; perhaps also without  default<br>&gt;<br>&gt;<br>&gt; What do you think?<br>&gt;<br>&gt; TedvG<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>kurt at CircleW.org<br>http://www.CircleW.org/kurt/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/ca1492be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>March 12, 2016 at 03:00:00pm</p></header><div class="content"><p>Very nice!<br></p><p>-Kenny<br></p><p><br>&gt; On Mar 12, 2016, at 3:20 PM, Kurt Werle via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; let x = 1<br>&gt; let y = 2<br>&gt; let z = 3<br>&gt; <br>&gt; let condition1 = x &gt; y<br>&gt; let condition2 = z &gt; x<br>&gt; <br>&gt; switch (condition1, condition2) { // Treat your conditions as peers<br>&gt; case (true, _): // true &amp; whatever<br>&gt;     break<br>&gt; case (false, true): // false, true<br>&gt;     break<br>&gt; case (false, false): // false, false<br>&gt;     break<br>&gt; // no default needed - we covered all the cases<br>&gt; }<br>&gt; <br>&gt; <br>&gt; On Sat, Mar 12, 2016 at 1:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; a block of nested &#39;if else’  is not really nice, i think:<br>&gt; <br>&gt;         • if condition 1 {<br>&gt;         • statements to execute if condition 1 is true<br>&gt;         • } else if condition 2 {<br>&gt;         • statements to execute if condition 2 is true<br>&gt;         • } else {<br>&gt;         • statements to execute if both conditions are false<br>&gt;         • }<br>&gt; <br>&gt; what I currently do to prevent this:<br>&gt; <br>&gt;  switch true<br>&gt;  {<br>&gt; case  film == 2010:<br>&gt;          itsFullOfStars(monolith)<br>&gt; <br>&gt; case terriblyWrongPresident():<br>&gt;         initiateNewElections()<br>&gt; <br>&gt; case b &gt; c:<br>&gt;         c = b<br>&gt; <br>&gt; case d &gt; c:<br>&gt;         c = d<br>&gt; <br>&gt; default:<br>&gt;        break    // or something else to do, if all other conditions are fase<br>&gt; }<br>&gt; <br>&gt; <br>&gt; This works perfectly well, looks good too, I think, but is it right thing to do it this way,<br>&gt; as in principle &#39;switch’  is perhaps more intended to evaluate variables?<br>&gt; <br>&gt; Python has its “elif”  keyword…<br>&gt; <br>&gt; So what about, an ‘ifs’  statement group in Swift:<br>&gt; <br>&gt; <br>&gt; ifcases      // or another keyword, perhaps<br>&gt; {<br>&gt;  case a &gt; b:<br>&gt;     b = a<br>&gt; case  c &lt; d:<br>&gt;    b = c<br>&gt; }<br>&gt; without  fall-through option.<br>&gt; perhaps also without  default<br>&gt; <br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; kurt at CircleW.org<br>&gt; http://www.CircleW.org/kurt/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 14, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 12, 2016, at 3:20 PM, Kurt Werle via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; let x = 1<br>&gt; let y = 2<br>&gt; let z = 3<br>&gt; <br>&gt; let condition1 = x &gt; y<br>&gt; let condition2 = z &gt; x<br>&gt; <br>&gt; switch (condition1, condition2) { // Treat your conditions as peers<br>&gt; case (true, _): // true &amp; whatever<br>&gt;     break<br>&gt; case (false, true): // false, true<br>&gt;     break<br>&gt; case (false, false): // false, false<br>&gt;     break<br>&gt; // no default needed - we covered all the cases<br>&gt; }<br>&gt; <br></p><p>You can also use tuple labels here to aid readability:<br></p><p>switch (x_y: x &gt; y, z_x: z &gt; x) {<br>case (x_y: true, z_x: _):<br>  ...<br>}<br></p><p>-Joe<br></p><p>&gt; <br>&gt; On Sat, Mar 12, 2016 at 1:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; a block of nested &#39;if else’  is not really nice, i think:<br>&gt; <br>&gt;         • if condition 1 {<br>&gt;         • statements to execute if condition 1 is true<br>&gt;         • } else if condition 2 {<br>&gt;         • statements to execute if condition 2 is true<br>&gt;         • } else {<br>&gt;         • statements to execute if both conditions are false<br>&gt;         • }<br>&gt; <br>&gt; what I currently do to prevent this:<br>&gt; <br>&gt;  switch true<br>&gt;  {<br>&gt; case  film == 2010:<br>&gt;          itsFullOfStars(monolith)<br>&gt; <br>&gt; case terriblyWrongPresident():<br>&gt;         initiateNewElections()<br>&gt; <br>&gt; case b &gt; c:<br>&gt;         c = b<br>&gt; <br>&gt; case d &gt; c:<br>&gt;         c = d<br>&gt; <br>&gt; default:<br>&gt;        break    // or something else to do, if all other conditions are fase<br>&gt; }<br>&gt; <br>&gt; <br>&gt; This works perfectly well, looks good too, I think, but is it right thing to do it this way,<br>&gt; as in principle &#39;switch’  is perhaps more intended to evaluate variables?<br>&gt; <br>&gt; Python has its “elif”  keyword…<br>&gt; <br>&gt; So what about, an ‘ifs’  statement group in Swift:<br>&gt; <br>&gt; <br>&gt; ifcases      // or another keyword, perhaps<br>&gt; {<br>&gt;  case a &gt; b:<br>&gt;     b = a<br>&gt; case  c &lt; d:<br>&gt;    b = c<br>&gt; }<br>&gt; without  fall-through option.<br>&gt; perhaps also without  default<br>&gt; <br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; kurt at CircleW.org<br>&gt; http://www.CircleW.org/kurt/ &lt;http://www.circlew.org/kurt/&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/b3bc9ef7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27ca9066ad05bd8aa9ec366115f3cd38?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>Kurt Werle</string> &lt;kurt at circlew.org&gt;<p>March 14, 2016 at 10:00:00am</p></header><div class="content"><p>Oooh - didn&#39;t know about that - very nice.<br></p><p>Thanks,<br>Kurt<br></p><p>On Mon, Mar 14, 2016 at 10:31 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Mar 12, 2016, at 3:20 PM, Kurt Werle via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; let x = 1<br>&gt; let y = 2<br>&gt; let z = 3<br>&gt;<br>&gt; let condition1 = x &gt; y<br>&gt; let condition2 = z &gt; x<br>&gt;<br>&gt; switch (condition1, condition2) { // Treat your conditions as peers<br>&gt; case (true, _): // true &amp; whatever<br>&gt;     break<br>&gt; case (false, true): // false, true<br>&gt;     break<br>&gt; case (false, false): // false, false<br>&gt;     break<br>&gt; // no default needed - we covered all the cases<br>&gt; }<br>&gt;<br>&gt;<br>&gt; You can also use tuple labels here to aid readability:<br>&gt;<br>&gt; switch (x_y: x &gt; y, z_x: z &gt; x) {<br>&gt; case (x_y: true, z_x: _):<br>&gt;   ...<br>&gt; }<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>&gt; On Sat, Mar 12, 2016 at 1:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; a block of nested &#39;if else’  is not really nice, i think:<br>&gt;&gt;<br>&gt;&gt;         • if condition 1 {<br>&gt;&gt;         • statements to execute if condition 1 is true<br>&gt;&gt;         • } else if condition 2 {<br>&gt;&gt;         • statements to execute if condition 2 is true<br>&gt;&gt;         • } else {<br>&gt;&gt;         • statements to execute if both conditions are false<br>&gt;&gt;         • }<br>&gt;&gt;<br>&gt;&gt; what I currently do to prevent this:<br>&gt;&gt;<br>&gt;&gt;  switch true<br>&gt;&gt;  {<br>&gt;&gt; case  film == 2010:<br>&gt;&gt;          itsFullOfStars(monolith)<br>&gt;&gt;<br>&gt;&gt; case terriblyWrongPresident():<br>&gt;&gt;         initiateNewElections()<br>&gt;&gt;<br>&gt;&gt; case b &gt; c:<br>&gt;&gt;         c = b<br>&gt;&gt;<br>&gt;&gt; case d &gt; c:<br>&gt;&gt;         c = d<br>&gt;&gt;<br>&gt;&gt; default:<br>&gt;&gt;        break    // or something else to do, if all other conditions are<br>&gt;&gt; fase<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This works perfectly well, looks good too, I think, but is it right thing<br>&gt;&gt; to do it this way,<br>&gt;&gt; as in principle &#39;switch’  is perhaps more intended to evaluate variables?<br>&gt;&gt;<br>&gt;&gt; Python has its “elif”  keyword…<br>&gt;&gt;<br>&gt;&gt; So what about, an ‘ifs’  statement group in Swift:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ifcases      // or another keyword, perhaps<br>&gt;&gt; {<br>&gt;&gt;  case a &gt; b:<br>&gt;&gt;     b = a<br>&gt;&gt; case  c &lt; d:<br>&gt;&gt;    b = c<br>&gt;&gt; }<br>&gt;&gt; without  fall-through option.<br>&gt;&gt; perhaps also without  default<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What do you think?<br>&gt;&gt;<br>&gt;&gt; TedvG<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; kurt at CircleW.org &lt;kurt at circlew.org&gt;<br>&gt; http://www.CircleW.org/kurt/ &lt;http://www.circlew.org/kurt/&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>kurt at CircleW.org<br>http://www.CircleW.org/kurt/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/221256a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 14, 2016 at 07:00:00pm</p></header><div class="content"><p>Unexpected ways :o) <br>All very nice and well but readable?<br>I was looking a new language element<br>that would be similar to<br>   Switch true ….<br>but then limited for cases<br>which are logical expressions only.  <br>Ok, Perhaps it is not that important.<br>I will forget it and will continue<br>to use “switch true”  case &lt;logical expression&gt;:  etc.<br>sorry I brought it forward.<br>TedvG<br></p><p><br>On 14.03.2016, at 18:52, Kurt Werle &lt;kurt at circlew.org&gt; wrote:<br>&gt; <br>&gt; Oooh - didn&#39;t know about that - very nice.<br>&gt; <br>&gt; Thanks,<br>&gt; Kurt<br>&gt; <br>&gt; On Mon, Mar 14, 2016 at 10:31 AM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Mar 12, 2016, at 3:20 PM, Kurt Werle via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; let x = 1<br>&gt;&gt; let y = 2<br>&gt;&gt; let z = 3<br>&gt;&gt; <br>&gt;&gt; let condition1 = x &gt; y<br>&gt;&gt; let condition2 = z &gt; x<br>&gt;&gt; <br>&gt;&gt; switch (condition1, condition2) { // Treat your conditions as peers<br>&gt;&gt; case (true, _): // true &amp; whatever<br>&gt;&gt;     break<br>&gt;&gt; case (false, true): // false, true<br>&gt;&gt;     break<br>&gt;&gt; case (false, false): // false, false<br>&gt;&gt;     break<br>&gt;&gt; // no default needed - we covered all the cases<br>&gt;&gt; }<br>&gt;&gt; <br>&gt; <br>&gt; You can also use tuple labels here to aid readability:<br>&gt; <br>&gt; switch (x_y: x &gt; y, z_x: z &gt; x) {<br>&gt; case (x_y: true, z_x: _):<br>&gt;   ...<br>&gt; }<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Mar 12, 2016 at 1:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; a block of nested &#39;if else’  is not really nice, i think:<br>&gt;&gt; <br>&gt;&gt;         • if condition 1 {<br>&gt;&gt;         • statements to execute if condition 1 is true<br>&gt;&gt;         • } else if condition 2 {<br>&gt;&gt;         • statements to execute if condition 2 is true<br>&gt;&gt;         • } else {<br>&gt;&gt;         • statements to execute if both conditions are false<br>&gt;&gt;         • }<br>&gt;&gt; <br>&gt;&gt; what I currently do to prevent this:<br>&gt;&gt; <br>&gt;&gt;  switch true<br>&gt;&gt;  {<br>&gt;&gt; case  film == 2010:<br>&gt;&gt;          itsFullOfStars(monolith)<br>&gt;&gt; <br>&gt;&gt; case terriblyWrongPresident():<br>&gt;&gt;         initiateNewElections()<br>&gt;&gt; <br>&gt;&gt; case b &gt; c:<br>&gt;&gt;         c = b<br>&gt;&gt; <br>&gt;&gt; case d &gt; c:<br>&gt;&gt;         c = d<br>&gt;&gt; <br>&gt;&gt; default:<br>&gt;&gt;        break    // or something else to do, if all other conditions are fase<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This works perfectly well, looks good too, I think, but is it right thing to do it this way,<br>&gt;&gt; as in principle &#39;switch’  is perhaps more intended to evaluate variables?<br>&gt;&gt; <br>&gt;&gt; Python has its “elif”  keyword…<br>&gt;&gt; <br>&gt;&gt; So what about, an ‘ifs’  statement group in Swift:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ifcases      // or another keyword, perhaps<br>&gt;&gt; {<br>&gt;&gt;  case a &gt; b:<br>&gt;&gt;     b = a<br>&gt;&gt; case  c &lt; d:<br>&gt;&gt;    b = c<br>&gt;&gt; }<br>&gt;&gt; without  fall-through option.<br>&gt;&gt; perhaps also without  default<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt;&gt; <br>&gt;&gt; TedvG<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; kurt at CircleW.org &lt;mailto:kurt at circlew.org&gt;<br>&gt;&gt; http://www.CircleW.org/kurt/ &lt;http://www.circlew.org/kurt/&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; kurt at CircleW.org<br>&gt; http://www.CircleW.org/kurt/ &lt;http://www.circlew.org/kurt/&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/ee44b4a6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 11:25 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt; <br>&gt; Unexpected ways :o) <br>&gt; All very nice and well but readable?<br>&gt; I was looking a new language element<br>&gt; that would be similar to<br>&gt;    Switch true ….<br>&gt; but then limited for cases<br>&gt; which are logical expressions only.  <br>&gt; Ok, Perhaps it is not that important.<br>&gt; I will forget it and will continue<br>&gt; to use “switch true”  case &lt;logical expression&gt;:  etc.<br>&gt; sorry I brought it forward.<br>&gt; TedvG<br></p><p>If the &quot;true&quot; bothers you, you can also switch over &quot;nothing&quot; and use where clauses:<br></p><p>switch () {<br>case () where cond1: ...<br>case () where cond2: ...<br>}<br></p><p>It might be interesting to consider a shorthand:<br></p><p>switch {<br>where cond1: ...<br>where cond2: ...<br>}<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 14, 2016 at 07:00:00pm</p></header><div class="content"><p>.. or maybe just leave out  the switch operand like so:<br></p><p>     switch<br>    {<br>          case if  a &gt; b:<br>                   c = 1234<br></p><p>          case c == d: <br>                  a = b<br></p><p>          default:<br>                 doSomething()<br>    }<br></p><p>?<br></p><p>TedvG<br></p><p><br></p><p>&gt; On 14.03.2016, at 19:27, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 14, 2016, at 11:25 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Unexpected ways :o) <br>&gt;&gt; All very nice and well but readable?<br>&gt;&gt; I was looking a new language element<br>&gt;&gt; that would be similar to<br>&gt;&gt;   Switch true ….<br>&gt;&gt; but then limited for cases<br>&gt;&gt; which are logical expressions only.  <br>&gt;&gt; Ok, Perhaps it is not that important.<br>&gt;&gt; I will forget it and will continue<br>&gt;&gt; to use “switch true”  case &lt;logical expression&gt;:  etc.<br>&gt;&gt; sorry I brought it forward.<br>&gt;&gt; TedvG<br>&gt; <br>&gt; If the &quot;true&quot; bothers you, you can also switch over &quot;nothing&quot; and use where clauses:<br>&gt; <br>&gt; switch () {<br>&gt; case () where cond1: ...<br>&gt; case () where cond2: ...<br>&gt; }<br>&gt; <br>&gt; It might be interesting to consider a shorthand:<br>&gt; <br>&gt; switch {<br>&gt; where cond1: ...<br>&gt; where cond2: ...<br>&gt; }<br>&gt; <br>&gt; -Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Alternative For Nested If Repetiion</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>March 14, 2016 at 12:00:00pm</p></header><div class="content"><p>I don’t see how this is significantly different from<br></p><p>if a &gt; b {<br>    c = 1234<br>} else if c == d {<br>    a = b<br>} else {<br>    doSomething()<br>}<br></p><p>If you put them side by side, it’s pretty much equivalent in size and shape, except for a few braces.<br></p><p>-Kenny<br></p><p><br>&gt; On Mar 14, 2016, at 11:41 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; .. or maybe just leave out  the switch operand like so:<br>&gt; <br>&gt;     switch<br>&gt;    {<br>&gt;          case if  a &gt; b:<br>&gt;                   c = 1234<br>&gt; <br>&gt;          case c == d: <br>&gt;                  a = b<br>&gt; <br>&gt;          default:<br>&gt;                 doSomething()<br>&gt;    }<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 14.03.2016, at 19:27, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 14, 2016, at 11:25 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unexpected ways :o) <br>&gt;&gt;&gt; All very nice and well but readable?<br>&gt;&gt;&gt; I was looking a new language element<br>&gt;&gt;&gt; that would be similar to<br>&gt;&gt;&gt;  Switch true ….<br>&gt;&gt;&gt; but then limited for cases<br>&gt;&gt;&gt; which are logical expressions only.  <br>&gt;&gt;&gt; Ok, Perhaps it is not that important.<br>&gt;&gt;&gt; I will forget it and will continue<br>&gt;&gt;&gt; to use “switch true”  case &lt;logical expression&gt;:  etc.<br>&gt;&gt;&gt; sorry I brought it forward.<br>&gt;&gt;&gt; TedvG<br>&gt;&gt; <br>&gt;&gt; If the &quot;true&quot; bothers you, you can also switch over &quot;nothing&quot; and use where clauses:<br>&gt;&gt; <br>&gt;&gt; switch () {<br>&gt;&gt; case () where cond1: ...<br>&gt;&gt; case () where cond2: ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It might be interesting to consider a shorthand:<br>&gt;&gt; <br>&gt;&gt; switch {<br>&gt;&gt; where cond1: ...<br>&gt;&gt; where cond2: ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
