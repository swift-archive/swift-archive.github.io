<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>unums in Swift?</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Unums sound very interesting (http://ubiquity.acm.org/article.cfm?id=2913029).  I&#39;m wondering if anyone working on numerics in Swift has considered an implementation in the standard library.<br></p><p>Matthew<br></p><p>Sent from my iPad<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>unums in Swift?</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>May  9, 2016 at 11:00:00am</p></header><div class="content"><p>What do you find interesting about them?<br></p><p>I haven’t spent more than a few hours reading about them (and the definition of “unum” seems to be a moving target, so I’m not sure that it would have been useful to study them further), but my rough thoughts are:<br></p><p>- SORN are a cute alternative to intervals, but only feasible with *extremely* low precision formats.<br></p><p>- For very low precision needs, fixed point or indexed numbers or lossy compression seem like better options for most cases.<br></p><p>- For “typical” precision and dynamic range needs, hardware floating-point (possibly with a compressed storage format) is just as useful and orders of magnitude faster.<br></p><p>- For limited dynamic range applications, fixed-point formats seem like a much better option (there’s a good opportunity here for library work to make using fixed-point arithmetic less error prone).<br></p><p>- For very high dynamic range applications, fixed-point logarithms or level-index numbers seem like a better option.<br></p><p>Unums are a cute way to mostly unify these ideas into a single type, but that doesn’t actually seem like a good idea to me.  This is very much going to be a jack-of-all-trades, master-of-none situation.<br></p><p>That said, they are an *interesting* idea, so I wouldn’t discourage anyone from investigating them.<br></p><p>– Steve<br></p><p>&gt; On May 7, 2016, at 3:08 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Unums sound very interesting (http://ubiquity.acm.org/article.cfm?id=2913029).  I&#39;m wondering if anyone working on numerics in Swift has considered an implementation in the standard library.<br>&gt; <br>&gt; Matthew<br>&gt; <br>&gt; Sent from my iPad<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>unums in Swift?</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  9, 2016 at 11:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 9, 2016, at 10:44 AM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt; <br>&gt; What do you find interesting about them?<br></p><p>As an app developer I&#39;m not even remotely a numerics expert so my understanding is probably superficial.  The link I posted gave me the impression that they would avoid the errors that accumulate in floating point arithmetic.<br></p><p>&gt; <br>&gt; I haven’t spent more than a few hours reading about them (and the definition of “unum” seems to be a moving target, so I’m not sure that it would have been useful to study them further), but my rough thoughts are:<br>&gt; <br>&gt; - SORN are a cute alternative to intervals, but only feasible with *extremely* low precision formats.<br>&gt; <br>&gt; - For very low precision needs, fixed point or indexed numbers or lossy compression seem like better options for most cases.<br>&gt; <br>&gt; - For “typical” precision and dynamic range needs, hardware floating-point (possibly with a compressed storage format) is just as useful and orders of magnitude faster.<br>&gt; <br>&gt; - For limited dynamic range applications, fixed-point formats seem like a much better option (there’s a good opportunity here for library work to make using fixed-point arithmetic less error prone).<br>&gt; <br>&gt; - For very high dynamic range applications, fixed-point logarithms or level-index numbers seem like a better option.<br>&gt; <br>&gt; Unums are a cute way to mostly unify these ideas into a single type, but that doesn’t actually seem like a good idea to me.  This is very much going to be a jack-of-all-trades, master-of-none situation.<br></p><p>Makes sense.  Thanks for sharing your thoughts!<br></p><p>&gt; <br>&gt; That said, they are an *interesting* idea, so I wouldn’t discourage anyone from investigating them.<br>&gt; <br>&gt; – Steve<br>&gt; <br>&gt;&gt; On May 7, 2016, at 3:08 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Unums sound very interesting (http://ubiquity.acm.org/article.cfm?id=2913029).  I&#39;m wondering if anyone working on numerics in Swift has considered an implementation in the standard library.<br>&gt;&gt; <br>&gt;&gt; Matthew<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
