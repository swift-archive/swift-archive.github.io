<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>SwiftPM Xcode Integration</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 19, 2016 at 09:00:00am</p></header><div class="content"><p>One of our goals for the Swift Package Manager is excellent and delightful integration with Xcode.<br></p><p>To this end we are going to start work on initial integration by making SwiftPM able to generate Xcode project files. This is not the long-term design we want for the Xcode integration, but it is a concrete step we can take now which will allow Xcode users to adopt Swift packages and use them in their products. We expect this to significantly increase the adoption of SwiftPM and give us more feedback and experience, which will inform the eventual full integration design. This will also enable Swift packages to be built for Apple&#39;s iOS, Apple TV, and watchOS platforms, in addition to OS X.<br></p><p>The code for this will be written in the open as part of the SwiftPM open source project and we will begin the feature presently.<br></p><p>We would like to emphasize again that proper and tight integration with Xcode is our long-term goal, but in the near-term we consider this a good intermediary solution—making real Swift package use possible.<br></p><p>Our design for this feature is as follows:<br></p><p>* Generate a single xcodeproj from the command line for a Package.swift<br>* The xcodeproj will contain targets for all packages and their modules<br>* Require the user to add this xcodeproj to their main project and link the dependency by hand.<br></p><p>In addition to allowing users to adopt Swift packages in their Xcode projects through this mechanism, this will allow package authors to use Xcode to work on their packages.<br></p><p>We are also considering a feature that auto-regenerates the xcodeproj if the user changes their Package.swift or edits any of their package sources, though parts of that feature would be built in Xcode and not in the open source project. We are aware of the frustrating aspects of other systems that generate Xcode projects and will be looking at ways to mitigate the problems that come with this solution.<br></p><p>We&#39;re looking forward to your feedback on this intermediary solution as it evolves!<br></p><p>Max<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>February 19, 2016 at 10:00:00am</p></header><div class="content"><p>It&#39;s nice to see progress on the package manager. I manually maintain an<br>xcodeproj for the SwiftGL project. Here&#39;s a couple things in there which<br>are off the beaten path.<br></p><p>I use GLFW3 for the demos. This is a simple C API for which I made a<br>modulemap package. Two actually, because the linked libraries differ on<br>Linux and Mac. So I end up using this:<br></p><p>#if os(Linux)<br>    package.dependencies.append(<br>        Package.Dependency.Package(url: &quot;<br>https://github.com/AE9RB/SwiftCGLFW3Linux.git&quot;, majorVersion: 1)<br>    )<br>#else<br>    package.dependencies.append(<br>        Package.Dependency.Package(url: &quot;<br>https://github.com/AE9RB/SwiftCGLFW3.git&quot;, majorVersion: 1)<br>    )<br>#endif<br></p><p>This works just fine from the pm build. But I have to add the /usr/lib and<br>/usr/include paths to XCode manually.<br></p><p>So that&#39;s it I think. Conditionals in Package.swift, and paths for<br>modulemaps. Hopefully these can be supported in the xcodeproj generator.<br></p><p>It&#39;s not clear if we will have to combine all the swift package<br>dependencies manually in Xcode. That would be unfortunate. I see some web<br>server libraries coming up and these tend to grow to dozens of dependencies.<br></p><p>-david  https://github.com/AE9RB/SwiftGL<br></p><p><br>On Fri, Feb 19, 2016 at 9:55 AM, Max Howell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; One of our goals for the Swift Package Manager is excellent and delightful<br>&gt; integration with Xcode.<br>&gt;<br>&gt; To this end we are going to start work on initial integration by making<br>&gt; SwiftPM able to generate Xcode project files. This is not the long-term<br>&gt; design we want for the Xcode integration, but it is a concrete step we can<br>&gt; take now which will allow Xcode users to adopt Swift packages and use them<br>&gt; in their products. We expect this to significantly increase the adoption of<br>&gt; SwiftPM and give us more feedback and experience, which will inform the<br>&gt; eventual full integration design. This will also enable Swift packages to<br>&gt; be built for Apple&#39;s iOS, Apple TV, and watchOS platforms, in addition to<br>&gt; OS X.<br>&gt;<br>&gt; The code for this will be written in the open as part of the SwiftPM open<br>&gt; source project and we will begin the feature presently.<br>&gt;<br>&gt; We would like to emphasize again that proper and tight integration with<br>&gt; Xcode is our long-term goal, but in the near-term we consider this a good<br>&gt; intermediary solution—making real Swift package use possible.<br>&gt;<br>&gt; Our design for this feature is as follows:<br>&gt;<br>&gt; * Generate a single xcodeproj from the command line for a Package.swift<br>&gt; * The xcodeproj will contain targets for all packages and their modules<br>&gt; * Require the user to add this xcodeproj to their main project and link<br>&gt; the dependency by hand.<br>&gt;<br>&gt; In addition to allowing users to adopt Swift packages in their Xcode<br>&gt; projects through this mechanism, this will allow package authors to use<br>&gt; Xcode to work on their packages.<br>&gt;<br>&gt; We are also considering a feature that auto-regenerates the xcodeproj if<br>&gt; the user changes their Package.swift or edits any of their package sources,<br>&gt; though parts of that feature would be built in Xcode and not in the open<br>&gt; source project. We are aware of the frustrating aspects of other systems<br>&gt; that generate Xcode projects and will be looking at ways to mitigate the<br>&gt; problems that come with this solution.<br>&gt;<br>&gt; We&#39;re looking forward to your feedback on this intermediary solution as it<br>&gt; evolves!<br>&gt;<br>&gt; Max<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160219/f13d69cb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>February 19, 2016 at 01:00:00pm</p></header><div class="content"><p>For Xcode builds, if I install a C dependency via Homebrew, then include it<br>with a module map, will it be copied into the application bundle when<br>archiving—say, for the App Store?<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; |<br>jeffkelley.org<br></p><p>On Fri, Feb 19, 2016 at 12:55 PM, Max Howell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; One of our goals for the Swift Package Manager is excellent and delightful<br>&gt; integration with Xcode.<br>&gt;<br>&gt; To this end we are going to start work on initial integration by making<br>&gt; SwiftPM able to generate Xcode project files. This is not the long-term<br>&gt; design we want for the Xcode integration, but it is a concrete step we can<br>&gt; take now which will allow Xcode users to adopt Swift packages and use them<br>&gt; in their products. We expect this to significantly increase the adoption of<br>&gt; SwiftPM and give us more feedback and experience, which will inform the<br>&gt; eventual full integration design. This will also enable Swift packages to<br>&gt; be built for Apple&#39;s iOS, Apple TV, and watchOS platforms, in addition to<br>&gt; OS X.<br>&gt;<br>&gt; The code for this will be written in the open as part of the SwiftPM open<br>&gt; source project and we will begin the feature presently.<br>&gt;<br>&gt; We would like to emphasize again that proper and tight integration with<br>&gt; Xcode is our long-term goal, but in the near-term we consider this a good<br>&gt; intermediary solution—making real Swift package use possible.<br>&gt;<br>&gt; Our design for this feature is as follows:<br>&gt;<br>&gt; * Generate a single xcodeproj from the command line for a Package.swift<br>&gt; * The xcodeproj will contain targets for all packages and their modules<br>&gt; * Require the user to add this xcodeproj to their main project and link<br>&gt; the dependency by hand.<br>&gt;<br>&gt; In addition to allowing users to adopt Swift packages in their Xcode<br>&gt; projects through this mechanism, this will allow package authors to use<br>&gt; Xcode to work on their packages.<br>&gt;<br>&gt; We are also considering a feature that auto-regenerates the xcodeproj if<br>&gt; the user changes their Package.swift or edits any of their package sources,<br>&gt; though parts of that feature would be built in Xcode and not in the open<br>&gt; source project. We are aware of the frustrating aspects of other systems<br>&gt; that generate Xcode projects and will be looking at ways to mitigate the<br>&gt; problems that come with this solution.<br>&gt;<br>&gt; We&#39;re looking forward to your feedback on this intermediary solution as it<br>&gt; evolves!<br>&gt;<br>&gt; Max<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160219/fd6df828/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; For Xcode builds, if I install a C dependency via Homebrew, then include it with a module map, will it be copied into the application bundle when archiving—say, for the App Store?<br></p><p>We don’t initially intend to support module map packages with this integration.<br></p><p>Not that we never will, but this part of the integration is not yet designed. We’ll revisit this question once the first iteration is complete.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>February 19, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>What kind of target will be made in the Xcode project? Specifically, will<br>it be a static library or a framework? In my experience, frameworks play<br>better with sourcekit and generally require less configuration in Xcode.<br></p><p>The folks behind Zewo made a tool to help us manage our large dependency<br>graph that generates complete xcode projects with subprojects and targets<br>(it also does a few other things, but those aren&#39;t important). As a side<br>effect it also supports modulemaps with no extra configuration. It<br>generates frameworks (not static libraries) for the reasons described<br>earlier, but I&#39;m sure it would be trivial to change it to work the other<br>way.<br></p><p>The tool can be found here: https://github.com/zewo/zewo-dev. Unfortunately<br>it had to be made in ruby because of the xcodeproj gem but I believe it<br>could still be a useful reference.<br></p><p>Dan<br>On Fri, Feb 19, 2016 at 11:21 AM Max Howell via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; &gt; For Xcode builds, if I install a C dependency via Homebrew, then include<br>&gt; it with a module map, will it be copied into the application bundle when<br>&gt; archiving—say, for the App Store?<br>&gt;<br>&gt; We don’t initially intend to support module map packages with this<br>&gt; integration.<br>&gt;<br>&gt; Not that we never will, but this part of the integration is not yet<br>&gt; designed. We’ll revisit this question once the first iteration is complete.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160219/932d349e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 19, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; What kind of target will be made in the Xcode project? Specifically, will it be a static library or a framework? <br></p><p>Frameworks.<br></p><p>&gt; The folks behind Zewo made a tool to help us manage our large dependency graph that generates complete xcode projects with subprojects and targets (it also does a few other things, but those aren&#39;t important). As a side effect it also supports modulemaps with no extra configuration. It generates frameworks (not static libraries) for the reasons described earlier, but I&#39;m sure it would be trivial to change it to work the other way.<br>&gt; <br>&gt; The tool can be found here: https://github.com/zewo/zewo-dev &lt;https://github.com/zewo/zewo-dev&gt;. Unfortunately it had to be made in ruby because of the xcodeproj gem but I believe it could still be a useful reference.<br></p><p>Thanks for the link, a very interesting project.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160219/9ba1e084/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February 20, 2016 at 10:00:00am</p></header><div class="content"><p>Excellent news!<br></p><p>At the moment I have a workflow that uses xcconfig files and XCake:<br>    https://github.com/jcampbell05/xcake<br>XCake sounds similar to zewo, by the sounds of it, I think its author is<br>active on this list.<br></p><p>The main reason for my workflow is because it makes it much easier to make<br>new modules, copy configuration, and resolve merge conflicts.<br></p><p>In that context, I have a few questions:<br> * Is it intended that the generated Xcode project will be checked-in?<br> * Will the project duplicate information that SwiftPM specifies? file<br>references? configuration?<br> * Will the rebuild clobber project configuration that SwiftPM can&#39;t<br>specify? This is probably fine. Maybe Xcode should make configuration<br>read-only in generated projects.<br></p><p>On Saturday, 20 February 2016, Max Howell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What kind of target will be made in the Xcode project? Specifically, will<br>&gt; it be a static library or a framework?<br>&gt;<br>&gt;<br>&gt; Frameworks.<br>&gt;<br>&gt; The folks behind Zewo made a tool to help us manage our large dependency<br>&gt; graph that generates complete xcode projects with subprojects and targets<br>&gt; (it also does a few other things, but those aren&#39;t important). As a side<br>&gt; effect it also supports modulemaps with no extra configuration. It<br>&gt; generates frameworks (not static libraries) for the reasons described<br>&gt; earlier, but I&#39;m sure it would be trivial to change it to work the other<br>&gt; way.<br>&gt;<br>&gt; The tool can be found here: https://github.com/zewo/zewo-dev.<br>&gt; Unfortunately it had to be made in ruby because of the xcodeproj gem but I<br>&gt; believe it could still be a useful reference.<br>&gt;<br>&gt;<br>&gt; Thanks for the link, a very interesting project.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160220/ad26f725/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 19, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; In that context, I have a few questions:<br>&gt;  * Is it intended that the generated Xcode project will be checked-in?<br></p><p>It’s up to you, but certainly it will not be required and we will recommend NOT editing the generated project.<br></p><p>&gt;  * Will the project duplicate information that SwiftPM specifies? file references? configuration?<br></p><p>Yes, because it will be generated, consider it a build artefact.<br></p><p>&gt;  * Will the rebuild clobber project configuration that SwiftPM can&#39;t specify? This is probably fine. Maybe Xcode should make configuration read-only in generated projects. <br></p><p>Yes… don’t edit the projects! ;)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February 20, 2016 at 10:00:00am</p></header><div class="content"><p>On Saturday, 20 February 2016, Max Howell &lt;max.howell at apple.com&gt; wrote:<br></p><p>&gt; &gt; In that context, I have a few questions:<br>&gt; &gt;  * Is it intended that the generated Xcode project will be checked-in?<br>&gt;<br>&gt; It’s up to you, but certainly it will not be required and we will<br>&gt; recommend NOT editing the generated project.<br>&gt;<br>&gt; &gt;  * Will the project duplicate information that SwiftPM specifies? file<br>&gt; references? configuration?<br>&gt;<br>&gt; Yes, because it will be generated, consider it a build artefact.<br>&gt;<br>&gt; &gt;  * Will the rebuild clobber project configuration that SwiftPM can&#39;t<br>&gt; specify? This is probably fine. Maybe Xcode should make configuration<br>&gt; read-only in generated projects.<br>&gt;<br>&gt; Yes… don’t edit the projects! ;)<br></p><p><br>Thanks, that&#39;s what I expected, and is what I was hoping for.<br></p><p>My main point then is that I expect users won&#39;t realise their changes will<br>be clobbered. It would be good if Xcode&#39;s configuration UI is read-only for<br>these projects. At least for v1, if the engineering cost is sufficiently<br>low.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160220/85607888/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] SwiftPM Xcode Integration</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 19, 2016 at 05:00:00pm</p></header><div class="content"><p>Yes we hope to make them read only somehow. <br></p><p>&gt; On Feb 19, 2016, at 5:20 PM, Andrew Bennett &lt;cacoyi at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Saturday, 20 February 2016, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt;&gt; &gt; In that context, I have a few questions:<br>&gt;&gt; &gt;  * Is it intended that the generated Xcode project will be checked-in?<br>&gt;&gt; <br>&gt;&gt; It’s up to you, but certainly it will not be required and we will recommend NOT editing the generated project.<br>&gt;&gt; <br>&gt;&gt; &gt;  * Will the project duplicate information that SwiftPM specifies? file references? configuration?<br>&gt;&gt; <br>&gt;&gt; Yes, because it will be generated, consider it a build artefact.<br>&gt;&gt; <br>&gt;&gt; &gt;  * Will the rebuild clobber project configuration that SwiftPM can&#39;t specify? This is probably fine. Maybe Xcode should make configuration read-only in generated projects.<br>&gt;&gt; <br>&gt;&gt; Yes… don’t edit the projects! ;)<br>&gt; <br>&gt; Thanks, that&#39;s what I expected, and is what I was hoping for.<br>&gt; <br>&gt; My main point then is that I expect users won&#39;t realise their changes will be clobbered. It would be good if Xcode&#39;s configuration UI is read-only for these projects. At least for v1, if the engineering cost is sufficiently low.<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160219/6daf9fef/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
