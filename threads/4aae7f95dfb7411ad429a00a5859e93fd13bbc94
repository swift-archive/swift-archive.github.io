<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Feb 11 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Wouldn&#39;t rule 3b &quot;unless the preposition would break a very tight association between parameters&quot; apply, resulting in<br>&gt;<br>&gt; a.tracksWith(mediaType: b, composer: c)<br></p><p>I don&#39;t think so.  Maybe it could be expressed better, but the intent of<br>the “tight association” language is that the multiple parameters are<br>really part of a single abstraction that could be replaced by a single<br>type, e.g. (x:, y:) =&gt; Point.<br>   <br>&gt; This would not be applicable to the unary variant, though...<br>&gt;<br>&gt; -Thorsten <br>&gt;<br>&gt;&gt; Am 11.02.2016 um 11:33 schrieb Radosław Pietruszewski via<br>&gt;&gt; swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt; <br>&gt;&gt; I find that… surprising.<br>&gt;&gt; <br>&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt; <br>&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; <br>&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word<br>&gt;&gt; glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt; <br>&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in<br>&gt;&gt; many APIs was to make cases like this one clearer. Because “track”<br>&gt;&gt; as a name doesn’t tell you much. Someone said that having the method<br>&gt;&gt; name end with “With” creates a sense of suspense, and to me that was<br>&gt;&gt; precisely what was a good thing about it. It’s not just “track”,<br>&gt;&gt; it’s a “track with” — ooh, here come the criteria for the track!<br>&gt;&gt; Having removed “with” from the name itself, we lose, IMHO, the<br>&gt;&gt; clarity this word was supposed to bring in<br>&gt;&gt; initializer/getter/finder-like methods. And we still keep the word<br>&gt;&gt; later inside the parens, but to my eyes it no longer helps clarity,<br>&gt;&gt; just exists as a vacuous, needless word.<br>&gt;&gt; <br>&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; This no longer looks symmetrical across the parameters. First<br>&gt;&gt; parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; Didn’t have that problem.<br>&gt;&gt; <br>&gt;&gt; I fear that people will take that as a signal that they should make<br>&gt;&gt; the whole method, including parameter labels, sound like an English<br>&gt;&gt; sentence and will start applying needless words like “and”:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt; <br>&gt;&gt; To avoid this weird-looking construct where the first parameter has<br>&gt;&gt; a starting preposition, and other parameters don’t. Again:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; Doesn’t have this problem, because while the method name part ends<br>&gt;&gt; with “With”, the parameters are consistently just nouns.<br>&gt;&gt; <br>&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt;&gt; <br>&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Feb 2016, at 20:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt;&gt; placement:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt;&gt; working with for first argument labels:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;&gt;   describing the primary semantics at the call site.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;&gt;      primary semantics.  For example,<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      x.dismiss(animated: y)<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      [more examples needed]<br>&gt;&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt;&gt;&gt;      semantics. so are always labeled.<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt;&gt;&gt;      initializers, with no preposition.  For example,<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   3. It is part of a prepositional phrase<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     a. The label normally starts with the preposition. <br>&gt;&gt;&gt;        For example, <br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        x.move(from: a, to: b)<br>&gt;&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt;&gt;&gt;        between parameters:<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;&gt;        e.g. Point, in these cases]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Feedback most welcome, of course.<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
