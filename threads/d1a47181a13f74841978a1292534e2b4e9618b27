<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 29, 2016 at 11:00:00pm</p></header><div class="content"><p>Dear colleagues<br>Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br></p><p>Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass <br>NSArray.  Offset of first instance variable, __magic_refCount, is 4.  <br>Last instance variable in superclass, _sortedArrayHint, ends at offset <br>8.  This probably means that you are subclassing aclass from a library, <br>which has changed in a binary-incompatibleway.<br></p><p>Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>Thanks in advance for answer.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 29, 2016 at 01:00:00pm</p></header><div class="content"><p>I would guess that you are emitting with the wrong runtime personality (iirc linux defaults to fragile (objc1) GNU objc runtime). You might need to muck about with flags, most notably -fobjc-runtime. That being said that path might be filled with other issues beyond just the layout differentials. There are many potential failure points along the way that would have to be dealt with.<br></p><p>&gt; On Mar 29, 2016, at 1:03 PM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Dear colleagues<br>&gt; Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br>&gt; <br>&gt; Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass <br>&gt; NSArray.  Offset of first instance variable, __magic_refCount, is 4.  <br>&gt; Last instance variable in superclass, _sortedArrayHint, ends at offset <br>&gt; 8.  This probably means that you are subclassing aclass from a library, <br>&gt; which has changed in a binary-incompatibleway.<br>&gt; <br>&gt; Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>&gt; Thanks in advance for answer.<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 30, 2016 at 12:00:00am</p></header><div class="content"><p>I emitted with -fobjc-runtime=gnustep.<br></p><p>29.03.2016, 23:13, &quot;Philippe Hausler&quot; &lt;phausler at apple.com&gt;:<br>&gt; I would guess that you are emitting with the wrong runtime personality (iirc linux defaults to fragile (objc1) GNU objc runtime). You might need to muck about with flags, most notably -fobjc-runtime. That being said that path might be filled with other issues beyond just the layout differentials. There are many potential failure points along the way that would have to be dealt with.<br>&gt;<br>&gt;&gt;  On Mar 29, 2016, at 1:03 PM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;  Dear colleagues<br>&gt;&gt;  Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br>&gt;&gt;<br>&gt;&gt;  Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass<br>&gt;&gt;  NSArray. Offset of first instance variable, __magic_refCount, is 4.<br>&gt;&gt;  Last instance variable in superclass, _sortedArrayHint, ends at offset<br>&gt;&gt;  8. This probably means that you are subclassing aclass from a library,<br>&gt;&gt;  which has changed in a binary-incompatibleway.<br>&gt;&gt;<br>&gt;&gt;  Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>&gt;&gt;  Thanks in advance for answer.<br>&gt;&gt;  _______________________________________________<br>&gt;&gt;  swift-dev mailing list<br>&gt;&gt;  swift-dev at swift.org<br>&gt;&gt;  https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-- <br>С уважением,<br> Труб Илья<br>+79032407864<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58335f7bfe75e535c99d7236b0d82cbd?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Daniel DeCovnick</string> &lt;daniel at apportable.com&gt;<p>March 29, 2016 at 01:00:00pm</p></header><div class="content"><p>I’d be interested in the patches.<br></p><p>Daniel<br></p><p><br>&gt; On Mar 29, 2016, at 1:03 PM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Dear colleagues<br>&gt; Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br>&gt; <br>&gt; Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass <br>&gt; NSArray.  Offset of first instance variable, __magic_refCount, is 4.  <br>&gt; Last instance variable in superclass, _sortedArrayHint, ends at offset <br>&gt; 8.  This probably means that you are subclassing aclass from a library, <br>&gt; which has changed in a binary-incompatibleway.<br>&gt; <br>&gt; Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>&gt; Thanks in advance for answer.<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 29, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Mar 29, 2016, at 1:03 PM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Dear colleagues<br>&gt; Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br>&gt; <br>&gt; Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass <br>&gt; NSArray.  Offset of first instance variable, __magic_refCount, is 4.  <br>&gt; Last instance variable in superclass, _sortedArrayHint, ends at offset <br>&gt; 8.  This probably means that you are subclassing aclass from a library, <br>&gt; which has changed in a binary-incompatibleway.<br>&gt; <br>&gt; Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>&gt; Thanks in advance for answer.<br></p><p>The implementation of our ObjC interop makes pretty deep invasive assumptions about the Apple ObjC runtime ABI as well as the implementation of classes in Cocoa. It probably needs to be rewritten from the ground up to support another runtime and Foundation implementation.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 30, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; The implementation of our ObjC interop makes pretty deep invasive assumptions about the Apple ObjC runtime ABI as well as the implementation of classes in Cocoa. It probably needs to be rewritten from the ground up to support another runtime and Foundation implementation.<br>&gt;<br>&gt; -Joe<br>Alas, I agree. I think just that too. Thanks.<br></p><p>30.03.2016, 01:22, &quot;Joe Groff&quot; &lt;jgroff at apple.com&gt;:<br>&gt;&gt;  On Mar 29, 2016, at 1:03 PM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;  Dear colleagues<br>&gt;&gt;  Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br>&gt;&gt;<br>&gt;&gt;  Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass<br>&gt;&gt;  NSArray. Offset of first instance variable, __magic_refCount, is 4.<br>&gt;&gt;  Last instance variable in superclass, _sortedArrayHint, ends at offset<br>&gt;&gt;  8. This probably means that you are subclassing aclass from a library,<br>&gt;&gt;  which has changed in a binary-incompatibleway.<br>&gt;&gt;<br>&gt;&gt;  Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>&gt;&gt;  Thanks in advance for answer.<br>&gt;<br>&gt; The implementation of our ObjC interop makes pretty deep invasive assumptions about the Apple ObjC runtime ABI as well as the implementation of classes in Cocoa. It probably needs to be rewritten from the ground up to support another runtime and Foundation implementation.<br>&gt;<br>&gt; -Joe<br></p><p>-- <br>С уважением,<br> Труб Илья<br>+79032407864<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 30, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;d like to add, that I have overcomed &quot;subject&quot;error in very simple path. I indeed forgot to add -fobjc-runtime=gnustep to all needed places. THIS error disappeared, but the new error appeared:<br> <br>main2: dwarf/Gparser.c:456: fetch_proc_info: Assertion<br>`c-&gt;pi.unwind_info&#39; failed<br></p><p>Any opinions? I even do not know, from what library Gparser.c is.<br>So, sucess story with launch of the simplest application is not reached.<br></p><p>30.03.2016, 01:22, &quot;Joe Groff&quot; &lt;jgroff at apple.com&gt;:<br>&gt;&gt;  On Mar 29, 2016, at 1:03 PM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;  Dear colleagues<br>&gt;&gt;  Ihave built swiftc, libswiftCore.so and other outputs under armv7--linux-gnueabi with open source ObjC-runtime and enabled ObjC interop. I linked the simplest swift-application, which creates the instance of custom ObjC-class and call instance-method of it. If somebody interested, I am ready to provide patches, though I know that it can not be included into upstream. But there is not success yet. When I try to run application under armv7l-linux, I get following error:<br>&gt;&gt;<br>&gt;&gt;  Error: Instance variables in _SwiftNativeNSArrayBase overlap superclass<br>&gt;&gt;  NSArray. Offset of first instance variable, __magic_refCount, is 4.<br>&gt;&gt;  Last instance variable in superclass, _sortedArrayHint, ends at offset<br>&gt;&gt;  8. This probably means that you are subclassing aclass from a library,<br>&gt;&gt;  which has changed in a binary-incompatibleway.<br>&gt;&gt;<br>&gt;&gt;  Could anybody explain it? I think, it is explained by some difference between NSArray-implementation in XCode framework and in my opensource library. Is it true? And in what way I can try to fix it? May be, to modify my NSArray-source, but how?<br>&gt;&gt;  Thanks in advance for answer.<br>&gt;<br>&gt; The implementation of our ObjC interop makes pretty deep invasive assumptions about the Apple ObjC runtime ABI as well as the implementation of classes in Cocoa. It probably needs to be rewritten from the ground up to support another runtime and Foundation implementation.<br>&gt;<br>&gt; -Joe<br></p><p>-- <br>С уважением,<br> Труб Илья<br>+79032407864<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 30, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Mar 30, 2016, at 3:27 AM, Iliya Trub &lt;itrub at yandex.ru&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to add, that I have overcomed &quot;subject&quot;error in very simple path. I indeed forgot to add -fobjc-runtime=gnustep to all needed places. THIS error disappeared, but the new error appeared:<br>&gt; <br>&gt; main2: dwarf/Gparser.c:456: fetch_proc_info: Assertion<br>&gt; `c-&gt;pi.unwind_info&#39; failed<br>&gt; <br>&gt; Any opinions? I even do not know, from what library Gparser.c is.<br>&gt; So, sucess story with launch of the simplest application is not reached.<br></p><p>It&#39;s highly unlikely that the Gnustep runtime will be able to make any sense of the class metadata we emit, or that the assumptions we make about NSObject, NSString, etc. are valid for Gnustep&#39;s implementations, so you&#39;re in undefined behavior territory.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46520baee6c64b0aa858ccfcec77f131?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Iliya Trub</string> &lt;itrub at yandex.ru&gt;<p>March 30, 2016 at 10:00:00pm</p></header><div class="content"><p>Of course, I fully understand, that project is most likely hopeless. But for now I have some time to try.<br></p><p>30.03.2016, 20:34, &quot;Joe Groff&quot; &lt;jgroff at apple.com&gt;:<br>&gt;&gt;  On Mar 30, 2016, at 3:27 AM, Iliya Trub &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;  I&#39;d like to add, that I have overcomed &quot;subject&quot;error in very simple path. I indeed forgot to add -fobjc-runtime=gnustep to all needed places. THIS error disappeared, but the new error appeared:<br>&gt;&gt;<br>&gt;&gt;  main2: dwarf/Gparser.c:456: fetch_proc_info: Assertion<br>&gt;&gt;  `c-&gt;pi.unwind_info&#39; failed<br>&gt;&gt;<br>&gt;&gt;  Any opinions? I even do not know, from what library Gparser.c is.<br>&gt;&gt;  So, sucess story with launch of the simplest application is not reached.<br>&gt;<br>&gt; It&#39;s highly unlikely that the Gnustep runtime will be able to make any sense of the class metadata we emit, or that the assumptions we make about NSObject, NSString, etc. are valid for Gnustep&#39;s implementations, so you&#39;re in undefined behavior territory.<br>&gt;<br>&gt; -Joe<br></p><p>-- <br>С уважением,<br> Труб Илья<br>+79032407864<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ffe95d2e2584a3b4adda3ca0e19c375d?s=50"></div><header><strong>ObjC Interoperability under armv7--linux-gnueabi</strong> from <string>Luke Howard</string> &lt;lukeh at padl.com&gt;<p>April  1, 2016 at 08:00:00am</p></header><div class="content"><p>As I think I mentioned before, you’ll probably have more luck porting the Apple runtime [1] to Linux than getting it to work with the GNUstep runtime.<br></p><p>— Luke<br></p><p>[1] http://opensource.apple.com/source/objc4/objc4-680/<br></p><p>&gt; On 31 Mar 2016, at 6:02 AM, Iliya Trub via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Of course, I fully understand, that project is most likely hopeless. But for now I have some time to try.<br>&gt; <br>&gt; 30.03.2016, 20:34, &quot;Joe Groff&quot; &lt;jgroff at apple.com&gt;:<br>&gt;&gt;&gt;  On Mar 30, 2016, at 3:27 AM, Iliya Trub &lt;itrub at yandex.ru&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  I&#39;d like to add, that I have overcomed &quot;subject&quot;error in very simple path. I indeed forgot to add -fobjc-runtime=gnustep to all needed places. THIS error disappeared, but the new error appeared:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  main2: dwarf/Gparser.c:456: fetch_proc_info: Assertion<br>&gt;&gt;&gt;  `c-&gt;pi.unwind_info&#39; failed<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  Any opinions? I even do not know, from what library Gparser.c is.<br>&gt;&gt;&gt;  So, sucess story with launch of the simplest application is not reached.<br>&gt;&gt; <br>&gt;&gt; It&#39;s highly unlikely that the Gnustep runtime will be able to make any sense of the class metadata we emit, or that the assumptions we make about NSObject, NSString, etc. are valid for Gnustep&#39;s implementations, so you&#39;re in undefined behavior territory.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; -- <br>&gt; С уважением,<br>&gt; Труб Илья<br>&gt; +79032407864<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>--<br>www.lukehoward.com<br>soundcloud.com/lukehoward<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
