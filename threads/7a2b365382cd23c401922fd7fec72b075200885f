<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Fast Track Reviews</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 18, 2016 at 09:00:00am</p></header><div class="content"><p>I would like to see Swift Evolution adopt a couple of styles of fast track reviews. Chris Lattner<br>suggested I bring this up on-list for discussion to allow the community to offer feedback <br>on my idea.<br></p><p>STYLE ONE: Minor language enhancements AKA &quot;Low hanging fruit&quot;<br></p><p>I would like the core team to be able to add minor language enhancements without going<br>through a formal proposal process, with its normal review overhead. I have now been<br>involved in several reviews that involved API changes that were otherwise unremarkable<br>and primarily motivated by modernizing and style:<br></p><p>* Replacing Equal Signs with Colons For Attribute Arguments &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0040-attributecolons.md&gt;<br>* Modernizing Playground Literals &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0039-playgroundliterals.md&gt;<br>* Disambiguating Line Control Statements from Debugging Identifiers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md&gt;<br></p><p>To this list, you could add:<br></p><p>* Remove explicit use of let from Function Parameters &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0053-remove-let-from-function-parameters.md&gt;<br></p><p>Each of these proposals could have proceeded with a simple &quot;any objections&quot; sanity check <br>discussion period rather than a more formal full review. As a another example<br>(now unnecessary &lt;https://github.com/apple/swift-evolution/pull/256&gt;), consider the `dynamicType` keyword, which would have required<br>a formal proposal to be modernized into Swift&#39;s lowercase keyword standard.<br></p><p>The hallmarks of these changes are:<br></p><p>* They have limited impact<br>* They increase language consistency<br>* They are uncontroversial, offering simple, straightforward, and correct changes <br>   that have already passed review in spirit, if not in letter<br>* A preponderance of reviews are &quot;+1&quot; rather than in-depth discussions of why the proposal <br>  should or should not be adopted.<br></p><p>I would recommend retaining a change document requirement for these proposals.<br>This would be similar to a brief but formal proposal, that lays out the justification, <br>detail design, and any associated background info for the change. Doing so<br>would provide a historic record of the change and any notes from the team, and be <br>in a form that would support the extraction of key details for use in release notes.<br></p><p>I do not know whether these would need to be grouped and numbered with the normal<br>proposals or placed into their own numbering scheme.<br></p><p>STYLE TWO: Fast tracking viability<br></p><p>Once a draft has been discussed on-list and submitted as a pull request, I would like to<br>see a biweekly (or even once-a-month) Pull Request Review meeting from the core team<br>where a review groups looks over the current pull-request queue and scores them: <br>recommend close, recommend promote, needs work, defer past 3.0.<br></p><p>This approach:<br></p><p>* Would offer closure to proposal authors who are otherwise unsure of the viability<br>  of their proposals<br>* Naturally happens after a significant on-list discussion/pre-review period has already <br>   taken place<br>* Would allow the team to weed out proposals with significant issues before entering<br>   formal review<br>* Would allow on-list reviews to give precedence to only those proposals that make sense<br>   both in the time context of Swift 3.0 and its overall design philosophy. <br></p><p>Swift is an opinionated language. This review style would introduce discernment and<br>feedback slightly earlier in the process without stifling on-list discussion.<br></p><p>A few final thoughts<br></p><p>It is a given that Swift 3 is going to be the last opportunity to make large, code-breaking<br>changes to the language. With that constraint, I&#39;d like to see more time and effort go into<br>improving Swift&#39;s fundamentals. Any time, effort, and review that can be better spent<br>getting collections and indices right rather than worrying about colons and casing is,<br>in my opinion, worth a tradeoff in community control. <br></p><p>The natural tension between engagement and coherence requires a balance that serves<br>the entire Swift community. Open evolution processes are, by nature, chaotic. Maintaining<br>a coherent vision for something as complicated as Swift requires coordination and leadership. <br>That&#39;s why the ultimate responsibility for adopting changes lies with the Swift <br>core team, which establishes the strategic direction of Swift. <br></p><p>I hope by adopting these fast-track review styles that the Swift open source community <br>can better focus on the big updates while making sure that the small details are attended to<br>carefully and thoughtfully without overwhelming the process.<br></p><p>-- E<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/7a2b885f/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[META] Fast Track Reviews</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>April 18, 2016 at 10:00:00am</p></header><div class="content"><p>+2. I think both of these processes, if practical for the team, would<br>benefit the community. There are lots of PRs<br>&lt;https://github.com/apple/swift-evolution/pulls&gt; that have sat open for<br>months with no response.<br></p><p>Another idea: track evolution proposals on the bugs.swift.org JIRA<br>installation, by creating a new project<br>&lt;https://bugs.swift.org/secure/BrowseProjects.jspa?selectedCategory=all&amp;selectedProjectType=all&gt;<br>for the SEs. The SE-nnnn number in the proposal text could match the JIRA<br>number. Then the team could use custom JIRA workflows<br>&lt;https://confluence.atlassian.com/adminjiraserver070/working-with-workflows-749383109.html&gt;<br>and statuses<br>&lt;https://confluence.atlassian.com/adminjiraserver070/defining-status-field-values-749382903.html&gt;<br>to track proposals more closely and make the internal process visible to<br>the community.<br></p><p>Jacob<br></p><p>On Mon, Apr 18, 2016 at 8:56 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; I would like to see Swift Evolution adopt a couple of styles of fast track<br>&gt; reviews. Chris Lattner<br>&gt; suggested I bring this up on-list for discussion to allow the community to<br>&gt; offer feedback<br>&gt; on my idea.<br>&gt;<br>&gt; *STYLE ONE: Minor language enhancements AKA &quot;Low hanging fruit&quot;*<br>&gt;<br>&gt; I would like the core team to be able to add minor language enhancements<br>&gt; without going<br>&gt; through a formal proposal process, with its normal review overhead. I have<br>&gt; now been<br>&gt; involved in several reviews that involved API changes that were otherwise<br>&gt; unremarkable<br>&gt; and primarily motivated by modernizing and style:<br>&gt;<br>&gt; * Replacing Equal Signs with Colons For Attribute Arguments<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0040-attributecolons.md&gt;<br>&gt; * Modernizing Playground Literals<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0039-playgroundliterals.md&gt;<br>&gt; * Disambiguating Line Control Statements from Debugging Identifiers<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md&gt;<br>&gt;<br>&gt; To this list, you could add:<br>&gt;<br>&gt; * Remove explicit use of let from Function Parameters<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0053-remove-let-from-function-parameters.md&gt;<br>&gt;<br>&gt; Each of these proposals could have proceeded with a simple &quot;any<br>&gt; objections&quot; sanity check<br>&gt; discussion period rather than a more formal full review. As a another<br>&gt; example<br>&gt; (now unnecessary &lt;https://github.com/apple/swift-evolution/pull/256&gt;),<br>&gt; consider the `dynamicType` keyword, which would have required<br>&gt; a formal proposal to be modernized into Swift&#39;s lowercase keyword standard.<br>&gt;<br>&gt; The hallmarks of these changes are:<br>&gt;<br>&gt; * They have limited impact<br>&gt; * They increase language consistency<br>&gt; * They are uncontroversial, offering simple, straightforward, and correct<br>&gt; changes<br>&gt;    that have already passed review in spirit, if not in letter<br>&gt; * A preponderance of reviews are &quot;+1&quot; rather than in-depth discussions of<br>&gt; why the proposal<br>&gt;   should or should not be adopted.<br>&gt;<br>&gt; I would recommend retaining a change document requirement for these<br>&gt; proposals.<br>&gt; This would be similar to a brief but formal proposal, that lays out the<br>&gt; justification,<br>&gt; detail design, and any associated background info for the change. Doing so<br>&gt; would provide a historic record of the change and any notes from the team,<br>&gt; and be<br>&gt; in a form that would support the extraction of key details for use in<br>&gt; release notes.<br>&gt;<br>&gt; I do not know whether these would need to be grouped and numbered with the<br>&gt; normal<br>&gt; proposals or placed into their own numbering scheme.<br>&gt;<br>&gt; *STYLE TWO: Fast tracking viability*<br>&gt;<br>&gt; Once a draft has been discussed on-list and submitted as a pull request, I<br>&gt; would like to<br>&gt; see a biweekly (or even once-a-month) *Pull Request Review* meeting from<br>&gt; the core team<br>&gt; where a review groups looks over the current pull-request queue and scores<br>&gt; them:<br>&gt; *recommend close*, *recommend promote*, *needs work*, *defer past 3.0*.<br>&gt;<br>&gt; This approach:<br>&gt;<br>&gt; * Would offer closure to proposal authors who are otherwise unsure of the<br>&gt; viability<br>&gt;   of their proposals<br>&gt; * Naturally happens after a significant on-list discussion/pre-review<br>&gt; period has already<br>&gt;    taken place<br>&gt; * Would allow the team to weed out proposals with significant issues<br>&gt; before entering<br>&gt;    formal review<br>&gt; * Would allow on-list reviews to give precedence to only those proposals<br>&gt; that make sense<br>&gt;    both in the time context of Swift 3.0 and its overall design<br>&gt; philosophy.<br>&gt;<br>&gt; Swift is an opinionated language. This review style would introduce<br>&gt; discernment and<br>&gt; feedback slightly earlier in the process without stifling on-list<br>&gt; discussion.<br>&gt;<br>&gt; *A few final thoughts*<br>&gt;<br>&gt; It is a given that Swift 3 is going to be the last opportunity to make<br>&gt; large, code-breaking<br>&gt; changes to the language. With that constraint, I&#39;d like to see more time<br>&gt; and effort go into<br>&gt; improving Swift&#39;s fundamentals. Any time, effort, and review that can be<br>&gt; better spent<br>&gt; getting collections and indices right rather than worrying about colons<br>&gt; and casing is,<br>&gt; in my opinion, worth a tradeoff in community control.<br>&gt;<br>&gt; The natural tension between engagement and coherence requires a balance<br>&gt; that serves<br>&gt; the entire Swift community. Open evolution processes are, by nature,<br>&gt; chaotic. Maintaining<br>&gt; a coherent vision for something as complicated as Swift requires<br>&gt; coordination and leadership.<br>&gt; That&#39;s why the ultimate responsibility for adopting changes lies with the<br>&gt; Swift<br>&gt; core team, which establishes the strategic direction of Swift.<br>&gt;<br>&gt; I hope by adopting these fast-track review styles that the Swift open<br>&gt; source community<br>&gt; can better focus on the big updates while making sure that the small<br>&gt; details are attended to<br>&gt; carefully and thoughtfully without overwhelming the process.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/5e3ef946/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[META] Fast Track Reviews</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; STYLE ONE: Minor language enhancements AKA &quot;Low hanging fruit&quot;<br>&gt; <br>&gt; I would like the core team to be able to add minor language enhancements without going<br>&gt; through a formal proposal process, with its normal review overhead. I have now been<br>&gt; involved in several reviews that involved API changes that were otherwise unremarkable<br>&gt; and primarily motivated by modernizing and style:<br>&gt; <br>&gt; * Replacing Equal Signs with Colons For Attribute Arguments<br>&gt; * Modernizing Playground Literals<br>&gt; * Disambiguating Line Control Statements from Debugging Identifiers<br>&gt; <br>&gt; To this list, you could add:<br>&gt; <br>&gt; * Remove explicit use of let from Function Parameters<br></p><p>These examples are all very small changes, practically as easy to write as to propose comprehensively. I wonder if these sorts of things could simply be merged into master, preferably behind a feature flag if they break anything, and reviewed at the time of the next snapshot. This would allow people to actually play with the change and see how they feel about it. If people are happy with it, we remove the feature flags, finish up tests/diagnostics/documentation/deprecations, and move on. If not, modify or revert.<br></p><p>I think it&#39;s very important to have some kind of proposal for every change, particularly so we have a Motivations section, which is *not* something you can get from compiler diffs. I also think it&#39;s important that every change have some kind of review: it gets the idea in front of the eyes of non-compiler-writers, provides an opportunity for feedback, acts as a waiting period in case there&#39;s a better idea floating just out of reach, and legitimizes the change in the eyes of the community. (And I think all reviews, even abbreviated ones, should go out on -announce; I know a few people who can&#39;t follow swift-evolution but do read reviewed proposals to keep up with things.)<br></p><p>But that doesn&#39;t mean every change has to go through the same process. If the change is simple, its &quot;proposal&quot; can be a couple paragraphs, and its &quot;review&quot; can be during or after implementation, as long as it&#39;s considered non-final. We can do something lightweight for the small stuff, as long as everyone is afforded an opportunity to contribute.<br></p><p>(And having something already implemented may help keep bikeshedding under control. It&#39;s one thing to argue about the color before the bikeshed is painted; arguing afterward is quite another.)<br></p><p>&gt; A few final thoughts<br>&gt; <br>&gt; It is a given that Swift 3 is going to be the last opportunity to make large, code-breaking<br>&gt; changes to the language. With that constraint, I&#39;d like to see more time and effort go into<br>&gt; improving Swift&#39;s fundamentals. Any time, effort, and review that can be better spent<br>&gt; getting collections and indices right rather than worrying about colons and casing is,<br>&gt; in my opinion, worth a tradeoff in community control. <br></p><p>Yes and no. Colons and casing are only going to get harder to change. What I *do* think, though, is that we need to focus on getting what we have nailed down and polished up, rather than adding a bunch of new stuff. There are very few missing features which are so urgent that they can&#39;t wait* until 3.1 or 3.2 or even 4.0, but existing features&#39; designs and names—particularly in standard library protocols—are almost frozen in the fall. <br></p><p>To that end, I&#39;m wondering if we should branch swift-evolution in the same way we branch master. swift3-evolution would focus on redesigns, minor extensions, and the few new features urgent enough to be part of Swift 3; swift-evolution would orient towards drafting and refining proposals for larger features which probably won&#39;t make the cut. (We wouldn&#39;t be reviewing these yet, but we can get things prepped.) The people who are busy implementing things can then focus on swift3-evolution and only occasionally weigh in on swift-evolution. I think this would make the current status clear and take a load off the people who are swamped.<br></p><p><br></p><p>* The only missing feature I can think of which *is* that urgent is new sequence operations to soften the blow of the C-style for loop removal. We need *something* to fix-it those old loops into.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[META] Fast Track Reviews</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 18, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Apr 18, 2016, at 8:56 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I would like to see Swift Evolution adopt a couple of styles of fast track reviews. Chris Lattner<br>&gt; suggested I bring this up on-list for discussion to allow the community to offer feedback <br>&gt; on my idea.<br>&gt; <br>&gt; STYLE ONE: Minor language enhancements AKA &quot;Low hanging fruit&quot;<br>&gt; <br>&gt; I would like the core team to be able to add minor language enhancements without going<br>&gt; through a formal proposal process, with its normal review overhead. I have now been<br>&gt; involved in several reviews that involved API changes that were otherwise unremarkable<br>&gt; and primarily motivated by modernizing and style:<br>&gt; <br>&gt; * Replacing Equal Signs with Colons For Attribute Arguments<br>&gt; * Modernizing Playground Literals<br>&gt; * Disambiguating Line Control Statements from Debugging Identifiers<br>&gt; <br>&gt; To this list, you could add:<br>&gt; <br>&gt; * Remove explicit use of let from Function Parameters<br>&gt; <br>&gt; Each of these proposals could have proceeded with a simple &quot;any objections&quot; sanity check <br>&gt; discussion period rather than a more formal full review. As a another example<br>&gt; (now unnecessary), consider the `dynamicType` keyword, which would have required<br>&gt; a formal proposal to be modernized into Swift&#39;s lowercase keyword standard.<br>&gt; <br>&gt; The hallmarks of these changes are:<br>&gt; <br>&gt; * They have limited impact<br>&gt; * They increase language consistency<br>&gt; * They are uncontroversial, offering simple, straightforward, and correct changes <br>&gt;    that have already passed review in spirit, if not in letter<br>&gt; * A preponderance of reviews are &quot;+1&quot; rather than in-depth discussions of why the proposal <br>&gt;   should or should not be adopted.<br>&gt; <br>&gt; I would recommend retaining a change document requirement for these proposals.<br>&gt; This would be similar to a brief but formal proposal, that lays out the justification, <br>&gt; detail design, and any associated background info for the change. Doing so<br>&gt; would provide a historic record of the change and any notes from the team, and be <br>&gt; in a form that would support the extraction of key details for use in release notes.<br>&gt; <br>&gt; I do not know whether these would need to be grouped and numbered with the normal<br>&gt; proposals or placed into their own numbering scheme.<br></p><p>My main concerns are to have a proper paper trail documenting when and why we make a change. My preferred approach here would be to go through the normal process up to the pull request for the proposal... Then if it&#39;s obviously small and good, the core team could just go straight to accept, sending out an announcement. <br></p><p>&gt; <br>&gt; STYLE TWO: Fast tracking viability<br>&gt; <br>&gt; Once a draft has been discussed on-list and submitted as a pull request, I would like to<br>&gt; see a biweekly (or even once-a-month) Pull Request Review meeting from the core team<br>&gt; where a review groups looks over the current pull-request queue and scores them: <br>&gt; recommend close, recommend promote, needs work, defer past 3.0.<br>&gt; <br>&gt; This approach:<br>&gt; <br>&gt; * Would offer closure to proposal authors who are otherwise unsure of the viability<br>&gt;   of their proposals<br>&gt; * Naturally happens after a significant on-list discussion/pre-review period has already <br>&gt;    taken place<br>&gt; * Would allow the team to weed out proposals with significant issues before entering<br>&gt;    formal review<br>&gt; * Would allow on-list reviews to give precedence to only those proposals that make sense<br>&gt;    both in the time context of Swift 3.0 and its overall design philosophy. <br>&gt; <br>&gt; Swift is an opinionated language. This review style would introduce discernment and<br>&gt; feedback slightly earlier in the process without stifling on-list discussion.<br></p><p>FWIW, we&#39;ve been doing somethings similar to this already, looking at the outstanding PRs and accepting/deferring/sending them back. It&#39;s fairly time-consuming and the core team is stretched pretty thin, so I&#39;m not sure what else we can do on this front. I suspect we can be a bit quicker to accept at this stage in the process to save us some overhead. <br></p><p>  - Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/150810a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Fast Track Reviews</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Apr 18, 2016, at 8:39 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; FWIW, we&#39;ve been doing somethings similar to this already, looking at the outstanding PRs and accepting/deferring/sending them back. It&#39;s fairly time-consuming and the core team is stretched pretty thin, so I&#39;m not sure what else we can do on this front. I suspect we can be a bit quicker to accept at this stage in the process to save us some overhead. <br>&gt; <br>&gt;   - Doug<br></p><p>It&#39;s all appreciated.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/831062cf/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[META] Fast Track Reviews</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Apr 18, 2016, at 7:39 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Apr 18, 2016, at 8:56 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I would like to see Swift Evolution adopt a couple of styles of fast track reviews. Chris Lattner<br>&gt;&gt; suggested I bring this up on-list for discussion to allow the community to offer feedback <br>&gt;&gt; on my idea.<br>&gt;&gt; <br>&gt;&gt; STYLE ONE: Minor language enhancements AKA &quot;Low hanging fruit&quot;<br>&gt;&gt; <br>&gt;&gt; I would like the core team to be able to add minor language enhancements without going<br>&gt;&gt; through a formal proposal process, with its normal review overhead. I have now been<br>&gt;&gt; involved in several reviews that involved API changes that were otherwise unremarkable<br>&gt;&gt; and primarily motivated by modernizing and style:<br>&gt;&gt; <br>&gt;&gt; * Replacing Equal Signs with Colons For Attribute Arguments &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0040-attributecolons.md&gt;<br>&gt;&gt; * Modernizing Playground Literals &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0039-playgroundliterals.md&gt;<br>&gt;&gt; * Disambiguating Line Control Statements from Debugging Identifiers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md&gt;<br>&gt;&gt; <br>&gt;&gt; To this list, you could add:<br>&gt;&gt; <br>&gt;&gt; * Remove explicit use of let from Function Parameters &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0053-remove-let-from-function-parameters.md&gt;<br>&gt;&gt; <br>&gt;&gt; Each of these proposals could have proceeded with a simple &quot;any objections&quot; sanity check <br>&gt;&gt; discussion period rather than a more formal full review. As a another example<br>&gt;&gt; (now unnecessary &lt;https://github.com/apple/swift-evolution/pull/256&gt;), consider the `dynamicType` keyword, which would have required<br>&gt;&gt; a formal proposal to be modernized into Swift&#39;s lowercase keyword standard.<br>&gt;&gt; <br>&gt;&gt; The hallmarks of these changes are:<br>&gt;&gt; <br>&gt;&gt; * They have limited impact<br>&gt;&gt; * They increase language consistency<br>&gt;&gt; * They are uncontroversial, offering simple, straightforward, and correct changes <br>&gt;&gt;    that have already passed review in spirit, if not in letter<br>&gt;&gt; * A preponderance of reviews are &quot;+1&quot; rather than in-depth discussions of why the proposal <br>&gt;&gt;   should or should not be adopted.<br>&gt;&gt; <br>&gt;&gt; I would recommend retaining a change document requirement for these proposals.<br>&gt;&gt; This would be similar to a brief but formal proposal, that lays out the justification, <br>&gt;&gt; detail design, and any associated background info for the change. Doing so<br>&gt;&gt; would provide a historic record of the change and any notes from the team, and be <br>&gt;&gt; in a form that would support the extraction of key details for use in release notes.<br>&gt;&gt; <br>&gt;&gt; I do not know whether these would need to be grouped and numbered with the normal<br>&gt;&gt; proposals or placed into their own numbering scheme.<br>&gt; <br>&gt; My main concerns are to have a proper paper trail documenting when and why we make a change. My preferred approach here would be to go through the normal process up to the pull request for the proposal... Then if it&#39;s obviously small and good, the core team could just go straight to accept, sending out an announcement. <br></p><p>The core team did discuss this, and we agreed that there are small changes (particularly those that come from actually implementing the proposal) that could be treated as “bug fixes” to the proposal. When we accept such a pull request, we will send out an [Amendment] to swift-evolution [*].<br></p><p>We expect to use this sparingly. The removal of the vestigial “let” from function parameter lists is one case where we could have done this, the others are on the fence.<br></p><p>	- Doug<br></p><p>[*] I still owe one of these for a recent pull request we accepted to amend SE-0016.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/ee19c0af/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
