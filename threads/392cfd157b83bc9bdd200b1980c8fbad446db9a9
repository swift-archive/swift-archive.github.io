<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a83279e420d8a16da6441b8333b93775?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>David Scrève</string> &lt;david.screve at dlta-studio.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>Hi Everyone,<br></p><p>	Nice to see this new swift-evolution process?.I?m not sure to completely understand the whole process of requesting evolutions, but I?m trying<br>to do?<br></p><p>	As I develop sort of framework, I usually have classes that I wanted to partially in the framework and force the user to implement others parts.<br></p><p>	For example, I have a WebService class that manage the whole process to perform asynchronous call, error management.<br>	This class has an abstract property that is specific for each WebService call.<br></p><p>	Then I would like to make the URL property abstract and, consequently, the whole WebService class abstract : The WebService cannot be directly instantiated.<br></p><p>	The goal of this feature would be to extend to method.<br>	This behavior already exists in Java and is really useful. <br></p><p>	The workaround is to make an URL property that returns invalid value or make assertion, but the error is only detected at runtime.<br></p><p>	My proposal would be to just add a keyword before func, class or var. An abstract property or func should not provide implementation.	<br></p><p>	Regards,<br></p><p><br>David<br></p><p><br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4233 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/392cb9a9/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  4, 2015 at 03:00:00am</p></header><div class="content"><p>Hello David,<br></p><p>This sounds like something that can be accomplished with protocols and<br>default implementations provided in protocol extensions. If you&#39;ve<br>watched Protocol-Oriented<br>Programming in Swift [Session 408]<br>&lt;https://developer.apple.com/videos/play/wwdc2015-408/&gt;, slides 168 and on,<br>once he begins talking about Protocol Extensions, is the relevant part. It<br>looks like the functionality that you&#39;ve described is already present in<br>this feature.<br></p><p>TJ<br></p><p>On Fri, Dec 4, 2015 at 3:30 AM, David Scr?ve &lt;david.screve at dlta-studio.com&gt;<br>wrote:<br></p><p>&gt;         Hi Everyone,<br>&gt;<br>&gt;         Nice to see this new swift-evolution process?.I?m not sure to<br>&gt; completely understand the whole process of requesting evolutions, but I?m<br>&gt; trying<br>&gt; to do?<br>&gt;<br>&gt;         As I develop sort of framework, I usually have classes that I<br>&gt; wanted to partially in the framework and force the user to implement others<br>&gt; parts.<br>&gt;<br>&gt;         For example, I have a WebService class that manage the whole<br>&gt; process to perform asynchronous call, error management.<br>&gt;         This class has an abstract property that is specific for each<br>&gt; WebService call.<br>&gt;<br>&gt;         Then I would like to make the URL property abstract and,<br>&gt; consequently, the whole WebService class abstract : The WebService cannot<br>&gt; be directly instantiated.<br>&gt;<br>&gt;         The goal of this feature would be to extend to method.<br>&gt;         This behavior already exists in Java and is really useful.<br>&gt;<br>&gt;         The workaround is to make an URL property that returns invalid<br>&gt; value or make assertion, but the error is only detected at runtime.<br>&gt;<br>&gt;         My proposal would be to just add a keyword before func, class or<br>&gt; var. An abstract property or func should not provide implementation.<br>&gt;<br>&gt;         Regards,<br>&gt;<br>&gt;<br>&gt; David<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/bfe93fe7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a83279e420d8a16da6441b8333b93775?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>David Scrève</string> &lt;david.screve at dlta-studio.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>Hello TJ,<br></p><p>	Actually not completely?Protocol does not handle properties storage. Only class (and struct) can be made abstract.<br></p><p>	Doing this with protocol and class required the use of both and you need to enforce developer to inherit from class and implement protocol.. An abstract class encapsulate both on this in a single entity.<br></p><p>	Here is a sample class for WebService : <br></p><p>class WebService {<br>    private var lastModified : NSDate<br>    var url : String?<br></p><p>    init() {<br>        lastModified=NSDate()<br>    }<br>    <br>    func performCall() {<br>        print(self.url)<br>        self.lastModified=NSDate()<br>    }<br>}<br></p><p>As written below, I can create a WebService instance?but I would like to forbid this because URL is a property that must be implemented by inherited classes.<br></p><p>I I use a protocol and Protocol extension, I will not be able to have lastModified stored value.<br></p><p>My proposal is to add abstract keyword as below : <br></p><p>abstract class WebService {<br>    private var lastModified : NSDate<br>    abstract var url : String?<br></p><p>    init() {<br>        lastModified=NSDate()<br>    }<br>    <br>    func performCall() {<br>        print(self.url)<br>        self.lastModified=NSDate()<br>    }<br>}<br></p><p>Then I will not be able to create a WebService object, and enforced to implement url property in inherited classes.<br></p><p>	Regards,<br></p><p>David<br></p><p>&gt; Le 4 d?c. 2015 ? 09:43, T.J. Usiyan &lt;griotspeak at gmail.com&gt; a ?crit :<br>&gt; <br>&gt; Hello David,<br>&gt; <br>&gt; This sounds like something that can be accomplished with protocols and default implementations provided in protocol extensions. If you&#39;ve watched Protocol-Oriented Programming in Swift [Session 408] &lt;https://developer.apple.com/videos/play/wwdc2015-408/&gt;, slides 168 and on, once he begins talking about Protocol Extensions, is the relevant part. It looks like the functionality that you&#39;ve described is already present in this feature.<br>&gt; <br>&gt; TJ<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 3:30 AM, David Scr?ve &lt;david.screve at dlta-studio.com &lt;mailto:david.screve at dlta-studio.com&gt;&gt; wrote:<br>&gt;         Hi Everyone,<br>&gt; <br>&gt;         Nice to see this new swift-evolution process?.I?m not sure to completely understand the whole process of requesting evolutions, but I?m trying<br>&gt; to do?<br>&gt; <br>&gt;         As I develop sort of framework, I usually have classes that I wanted to partially in the framework and force the user to implement others parts.<br>&gt; <br>&gt;         For example, I have a WebService class that manage the whole process to perform asynchronous call, error management.<br>&gt;         This class has an abstract property that is specific for each WebService call.<br>&gt; <br>&gt;         Then I would like to make the URL property abstract and, consequently, the whole WebService class abstract : The WebService cannot be directly instantiated.<br>&gt; <br>&gt;         The goal of this feature would be to extend to method.<br>&gt;         This behavior already exists in Java and is really useful.<br>&gt; <br>&gt;         The workaround is to make an URL property that returns invalid value or make assertion, but the error is only detected at runtime.<br>&gt; <br>&gt;         My proposal would be to just add a keyword before func, class or var. An abstract property or func should not provide implementation.<br>&gt; <br>&gt;         Regards,<br>&gt; <br>&gt; <br>&gt; David<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/4f5b3614/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4233 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/4f5b3614/attachment-0001.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December  4, 2015 at 04:00:00am</p></header><div class="content"><p>Hello,<br></p><p>This is an interesting example. I can&#39;t refute it without questioning<br>decisions/intent rather than code so I&#39;ll just say that the `abstract`<br>quality  you&#39;re after still seems like it should be fit into the protocol<br>family of features.<br></p><p>TJ<br></p><p>On Fri, Dec 4, 2015 at 3:56 AM, David Scr?ve &lt;david.screve at dlta-studio.com&gt;<br>wrote:<br></p><p>&gt; Hello TJ,<br>&gt;<br>&gt; Actually not completely?Protocol does not handle properties storage. Only<br>&gt; class (and struct) can be made abstract.<br>&gt;<br>&gt; Doing this with protocol and class required the use of both and you need<br>&gt; to enforce developer to inherit from class and implement protocol.. An<br>&gt; abstract class encapsulate both on this in a single entity.<br>&gt;<br>&gt; Here is a sample class for WebService :<br>&gt;<br>&gt; class WebService {<br>&gt;     private var lastModified : NSDate<br>&gt;     var url : String?<br>&gt;<br>&gt;     init() {<br>&gt;         lastModified=NSDate()<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     func performCall() {<br>&gt;         print(self.url)<br>&gt;         self.lastModified=NSDate()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; As written below, I can create a WebService instance?but I would like to<br>&gt; forbid this because URL is a property that must be implemented by inherited<br>&gt; classes.<br>&gt;<br>&gt; I I use a protocol and Protocol extension, I will not be able to have<br>&gt; lastModified stored value.<br>&gt;<br>&gt; My proposal is to add abstract keyword as below :<br>&gt;<br>&gt; abstract class WebService {<br>&gt;     private var lastModified : NSDate<br>&gt;     abstract var url : String?<br>&gt;<br>&gt;     init() {<br>&gt;         lastModified=NSDate()<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     func performCall() {<br>&gt;         print(self.url)<br>&gt;         self.lastModified=NSDate()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Then I will not be able to create a WebService object, and enforced to<br>&gt; implement url property in inherited classes.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; David<br>&gt;<br>&gt; Le 4 d?c. 2015 ? 09:43, T.J. Usiyan &lt;griotspeak at gmail.com&gt; a ?crit :<br>&gt;<br>&gt; Hello David,<br>&gt;<br>&gt; This sounds like something that can be accomplished with protocols and<br>&gt; default implementations provided in protocol extensions. If you&#39;ve watched Protocol-Oriented<br>&gt; Programming in Swift [Session 408]<br>&gt; &lt;https://developer.apple.com/videos/play/wwdc2015-408/&gt;, slides 168 and<br>&gt; on, once he begins talking about Protocol Extensions, is the relevant part.<br>&gt; It looks like the functionality that you&#39;ve described is already present in<br>&gt; this feature.<br>&gt;<br>&gt; TJ<br>&gt;<br>&gt; On Fri, Dec 4, 2015 at 3:30 AM, David Scr?ve &lt;david.screve at dlta-studio.com<br>&gt; &gt; wrote:<br>&gt;<br>&gt;&gt;         Hi Everyone,<br>&gt;&gt;<br>&gt;&gt;         Nice to see this new swift-evolution process?.I?m not sure to<br>&gt;&gt; completely understand the whole process of requesting evolutions, but I?m<br>&gt;&gt; trying<br>&gt;&gt; to do?<br>&gt;&gt;<br>&gt;&gt;         As I develop sort of framework, I usually have classes that I<br>&gt;&gt; wanted to partially in the framework and force the user to implement others<br>&gt;&gt; parts.<br>&gt;&gt;<br>&gt;&gt;         For example, I have a WebService class that manage the whole<br>&gt;&gt; process to perform asynchronous call, error management.<br>&gt;&gt;         This class has an abstract property that is specific for each<br>&gt;&gt; WebService call.<br>&gt;&gt;<br>&gt;&gt;         Then I would like to make the URL property abstract and,<br>&gt;&gt; consequently, the whole WebService class abstract : The WebService cannot<br>&gt;&gt; be directly instantiated.<br>&gt;&gt;<br>&gt;&gt;         The goal of this feature would be to extend to method.<br>&gt;&gt;         This behavior already exists in Java and is really useful.<br>&gt;&gt;<br>&gt;&gt;         The workaround is to make an URL property that returns invalid<br>&gt;&gt; value or make assertion, but the error is only detected at runtime.<br>&gt;&gt;<br>&gt;&gt;         My proposal would be to just add a keyword before func, class or<br>&gt;&gt; var. An abstract property or func should not provide implementation.<br>&gt;&gt;<br>&gt;&gt;         Regards,<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; David<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/bef3b9e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a83279e420d8a16da6441b8333b93775?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>David Scrève</string> &lt;david.screve at dlta-studio.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>Yes, <br></p><p>	I agree with you that abstract might be attached to protocol family of feature?but protocol already manage the ?abstract? feature if you don?t consider the value storage issue.<br></p><p>	Actually, there 2 ways to add this feature : <br></p><p>	1 -  Protocol way : We need to add value storage to protocol<br>	2 -  class way : We need to add abstract for method/properties<br></p><p>	The question is : Is adding value storage to protocol is a good thing ?  It might create confusion between classes and protocol, maybe.<br></p><p>	But, on the other side, there is not real reason to limit class extension to only method and not to properties. In this case, extending protocol to value container might be an interesting way to respond to this. Anyway, we might keep the abstract keyword.<br></p><p>	Regards,<br></p><p>David<br></p><p>&gt; Le 4 d?c. 2015 ? 10:11, T.J. Usiyan &lt;griotspeak at gmail.com&gt; a ?crit :<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; This is an interesting example. I can&#39;t refute it without questioning decisions/intent rather than code so I&#39;ll just say that the `abstract` quality  you&#39;re after still seems like it should be fit into the protocol family of features.<br>&gt; <br>&gt; TJ<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 3:56 AM, David Scr?ve &lt;david.screve at dlta-studio.com &lt;mailto:david.screve at dlta-studio.com&gt;&gt; wrote:<br>&gt; 	Hello TJ,<br>&gt; <br>&gt; 	Actually not completely?Protocol does not handle properties storage. Only class (and struct) can be made abstract.<br>&gt; <br>&gt; 	Doing this with protocol and class required the use of both and you need to enforce developer to inherit from class and implement protocol.. An abstract class encapsulate both on this in a single entity.<br>&gt; <br>&gt; 	Here is a sample class for WebService : <br>&gt; <br>&gt; class WebService {<br>&gt;     private var lastModified : NSDate<br>&gt;     var url : String?<br>&gt; <br>&gt;     init() {<br>&gt;         lastModified=NSDate()<br>&gt;     }<br>&gt;     <br>&gt;     func performCall() {<br>&gt;         print(self.url)<br>&gt;         self.lastModified=NSDate()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; As written below, I can create a WebService instance?but I would like to forbid this because URL is a property that must be implemented by inherited classes.<br>&gt; <br>&gt; I I use a protocol and Protocol extension, I will not be able to have lastModified stored value.<br>&gt; <br>&gt; My proposal is to add abstract keyword as below : <br>&gt; <br>&gt; abstract class WebService {<br>&gt;     private var lastModified : NSDate<br>&gt;     abstract var url : String?<br>&gt; <br>&gt;     init() {<br>&gt;         lastModified=NSDate()<br>&gt;     }<br>&gt;     <br>&gt;     func performCall() {<br>&gt;         print(self.url)<br>&gt;         self.lastModified=NSDate()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Then I will not be able to create a WebService object, and enforced to implement url property in inherited classes.<br>&gt; <br>&gt; 	Regards,<br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt; Le 4 d?c. 2015 ? 09:43, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; a ?crit :<br>&gt;&gt; <br>&gt;&gt; Hello David,<br>&gt;&gt; <br>&gt;&gt; This sounds like something that can be accomplished with protocols and default implementations provided in protocol extensions. If you&#39;ve watched Protocol-Oriented Programming in Swift [Session 408] &lt;https://developer.apple.com/videos/play/wwdc2015-408/&gt;, slides 168 and on, once he begins talking about Protocol Extensions, is the relevant part. It looks like the functionality that you&#39;ve described is already present in this feature.<br>&gt;&gt; <br>&gt;&gt; TJ<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 4, 2015 at 3:30 AM, David Scr?ve &lt;david.screve at dlta-studio.com &lt;mailto:david.screve at dlta-studio.com&gt;&gt; wrote:<br>&gt;&gt;         Hi Everyone,<br>&gt;&gt; <br>&gt;&gt;         Nice to see this new swift-evolution process?.I?m not sure to completely understand the whole process of requesting evolutions, but I?m trying<br>&gt;&gt; to do?<br>&gt;&gt; <br>&gt;&gt;         As I develop sort of framework, I usually have classes that I wanted to partially in the framework and force the user to implement others parts.<br>&gt;&gt; <br>&gt;&gt;         For example, I have a WebService class that manage the whole process to perform asynchronous call, error management.<br>&gt;&gt;         This class has an abstract property that is specific for each WebService call.<br>&gt;&gt; <br>&gt;&gt;         Then I would like to make the URL property abstract and, consequently, the whole WebService class abstract : The WebService cannot be directly instantiated.<br>&gt;&gt; <br>&gt;&gt;         The goal of this feature would be to extend to method.<br>&gt;&gt;         This behavior already exists in Java and is really useful.<br>&gt;&gt; <br>&gt;&gt;         The workaround is to make an URL property that returns invalid value or make assertion, but the error is only detected at runtime.<br>&gt;&gt; <br>&gt;&gt;         My proposal would be to just add a keyword before func, class or var. An abstract property or func should not provide implementation.<br>&gt;&gt; <br>&gt;&gt;         Regards,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/f46fd7a9/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4233 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/f46fd7a9/attachment-0001.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a03106b2fbee9e0ada822057dfd0b6d3?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>Tal Atlas</string> &lt;me at tal.by&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>I don&#39;t think there&#39;d be much confusion with allowing protocol extensions<br>to contain stored types but I could easily see that being very difficult to<br>implement.<br>On Fri, Dec 4, 2015 at 4:24 AM David Scr?ve &lt;david.screve at dlta-studio.com&gt;<br>wrote:<br></p><p>&gt; Yes,<br>&gt;<br>&gt; I agree with you that abstract might be attached to protocol family of<br>&gt; feature?but protocol already manage the ?abstract? feature if you don?t<br>&gt; consider the value storage issue.<br>&gt;<br>&gt; Actually, there 2 ways to add this feature :<br>&gt;<br>&gt; 1 -  Protocol way : We need to add value storage to protocol<br>&gt; 2 -  class way : We need to add abstract for method/properties<br>&gt;<br>&gt; The question is : Is adding value storage to protocol is a good thing ?<br>&gt; It might create confusion between classes and protocol, maybe.<br>&gt;<br>&gt; But, on the other side, there is not real reason to limit class extension<br>&gt; to only method and not to properties. In this case, extending protocol to<br>&gt; value container might be an interesting way to respond to this. Anyway, we<br>&gt; might keep the abstract keyword.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; David<br>&gt;<br>&gt; Le 4 d?c. 2015 ? 10:11, T.J. Usiyan &lt;griotspeak at gmail.com&gt; a ?crit :<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; This is an interesting example. I can&#39;t refute it without questioning<br>&gt; decisions/intent rather than code so I&#39;ll just say that the `abstract`<br>&gt; quality  you&#39;re after still seems like it should be fit into the protocol<br>&gt; family of features.<br>&gt;<br>&gt; TJ<br>&gt;<br>&gt; On Fri, Dec 4, 2015 at 3:56 AM, David Scr?ve &lt;david.screve at dlta-studio.com<br>&gt; &gt; wrote:<br>&gt;<br>&gt;&gt; Hello TJ,<br>&gt;&gt;<br>&gt;&gt; Actually not completely?Protocol does not handle properties storage. Only<br>&gt;&gt; class (and struct) can be made abstract.<br>&gt;&gt;<br>&gt;&gt; Doing this with protocol and class required the use of both and you need<br>&gt;&gt; to enforce developer to inherit from class and implement protocol.. An<br>&gt;&gt; abstract class encapsulate both on this in a single entity.<br>&gt;&gt;<br>&gt;&gt; Here is a sample class for WebService :<br>&gt;&gt;<br>&gt;&gt; class WebService {<br>&gt;&gt;     private var lastModified : NSDate<br>&gt;&gt;     var url : String?<br>&gt;&gt;<br>&gt;&gt;     init() {<br>&gt;&gt;         lastModified=NSDate()<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     func performCall() {<br>&gt;&gt;         print(self.url)<br>&gt;&gt;         self.lastModified=NSDate()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; As written below, I can create a WebService instance?but I would like to<br>&gt;&gt; forbid this because URL is a property that must be implemented by inherited<br>&gt;&gt; classes.<br>&gt;&gt;<br>&gt;&gt; I I use a protocol and Protocol extension, I will not be able to have<br>&gt;&gt; lastModified stored value.<br>&gt;&gt;<br>&gt;&gt; My proposal is to add abstract keyword as below :<br>&gt;&gt;<br>&gt;&gt; abstract class WebService {<br>&gt;&gt;     private var lastModified : NSDate<br>&gt;&gt;     abstract var url : String?<br>&gt;&gt;<br>&gt;&gt;     init() {<br>&gt;&gt;         lastModified=NSDate()<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;     func performCall() {<br>&gt;&gt;         print(self.url)<br>&gt;&gt;         self.lastModified=NSDate()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Then I will not be able to create a WebService object, and enforced to<br>&gt;&gt; implement url property in inherited classes.<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt;<br>&gt;&gt; David<br>&gt;&gt;<br>&gt;&gt; Le 4 d?c. 2015 ? 09:43, T.J. Usiyan &lt;griotspeak at gmail.com&gt; a ?crit :<br>&gt;&gt;<br>&gt;&gt; Hello David,<br>&gt;&gt;<br>&gt;&gt; This sounds like something that can be accomplished with protocols and<br>&gt;&gt; default implementations provided in protocol extensions. If you&#39;ve watched Protocol-Oriented<br>&gt;&gt; Programming in Swift [Session 408]<br>&gt;&gt; &lt;https://developer.apple.com/videos/play/wwdc2015-408/&gt;, slides 168 and<br>&gt;&gt; on, once he begins talking about Protocol Extensions, is the relevant part.<br>&gt;&gt; It looks like the functionality that you&#39;ve described is already present in<br>&gt;&gt; this feature.<br>&gt;&gt;<br>&gt;&gt; TJ<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 4, 2015 at 3:30 AM, David Scr?ve &lt;<br>&gt;&gt; david.screve at dlta-studio.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;         Hi Everyone,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Nice to see this new swift-evolution process?.I?m not sure to<br>&gt;&gt;&gt; completely understand the whole process of requesting evolutions, but I?m<br>&gt;&gt;&gt; trying<br>&gt;&gt;&gt; to do?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         As I develop sort of framework, I usually have classes that I<br>&gt;&gt;&gt; wanted to partially in the framework and force the user to implement others<br>&gt;&gt;&gt; parts.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         For example, I have a WebService class that manage the whole<br>&gt;&gt;&gt; process to perform asynchronous call, error management.<br>&gt;&gt;&gt;         This class has an abstract property that is specific for each<br>&gt;&gt;&gt; WebService call.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Then I would like to make the URL property abstract and,<br>&gt;&gt;&gt; consequently, the whole WebService class abstract : The WebService cannot<br>&gt;&gt;&gt; be directly instantiated.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         The goal of this feature would be to extend to method.<br>&gt;&gt;&gt;         This behavior already exists in Java and is really useful.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         The workaround is to make an URL property that returns invalid<br>&gt;&gt;&gt; value or make assertion, but the error is only detected at runtime.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         My proposal would be to just add a keyword before func, class or<br>&gt;&gt;&gt; var. An abstract property or func should not provide implementation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Regards,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; David<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/53714029/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>abstract keyWord proposal</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 8:36 AM, Tal Atlas &lt;me at tal.by&gt; wrote:<br>&gt; <br>&gt; I don&#39;t think there&#39;d be much confusion with allowing protocol extensions to contain stored types but I could easily see that being very difficult to implement. <br></p><p>I agree, I believe allowing stored types either in protocols or in classes might be very difficult to implement. I don?t even think this is allowed in Objective-C, probably for the same reason.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
