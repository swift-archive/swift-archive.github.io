<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 14, 2016 at 12:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 14, 2016 at 01:00:00pm</p></header><div class="content"><p>+1. I am in favor of keeping and documenting single dollar sign as a valid identifier.<br></p><p>I personally find it very convenient to have it as a valid identifier, although I don’t use Dollar library.<br></p><p>&gt; On Oct 14, 2016, at 12:59 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October 14, 2016 at 04:00:00pm</p></header><div class="content"><p>As the author of the patch that introduced this and the patch that will come out of this discussion, I have no problems one way or the other.  Just bear in mind that if $ is an identifier head character then it cannot be used in operators - something I have a library with a vested interest in.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 14, 2016, at 3:59 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/b15aba00/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>October 14, 2016 at 01:00:00pm</p></header><div class="content"><p>Agree with Robert here. I&#39;d rather be able to use it as part of operators. Currently the character set for operators and identifier head are mutually exclusive. So this proposal will remove that possibility. This deserves some discussion.<br></p><p>Daniel Duan<br>Sent from my iPhone<br></p><p>&gt; On Oct 14, 2016, at 1:33 PM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As the author of the patch that introduced this and the patch that will come out of this discussion, I have no problems one way or the other.  Just bear in mind that if $ is an identifier head character then it cannot be used in operators - something I have a library with a vested interest in.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt;&gt; On Oct 14, 2016, at 3:59 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/3b0deb53/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 14, 2016 at 01:00:00pm</p></header><div class="content"><p>I don’t think $ will be become available to be used as an operator if we remove its identifier use. <br></p><p>&gt; On Oct 14, 2016, at 1:49 PM, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Agree with Robert here. I&#39;d rather be able to use it as part of operators. Currently the character set for operators and identifier head are mutually exclusive. So this proposal will remove that possibility. This deserves some discussion.<br>&gt; <br>&gt; Daniel Duan<br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Oct 14, 2016, at 1:33 PM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; As the author of the patch that introduced this and the patch that will come out of this discussion, I have no problems one way or the other.  Just bear in mind that if $ is an identifier head character then it cannot be used in operators - something I have a library with a vested interest in.<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 14, 2016, at 3:59 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/1131ce25/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23bb59b802aac41afdf8ffffae1040d5?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Alex Martini</string> &lt;amartini at apple.com&gt;<p>October 14, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 1:53 PM, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 14, 2016, at 1:49 PM, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Agree with Robert here. I&#39;d rather be able to use it as part of operators. Currently the character set for operators and identifier head are mutually exclusive. So this proposal will remove that possibility. This deserves some discussion.<br>&gt;&gt; <br>&gt;&gt; Daniel Duan<br>&gt;&gt; Sent from my iPhone<br>&gt; <br></p><p>&gt; I don’t think $ will be become available to be used as an operator if we remove its identifier use. <br></p><p><br>If $ is an operator, then &quot;$2&quot; looks like the custom unary prefix operator &quot;$&quot; applied to &quot;2&quot;.  That&#39;s a problem; it needs to be parsed as the identifier &quot;$2&quot; instead.<br></p><p>We could prevent &quot;$&quot; from being allowed a prefix operator.  There is precedent for the language reserving operators that would otherwise be allowed, such as postfix &quot;?&quot; and postfix &quot;!&quot;.<br></p><p>-- Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/c8c2ece7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>October 14, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 3:42 PM, Alex Martini via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 14, 2016, at 1:53 PM, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 14, 2016, at 1:49 PM, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agree with Robert here. I&#39;d rather be able to use it as part of operators. Currently the character set for operators and identifier head are mutually exclusive. So this proposal will remove that possibility. This deserves some discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt; <br>&gt;&gt; I don’t think $ will be become available to be used as an operator if we remove its identifier use. <br>&gt; <br>&gt; <br>&gt; If $ is an operator, then &quot;$2&quot; looks like the custom unary prefix operator &quot;$&quot; applied to &quot;2&quot;.  That&#39;s a problem; it needs to be parsed as the identifier &quot;$2&quot; instead.<br>&gt; <br>&gt; We could prevent &quot;$&quot; from being allowed a prefix operator.  There is precedent for the language reserving operators that would otherwise be allowed, such as postfix &quot;?&quot; and postfix &quot;!&quot;.<br>&gt; <br></p><p>Yes, we might have to special case the parser for this. I imagine some flag such as “isParsingClosureWithoutExplicitParameter”. At least it’s not impossible 😉<br></p><p>&gt; — Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/342471cf/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>October 15, 2016 at 12:00:00am</p></header><div class="content"><p>I’m a bit curious about how `$` is/would be used as a prefix operator! Perhaps I’m not creative :-(<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Oct 14, 2016, at 6:42 PM, Alex Martini via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 14, 2016, at 1:53 PM, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 14, 2016, at 1:49 PM, Daniel Duan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agree with Robert here. I&#39;d rather be able to use it as part of operators. Currently the character set for operators and identifier head are mutually exclusive. So this proposal will remove that possibility. This deserves some discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; I don’t think $ will be become available to be used as an operator if we remove its identifier use. <br>&gt; <br>&gt; If $ is an operator, then &quot;$2&quot; looks like the custom unary prefix operator &quot;$&quot; applied to &quot;2&quot;.  That&#39;s a problem; it needs to be parsed as the identifier &quot;$2&quot; instead.<br>&gt; <br>&gt; We could prevent &quot;$&quot; from being allowed a prefix operator.  There is precedent for the language reserving operators that would otherwise be allowed, such as postfix &quot;?&quot; and postfix &quot;!&quot;.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>October 15, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; I’m a bit curious about how `$` is/would be used as a prefix operator!<br>Clarifying: what type of operations would it be used for, and postfix too!<br></p><p>Regards,<br>Will Stanton<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5931766360e7b16042376524df12d61c?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jonathan S. Shapiro</string> &lt;jonathan.s.shapiro at gmail.com&gt;<p>October 21, 2016 at 07:00:00pm</p></header><div class="content"><p>On Fri, Oct 14, 2016 at 9:29 PM, Will Stanton via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m a bit curious about how `$` is/would be used as a prefix operator!<br>&gt; Perhaps I’m not creative :-(<br>&gt;<br></p><p>Well for one thing, $(0) can be understood as a value constructor for a<br>currency object having a value zero...<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161021/d6788f6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>October 22, 2016 at 03:00:00am</p></header><div class="content"><p>On $ specifically, I found this Wikipedia article listing native operators from other languages: https://en.wikipedia.org/wiki/Operator_(computer_programming).<br>Haskell was listed with $ as an operator (‘Anything appearing after it will take precedence over anything that comes before’ per http://stackoverflow.com/questions/940382/haskell-difference-between-dot-and-dollar-sign)<br></p><p>I’m unconvinced a great case for `$` as an operator exists, so opposed to the source-breaking change, and supportive of SE-144.<br></p><p><br>Jonathan,<br>Thanks for the reply and Jacob, Erica, and Xiaodi as well for drafting a broader proposal.<br>Were you suggesting `$(0)` as a way to initialize a type named `$` or more like `$0` as a literal?<br>As a decimal-number/currency-type literal operator, I remain unconvinced that justifies a source-breaking change for reasons discussed on list (which dollar? and consistency).<br>Addressing multiple problems seems like a good direction though (I like the list: https://github.com/jsshapiro/swift-evolution/blob/unicode-id-op/proposals/NNNN-refining-identifiers-and-operators.md#prior-discussion-threads--proposals).<br></p><p>A thought on the draft:<br>&gt; 	• Identifiers consisting of an initial &#39;$&#39; (U+0024 DOLLAR SIGN) followed by one or more decimal digits [&#39;0&#39;...&#39;9&#39;] are prohibited in defining occurrences. These identifiers are reserved for use by the language as anonymous closure parameter names.  <br>Would it make sense/is it already the case for closure parameters to be let-like constants? (I don’t know how the compiler works it, but the error ‘Cannot assign to value: %something% is immutable’ makes me think no.) Can closure parameters be treated as automatically generated identifiers instead of a special restriction in name?<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Oct 21, 2016, at 10:48 PM, Jonathan S. Shapiro &lt;jonathan.s.shapiro at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Oct 14, 2016 at 9:29 PM, Will Stanton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I’m a bit curious about how `$` is/would be used as a prefix operator! Perhaps I’m not creative :-(<br>&gt; <br>&gt; Well for one thing, $(0) can be understood as a value constructor for a currency object having a value zero...<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>October 25, 2016 at 07:00:00am</p></header><div class="content"><p>I would prefer for $ being available as operator symbol, so -1 to the proposal.<br></p><p>-Thorsten<br></p><p>&gt; Am 22.10.2016 um 09:22 schrieb Will Stanton via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; On $ specifically, I found this Wikipedia article listing native operators from other languages: https://en.wikipedia.org/wiki/Operator_(computer_programming).<br>&gt; Haskell was listed with $ as an operator (‘Anything appearing after it will take precedence over anything that comes before’ per http://stackoverflow.com/questions/940382/haskell-difference-between-dot-and-dollar-sign)<br>&gt; <br>&gt; I’m unconvinced a great case for `$` as an operator exists, so opposed to the source-breaking change, and supportive of SE-144.<br>&gt; <br>&gt; <br>&gt; Jonathan,<br>&gt; Thanks for the reply and Jacob, Erica, and Xiaodi as well for drafting a broader proposal.<br>&gt; Were you suggesting `$(0)` as a way to initialize a type named `$` or more like `$0` as a literal?<br>&gt; As a decimal-number/currency-type literal operator, I remain unconvinced that justifies a source-breaking change for reasons discussed on list (which dollar? and consistency).<br>&gt; Addressing multiple problems seems like a good direction though (I like the list: https://github.com/jsshapiro/swift-evolution/blob/unicode-id-op/proposals/NNNN-refining-identifiers-and-operators.md#prior-discussion-threads--proposals).<br>&gt; <br>&gt; A thought on the draft:<br>&gt;&gt;    • Identifiers consisting of an initial &#39;$&#39; (U+0024 DOLLAR SIGN) followed by one or more decimal digits [&#39;0&#39;...&#39;9&#39;] are prohibited in defining occurrences. These identifiers are reserved for use by the language as anonymous closure parameter names.  <br>&gt; Would it make sense/is it already the case for closure parameters to be let-like constants? (I don’t know how the compiler works it, but the error ‘Cannot assign to value: %something% is immutable’ makes me think no.) Can closure parameters be treated as automatically generated identifiers instead of a special restriction in name?<br>&gt; <br>&gt; Regards,<br>&gt; Will Stanton<br>&gt; <br>&gt;&gt; On Oct 21, 2016, at 10:48 PM, Jonathan S. Shapiro &lt;jonathan.s.shapiro at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Oct 14, 2016 at 9:29 PM, Will Stanton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I’m a bit curious about how `$` is/would be used as a prefix operator! Perhaps I’m not creative :-(<br>&gt;&gt; <br>&gt;&gt; Well for one thing, $(0) can be understood as a value constructor for a currency object having a value zero...<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5931766360e7b16042376524df12d61c?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jonathan S. Shapiro</string> &lt;jonathan.s.shapiro at gmail.com&gt;<p>October 21, 2016 at 07:00:00pm</p></header><div class="content"><p>On Fri, Oct 14, 2016 at 1:53 PM, Hooman Mehr via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I don’t think $ will be become available to be used as an operator if we<br>&gt; remove its identifier use.<br>&gt;<br></p><p>I&#39;m about to put out a revised proposal for operators and symbol<br>identifiers that addresses this.<br></p><p><br>Jonathan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161021/ce642059/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0f13ec2f877f56e92f812fc00a6a035?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Felipe Cypriano</string> &lt;felipe at cypriano.me&gt;<p>October 14, 2016 at 01:00:00pm</p></header><div class="content"><p>-1<br></p><p>I agree with the motivations to remove it.<br></p><p><br>On Fri, Oct 14, 2016, at 12:59, Chris Lattner via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid<br>&gt; Identifier&quot;<br>&gt; begins now and runs through October 18. The proposal is<br>&gt; available here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process.<br>&gt; All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction<br>&gt; of Swift.<br>&gt; When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;   change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar<br>&gt;   feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;   reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/d8ab09a2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October 14, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Oct 14, 2016, at 12:59 PM, Chris Lattner wrote:<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. I agree with the reasons for removal, and do not consider the existence of a single library that depends on undocumented behavior to be sufficient reason for this change.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-Kevin Ballard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>October 14, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1.  I don’t like the idea of a user-defined `$` identifier.  I agree with the reasons for removing it.  If it is allowed as a user-defined entity it feels an operator is more appropriate.  Otherwise, it could be reserved as a special, compiler-defined identifier (like that `$n` closure argument identifiers) for future use in some way.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, removing it was a good decision.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.  Despite it’s use in some popular libraries it has always seemed out of place as an identifier to me.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have used JavaScript libraries that use this convention.  I don’t think this style of library design is a good fit for Swift.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4434bcd7f46d7b2dbaabc58dd349ee29?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Richard Wei</string> &lt;xinranmsn at gmail.com&gt;<p>October 14, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br>-1. If it were a valid identifier, $ would look even more confusing when used as a type name. I’d rather see $ used as an operator. <br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>No.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I don’t think this is a Swifty style.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More than a quick reading.<br></p><p>-Richard<br></p><p>&gt; On Oct 14, 2016, at 14:59, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>October 14, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 2:59 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br></p><p>&gt; * What is your evaluation of the proposal?<br></p><p>-1. What is the point of this?<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>The “problem” seems to be that one specific library misused a character that was not documented to be legal in an identifier. The solution would seem to be to fix the library, not change the language.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, it does not. $ by itself looks far more like an operator than an identifier, and $ as the beginning of an identifier conflicts with the special $0, $1, etc. keywords that are already used by Swift.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The discussion of identifiers beginning with $ brings to mind Perl and similar scripting languages, in which scalar variables look like $foo, $bar, etc. I imagine that this is why $ was chosen for the $0, $1, etc. keywords. As a result, when seeing something like $foo in the language, one’s mind tends to interpret this as a variable named “foo” with the $ doing something to it, describing something about it, or something similar.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal, read the thread.<br></p><p>Charles<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>October 14, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 12:59 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>-1 <br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>No. $0 $1 <br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. $ and _ are popular in JS but I think the functionality of theses libraries should be moved to extensions to the specific types in Swift .<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>JS. jQuery <br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Quick study. <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/f8744a6e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October 15, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 14 Oct 2016, at 20:59, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>Not in favour, sorry. While I&#39;ve used this kind of pattern in Javascript I just don&#39;t see what it really adds compared to a more explicit name. As a general rule I prefer everything to be explicitly named except where a case is genuinely trivial (like the dollar syntax for closure arguments).<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>If it had more benefits maybe, but I just don&#39;t see them.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, I think that allowing the dollar sign could be confusing alongside dollar sign variables in closures, and I feel that Swift is better being explicit where possible.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>It&#39;s similar to a lot of Javascript libraries that use the dollar sign for values, but I&#39;ve never felt that I was really gaining anything significant by using it as a variable name.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>October 15, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 12:59 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot; begins now and runs through October 18. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br></p><p>-1 from me.<br></p><p>The library in question was exploiting a bug in the compiler. I went and checked the officially published Swift 1.0 grammar and “$” is not a valid identifier.<br></p><p>I’m sympathetic to the argument that the behavior shipped in three major versions but ultimately all this does is create an opportunity for cute tricks.<br></p><p>Russ<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/428c01fbcb7520555ed00f2b06246d16?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Fons Rademakers</string> &lt;Fons.Rademakers at cern.ch&gt;<p>October 16, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>no<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>no<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>perl feeling, don’t like it as part of a modern clear and concise language.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br></p><p>quick reading.<br></p><p><br>&gt; More information about the Swift evolution process is available at<br>&gt; <br></p><p><br>--------------------------------------------------------------------------<br>Dr. Fons Rademakers      CERN - European Organization for Nuclear Research<br>Chief Research Officer   1211 Geneve 23, Switzerland<br>CERN openlab             Tel: +41227679248            Mobile: +41754113742<br>--------------------------------------------------------------------------<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>October 16, 2016 at 09:00:00am</p></header><div class="content"><p>Proposal link:<br></p><p>        https://github.com/apple/swift-evolution/blob/master/propo<br>sals/0144-allow-single-dollar-sign-as-valid-identifier.md<br></p><p><br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>-1.<br></p><p>The proposal does not actually provide motivation for keeping $ beyond &quot;the<br>Dollar library already uses it&quot;.<br></p><p>A more Swifty way for a library to introduce these operations would be with<br>extensions. Here are some suggestions, based off the first several<br>operations described in the library&#39;s readme:<br></p><p>$.at → convenience subscript(Index...) for Collection<br>$.chunk → convenience function for Sequence<br>$.compact → flatMap{$0}<br>$.contains → already exists as Sequence.contains<br>$.cycle → convenience function for Collection<br>$.difference → convenience function on Collection, or just use Set<br>operations, or filter<br>$.each → exists as Sequence.forEach<br>$.every → extension on Sequence<br>$.factorial → convenience method or postfix operator for Integer<br>$.fetch → convenience function on Collection<br>and so on.<br></p><p>It looks like the author&#39;s Cent &lt;https://github.com/ankurp/Cent&gt; library is<br>already taking this approach.<br></p><p><br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>Yes, but the change has already been made: removing $ as a valid identifier<br>;-)<br></p><p><br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Not really. If anything, IMO, the dollar sign feels more like an operator<br>character. (However, it&#39;s probably here to stay in identifiers because of<br>closure parameters and LLDB variables.)<br></p><p><br></p><p>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>The Dollar library resembles the style of JavaScript libraries such as<br>jQuery or Underscore, but that isn&#39;t a positive thing in my mind — as<br>mentioned above, the Swift way of doing things is different.<br></p><p><br></p><p>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Thorough reading of the proposal; brief glance at the library&#39;s readme on<br>GitHub.  Lots of time thinking about operator &amp; identifier characters for a<br>forthcoming proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/fcadef4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>October 16, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>I am against it.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change<br>to Swift?<br></p><p>No - if this change were made it would be a regression. The rationale for<br>removing it in the first place was and remains valid.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, it goes in the opposite direction. $ is not valid as the first<br>character of a user-defined identifier and therefore should not be a valid<br>identifier by itself.<br></p><p>Side-note: Personally I think $ as the first character of an identifier<br>should be reserved for shorthand ways to do other things, in line with how<br>it is currently used in Swift.<br>If used consistently, programmers will know they are seeing a language<br>shortcut. Allowing $ as an identifier would break some of the natural<br>intuition a programmer is able to use when learning and reading Swift code.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?<br></p><p>The proposal seems purely for the benefit of the Dollar library, which<br>could work just as well with any other identifier. Code using the dollar<br>library is reminiscent of some other languages and programming styles. This<br>isn&#39;t really a comment about the proposal itself, more the motivation<br>behind it.<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>I read the proposal and was perplexed by it, so I looked into the Dollar<br>library to try and understand the motivation behind the proposal. It is a<br>clever library with some nice features and tricks, but in many ways it<br>seems to be designed to enable programmers to write non-Swifty code in<br>Swift. I can understand the frustration of the author and users of the<br>library, but its functionality could be provided in a Swifty way using<br>extensions and generics, and I think if those users embraced this they<br>would ultimately appreciate the change. If not then they might as well<br>stick to another language.<br></p><p><br>On Sun, 16 Oct 2016 at 17:31 Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br>&gt;<br>&gt; -1.<br>&gt;<br>&gt; The proposal does not actually provide motivation for keeping $ beyond<br>&gt; &quot;the Dollar library already uses it&quot;.<br>&gt;<br>&gt; A more Swifty way for a library to introduce these operations would be<br>&gt; with extensions. Here are some suggestions, based off the first several<br>&gt; operations described in the library&#39;s readme:<br>&gt;<br>&gt; $.at → convenience subscript(Index...) for Collection<br>&gt; $.chunk → convenience function for Sequence<br>&gt; $.compact → flatMap{$0}<br>&gt; $.contains → already exists as Sequence.contains<br>&gt; $.cycle → convenience function for Collection<br>&gt; $.difference → convenience function on Collection, or just use Set<br>&gt; operations, or filter<br>&gt; $.each → exists as Sequence.forEach<br>&gt; $.every → extension on Sequence<br>&gt; $.factorial → convenience method or postfix operator for Integer<br>&gt; $.fetch → convenience function on Collection<br>&gt; and so on.<br>&gt;<br>&gt; It looks like the author&#39;s Cent &lt;https://github.com/ankurp/Cent&gt; library<br>&gt; is already taking this approach.<br>&gt;<br>&gt;<br>&gt;<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>&gt;<br>&gt; Yes, but the change has already been made: removing $ as a valid<br>&gt; identifier ;-)<br>&gt;<br>&gt;<br>&gt;<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; Not really. If anything, IMO, the dollar sign feels more like an operator<br>&gt; character. (However, it&#39;s probably here to stay in identifiers because of<br>&gt; closure parameters and LLDB variables.)<br>&gt;<br>&gt;<br>&gt;<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt;<br>&gt; The Dollar library resembles the style of JavaScript libraries such as<br>&gt; jQuery or Underscore, but that isn&#39;t a positive thing in my mind — as<br>&gt; mentioned above, the Swift way of doing things is different.<br>&gt;<br>&gt;<br>&gt;<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt;<br>&gt; Thorough reading of the proposal; brief glance at the library&#39;s readme on<br>&gt; GitHub.  Lots of time thinking about operator &amp; identifier characters for a<br>&gt; forthcoming proposal.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/3f9d4f5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/46439321e8b5b5ba0944eef50e18c3a3?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jean-Denis Muys</string> &lt;jdmuys at gmail.com&gt;<p>October 18, 2016 at 08:00:00am</p></header><div class="content"><p>While I already tersely supported this proposal, following all the negative<br>reactions, I feel compelled to revisit my position. The main reason is that<br>it strikes me that most points of view so far, including mine, were really<br>culturally short sighted, and far too much US-centric.<br></p><p>I totally agree that &#39;$&#39; being use by one (or even several) piece of code<br>is not reason enough to change the language. But I also think that it being<br>used by only one piece of code is no reason to reject the change.<br></p><p>Most of us, including me, have been blinded by two things:<br></p><p>1- the use of the $ sign in other programming languages<br>2- the use of the $ sign in Swift as a prefix for implicitly declared<br>closure parameters<br></p><p>I think this second use is not Swifty at all. It clearly (to me) would fail<br>the litmus test &quot;if it wasn&#39;t there, would you add it to the language?&quot;. Of<br>course, it has been blessed by time, and it has *become* Swifty, by usage<br>because it&#39;s a useful feature, despite the choice of its syntax being so<br>ugly (to my non-american eyes).<br></p><p>Similarly, I believe the use of the $ in other language should not be a<br>guide in the decision here, either positively, nor negatively. We may pay<br>some mild attention to the concern that we should perhaps avoid some<br>confusion. I haven&#39;t seen much of that.<br></p><p>Now for the elephant in the room: &#39;$&#39; is a currency symbol. As such it<br>should be handled like any other currency symbol. Thinking otherwise would<br>be very culturally offensive.<br></p><p>So can I use € as an variable name in Swift? According to Xcode 8.1B3, yes.<br>Can I use any currency symbol as an variable name in Swift? According to<br>Xcode 8.1B3, not quite, but almost all of them.<br></p><p>According to Mac OS &quot;Emoji and Symbols&quot; browser, there are 37 currency<br>symbols in Unicode:<br></p><p>let currencyAndSymbols = &quot;$€¥¢£₽₨₩฿₺₮₱₭₴₦৲৳૱௹﷼₹₲₪₡₫៛₵₢₸₤₳₥₠₣₰₧₯₶&quot;<br>I tried every one of them as a variable name. All were accepted, except 3:<br>¥, ¢, £:<br></p><p>// let ¥ = 1 // error: expected pattern<br></p><p>Note the poor error message.<br></p><p>Here are 33 successful attempts:<br></p><p>let $ = 1<br></p><p>let € = 1<br></p><p>let ₽ = 1<br></p><p>let ₨ = 1<br></p><p>let ₩ = 1<br></p><p>let ฿ = 1<br></p><p>let ₺ = 1<br></p><p>let ₮ = 1<br></p><p>let ₱ = 1<br></p><p>let ₭ = 1<br></p><p>let ₴ = 1<br></p><p>let ₦ = 1<br></p><p>let ৲ = 1<br></p><p>let ৳ = 1<br></p><p>let ૱ = 1<br></p><p>let ௹ = 1<br></p><p>let ₹ = 1<br></p><p>let ₲ = 1<br></p><p>let ₪ = 1<br></p><p>let ₡ = 1<br></p><p>let ₫ = 1<br></p><p>let ៛ = 1<br></p><p>let ₵ = 1<br></p><p>let ₢ = 1<br></p><p>let ₸ = 1<br></p><p>let ₤ = 1<br></p><p>let ₳ = 1<br></p><p>let ₥ = 1<br></p><p>let ₠ = 1<br></p><p>let ₣ = 1<br></p><p>let ₰ = 1<br></p><p>let ₧ = 1<br></p><p>let ₯ = 1<br></p><p>let ₶ = 1<br></p><p>print(&quot;₶ = \(₶)&quot;)<br></p><p>print(₶+₶+₶)<br></p><p>And finally, there is the very weird Rial Sign: ﷼<br>It is ok to use it as an variable name too (again, according to Xcode8.1B3).<br>But when trying to use it, Xcode switches to right-to-left mode, which<br>makes for strange (for my occidental eyes) behaviour and display. All the<br>following is OK in Xcode:<br></p><p>// unusual Xcode right-to-left behavior with Rial Sign<br></p><p>let ﷼ = 21<br></p><p><br>print(&quot;﷼= \(﷼)&quot;) // will print ﷼= 21<br></p><p>Of course, this is just a data point, and Xcode8.1B3 should not be the<br>arbiter here. But I believe whether Swift accepts currency symbols as<br>variable names should be consistent. Either it accepts all of them, or it<br>includes all of them.<br></p><p>I see no reason to exclude them. On the contrary, it was a design feature<br>of Swift to relieve use from the shackles of the ASCII character set.<br></p><p>In conclusion, I believe this proposal must be accepted, and actually<br>expanded to include ¥, ¢, £, and also to make it explicit that currency<br>symbols can be used in variable names as first and only character, as first<br>of many characters, and at any position.<br></p><p>This would make $0, $1, $2… legal variable names. I believe this is OK.<br></p><p>What would happen to implicitly declared closure parameters then? Nothing.<br>They would continue to be implicitly declared in the context of closures<br>that do not declare their parameters explicitly, similarly to `self` being<br>implicitly declared in the context of a class. A user willing to use $0<br>there would be facing a name collision, which is OK.<br></p><p>Note that such a change is purely additive: no legal source code today<br>would fail with this change.<br></p><p>I hope that at the very least, I opened a new perspective on this proposal,<br>and I hope we can find a way to be less culturally biased.<br></p><p>Jean-Denis<br></p><p>        * What is your evaluation of the proposal?<br></p><p>+1. However, it should be expanded to include all Unicode currency symbols.<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br></p><p>Very much so, because it reveals a significant inconsistency in the way the<br>language handles characters for identifiers.<br></p><p>        * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Very much so, considering the language made a point to support unicode<br>characters in identifiers, and &#39;$&#39; should behave consistently with the<br>other Unicode currency symbols.<br></p><p>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br></p><p>In the specific case, this is irrelevant. We are in territory only treaded<br>by Swift<br></p><p>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>A lot of time. I read the proposal, all the answers, spent significant time<br>experimenting with Xcode.<br></p><p><br></p><p>On 16 October 2016 at 19:45, Jay Abbott via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt; I am against it.<br>&gt;<br>&gt; &gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt;<br>&gt; No - if this change were made it would be a regression. The rationale for<br>&gt; removing it in the first place was and remains valid.<br>&gt;<br>&gt; &gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; No, it goes in the opposite direction. $ is not valid as the first<br>&gt; character of a user-defined identifier and therefore should not be a valid<br>&gt; identifier by itself.<br>&gt;<br>&gt; Side-note: Personally I think $ as the first character of an identifier<br>&gt; should be reserved for shorthand ways to do other things, in line with how<br>&gt; it is currently used in Swift.<br>&gt; If used consistently, programmers will know they are seeing a language<br>&gt; shortcut. Allowing $ as an identifier would break some of the natural<br>&gt; intuition a programmer is able to use when learning and reading Swift code.<br>&gt;<br>&gt; &gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br>&gt; The proposal seems purely for the benefit of the Dollar library, which<br>&gt; could work just as well with any other identifier. Code using the dollar<br>&gt; library is reminiscent of some other languages and programming styles. This<br>&gt; isn&#39;t really a comment about the proposal itself, more the motivation<br>&gt; behind it.<br>&gt;<br>&gt; &gt; * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; I read the proposal and was perplexed by it, so I looked into the Dollar<br>&gt; library to try and understand the motivation behind the proposal. It is a<br>&gt; clever library with some nice features and tricks, but in many ways it<br>&gt; seems to be designed to enable programmers to write non-Swifty code in<br>&gt; Swift. I can understand the frustration of the author and users of the<br>&gt; library, but its functionality could be provided in a Swifty way using<br>&gt; extensions and generics, and I think if those users embraced this they<br>&gt; would ultimately appreciate the change. If not then they might as well<br>&gt; stick to another language.<br>&gt;<br>&gt;<br>&gt; On Sun, 16 Oct 2016 at 17:31 Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/<br>&gt;&gt; proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -1.<br>&gt;&gt;<br>&gt;&gt; The proposal does not actually provide motivation for keeping $ beyond<br>&gt;&gt; &quot;the Dollar library already uses it&quot;.<br>&gt;&gt;<br>&gt;&gt; A more Swifty way for a library to introduce these operations would be<br>&gt;&gt; with extensions. Here are some suggestions, based off the first several<br>&gt;&gt; operations described in the library&#39;s readme:<br>&gt;&gt;<br>&gt;&gt; $.at → convenience subscript(Index...) for Collection<br>&gt;&gt; $.chunk → convenience function for Sequence<br>&gt;&gt; $.compact → flatMap{$0}<br>&gt;&gt; $.contains → already exists as Sequence.contains<br>&gt;&gt; $.cycle → convenience function for Collection<br>&gt;&gt; $.difference → convenience function on Collection, or just use Set<br>&gt;&gt; operations, or filter<br>&gt;&gt; $.each → exists as Sequence.forEach<br>&gt;&gt; $.every → extension on Sequence<br>&gt;&gt; $.factorial → convenience method or postfix operator for Integer<br>&gt;&gt; $.fetch → convenience function on Collection<br>&gt;&gt; and so on.<br>&gt;&gt;<br>&gt;&gt; It looks like the author&#39;s Cent &lt;https://github.com/ankurp/Cent&gt; library<br>&gt;&gt; is already taking this approach.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes, but the change has already been made: removing $ as a valid<br>&gt;&gt; identifier ;-)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of<br>&gt;&gt; Swift?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not really. If anything, IMO, the dollar sign feels more like an operator<br>&gt;&gt; character. (However, it&#39;s probably here to stay in identifiers because of<br>&gt;&gt; closure parameters and LLDB variables.)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         * If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The Dollar library resembles the style of JavaScript libraries such as<br>&gt;&gt; jQuery or Underscore, but that isn&#39;t a positive thing in my mind — as<br>&gt;&gt; mentioned above, the Swift way of doing things is different.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thorough reading of the proposal; brief glance at the library&#39;s readme on<br>&gt;&gt; GitHub.  Lots of time thinking about operator &amp; identifier characters for a<br>&gt;&gt; forthcoming proposal.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/85b979d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>October 18, 2016 at 08:00:00am</p></header><div class="content"><p>“culturally offensive” is not a logical argument.<br>A programming language should be logically consistent no matter how many cultures are offended by it.<br>If Swift is driven by SJW’s then very quickly it will cease to be an effective language.<br></p><p>Having said that, I cannot think of a logical reason not to allow the $ as a variable name.<br>I also cannot think of a good reason to use a single character variable name. Let alone a symbol. Let even further alone a symbol that is used in many other languages for a specific purpose.<br></p><p>So while Swift may allow the $ sign for logical consistency, using it as a variable name would disqualify the programmer imo.<br></p><p>Rien.<br></p><p>&gt; On 18 Oct 2016, at 08:25, Jean-Denis Muys via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While I already tersely supported this proposal, following all the negative reactions, I feel compelled to revisit my position. The main reason is that it strikes me that most points of view so far, including mine, were really culturally short sighted, and far too much US-centric.<br>&gt; <br>&gt; I totally agree that &#39;$&#39; being use by one (or even several) piece of code is not reason enough to change the language. But I also think that it being used by only one piece of code is no reason to reject the change.<br>&gt; <br>&gt; Most of us, including me, have been blinded by two things:<br>&gt; <br>&gt; 1- the use of the $ sign in other programming languages<br>&gt; 2- the use of the $ sign in Swift as a prefix for implicitly declared closure parameters<br>&gt; <br>&gt; I think this second use is not Swifty at all. It clearly (to me) would fail the litmus test &quot;if it wasn&#39;t there, would you add it to the language?&quot;. Of course, it has been blessed by time, and it has *become* Swifty, by usage because it&#39;s a useful feature, despite the choice of its syntax being so ugly (to my non-american eyes).<br>&gt; <br>&gt; Similarly, I believe the use of the $ in other language should not be a guide in the decision here, either positively, nor negatively. We may pay some mild attention to the concern that we should perhaps avoid some confusion. I haven&#39;t seen much of that.<br>&gt; <br>&gt; Now for the elephant in the room: &#39;$&#39; is a currency symbol. As such it should be handled like any other currency symbol. Thinking otherwise would be very culturally offensive.<br>&gt; <br>&gt; So can I use € as an variable name in Swift? According to Xcode 8.1B3, yes.<br>&gt; Can I use any currency symbol as an variable name in Swift? According to Xcode 8.1B3, not quite, but almost all of them.<br>&gt; <br>&gt; According to Mac OS &quot;Emoji and Symbols&quot; browser, there are 37 currency symbols in Unicode:<br>&gt; <br>&gt; let currencyAndSymbols = &quot;$€¥¢£₽₨₩฿₺₮₱₭₴₦৲৳૱௹﷼₹₲₪₡₫៛₵₢₸₤₳₥₠₣₰₧₯₶&quot;<br>&gt; I tried every one of them as a variable name. All were accepted, except 3: ¥, ¢, £:<br>&gt; <br>&gt; // let ¥ = 1 // error: expected pattern<br>&gt; <br>&gt; Note the poor error message.<br>&gt; <br>&gt; Here are 33 successful attempts:<br>&gt; <br>&gt; let $ = 1<br>&gt; let € = 1<br>&gt; let ₽ = 1<br>&gt; let ₨ = 1<br>&gt; let ₩ = 1<br>&gt; let ฿ = 1<br>&gt; let ₺ = 1<br>&gt; let ₮ = 1<br>&gt; let ₱ = 1<br>&gt; let ₭ = 1<br>&gt; let ₴ = 1<br>&gt; let ₦ = 1<br>&gt; let ৲ = 1<br>&gt; let ৳ = 1<br>&gt; let ૱ = 1<br>&gt; let ௹ = 1<br>&gt; let ₹ = 1<br>&gt; let ₲ = 1<br>&gt; let ₪ = 1<br>&gt; let ₡ = 1<br>&gt; let ₫ = 1<br>&gt; let ៛ = 1<br>&gt; let ₵ = 1<br>&gt; let ₢ = 1<br>&gt; let ₸ = 1<br>&gt; let ₤ = 1<br>&gt; let ₳ = 1<br>&gt; let ₥ = 1<br>&gt; let ₠ = 1<br>&gt; let ₣ = 1<br>&gt; let ₰ = 1<br>&gt; let ₧ = 1<br>&gt; let ₯ = 1<br>&gt; let ₶ = 1<br>&gt; <br>&gt; print(&quot;₶ = \(₶)&quot;)<br>&gt; print(₶+₶+₶)<br>&gt; <br>&gt; And finally, there is the very weird Rial Sign: ﷼<br>&gt; It is ok to use it as an variable name too (again, according to Xcode8.1B3).<br>&gt; But when trying to use it, Xcode switches to right-to-left mode, which makes for strange (for my occidental eyes) behaviour and display. All the following is OK in Xcode:<br>&gt; <br>&gt; // unusual Xcode right-to-left behavior with Rial Sign<br>&gt; let ﷼ = 21<br>&gt; <br>&gt; print(&quot;﷼= \(﷼)&quot;) // will print ﷼= 21<br>&gt; <br>&gt; Of course, this is just a data point, and Xcode8.1B3 should not be the arbiter here. But I believe whether Swift accepts currency symbols as variable names should be consistent. Either it accepts all of them, or it includes all of them.<br>&gt; <br>&gt; I see no reason to exclude them. On the contrary, it was a design feature of Swift to relieve use from the shackles of the ASCII character set.<br>&gt; <br>&gt; In conclusion, I believe this proposal must be accepted, and actually expanded to include ¥, ¢, £, and also to make it explicit that currency symbols can be used in variable names as first and only character, as first of many characters, and at any position.<br>&gt; <br>&gt; This would make $0, $1, $2… legal variable names. I believe this is OK.<br>&gt; <br>&gt; What would happen to implicitly declared closure parameters then? Nothing. They would continue to be implicitly declared in the context of closures that do not declare their parameters explicitly, similarly to `self` being implicitly declared in the context of a class. A user willing to use $0 there would be facing a name collision, which is OK. <br>&gt; <br>&gt; Note that such a change is purely additive: no legal source code today would fail with this change.<br>&gt; <br>&gt; I hope that at the very least, I opened a new perspective on this proposal, and I hope we can find a way to be less culturally biased.<br>&gt; <br>&gt; Jean-Denis<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; +1. However, it should be expanded to include all Unicode currency symbols.<br>&gt; <br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Very much so, because it reveals a significant inconsistency in the way the language handles characters for identifiers.<br>&gt; <br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Very much so, considering the language made a point to support unicode characters in identifiers, and &#39;$&#39; should behave consistently with the other Unicode currency symbols.<br>&gt; <br>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; In the specific case, this is irrelevant. We are in territory only treaded by Swift<br>&gt; <br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A lot of time. I read the proposal, all the answers, spent significant time experimenting with Xcode.<br>&gt; <br>&gt; <br>&gt; <br>&gt; On 16 October 2016 at 19:45, Jay Abbott via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; * What is your evaluation of the proposal?<br>&gt; <br>&gt; I am against it.<br>&gt; <br>&gt; &gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No - if this change were made it would be a regression. The rationale for removing it in the first place was and remains valid.<br>&gt; <br>&gt; &gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; No, it goes in the opposite direction. $ is not valid as the first character of a user-defined identifier and therefore should not be a valid identifier by itself.<br>&gt; <br>&gt; Side-note: Personally I think $ as the first character of an identifier should be reserved for shorthand ways to do other things, in line with how it is currently used in Swift.<br>&gt; If used consistently, programmers will know they are seeing a language shortcut. Allowing $ as an identifier would break some of the natural intuition a programmer is able to use when learning and reading Swift code.<br>&gt; <br>&gt; &gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; The proposal seems purely for the benefit of the Dollar library, which could work just as well with any other identifier. Code using the dollar library is reminiscent of some other languages and programming styles. This isn&#39;t really a comment about the proposal itself, more the motivation behind it.<br>&gt; <br>&gt; &gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I read the proposal and was perplexed by it, so I looked into the Dollar library to try and understand the motivation behind the proposal. It is a clever library with some nice features and tricks, but in many ways it seems to be designed to enable programmers to write non-Swifty code in Swift. I can understand the frustration of the author and users of the library, but its functionality could be provided in a Swifty way using extensions and generics, and I think if those users embraced this they would ultimately appreciate the change. If not then they might as well stick to another language.<br>&gt; <br>&gt; <br>&gt; On Sun, 16 Oct 2016 at 17:31 Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Proposal link: <br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;  <br>&gt;         * What is your evaluation of the proposal?<br>&gt; <br>&gt; -1.<br>&gt; <br>&gt; The proposal does not actually provide motivation for keeping $ beyond &quot;the Dollar library already uses it&quot;.<br>&gt; <br>&gt; A more Swifty way for a library to introduce these operations would be with extensions. Here are some suggestions, based off the first several operations described in the library&#39;s readme:<br>&gt; <br>&gt; $.at → convenience subscript(Index...) for Collection<br>&gt; $.chunk → convenience function for Sequence<br>&gt; $.compact → flatMap{$0}<br>&gt; $.contains → already exists as Sequence.contains<br>&gt; $.cycle → convenience function for Collection<br>&gt; $.difference → convenience function on Collection, or just use Set operations, or filter<br>&gt; $.each → exists as Sequence.forEach<br>&gt; $.every → extension on Sequence<br>&gt; $.factorial → convenience method or postfix operator for Integer<br>&gt; $.fetch → convenience function on Collection<br>&gt; and so on.<br>&gt; <br>&gt; It looks like the author&#39;s Cent library is already taking this approach.<br>&gt; <br>&gt;  <br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, but the change has already been made: removing $ as a valid identifier ;-)<br>&gt; <br>&gt;  <br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Not really. If anything, IMO, the dollar sign feels more like an operator character. (However, it&#39;s probably here to stay in identifiers because of closure parameters and LLDB variables.)<br>&gt; <br>&gt;  <br>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; The Dollar library resembles the style of JavaScript libraries such as jQuery or Underscore, but that isn&#39;t a positive thing in my mind — as mentioned above, the Swift way of doing things is different.<br>&gt; <br>&gt;  <br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Thorough reading of the proposal; brief glance at the library&#39;s readme on GitHub.  Lots of time thinking about operator &amp; identifier characters for a forthcoming proposal.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>October 18, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;d prefer to replace $ with # in closure parameters, plus make $ equal in<br>rights to other currency symbols.<br>In C and JS, dollar sign is actually equal in rights to other currency symbols.<br>Swift is closer to them than to Perl, Shell, PHP, so it makes sense to<br>follow them here.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/9e0dfffa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>October 19, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Oct 17, 2016, at 11:45 PM, Rien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; “culturally offensive” is not a logical argument.<br>&gt; A programming language should be logically consistent no matter how many cultures are offended by it.<br>&gt; If Swift is driven by SJW’s then very quickly it will cease to be an effective language.<br></p><p><br>I don’t think using “SJW” as a slur is appropriate, certainly not in swift-evolution. We aim to be an open and inclusive community. Cultural sensitivity is one of Swift’s goals; that’s why it supports Unicode identifiers… so people can use their native language if they wish. The world is not the Western Latin-1 character set.<br></p><p>None of these goals are mutually-exclusive with logical arguments; that’s a false dichotomy. <br></p><p>I’m not aware of any programming language that is 100% logically consistent. They all make concessions to programmer culture, history, practical concerns, and even opinion/whims. Python doesn’t have multi-line lambdas because Guido doesn’t like them. Even Haskell has unsafePerformIO because the real world is not a pure function. We talk about how beautiful or ugly syntax is all the time, which is absolutely a value judgement.<br></p><p><br></p><p>Russ<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>October 20, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 20 Oct 2016, at 07:54, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 17, 2016, at 11:45 PM, Rien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; “culturally offensive” is not a logical argument.<br>&gt;&gt; A programming language should be logically consistent no matter how many cultures are offended by it.<br>&gt;&gt; If Swift is driven by SJW’s then very quickly it will cease to be an effective language.<br>&gt; <br>&gt; <br>&gt; I don’t think using “SJW” as a slur is appropriate, certainly not in swift-evolution. We aim to be an open and inclusive community. Cultural sensitivity is one of Swift’s goals; that’s why it supports Unicode identifiers… so people can use their native language if they wish. The world is not the Western Latin-1 character set.<br></p><p>True, but sometimes restricting yourself can bring better results. A big reason why technical and scientific progress is advancing so fast in the modern era is also attributed to people being able to rely on a common lingua franca (English today, something else in 100 years perhaps?) and very fast communication amongst people of different cultural backgrounds happening at lighting speed.<br></p><p>People on teams resist to code guidelines for freedom of expression reasons too, but the values of standardisation are greater than what we achieve by prioritising creative expression in the form of writing all my code in kanji or using proper Italian accented characters or following my own code formatting convention... pride and fear often put people off when self imposing limitations for the greater good. English as programming lingua franca brings people together more than it suppresses valuable creative thought. <br></p><p>English is obviously not my first language, but I enjoy the fact that having the documentation, developer forums, this kind of mailing lists, etc... all standardising around English as technical lingua franca is both useful, facilitate communication, and is totally not unprecedented (Latin used to be the defacto lingua franca for medicine, biology, botany, and all sorts of scientific and philosophical discussion... it did not kill the local languages and brought people together).<br></p><p><br>&gt; None of these goals are mutually-exclusive with logical arguments; that’s a false dichotomy. <br>&gt; <br>&gt; I’m not aware of any programming language that is 100% logically consistent. They all make concessions to programmer culture, history, practical concerns, and even opinion/whims. Python doesn’t have multi-line lambdas because Guido doesn’t like them. Even Haskell has unsafePerformIO because the real world is not a pure function. We talk about how beautiful or ugly syntax is all the time, which is absolutely a value judgement.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Russ<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>October 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; Now for the elephant in the room: &#39;$&#39; is a currency symbol. As such it<br>&gt; should be handled like any other currency symbol. Thinking otherwise would<br>&gt; be very culturally offensive.<br>&gt;<br></p><p>The fact that it&#39;s a currency symbol is totally irrelevant.<br>It&#39;s s symbol. Here are some others:<br>! &amp; * ( . -<br></p><p>You wouldn&#39;t want to allow an identifier to start with any of those<br>symbols, for obvious reasons.<br></p><p>Programming languages need to reserve some characters and words for special<br>meanings. In this case: Yes $0, $1, etc. was probably influenced from other<br>languages; yes $ was probably used in those languages because it was a<br>convenient available character in the ASCII set, and therefore easy to type<br>on standard US and other English keyboards (where those languages were<br>developed and primarily used). This is simple history/legacy, and nothing<br>to do with the fact it is a currency symbol or any other reason that might<br>cause offense to anyone.<br></p><p>Unfortunately I think you have misunderstood this proposal. It is to allow<br>$ as a single-character identifier, even though it is reserved and not<br>allowed as an identifier-head.<br></p><p>If you think $ should be allowed as the first character of any identifier<br>(including the single $), then that would be a different proposal which<br>should cover all the other effects properly.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/2fafcdf4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5931766360e7b16042376524df12d61c?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Jonathan S. Shapiro</string> &lt;jonathan.s.shapiro at gmail.com&gt;<p>October 21, 2016 at 07:00:00pm</p></header><div class="content"><p>On Tue, Oct 18, 2016 at 7:20 AM, Jay Abbott via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It&#39;s s symbol. Here are some others:<br>&gt; ! &amp; * ( . -<br>&gt;<br>&gt; You wouldn&#39;t want to allow an identifier to start with any of those<br>&gt; symbols, for obvious reasons.<br>&gt;<br></p><p>That&#39;s an assertion. Can you substantiate?<br></p><p>Because I can think of a whole bunch of reasons for identifiers to start<br>with those, several languages in which they actually *do* start with those,<br>and significant benefit that accrues in those languages from admitting<br>these identifiers...<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161021/db243212/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October 19, 2016 at 12:00:00pm</p></header><div class="content"><p>On Mon, Oct 17, 2016, at 11:25 PM, Jean-Denis Muys via swift-evolution wrote:<br>&gt; Now for the elephant in the room: &#39;$&#39; is a currency symbol. As such it<br>&gt; should be handled like any other currency symbol. Thinking otherwise<br>&gt; would be very culturally offensive.<br>&gt;<br>&gt; So can I use € as an variable name in Swift? According to Xcode<br>&gt; 8.1B3, yes.<br>&gt; Can I use any currency symbol as an variable name in Swift? According<br>&gt; to Xcode 8.1B3, not quite, but almost all of them.<br>&gt;<br>&gt; [snip]<br>&gt;<br>&gt; Of course, this is just a data point, and Xcode8.1B3 should not be the<br>&gt; arbiter here. But I believe whether Swift accepts currency symbols as<br>&gt; variable names should be consistent. Either it accepts all of them, or<br>&gt; it includes all of them.<br>&gt;<br>&gt; I see no reason to exclude them. On the contrary, it was a design<br>&gt; feature of Swift to relieve use from the shackles of the ASCII<br>&gt; character set.<br>&gt;<br>&gt; In conclusion, I believe this proposal must be accepted, and actually<br>&gt; expanded to include ¥, ¢, £, and also to make it explicit that<br>&gt; currency symbols can be used in variable names as first and only<br>&gt; character, as first of many characters, and at any position.<br></p><p>Swift doesn&#39;t care about currency symbols. The Currency_Symbol general<br>category is not special to Swift. And the fact that $, ¥, ¢, and £ (and<br>don&#39;t forget about ¤, which you didn&#39;t list) aren&#39;t valid identifiers is<br>a consequence of how they&#39;re categorized by Unicode, not some<br>intentional decision by Swift. Specifically, all of the currency symbols<br>that are in the Basic Latin block (e.g. any currency symbol in the range<br>U+0000–U+00FF) have the Pattern_Syntax property. And the Pattern_Syntax<br>property is defined by Unicode (see UAX #31) as a stable set of<br>characters that are appropriate to use for syntax in<br>patterns/expressions (e.g. programming language syntax, regular<br>expressions, ICU number formats, etc). I don&#39;t have a good way to test<br>this (UnicodeChecker has no way to search for all characters with the<br>Pattern_Syntax property), but AFAIK all Pattern_Syntax characters are<br>not legal identifiers in Swift, with any character not already reserved<br>for use by the Swift grammar (e.g. $ being used for positional<br>parameters) being available for operators.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161019/03be5038/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea125c5cd93ba84769387c17c973e2b3?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>rintaro ishizaki</string> &lt;fs.output at gmail.com&gt;<p>October 19, 2016 at 01:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1<br>We should do the best to avoid source breaking change in Swift4.<br>https://github.com/ankurp/Dollar is used in so many projects.<br>I believe removing this might discourage them from using Swift.<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br></p><p>Yes<br></p><p>        * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. Also, I personally dislike symbol only identifier.<br>But IMO, we have to compromise this.<br></p><p>      * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p><br>2016-10-15 4:59 GMT+09:00 Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot;<br>&gt; begins now and runs through October 18. The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposa<br>&gt; ls/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161019/063cb02d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>October 18, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Oct 14, 2016 at 1:00 PM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0144: Allow Single Dollar Sign as a Valid Identifier&quot;<br>&gt; begins now and runs through October 18. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>-1. Since the dollar sign is used as a prefix for unnamed closure<br>arguments, allowing it to be used by itself as a user-defined identifier<br>would be odd and potentially confusing. It&#39;s also, IMO, a useless<br>standalone identifier because it provides zero self-documentation as to its<br>purpose. Reserving &quot;$&quot; means that users will know that when they see it, it<br>refers to something special and intrinsic to the language.<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>No. The library using it is using an undocumented and accidental &quot;feature&quot;<br>that was removed for sound reasons and the language shouldn&#39;t change to<br>support that.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>No. The library that is motivating the change is trying to shoehorn<br>Javascript patterns into Swift; the language shouldn&#39;t be designed around<br>it. The author&#39;s own Cent library, which uses extensions, is a much more<br>Swift-appropriate way to tackle what the problem he&#39;s trying to solve.<br></p><p><br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>Java and Javascript allow $ as a standalone identifier. I don&#39;t see a<br>reason to follow that in Swift, though.<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Read the proposal.<br></p><p><br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/21a2fc71/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>October 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Oct 14, 2016, at 12:59 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0144-allow-single-dollar-sign-as-valid-identifier.md<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I know this is cutting against the grain, but I&#39;m in favor.<br></p><p>I don&#39;t think the Dollar library is a good design, but I think there *are* good designs which could use an extremely short, distinctive identifier like `$`. These would be cases where there is a single, specific object, operation, or type which is absolutely central to the problem domain. jQuery is a good example of this: it is used in browsers, where DOM manipulation is such a big part of what you&#39;re doing that an extremely shorthanded syntax is appropriate. Other examples might include parsing or generating strings. In general, anything where a Swift file is effectively &quot;embedded&quot; or acting as a &quot;plugin&quot; might benefit from `$`.<br></p><p>Certainly that is not most Swift code, but this is a harmless change when you don&#39;t need it, and a helpful change when you do. And certainly code using it may be a little sloppy unless there&#39;s preprocessing involved, but sometimes a sloppy solution is the most expressive one.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Maybe. It certainly is possible to design around it by switching to a single identifier character, but few of those stand out in the same way `$` does.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think it does. Swift disfavors boilerplate, and the places I imagine `$` ought to be used are those where a longer name would introduce unacceptable amounts of boilerplate.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>`$` is certainly a rather popular identifier in Javascript.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Not much more than a glance.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c198ffcf0853e6011f58fdcdd32a111?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Benjamin Spratling</string> &lt;bspratling at mac.com&gt;<p>October 20, 2016 at 04:00:00am</p></header><div class="content"><p>Howdy,<br>	It seems the main question in discussing this proposal is “If $0, $1, $2, $3 are automatic closure parameters, then what is “$”?”.  Another thing that has also recently come to my attention that Swift does not have a “result of previous expression” magic identifier as some functional languages do.  Combine this with my difficulty in creating closures which automatically bind weakly to the variable, and I’m looking at a potential meaning for “$” consistent with all of these goals.<br></p><p>First off, I don’t like the “$0, $1, $2, …” feature, but I can respect it.  I mainly don’t like it because in English “$” is defined as “dollar”, not “magic variable number _”.  However, it appears that in Swift, “$” really does mean “magic variable number _”, and some developers find it very useful.<br></p><p>I’m not looking to routinely violate the law of Demeter, but occasionally in data conversion, it’s really unavoidable.  Sometimes, I need to convert to a type with a non-optional argument, but my argument is Optional.  Here, for instance:<br></p><p>struct XMLNode {<br>	var attributes:[String:String]<br>}<br></p><p>struct Note {<br>	/// half-steps from middle-C, nil means the note is a rest<br>	var pitch:Int?<br>	//more properties<br>	init?(xmlNode: XMLNode) {<br>		if let pitchString:String = xmlNode.attributes[“pitch”], let pitchInt:Int = Int(pitchString) {<br>			pitch = pitchInt<br>		}<br>		//more code<br>	}<br>}<br></p><p>I could go write an extension on String to provide a computed integer property, but I’m not just talking about one case, I’m talking about all cases where we convert to types in this way.<br></p><p>If “$” meant “identifier of result of previous expression”, I could write:<br></p><p>init?(xmlNode: XMLNode) {<br>	pitch = xmlNode.attributes[“pitch”]?Int($)<br>	//more code<br>}<br></p><p>instead.  Much cleaner.<br></p><p>Now, in my mind the first question is: “don’t I need another operator after the “?” ? “  And that got me thinking about unowned/weak capture in closures and UndoManager blocks.  If the reference is captured separately from the actions on the reference, then strong/weak/unowned really isn’t an argument for those cases.  It’s like I want an autoclosure that takes 1 instead of 0 arguments, the 1 generic value from the previous expression, which, incidentally would be represented by “$”—if it were explicitly referenced.  The optional chaining operator right now, as I understand it, is compiler magic.  But what if there were a language construct for such features as there is for optimized evaluation with ??, &amp;&amp;, and || ?  It would allow me to create my own “?”-like behaviors.  <br></p><p>Which operator it is, I don’t much care; I am looking closely at “\”.  Finally, there is a difference between a 1-argument auto closure that acts as if it continued an expression, i.e. _?._ and one which places the previous result as an argument into a self-contained expression.  But if the leading-dot, i.e. “.intValue”, syntax is itself just syntactic sugar for writing “$.intValue”, then there really isn’t a difference.<br></p><p>So the chaining optional operator becomes defined in the language as:<br></p><p>nocapture operator ? : WhateverPrecedenceGroup<br></p><p>infix func ?&lt;LReturnType, RReturnType&gt;(lhs:@autoclosure()-&gt;(LReturnType?), rhs:@autoclosure (LReturnType)-&gt;(RReturnType))-&gt; RReturnType? {<br>	guard let lhs = lhs() else { return nil }<br>	return rhs(lhs)<br>}<br></p><p>and I can extract a closure which does not capture “self” at all:<br></p><p>class Controller {<br>	func provideClosure()-&gt;(Controller)-&gt;Result {<br>		return self\.doSomething	//doesn’t capture self<br>	}<br>	func doSomething()-&gt;Result {<br>		//write me<br>	}<br>}<br></p><p>So “\” becomes:<br></p><p>nocapture operator \ : WhateverPrecedenceGroup<br></p><p>and the compiler inserts the magic of creating the “nocapture” operators, which parses nearly identically to how it works today.<br></p><p>Calls to UndoManager become cleaner:<br></p><p>class Controller {<br>	var color:Color {<br>		didSet {<br>			undoManager.register(withTarget:self, handler:{ (controller:Controller)-&gt;Void in<br>				controller.color = oldValue<br>			})<br>		}<br>	}<br>}<br></p><p>becomes:<br></p><p>class Controller {<br>	var color:Color {<br>		didSet {<br>			undoManager.register(withTarget:self, handler:self\.color = oldColor)<br>		}<br>	}<br>}<br></p><p><br>So, doing all this would:<br></p><p>- Give $, $0, $1, $2 consistent meanings, “the argument”.<br>- Solve the problem of quickly obtaining a weak / unowned closure references by creating generic 1-parameter autoclosures.<br>- Allow inits in optional chains.<br></p><p>Alternatively:<br></p><p>Perhaps use $0 instead inside my 1-argument auto closures, but to me it implies there could be more, and could interfere with these from an enclosing closure.<br></p><p>Perhaps “?” is the operator to use for creating the 1-argument closures, but to me it implies optional-related behavior<br></p><p>Perhaps this really is just too many “dots”, and we want to move away from the functional style, but developers are loving it.<br></p><p>Perhaps the UndoManager’s generic syntax is sufficient.<br></p><p>Perhaps I’ve missed something critical in the grammar.<br></p><p>Thanks your reading and consideration.  Swift on!<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>October 20, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 20, 2016, at 2:52 AM, Benjamin Spratling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; struct Note {<br>&gt; 	/// half-steps from middle-C, nil means the note is a rest<br>&gt; 	var pitch:Int?<br>&gt; 	//more properties<br>&gt; 	init?(xmlNode: XMLNode) {<br>&gt; 		if let pitchString:String = xmlNode.attributes[“pitch”], let pitchInt:Int = Int(pitchString) {<br>&gt; 			pitch = pitchInt<br>&gt; 		}<br>&gt; 		//more code<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; I could go write an extension on String to provide a computed integer property, but I’m not just talking about one case, I’m talking about all cases where we convert to types in this way.<br>&gt; <br>&gt; If “$” meant “identifier of result of previous expression”, I could write:<br>&gt; <br>&gt; init?(xmlNode: XMLNode) {<br>&gt; 	pitch = xmlNode.attributes[“pitch”]?Int($)<br>&gt; 	//more code<br>&gt; }<br></p><p>Pretty cryptic. What&#39;s wrong with this?<br></p><p>	pitch = xmlNode.attributes[&quot;pitch&quot;].map { Int($0) }<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
