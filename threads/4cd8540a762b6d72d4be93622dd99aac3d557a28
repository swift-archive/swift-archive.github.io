<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Idea] Syntactic sugar for using methods as	functions</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 27, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; struct Foo {<br>&gt;     let bar: Int<br>&gt; <br>&gt;     func getBar() -&gt; Int {<br>&gt;         return self.bar<br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; let foos = [Foo(bar: 1), Foo(bar: 2), Foo(bar: 3)]<br>&gt; let bars = foos.map(.getBar)<br></p><p>This can be done now:<br>let bars = foos.map(Foo.getBar)<br></p><p>&gt; While for parameterless functions this might not seem like much of an<br>&gt; improvement, I think it helps when there are parameters involved:<br>&gt; <br>&gt; struct Foo {<br>&gt;     let bar: Int<br>&gt; <br>&gt;     func combine(other: Foo) -&gt; Foo {<br>&gt;         return Foo(bar: other.bar + self.bar)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; let foos = [Foo(bar: 5), Foo(bar: 6), Foo(bar: 1)]<br>&gt; let reduced = foos.reduce(Foo(bar: 0), .combine)<br></p><p>This also can be done now:<br>let reduced = foos.reduce(Foo(bar: 0), Foo.combine)<br></p><p>Are you suggesting to drop class name? That might make sense, but not <br>for Swift 3.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Idea] Syntactic sugar for using methods as functions</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 27, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jun 27, 2016, at 7:33 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; struct Foo {<br>&gt;&gt;    let bar: Int<br>&gt;&gt; <br>&gt;&gt;    func getBar() -&gt; Int {<br>&gt;&gt;        return self.bar<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let foos = [Foo(bar: 1), Foo(bar: 2), Foo(bar: 3)]<br>&gt;&gt; let bars = foos.map(.getBar)<br>&gt; <br>&gt; This can be done now:<br>&gt; let bars = foos.map(Foo.getBar)<br></p><p>This will only get you an array of closures:<br></p><p>let bars = foos.map(Foo.getBar) // [() -&gt; Int, () -&gt; Int, () -&gt; Int]<br>bars[0] // () -&gt; Int<br>bars[0]() // 1<br></p><p><br>&gt; <br>&gt;&gt; While for parameterless functions this might not seem like much of an<br>&gt;&gt; improvement, I think it helps when there are parameters involved:<br>&gt;&gt; <br>&gt;&gt; struct Foo {<br>&gt;&gt;    let bar: Int<br>&gt;&gt; <br>&gt;&gt;    func combine(other: Foo) -&gt; Foo {<br>&gt;&gt;        return Foo(bar: other.bar + self.bar)<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let foos = [Foo(bar: 5), Foo(bar: 6), Foo(bar: 1)]<br>&gt;&gt; let reduced = foos.reduce(Foo(bar: 0), .combine)<br>&gt; <br>&gt; This also can be done now:<br>&gt; let reduced = foos.reduce(Foo(bar: 0), Foo.combine)<br>&gt; <br>&gt; Are you suggesting to drop class name? That might make sense, but not <br>&gt; for Swift 3.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/26f915253dca7b08d59b61c883ae2e54?s=50"></div><header><strong>[Idea] Syntactic sugar for using methods as functions</strong> from <string>admin at wheerd.de</string> &lt;admin at wheerd.de&gt;<p>June 28, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; This also can be done now:<br>&gt; let reduced = foos.reduce(Foo(bar: 0), Foo.combine)<br>&gt; <br>&gt; Are you suggesting to drop class name? That might make sense, but not<br>&gt; for Swift 3.<br></p><p>That is what I am suggesting. Basically I would like to extend the .foo <br>shorthand that already works for static members to methods in case the <br>target type is a function type.<br></p><p>I guess I will bring it up again later after Swift 3 is done.<br></p><p>Kind regards, Manuel<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
