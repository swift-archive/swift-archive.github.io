<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>throw expressions in ternary operators</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>I remember discussing something like this in swift-evolution but can’t find it. I was wondering if it was worth a proposal or not.<br></p><p>When constructing objects from dictionary of values, I often write the parsing of optional values as such:<br></p><p>age = try dictionary[&quot;age&quot;].flatMap {<br>	if let age = $0 as? Int {<br>		return age<br>	} else {<br>		throw Error.InvalidFormat<br>	}<br>}<br></p><p>Basically, I don’t want to throw if the dictionary does not contain an “age” key, but if it does, I want to throw if it is not an Int. I’m writing this way, but I’d like to write is as such:<br></p><p>age = try dictionary[&quot;age&quot;].flatMap { $0 as? Int ?? throw Error.InvalidFormat }<br></p><p>But this causes a compilation error. Don’t you think the ternary operator should allow an expression that throws on the right hand side?<br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/a1eab4a2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>throw expressions in ternary operators</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>But this causes a compilation error. Don’t you think the ternary operator should allow an expression that throws on the right hand side?<br>For one, ?? is not a ternary operator, ?: is. But I guess it’s just a misspelling. <br></p><p>Anyway, there’re the throwing versions of the ?? operator:<br></p><p>public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T) rethrows -&gt; T<br>public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T?) rethrows -&gt; T?<br></p><p>They’re taking the throwing autoclosure as second parameter. You cannot pass `throw Error.InvalidFormat` directly, because it’s type is not resolved to `() -&gt; throws Int` by compiler. Nos sure if it’s a bug or a feature. In either case, you can work around it by wrapping throw in closure:<br></p><p>let age = try dictionary[&quot;age&quot;].flatMap { elem in<br>    try elem as? Int ?? { throw Error() }()<br>}<br></p><p>You can also simplify it using a throwing function, possibly from the Error enum:<br></p><p>enum Error : ErrorType {<br>    case invalidFormat<br>    static func throwInvalidFormat&lt;T&gt;() throws -&gt; T {<br>        throw Error.invalidFormat<br>    }<br>}<br></p><p>let age = try dictionary[&quot;age&quot;].flatMap { elem in<br>    try elem as? Int ?? Error.throwInvalidFormat()<br>}<br></p><p>Cheers,<br>Krzysztof<br></p><p><br></p><p><br>David.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/0503350a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>throw expressions in ternary operators</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Correct, it is not ternary, just a slip of my mind :)<br></p><p>&gt; let age = try dictionary[&quot;age&quot;].flatMap { elem in<br>&gt;     try elem as? Int ?? { throw Error() }()<br>&gt; }<br></p><p>I didn’t know this workaround worked. Cool! Can somebody from the core team tell us if it not supporting throw directly is a bug or an intended feature?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/4788ee54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>throw expressions in ternary operators</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>May  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Correct, it is not ternary, just a slip of my mind :)<br>I have a great amount of understanding for that, I find `nil coalescing operator` name simply impossible to remember :)<br></p><p><br></p><p>I didn’t know this workaround worked. Cool! Can somebody from the core team tell us if it not supporting throw directly is a bug or an intended feature?<br>Just to elaborate a little after I thought about it for a minute: intended feature. The core reason is that `throw` is a statement (the same way as `if` or `guard` are), and in Swift statements are not expressions. `try`, on the other hand, is an expression.<br></p><p>So you cannot simply `throw` the same way you cannot write:<br></p><p>let elem : AnyObject = “42&quot;<br>let int = elem as? Int ?? if true { return 42 }<br>but you can write:<br></p><p>let elem : AnyObject = “42”<br></p><p>let int = elem as? Int ?? { if true { return 42 } }()<br></p><p>There has been already a few discussions whether statements should be expressions in swift or not on the list, which I’ve been only partially following, so I’m not sure if there’re any plans for changing the current statement/expression tradeoff is Swift :)<br></p><p>Cheers!<br></p><p>Krzysztof<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/8911a525/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>throw expressions in ternary operators</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 6:41 AM, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Correct, it is not ternary, just a slip of my mind :)<br>&gt; <br>&gt; I have a great amount of understanding for that, I find `nil coalescing operator` name simply impossible to remember :)<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; I didn’t know this workaround worked. Cool! Can somebody from the core team tell us if it not supporting throw directly is a bug or an intended feature?<br>&gt; <br>&gt; Just to elaborate a little after I thought about it for a minute: intended feature. The core reason is that `throw` is a statement (the same way as `if` or `guard` are), and in Swift statements are not expressions.<br>&gt; <br>Yep, Krzysztof is exactly right here.  It would be possible to turn “throw” into an expression - this is precedented in other languages (like C++ iirc).<br></p><p>-Chris<br></p><p><br></p><p>&gt; `try`, on the other hand, is an expression.<br>&gt; <br>&gt; So you cannot simply `throw` the same way you cannot write:<br>&gt; <br>&gt; let elem : AnyObject = “42&quot;<br>&gt; let int = elem as? Int ?? if true { return 42 }<br>&gt; but you can write:<br>&gt; <br>&gt; let elem : AnyObject = “42”<br>&gt; <br>&gt; let int = elem as? Int ?? { if true { return 42 } }()<br>&gt; <br>&gt; There has been already a few discussions whether statements should be expressions in swift or not on the list, which I’ve been only partially following, so I’m not sure if there’re any plans for changing the current statement/expression tradeoff is Swift :)<br>&gt; <br>&gt; Cheers!<br>&gt; <br>&gt; Krzysztof<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/17c78c2f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
