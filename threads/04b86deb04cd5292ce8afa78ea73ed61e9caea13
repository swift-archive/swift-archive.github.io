<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/239470edb218dd1168e72a50b3ac0a00?s=50"></div><header><strong>Instantiating a generic class with a protocol type</strong> from <string>Matthias Zenger</string> &lt;matthias at objecthub.net&gt;<p>April 11, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>I&#39;m puzzled by the following behaviour in Swift 2.2. This code compiles and<br>behaves as expected:<br></p><p>  protocol Executable {}<br>  class Box&lt;T: Any&gt; {}<br>  let box = Box&lt;Executable&gt;()<br></p><p>If I now replace the type constraint on T with Executable, I&#39;m getting a<br>compiler error:<br></p><p>  protocol Executable {}<br>  class Box&lt;T: *Executable*&gt; {}<br>  let box = Box&lt;Executable&gt;()<br></p><p>&gt;From a type-theoretic perspective, I can&#39;t see why instantiating class Box<br>with type Executable should be prohibited. Also the corresponding error<br>message isn&#39;t really providing more insights: &quot;Using &#39;Executable&#39; as a<br>concrete type conforming to protocol &#39;Executable&#39; is not supported&quot;.<br></p><p>Where can I find more about this behaviour in the Swift Language<br>Specification? Is this a known bug?<br></p><p>Thanks,<br>  Matthias<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160411/04b8ea13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Instantiating a generic class with a protocol type</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 11, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 11, 2016, at 9:33 AM, Matthias Zenger via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; I&#39;m puzzled by the following behaviour in Swift 2.2. This code compiles and behaves as expected:<br>&gt; <br>&gt;   protocol Executable {}<br>&gt;   class Box&lt;T: Any&gt; {}<br>&gt;   let box = Box&lt;Executable&gt;()<br>&gt; <br>&gt; If I now replace the type constraint on T with Executable, I&#39;m getting a compiler error:<br>&gt; <br>&gt;   protocol Executable {}<br>&gt;   class Box&lt;T: Executable&gt; {}<br>&gt;   let box = Box&lt;Executable&gt;()<br>&gt; <br>&gt; From a type-theoretic perspective, I can&#39;t see why instantiating class Box with type Executable should be prohibited. Also the corresponding error message isn&#39;t really providing more insights: &quot;Using &#39;Executable&#39; as a concrete type conforming to protocol &#39;Executable&#39; is not supported&quot;.<br>&gt; <br>&gt; Where can I find more about this behaviour in the Swift Language Specification? Is this a known bug?<br></p><p>It&#39;s a known limitation. Protocol types aren&#39;t yet considered to conform to their own protocol as generic constraints. There are some language design difficulties here that need to be addressed before we can support this, since a type-erased protocol value isn&#39;t always a model of its protocol; for instance, if it has static or initializer requirements, the protocol type itself has no type-level operations, so can&#39;t satisfy those requirements itself. With resilience, a public protocol has the ability to introduce new requirements in the future that may break its self-conformance as well.<br></p><p>-Joe<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
