<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 17, 2016 at 02:00:00pm</p></header><div class="content"><p>on Thu Jun 16 2016, David Waite &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1, for the same reasons stated on the thread. These are neither<br>&gt; guaranteed to be mutating or non-mutating until you get to Collection.<br>&gt;<br>&gt; Changing map() to mapped() would be lying to the developer some of the<br>&gt; time about the mutability of the interface.<br></p><p>In the same way that leaving it as &quot;map&quot; is lying to the developer, the<br>other part of the time.<br></p><p>&gt; -DW<br>&gt;<br>&gt;&gt; On Jun 16, 2016, at 1:53 PM, Adrian Zubarev via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 very much for consistency. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 16. Juni 2016 um 21:51:48, Patrick Pijnappel via swift-evolution<br>&gt;&gt; (swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt; schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; Due to considerably support on this thread<br>&gt;&gt;&gt; &lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20783&gt;,<br>&gt;&gt;&gt; a draft proposal to revisit the core functional method exceptions<br>&gt;&gt;&gt; to the -ed/-ing rule.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Online version:<br>&gt;&gt;&gt; https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md<br>&gt;&gt;&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Apply -ed/-ing rule to core functional methods<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt;&gt; &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/NNNN-functional-methods-ed-ing.md&gt;<br>&gt;&gt;&gt; Author: Patrick Pijnappel &lt;https://github.com/PatrickPijnappel&gt;<br>&gt;&gt;&gt; Status: Awaiting review<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;  &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The Swift API Guidelines standardizes non-mutating method forms on<br>&gt;&gt;&gt; verbs ending in -ed/-ing (or nouns). However, a few non-mutating<br>&gt;&gt;&gt; forms have been kept as &quot;Terms of Art&quot;: map, flatMap, filter,<br>&gt;&gt;&gt; reduce, dropFirst and dropLast. This proposal proposes to bring<br>&gt;&gt;&gt; these in line with all other non-mutating forms (e.g. filter =&gt;<br>&gt;&gt;&gt; filtered).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift-evolution threads: Source<br>&gt;&gt;&gt; &lt;http://news.gmane.org/find-root.php?group=gmane.comp.lang.swift.evolution&amp;article=20783&gt;<br>&gt;&gt;&gt;  &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; These method have been kept to preserve the terms of art. Generally, this can have significant benefits:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyone familiar with the term will immediately understand it, and use their assumptions about how it works.<br>&gt;&gt;&gt; Users learning the term from Swift can use their knowledge when encountering it elsewhere.<br>&gt;&gt;&gt; Experienced users will be able to use the mental pattern matching<br>&gt;&gt;&gt; they&#39;ve built-up for quickly recognizing common programming<br>&gt;&gt;&gt; patterns.<br>&gt;&gt;&gt; However, basically all of the benefits of using a term of art still<br>&gt;&gt;&gt; apply to the modified forms: – For recognition, the modified forms<br>&gt;&gt;&gt; are still very close to the traditional terms of art. So both<br>&gt;&gt;&gt; coming to and from Swift you&#39;ll be able to use your knowledge<br>&gt;&gt;&gt; pretty much unaffected.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If the user looks for e.g. filter they are pretty much guaranteed<br>&gt;&gt;&gt; to quickly find the correct form, be it through code-completion,<br>&gt;&gt;&gt; google or a fix-it.<br>&gt;&gt;&gt; There isn&#39;t really any violation of assumptions that might cause problems in this case.<br>&gt;&gt;&gt; Any mental pattern matching will likely transfer quickly due to the minimal difference.<br>&gt;&gt;&gt;  &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#proposed-solution&gt;Proposed<br>&gt;&gt;&gt; solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed solution modifies the method verbs to their -ed/-ing forms (preferring the former). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It removes the last clear exceptions to the -ed/-ing rule from the<br>&gt;&gt;&gt; standard library, which previously were exactly the opposite of<br>&gt;&gt;&gt; what one would expect based on the API guidelines (and the rest of<br>&gt;&gt;&gt; the language).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It also aids users in learning to pattern match on the -ed/-ing<br>&gt;&gt;&gt; rule and internalizing the API guidelines, since now all methods<br>&gt;&gt;&gt; are named this way – instead of the most commonly used methods<br>&gt;&gt;&gt; defying the normal pattern.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#detailed-design&gt;Detailed<br>&gt;&gt;&gt; design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The change would rename the following method families:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; map       =&gt; mapped<br>&gt;&gt;&gt; flatMap   =&gt; flatMapped  <br>&gt;&gt;&gt; filter    =&gt; filtered<br>&gt;&gt;&gt; reduce    =&gt; reduced<br>&gt;&gt;&gt; dropFirst =&gt; droppingFirst<br>&gt;&gt;&gt; dropLast  =&gt; droppingLast<br>&gt;&gt;&gt;  &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#impact-on-existing-code&gt;Impact<br>&gt;&gt;&gt; on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The Swift migrator and fix-its would be provided for the change. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/PatrickPijnappel/swift-evolution/blob/functional-methods-ed-ing/proposals/XXXX-functional-methods-ed-ing.md#alternatives-considered&gt;Alternatives<br>&gt;&gt;&gt; considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternatively -ing suffixes could be used for<br>&gt;&gt;&gt; map/flatMap/filter/reduce. However, these are normally reserved for<br>&gt;&gt;&gt; when -ed doesn&#39;t really work (e.g. droppedFirst).<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
