<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 12, 2016 at 08:00:00am</p></header><div class="content"><p>on Fri Feb 12 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; (Warning: I&#39;m going to use &quot;acronym&quot; loosely. Sorry.)<br>&gt;<br>&gt;&gt; Strong dislike for #2. I understand and accept the benefits, but I<br>&gt; just don’t like how that looks.<br>&gt;<br>&gt; Me too. I look at the examples and I&#39;m frankly just revolted. It&#39;s a<br>&gt; visceral reaction, something I have trouble analyzing because it&#39;s so<br>&gt; violent. Whatever the practical benefits, it reads like a deliberate<br>&gt; abuse of the language, like someone choosing expedience over good<br>&gt; style, lyk sum1 doin dis bcuz its so hard 2 pres da btns.<br>&gt;<br>&gt; But emotional reactions are hard to convey convincingly in text, so<br>&gt; I&#39;ll try to distill some of it into logical argument.<br>&gt;<br>&gt; Some acronym-using terms, like &quot;XML document&quot;, are easy to turn into<br>&gt; identifiers; others, like &quot;AWS S3 RPC URL&quot;*, are difficult. Option #2<br>&gt; handles this problem by making all acronyms equally ugly and<br>&gt; unreadable. I don&#39;t think that&#39;s an improvement.<br>&gt;<br>&gt; I especially think it&#39;s not an improvement because the resulting<br>&gt; identifiers are so hard to read. It&#39;s true that `AwsS3RpcUrl` is<br>&gt; technically *parseable* since the word boundaries are demarcated<br>&gt; (well, except for that pesky `3`), but is it actually *readable* when<br>&gt; you set eyes on it? It&#39;s not for me. My brain, being used to English,<br>&gt; tries to read those uppercase-lowercase combinations as actual words<br>&gt; with actual pronunciations and it just sees gibberish. <br></p><p>Yes, the analysis tries to account for that factor with the bullet<br>entitled “encourages spelling rather than pronouncing”<br></p><p>&gt; Maybe that would get better with time, but this is something that<br>&gt; every new Swift developer would go through. <br></p><p>This is clearly highly subjective.  Some people have no problem with it.<br></p><p>&gt; Capitalizing acronyms may be ambiguous sometimes, but it at least<br>&gt; ensures that you never misread an acronym as a word.<br>&gt;<br>&gt; And for those pathological cases where we think there&#39;s too much<br>&gt; ambiguity, we *do* have another option: `AWS_S3_RPC_URL`. Swift style<br>&gt; disfavors underscores, but it disfavors lack of clarity even more. To<br>&gt; me, `AWS_S3_RPC_URL` is *far* clearer than either `AWSS3RPCURL` *or*<br>&gt; `AwsS3RpcUrl`.<br>&gt;<br>&gt; Incidentally, how common *are* concatenated acronyms or other forms of<br>&gt; acronym-related ambiguity? And when it does happen in existing<br>&gt; Objective-C APIs, can we actually detect it and do the right thing, or<br>&gt; are imported APIs going to have spellings like `Awss3Rpcurl` that are<br>&gt; not merely ambiguous, but actively misleading?<br>&gt;<br>&gt; The way I see it, at some point any convention is going to break<br>&gt; down. All we can do is decide which cases we care about more. Do we<br>&gt; want to optimize for the `XMLDocument`s of the world or the<br>&gt; `AwsS3RpcUrl`s?<br>&gt;<br>&gt; Bottom line for me: If #2 was the convention, I&#39;m about 90% certain I<br>&gt; would simply flat out ignore it when I named things, and cringe when I<br>&gt; had to use someone else&#39;s names. I don&#39;t think we should adopt a<br>&gt; naming convention that makes users cringe.<br></p><p>So what convention doesn&#39;t make you cringe?  Would you accept any of the<br>others there, or is it something else?<br></p><p>As I mentioned to Marco, if you&#39;d like to create an amended document<br>that accounts for that one, too, I&#39;d be happy to incorporate it.<br>However, note that I&#39;ve tried pretty hard to stay away from subjective<br>factors in the analysis; it would be good if you could do the same.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 12, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt;&gt; Maybe that would get better with time, but this is something that<br>&gt;&gt; every new Swift developer would go through. <br>&gt; <br>&gt; This is clearly highly subjective.  Some people have no problem with it.<br></p><p>I strongly suspect, though I cannot prove, that it&#39;s not so much that some people have no problem with it as that some people are already acclimated to it. I would be interested to learn if the #2 voters have previous experience using that style.<br></p><p>&gt;&gt; Bottom line for me: If #2 was the convention, I&#39;m about 90% certain I<br>&gt;&gt; would simply flat out ignore it when I named things, and cringe when I<br>&gt;&gt; had to use someone else&#39;s names. I don&#39;t think we should adopt a<br>&gt;&gt; naming convention that makes users cringe.<br>&gt; <br>&gt; So what convention doesn&#39;t make you cringe?  Would you accept any of the<br>&gt; others there, or is it something else?<br></p><p>I like #3, and #1 is quite acceptable as well.<br></p><p>I&#39;d like to talk briefly about *why* I think #3 is okay. We do lose the &quot;capital letter means type&quot; cue, but I&#39;m willing to tolerate that ambiguity. I think of types as being an abstraction of values—`numberOfRows` is some particular integer, but `Int` is the abstract concept of an integer. In a sense, a type is like a Platonic Form, and so we borrow the convention of capitalizing them to distinguish them from their concrete instances. When we want to incorporate an acronym, which is always uppercased, into the name of a concrete instance, that convention breaks down, but that&#39;s okay—it&#39;s just a convention, not an iron law of Swift identifiers.<br></p><p>I think that, to some extent, the decision here is a tradeoff between ambiguity and natural appearance. Perhaps I simply have a greater tolerance for ambiguity and dislike of unnatural appearance than the #2 supporters.<br></p><p>&gt; As I mentioned to Marco, if you&#39;d like to create an amended document<br>&gt; that accounts for that one, too, I&#39;d be happy to incorporate it.<br>&gt; However, note that I&#39;ve tried pretty hard to stay away from subjective<br>&gt; factors in the analysis; it would be good if you could do the same.<br></p><p>I think it makes sense to try to stay away from subjective factors in your analysis, but I don&#39;t think we can make the actual decision without considering them. If you really want to make the word boundaries obvious, the best solution is to use underscores in identifiers anywhere you would normally put a space. We don&#39;t do that because of a subjective judgement that underscores in identifiers are ugly.<br></p><p>(If you&#39;re editing the analysis, though, one thing confuses me about #3: Why is &#39;Encourages “spelling” rather than “pronouncing” the initialism&#39; only 2/3?)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February 12, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Feb 12, 2016 at 3:37 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;&gt; Maybe that would get better with time, but this is something that<br>&gt; &gt;&gt; every new Swift developer would go through.<br>&gt; &gt;<br>&gt; &gt; This is clearly highly subjective.  Some people have no problem with it.<br>&gt;<br>&gt; I strongly suspect, though I cannot prove, that it&#39;s not so much that some<br>&gt; people have no problem with it as that some people are already acclimated<br>&gt; to it. I would be interested to learn if the #2 voters have previous<br>&gt; experience using that style.<br>&gt;<br>&gt;<br>Early (pre-2001 or so) Google code used option #1, and then preferences<br>switched to option #2 around 2002 or 2003.  (I don&#39;t think it&#39;s ever stated<br>explicitly in the styleguide, but the *examples* there use option #2, so<br>that&#39;s what was called for in code reviews.)  Yes, that means that you will<br>occasionally write abominations like operating on HTMLTokens with<br>HtmlUtils.  I have a pretty strong preference for never changing the<br>convention once it&#39;s set (stronger than any of my preferences for each<br>individual option).  Indeed, if there&#39;s a lot of Cocoa or standard library<br>code that non-negotiably uses an existing convention, that&#39;s a very strong<br>argument to go with that convention regardless of what everyone thinks here.<br></p><p>I voted for #2.  I want to make it clear that I had a very similar reaction<br>to it as you when I first saw it in the Java styleguides.  Most of my<br>personal code actually uses #1, but then, I tend to use snake_case in my<br>personal code when freed from any existing organization&#39;s styleguide, which<br>is apparently off the table for Swift.  I&#39;ve found that you do eventually<br>get used to titlecased initialisms like Url, Rpc, and Html; they look gross<br>at first, but soon they become just another programming idiosyncracy, like<br>the parentheses in Lisp or the semicolons in every other language.<br>However, you do *not* get used to things like RPCURL or XMLLALRParser; they<br>happen just infrequently enough to throw you for a loop when they do occur,<br>but then when that happens, you need to stare at them and parse out each<br>individual letter to understand the identifier.  It&#39;s even worse when they<br>happen to spell out another programming concept; I can&#39;t look at RPCURL<br>without seeing R-P-CURL, or read IOSSystemCall as IO-System-Call instead of<br>iOS-System-Call.<br></p><p><br>&gt; &gt;&gt; Bottom line for me: If #2 was the convention, I&#39;m about 90% certain I<br>&gt; &gt;&gt; would simply flat out ignore it when I named things, and cringe when I<br>&gt; &gt;&gt; had to use someone else&#39;s names. I don&#39;t think we should adopt a<br>&gt; &gt;&gt; naming convention that makes users cringe.<br>&gt; &gt;<br>&gt; &gt; So what convention doesn&#39;t make you cringe?  Would you accept any of the<br>&gt; &gt; others there, or is it something else?<br>&gt;<br>&gt; I like #3, and #1 is quite acceptable as well.<br>&gt;<br>&gt; I&#39;d like to talk briefly about *why* I think #3 is okay. We do lose the<br>&gt; &quot;capital letter means type&quot; cue, but I&#39;m willing to tolerate that<br>&gt; ambiguity. I think of types as being an abstraction of<br>&gt; values—`numberOfRows` is some particular integer, but `Int` is the abstract<br>&gt; concept of an integer. In a sense, a type is like a Platonic Form, and so<br>&gt; we borrow the convention of capitalizing them to distinguish them from<br>&gt; their concrete instances. When we want to incorporate an acronym, which is<br>&gt; always uppercased, into the name of a concrete instance, that convention<br>&gt; breaks down, but that&#39;s okay—it&#39;s just a convention, not an iron law of<br>&gt; Swift identifiers.<br>&gt;<br>&gt; I think that, to some extent, the decision here is a tradeoff between<br>&gt; ambiguity and natural appearance. Perhaps I simply have a greater tolerance<br>&gt; for ambiguity and dislike of unnatural appearance than the #2 supporters.<br>&gt;<br>&gt; &gt; As I mentioned to Marco, if you&#39;d like to create an amended document<br>&gt; &gt; that accounts for that one, too, I&#39;d be happy to incorporate it.<br>&gt; &gt; However, note that I&#39;ve tried pretty hard to stay away from subjective<br>&gt; &gt; factors in the analysis; it would be good if you could do the same.<br>&gt;<br>&gt; I think it makes sense to try to stay away from subjective factors in your<br>&gt; analysis, but I don&#39;t think we can make the actual decision without<br>&gt; considering them. If you really want to make the word boundaries obvious,<br>&gt; the best solution is to use underscores in identifiers anywhere you would<br>&gt; normally put a space. We don&#39;t do that because of a subjective judgement<br>&gt; that underscores in identifiers are ugly.<br>&gt;<br>&gt; (If you&#39;re editing the analysis, though, one thing confuses me about #3:<br>&gt; Why is &#39;Encourages “spelling” rather than “pronouncing” the initialism&#39;<br>&gt; only 2/3?)<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/6f533615/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Analysis of case conventions for initialisms</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 12, 2016 at 04:00:00pm</p></header><div class="content"><p>on Fri Feb 12 2016, Brent Royal-Gordon &lt;brent-AT-architechies.com&gt; wrote:<br></p><p>&gt; (If you&#39;re editing the analysis, though, one thing confuses me about<br>&gt; #3: Why is &#39;Encourages “spelling” rather than “pronouncing” the<br>&gt; initialism&#39; only 2/3?)<br></p><p>Because that convention still lowercases initialisms at the beginnings<br>of local variable and parameter names, and there&#39;s nothing to encourage<br>you to read the letter names out when you see a bunch of lower-case<br>letters next to one another.<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
