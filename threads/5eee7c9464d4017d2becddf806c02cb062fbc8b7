<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 15, 2016 at 09:00:00am</p></header><div class="content"><p>While discussing leading enumeration dot prefixes, Howard Lovatt asked why static properties and methods could not be inferred via a dot prefix as well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss this idea: specifically, would it be beneficial (and/or possible) to use dot prefixes to denote static member references in instance member code.<br></p><p>Howard wrote:<br></p><p>&gt; +1 for the proposal, it is wierd to use `.` in some places and not others. <br>&gt; <br>&gt; On the subject of static methods and properties in general, would it be possible for `.name` to be a reference to a static and `name` a reference to an instance? EG:<br>&gt; <br>&gt;     .name = x // static<br>&gt;     name = x // instance<br>&gt;     x = name + .name // instance + static<br>&gt;     r = name ... .name // instance ... static, needs space<br>&gt;     r = name...Type.name // Can still qualify with type name<br>&gt; <br></p><p>Under the current system, you must explicitly name or derive a type to access static members from instance member implementations.<br></p><p>struct MyStruct {<br>    static func staticMember() {}<br>    <br>    func instanceMember() {<br>        // name a type<br>        MyStruct.staticMember() // works<br></p><p>        // derive a type<br>        self.dynamicType.staticMember() // works<br>        <br>        // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>        // does not work<br>        .staticMember()<br>    }<br>}<br></p><p>Using dot prefixes for static member access:<br></p><p>* Has precedent in enumeration members<br>* Would streamline Swift code<br>* Is visually differentiated from `self`-prefixed instance member references<br></p><p>What are your thoughts, both technical and philosophical, on a change like this? Thanks in advance for your feedback.<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/5eeec8b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>February 15, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Le 15 févr. 2016 à 11:58, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked why static properties and methods could not be inferred via a dot prefix as well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss this idea: specifically, would it be beneficial (and/or possible) to use dot prefixes to denote static member references in instance member code.<br>&gt; <br>&gt; Howard wrote:<br>&gt; <br>&gt;&gt; +1 for the proposal, it is wierd to use `.` in some places and not others. <br>&gt;&gt; <br>&gt;&gt; On the subject of static methods and properties in general, would it be possible for `.name` to be a reference to a static and `name` a reference to an instance? EG:<br>&gt;&gt; <br>&gt;&gt;     .name = x // static<br>&gt;&gt;     name = x // instance<br>&gt;&gt;     x = name + .name // instance + static<br>&gt;&gt;     r = name ... .name // instance ... static, needs space<br>&gt;&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;&gt; <br>&gt; <br>&gt; Under the current system, you must explicitly name or derive a type to access static members from instance member implementations.<br>&gt; <br>&gt; struct MyStruct {<br>&gt;     static func staticMember() {}<br>&gt;     <br>&gt;     func instanceMember() {<br>&gt;         // name a type<br>&gt;         MyStruct.staticMember() // works<br>&gt; <br>&gt;         // derive a type<br>&gt;         self.dynamicType.staticMember() // works<br>&gt;         <br>&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;         // does not work<br>&gt;         .staticMember()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Using dot prefixes for static member access:<br>&gt; <br>&gt; * Has precedent in enumeration members<br>&gt; * Would streamline Swift code<br>&gt; * Is visually differentiated from `self`-prefixed instance member references<br>&gt; <br>&gt; What are your thoughts, both technical and philosophical, on a change like this? Thanks in advance for your feedback.<br></p><p><br>Not sure if it’s valid concern, but the current shorthand is based on the immediate context of comparison/pattern matching. Adding shorthand here for static member reference within the class could introduce some resolution conflicts. <br></p><p>enum MyEnum {<br>    case one<br>    case two<br>    <br>    static func stillOne() -&gt; MyEnum { return one }<br>}<br></p><p>let data:MyEnum = .one<br>if .stillOne() == data { print(&quot;Something!&quot;) }<br></p><p>struct MyStruct {<br>    static var data:MyEnum = .one<br>    static func stillOne() -&gt; Bool { return data == .one }<br>    <br>    func instanceMember() {<br>        if .stillOne() == MyStruct.data { print(&quot;Something&quot;) } // This currently work<br>    }<br>}<br></p><p>The current logic easily resolves the code inside instanceMember() as a shorthand to MyEnum,  but if we expand the shorthand as describe, will it make it too hard on the compiler.<br></p><p><br>Dany<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/651d481c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 15, 2016, at 8:58, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked why static properties and methods could not be inferred via a dot prefix as well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss this idea: specifically, would it be beneficial (and/or possible) to use dot prefixes to denote static member references in instance member code.<br>&gt; <br>&gt; Howard wrote:<br>&gt; <br>&gt;&gt; +1 for the proposal, it is wierd to use `.` in some places and not others. <br>&gt;&gt; <br>&gt;&gt; On the subject of static methods and properties in general, would it be possible for `.name` to be a reference to a static and `name` a reference to an instance? EG:<br>&gt;&gt; <br>&gt;&gt;     .name = x // static<br>&gt;&gt;     name = x // instance<br>&gt;&gt;     x = name + .name // instance + static<br>&gt;&gt;     r = name ... .name // instance ... static, needs space<br>&gt;&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;&gt; <br>&gt; <br>&gt; Under the current system, you must explicitly name or derive a type to access static members from instance member implementations.<br>&gt; <br>&gt; struct MyStruct {<br>&gt;     static func staticMember() {}<br>&gt;     <br>&gt;     func instanceMember() {<br>&gt;         // name a type<br>&gt;         MyStruct.staticMember() // works<br>&gt; <br>&gt;         // derive a type<br>&gt;         self.dynamicType.staticMember() // works<br>&gt;         <br>&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;         // does not work<br>&gt;         .staticMember()<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Using dot prefixes for static member access:<br>&gt; <br>&gt; * Has precedent in enumeration members<br>&gt; * Would streamline Swift code<br>&gt; * Is visually differentiated from `self`-prefixed instance member references<br>&gt; <br>&gt; What are your thoughts, both technical and philosophical, on a change like this? Thanks in advance for your feedback.<br></p><p>Dot-prefixed member expressions are currently looked up as static members of the contextual type, which lets you do things like this:<br></p><p>import AppKit<br>let colors: [NSColor] = [.redColor(), .blueColor()]<br></p><p>I don&#39;t think we want to change or overload that rule to also look up static members of the enclosing lexical context type (i.e. the type of &#39;self&#39;).<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/2f9f0061/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 15, 2016 at 11:00:00am</p></header><div class="content"><p>Sounds like a compelling response to me. Thanks, Jordan.<br></p><p>-- E<br></p><p>&gt; On Feb 15, 2016, at 11:40 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 15, 2016, at 8:58, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked why static properties and methods could not be inferred via a dot prefix as well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss this idea: specifically, would it be beneficial (and/or possible) to use dot prefixes to denote static member references in instance member code.<br>&gt;&gt; <br>&gt;&gt; Howard wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; +1 for the proposal, it is wierd to use `.` in some places and not others. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On the subject of static methods and properties in general, would it be possible for `.name` to be a reference to a static and `name` a reference to an instance? EG:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     .name = x // static<br>&gt;&gt;&gt;     name = x // instance<br>&gt;&gt;&gt;     x = name + .name // instance + static<br>&gt;&gt;&gt;     r = name ... .name // instance ... static, needs space<br>&gt;&gt;&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Under the current system, you must explicitly name or derive a type to access static members from instance member implementations.<br>&gt;&gt; <br>&gt;&gt; struct MyStruct {<br>&gt;&gt;     static func staticMember() {}<br>&gt;&gt;     <br>&gt;&gt;     func instanceMember() {<br>&gt;&gt;         // name a type<br>&gt;&gt;         MyStruct.staticMember() // works<br>&gt;&gt; <br>&gt;&gt;         // derive a type<br>&gt;&gt;         self.dynamicType.staticMember() // works<br>&gt;&gt;         <br>&gt;&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;&gt;         // does not work<br>&gt;&gt;         .staticMember()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Using dot prefixes for static member access:<br>&gt;&gt; <br>&gt;&gt; * Has precedent in enumeration members<br>&gt;&gt; * Would streamline Swift code<br>&gt;&gt; * Is visually differentiated from `self`-prefixed instance member references<br>&gt;&gt; <br>&gt;&gt; What are your thoughts, both technical and philosophical, on a change like this? Thanks in advance for your feedback.<br>&gt; <br>&gt; Dot-prefixed member expressions are currently looked up as static members of the contextual type, which lets you do things like this:<br>&gt; <br>&gt; import AppKit<br>&gt; let colors: [NSColor] = [.redColor(), .blueColor()]<br>&gt; <br>&gt; I don&#39;t think we want to change or overload that rule to also look up static members of the enclosing lexical context type (i.e. the type of &#39;self&#39;).<br>&gt; <br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/d46b51fe/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 17, 2016 at 11:00:00am</p></header><div class="content"><p>@Jordan,<br></p><p>You said &quot;I don&#39;t think we want to change or overload that rule to also<br>look up static members of the *enclosing lexical context type* (i.e. the<br>type of &#39;self&#39;).&quot; But you do already; inside an enum, e.g.:<br></p><p>enum Enum {<br>    case one<br>    case two<br>    func e() -&gt; String {<br>        if self == .one {<br>            return &quot;one&quot;<br>        } else if self == .two {<br>            return &quot;two&quot;<br>        }<br>        return &quot;unkown&quot;<br>    }<br>}<br></p><p>Compared to inside a static:<br></p><p>class Static {<br>    class One: Static {}<br>    static let one = One()<br>    class Two: Static {}<br>    static let two = Two()<br>    func e() -&gt; String {<br>        if self === Static.one {<br>            return &quot;one&quot;<br>        } else if self === Static.two {<br>            return &quot;two&quot;<br>        }<br>        return &quot;unknown&quot;<br>    }<br>}<br></p><p>Why so different? The enum version looks inside the type `Enum` to find<br>`.one` and `.two`, but the static version doesn&#39;t look inside the type<br>`Static` and hence you have to say `Static.one` and `Static.two` :(<br></p><p>  -- Howard.<br></p><p>On 16 February 2016 at 05:40, Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Feb 15, 2016, at 8:58, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked why<br>&gt; static properties and methods could not be inferred via a dot prefix as<br>&gt; well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss<br>&gt; this idea: specifically, would it be beneficial (and/or possible) to use<br>&gt; dot prefixes to denote static member references in instance member code.<br>&gt;<br>&gt; Howard wrote:<br>&gt;<br>&gt; +1 for the proposal, it is wierd to use `.` in some places and not others.<br>&gt;<br>&gt; On the subject of static methods and properties in general, would it be<br>&gt; possible for `.name` to be a reference to a static and `name` a reference<br>&gt; to an instance? EG:<br>&gt;<br>&gt;     .name = x // static<br>&gt;     name = x // instance<br>&gt;     x = name + .name // instance + static<br>&gt;     r = name ... .name // instance ... static, needs space<br>&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;<br>&gt;<br>&gt; Under the current system, you must explicitly name or derive a type to<br>&gt; access static members from instance member implementations.<br>&gt;<br>&gt; struct MyStruct {<br>&gt;     static func staticMember() {}<br>&gt;<br>&gt;     func instanceMember() {<br>&gt;         // name a type<br>&gt;         MyStruct.staticMember() // works<br>&gt;<br>&gt;         // derive a type<br>&gt;         self.dynamicType.staticMember() // works<br>&gt;<br>&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;         // does not work<br>&gt;         .staticMember()<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Using dot prefixes for static member access:<br>&gt;<br>&gt; * Has precedent in enumeration members<br>&gt; * Would streamline Swift code<br>&gt; * Is visually differentiated from `self`-prefixed instance member<br>&gt; references<br>&gt;<br>&gt; What are your thoughts, both technical and philosophical, on a change like<br>&gt; this? Thanks in advance for your feedback.<br>&gt;<br>&gt;<br>&gt; Dot-prefixed member expressions are currently looked up as static members<br>&gt; of the* contextual type,* which lets you do things like this:<br>&gt;<br>&gt; import AppKit<br>&gt; let colors: [NSColor] = [.redColor(), .blueColor()]<br>&gt;<br>&gt;<br>&gt; I don&#39;t think we want to change or overload that rule to also look up<br>&gt; static members of the *enclosing lexical context type* (i.e. the type of<br>&gt; &#39;self&#39;).<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/5e4e0a3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 16, 2016 at 04:00:00pm</p></header><div class="content"><p>That works just as well outside the enum:<br></p><p>enum Enum {<br>    case one<br>    case two<br>}<br>func e(value: Enum) -&gt; String {<br>    if value == .one {<br>        return &quot;one&quot;<br>    } else if value == .two {<br>        return &quot;two&quot;<br>    }<br>    return &quot;unkown&quot;<br>}<br></p><p>Here it&#39;s looking in the contextual type provided by ==. The enum synthesizes a function along the lines of<br></p><p>func ==(a: Enum, b: Enum)<br></p><p>This doesn&#39;t work for === because you can compare identity across class types.<br></p><p>func ===(a: AnyObject, b: AnyObject)<br></p><p>Jordan<br></p><p><br>&gt; On Feb 16, 2016, at 16:20, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt; <br>&gt; @Jordan,<br>&gt; <br>&gt; You said &quot;I don&#39;t think we want to change or overload that rule to also look up static members of the enclosing lexical context type (i.e. the type of &#39;self&#39;).&quot; But you do already; inside an enum, e.g.:<br>&gt; <br>&gt; enum Enum {<br>&gt;     case one<br>&gt;     case two<br>&gt;     func e() -&gt; String {<br>&gt;         if self == .one {<br>&gt;             return &quot;one&quot;<br>&gt;         } else if self == .two {<br>&gt;             return &quot;two&quot;<br>&gt;         }<br>&gt;         return &quot;unkown&quot;<br>&gt;     }<br>&gt; }<br>&gt; Compared to inside a static:<br>&gt; <br>&gt; class Static {<br>&gt;     class One: Static {}<br>&gt;     static let one = One()<br>&gt;     class Two: Static {}<br>&gt;     static let two = Two()<br>&gt;     func e() -&gt; String {<br>&gt;         if self === Static.one {<br>&gt;             return &quot;one&quot;<br>&gt;         } else if self === Static.two {<br>&gt;             return &quot;two&quot;<br>&gt;         }<br>&gt;         return &quot;unknown&quot;<br>&gt;     }<br>&gt; }<br>&gt; Why so different? The enum version looks inside the type `Enum` to find `.one` and `.two`, but the static version doesn&#39;t look inside the type `Static` and hence you have to say `Static.one` and `Static.two` :(<br>&gt; <br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 16 February 2016 at 05:40, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 15, 2016, at 8:58, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked why static properties and methods could not be inferred via a dot prefix as well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss this idea: specifically, would it be beneficial (and/or possible) to use dot prefixes to denote static member references in instance member code.<br>&gt;&gt; <br>&gt;&gt; Howard wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; +1 for the proposal, it is wierd to use `.` in some places and not others. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On the subject of static methods and properties in general, would it be possible for `.name` to be a reference to a static and `name` a reference to an instance? EG:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     .name = x // static<br>&gt;&gt;&gt;     name = x // instance<br>&gt;&gt;&gt;     x = name + .name // instance + static<br>&gt;&gt;&gt;     r = name ... .name // instance ... static, needs space<br>&gt;&gt;&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Under the current system, you must explicitly name or derive a type to access static members from instance member implementations.<br>&gt;&gt; <br>&gt;&gt; struct MyStruct {<br>&gt;&gt;     static func staticMember() {}<br>&gt;&gt;     <br>&gt;&gt;     func instanceMember() {<br>&gt;&gt;         // name a type<br>&gt;&gt;         MyStruct.staticMember() // works<br>&gt;&gt; <br>&gt;&gt;         // derive a type<br>&gt;&gt;         self.dynamicType.staticMember() // works<br>&gt;&gt;         <br>&gt;&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;&gt;         // does not work<br>&gt;&gt;         .staticMember()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Using dot prefixes for static member access:<br>&gt;&gt; <br>&gt;&gt; * Has precedent in enumeration members<br>&gt;&gt; * Would streamline Swift code<br>&gt;&gt; * Is visually differentiated from `self`-prefixed instance member references<br>&gt;&gt; <br>&gt;&gt; What are your thoughts, both technical and philosophical, on a change like this? Thanks in advance for your feedback.<br>&gt; <br>&gt; Dot-prefixed member expressions are currently looked up as static members of the contextual type, which lets you do things like this:<br>&gt; <br>&gt; import AppKit<br>&gt; let colors: [NSColor] = [.redColor(), .blueColor()]<br>&gt; <br>&gt; I don&#39;t think we want to change or overload that rule to also look up static members of the enclosing lexical context type (i.e. the type of &#39;self&#39;).<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/b23128c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 17, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Jordan,<br></p><p>Yes implementing `==` will patch the example I gave, but it isn&#39;t a general<br>solution. Consider this variation:<br></p><p>class Static: Equatable {<br>    class One: Static {}<br>    static let one = One()<br>    class Two: Static {}<br>    static let two = Two()<br>    func e() -&gt; String {<br>        switch self {<br>        case Static.one:<br>            return &quot;one&quot;<br>        case Static.two :<br>            return &quot;two&quot;<br>        default:<br>            return &quot;unknown&quot;<br>        }<br>    }<br>}<br>func ==(lhs: Static, rhs: Static) -&gt; Bool {<br>    return lhs === rhs<br>}<br></p><p>Still needs the type qualifiers :(.<br></p><p>  -- Howard.<br></p><p>On 17 February 2016 at 11:31, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; That works just as well outside the enum:<br>&gt;<br>&gt; enum Enum {<br>&gt;     case one<br>&gt;     case two<br>&gt; }<br>&gt;<br>&gt; func e(value: Enum) -&gt; String {<br>&gt;     if value == .one {<br>&gt;         return &quot;one&quot;<br>&gt;     } else if value == .two {<br>&gt;         return &quot;two&quot;<br>&gt;     }<br>&gt;     return &quot;unkown&quot;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Here it&#39;s looking in the contextual type provided by ==. The enum<br>&gt; synthesizes a function along the lines of<br>&gt;<br>&gt; func ==(a: Enum, b: Enum)<br>&gt;<br>&gt;<br>&gt; This doesn&#39;t work for === because you can compare identity across class<br>&gt; types.<br>&gt;<br>&gt; func ===(a: AnyObject, b: AnyObject)<br>&gt;<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Feb 16, 2016, at 16:20, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt;<br>&gt; @Jordan,<br>&gt;<br>&gt; You said &quot;I don&#39;t think we want to change or overload that rule to also<br>&gt; look up static members of the *enclosing lexical context type* (i.e. the<br>&gt; type of &#39;self&#39;).&quot; But you do already; inside an enum, e.g.:<br>&gt;<br>&gt; enum Enum {<br>&gt;     case one<br>&gt;     case two<br>&gt;     func e() -&gt; String {<br>&gt;         if self == .one {<br>&gt;             return &quot;one&quot;<br>&gt;         } else if self == .two {<br>&gt;             return &quot;two&quot;<br>&gt;         }<br>&gt;         return &quot;unkown&quot;<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Compared to inside a static:<br>&gt;<br>&gt; class Static {<br>&gt;     class One: Static {}<br>&gt;     static let one = One()<br>&gt;     class Two: Static {}<br>&gt;     static let two = Two()<br>&gt;     func e() -&gt; String {<br>&gt;         if self === Static.one {<br>&gt;             return &quot;one&quot;<br>&gt;         } else if self === Static.two {<br>&gt;             return &quot;two&quot;<br>&gt;         }<br>&gt;         return &quot;unknown&quot;<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Why so different? The enum version looks inside the type `Enum` to find<br>&gt; `.one` and `.two`, but the static version doesn&#39;t look inside the type<br>&gt; `Static` and hence you have to say `Static.one` and `Static.two` :(<br>&gt;<br>&gt;   -- Howard.<br>&gt;<br>&gt; On 16 February 2016 at 05:40, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Feb 15, 2016, at 8:58, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked<br>&gt;&gt; why static properties and methods could not be inferred via a dot prefix as<br>&gt;&gt; well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss<br>&gt;&gt; this idea: specifically, would it be beneficial (and/or possible) to use<br>&gt;&gt; dot prefixes to denote static member references in instance member code.<br>&gt;&gt;<br>&gt;&gt; Howard wrote:<br>&gt;&gt;<br>&gt;&gt; +1 for the proposal, it is wierd to use `.` in some places and not<br>&gt;&gt; others.<br>&gt;&gt;<br>&gt;&gt; On the subject of static methods and properties in general, would it be<br>&gt;&gt; possible for `.name` to be a reference to a static and `name` a reference<br>&gt;&gt; to an instance? EG:<br>&gt;&gt;<br>&gt;&gt;     .name = x // static<br>&gt;&gt;     name = x // instance<br>&gt;&gt;     x = name + .name // instance + static<br>&gt;&gt;     r = name ... .name // instance ... static, needs space<br>&gt;&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Under the current system, you must explicitly name or derive a type to<br>&gt;&gt; access static members from instance member implementations.<br>&gt;&gt;<br>&gt;&gt; struct MyStruct {<br>&gt;&gt;     static func staticMember() {}<br>&gt;&gt;<br>&gt;&gt;     func instanceMember() {<br>&gt;&gt;         // name a type<br>&gt;&gt;         MyStruct.staticMember() // works<br>&gt;&gt;<br>&gt;&gt;         // derive a type<br>&gt;&gt;         self.dynamicType.staticMember() // works<br>&gt;&gt;<br>&gt;&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;&gt;         // does not work<br>&gt;&gt;         .staticMember()<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Using dot prefixes for static member access:<br>&gt;&gt;<br>&gt;&gt; * Has precedent in enumeration members<br>&gt;&gt; * Would streamline Swift code<br>&gt;&gt; * Is visually differentiated from `self`-prefixed instance member<br>&gt;&gt; references<br>&gt;&gt;<br>&gt;&gt; What are your thoughts, both technical and philosophical, on a change<br>&gt;&gt; like this? Thanks in advance for your feedback.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Dot-prefixed member expressions are currently looked up as static members<br>&gt;&gt; of the* contextual type,* which lets you do things like this:<br>&gt;&gt;<br>&gt;&gt; import AppKit<br>&gt;&gt; let colors: [NSColor] = [.redColor(), .blueColor()]<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think we want to change or overload that rule to also look up<br>&gt;&gt; static members of the *enclosing lexical context type* (i.e. the type of<br>&gt;&gt; &#39;self&#39;).<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/6d60b7ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Using dot prefixes to infer non-enumeration static members</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 16, 2016 at 05:00:00pm</p></header><div class="content"><p>No, I meant the code I showed already works by the principle I stated. Dot-prefixed member access always looks up in a contextual type for a member returning the same type. Your example here has nothing to do about lexical scoping; it just means we don&#39;t take subtypes into account when we could.<br></p><p>Jordan<br></p><p>&gt; On Feb 16, 2016, at 16:59, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Jordan,<br>&gt; <br>&gt; Yes implementing `==` will patch the example I gave, but it isn&#39;t a general solution. Consider this variation:<br>&gt; <br>&gt; class Static: Equatable {<br>&gt;     class One: Static {}<br>&gt;     static let one = One()<br>&gt;     class Two: Static {}<br>&gt;     static let two = Two()<br>&gt;     func e() -&gt; String {<br>&gt;         switch self {<br>&gt;         case Static.one:<br>&gt;             return &quot;one&quot;<br>&gt;         case Static.two :<br>&gt;             return &quot;two&quot;<br>&gt;         default:<br>&gt;             return &quot;unknown&quot;<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; func ==(lhs: Static, rhs: Static) -&gt; Bool {<br>&gt;     return lhs === rhs<br>&gt; }<br>&gt; <br>&gt; Still needs the type qualifiers :(.<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 17 February 2016 at 11:31, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; That works just as well outside the enum:<br>&gt; <br>&gt; enum Enum {<br>&gt;     case one<br>&gt;     case two<br>&gt; }<br>&gt; func e(value: Enum) -&gt; String {<br>&gt;     if value == .one {<br>&gt;         return &quot;one&quot;<br>&gt;     } else if value == .two {<br>&gt;         return &quot;two&quot;<br>&gt;     }<br>&gt;     return &quot;unkown&quot;<br>&gt; }<br>&gt; <br>&gt; Here it&#39;s looking in the contextual type provided by ==. The enum synthesizes a function along the lines of<br>&gt; <br>&gt; func ==(a: Enum, b: Enum)<br>&gt; <br>&gt; This doesn&#39;t work for === because you can compare identity across class types.<br>&gt; <br>&gt; func ===(a: AnyObject, b: AnyObject)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 16, 2016, at 16:20, Howard Lovatt &lt;howard.lovatt at gmail.com &lt;mailto:howard.lovatt at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; @Jordan,<br>&gt;&gt; <br>&gt;&gt; You said &quot;I don&#39;t think we want to change or overload that rule to also look up static members of the enclosing lexical context type (i.e. the type of &#39;self&#39;).&quot; But you do already; inside an enum, e.g.:<br>&gt;&gt; <br>&gt;&gt; enum Enum {<br>&gt;&gt;     case one<br>&gt;&gt;     case two<br>&gt;&gt;     func e() -&gt; String {<br>&gt;&gt;         if self == .one {<br>&gt;&gt;             return &quot;one&quot;<br>&gt;&gt;         } else if self == .two {<br>&gt;&gt;             return &quot;two&quot;<br>&gt;&gt;         }<br>&gt;&gt;         return &quot;unkown&quot;<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; Compared to inside a static:<br>&gt;&gt; <br>&gt;&gt; class Static {<br>&gt;&gt;     class One: Static {}<br>&gt;&gt;     static let one = One()<br>&gt;&gt;     class Two: Static {}<br>&gt;&gt;     static let two = Two()<br>&gt;&gt;     func e() -&gt; String {<br>&gt;&gt;         if self === Static.one {<br>&gt;&gt;             return &quot;one&quot;<br>&gt;&gt;         } else if self === Static.two {<br>&gt;&gt;             return &quot;two&quot;<br>&gt;&gt;         }<br>&gt;&gt;         return &quot;unknown&quot;<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; Why so different? The enum version looks inside the type `Enum` to find `.one` and `.two`, but the static version doesn&#39;t look inside the type `Static` and hence you have to say `Static.one` and `Static.two` :(<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;   -- Howard.<br>&gt;&gt; <br>&gt;&gt; On 16 February 2016 at 05:40, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 15, 2016, at 8:58, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While discussing leading enumeration dot prefixes, Howard Lovatt asked why static properties and methods could not be inferred via a dot prefix as well. Based on Swift-Evolution conventions, here&#39;s a new thread to discuss this idea: specifically, would it be beneficial (and/or possible) to use dot prefixes to denote static member references in instance member code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Howard wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 for the proposal, it is wierd to use `.` in some places and not others. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On the subject of static methods and properties in general, would it be possible for `.name` to be a reference to a static and `name` a reference to an instance? EG:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     .name = x // static<br>&gt;&gt;&gt;&gt;     name = x // instance<br>&gt;&gt;&gt;&gt;     x = name + .name // instance + static<br>&gt;&gt;&gt;&gt;     r = name ... .name // instance ... static, needs space<br>&gt;&gt;&gt;&gt;     r = name...Type.name // Can still qualify with type name<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Under the current system, you must explicitly name or derive a type to access static members from instance member implementations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct MyStruct {<br>&gt;&gt;&gt;     static func staticMember() {}<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     func instanceMember() {<br>&gt;&gt;&gt;         // name a type<br>&gt;&gt;&gt;         MyStruct.staticMember() // works<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         // derive a type<br>&gt;&gt;&gt;         self.dynamicType.staticMember() // works<br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         // error: value of tuple type &#39;()&#39; has no member &#39;staticMember&#39;<br>&gt;&gt;&gt;         // does not work<br>&gt;&gt;&gt;         .staticMember()<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Using dot prefixes for static member access:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Has precedent in enumeration members<br>&gt;&gt;&gt; * Would streamline Swift code<br>&gt;&gt;&gt; * Is visually differentiated from `self`-prefixed instance member references<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What are your thoughts, both technical and philosophical, on a change like this? Thanks in advance for your feedback.<br>&gt;&gt; <br>&gt;&gt; Dot-prefixed member expressions are currently looked up as static members of the contextual type, which lets you do things like this:<br>&gt;&gt; <br>&gt;&gt; import AppKit<br>&gt;&gt; let colors: [NSColor] = [.redColor(), .blueColor()]<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think we want to change or overload that rule to also look up static members of the enclosing lexical context type (i.e. the type of &#39;self&#39;).<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/6640431b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
