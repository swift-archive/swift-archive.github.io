<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 26, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Apr 26 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I prefer the index() method name for this purpose, but I wonder if we might want<br>&gt; to consider overloads for forward/backward, since not all indexes are<br>&gt; bidirectional (or at least, not efficiently so), for example:<br>&gt;<br>&gt; index(_ index:Index, advancedBy:Index.Distance) -&gt; Index<br>&gt; index(_ index:Index, reversedBy:Index.Distance) -&gt; Index // Only declared where<br>&gt; Self.Index : BidirectionalIndexType?<br>&gt;<br>&gt; But yeah, everything related to index manipulation should be doable from some<br>&gt; variant of .index() I think.<br></p><p>I agree and have updated the proposal accordingly.<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br></p><p>&gt;<br>&gt;     On 26 Apr 2016, at 08:49, Patrick Smith via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Yes, I too find the naming confusing. I think the method should contain<br>&gt;     &#39;index&#39;, either in the prefix or as a parameter label, so if you searched<br>&gt;     through Collection’s methods you’d be able to find every one that was to do<br>&gt;     with indexes.<br>&gt;<br>&gt;     Sorry to suggest more ideas, but here is a theoretical API with index in the<br>&gt;     prefix: (the noun is ‘index’)<br>&gt;<br>&gt;     func index(_ index: Index, offsetBy n: IndexDistance) -&gt; Index<br>&gt;<br>&gt;     func index(_ index: Index, offsetBy n: IndexDistance, limitedBy limit:<br>&gt;     Index) -&gt; Index<br>&gt;<br>&gt;     func formIndex(_ index: inout Index, offsetBy n: IndexDistance)<br>&gt;<br>&gt;     func formIndex(_ index: inout Index, offsetBy n: IndexDistance, limitedBy<br>&gt;     limit: Index)<br>&gt;<br>&gt;     And here is one within a parameter: (the verb is ‘offset’)<br>&gt;<br>&gt;     func offsetted(index: Index, by n: IndexDistance) -&gt; Index<br>&gt;<br>&gt;     func offsetted(index: Index, by n: IndexDistance, limitedBy limit: Index) -&gt;<br>&gt;     Index<br>&gt;<br>&gt;     func offset(index: inout Index, offsetBy n: IndexDistance)<br>&gt;<br>&gt;     func offset(index: inout Index, offsetBy n: IndexDistance, limitedBy limit:<br>&gt;     Index)<br>&gt;<br>&gt;     Patrick Smith<br>&gt;<br>&gt;     On Apr 26 2016, at 11:52 am, Xiaodi Wu via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote: <br>&gt;<br>&gt;         On Mon, Apr 25, 2016 at 8:25 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;         wrote:<br>&gt;<br>&gt;             on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;             &gt; On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams<br>&gt;             &lt;dabrahams at apple.com&gt; wrote:<br>&gt;             &gt;<br>&gt;             &gt; on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;             &gt;<br>&gt;             &gt; &gt; Quick thought:<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; Why are you reaching for the &quot;form...&quot; rule for the mutating<br>&gt;             methods when<br>&gt;             &gt; there<br>&gt;             &gt; &gt; are clear verb counterparts?<br>&gt;             &gt; &gt; location: locate<br>&gt;             &gt; &gt; successor: succeed<br>&gt;             &gt;<br>&gt;             &gt; We&#39;re not using successor(i) anymore, as noted below, and<br>&gt;             furthermore<br>&gt;             &gt; c.succeed(&amp;i) strongly implies the wrong meaning.<br>&gt;             &gt;<br>&gt;             &gt; I thought that&#39;s what I understood from the email, but in the<br>&gt;             linked proposal<br>&gt;             &gt; they&#39;re still there (as are the many types of Range protocols).<br>&gt;             Wrong link, or<br>&gt;             &gt; just not updated?<br>&gt;<br>&gt;             My mistake; I pushed to the wrong repo. Please try again.<br>&gt;<br>&gt;         I see a new version, but I still see .successor().<br>&gt;<br>&gt;             &gt; I didn&#39;t consider<br>&gt;             &gt; using<br>&gt;             &gt;<br>&gt;             &gt; c. locate(...:&amp;i ... )<br>&gt;             &gt;<br>&gt;             &gt; primarily because I never thought of it and nobody suggested it<br>&gt;             IIRC,<br>&gt;             &gt; but I also don&#39;t see how it would work in a family with<br>&gt;             &gt; c.location(after: i) et al. Suggestions?<br>&gt;             &gt;<br>&gt;             &gt; I didn&#39;t read this proposal carefully on its initial presentation<br>&gt;             for review.<br>&gt;             &gt; Looking at it now, I wonder about the wisdom of &quot;location&quot;--I<br>&gt;             understand the<br>&gt;             &gt; rationale of avoiding multiple methods named &quot;index&quot; that do<br>&gt;             different things,<br>&gt;             &gt; but these particular functions return or mutate indices, and<br>&gt;             nowhere else are<br>&gt;             &gt; these called &quot;locations&quot;. If you&#39;re asking for possible<br>&gt;             alternative suggestions<br>&gt;             &gt; to avoid using &quot;index&quot;, I&#39;ll suggest the following here because I<br>&gt;             don&#39;t recall<br>&gt;             &gt; seeing them offered previously. They read as phrases or sentences:<br>&gt;             &gt;<br>&gt;             &gt; ```<br>&gt;             &gt; // taking inspiration from ForwardIndexType, which is no more...<br>&gt;             &gt; c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)<br>&gt;<br>&gt;             As I&#39;ve said before, the “ing” suffix strongly implies we&#39;re<br>&gt;             returning<br>&gt;             (a version of) `c`, not of `i`. c.f.<br>&gt;<br>&gt;             Please hand me **your coat, emptying the left pocket**.<br>&gt;<br>&gt;             You&#39;re not going to get a pocket; you&#39;re getting a whole coat.<br>&gt;<br>&gt;         Quite right; didn&#39;t mean to retread that. I feel the same deficiency<br>&gt;         applies to using the &quot;form&quot; convention, though, in that (at least as has<br>&gt;         been discussed on this list) the convention usually refers to the<br>&gt;         receiver being mutated. Thus, `c.formLocation(...)` sounds like `c`<br>&gt;         should be mutated in some way.<br>&gt;<br>&gt;         One way out that I can think of is looking to good ol&#39; Objective-C<br>&gt;         conventions. By this I mean that, in my mind, shorter method names like<br>&gt;         `str.appending(...)` are derived by omitting redundant words from longer<br>&gt;         ancestral names such as `str.stringByAppendingString(...)`. In this<br>&gt;         particular case, certain words are not redundant and perhaps we should<br>&gt;         just bravely put back those words that are necessary to clarify.<br>&gt;<br>&gt;         That is, if this were Objective-C, we&#39;d have something like<br>&gt;         &quot;indexByAdvancingIndex&quot;. You&#39;re quite right that we can&#39;t use just<br>&gt;         &quot;advancing&quot; because it implies returning a version of the receiver.<br>&gt;         We&#39;ve tried &quot;index&quot;, but then it conflicts with another method &quot;index&quot;.<br>&gt;         Now there&#39;s renaming &quot;index&quot; to &quot;location&quot;, even though it returns a<br>&gt;         thing of type Index... Aren&#39;t the most succinct but still accurate<br>&gt;         method names instead: `c.indexByAdvancing(i, ...)` and `c.advanceIndex<br>&gt;         (&amp;i, ...)`? [Incidentally, `c.advance` might read like c is being<br>&gt;         advanced.]<br>&gt;<br>&gt;             &gt; c.advance(_ i: inout Index, by offset: IndexDistance, limit:<br>&gt;             Index)<br>&gt;             &gt;<br>&gt;             &gt; // or alternatively, using the terminology in the comments that<br>&gt;             sit above<br>&gt;             &gt; `location`<br>&gt;             &gt; c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)<br>&gt;             &gt; c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)<br>&gt;             &gt;<br>&gt;             &gt; // and then, in place of successor, etc.<br>&gt;             &gt; c.incrementing(_ i: Index, limit: Index)<br>&gt;             &gt; c.increment(_ i: inout Index, limit: Index)<br>&gt;             &gt; c.decrementing(_ i: Index, limit: Index)<br>&gt;             &gt; c.decrement(_ i: inout Index, limit: Index)<br>&gt;             &gt; ```<br>&gt;             &gt; (&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think<br>&gt;             of a coupon:<br>&gt;             &gt; &quot;$1 off one tub of margarine. Limit one per purchase. Void if<br>&gt;             transferred or<br>&gt;             &gt; sold.&quot;)<br>&gt;<br>&gt;             the limit label is the least of my concerns here :-)<br>&gt;<br>&gt;         That said, orthogonally, I feel like many `limitedBy` labels can be<br>&gt;         simplified to `limit` :)<br>&gt;<br>&gt;             &gt; &gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via<br>&gt;             swift-evolution<br>&gt;             &gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; on Wed Apr 20 2016, Chris Lattner<br>&gt;             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt;             &gt; &gt; &gt; &lt;clattner at apple.com&gt; wrote:<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt; &gt; Hello Swift community,<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt; &gt; The review of &quot;A New Model for Collections and Indices&quot; begins<br>&gt;             now and<br>&gt;             &gt; &gt; runs<br>&gt;             &gt; &gt; &gt; through April 18th. The proposal is available here:<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt;<br>&gt;             &gt;<br>&gt;             https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;             &gt;<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt; &gt; Reviews are an important part of the Swift evolution process.<br>&gt;             All<br>&gt;             &gt; reviews<br>&gt;             &gt; &gt; &gt; should be sent to the swift-evolution mailing list at:<br>&gt;             &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;             &gt; &gt; &gt; or, if you would like to keep your feedback private, directly<br>&gt;             to the<br>&gt;             &gt; &gt; review<br>&gt;             &gt; &gt; &gt; manager.<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt; &gt; A quick update: the core team met to discuss this. They agreed<br>&gt;             to accept<br>&gt;             &gt; &gt; it with<br>&gt;             &gt; &gt; &gt; some naming-related revisions to the proposal (in response to<br>&gt;             community<br>&gt;             &gt; &gt; &gt; feedback). Dave is organizing this feedback, and I’ll send out<br>&gt;             the<br>&gt;             &gt; formal<br>&gt;             &gt; &gt; &gt; announcement when that is ready.<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; The final revisions are reflected in the latest version of the<br>&gt;             &gt; &gt; proposal:<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt;<br>&gt;             &gt;<br>&gt;             https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;             &gt;<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; Summary:<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt;             &gt; &gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt;<br>&gt;             to<br>&gt;             &gt; &gt; use “location” uniformly for index movement, so instead of<br>&gt;             &gt; &gt; successor(i) and predecessor(i) we have location(after: i) and<br>&gt;             &gt; &gt; location(before: i).<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; * Since Brent Royal-Gordon pointed out<br>&gt;             &gt; &gt;<br>&gt;             &gt;<br>&gt;             &lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com<br>&gt;<br>&gt;             &gt;<br>&gt;             &gt; &gt; &gt;<br>&gt;             &gt; &gt; that two of the three proposed Range protocols would likely<br>&gt;             disappear<br>&gt;             &gt; &gt; in future updates, we took another look at all of them. Finding<br>&gt;             &gt; &gt; `RangeProtocol` itself to be a very weak abstraction, we removed<br>&gt;             all<br>&gt;             &gt; &gt; three from the proposal.<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; For those interested in details, implementation work proceeds<br>&gt;             apace on<br>&gt;             &gt; &gt; the swift-3-indexing-model branch at<br>&gt;             &gt; &gt;<br>&gt;             &gt;<br>&gt;             &lt;https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core<br>&gt;<br>&gt;             &gt;<br>&gt;             &gt; &gt; &gt;.<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; P.S. If anyone is interested in contributing, there are still<br>&gt;             plenty of<br>&gt;             &gt; &gt; FIXMEs left for us to handle ;-)<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; --<br>&gt;             &gt; &gt; Dave<br>&gt;             &gt; &gt;<br>&gt;             &gt; &gt; _______________________________________________<br>&gt;             &gt; &gt; swift-evolution mailing list<br>&gt;             &gt; &gt; swift-evolution at swift.org<br>&gt;             &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;             &gt; &gt;<br>&gt;             &gt;<br>&gt;             &gt; --<br>&gt;             &gt; Dave<br>&gt;             &gt;<br>&gt;<br>&gt;             --<br>&gt;             Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>Thanks!<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 27, 2016 at 05:00:00am</p></header><div class="content"><p>+1 — Proposal looks fantastic. It’s very clear and intuitive. Thanks for<br>listening to our feedback!  <br>  <br>**Patrick Smith**  <br></p><p>On Apr 27 2016, at 7:50 am, Dave Abrahams via swift-evolution &amp;lt;swift-<br>evolution at swift.org&amp;gt; wrote:  <br></p><p>&gt; on Tue Apr 26 2016, Haravikk &amp;lt;swift-evolution at swift.org&amp;gt; wrote:<br></p><p>&gt;<br></p><p>&gt; &amp;gt; I prefer the index() method name for this purpose, but I wonder if we<br>might want  <br>&amp;gt; to consider overloads for forward/backward, since not all indexes are  <br>&amp;gt; bidirectional (or at least, not efficiently so), for example:  <br>&amp;gt;  <br>&amp;gt; index(_ index:Index, advancedBy:Index.Distance) -&amp;gt; Index  <br>&amp;gt; index(_ index:Index, reversedBy:Index.Distance) -&amp;gt; Index // Only<br>declared where  <br>&amp;gt; Self.Index : BidirectionalIndexType?  <br>&amp;gt;  <br>&amp;gt; But yeah, everything related to index manipulation should be doable from<br>some  <br>&amp;gt; variant of .index() I think.<br></p><p>&gt;<br></p><p>&gt; I agree and have updated the proposal accordingly.<br></p><p>&gt;<br></p><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md<br></p><p>&gt;<br></p><p>&gt; &amp;gt;  <br>&amp;gt; On 26 Apr 2016, at 08:49, Patrick Smith via swift-evolution  <br>&amp;gt; &amp;lt;swift-evolution at swift.org&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt; Yes, I too find the naming confusing. I think the method should contain  <br>&amp;gt; &#39;index&#39;, either in the prefix or as a parameter label, so if you searched  <br>&amp;gt; through Collection’s methods you’d be able to find every one that was to<br>do  <br>&amp;gt; with indexes.  <br>&amp;gt;  <br>&amp;gt; Sorry to suggest more ideas, but here is a theoretical API with index in<br>the  <br>&amp;gt; prefix: (the noun is ‘index’)  <br>&amp;gt;  <br>&amp;gt; func index(_ index: Index, offsetBy n: IndexDistance) -&amp;gt; Index  <br>&amp;gt;  <br>&amp;gt; func index(_ index: Index, offsetBy n: IndexDistance, limitedBy limit:  <br>&amp;gt; Index) -&amp;gt; Index  <br>&amp;gt;  <br>&amp;gt; func formIndex(_ index: inout Index, offsetBy n: IndexDistance)  <br>&amp;gt;  <br>&amp;gt; func formIndex(_ index: inout Index, offsetBy n: IndexDistance, limitedBy  <br>&amp;gt; limit: Index)  <br>&amp;gt;  <br>&amp;gt; And here is one within a parameter: (the verb is ‘offset’)  <br>&amp;gt;  <br>&amp;gt; func offsetted(index: Index, by n: IndexDistance) -&amp;gt; Index  <br>&amp;gt;  <br>&amp;gt; func offsetted(index: Index, by n: IndexDistance, limitedBy limit: Index)<br>-&amp;gt;  <br>&amp;gt; Index  <br>&amp;gt;  <br>&amp;gt; func offset(index: inout Index, offsetBy n: IndexDistance)  <br>&amp;gt;  <br>&amp;gt; func offset(index: inout Index, offsetBy n: IndexDistance, limitedBy<br>limit:  <br>&amp;gt; Index)  <br>&amp;gt;  <br>&amp;gt; Patrick Smith  <br>&amp;gt;  <br>&amp;gt; On Apr 26 2016, at 11:52 am, Xiaodi Wu via swift-evolution  <br>&amp;gt; &amp;lt;swift-evolution at swift.org&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt; On Mon, Apr 25, 2016 at 8:25 PM, Dave Abrahams<br>&amp;lt;dabrahams at apple.com&amp;gt;  <br>&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt; on Mon Apr 25 2016, Xiaodi Wu &amp;lt;xiaodi.wu-AT-gmail.com&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt; &amp;gt; On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams  <br>&amp;gt; &amp;lt;dabrahams at apple.com&amp;gt; wrote:  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; on Mon Apr 25 2016, Xiaodi Wu &amp;lt;xiaodi.wu-AT-gmail.com&amp;gt; wrote:  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; Quick thought:  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; Why are you reaching for the &quot;form...&quot; rule for the mutating  <br>&amp;gt; methods when  <br>&amp;gt; &amp;gt; there  <br>&amp;gt; &amp;gt; &amp;gt; are clear verb counterparts?  <br>&amp;gt; &amp;gt; &amp;gt; location: locate  <br>&amp;gt; &amp;gt; &amp;gt; successor: succeed  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; We&#39;re not using successor(i) anymore, as noted below, and  <br>&amp;gt; furthermore  <br>&amp;gt; &amp;gt; c.succeed(&amp;amp;i) strongly implies the wrong meaning.  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; I thought that&#39;s what I understood from the email, but in the  <br>&amp;gt; linked proposal  <br>&amp;gt; &amp;gt; they&#39;re still there (as are the many types of Range protocols).  <br>&amp;gt; Wrong link, or  <br>&amp;gt; &amp;gt; just not updated?  <br>&amp;gt;  <br>&amp;gt; My mistake; I pushed to the wrong repo. Please try again.  <br>&amp;gt;  <br>&amp;gt; I see a new version, but I still see .successor().  <br>&amp;gt;  <br>&amp;gt; &amp;gt; I didn&#39;t consider  <br>&amp;gt; &amp;gt; using  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; c. locate(...:&amp;amp;i ... )  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; primarily because I never thought of it and nobody suggested it  <br>&amp;gt; IIRC,  <br>&amp;gt; &amp;gt; but I also don&#39;t see how it would work in a family with  <br>&amp;gt; &amp;gt; c.location(after: i) et al. Suggestions?  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; I didn&#39;t read this proposal carefully on its initial presentation  <br>&amp;gt; for review.  <br>&amp;gt; &amp;gt; Looking at it now, I wonder about the wisdom of &quot;location&quot;--I  <br>&amp;gt; understand the  <br>&amp;gt; &amp;gt; rationale of avoiding multiple methods named &quot;index&quot; that do  <br>&amp;gt; different things,  <br>&amp;gt; &amp;gt; but these particular functions return or mutate indices, and  <br>&amp;gt; nowhere else are  <br>&amp;gt; &amp;gt; these called &quot;locations&quot;. If you&#39;re asking for possible  <br>&amp;gt; alternative suggestions  <br>&amp;gt; &amp;gt; to avoid using &quot;index&quot;, I&#39;ll suggest the following here because I  <br>&amp;gt; don&#39;t recall  <br>&amp;gt; &amp;gt; seeing them offered previously. They read as phrases or sentences:  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; ```  <br>&amp;gt; &amp;gt; // taking inspiration from ForwardIndexType, which is no more...  <br>&amp;gt; &amp;gt; c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)  <br>&amp;gt;  <br>&amp;gt; As I&#39;ve said before, the “ing” suffix strongly implies we&#39;re  <br>&amp;gt; returning  <br>&amp;gt; (a version of) `c`, not of `i`. c.f.  <br>&amp;gt;  <br>&amp;gt; Please hand me **your coat, emptying the left pocket**.  <br>&amp;gt;  <br>&amp;gt; You&#39;re not going to get a pocket; you&#39;re getting a whole coat.  <br>&amp;gt;  <br>&amp;gt; Quite right; didn&#39;t mean to retread that. I feel the same deficiency  <br>&amp;gt; applies to using the &quot;form&quot; convention, though, in that (at least as has  <br>&amp;gt; been discussed on this list) the convention usually refers to the  <br>&amp;gt; receiver being mutated. Thus, `c.formLocation(...)` sounds like `c`  <br>&amp;gt; should be mutated in some way.  <br>&amp;gt;  <br>&amp;gt; One way out that I can think of is looking to good ol&#39; Objective-C  <br>&amp;gt; conventions. By this I mean that, in my mind, shorter method names like  <br>&amp;gt; `str.appending(...)` are derived by omitting redundant words from longer  <br>&amp;gt; ancestral names such as `str.stringByAppendingString(...)`. In this  <br>&amp;gt; particular case, certain words are not redundant and perhaps we should  <br>&amp;gt; just bravely put back those words that are necessary to clarify.  <br>&amp;gt;  <br>&amp;gt; That is, if this were Objective-C, we&#39;d have something like  <br>&amp;gt; &quot;indexByAdvancingIndex&quot;. You&#39;re quite right that we can&#39;t use just  <br>&amp;gt; &quot;advancing&quot; because it implies returning a version of the receiver.  <br>&amp;gt; We&#39;ve tried &quot;index&quot;, but then it conflicts with another method &quot;index&quot;.  <br>&amp;gt; Now there&#39;s renaming &quot;index&quot; to &quot;location&quot;, even though it returns a  <br>&amp;gt; thing of type Index... Aren&#39;t the most succinct but still accurate  <br>&amp;gt; method names instead: `c.indexByAdvancing(i, ...)` and `c.advanceIndex  <br>&amp;gt; (&amp;amp;i, ...)`? [Incidentally, `c.advance` might read like c is being  <br>&amp;gt; advanced.]  <br>&amp;gt;  <br>&amp;gt; &amp;gt; c.advance(_ i: inout Index, by offset: IndexDistance, limit:  <br>&amp;gt; Index)  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; // or alternatively, using the terminology in the comments that  <br>&amp;gt; sit above  <br>&amp;gt; &amp;gt; `location`  <br>&amp;gt; &amp;gt; c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)  <br>&amp;gt; &amp;gt; c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; // and then, in place of successor, etc.  <br>&amp;gt; &amp;gt; c.incrementing(_ i: Index, limit: Index)  <br>&amp;gt; &amp;gt; c.increment(_ i: inout Index, limit: Index)  <br>&amp;gt; &amp;gt; c.decrementing(_ i: Index, limit: Index)  <br>&amp;gt; &amp;gt; c.decrement(_ i: inout Index, limit: Index)  <br>&amp;gt; &amp;gt; ```  <br>&amp;gt; &amp;gt; (&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think  <br>&amp;gt; of a coupon:  <br>&amp;gt; &amp;gt; &quot;$1 off one tub of margarine. Limit one per purchase. Void if  <br>&amp;gt; transferred or  <br>&amp;gt; &amp;gt; sold.&quot;)  <br>&amp;gt;  <br>&amp;gt; the limit label is the least of my concerns here :-)  <br>&amp;gt;  <br>&amp;gt; That said, orthogonally, I feel like many `limitedBy` labels can be  <br>&amp;gt; simplified to `limit` :)  <br>&amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via  <br>&amp;gt; swift-evolution  <br>&amp;gt; &amp;gt; &amp;gt; &amp;lt;swift-evolution at swift.org&amp;gt; wrote:  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; on Wed Apr 20 2016, Chris Lattner  <br>&amp;gt; &amp;lt;swift-evolution at swift.org&amp;gt; wrote:  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;lt;clattner at apple.com&amp;gt; wrote:  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; Hello Swift community,  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; The review of &quot;A New Model for Collections and Indices&quot;<br>begins  <br>&amp;gt; now and  <br>&amp;gt; &amp;gt; &amp;gt; runs  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; through April 18th. The proposal is available here:  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md  <br>&amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; Reviews are an important part of the Swift evolution<br>process.  <br>&amp;gt; All  <br>&amp;gt; &amp;gt; reviews  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; should be sent to the swift-evolution mailing list at:  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; or, if you would like to keep your feedback private,<br>directly  <br>&amp;gt; to the  <br>&amp;gt; &amp;gt; &amp;gt; review  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; manager.  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; A quick update: the core team met to discuss this. They<br>agreed  <br>&amp;gt; to accept  <br>&amp;gt; &amp;gt; &amp;gt; it with  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; some naming-related revisions to the proposal (in response<br>to  <br>&amp;gt; community  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; feedback). Dave is organizing this feedback, and I’ll send<br>out  <br>&amp;gt; the  <br>&amp;gt; &amp;gt; formal  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt; announcement when that is ready.  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; The final revisions are reflected in the latest version of the  <br>&amp;gt; &amp;gt; &amp;gt; proposal:  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md  <br>&amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; Summary:  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; * We decided to take Shawn Erickson&#39;s excellent suggestion  <br>&amp;gt; &amp;gt; &amp;gt;<br>&amp;lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&amp;gt;  <br>&amp;gt; to  <br>&amp;gt; &amp;gt; &amp;gt; use “location” uniformly for index movement, so instead of  <br>&amp;gt; &amp;gt; &amp;gt; successor(i) and predecessor(i) we have location(after: i) and  <br>&amp;gt; &amp;gt; &amp;gt; location(before: i).  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; * Since Brent Royal-Gordon pointed out  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E<br>%2d8C70%2d6E7400629BC0%40architechies.com  <br>&amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; that two of the three proposed Range protocols would likely  <br>&amp;gt; disappear  <br>&amp;gt; &amp;gt; &amp;gt; in future updates, we took another look at all of them. Finding  <br>&amp;gt; &amp;gt; &amp;gt; `RangeProtocol` itself to be a very weak abstraction, we<br>removed  <br>&amp;gt; all  <br>&amp;gt; &amp;gt; &amp;gt; three from the proposal.  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; For those interested in details, implementation work proceeds  <br>&amp;gt; apace on  <br>&amp;gt; &amp;gt; &amp;gt; the swift-3-indexing-model branch at  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;lt;https://github.com/apple/swift/tree/swift-3-indexing-<br>model/stdlib/public/core  <br>&amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; &amp;gt;.  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; P.S. If anyone is interested in contributing, there are still  <br>&amp;gt; plenty of  <br>&amp;gt; &amp;gt; &amp;gt; FIXMEs left for us to handle ;-)  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; \--  <br>&amp;gt; &amp;gt; &amp;gt; Dave  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; &amp;gt; _______________________________________________  <br>&amp;gt; &amp;gt; &amp;gt; swift-evolution mailing list  <br>&amp;gt; &amp;gt; &amp;gt; swift-evolution at swift.org  <br>&amp;gt; &amp;gt; &amp;gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&amp;gt; &amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt;  <br>&amp;gt; &amp;gt; \--  <br>&amp;gt; &amp;gt; Dave  <br>&amp;gt; &amp;gt;  <br>&amp;gt;  <br>&amp;gt; \--  <br>&amp;gt; Dave  <br>&amp;gt;  <br>&amp;gt; _______________________________________________  <br>&amp;gt; swift-evolution mailing list  <br>&amp;gt; swift-evolution at swift.org  <br>&amp;gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br>&amp;gt;  <br>&amp;gt;  <br>&amp;gt; _______________________________________________  <br>&amp;gt; swift-evolution mailing list  <br>&amp;gt; swift-evolution at swift.org  <br>&amp;gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>&gt;<br></p><p>&gt; Thanks!<br></p><p>&gt;<br></p><p>&gt; \--  <br>Dave<br></p><p>&gt;<br></p><p>&gt; _______________________________________________  <br>swift-evolution mailing list  <br>swift-evolution at swift.org  <br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/9d14b601/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
