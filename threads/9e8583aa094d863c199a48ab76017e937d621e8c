<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  3, 2016 at 11:00:00pm</p></header><div class="content"><p>Is the proposal to add these initializers to protocols like IntegerType, or just to individually add them to each of the numeric types? It’s unclear from the proposal, but in case that question hasn’t been decided yet, I’d like to vote for putting them in the protocols. It’s bugged me for a while that IntegerType doesn’t contain any of the existing initializers, even though every single type that conforms to it contains them, and even though FloatingPointType also contains them. Having support for these initializers in the protocol lets you do things like initialize generalized integer types in generic functions, which can be handy sometimes.<br></p><p>Charles<br></p><p>&gt; On May 3, 2016, at 10:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  3, 2016 at 09:00:00pm</p></header><div class="content"><p>On May 3, 2016, at 9:19 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt; wrote:<br>&gt; Is the proposal to add these initializers to protocols like IntegerType, or just to individually add them to each of the numeric types? It’s unclear from the proposal, but in case that question hasn’t been decided yet, I’d like to vote for putting them in the protocols. It’s bugged me for a while that IntegerType doesn’t contain any of the existing initializers, even though every single type that conforms to it contains them, and even though FloatingPointType also contains them. Having support for these initializers in the protocol lets you do things like initialize generalized integer types in generic functions, which can be handy sometimes.<br></p><p>The tentative plan is for the integer protocols to get revised in Swift 3 to be more similar to the recently approved floating point protocols.  If SE-0080 gets accepted, it stands to reason that that revision should take these initializers into account.  Just MHO, but I don’t think there is any point in worrying about the currently known suboptimal integer protocol we have from Swift 2.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Charles<br>&gt; <br>&gt;&gt; On May 3, 2016, at 10:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 3, 2016, at 11:19 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Is the proposal to add these initializers to protocols like IntegerType, or just to individually add them to each of the numeric types? It’s unclear from the proposal, but in case that question hasn’t been decided yet, I’d like to vote for putting them in the protocols. It’s bugged me for a while that IntegerType doesn’t contain any of the existing initializers, even though every single type that conforms to it contains them, and even though FloatingPointType also contains them. Having support for these initializers in the protocol lets you do things like initialize generalized integer types in generic functions, which can be handy sometimes.<br></p><p>This proposal was written quite a while ago.  It does not discuss the numeric protocols partly because I knew they were going to be revised and partly because I wanted to keep the proposal as lean as possible.  <br></p><p>I agree that having support for these initializers included in the standard numeric protocols would be great.  The best path, since review has started, is probably to accept this proposal as-is.  Adding the implementations to the types themselves is necessary if the types are going to conform to a protocol that includes these initializers.  The upcoming Integer protocol proposal could incorporate them if desired, along with a tweak to include them in the new FloatingPoint protocol as well.  On the other hand, I would be happy to update the proposal, but could only reference the new FloatingPoint protocol, not the upcoming Integer protocol.<br></p><p><br>&gt; <br>&gt; Charles<br>&gt; <br>&gt;&gt; On May 3, 2016, at 10:57 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>May  4, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br></p><p>Hello,<br></p><p>I&#39;m all for it, but I&#39;d like a clarification about... the Integer / Floating point interface.<br></p><p>I once had to write a function that compares Int64 to Double for strict equality, with all the sweats that come whenever you deal with floating point representations and have to introduce two-complements representation of integers as a mandatory precondition:<br></p><p>	/// Returns true if i and d hold exactly the same value, and if converting one<br>	/// type into the other does not lose any information.<br>	private func int64EqualDouble1(_ i: Int64, _ d: Double) -&gt; Bool {<br>	    return (d &gt;= Double(Int64.min))<br>	        &amp;&amp; (d &lt; Double(Int64.max))<br>	        &amp;&amp; (round(d) == d)<br>	        &amp;&amp; (i == Int64(d))<br>	}<br></p><p>As I understand well the proposal, I could write instead:<br></p><p>	private func int64EqualDouble2(_ i: Int64, _ d: Double) -&gt; Bool {<br>	    guard let j = Int64(exact: d) else { return false }<br>	    return i == j<br>	}<br></p><p>But I may be wrong!<br></p><p>The &quot;without loss of information&quot; in the proposal means that -0.0 (minus zero) would *not* be convertible to Int64 (which would lose the sign). And we&#39;d get:<br></p><p>	int64EqualDouble1(0, -0.0) // true<br>	int64EqualDouble2(0, -0.0) // false<br></p><p>No problem with that. To know if int64EqualDouble1 has a bug, or if int64EqualDouble2 should handle -0.0 explicitly, one needs to know how -0.0 should be handled.<br></p><p>So I think that the proposal should make it very clear how it wants to handle all the funny Float and Double values. Without such a clarification, as handy as they look like, those functions would remain surprising, which means very hard to use well, and we&#39;ll keep on sweating.<br></p><p>Gwendal Roué<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 3, 2016, at 11:26 PM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I&#39;m all for it, but I&#39;d like a clarification about... the Integer / Floating point interface.<br>&gt; <br>&gt; I once had to write a function that compares Int64 to Double for strict equality, with all the sweats that come whenever you deal with floating point representations and have to introduce two-complements representation of integers as a mandatory precondition:<br>&gt; <br>&gt; 	/// Returns true if i and d hold exactly the same value, and if converting one<br>&gt; 	/// type into the other does not lose any information.<br>&gt; 	private func int64EqualDouble1(_ i: Int64, _ d: Double) -&gt; Bool {<br>&gt; 	    return (d &gt;= Double(Int64.min))<br>&gt; 	        &amp;&amp; (d &lt; Double(Int64.max))<br>&gt; 	        &amp;&amp; (round(d) == d)<br>&gt; 	        &amp;&amp; (i == Int64(d))<br>&gt; 	}<br>&gt; <br>&gt; As I understand well the proposal, I could write instead:<br>&gt; <br>&gt; 	private func int64EqualDouble2(_ i: Int64, _ d: Double) -&gt; Bool {<br>&gt; 	    guard let j = Int64(exact: d) else { return false }<br>&gt; 	    return i == j<br>&gt; 	}<br>&gt; <br>&gt; But I may be wrong!<br>&gt; <br>&gt; The &quot;without loss of information&quot; in the proposal means that -0.0 (minus zero) would *not* be convertible to Int64 (which would lose the sign). And we&#39;d get:<br>&gt; <br>&gt; 	int64EqualDouble1(0, -0.0) // true<br>&gt; 	int64EqualDouble2(0, -0.0) // false<br>&gt; <br>&gt; No problem with that. To know if int64EqualDouble1 has a bug, or if int64EqualDouble2 should handle -0.0 explicitly, one needs to know how -0.0 should be handled.<br></p><p>This is a good example to consider.  I am not a numerics expert and hadn’t thought to consider -0.0.  Intuitively I would expect that to convert to 0 when converted to an integer type, however your are right that this is technically a loss of information about the sign bit.  <br></p><p>I am happy to defer to those with more numerics expertise than I have about what an implementation should do in this case.  I am also happy to defer to numerics experts about how to precisely define “loss of information” in general.  <br></p><p>As noted in the proposal, the primary use case I am concerned with is reading data from semi-structured sources such as JSON where there is only a single “number” type.  In these cases the value will be received as a Double but our model may specify an Int, Uint, Int8, etc.  Any implementation that allows for validating the conformance of a value to expectations of our model and extracting the valid value with the correct type will be sufficient for the use cases I can imagine.<br></p><p>&gt; <br>&gt; So I think that the proposal should make it very clear how it wants to handle all the funny Float and Double values. Without such a clarification, as handy as they look like, those functions would remain surprising, which means very hard to use well, and we&#39;ll keep on sweating.<br></p><p>Are there any values other than -0.0 we need to worry about?  Clearly NaN, Infinity, and -Infinity cannot be represented by integer types and integer initializers would return nil when called with these floating point values.<br></p><p><br></p><p>&gt; <br>&gt; Gwendal Roué<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>May  4, 2016 at 10:00:00am</p></header><div class="content"><p>First, a general +1 to these, thanks for proposing them.<br></p><p>In SE-0067 we spelled these “exactly” rather than “exact”.<br>init?&lt;Source: Integer&gt;(exactly value: Source)<br></p><p>As for –0, Int(exactly: -0.0) should *not* fail.  My rationale for this is as follows:<br></p><p>- While information (the signbit) is lost, the essential property is that `Double(Int(exactly: -0.0)) == -0.0`.<br>- If we instead adopted “no information loss” as a criteria, we would back ourselves into a corner w.r.t decimal floating-point types, which have multiple representations of most values (1.0 can be encoded as 1e0 or 10e-1 or 100e-2 …).  The result would be that these initializers would always fail for decimal fp inputs.<br></p><p>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/c796c485/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>May  4, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Swift numeric types all currently have a family of conversion initializers. In many use cases they leave a lot to be desired. Initializing an integer type with a floating point value will truncate any fractional portion of the number. Initializing with an out-of-range value traps.<br></p><p><br>Have you considered whether it makes sense to keep these around? Maybe the failable ones should be the default, and give the other ones a more descriptive 1st argument label.<br></p><p>-Colin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  4, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On May 4, 2016, at 6:56 PM, Colin Barrett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Swift numeric types all currently have a family of conversion initializers. In many use cases they leave a lot to be desired. Initializing an integer type with a floating point value will truncate any fractional portion of the number. Initializing with an out-of-range value traps.<br>&gt; <br>&gt; <br>&gt; Have you considered whether it makes sense to keep these around? Maybe the failable ones should be the default, and give the other ones a more descriptive 1st argument label.<br></p><p>That’s a good question.  It might be a good idea, but I wanted to keep this proposal small and non-breaking to maximize chances of acceptance.  I would support that change to the proposal if the core team was interested in going that direction.<br></p><p>&gt; <br>&gt; -Colin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>May  4, 2016 at 11:00:00pm</p></header><div class="content"><p>Thanks Matthew. Personally I would really like to see an analysis of the tradeoffs therein covered in the proposal in some way.<br></p><p>-Colin (via thumbs)<br></p><p>&gt; On May 4, 2016, at 8:23 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 4, 2016, at 6:56 PM, Colin Barrett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift numeric types all currently have a family of conversion initializers. In many use cases they leave a lot to be desired. Initializing an integer type with a floating point value will truncate any fractional portion of the number. Initializing with an out-of-range value traps.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Have you considered whether it makes sense to keep these around? Maybe the failable ones should be the default, and give the other ones a more descriptive 1st argument label.<br>&gt; <br>&gt; That’s a good question.  It might be a good idea, but I wanted to keep this proposal small and non-breaking to maximize chances of acceptance.  I would support that change to the proposal if the core team was interested in going that direction.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Colin<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>May  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>This email is the result of a discussion between members of the standard library team.<br></p><p>We suggest changing the initializers argument label to `exactly` to match the one used in the floating point protocols proposal &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&gt;. Other than that the proposal seems to be a valuable addition to the standard library.<br></p><p>max<br></p><p>&gt; On May 3, 2016, at 8:57 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/26262897/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On May 5, 2016, at 5:19 PM, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; This email is the result of a discussion between members of the standard library team.<br>&gt; <br>&gt; We suggest changing the initializers argument label to `exactly` to match the one used in the floating point protocols proposal. Other than that the proposal seems to be a valuable addition to the standard library.<br></p><p>Thanks Max.  I&#39;m glad to hear that!  Should I update the proposal or will you just make that change as part of &quot;accepted with modification&quot;?<br></p><p>&gt; <br>&gt; max<br>&gt; <br>&gt;&gt; On May 3, 2016, at 8:57 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/a2395eba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>May  5, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Matthew,<br></p><p>In general, if you think there is something to be updated in the proposal, it is worth creating a new revision (like in the floating point protocols proposal, for example) and mentioning it in the thread.<br></p><p>I think it is a way to go in this particular case, since we are still in the first half of the review period. Any further discussion would benefit from it.<br></p><p>max<br></p><p><br>&gt; On May 5, 2016, at 4:02 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On May 5, 2016, at 5:19 PM, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; This email is the result of a discussion between members of the standard library team.<br>&gt;&gt; <br>&gt;&gt; We suggest changing the initializers argument label to `exactly` to match the one used in the floating point protocols proposal &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&gt;. Other than that the proposal seems to be a valuable addition to the standard library.<br>&gt; <br>&gt; Thanks Max.  I&#39;m glad to hear that!  Should I update the proposal or will you just make that change as part of &quot;accepted with modification&quot;?<br>&gt; <br>&gt;&gt; <br>&gt;&gt; max<br>&gt;&gt; <br>&gt;&gt;&gt; On May 3, 2016, at 8:57 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/37b533d8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  5, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 5, 2016, at 6:22 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Matthew,<br>&gt; <br>&gt; In general, if you think there is something to be updated in the proposal, it is worth creating a new revision (like in the floating point protocols proposal, for example) and mentioning it in the thread.<br>&gt; <br>&gt; I think it is a way to go in this particular case, since we are still in the first half of the review period. Any further discussion would benefit from it.<br></p><p>t made the change and submitted a PR.<br></p><p>&gt; <br>&gt; max<br>&gt; <br>&gt; <br>&gt;&gt; On May 5, 2016, at 4:02 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On May 5, 2016, at 5:19 PM, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This email is the result of a discussion between members of the standard library team.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We suggest changing the initializers argument label to `exactly` to match the one used in the floating point protocols proposal &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&gt;. Other than that the proposal seems to be a valuable addition to the standard library.<br>&gt;&gt; <br>&gt;&gt; Thanks Max.  I&#39;m glad to hear that!  Should I update the proposal or will you just make that change as part of &quot;accepted with modification&quot;?<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; max<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 3, 2016, at 8:57 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0080: Failable Numeric Conversion Initializers&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/355d6695/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
