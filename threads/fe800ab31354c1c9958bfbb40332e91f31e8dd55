<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 28, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi Ted ! <br></p><p>Thanks guys for all for the hard work! <br>What you wrote makes sense, is a relief, and gives me faith in Swift’s future!<br></p><p>&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br></p><p>This sounds like a reasonable solution...<br>If I understand you correctly;<br>   The compiler(s)  would be able to compile sources from 3.0 and future versions?<br></p><p>well, that solves most source breaking issues, <br></p><p>It then has however the disadvantage that one cannot<br>combine older  language elements from <br>e.g. version 3.0  and 4.0 or higher together in a single source file? <br>However, if so, I can live with that.<br></p><p>Does this method have further compatibility issues that at the moment don’t cross my mind?<br></p><p>Unfortunately that doesn’t go back to 2.2, unfortunately<br>because in 3.0 the classical for ; ; loop will be deactivated.<br></p><p>I regard this as a serious mistake and <br>have no doubt this removal is disturbing many <br>experienced and more pragmatical programmers.<br></p><p>It made my alarm bells ringing and it was the main <br>reason I have climbed in to Swift-Evolution<br>to discuss this.<br></p><p>      -= Maybe it’s not too late =- <br>For the moment the classical for ;;  could simply <br>remain activated  (Yes)  in 3.0. because:  <br>  <br>  - It doesn’t conflict at all with all other language elements,<br></p><p>  - most important: there are still no good alternative for iterations like these  <br>       for var x:Float = -60;    x &lt; 60;    x += w * 1.2<br>       {<br>           for var y: Float = 130;    y &gt; 60;    y -= backtrack<br>          // etc.<br>          // especially for iterations using Floating point numbers!<br></p><p>         for these, one has to fall back on tedious do-while constructs.<br></p><p>  - There are more sane reasons, but a few months ago<br>     I have written extensively about this subject.<br></p><p>So, yes, obviously my recommendation is <br></p><p>Please don’t remove the for ;; from 3.0<br> <br>and replace the current compile cry:<br>    “C-style for statement is deprecated and will be removed in a future version of Swift”<br></p><p>which I currently perceive like this:<br></p><p>   “ The for ;; statement, although being used successfully in many other languages<br>      is in conflict with the attitude and believe of some of us with a lot of theoretical experience.<br>     Therefore it will be removed in a future version of Swift. <br>     Please resort to using the do-while statement instead.”<br></p><p>the new compiler warning could be then:<br>  “Warning! This for ;; statement should only be used by highly  skilled <br>   programmers with a more pragmatical attitude.<br>   Use at your own risk, like with any other Swift statement.” <br></p><p>Just leave it in.  (but I guess it could be to late) <br></p><p>If it is really removed in 3.0, then I promise I will write<br>an official  proposal to bring it back in 3.x and further.<br>some help with that is appreciated.<br></p><p><br>Kind Regards<br></p><p>Yet another Ted :o) <br></p><p>www.tedvg.com <br></p><p><br></p><p><br></p><p>&gt; Date: Wed, 27 Jul 2016 12:38:51 -0700<br>&gt; From: Ted Kremenek &lt;kremenek at apple.com &lt;mailto:kremenek at apple.com&gt;&gt;<br>&gt; To: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;, swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;,<br>&gt; 	swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt;<br>&gt; Subject: [swift-evolution] End of source-breaking changes for Swift 3<br>&gt; <br>&gt; Dear friends,<br>&gt; <br>&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. <br>&gt; <br> &lt;snip&gt;<br>&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt; <br>&gt; Ted<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/fe80dd55/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 28, 2016, at 10:19 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;       -= Maybe it’s not too late =- <br>&gt; For the moment the classical for ;;  could simply <br>&gt; remain activated  (Yes)  in 3.0. because:  <br></p><p>I don&#39;t understand why you keep on complaining about this.<br></p><p>For the record, I too think getting rid of the C-style for loop was a mistake, and there are a number of other proposals whose outcomes are not ones I would have personally preferred.<br></p><p>However,<br></p><p>1. There is a well-defined process through which all changes to the Swift language must go, laid out in the swift-evolution repository&#39;s documentation from the first day Swift became an open-source project.<br>2. That process includes feedback and review from both the community and the Swift core engineers, and often multiple rounds of discussion.<br>3. The process doesn&#39;t work if we disregard its outcomes simply because we don&#39;t like them, or if we allow interminable chains of back-and-forth proposals because people on one side of issue X simply cannot accept a particular decision.<br></p><p>The technical aspects of the C-style for loop and its proposed replacements have already been discussed ad nauseam on this list and in other places, so I won&#39;t touch on them.<br></p><p>Best regards,<br>Austin  <br></p><p>&gt;   <br>&gt;   - It doesn’t conflict at all with all other language elements,<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/4790f315/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 28, 2016 at 08:00:00pm</p></header><div class="content"><p>+1. There have been lots of accepted proposals which I argued against, but community-driven evolution means we have to compromise.<br>  <br></p><p>  <br>In Plato&#39;s Crito, Socrates refuses to flee Athens after being sentenced to death. He entered in to an agreement with the state to participate in the process and respect its judgements, and reasons that to violate the rules of the system because he believes the outcome unjust would be a greater injustice.<br>  <br></p><p>  <br>Just mentioning it; it&#39;s always been a fascinating story to me.<br>  <br></p><p>  <br>Karl<br>  <br></p><p>  <br> Sent from my new   Email (https://itunes.apple.com/app/apple-store/id922793622?pt=814382&amp;mt=8&amp;ct=my_new_email)<br>  <br>  <br>  <br>  <br></p><p>  <br>  <br>&gt;   <br>&gt; On Jul 28, 2016 at 7:33 PM,  &lt;Austin Zheng via swift-evolution (mailto:swift-evolution at swift.org)&gt;  wrote:<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;   <br>&gt; &gt;   <br>&gt; &gt; On Jul 28, 2016, at 10:19 AM, Ted F.A. van Gaalen via swift-evolution  &lt;swift-evolution at swift.org (mailto:swift-evolution at swift.org)&gt;  wrote:<br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;<br>&gt; &gt;   <br>&gt; &gt;            -= Maybe it’s not too late =-   <br>&gt; &gt;   <br>&gt; &gt; For the moment the classical for ;;    could simply   <br>&gt; &gt;   <br>&gt; &gt; remain activated    (Yes)    in 3.0. because:    <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt;   <br>&gt;<br>&gt;   <br>&gt; I don&#39;t understand why you keep on complaining about this.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; For the record, I too think getting rid of the C-style for loop was a mistake, and there are a number of other proposals whose outcomes are not ones I would have personally preferred.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; However,<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; 1. There is a well-defined process through which all changes to the Swift language must go, laid out in the swift-evolution repository&#39;s documentation from the first day Swift became an open-source project.<br>&gt;   <br>&gt; 2. That process includes feedback and review from both the community and the Swift core engineers, and often multiple rounds of discussion.<br>&gt;   <br>&gt; 3. The process doesn&#39;t work if we disregard its outcomes simply because we don&#39;t like them, or if we allow interminable chains of back-and-forth proposals because people on one side of issue X simply cannot accept a particular decision.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; The technical aspects of the C-style for loop and its proposed replacements have already been discussed  ad nauseam   on this list and in other places, so I won&#39;t touch on them.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; Best regards,<br>&gt;   <br>&gt; Austin     <br>&gt;   <br>&gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;     <br>&gt; &gt;   <br>&gt; &gt;    - It doesn’t conflict at all with all other language elements,<br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt;   <br>&gt;   <br>&gt;  _______________________________________________ swift-evolution mailing list  swift-evolution at swift.org (mailto:swift-evolution at swift.org)   https://lists.swift.org/mailman/listinfo/swift-evolution        <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/50144b1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a5a2cebcb5559ab317c1ce5a5ed9a064?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Garth Snyder</string> &lt;garth at garthsnyder.com&gt;<p>July 28, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Karl Wagner: In Plato&#39;s Crito, Socrates refuses to flee Athens after being sentenced to death. He entered in to an agreement with the state to participate in the process and respect its judgements, and reasons that to violate the rules of the system because he believes the outcome unjust would be a greater injustice.<br></p><p><br>All right, then — hemlock for the lot of you… :-)<br></p><p>Garth<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/95775a02/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 28, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 28.07.2016, at 20:20, Karl Wagner &lt;razielim at gmail.com&gt; wrote:<br>&gt; <br>&gt; +1. There have been lots of accepted proposals which I argued against, but community-driven evolution means we have to compromise.<br>This would imply, that if a decision is made, which in a later and changed context proves to be a bad one, would be irreversible? <br>Better turn half way than to err in continuing.<br>Or, one decides to go diving, but arriving at the location, notice that the water is full of sharks? Still continue? <br></p><p>&gt; <br>&gt; In Plato&#39;s Crito, Socrates refuses to flee Athens after being sentenced to death. He entered in to an agreement with the state to participate in the process and respect its judgements, and reasons that to violate the rules of the system because he believes the outcome unjust would be a greater injustice.<br>&gt; <br>&gt; Just mentioning it; it&#39;s always been a fascinating story to me.<br>Thanks, interesting. Long ago I’ve read a bit in Plato - The Republic but was back then<br>to hyper active to concentrate..<br>&gt; <br>&gt; Karl<br>&gt; <br>&gt; Sent from my new Email &lt;https://itunes.apple.com/app/apple-store/id922793622?pt=814382&amp;mt=8&amp;ct=my_new_email&gt;<br>&gt; <br>TedvG<br>&gt; <br>&gt;&gt; On Jul 28, 2016 at 7:33 PM, &lt;Austin Zheng via swift-evolution &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 28, 2016, at 10:19 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       -= Maybe it’s not too late =- <br>&gt;&gt;&gt; For the moment the classical for ;;  could simply <br>&gt;&gt;&gt; remain activated  (Yes)  in 3.0. because:  <br>&gt;&gt; <br>&gt;&gt; I don&#39;t understand why you keep on complaining about this.<br>&gt;&gt; <br>&gt;&gt; For the record, I too think getting rid of the C-style for loop was a mistake, and there are a number of other proposals whose outcomes are not ones I would have personally preferred.<br>&gt;&gt; <br>&gt;&gt; However,<br>&gt;&gt; <br>&gt;&gt; 1. There is a well-defined process through which all changes to the Swift language must go, laid out in the swift-evolution repository&#39;s documentation from the first day Swift became an open-source project.<br>&gt;&gt; 2. That process includes feedback and review from both the community and the Swift core engineers, and often multiple rounds of discussion.<br>&gt;&gt; 3. The process doesn&#39;t work if we disregard its outcomes simply because we don&#39;t like them, or if we allow interminable chains of back-and-forth proposals because people on one side of issue X simply cannot accept a particular decision.<br>&gt;&gt; <br>&gt;&gt; The technical aspects of the C-style for loop and its proposed replacements have already been discussed ad nauseam on this list and in other places, so I won&#39;t touch on them.<br>&gt;&gt; <br>&gt;&gt; Best regards,<br>&gt;&gt; Austin  <br>&gt;&gt; <br>&gt;&gt;&gt;   <br>&gt;&gt;&gt;   - It doesn’t conflict at all with all other language elements,<br>&gt;&gt; <br>&gt;&gt; _______________________________________________ swift-evolution mailing list swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/97559fa4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>July 28, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt;<br>&gt;<br>&gt; This would imply, that if a decision is made, which in a later and changed<br>&gt; context proves to be a bad one, would be irreversible?<br>&gt; Better turn half way than to err in continuing.<br>&gt; Or, one decides to go diving, but arriving at the location, notice that<br>&gt; the water is full of sharks? Still continue?<br>&gt;<br>&gt;<br>But there&#39;s no &#39;continue&#39; here. The time to &#39;turn half way&#39; was months ago.<br>We already arrived.<br></p><p>We moved house. We sold the old one, handed over the keys, moved into the<br>new place and put up the wallpaper. If you want to move back to the old<br>house, you&#39;ll need to convince everyone to put everything back into boxes.<br></p><p>Swift 3 does not have C-style for-loops. That decision has been made.<br></p><p>But on August 1, feel free to make a pitch explaining why C-style for-loops<br>are a feature worth adding to Swift 4.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/be9452f5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 29, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Ross,<br>&gt; On 29.07.2016, at 00:21, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; This would imply, that if a decision is made, which in a later and changed context proves to be a bad one, would be irreversible? <br>&gt; Better turn half way than to err in continuing.<br>&gt; Or, one decides to go diving, but arriving at the location, notice that the water is full of sharks? Still continue? <br>&gt; <br>&gt; <br>&gt; But there&#39;s no &#39;continue&#39; here. The time to &#39;turn half way&#39; was months ago. We already arrived.<br>&gt; <br>&gt; We moved house. We sold the old one, handed over the keys, moved into the new place and put up the wallpaper. If you want to move back to the old house, you&#39;ll need to convince everyone to put everything back into boxes.<br>Hey Ross, look around you in the house!  Ah, there it is! <br>You’d only have to unpack the box with the for;; it’s still there :o)<br>I bet, the components in the compiler to process a for;; are still present in the 3.0 compiler<br>and could be simply reactivated?<br></p><p><br>&gt; <br>&gt; Swift 3 does not have C-style for-loops. That decision has been made.<br></p><p><br>&gt; <br>&gt; But on August 1, feel free to make a pitch explaining why C-style for-loops are a feature worth adding to Swift 4.<br>Will do. thanks.<br></p><p>Anyway:<br>I’ll drop the subject for now, also<br>because my highly exceptional request will  probably not be honored.<br>Then so be it. <br>Met vriendelijke groeten<br>Ted<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/bd67889d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi Austin, thank you, please see inline.<br>&gt; On 28.07.2016, at 19:33, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 28, 2016, at 10:19 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;       -= Maybe it’s not too late =- <br>&gt;&gt; For the moment the classical for ;;  could simply <br>&gt;&gt; remain activated  (Yes)  in 3.0. because:  <br>&gt; <br>&gt; I don&#39;t understand why you keep on complaining about this.<br>? <br>I have explained this many times before, didn’t I? <br></p><p>Its removal causes a very crucial limitation/change in the way <br>one writes programs, So writing about this for;; subject is<br>very, very different from long discussions like those about <br>allowing a comma at the end of a list or not…<br>because removing the for;; has a very heavy impact.<br></p><p>Furthermore, IMHO the decision to remove the for;; was based<br>on very subjective loose and partly irrelevant criteria.<br></p><p>For example the suggestion, that experienced<br>programmer will refrain from using the for;;<br>was ridiculous. It’s a bit like assuming that a technicians<br>will not use a screw drivers anymore..<br></p><p>I’ve wrote about this extensively before.<br> <br>Just read that proposal to remove <br>the for;; and for that matter also the ++ and — again.. <br>Albeit a bit understandable: It was one of the first proposals, <br>written in a time when everything had just started..<br></p><p>Personally, for my apps, removing the for;; results in lots of <br>otherwise unnecessary time converting at least ten source files, <br>typically containing about five for;; loops each, nested ones also. <br></p><p>Automagic conversion is not possible also because many of <br>these iterations are with floating point numbers and also <br>run backwards.let alone with decrementing steps.<br></p><p>In my Apple TV 3D SceneKit based app under construction<br>these are for;; with floats, which have to be replaced by do-while constructs..<br></p><p>In all of my apps (i am a pour lonesome developer :o) <br>I have to test all of this again and again to make sure <br>my apps work flawlessly without errors again, as they do now.<br>(see RavelNotes and RavelNotesBasic) <br>These apps are quite complex, changing and testing<br>these is not that easy.<br></p><p>Ergo:  as a law of steel: <br>One should *never* introduce backward breaking changes!<br></p><p>So I am very glad Ted Kremenek came forward with this<br>module based different version compilation option.<br>It seems to be a reasonable alternative. <br></p><p>If not, I would have dropped Swift soon and look for another<br>solution to produce my apps. However, this would be very regrettable.<br>because I really love Swift. I wouldn’t be here if I didn’t !<br></p><p>I was quite happy with Swift 2. It had all the things I tend to expect<br>from a state of the art programming language. very cool.<br>and also eagerly waiting for *additive* changes and improvements.<br></p><p><br>@Craig: <br>When Swift was presented and its use encouraged by you, Craig, on the WWDC, <br>it was not supposed to be in a *beta stage* ! At least, it was my impression<br>that it was no longer in beta stage and that it was OK to use Swift for<br>production, no one told otherwise, if I remember correctly.<br></p><p>And so I embraced Swift immediately, me being mostly an early adapter <br>  (even when being in IT since 1978 or so, or maybe rather because of that!) <br> assuming that it was solid and a safe bet to use it in a production environment. <br></p><p>However, IMHO, it has been virtually in a beta stage until now, <br>simply because, things were and are still changing!.<br>Yes, of course I do expect improvements, however they should be<br>additive, not code breaking changes.<br></p><p>I also do understand and don’t underestimate the motion with new languages. <br></p><p><br>If I had known all this before, I would have remained programming<br>my apps in Objective C until a more solid version came along. <br>In the mean time, yes, of course, I would have played with it and studying it<br>sideways, and take part and listening in this forum. <br></p><p>And, maybe then I would have enough faith in 3.0 that is to <br>use Swift 3.0 and higher fully in a production environment.<br>And don’t get me wrong, I like Swift very much it really <br>is a very advanced development.<br></p><p>And then another thing, well, maybe you’d<br>think that I am whining a bit, but try to see it this way:<br>Most things in Swift are OK and even superb, so I don’t<br>need to write about these! What remains then is just to <br>write about the thing’s I don’t like or which could be<br>improved. This might give the impression that I am just <br>complaining, note however, nothing is farther from the truth. <br></p><p>( because we just write, which is a very limited form<br>of human communication being a lot different then sitting<br>around a round table (hmm that reminds me of something :o)<br>laughing and drinking coffee. I you’d wish to change that<br>send me a ticket to San Francisco or so. :o) <br></p><p><br>&gt; <br>&gt; For the record, I too think getting rid of the C-style for loop was a mistake,<br>Yes it is. Well, then maybe you also could perhaps have made more effort<br>to keep the for;;  and other colleagues too that think likewise? <br>Or in the near future, to support my upcoming proposal? <br></p><p>&gt; and there are a number of other proposals whose outcomes are not ones I would have personally preferred.<br>Of course, I realize that as well, that goes for me too. <br>https://www.youtube.com/watch?v=7S94ohyErSw<br>:o)<br>&gt; <br>&gt; However,<br>&gt; <br>&gt; 1. There is a well-defined process through which all changes to the Swift language must go, laid out in the swift-evolution repository&#39;s documentation from the first day Swift became an open-source project.<br>I know that, and that’s why I will make a proposal after 3.0 to reinstate the classical for loop. <br></p><p>&gt; 2. That process includes feedback and review from both the community and the Swift core engineers, and often multiple rounds of discussion.<br>Agreed, but I arrived much later..<br></p><p>&gt; 3. The process doesn&#39;t work if we disregard its outcomes simply because we don&#39;t like them, or if we allow interminable chains of back-and-forth proposals because people on one side of issue X simply cannot accept a particular decision.<br>Obviously, however, if a proposal, due to later insights, is wrong or conflicting is should be discussable to drop, correct or replace it.<br> <br>&gt; <br>&gt; The technical aspects of the C-style for loop and its proposed replacements have already been discussed ad nauseam on this list and in other places, so I won&#39;t touch on them.<br>true, I’ve had my share in these too. what remains now for me to do is, <br> to propose a reinstatement of the for ;; (as in Go)  after 3.0<br>I’ll do that. <br></p><p>Met vriendelijke groeten<br>from a Dutch professional somehow landed in Germany :o)<br>TedvG<br>www.tedvg.com &lt;http://www.tedvg.com/&gt;<br>www.ravelnotes.com &lt;http://www.ravelnotes.com/&gt;<br>www.speyer.de &lt;http://www.speyer.de/&gt;<br></p><p><br>&gt; <br>&gt; Best regards,<br>&gt; Austin  <br>&gt; <br>&gt;&gt;   <br>&gt;&gt;   - It doesn’t conflict at all with all other language elements,<br>YEs!<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/f42d8b03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>On Thu, Jul 28, 2016 at 2:37 PM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt;<br>wrote:<br></p><p>&gt; Hi Austin, thank you, please see inline<br>&gt; ?<br>&gt; I have explained this many times before, didn’t I?<br>&gt;<br>&gt; Its removal causes a very crucial limitation/change in the way<br>&gt; one writes programs, So writing about this for;; subject is<br>&gt; very, very different from long discussions like those about<br>&gt; allowing a comma at the end of a list or not…<br>&gt; because removing the for;; has a very heavy impact.<br>&gt;<br>&gt; Furthermore, IMHO the decision to remove the for;; was based<br>&gt; on very subjective loose and partly irrelevant criteria.<br>&gt;<br>&gt;<br>I don&#39;t care how good your reasons are, the fact of the matter is that it<br>was extensively discussed, a decision was made, and it is now a done deal.<br>Please remember that these are high-traffic lists that many people<br>subscribe to; complaining about the C for loop is a waste of everybody&#39;s<br>time. At the very least, please respect the process and put together a<br>proposal that we can all discuss, instead of asking Chris or whoever to<br>step in and make an exception because you don&#39;t like it.<br></p><p>Austin<br></p><p><br></p><p>&gt; For example the suggestion, that experienced<br>&gt; programmer will refrain from using the for;;<br>&gt; was ridiculous. It’s a bit like assuming that a technicians<br>&gt; will not use a screw drivers anymore..<br>&gt;<br>&gt; I’ve wrote about this extensively before.<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/0ba731a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 29, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Austin,<br></p><p>please read inline.<br>&gt; On 28.07.2016, at 23:47, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Thu, Jul 28, 2016 at 2:37 PM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt; Hi Austin, thank you, please see inline<br>&gt; ? <br>&gt; I have explained this many times before, didn’t I? <br>&gt; <br>&gt; Its removal causes a very crucial limitation/change in the way <br>&gt; one writes programs, So writing about this for;; subject is<br>&gt; very, very different from long discussions like those about <br>&gt; allowing a comma at the end of a list or not…<br>&gt; because removing the for;; has a very heavy impact.<br>&gt; <br>&gt; Furthermore, IMHO the decision to remove the for;; was based<br>&gt; on very subjective loose and partly irrelevant criteria.<br>&gt; <br>&gt; <br>&gt; I don&#39;t care how good your reasons are, the fact of the matter is that it was extensively discussed, a decision was made, and it is now a done deal.<br>Napoleon said something similar when pushing his army towards Moscow...<br>&gt; Please remember that these are high-traffic lists that many people subscribe to; complaining about the C for loop is a waste of everybody&#39;s time.<br>That’s your opinion.<br>&gt; At the very least, please respect the process and put together a proposal that we can all discuss,<br>As written before, I will write the proposal after Swift 3.0 is released.<br>If you are interested in bringing it back then you could help<br>me with it.<br>&gt; instead of asking Chris or whoever to step in and make an exception because you don&#39;t like it.<br>Yes, indeed, I am exceptionally asking to make an exception, to keep the for ;; in<br>for the time being.<br></p><p>As concerning your “high traffic” notion, this is written material<br>no doubt, the recipients are capable enough to put it aside for later<br>if they’d wish to do so. <br></p><p>Sorry, if you don’t like it.<br>Thanks.<br>TedvG<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/6fffbee7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 28, 2016 at 03:00:00pm</p></header><div class="content"><p>The reason C-style for loops were removed were because most of the time they could be represented by Swift syntax. Have you taken a look at stride(from:to:by:)?<br></p><p>Saagar Jha<br></p><p><br></p><p>&gt; On Jul 28, 2016, at 15:08, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Austin,<br>&gt; <br>&gt; please read inline.<br>&gt;&gt; On 28.07.2016, at 23:47, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Thu, Jul 28, 2016 at 2:37 PM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Hi Austin, thank you, please see inline<br>&gt;&gt; ? <br>&gt;&gt; I have explained this many times before, didn’t I? <br>&gt;&gt; <br>&gt;&gt; Its removal causes a very crucial limitation/change in the way <br>&gt;&gt; one writes programs, So writing about this for;; subject is<br>&gt;&gt; very, very different from long discussions like those about <br>&gt;&gt; allowing a comma at the end of a list or not…<br>&gt;&gt; because removing the for;; has a very heavy impact.<br>&gt;&gt; <br>&gt;&gt; Furthermore, IMHO the decision to remove the for;; was based<br>&gt;&gt; on very subjective loose and partly irrelevant criteria.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I don&#39;t care how good your reasons are, the fact of the matter is that it was extensively discussed, a decision was made, and it is now a done deal.<br>&gt; Napoleon said something similar when pushing his army towards Moscow...<br>&gt;&gt; Please remember that these are high-traffic lists that many people subscribe to; complaining about the C for loop is a waste of everybody&#39;s time.<br>&gt; That’s your opinion.<br>&gt;&gt; At the very least, please respect the process and put together a proposal that we can all discuss,<br>&gt; As written before, I will write the proposal after Swift 3.0 is released.<br>&gt; If you are interested in bringing it back then you could help<br>&gt; me with it.<br>&gt;&gt; instead of asking Chris or whoever to step in and make an exception because you don&#39;t like it.<br>&gt; Yes, indeed, I am exceptionally asking to make an exception, to keep the for ;; in<br>&gt; for the time being.<br>&gt; <br>&gt; As concerning your “high traffic” notion, this is written material<br>&gt; no doubt, the recipients are capable enough to put it aside for later<br>&gt; if they’d wish to do so. <br>&gt; <br>&gt; Sorry, if you don’t like it.<br>&gt; Thanks.<br>&gt; TedvG<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/fe2e6f20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July 29, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 29 Jul 2016, at 00:21, Saagar Jha via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The reason C-style for loops were removed were because most of the time they could be represented by Swift syntax. Have you taken a look at stride(from:to:by:)?<br></p><p>A minor correction: it should be ‚all of the time‘ :) Iterator-based loops are a strict superset of the for(;;) loop.<br></p><p>Anyway, we have discussed this extensively in the past, Ted is the only person who’s still keeps stubbornly hacking on this topic and so far he has failed to produce any convincing evidence in favour of the for(;;) loop. Its time to either accept defeat or produce some new material to discuss. Austin is absolutely right that repeating same things only makes this already huge list even bigger and less digestible. <br></p><p>Best, <br></p><p> T. <br></p><p>&gt; <br>&gt; Saagar Jha<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 28, 2016, at 15:08, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Austin,<br>&gt;&gt; <br>&gt;&gt; please read inline.<br>&gt;&gt;&gt; On 28.07.2016, at 23:47, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Jul 28, 2016 at 2:37 PM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Hi Austin, thank you, please see inline<br>&gt;&gt;&gt; ? <br>&gt;&gt;&gt; I have explained this many times before, didn’t I? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Its removal causes a very crucial limitation/change in the way <br>&gt;&gt;&gt; one writes programs, So writing about this for;; subject is<br>&gt;&gt;&gt; very, very different from long discussions like those about <br>&gt;&gt;&gt; allowing a comma at the end of a list or not…<br>&gt;&gt;&gt; because removing the for;; has a very heavy impact.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Furthermore, IMHO the decision to remove the for;; was based<br>&gt;&gt;&gt; on very subjective loose and partly irrelevant criteria.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t care how good your reasons are, the fact of the matter is that it was extensively discussed, a decision was made, and it is now a done deal.<br>&gt;&gt; Napoleon said something similar when pushing his army towards Moscow...<br>&gt;&gt;&gt; Please remember that these are high-traffic lists that many people subscribe to; complaining about the C for loop is a waste of everybody&#39;s time.<br>&gt;&gt; That’s your opinion.<br>&gt;&gt;&gt; At the very least, please respect the process and put together a proposal that we can all discuss,<br>&gt;&gt; As written before, I will write the proposal after Swift 3.0 is released.<br>&gt;&gt; If you are interested in bringing it back then you could help<br>&gt;&gt; me with it.<br>&gt;&gt;&gt; instead of asking Chris or whoever to step in and make an exception because you don&#39;t like it.<br>&gt;&gt; Yes, indeed, I am exceptionally asking to make an exception, to keep the for ;; in<br>&gt;&gt; for the time being.<br>&gt;&gt; <br>&gt;&gt; As concerning your “high traffic” notion, this is written material<br>&gt;&gt; no doubt, the recipients are capable enough to put it aside for later<br>&gt;&gt; if they’d wish to do so. <br>&gt;&gt; <br>&gt;&gt; Sorry, if you don’t like it.<br>&gt;&gt; Thanks.<br>&gt;&gt; TedvG<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/fe919bc1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 29, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Taras,<br></p><p>There’s more than enough evidence in the whole programming world<br>to justify the existence of the classical for loop, also in Swift!<br>Not only in “old” languages, for instance, take a look in Go. <br>Excellent implementation there of the for;;<br></p><p>https://tour.golang.org/flowcontrol/1 &lt;https://tour.golang.org/flowcontrol/1&gt;<br></p><p><br>Btw, to me, It’s not a matter of “defeat” or “winning”.<br></p><p>I am not the only person preferring the for;; to stay.<br></p><p>I’ve also written about other things, like comma less parameter list etc.<br></p><p>But I will not continue this discussion right now and wait til August.<br></p><p>Kind Regards<br>TedvG<br></p><p>&gt; On 29.07.2016, at 00:30, Taras Zakharko &lt;taras.zakharko at uzh.ch&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 29 Jul 2016, at 00:21, Saagar Jha via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The reason C-style for loops were removed were because most of the time they could be represented by Swift syntax. Have you taken a look at stride(from:to:by:)?<br>Yes I did. <br>&gt; <br>&gt; A minor correction: it should be ‚all of the time‘ :) Iterator-based loops are a strict superset of the for(;;) loop.<br>No. the for;; is much more versatile and easier to use, but I’v already wrote much about this. <br>&gt; <br>&gt; Anyway, we have discussed this extensively in the past, Ted is the only person who’s still keeps stubbornly hacking on this topic and so far he has failed to produce any convincing evidence in favour of the for(;;) loop.<br>Please read it again.<br>&gt; Its time to either accept defeat or produce some new material to discuss. Austin is absolutely right that repeating same things only makes this already huge list even bigger and less digestible. <br>&gt; <br>&gt; Best, <br>&gt; <br>&gt;  T. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Saagar Jha<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 28, 2016, at 15:08, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Austin,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; please read inline.<br>&gt;&gt;&gt;&gt; On 28.07.2016, at 23:47, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Jul 28, 2016 at 2:37 PM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com &lt;mailto:tedvgiosdev at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Hi Austin, thank you, please see inline<br>&gt;&gt;&gt;&gt; ? <br>&gt;&gt;&gt;&gt; I have explained this many times before, didn’t I? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Its removal causes a very crucial limitation/change in the way <br>&gt;&gt;&gt;&gt; one writes programs, So writing about this for;; subject is<br>&gt;&gt;&gt;&gt; very, very different from long discussions like those about <br>&gt;&gt;&gt;&gt; allowing a comma at the end of a list or not…<br>&gt;&gt;&gt;&gt; because removing the for;; has a very heavy impact.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Furthermore, IMHO the decision to remove the for;; was based<br>&gt;&gt;&gt;&gt; on very subjective loose and partly irrelevant criteria.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t care how good your reasons are, the fact of the matter is that it was extensively discussed, a decision was made, and it is now a done deal.<br>&gt;&gt;&gt; Napoleon said something similar when pushing his army towards Moscow...<br>&gt;&gt;&gt;&gt; Please remember that these are high-traffic lists that many people subscribe to; complaining about the C for loop is a waste of everybody&#39;s time.<br>&gt;&gt;&gt; That’s your opinion.<br>&gt;&gt;&gt;&gt; At the very least, please respect the process and put together a proposal that we can all discuss,<br>&gt;&gt;&gt; As written before, I will write the proposal after Swift 3.0 is released.<br>&gt;&gt;&gt; If you are interested in bringing it back then you could help<br>&gt;&gt;&gt; me with it.<br>&gt;&gt;&gt;&gt; instead of asking Chris or whoever to step in and make an exception because you don&#39;t like it.<br>&gt;&gt;&gt; Yes, indeed, I am exceptionally asking to make an exception, to keep the for ;; in<br>&gt;&gt;&gt; for the time being.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As concerning your “high traffic” notion, this is written material<br>&gt;&gt;&gt; no doubt, the recipients are capable enough to put it aside for later<br>&gt;&gt;&gt; if they’d wish to do so. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry, if you don’t like it.<br>&gt;&gt;&gt; Thanks.<br>&gt;&gt;&gt; TedvG<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/3db6c888/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 28, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 28, 2016, at 10:19 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt; <br>&gt; This sounds like a reasonable solution...<br>&gt; If I understand you correctly;<br>&gt;    The compiler(s)  would be able to compile sources from 3.0 and future versions?<br></p><p>Correct.<br></p><p>&gt; Unfortunately that doesn’t go back to 2.2, <br></p><p>Correct - this doesn’t apply to Swift 2.2 or Swift 2.3.  Source compatibility will start with Swift 3, just like we’ve been saying for some time now.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Thanks, Chris.<br>&gt; On 28.07.2016, at 22:56, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 28, 2016, at 10:19 AM, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt;&gt;&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt;&gt; <br>&gt;&gt; This sounds like a reasonable solution...<br>&gt;&gt; If I understand you correctly;<br>&gt;&gt;   The compiler(s)  would be able to compile sources from 3.0 and future versions?<br>&gt; <br>&gt; Correct.<br>&gt; <br>&gt;&gt; Unfortunately that doesn’t go back to 2.2, <br>&gt; <br>&gt; Correct - this doesn’t apply to Swift 2.2 or Swift 2.3.  Source compatibility will start with Swift 3, just like we’ve been saying for some time now.<br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
