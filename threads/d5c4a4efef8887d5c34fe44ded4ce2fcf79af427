<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40fa9c9daa1a725127a0a20493954ac?s=50"></div><header><strong>[PITCH] WatchKit API Design Change to use properties instead of methods to set properties</strong> from <string>michie.swift at riffic.io</string> &lt;michie.swift at riffic.io&gt;<p>June 22, 2016 at 07:00:00pm</p></header><div class="content"><p>PROPOSING: UPDATE WATCHKIT API DESIGN TO USE PROPERTIES INSTEAD OF METHODS<br>TO SET PROPERTIES<br></p><p>  by Michie - https://github.com/michieriffic<br></p><p><br>INTRODUCTION<br></p><p>WKInterfaceLabel is still using methods for set Text (setText), set Text<br>Color (setTextColor), set Attributed Text (setAttributedText) to set<br>properties of WKInterfaceLabel. I think it&#39;s more appropriate to make these<br>into properties rather than methods just like in the UILabel. That would<br>make it more consistent with building apps for both iOS, MacOS, WatchOS,<br>and more.<br></p><p>Also, other objects in WatchKit needs to be updated too to use properties<br>instead of methods to set properties so we can easily access it using dot<br>notation. WKInterfaceLabel is just an example.<br></p><p>MOTIVATION<br></p><p>While creating an app for watchOS, it has been a habit for me to use the<br>dot notation to access a property of an object and set it using &quot;=&quot;. And<br>text, textColor, and attributedText are properties rather than methods of<br>an object.<br></p><p>PROPOSED SOLUTION &amp; DETAILED DESIGN<br></p><p>public class WKInterfaceLabel : WKInterfaceObject {<br></p><p>   public var text: String?<br>   public var textColor: UIColor?<br>   @NSCopying public var attributedText: AttributedString?<br></p><p>}<br></p><p>/INSTEAD OF/<br></p><p>public class WKInterfaceLabel : WKInterfaceObject {<br></p><p>   public func setText(_ text: String?)<br>   public func setTextColor(_ color: UIColor?)<br>   public func setAttributedText(_ attributtedText: AttributedString?)<br></p><p>}<br></p><p>IMPACT ON EXISTING CODE<br></p><p>Impact: /Would be more consistent and natural to the Swift language when<br>building apps for WatchOS/<br></p><p>BEFORE:<br></p><p>  watchLabel.setText(&quot;Text String&quot;)<br>  watchLabel.setTextColor(UIColor.red())<br></p><p>  AFTER:<br></p><p>  watchLabel.text = &quot;Text String&quot;<br>  watchLabel.textColor = UIColor.red()<br></p><p>  Will some Swift applications stop compiling due to this change? /Possible/<br></p><p>Will applications still compile but produce different behavior than they<br>used to? /No, if everything was migrated properly./<br></p><p>Is it possible to migrate existing Swift code to use a new feature or API<br>automatically? /Yes./<br></p><p>ALTERNATIVES CONSIDERED<br></p><p>Just use what&#39;s currently available.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/d5c4f427/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[PITCH] WatchKit API Design Change to use properties instead of methods to set properties</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 22, 2016 at 11:00:00pm</p></header><div class="content"><p>Doing this would require a larger change in Swift than a single API.<br>WKInterfaceLabel is &quot;one-way&quot; in the sense that those values can be set<br>with setter methods, but there is no API to get the values back. This can&#39;t<br>map to properties in Swift as they&#39;re implemented today, because a property<br>with a custom setter must also have a custom getter.<br></p><p>That being said, a property is intended to be something that *can* be read<br>and used elsewhere in expressions, like a variable, so such a change<br>wouldn&#39;t (in my opinion) be warranted. The fact that the setting is through<br>an explicit set* method instead of a property makes it stand out to the<br>user as something that doesn&#39;t function like a regular property does.<br></p><p><br>On Wed, Jun 22, 2016 at 4:03 PM Michie via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; *PROPOSING: Update WatchKit API Design to use properties instead of<br>&gt; methods to set properties*<br>&gt;<br>&gt; by Michie - https://github.com/michieriffic<br>&gt;<br>&gt;<br>&gt; *Introduction*<br>&gt;<br>&gt; WKInterfaceLabel is still using methods for set Text (setText), set Text<br>&gt; Color (setTextColor), set Attributed Text (setAttributedText) to set<br>&gt; properties of WKInterfaceLabel. I think it&#39;s more appropriate to make these<br>&gt; into properties rather than methods just like in the UILabel. That would<br>&gt; make it more consistent with building apps for both iOS, MacOS, WatchOS,<br>&gt; and more.<br>&gt;<br>&gt; Also, other objects in WatchKit needs to be updated too to use properties<br>&gt; instead of methods to set properties so we can easily access it using dot<br>&gt; notation. WKInterfaceLabel is just an example.<br>&gt;<br>&gt; *Motivation*<br>&gt;<br>&gt; While creating an app for watchOS, it has been a habit for me to use the<br>&gt; dot notation to access a property of an object and set it using &quot;=&quot;. And<br>&gt; text, textColor, and attributedText are properties rather than methods of<br>&gt; an object.<br>&gt;<br>&gt; *Proposed solution &amp; detailed design*<br>&gt;<br>&gt; public class WKInterfaceLabel : WKInterfaceObject {<br>&gt;<br>&gt;    public var text: String?<br>&gt;    public var textColor: UIColor?<br>&gt;    @NSCopying public var attributedText: AttributedString?<br>&gt;<br>&gt; }<br>&gt;<br>&gt; *INSTEAD OF*<br>&gt;<br>&gt; public class WKInterfaceLabel : WKInterfaceObject {<br>&gt;<br>&gt;    public func setText(_ text: String?)<br>&gt;    public func setTextColor(_ color: UIColor?)<br>&gt;    public func setAttributedText(_ attributtedText: AttributedString?)<br>&gt;<br>&gt; }<br>&gt;<br>&gt; *Impact on existing code*<br>&gt;<br>&gt; Impact: *Would be more consistent and natural to the Swift language when<br>&gt; building apps for WatchOS*<br>&gt;<br>&gt; *Before:*<br>&gt;<br>&gt;   watchLabel.setText(&quot;Text String&quot;)<br>&gt;   watchLabel.setTextColor(UIColor.red())<br>&gt;<br>&gt; *After:*<br>&gt;<br>&gt;   watchLabel.text = &quot;Text String&quot;<br>&gt;   watchLabel.textColor = UIColor.red()<br>&gt;<br>&gt; Will some Swift applications stop compiling due to this change? *Possible*<br>&gt;<br>&gt; Will applications still compile but produce different behavior than they<br>&gt; used to? *No, if everything was migrated properly.*<br>&gt;<br>&gt; Is it possible to migrate existing Swift code to use a new feature or API<br>&gt; automatically? *Yes.*<br>&gt;<br>&gt; *Alternatives considered*<br>&gt;<br>&gt; Just use what&#39;s currently available.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/23e4e6d7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[PITCH] WatchKit API Design Change to use properties instead of methods to set properties</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; PROPOSING: Update WatchKit API Design to use properties instead of methods to set properties<br></p><p>swift-evolution does not control how specific Apple frameworks, like WatchKit, get exposed to Swift. We sometimes review proposals from framework teams like Apple and LibDispatch on how they want to expose their APIs, but the details are still up to them. If you want to influence the design of Apple frameworks, the best way to do that is still Radar &lt;https://bugreport.apple.com&gt;.<br></p><p>As for your specific proposal, the main problem I see with this is that these WatchKit classes offer only setters, not getters, and Swift doesn&#39;t support setter-only properties. Adding that support would not be very compatible with value types, because we need to be able to access the existing value in order to mutate it. I have nothing to do with the development of WatchKit, so I&#39;m speculating, but I believe this design was chosen so that user interface updates could be asynchronous. Currently, nothing I can think of in WatchKit ever uses a return value; supporting getters in these APIs would run counter to that goal.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[PITCH] WatchKit API Design Change to use properties instead of methods to set properties</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; We sometimes review proposals from framework teams like Apple and LibDispatch<br></p><p>Sorry, that should have been &quot;Foundation and LibDispatch&quot;.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
