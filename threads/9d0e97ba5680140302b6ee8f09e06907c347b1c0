<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Javier Soto brought up a case where his ReactiveCocoa code silently did the wrong thing by implicitly discarding the result of a closure:<br></p><p>https://twitter.com/Javi/status/695680700033306624<br></p><p>Since it sounds like we plan on making `@warn_unused_result` the default, it seems natural to also warn when a closure has its result type converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive into the return expression to decide whether to warn based on the function whose result is getting ignored.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/df65d69ec35e73390ddd0e6a2c335737?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>James Hillhouse IV</string> &lt;jimhillhouse at me.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 for this idea.<br></p><p>&gt; On Feb 8, 2016, at 9:25 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Javier Soto brought up a case where his ReactiveCocoa code silently did the wrong thing by implicitly discarding the result of a closure:<br>&gt; <br>&gt; https://twitter.com/Javi/status/695680700033306624<br>&gt; <br>&gt; Since it sounds like we plan on making `@warn_unused_result` the default, it seems natural to also warn when a closure has its result type converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive into the return expression to decide whether to warn based on the function whose result is getting ignored.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 7:25 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Javier Soto brought up a case where his ReactiveCocoa code silently did the wrong thing by implicitly discarding the result of a closure:<br>&gt; <br>&gt; https://twitter.com/Javi/status/695680700033306624<br>&gt; <br>&gt; Since it sounds like we plan on making `@warn_unused_result` the default, it seems natural to also warn when a closure has its result type converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive into the return expression to decide whether to warn based on the function whose result is getting ignored.<br></p><p>There&#39;s another axis of intent in whether the closure was written with an explicit return or not. `{ foo($0) }` is ambivalent to whether it intends to propagate the value returned by `foo` or not, whereas `{ return foo($0) }` is explicitly trying to do so. IMO we have a stronger case to warn if the `return` is explicit in the closure body.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  8, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 8:32 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 8, 2016, at 7:25 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Javier Soto brought up a case where his ReactiveCocoa code silently did the wrong thing by implicitly discarding the result of a closure:<br>&gt;&gt; <br>&gt;&gt; https://twitter.com/Javi/status/695680700033306624<br>&gt;&gt; <br>&gt;&gt; Since it sounds like we plan on making `@warn_unused_result` the default, it seems natural to also warn when a closure has its result type converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive into the return expression to decide whether to warn based on the function whose result is getting ignored.<br>&gt; <br>&gt; There&#39;s another axis of intent in whether the closure was written with an explicit return or not. `{ foo($0) }` is ambivalent to whether it intends to propagate the value returned by `foo` or not, whereas `{ return foo($0) }` is explicitly trying to do so. IMO we have a stronger case to warn if the `return` is explicit in the closure body.<br></p><p><br>if foo  is -&gt; Void, it&#39;s a gimme.<br>if foo is -&gt; T with @warn_unused_result, it&#39;s a gimme<br>if foo is -&gt; T without @warn_unused_result, dunno<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February  9, 2016 at 02:00:00am</p></header><div class="content"><p>@EricaSadun I’d like to say that many of us are not native English<br>speakers. I had to find what is the meaning of “gimme” and “dunno”. And it<br>is a good thing, so I can learn more English words and slangs. But at the<br>same time sometimes I read these messages in a place where it is not<br>possible to consult dictionaries or when I just do not have time to do this.<br></p><p>OK... Let’s explain the words:<br></p><p>gimme. noun. a thing that is very easy to perform or obtain, especially in<br>a game or sport: the kick would hardly be a gimme in that wind<br></p><p>dunno. contraction. (I) do not know. origin mid 19th cent.: representing an<br>informal pronunciation.<br></p><p>;-)<br></p><p>Dunno, but the more we use internationally known words may be a gimme to<br>track the subject that is Swift evolution.<br></p><p><br>On Tue, Feb 9, 2016 at 1:47 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Feb 8, 2016, at 8:32 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Feb 8, 2016, at 7:25 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Javier Soto brought up a case where his ReactiveCocoa code silently did<br>&gt; the wrong thing by implicitly discarding the result of a closure:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://twitter.com/Javi/status/695680700033306624<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Since it sounds like we plan on making `@warn_unused_result` the<br>&gt; default, it seems natural to also warn when a closure has its result type<br>&gt; converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive<br>&gt; into the return expression to decide whether to warn based on the function<br>&gt; whose result is getting ignored.<br>&gt; &gt;<br>&gt; &gt; There&#39;s another axis of intent in whether the closure was written with<br>&gt; an explicit return or not. `{ foo($0) }` is ambivalent to whether it<br>&gt; intends to propagate the value returned by `foo` or not, whereas `{ return<br>&gt; foo($0) }` is explicitly trying to do so. IMO we have a stronger case to<br>&gt; warn if the `return` is explicit in the closure body.<br>&gt;<br>&gt;<br>&gt; if foo  is -&gt; Void, it&#39;s a gimme.<br>&gt; if foo is -&gt; T with @warn_unused_result, it&#39;s a gimme<br>&gt; if foo is -&gt; T without @warn_unused_result, dunno<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/d17ec369/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>I sincerely apologize for the lack of professionalism in my response. I will try to maintain higher standards in future communication.<br></p><p>Best regards. -- E<br></p><p>&gt; On Feb 8, 2016, at 9:41 PM, Vanderlei Martinelli &lt;vmartinelli at alecrim.com&gt; wrote:<br>&gt; <br>&gt; @EricaSadun I’d like to say that many of us are not native English speakers. I had to find what is the meaning of “gimme” and “dunno”. And it is a good thing, so I can learn more English words and slangs. But at the same time sometimes I read these messages in a place where it is not possible to consult dictionaries or when I just do not have time to do this.<br>&gt; <br>&gt; OK... Let’s explain the words:<br>&gt; <br>&gt; gimme. noun. a thing that is very easy to perform or obtain, especially in a game or sport: the kick would hardly be a gimme in that wind<br>&gt; <br>&gt; dunno. contraction. (I) do not know. origin mid 19th cent.: representing an informal pronunciation.<br>&gt; <br>&gt; ;-)<br>&gt; <br>&gt; Dunno, but the more we use internationally known words may be a gimme to track the subject that is Swift evolution.<br>&gt; <br>&gt; <br>&gt; On Tue, Feb 9, 2016 at 1:47 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Feb 8, 2016, at 8:32 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Feb 8, 2016, at 7:25 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Javier Soto brought up a case where his ReactiveCocoa code silently did the wrong thing by implicitly discarding the result of a closure:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://twitter.com/Javi/status/695680700033306624 &lt;https://twitter.com/Javi/status/695680700033306624&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Since it sounds like we plan on making `@warn_unused_result` the default, it seems natural to also warn when a closure has its result type converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive into the return expression to decide whether to warn based on the function whose result is getting ignored.<br>&gt; &gt;<br>&gt; &gt; There&#39;s another axis of intent in whether the closure was written with an explicit return or not. `{ foo($0) }` is ambivalent to whether it intends to propagate the value returned by `foo` or not, whereas `{ return foo($0) }` is explicitly trying to do so. IMO we have a stronger case to warn if the `return` is explicit in the closure body.<br>&gt; <br>&gt; <br>&gt; if foo  is -&gt; Void, it&#39;s a gimme.<br>&gt; if foo is -&gt; T with @warn_unused_result, it&#39;s a gimme<br>&gt; if foo is -&gt; T without @warn_unused_result, dunno<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/5083f0a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>March  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi!<br></p><p>I&#39;d like to resurface this thread. Is this something that deserves a<br>fully-fledged proposal? Should we add this to the @warn_unused_result<br>by-default proposal? https://github.com/apple/swift-evolution/pull/191/files<br></p><p>Thanks!<br></p><p>On Mon, Feb 8, 2016 at 8:44 PM Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I sincerely apologize for the lack of professionalism in my response. I<br>&gt; will try to maintain higher standards in future communication.<br>&gt;<br>&gt; Best regards. -- E<br>&gt;<br>&gt; On Feb 8, 2016, at 9:41 PM, Vanderlei Martinelli &lt;vmartinelli at alecrim.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; @EricaSadun I’d like to say that many of us are not native English<br>&gt; speakers. I had to find what is the meaning of “gimme” and “dunno”. And it<br>&gt; is a good thing, so I can learn more English words and slangs. But at the<br>&gt; same time sometimes I read these messages in a place where it is not<br>&gt; possible to consult dictionaries or when I just do not have time to do this.<br>&gt;<br>&gt; OK... Let’s explain the words:<br>&gt;<br>&gt; gimme. noun. a thing that is very easy to perform or obtain, especially in<br>&gt; a game or sport: the kick would hardly be a gimme in that wind<br>&gt;<br>&gt; dunno. contraction. (I) do not know. origin mid 19th cent.: representing an<br>&gt; informal pronunciation.<br>&gt;<br>&gt; ;-)<br>&gt;<br>&gt; Dunno, but the more we use internationally known words may be a gimme to<br>&gt; track the subject that is Swift evolution.<br>&gt;<br>&gt;<br>&gt; On Tue, Feb 9, 2016 at 1:47 AM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Feb 8, 2016, at 8:32 PM, Joe Groff via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Feb 8, 2016, at 7:25 PM, Joe Groff via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Javier Soto brought up a case where his ReactiveCocoa code silently<br>&gt;&gt; did the wrong thing by implicitly discarding the result of a closure:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://twitter.com/Javi/status/695680700033306624<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Since it sounds like we plan on making `@warn_unused_result` the<br>&gt;&gt; default, it seems natural to also warn when a closure has its result type<br>&gt;&gt; converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive<br>&gt;&gt; into the return expression to decide whether to warn based on the function<br>&gt;&gt; whose result is getting ignored.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; There&#39;s another axis of intent in whether the closure was written with<br>&gt;&gt; an explicit return or not. `{ foo($0) }` is ambivalent to whether it<br>&gt;&gt; intends to propagate the value returned by `foo` or not, whereas `{ return<br>&gt;&gt; foo($0) }` is explicitly trying to do so. IMO we have a stronger case to<br>&gt;&gt; warn if the `return` is explicit in the closure body.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; if foo  is -&gt; Void, it&#39;s a gimme.<br>&gt;&gt; if foo is -&gt; T with @warn_unused_result, it&#39;s a gimme<br>&gt;&gt; if foo is -&gt; T without @warn_unused_result, dunno<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/e5ea2188/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>We added the conversion to Void specifically because a lot of things return values that the caller doesn&#39;t care about. The most common case was<br></p><p>dispatch_sync(queue) { [weak sefl]<br>  self?.doTheThing()<br>}<br></p><p>I think it only makes sense to warn on conversion to Void if the expression being converted is itself one we would have warned on with @warn_unused_result, and in fact we do this already even in Swift 2.1.<br></p><p>func test() -&gt; Bool { return false }<br>@warn_unused_result<br>func test2() -&gt; Bool { return true }<br></p><p>func use(_: () -&gt; Void) {}<br></p><p>use { test() }<br>use { test2() }<br></p><p>So the real problem is that != isn&#39;t marked @warn_unused_result, which is SR-245 &lt;https://bugs.swift.org/browse/SR-245&gt;.<br></p><p>(Although I agree that if there&#39;s an explicit return and the expression doesn&#39;t have Void type, we should warn on the Void conversion as well. Or even error.)<br></p><p>Jordan<br></p><p><br>&gt; On Feb 8, 2016, at 19:25 , Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Javier Soto brought up a case where his ReactiveCocoa code silently did the wrong thing by implicitly discarding the result of a closure:<br>&gt; <br>&gt; https://twitter.com/Javi/status/695680700033306624<br>&gt; <br>&gt; Since it sounds like we plan on making `@warn_unused_result` the default, it seems natural to also warn when a closure has its result type converted away to Void. If there&#39;s one &#39;return&#39; statement, we could dive into the return expression to decide whether to warn based on the function whose result is getting ignored.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/49a2a124/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
