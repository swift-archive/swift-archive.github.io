<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 24, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0096: Converting dynamicType from a property to an operator&quot; begins now and runs through May 30. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 24, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>+1.  As I said in a previous review, I like that we have decided on keyword naming conventions and are bringing existing keywords in line.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick glance and participation in the original discussion.<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>May 25, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Probably, although I don’t think it’s an essential change.<br></p><p>I do believe strongly that “dynamicType” is better than “typeof&quot;, for the reason explained in the proposal: It is unclear whether it’s the static or dynamic type.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>ObjC, but I don’t think it compares well<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal and some of the previous discussion.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 25, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think it&#39;s a good idea. While the type is in some sense a &quot;property&quot; of the instance, it has always been a bit strange to have it there:<br></p><p>* `dynamicType` acts sort of like an extension of `Any`, but you&#39;re not actually allowed to extend `Any`.<br>* Using property syntax forced the designers to avoid the most obvious name, `type`, because users might want that name for their own purposes.<br>* Similar &quot;universal&quot; properties, like getting the size of an instance or reflecting it, are exposed as free functions. A fair number of the standard library&#39;s free functions could reasonably be exposed as members of `Any` or `AnyObject`, yet `dynamicType` was singled out for this treatment.<br></p><p>I am not convinced, however, by this proposal&#39;s argument against renaming to `typeof(_:)`. In a very brief survey of languages with a `typeof` operation (or some extremely similar keyword, like `TypeOf` or `type-of`), I found:<br></p><p>LANGUAGES WITH ONLY STATIC TYPES<br></p><p>* C: Textual substitution (more or less) of static type. (C++ and Objective-C inherit this from C.)<br></p><p>LANGUAGES WITH ONLY DYNAMIC TYPES<br></p><p>* Javascript: Dynamic type (string)<br>* R: Dynamic type (string)<br>* ActionScript: Dynamic type (string)<br>* Common Lisp: Dynamic type<br></p><p>LANGUAGES WITH BOTH<br></p><p>* D: Textual substitution (more or less) of static type, like C<br>* Crystal: Static type<br>* C#: N/A; used only with type names, in a similar role to `self` in Swift 2&#39;s `SomeType.self`<br></p><p>* Go: Dynamic type<br>* Visual Basic: Dynamic type<br>* GNU Pascal: Dynamic type<br></p><p>My conclusion is that, for the most part, languages use `typeof` in one of two ways:<br></p><p>	1) It is part of their type grammar, where it represents a static type.<br></p><p>	2) It is part of their expression grammar, where it represents a dynamic type.<br></p><p>(In Crystal, `typeof` is part of both grammars, and always represents a static type. C# uses it in a weird, idiosyncratic way.)<br></p><p>If Swift were to support category 1, it would almost certainly be considered &quot;compiler magic&quot; and thus be spelled `#typeof`. So I don&#39;t think there&#39;s much ambiguity in what `typeof(_:)` would mean in Swift.<br></p><p>Given that using it to mean &quot;dynamic type&quot; is highly precedented in other languages, and given that it is much shorter than `dynamicType` and matches an existing pattern in the standard library, I believe we should use the name `typeof` instead of `dynamicType`.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Let&#39;s get rid of this compromised weirdness.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. We&#39;ve been clearing out these kinds of cobwebs a lot lately.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Most languages where I&#39;ve used this kind of thing use `class` to return the dynamic type, but this isn&#39;t a sensible option in Swift, which has richly-typed instances which aren&#39;t classes.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I wouldn&#39;t quite call this review &quot;in-depth&quot;, but I put maybe an hour of work into it.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 25, 2016 at 11:00:00am</p></header><div class="content"><p>on Tue May 24 2016, Chris Lattner &lt;clattner-AT-apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0096: Converting dynamicType from a property to an operator&quot; begins now and runs through May 30. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br></p><p>I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>library today.  <br></p><p>  $ swift<br>  Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>    1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>    2&gt; dynamicType_(42)<br>  $R0: Int.Type = Int<br>    3&gt; class B {}<br>    4. class C : B {}<br>    5. dynamicType_(C() as B)<br>  $R1: B.Type = __lldb_expr_5.C<br>    6&gt;<br></p><p>IMO exposing it as a special language feature is a mistake unless<br>there&#39;s something wrong with the implementation above.  There are many<br>ways we can implement the body of the generic function and still remove<br>the .dynamicType property from the language&#39;s user model.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 25, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 25, 2016, at 12:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>&gt; library today.  <br>&gt; <br>&gt;  $ swift<br>&gt;  Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>&gt;    1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>&gt;    2&gt; dynamicType_(42)<br>&gt;  $R0: Int.Type = Int<br>&gt;    3&gt; class B {}<br>&gt;    4. class C : B {}<br>&gt;    5. dynamicType_(C() as B)<br>&gt;  $R1: B.Type = __lldb_expr_5.C<br>&gt;    6&gt;<br>&gt; <br>&gt; IMO exposing it as a special language feature is a mistake unless<br>&gt; there&#39;s something wrong with the implementation above.  There are many<br>&gt; ways we can implement the body of the generic function and still remove<br>&gt; the .dynamicType property from the language&#39;s user model.<br></p><p><br>I&#39;m going to defer to Joe Groff to respond specifically to this. I believe the<br>issue was that the type signature could not be described in today&#39;s Swift<br>but would be possible in future Swift, as the current type system wouldn&#39;t<br>work for protocol metatypes.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 25, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 25, 2016, at 11:42 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 25, 2016, at 12:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>&gt;&gt; library today.  <br>&gt;&gt; <br>&gt;&gt; $ swift<br>&gt;&gt; Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>&gt;&gt;   1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>&gt;&gt;   2&gt; dynamicType_(42)<br>&gt;&gt; $R0: Int.Type = Int<br>&gt;&gt;   3&gt; class B {}<br>&gt;&gt;   4. class C : B {}<br>&gt;&gt;   5. dynamicType_(C() as B)<br>&gt;&gt; $R1: B.Type = __lldb_expr_5.C<br>&gt;&gt;   6&gt;<br></p><p>Now try it with a protocol type, or Any:<br></p><p>(swift) var x: Any = 1738<br>// x : Any = 1738<br>(swift) dynamicType_(x)<br>// r0 : Any.Protocol = protocol&lt;&gt;<br></p><p>`dynamicType` is really two operations: For normal concrete types, it produces concrete metatypes, and for existentials, it produces existential metatypes. There&#39;s no way to express the latter for an arbitrary unknown protocol type in the language today.<br></p><p>-Joe<br></p><p><br>&gt;&gt; IMO exposing it as a special language feature is a mistake unless<br>&gt;&gt; there&#39;s something wrong with the implementation above.  There are many<br>&gt;&gt; ways we can implement the body of the generic function and still remove<br>&gt;&gt; the .dynamicType property from the language&#39;s user model.<br>&gt; <br>&gt; <br>&gt; I&#39;m going to defer to Joe Groff to respond specifically to this. I believe the<br>&gt; issue was that the type signature could not be described in today&#39;s Swift<br>&gt; but would be possible in future Swift, as the current type system wouldn&#39;t<br>&gt; work for protocol metatypes.<br>&gt; <br>&gt; -- E<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 25, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed May 25 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On May 25, 2016, at 11:42 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 12:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>&gt;<br>&gt;&gt;&gt; library today.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; $ swift<br>&gt;&gt;&gt; Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>&gt;&gt;&gt;   1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>&gt;&gt;&gt;   2&gt; dynamicType_(42)<br>&gt;&gt;&gt; $R0: Int.Type = Int<br>&gt;&gt;&gt;   3&gt; class B {}<br>&gt;&gt;&gt;   4. class C : B {}<br>&gt;&gt;&gt;   5. dynamicType_(C() as B)<br>&gt;&gt;&gt; $R1: B.Type = __lldb_expr_5.C<br>&gt;&gt;&gt;   6&gt;<br>&gt;<br>&gt; Now try it with a protocol type, or Any:<br>&gt;<br>&gt; (swift) var x: Any = 1738<br>&gt; // x : Any = 1738<br>&gt; (swift) dynamicType_(x)<br>&gt; // r0 : Any.Protocol = protocol&lt;&gt;<br>&gt;<br>&gt; `dynamicType` is really two operations: For normal concrete types, it<br>&gt; produces concrete metatypes, and for existentials, it produces<br>&gt; existential metatypes. There&#39;s no way to express the latter for an<br>&gt; arbitrary unknown protocol type in the language today.<br></p><p>Can&#39;t we detect in the runtime library that we&#39;ve got an existential and<br>do the right thing?<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 25, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 25, 2016, at 12:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed May 25 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 11:42 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 12:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; library today.  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; $ swift<br>&gt;&gt;&gt;&gt; Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>&gt;&gt;&gt;&gt;  1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>&gt;&gt;&gt;&gt;  2&gt; dynamicType_(42)<br>&gt;&gt;&gt;&gt; $R0: Int.Type = Int<br>&gt;&gt;&gt;&gt;  3&gt; class B {}<br>&gt;&gt;&gt;&gt;  4. class C : B {}<br>&gt;&gt;&gt;&gt;  5. dynamicType_(C() as B)<br>&gt;&gt;&gt;&gt; $R1: B.Type = __lldb_expr_5.C<br>&gt;&gt;&gt;&gt;  6&gt;<br>&gt;&gt; <br>&gt;&gt; Now try it with a protocol type, or Any:<br>&gt;&gt; <br>&gt;&gt; (swift) var x: Any = 1738<br>&gt;&gt; // x : Any = 1738<br>&gt;&gt; (swift) dynamicType_(x)<br>&gt;&gt; // r0 : Any.Protocol = protocol&lt;&gt;<br>&gt;&gt; <br>&gt;&gt; `dynamicType` is really two operations: For normal concrete types, it<br>&gt;&gt; produces concrete metatypes, and for existentials, it produces<br>&gt;&gt; existential metatypes. There&#39;s no way to express the latter for an<br>&gt;&gt; arbitrary unknown protocol type in the language today.<br>&gt; <br>&gt; Can&#39;t we detect in the runtime library that we&#39;ve got an existential and<br>&gt; do the right thing?<br></p><p>Not within the constraints of the type system. P.Protocol and P.Type are different types, and the former isn&#39;t a model of the latter (since P has no methods of its own so can&#39;t satisfy P&#39;s static requirements).<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 25, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed May 25 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On May 25, 2016, at 12:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed May 25 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On May 25, 2016, at 11:42 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 12:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; library today.  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; $ swift<br>&gt;&gt;&gt;&gt;&gt; Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>&gt;&gt;&gt;&gt;&gt;  1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>&gt;&gt;&gt;&gt;&gt;  2&gt; dynamicType_(42)<br>&gt;&gt;&gt;&gt;&gt; $R0: Int.Type = Int<br>&gt;&gt;&gt;&gt;&gt;  3&gt; class B {}<br>&gt;&gt;&gt;&gt;&gt;  4. class C : B {}<br>&gt;&gt;&gt;&gt;&gt;  5. dynamicType_(C() as B)<br>&gt;&gt;&gt;&gt;&gt; $R1: B.Type = __lldb_expr_5.C<br>&gt;&gt;&gt;&gt;&gt;  6&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Now try it with a protocol type, or Any:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (swift) var x: Any = 1738<br>&gt;&gt;&gt; // x : Any = 1738<br>&gt;&gt;&gt; (swift) dynamicType_(x)<br>&gt;&gt;&gt; // r0 : Any.Protocol = protocol&lt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `dynamicType` is really two operations: For normal concrete types, it<br>&gt;&gt;&gt; produces concrete metatypes, and for existentials, it produces<br>&gt;&gt;&gt; existential metatypes. There&#39;s no way to express the latter for an<br>&gt;&gt;&gt; arbitrary unknown protocol type in the language today.<br>&gt;&gt; <br>&gt;&gt; Can&#39;t we detect in the runtime library that we&#39;ve got an existential and<br>&gt;&gt; do the right thing?<br>&gt;<br>&gt; Not within the constraints of the type system. P.Protocol and P.Type<br>&gt; are different types, and the former isn&#39;t a model of the latter (since<br>&gt; P has no methods of its own so can&#39;t satisfy P&#39;s static requirements).<br></p><p>I mean at runtime, in C++ code.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 25, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 25, 2016, at 12:58 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed May 25 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 12:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed May 25 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 11:42 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 12:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t understand why the proposal says we can&#39;t implement this in the<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; library today.  <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; $ swift<br>&gt;&gt;&gt;&gt;&gt;&gt; Welcome to Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.30). Type :help for assistance.<br>&gt;&gt;&gt;&gt;&gt;&gt; 1&gt; func dynamicType_&lt;T&gt;(_ x: T) -&gt; T.Type { return x.dynamicType }<br>&gt;&gt;&gt;&gt;&gt;&gt; 2&gt; dynamicType_(42)<br>&gt;&gt;&gt;&gt;&gt;&gt; $R0: Int.Type = Int<br>&gt;&gt;&gt;&gt;&gt;&gt; 3&gt; class B {}<br>&gt;&gt;&gt;&gt;&gt;&gt; 4. class C : B {}<br>&gt;&gt;&gt;&gt;&gt;&gt; 5. dynamicType_(C() as B)<br>&gt;&gt;&gt;&gt;&gt;&gt; $R1: B.Type = __lldb_expr_5.C<br>&gt;&gt;&gt;&gt;&gt;&gt; 6&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Now try it with a protocol type, or Any:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (swift) var x: Any = 1738<br>&gt;&gt;&gt;&gt; // x : Any = 1738<br>&gt;&gt;&gt;&gt; (swift) dynamicType_(x)<br>&gt;&gt;&gt;&gt; // r0 : Any.Protocol = protocol&lt;&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; `dynamicType` is really two operations: For normal concrete types, it<br>&gt;&gt;&gt;&gt; produces concrete metatypes, and for existentials, it produces<br>&gt;&gt;&gt;&gt; existential metatypes. There&#39;s no way to express the latter for an<br>&gt;&gt;&gt;&gt; arbitrary unknown protocol type in the language today.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can&#39;t we detect in the runtime library that we&#39;ve got an existential and<br>&gt;&gt;&gt; do the right thing?<br>&gt;&gt; <br>&gt;&gt; Not within the constraints of the type system. P.Protocol and P.Type<br>&gt;&gt; are different types, and the former isn&#39;t a model of the latter (since<br>&gt;&gt; P has no methods of its own so can&#39;t satisfy P&#39;s static requirements).<br>&gt; <br>&gt; I mean at runtime, in C++ code.<br></p><p>When you substitute &#39;T = P&#39; into &#39;T.Type&#39;, which specifies a concrete metatype, you get &#39;P.Protocol&#39;. We can&#39;t return P.Type without breaking the type of the function.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May 25, 2016 at 09:00:00pm</p></header><div class="content"><p>Isn&#39;t `dynamictype` different from `sizeof` or `typeof` in that it does evaluate it&#39;s argument?<br></p><p>I think it&#39;s safe to write `typeof(system(&quot;rm -rf *&quot;))` *, because `typeof` will return the static type of the expression, without evaluating it. `sizeof(44*x)` will not perform a multiplication, but will only consider the type of `44*x`, which is known at compile time (at least we know (because we need to know) how much space is reserved on the stack for that variable.)<br></p><p>dynamictype(expr) would be the first such keyword that does evaluate it&#39;s expression. Maybe that&#39;s the reason why the original developer designed it to look like a method?<br></p><p>-Michael<br></p><p>*) all code snippets are supplied without any warranty of any kind. code may clean your hard drive ;)<br></p><p>&gt; Am 24.05.2016 um 20:17 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0096: Converting dynamicType from a property to an operator&quot; begins now and runs through May 30. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 25, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Isn&#39;t `dynamictype` different from `sizeof` or `typeof` in that it does evaluate it&#39;s argument?<br></p><p>`sizeofValue(_:)` in Swift also evaluates its argument.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
