<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p><br>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 26, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br></p><p>The problem with removing things that are implicit is that it&#39;s really hard to know when you&#39;re depending on them. :^) Is there a feature flag or branch we can turn on to disable them, or some way we can discover where code depends on implicit conversions? Without that, it&#39;s really hard to assess the effects of this proposal.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 2:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br>&gt; <br>&gt; The problem with removing things that are implicit is that it&#39;s really hard to know when you&#39;re depending on them. :^) Is there a feature flag or branch we can turn on to disable them, or some way we can discover where code depends on implicit conversions? Without that, it&#39;s really hard to assess the effects of this proposal.<br></p><p>Fair point.  I believe that Joe has this implemented already somewhere.  Joe, is it possible to make your branch public?<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md]<br></p><p>I’m a little concerned about the affect this has on “plist literals”. Specifically, I can no longer construct a dictionary like this:<br></p><p>let userInfo: [String: AnyObject] = [<br>	kSomeStandardKey: self.name, // a String<br>	kAnotherKey: self.childNames // an Array of Strings<br>]<br>NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br></p><p>The fix isn’t that hard—just add “as NSString” or “as NSArray”—but it is a bit of extra noise that we currently don’t have. If the type checker can still offer that fix-it, then I’m not sure we’d actually get any compiler simplification out of it…although I suppose it might make the happy path faster.<br></p><p>The CFString issue Jacob brought up is also a little unfortunate, although that’s about the direction that already requires an explicit coercion. But this probably affects calling CF functions that take CFStrings, since IIRC we don’t treat that the same as NSString at the moment, and CFArray will never have generics.<br></p><p>Of course, I’ve been out of the Cocoa community for a while now, so I don’t really have a sense of how often this comes up in practice, and how much the explicit coercion costs (psychologically). So I’m with Brent: do we have information on the changes needed for real-world projects?<br></p><p>Jordan<br></p><p><br>&gt; On Apr 26, 2016, at 13:54, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/540b2dfc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>April 30, 2016 at 12:00:00pm</p></header><div class="content"><p>On 4/29/16 21:32, Jordan Rose via swift-evolution wrote:<br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md]<br>&gt; <br>&gt; I’m a little concerned about the affect this has on “plist literals”. Specifically, I can no longer construct a dictionary like this:<br>&gt; <br>&gt; let userInfo: [String: AnyObject] = [<br>&gt; 	kSomeStandardKey: self.name, // a String<br>&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt; ]<br>&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt; <br>&gt; The fix isn’t that hard—just add “as NSString” or “as NSArray”—but it is a bit of extra noise that we currently don’t have. If the type checker can still offer that fix-it, then I’m not sure we’d actually get any compiler simplification out of it…although I suppose it might make the happy path faster.<br></p><p>Somewhat naïve question (not currently able to test this) but shouldn&#39;t<br>	`let userInfo: [String: NSObject] = [`...<br>force NSthingies for all the subsequent lines?<br></p><p>If not, might that be done?<br></p><p>&gt; The CFString issue Jacob brought up is also a little unfortunate, although that’s about the direction that already requires an explicit coercion. But this probably affects calling CF functions that take CFStrings, since IIRC we don’t treat that the same as NSString at the moment, and CFArray will never have generics.<br>&gt; <br>&gt; Of course, I’ve been out of the Cocoa community for a while now, so I don’t really have a sense of how often this comes up in practice, and how much the explicit coercion costs (psychologically). So I’m with Brent: do we have information on the changes needed for real-world projects?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 13:54, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;<br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p><br>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>April 30, 2016 at 09:00:00pm</p></header><div class="content"><p>Is this is a plist like construct, couldn’t it simply be declared as [NSString: AnyObject] ? As we are talking about removing implicit cast, forcing the user to use NSString explicitly for API that need a NSDictionary is probably not a problem ?<br></p><p><br>let userInfo: [NSString: AnyObject] = [<br>	kSomeStandardKey: self.name, // a String<br>	kAnotherKey: self.childNames // an Array of Strings<br>]<br>NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br></p><p><br>&gt; Le 30 avr. 2016 à 02:32, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md] &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md]&gt;<br>&gt; <br>&gt; I’m a little concerned about the affect this has on “plist literals”. Specifically, I can no longer construct a dictionary like this:<br>&gt; <br>&gt; let userInfo: [String: AnyObject] = [<br>&gt; 	kSomeStandardKey: self.name, // a String<br>&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt; ]<br>&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt; <br>&gt; The fix isn’t that hard—just add “as NSString” or “as NSArray”—but it is a bit of extra noise that we currently don’t have. If the type checker can still offer that fix-it, then I’m not sure we’d actually get any compiler simplification out of it…although I suppose it might make the happy path faster.<br>&gt; <br>&gt; The CFString issue Jacob brought up is also a little unfortunate, although that’s about the direction that already requires an explicit coercion. But this probably affects calling CF functions that take CFStrings, since IIRC we don’t treat that the same as NSString at the moment, and CFArray will never have generics.<br>&gt; <br>&gt; Of course, I’ve been out of the Cocoa community for a while now, so I don’t really have a sense of how often this comes up in practice, and how much the explicit coercion costs (psychologically). So I’m with Brent: do we have information on the changes needed for real-world projects?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 13:54, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160430/2fe7ee0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>It’s not the keys that are the problem; it’s the values. String and Array are not AnyObjects. Today they get an implicit conversion because they are known-bridgeable.<br></p><p>Jordan<br></p><p>&gt; On Apr 30, 2016, at 12:44, Jean-Daniel Dupas &lt;mailing at xenonium.com&gt; wrote:<br>&gt; <br>&gt; Is this is a plist like construct, couldn’t it simply be declared as [NSString: AnyObject] ? As we are talking about removing implicit cast, forcing the user to use NSString explicitly for API that need a NSDictionary is probably not a problem ?<br>&gt; <br>&gt; <br>&gt; let userInfo: [NSString: AnyObject] = [<br>&gt; 	kSomeStandardKey: self.name, // a String<br>&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt; ]<br>&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt; <br>&gt; <br>&gt;&gt; Le 30 avr. 2016 à 02:32, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md] &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md]&gt;<br>&gt;&gt; <br>&gt;&gt; I’m a little concerned about the affect this has on “plist literals”. Specifically, I can no longer construct a dictionary like this:<br>&gt;&gt; <br>&gt;&gt; let userInfo: [String: AnyObject] = [<br>&gt;&gt; 	kSomeStandardKey: self.name, // a String<br>&gt;&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt;&gt; ]<br>&gt;&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt;&gt; <br>&gt;&gt; The fix isn’t that hard—just add “as NSString” or “as NSArray”—but it is a bit of extra noise that we currently don’t have. If the type checker can still offer that fix-it, then I’m not sure we’d actually get any compiler simplification out of it…although I suppose it might make the happy path faster.<br>&gt;&gt; <br>&gt;&gt; The CFString issue Jacob brought up is also a little unfortunate, although that’s about the direction that already requires an explicit coercion. But this probably affects calling CF functions that take CFStrings, since IIRC we don’t treat that the same as NSString at the moment, and CFArray will never have generics.<br>&gt;&gt; <br>&gt;&gt; Of course, I’ve been out of the Cocoa community for a while now, so I don’t really have a sense of how often this comes up in practice, and how much the explicit coercion costs (psychologically). So I’m with Brent: do we have information on the changes needed for real-world projects?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 26, 2016, at 13:54, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/c80a8ba5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/64e7c3f106cb83b50891f5dcccde198b?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Joe Pamer</string> &lt;jpamer at apple.com&gt;<p>May  5, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 9:09 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; It’s not the keys that are the problem; it’s the values. String and Array are not AnyObjects. Today they get an implicit conversion because they are known-bridgeable.<br></p><p>Hey Jordan,<br></p><p>I share your concern, though I’ve spent my day combing through whatever large codebases I could get my hands on, and I’ve encountered very few “plist literals” where removing implicit bridging conversions would be a problem.<br></p><p>Specifically, quickly analyzing 710 swift code bases (a sampling of GitHub projects, plus others I have access to), I encountered 1785 Dictionary values with an AnyObject key. Of those, only 15 appear to make use of implicit bridging conversions when initializing or assigning to the value.<br></p><p>Since the impact appears to be relatively limited, I think the consistency we’ll gain from this change will make it worthwhile.<br></p><p>Thanks,<br>- Joe<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Apr 30, 2016, at 12:44, Jean-Daniel Dupas &lt;mailing at xenonium.com &lt;mailto:mailing at xenonium.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is this is a plist like construct, couldn’t it simply be declared as [NSString: AnyObject] ? As we are talking about removing implicit cast, forcing the user to use NSString explicitly for API that need a NSDictionary is probably not a problem ?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; let userInfo: [NSString: AnyObject] = [<br>&gt;&gt; 	kSomeStandardKey: self.name, // a String<br>&gt;&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt;&gt; ]<br>&gt;&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Le 30 avr. 2016 à 02:32, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md] &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md]&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m a little concerned about the affect this has on “plist literals”. Specifically, I can no longer construct a dictionary like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let userInfo: [String: AnyObject] = [<br>&gt;&gt;&gt; 	kSomeStandardKey: self.name, // a String<br>&gt;&gt;&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt;&gt;&gt; ]<br>&gt;&gt;&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The fix isn’t that hard—just add “as NSString” or “as NSArray”—but it is a bit of extra noise that we currently don’t have. If the type checker can still offer that fix-it, then I’m not sure we’d actually get any compiler simplification out of it…although I suppose it might make the happy path faster.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The CFString issue Jacob brought up is also a little unfortunate, although that’s about the direction that already requires an explicit coercion. But this probably affects calling CF functions that take CFStrings, since IIRC we don’t treat that the same as NSString at the moment, and CFArray will never have generics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Of course, I’ve been out of the Cocoa community for a while now, so I don’t really have a sense of how often this comes up in practice, and how much the explicit coercion costs (psychologically). So I’m with Brent: do we have information on the changes needed for real-world projects?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 26, 2016, at 13:54, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/265cfff7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  5, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 5, 2016, at 16:32, Joe Pamer &lt;jpamer at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 2, 2016, at 9:09 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It’s not the keys that are the problem; it’s the values. String and Array are not AnyObjects. Today they get an implicit conversion because they are known-bridgeable.<br>&gt; <br>&gt; Hey Jordan,<br>&gt; <br>&gt; I share your concern, though I’ve spent my day combing through whatever large codebases I could get my hands on, and I’ve encountered very few “plist literals” where removing implicit bridging conversions would be a problem.<br>&gt; <br>&gt; Specifically, quickly analyzing 710 swift code bases (a sampling of GitHub projects, plus others I have access to), I encountered 1785 Dictionary values with an AnyObject key. Of those, only 15 appear to make use of implicit bridging conversions when initializing or assigning to the value.<br>&gt; <br>&gt; Since the impact appears to be relatively limited, I think the consistency we’ll gain from this change will make it worthwhile.<br></p><p>Good to know. If it’s relatively rare (both in how much it comes up and how much that code is written) then the few extra explicit coercions won’t be an undue burden. Thanks for looking into this, Joe!<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/6e19a8e7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/64e7c3f106cb83b50891f5dcccde198b?s=50"></div><header><strong>[Review] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Joe Pamer</string> &lt;jpamer at apple.com&gt;<p>May  4, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 29, 2016, at 5:32 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md] &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md]&gt;<br>&gt; <br>&gt; I’m a little concerned about the affect this has on “plist literals”. Specifically, I can no longer construct a dictionary like this:<br>&gt; <br>&gt; let userInfo: [String: AnyObject] = [<br>&gt; 	kSomeStandardKey: self.name, // a String<br>&gt; 	kAnotherKey: self.childNames // an Array of Strings<br>&gt; ]<br>&gt; NSNotificationCenter.default().postNotificationName(MyNotification, self, userInfo)<br>&gt; <br>&gt; The fix isn’t that hard—just add “as NSString” or “as NSArray”—but it is a bit of extra noise that we currently don’t have. If the type checker can still offer that fix-it, then I’m not sure we’d actually get any compiler simplification out of it…although I suppose it might make the happy path faster.<br>&gt; <br>&gt; The CFString issue Jacob brought up is also a little unfortunate, although that’s about the direction that already requires an explicit coercion. But this probably affects calling CF functions that take CFStrings, since IIRC we don’t treat that the same as NSString at the moment, and CFArray will never have generics.<br>&gt; <br>&gt; Of course, I’ve been out of the Cocoa community for a while now, so I don’t really have a sense of how often this comes up in practice, and how much the explicit coercion costs (psychologically). So I’m with Brent: do we have information on the changes needed for real-world projects?<br></p><p>As part of the initial RFC, I pushed the inhibit-implicit-conversions branch, which folks should feel free to experiment with on their own codebases. In the meantime, I’m gathering some data on the outward-facing impact of these changes.<br></p><p>Thanks,<br>- Joe<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 13:54, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0072: Fully eliminate implicit bridging conversions from Swift&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/1357ef35/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
