<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>ARC // Precise Lifetime Semantics</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January  5, 2016 at 04:00:00pm</p></header><div class="content"><p>How do I extend the lifetime of a variable, i.e. make sure that ARC is less aggressive?<br></p><p>clang has an attribute called objc_precise_lifetime — does Swift have something similar?<br></p><p><br>I have this code:<br></p><p>  do {<br>    var base = UnsafePointer&lt;Void&gt;()<br>    var size = Int()<br>    let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br>    let buffer = UnsafeBufferPointer&lt;A&gt;(start: UnsafePointer&lt;A&gt;(base), count: size / sizeof(A))<br>    return someFunction(buffer)<br>  }<br></p><p>I need the ‘mapped’ variable to stay in scope (i.e. not be released) until the end of the scope, but ARC is free to release it immediately — in fact the compiler warns me that the immutable value is never used.<br></p><p>But the API contract with dispatch_data_create_map(3) is that the values in ‘base’ and ‘size’ are only valid as long as ‘mapped’ is around. The above code is passing a buffer into ‘someFunction’ that’s no longer valid.<br></p><p>How do I fix this?<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/953c32c8bab2eb596eb26b0804e3b782?s=50"></div><header><strong>ARC // Precise Lifetime Semantics</strong> from <string>Kristof Liliom</string> &lt;macandor.nullbit at gmail.com&gt;<p>January  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I&#39;m not a pro on Swift, but I would try to use the Unmanaged wrapper struct.<br></p><p>Sample (might not be correct, didn&#39;t try)<br></p><p>// Using Unmanaged<br>func dummyfunc(backingData: dispatch_data_t) {<br>    var base = UnsafePointer&lt;Void&gt;()<br>    var size = Int()<br>    let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br></p><p>    // New code<br>    let unmanaged = Unmanaged.passUnretained(mapped)<br>    defer { unmanaged.release() }<br></p><p>    let buffer = UnsafeBufferPointer&lt;Void&gt;(start: UnsafePointer&lt;Void&gt;(base), count: size / sizeof(Void))<br>    return someFunction(buffer)<br>}<br></p><p>Best Regards,<br>Chris<br></p><p>&gt; On 05 Jan 2016, at 16:57, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; How do I extend the lifetime of a variable, i.e. make sure that ARC is less aggressive?<br>&gt; <br>&gt; clang has an attribute called objc_precise_lifetime — does Swift have something similar?<br>&gt; <br>&gt; <br>&gt; I have this code:<br>&gt; <br>&gt;  do {<br>&gt;    var base = UnsafePointer&lt;Void&gt;()<br>&gt;    var size = Int()<br>&gt;    let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br>&gt;    let buffer = UnsafeBufferPointer&lt;A&gt;(start: UnsafePointer&lt;A&gt;(base), count: size / sizeof(A))<br>&gt;    return someFunction(buffer)<br>&gt;  }<br>&gt; <br>&gt; I need the ‘mapped’ variable to stay in scope (i.e. not be released) until the end of the scope, but ARC is free to release it immediately — in fact the compiler warns me that the immutable value is never used.<br>&gt; <br>&gt; But the API contract with dispatch_data_create_map(3) is that the values in ‘base’ and ‘size’ are only valid as long as ‘mapped’ is around. The above code is passing a buffer into ‘someFunction’ that’s no longer valid.<br>&gt; <br>&gt; How do I fix this?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>ARC // Precise Lifetime Semantics</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  5, 2016 at 11:00:00am</p></header><div class="content"><p>This is what withExtendedLifetime is for:<br>https://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_StandardLibrary_Functions/index.html#//apple_ref/swift/func/s:FSs20withExtendedLifetimeu0_rFzTq_Fzq_q0__q0_<br></p><p>On Tue, Jan 5, 2016 at 9:57 AM, Kristof Liliom via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; I&#39;m not a pro on Swift, but I would try to use the Unmanaged wrapper<br>&gt; struct.<br>&gt;<br>&gt; Sample (might not be correct, didn&#39;t try)<br>&gt;<br>&gt; // Using Unmanaged<br>&gt; func dummyfunc(backingData: dispatch_data_t) {<br>&gt;     var base = UnsafePointer&lt;Void&gt;()<br>&gt;     var size = Int()<br>&gt;     let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br>&gt;<br>&gt;     // New code<br>&gt;     let unmanaged = Unmanaged.passUnretained(mapped)<br>&gt;     defer { unmanaged.release() }<br>&gt;<br>&gt;     let buffer = UnsafeBufferPointer&lt;Void&gt;(start:<br>&gt; UnsafePointer&lt;Void&gt;(base), count: size / sizeof(Void))<br>&gt;     return someFunction(buffer)<br>&gt; }<br>&gt;<br>&gt; Best Regards,<br>&gt; Chris<br>&gt;<br>&gt; &gt; On 05 Jan 2016, at 16:57, Daniel Eggert via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; How do I extend the lifetime of a variable, i.e. make sure that ARC is<br>&gt; less aggressive?<br>&gt; &gt;<br>&gt; &gt; clang has an attribute called objc_precise_lifetime — does Swift have<br>&gt; something similar?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I have this code:<br>&gt; &gt;<br>&gt; &gt;  do {<br>&gt; &gt;    var base = UnsafePointer&lt;Void&gt;()<br>&gt; &gt;    var size = Int()<br>&gt; &gt;    let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br>&gt; &gt;    let buffer = UnsafeBufferPointer&lt;A&gt;(start: UnsafePointer&lt;A&gt;(base),<br>&gt; count: size / sizeof(A))<br>&gt; &gt;    return someFunction(buffer)<br>&gt; &gt;  }<br>&gt; &gt;<br>&gt; &gt; I need the ‘mapped’ variable to stay in scope (i.e. not be released)<br>&gt; until the end of the scope, but ARC is free to release it immediately — in<br>&gt; fact the compiler warns me that the immutable value is never used.<br>&gt; &gt;<br>&gt; &gt; But the API contract with dispatch_data_create_map(3) is that the values<br>&gt; in ‘base’ and ‘size’ are only valid as long as ‘mapped’ is around. The<br>&gt; above code is passing a buffer into ‘someFunction’ that’s no longer valid.<br>&gt; &gt;<br>&gt; &gt; How do I fix this?<br>&gt; &gt;<br>&gt; &gt; /Daniel<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160105/2b68588e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>ARC // Precise Lifetime Semantics</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks! That’s a very elegant solution.<br></p><p>/Daniel<br></p><p><br>&gt; On 05 Jan 2016, at 20:48, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; This is what withExtendedLifetime is for: https://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_StandardLibrary_Functions/index.html#//apple_ref/swift/func/s:FSs20withExtendedLifetimeu0_rFzTq_Fzq_q0__q0_<br>&gt; <br>&gt; On Tue, Jan 5, 2016 at 9:57 AM, Kristof Liliom via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; Hi,<br>&gt; <br>&gt; I&#39;m not a pro on Swift, but I would try to use the Unmanaged wrapper struct.<br>&gt; <br>&gt; Sample (might not be correct, didn&#39;t try)<br>&gt; <br>&gt; // Using Unmanaged<br>&gt; func dummyfunc(backingData: dispatch_data_t) {<br>&gt;     var base = UnsafePointer&lt;Void&gt;()<br>&gt;     var size = Int()<br>&gt;     let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br>&gt; <br>&gt;     // New code<br>&gt;     let unmanaged = Unmanaged.passUnretained(mapped)<br>&gt;     defer { unmanaged.release() }<br>&gt; <br>&gt;     let buffer = UnsafeBufferPointer&lt;Void&gt;(start: UnsafePointer&lt;Void&gt;(base), count: size / sizeof(Void))<br>&gt;     return someFunction(buffer)<br>&gt; }<br>&gt; <br>&gt; Best Regards,<br>&gt; Chris<br>&gt; <br>&gt; &gt; On 05 Jan 2016, at 16:57, Daniel Eggert via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; How do I extend the lifetime of a variable, i.e. make sure that ARC is less aggressive?<br>&gt; &gt;<br>&gt; &gt; clang has an attribute called objc_precise_lifetime — does Swift have something similar?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I have this code:<br>&gt; &gt;<br>&gt; &gt;  do {<br>&gt; &gt;    var base = UnsafePointer&lt;Void&gt;()<br>&gt; &gt;    var size = Int()<br>&gt; &gt;    let mapped = dispatch_data_create_map(backingData, &amp;base, &amp;size)<br>&gt; &gt;    let buffer = UnsafeBufferPointer&lt;A&gt;(start: UnsafePointer&lt;A&gt;(base), count: size / sizeof(A))<br>&gt; &gt;    return someFunction(buffer)<br>&gt; &gt;  }<br>&gt; &gt;<br>&gt; &gt; I need the ‘mapped’ variable to stay in scope (i.e. not be released) until the end of the scope, but ARC is free to release it immediately — in fact the compiler warns me that the immutable value is never used.<br>&gt; &gt;<br>&gt; &gt; But the API contract with dispatch_data_create_map(3) is that the values in ‘base’ and ‘size’ are only valid as long as ‘mapped’ is around. The above code is passing a buffer into ‘someFunction’ that’s no longer valid.<br>&gt; &gt;<br>&gt; &gt; How do I fix this?<br>&gt; &gt;<br>&gt; &gt; /Daniel<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
