<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/537cdf5303cfb8f536e251c89042cbfd?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>Saleem Abdulrasool</string> &lt;compnerd at compnerd.org&gt;<p>July  3, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello again,<br></p><p>I come bearing more problems :-).<br></p><p>I seem to have found another point in the ABI which prevents an easy port<br>of swift to Windows without an emulation layer underneath.  This time it<br>deals with the protocol conformance table.  The table is constructed with a<br>direct reference to protocol.  However, because the protocol lies in an<br>external module, this ends up being a problem as it must be indirectly<br>addressed.<br></p><p>There is a workaround in place for generating a GOT equivalent entry,<br>however, that still doesnt indirect through the pointer, which needs to be<br>done to address the executable model on Windows.<br></p><p>This along with the DLL storage changes (<br>https://github.com/apple/swift/pull/2080) are the currently two known ABI<br>issues preventing the port to windows (with cross-compiling!).  Im hopeful<br>that the former can be merged soon.  If we can work out a way to address<br>this last issue, I think that it should be possible to get a complete<br>windows port of swift working (modulo API completeness) shortly thereafter<br>without the need for any emulation layer (i.e. cygwin or MinGW)!<br></p><p>-- <br>Saleem Abdulrasool<br>compnerd (at) compnerd (dot) org<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160703/2720cd96/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt; wrote:<br>&gt; Hello again,<br>&gt; <br>&gt; I come bearing more problems :-).<br>&gt; <br>&gt; I seem to have found another point in the ABI which prevents an easy port of swift to Windows without an emulation layer underneath.  This time it deals with the protocol conformance table.  The table is constructed with a direct reference to protocol.  However, because the protocol lies in an external module, this ends up being a problem as it must be indirectly addressed.<br>&gt; <br>&gt; There is a workaround in place for generating a GOT equivalent entry, however, that still doesnt indirect through the pointer, which needs to be done to address the executable model on Windows.<br></p><p>Is it not possible to emit the GOT equivalent entry as a reference to the appropriate entry in the import lookup table?<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/537cdf5303cfb8f536e251c89042cbfd?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>Saleem Abdulrasool</string> &lt;compnerd at compnerd.org&gt;<p>July  5, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, Jul 5, 2016 at 10:30 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p>&gt; &gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt; wrote:<br>&gt; &gt; Hello again,<br>&gt; &gt;<br>&gt; &gt; I come bearing more problems :-).<br>&gt; &gt;<br>&gt; &gt; I seem to have found another point in the ABI which prevents an easy<br>&gt; port of swift to Windows without an emulation layer underneath.  This time<br>&gt; it deals with the protocol conformance table.  The table is constructed<br>&gt; with a direct reference to protocol.  However, because the protocol lies in<br>&gt; an external module, this ends up being a problem as it must be indirectly<br>&gt; addressed.<br>&gt; &gt;<br>&gt; &gt; There is a workaround in place for generating a GOT equivalent entry,<br>&gt; however, that still doesnt indirect through the pointer, which needs to be<br>&gt; done to address the executable model on Windows.<br>&gt;<br>&gt; Is it not possible to emit the GOT equivalent entry as a reference to the<br>&gt; appropriate entry in the import lookup table?<br></p><p><br>I had tried that, but it would still just be a constant reference to the<br>value rather than the synthetic.  Perhaps I am misunderstanding something?<br></p><p><br>&gt;<br>&gt; John.<br></p><p><br>-- <br>Saleem Abdulrasool<br>compnerd (at) compnerd (dot) org<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160705/0434e62c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July  5, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 5:56 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt; wrote:<br>&gt; On Tue, Jul 5, 2016 at 10:30 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt; &gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org &lt;mailto:compnerd at compnerd.org&gt;&gt; wrote:<br>&gt; &gt; Hello again,<br>&gt; &gt;<br>&gt; &gt; I come bearing more problems :-).<br>&gt; &gt;<br>&gt; &gt; I seem to have found another point in the ABI which prevents an easy port of swift to Windows without an emulation layer underneath.  This time it deals with the protocol conformance table.  The table is constructed with a direct reference to protocol.  However, because the protocol lies in an external module, this ends up being a problem as it must be indirectly addressed.<br>&gt; &gt;<br>&gt; &gt; There is a workaround in place for generating a GOT equivalent entry, however, that still doesnt indirect through the pointer, which needs to be done to address the executable model on Windows.<br>&gt; <br>&gt; Is it not possible to emit the GOT equivalent entry as a reference to the appropriate entry in the import lookup table?<br>&gt; <br>&gt; I had tried that, but it would still just be a constant reference to the value rather than the synthetic.  Perhaps I am misunderstanding something?<br></p><p>I don&#39;t know what you mean.  I assume this is the reference to the protocol structure from the global protocol-conformances list.  This reference is a relative offset, either directly to the protocol structure or indirectly to a global containing a pointer to an external protocol structure.  PE&#39;s import lookup table is an array of pointers to external objects.<br></p><p>I could easily believe that COFF doesn&#39;t allow us to express a relative offset to an entry in the import lookup table.  However, it sounds like you think this needs to be *doubly* indirected, i.e. the conformance list needs to be a relative offset to a variable containing a pointer to a variable containing a pointer to the import lookup table.  I&#39;m not sure why that would be.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160705/76707515/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/537cdf5303cfb8f536e251c89042cbfd?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>Saleem Abdulrasool</string> &lt;compnerd at compnerd.org&gt;<p>July  6, 2016 at 07:00:00am</p></header><div class="content"><p>On Tue, Jul 5, 2016 at 6:28 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p>&gt; On Jul 5, 2016, at 5:56 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt; wrote:<br>&gt; On Tue, Jul 5, 2016 at 10:30 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt; Hello again,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I come bearing more problems :-).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I seem to have found another point in the ABI which prevents an easy<br>&gt;&gt; port of swift to Windows without an emulation layer underneath.  This time<br>&gt;&gt; it deals with the protocol conformance table.  The table is constructed<br>&gt;&gt; with a direct reference to protocol.  However, because the protocol lies in<br>&gt;&gt; an external module, this ends up being a problem as it must be indirectly<br>&gt;&gt; addressed.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; There is a workaround in place for generating a GOT equivalent entry,<br>&gt;&gt; however, that still doesnt indirect through the pointer, which needs to be<br>&gt;&gt; done to address the executable model on Windows.<br>&gt;&gt;<br>&gt;&gt; Is it not possible to emit the GOT equivalent entry as a reference to the<br>&gt;&gt; appropriate entry in the import lookup table?<br>&gt;<br>&gt;<br>&gt; I had tried that, but it would still just be a constant reference to the<br>&gt; value rather than the synthetic.  Perhaps I am misunderstanding something?<br>&gt;<br>&gt;<br>&gt; I don&#39;t know what you mean.  I assume this is the reference to the<br>&gt; protocol structure from the global protocol-conformances list.  This<br>&gt; reference is a relative offset, either directly to the protocol structure<br>&gt; or indirectly to a global containing a pointer to an external protocol<br>&gt; structure.  PE&#39;s import lookup table is an array of pointers to external<br>&gt; objects.<br>&gt;<br></p><p>Exactly, in the case that identified the issue, it is _TMps12OutputStream<br></p><p><br>&gt; I could easily believe that COFF doesn&#39;t allow us to express a relative<br>&gt; offset to an entry in the import lookup table.<br>&gt;<br></p><p>I don&#39;t think that there is any way to represent that in IR, and I don&#39;t<br>know if COFF allows us to encode such a thing.  I will see if I can<br>construct an object file/library and see if we can get away with that.<br></p><p><br>&gt;  However, it sounds like you think this needs to be *doubly* indirected,<br>&gt; i.e. the conformance list needs to be a relative offset to a variable<br>&gt; containing a pointer to a variable containing a pointer to the import<br>&gt; lookup table.  I&#39;m not sure why that would be.<br>&gt;<br>John.<br>&gt;<br></p><p><br></p><p>-- <br>Saleem Abdulrasool<br>compnerd (at) compnerd (dot) org<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160706/067b8e45/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July  6, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 6, 2016, at 7:33 AM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt; wrote:<br>&gt; On Tue, Jul 5, 2016 at 6:28 PM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; On Jul 5, 2016, at 5:56 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org &lt;mailto:compnerd at compnerd.org&gt;&gt; wrote:<br>&gt;&gt; On Tue, Jul 5, 2016 at 10:30 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; &gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org &lt;mailto:compnerd at compnerd.org&gt;&gt; wrote:<br>&gt;&gt; &gt; Hello again,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I come bearing more problems :-).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I seem to have found another point in the ABI which prevents an easy port of swift to Windows without an emulation layer underneath.  This time it deals with the protocol conformance table.  The table is constructed with a direct reference to protocol.  However, because the protocol lies in an external module, this ends up being a problem as it must be indirectly addressed.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; There is a workaround in place for generating a GOT equivalent entry, however, that still doesnt indirect through the pointer, which needs to be done to address the executable model on Windows.<br>&gt;&gt; <br>&gt;&gt; Is it not possible to emit the GOT equivalent entry as a reference to the appropriate entry in the import lookup table?<br>&gt;&gt; <br>&gt;&gt; I had tried that, but it would still just be a constant reference to the value rather than the synthetic.  Perhaps I am misunderstanding something?<br>&gt; <br>&gt; I don&#39;t know what you mean.  I assume this is the reference to the protocol structure from the global protocol-conformances list.  This reference is a relative offset, either directly to the protocol structure or indirectly to a global containing a pointer to an external protocol structure.  PE&#39;s import lookup table is an array of pointers to external objects.<br>&gt; <br>&gt; Exactly, in the case that identified the issue, it is _TMps12OutputStream<br>&gt;  <br>&gt; I could easily believe that COFF doesn&#39;t allow us to express a relative offset to an entry in the import lookup table.<br>&gt; <br>&gt; I don&#39;t think that there is any way to represent that in IR, and I don&#39;t know if COFF allows us to encode such a thing.  I will see if I can construct an object file/library and see if we can get away with that.<br></p><p>The way to represent it in IR is using the same private unnamed_addr representation that we special-case for ELF/Mach-O.  I guess it would be a mandatory transformation for COFF.<br></p><p>But if it&#39;s not representable in COFF, that&#39;s pretty conclusive.<br></p><p>John.<br></p><p>&gt;  <br>&gt;  However, it sounds like you think this needs to be *doubly* indirected, i.e. the conformance list needs to be a relative offset to a variable containing a pointer to a variable containing a pointer to the import lookup table.  I&#39;m not sure why that would be. <br>&gt; John.<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Saleem Abdulrasool<br>&gt; compnerd (at) compnerd (dot) org<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160706/c5d94e15/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/537cdf5303cfb8f536e251c89042cbfd?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>Saleem Abdulrasool</string> &lt;compnerd at compnerd.org&gt;<p>July  9, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, Jul 6, 2016 at 9:43 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p>&gt; On Jul 6, 2016, at 7:33 AM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt; wrote:<br>&gt; On Tue, Jul 5, 2016 at 6:28 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Jul 5, 2016, at 5:56 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; On Tue, Jul 5, 2016 at 10:30 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt; Hello again,<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I come bearing more problems :-).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I seem to have found another point in the ABI which prevents an easy<br>&gt;&gt;&gt; port of swift to Windows without an emulation layer underneath.  This time<br>&gt;&gt;&gt; it deals with the protocol conformance table.  The table is constructed<br>&gt;&gt;&gt; with a direct reference to protocol.  However, because the protocol lies in<br>&gt;&gt;&gt; an external module, this ends up being a problem as it must be indirectly<br>&gt;&gt;&gt; addressed.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; There is a workaround in place for generating a GOT equivalent entry,<br>&gt;&gt;&gt; however, that still doesnt indirect through the pointer, which needs to be<br>&gt;&gt;&gt; done to address the executable model on Windows.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is it not possible to emit the GOT equivalent entry as a reference to<br>&gt;&gt;&gt; the appropriate entry in the import lookup table?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I had tried that, but it would still just be a constant reference to the<br>&gt;&gt; value rather than the synthetic.  Perhaps I am misunderstanding something?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t know what you mean.  I assume this is the reference to the<br>&gt;&gt; protocol structure from the global protocol-conformances list.  This<br>&gt;&gt; reference is a relative offset, either directly to the protocol structure<br>&gt;&gt; or indirectly to a global containing a pointer to an external protocol<br>&gt;&gt; structure.  PE&#39;s import lookup table is an array of pointers to external<br>&gt;&gt; objects.<br>&gt;&gt;<br>&gt;<br>&gt; Exactly, in the case that identified the issue, it is _TMps12OutputStream<br>&gt;<br>&gt;<br>&gt;&gt; I could easily believe that COFF doesn&#39;t allow us to express a relative<br>&gt;&gt; offset to an entry in the import lookup table.<br>&gt;&gt;<br>&gt;<br>&gt; I don&#39;t think that there is any way to represent that in IR, and I don&#39;t<br>&gt; know if COFF allows us to encode such a thing.  I will see if I can<br>&gt; construct an object file/library and see if we can get away with that.<br>&gt;<br>&gt;<br>&gt; The way to represent it in IR is using the same private unnamed_addr<br>&gt; representation that we special-case for ELF/Mach-O.  I guess it would be a<br>&gt; mandatory transformation for COFF.<br>&gt;<br>&gt; But if it&#39;s not representable in COFF, that&#39;s pretty conclusive.<br>&gt;<br></p><p>I did look into this.  It is, as I suspected, not possible to represent an<br>offset to the value in the ILT or IAT.<br></p><p><br>&gt; John.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;  However, it sounds like you think this needs to be *doubly* indirected,<br>&gt;&gt; i.e. the conformance list needs to be a relative offset to a variable<br>&gt;&gt; containing a pointer to a variable containing a pointer to the import<br>&gt;&gt; lookup table.  I&#39;m not sure why that would be.<br>&gt;&gt;<br>&gt; John.<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Saleem Abdulrasool<br>&gt; compnerd (at) compnerd (dot) org<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>Saleem Abdulrasool<br>compnerd (at) compnerd (dot) org<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160709/0f08479a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/537cdf5303cfb8f536e251c89042cbfd?s=50"></div><header><strong>COFF indirect addressing and protocol conformance tables ABI issues</strong> from <string>Saleem Abdulrasool</string> &lt;compnerd at compnerd.org&gt;<p>July 13, 2016 at 09:00:00pm</p></header><div class="content"><p>On Sat, Jul 9, 2016 at 4:07 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>wrote:<br></p><p>&gt; On Wed, Jul 6, 2016 at 9:43 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Jul 6, 2016, at 7:33 AM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; On Tue, Jul 5, 2016 at 6:28 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Jul 5, 2016, at 5:56 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; On Tue, Jul 5, 2016 at 10:30 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; On Jul 3, 2016, at 2:40 PM, Saleem Abdulrasool &lt;compnerd at compnerd.org&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; Hello again,<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I come bearing more problems :-).<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I seem to have found another point in the ABI which prevents an easy<br>&gt;&gt;&gt;&gt; port of swift to Windows without an emulation layer underneath.  This time<br>&gt;&gt;&gt;&gt; it deals with the protocol conformance table.  The table is constructed<br>&gt;&gt;&gt;&gt; with a direct reference to protocol.  However, because the protocol lies in<br>&gt;&gt;&gt;&gt; an external module, this ends up being a problem as it must be indirectly<br>&gt;&gt;&gt;&gt; addressed.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; There is a workaround in place for generating a GOT equivalent entry,<br>&gt;&gt;&gt;&gt; however, that still doesnt indirect through the pointer, which needs to be<br>&gt;&gt;&gt;&gt; done to address the executable model on Windows.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is it not possible to emit the GOT equivalent entry as a reference to<br>&gt;&gt;&gt;&gt; the appropriate entry in the import lookup table?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I had tried that, but it would still just be a constant reference to the<br>&gt;&gt;&gt; value rather than the synthetic.  Perhaps I am misunderstanding something?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t know what you mean.  I assume this is the reference to the<br>&gt;&gt;&gt; protocol structure from the global protocol-conformances list.  This<br>&gt;&gt;&gt; reference is a relative offset, either directly to the protocol structure<br>&gt;&gt;&gt; or indirectly to a global containing a pointer to an external protocol<br>&gt;&gt;&gt; structure.  PE&#39;s import lookup table is an array of pointers to external<br>&gt;&gt;&gt; objects.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Exactly, in the case that identified the issue, it is _TMps12OutputStream<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; I could easily believe that COFF doesn&#39;t allow us to express a relative<br>&gt;&gt;&gt; offset to an entry in the import lookup table.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t think that there is any way to represent that in IR, and I don&#39;t<br>&gt;&gt; know if COFF allows us to encode such a thing.  I will see if I can<br>&gt;&gt; construct an object file/library and see if we can get away with that.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The way to represent it in IR is using the same private unnamed_addr<br>&gt;&gt; representation that we special-case for ELF/Mach-O.  I guess it would be a<br>&gt;&gt; mandatory transformation for COFF.<br>&gt;&gt;<br>&gt;&gt; But if it&#39;s not representable in COFF, that&#39;s pretty conclusive.<br>&gt;&gt;<br>&gt;<br>&gt; I did look into this.  It is, as I suspected, not possible to represent an<br>&gt; offset to the value in the ILT or IAT.<br>&gt;<br>&gt;<br>This seems to be the only blocking issue for the Windows port.  There is a<br>minor build wrinkle that needs to be worked out, but everything else seems<br>to be more or less ready for enabling a Windows port.<br></p><p><br>&gt; John.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;  However, it sounds like you think this needs to be *doubly* indirected,<br>&gt;&gt;&gt; i.e. the conformance list needs to be a relative offset to a variable<br>&gt;&gt;&gt; containing a pointer to a variable containing a pointer to the import<br>&gt;&gt;&gt; lookup table.  I&#39;m not sure why that would be.<br>&gt;&gt;&gt;<br>&gt;&gt; John.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Saleem Abdulrasool<br>&gt;&gt; compnerd (at) compnerd (dot) org<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Saleem Abdulrasool<br>&gt; compnerd (at) compnerd (dot) org<br>&gt;<br></p><p><br></p><p>-- <br>Saleem Abdulrasool<br>compnerd (at) compnerd (dot) org<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160713/41e91f2f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
