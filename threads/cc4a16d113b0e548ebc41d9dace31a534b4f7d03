<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br></p><p>Just return the last evaluated expression.<br></p><p><br>i.e.<br></p><p>    func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>        (arg2, arg1)<br>    }<br></p><p><br>The keyword return would still be there for breaking out of a function.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/cc4a7d03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>+1<br></p><p>On Sat, Dec 19, 2015 at 2:30 PM, Craig Cruden via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; When writing short functional code in a function it would be nice if the<br>&gt; return keyword were an optional keyword.<br>&gt;<br>&gt; Just return the last evaluated expression.<br>&gt;<br>&gt;<br>&gt; i.e.<br>&gt;<br>&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/3d70e0b8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 19, 2015 at 03:00:00pm</p></header><div class="content"><p>This is very nice for writing lazy var definitions and single-line computed<br>properties as well. +1 from me.<br></p><p>On Sat, Dec 19, 2015, 8:30 AM Craig Cruden via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; When writing short functional code in a function it would be nice if the<br>&gt; return keyword were an optional keyword.<br>&gt;<br>&gt; Just return the last evaluated expression.<br>&gt;<br>&gt;<br>&gt; i.e.<br>&gt;<br>&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/65916bec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 19, 2015 at 10:00:00am</p></header><div class="content"><p>Not sure if I like this or not, but if we do adopt it I think it should be consistent with the rule for closures.  Following the current rule for closures, this would only apply to single expression functions.  I think I could support that.  <br></p><p><br>&gt; On Dec 19, 2015, at 9:53 AM, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is very nice for writing lazy var definitions and single-line computed properties as well. +1 from me.<br>&gt; <br>&gt; <br>&gt; On Sat, Dec 19, 2015, 8:30 AM Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt; <br>&gt; Just return the last evaluated expression.<br>&gt; <br>&gt; <br>&gt; i.e.<br>&gt; <br>&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt; <br>&gt; <br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/c6a07d9e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 19, 2015 at 06:00:00pm</p></header><div class="content"><p>Afaik the concept is quite common when &quot;everything is an expression&quot;, which can be a nice feature of a language:<br>It saves keystrokes, and allows constructs like<br>let value = switch key {…}<br>But as the let syntax was changed to work with delayed assignment, one major use case is solved in a different way, and I doubt that it fits into the Swift roadmap.  <br>Imho clarity is reduced, and it can look a little bit odd to end a function with a line like<br>value<br></p><p>On the other hand, nobody would be forced to skip the &quot;return&quot;, and I guess it wouldn&#39;t be a complicated change in the compiler… so if you want to continue working on the proposal, I would evaluate how this change could be reflected in the docs.<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5c9df42e3c293e3cdb5f3e1b34d44ef9?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Step C</string> &lt;schristopher at bignerdranch.com&gt;<p>December 19, 2015 at 02:00:00pm</p></header><div class="content"><p>There was discussion of implicit returns on the forums a while back. Will try to find the link later. The Swift team chose explicit returns for better code clarity. I still think this was the right call, even though implicit returns are certainly attractive when writing code. <br></p><p><br>&gt; On Dec 19, 2015, at 12:45 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Afaik the concept is quite common when &quot;everything is an expression&quot;, which can be a nice feature of a language:<br>&gt; It saves keystrokes, and allows constructs like<br>&gt; let value = switch key {…}<br>&gt; But as the let syntax was changed to work with delayed assignment, one major use case is solved in a different way, and I doubt that it fits into the Swift roadmap.  <br>&gt; Imho clarity is reduced, and it can look a little bit odd to end a function with a line like<br>&gt; value<br>&gt; <br>&gt; On the other hand, nobody would be forced to skip the &quot;return&quot;, and I guess it wouldn&#39;t be a complicated change in the compiler… so if you want to continue working on the proposal, I would evaluate how this change could be reflected in the docs.<br>&gt; <br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>Yes, this would be strange in multiline functions with different execution<br>paths. It works well in Ruby because function return types aren&#39;t<br>annotated, so the final expression is always a valid return value. In<br>swift, I think it would have too much design overhead to figure out how to<br>reconcile it with explicit return types, to be worth it with multiline<br>functions. However, it would be great to have implicit return in single<br>line closures with named parameters and single line functions.<br></p><p>On Sat, Dec 19, 2015, 2:28 PM Step C via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There was discussion of implicit returns on the forums a while back. Will<br>&gt; try to find the link later. The Swift team chose explicit returns for<br>&gt; better code clarity. I still think this was the right call, even though<br>&gt; implicit returns are certainly attractive when writing code.<br>&gt;<br>&gt;<br>&gt; &gt; On Dec 19, 2015, at 12:45 PM, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Afaik the concept is quite common when &quot;everything is an expression&quot;,<br>&gt; which can be a nice feature of a language:<br>&gt; &gt; It saves keystrokes, and allows constructs like<br>&gt; &gt; let value = switch key {…}<br>&gt; &gt; But as the let syntax was changed to work with delayed assignment, one<br>&gt; major use case is solved in a different way, and I doubt that it fits into<br>&gt; the Swift roadmap.<br>&gt; &gt; Imho clarity is reduced, and it can look a little bit odd to end a<br>&gt; function with a line like<br>&gt; &gt; value<br>&gt; &gt;<br>&gt; &gt; On the other hand, nobody would be forced to skip the &quot;return&quot;, and I<br>&gt; guess it wouldn&#39;t be a complicated change in the compiler… so if you want<br>&gt; to continue working on the proposal, I would evaluate how this change could<br>&gt; be reflected in the docs.<br>&gt; &gt;<br>&gt; &gt; Tino<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/9e3ec816/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5c9df42e3c293e3cdb5f3e1b34d44ef9?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Step C</string> &lt;schristopher at bignerdranch.com&gt;<p>December 19, 2015 at 04:00:00pm</p></header><div class="content"><p>The discussion I was remembering, comment courtesy of Chris:<br>https://devforums.apple.com/message/1014317#1014317<br></p><p>(linked from https://devforums.apple.com/thread/255242)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/0d245ecf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 20, 2015 at 11:00:00am</p></header><div class="content"><p>+1 for consistency with closures<br></p><p>On Sun, Dec 20, 2015 at 8:15 AM, Stephen Christopher via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The discussion I was remembering, comment courtesy of Chris:<br>&gt; https://devforums.apple.com/message/1014317#1014317<br>&gt;<br>&gt; (linked from https://devforums.apple.com/thread/255242)<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/8436c9c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>Is there a reason that any final non-void statement in a closure or function shouldn&#39;t automagically be an optional return? (And automagically warn_unused_result...?)<br></p><p>&gt; On Dec 19, 2015, at 5:44 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for consistency with closures<br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 8:15 AM, Stephen Christopher via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; The discussion I was remembering, comment courtesy of Chris: <br>&gt; https://devforums.apple.com/message/1014317#1014317 &lt;https://devforums.apple.com/message/1014317#1014317&gt;<br>&gt; <br>&gt; (linked from https://devforums.apple.com/thread/255242 &lt;https://devforums.apple.com/thread/255242&gt;)<br>&gt; <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/a66ebb5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 19, 2015 at 06:00:00pm</p></header><div class="content"><p>In this scenario, should calling a warn_unused_result function as the last<br>statement in a closure/function count as &quot;using&quot; its result (i.e.<br>implicitly returning it)?<br></p><p>Jacob<br></p><p>On Sat, Dec 19, 2015 at 4:51 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Is there a reason that any final non-void statement in a closure or<br>&gt; function shouldn&#39;t automagically be an optional return? (And automagically<br>&gt; warn_unused_result...?)<br>&gt;<br>&gt; On Dec 19, 2015, at 5:44 PM, Andrew Bennett via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1 for consistency with closures<br>&gt;<br>&gt; On Sun, Dec 20, 2015 at 8:15 AM, Stephen Christopher via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; The discussion I was remembering, comment courtesy of Chris:<br>&gt;&gt; https://devforums.apple.com/message/1014317#1014317<br>&gt;&gt;<br>&gt;&gt; (linked from https://devforums.apple.com/thread/255242)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/0925466e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>-1 for me. Closures gain a special syntax because of their use case, specifically inlining locally. Functions don’t get that.<br></p><p>&gt; On Dec 19, 2015, at 4:44 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for consistency with closures<br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 8:15 AM, Stephen Christopher via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; The discussion I was remembering, comment courtesy of Chris: <br>&gt; https://devforums.apple.com/message/1014317#1014317 &lt;https://devforums.apple.com/message/1014317#1014317&gt;<br>&gt; <br>&gt; (linked from https://devforums.apple.com/thread/255242 &lt;https://devforums.apple.com/thread/255242&gt;)<br>&gt; <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/ab92580e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 20, 2015 at 09:00:00am</p></header><div class="content"><p>I looked at the discussion and it looked like they were discussion two things combined.<br>   - inferred return type (on function signature) <br>   - and omitting return on the return.<br></p><p>I agree with Chris on the fact that the function should have the type of return specified on the signature and not inferred since it is useful for API documentation to know that ahead of time on a strongly typed language.<br></p><p>What is not necessary is actually forcing people to type return “x” on the last line - since “return” is rather redundant and clutter for those people of a functional programming paradigm point of view.<br></p><p><br>&gt; On 2015-12-20, at 4:15:15, Stephen Christopher via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The discussion I was remembering, comment courtesy of Chris: <br>&gt; https://devforums.apple.com/message/1014317#1014317 &lt;https://devforums.apple.com/message/1014317#1014317&gt;<br>&gt; <br>&gt; (linked from https://devforums.apple.com/thread/255242 &lt;https://devforums.apple.com/thread/255242&gt;)<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/6f99c73e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 20, 2015 at 03:00:00pm</p></header><div class="content"><p>-1 on inferred return type and omitting return with func<br></p><p>Both features are actually available in the language as-is, just not with<br>the func keyword:<br></p><p>let someInferredFunction = { _ in 5}  // () -&gt; Int<br></p><p>When teaching Swift we actually teach func + return keywords together, they<br>make it easy to see all possible return paths from a function.<br></p><p>And we recommend using func instead of a closure when there is a multiline<br>body with control statements. Having implicit return in that case hurts<br>readability.  For example, out of three possible return points within this<br>function only one is not marked with return:<br></p><p>func f(input: Int) -&gt; Int {<br>    if input &gt; 10 {<br>        return 10<br>    }<br>    if input &lt; 0 {<br>        return 0<br>    }<br>    input<br>}<br></p><p><br>+1 on omitting return from var {} declaration, those methods look like<br>closures and will often be one-liners.<br></p><p><br>On Sun, Dec 20, 2015 at 5:29 AM, Craig Cruden via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I looked at the discussion and it looked like they were discussion two<br>&gt; things combined.<br>&gt;    - inferred return type (on function signature)<br>&gt;    - and omitting return on the return.<br>&gt;<br>&gt; I agree with Chris on the fact that the function should have the type of<br>&gt; return specified on the signature and not inferred since it is useful for<br>&gt; API documentation to know that ahead of time on a strongly typed language.<br>&gt;<br>&gt; What is not necessary is actually forcing people to type return “x” on the<br>&gt; last line - since “return” is rather redundant and clutter for those people<br>&gt; of a functional programming paradigm point of view.<br>&gt;<br>&gt;<br>&gt; On 2015-12-20, at 4:15:15, Stephen Christopher via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; The discussion I was remembering, comment courtesy of Chris:<br>&gt; https://devforums.apple.com/message/1014317#1014317<br>&gt;<br>&gt; (linked from https://devforums.apple.com/thread/255242)<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/28ff6142/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 20, 2015 at 10:00:00pm</p></header><div class="content"><p>Having returns all over the place in the middle of the code already is sloppy to my eyes, I prefer to try at all cost to avoid spaghetti like code.  <br></p><p>The downside of Swift not having everything as a function/expression - or at least other replacements for them is it tends to encourage spaghetti code like the example you are posting.  I also tend to dislike compound/nested if’s where possible sometimes breaking stuff down into other functions scooped within functions.  <br></p><p>Hence for my example I am going to use the Scala match (which is for pattern matching — i.e. more than just a switch) with guards.  _ = match everything / def is func.<br></p><p>  def f(input: Integer) : Integer = {<br>    input match {<br>      case _ if input &gt; 10 =&gt; 10<br>      case _ if input &lt; 0  =&gt; 0<br>      case _ =&gt; input<br>    }<br>  }<br></p><p>The downside of Scala is that it rides on top of the jvm and I would prefer something that compiled using llvm.   Two things that I would like to see for me to be able to replace a jvm solution for server code is clean functional code where you did not have to either do let x then return at the end or random “returns” in the middle of code and of course a nice jdbc (interface standard for SQL databases rather than relying on vendor specific driver code) like standard SQL database interface [which is out of scope for evolution].<br></p><p><br>&gt; On 2015-12-20, at 19:11:09, ilya &lt;ilya.nikokoshev at gmail.com&gt; wrote:<br>&gt; <br>&gt; -1 on inferred return type and omitting return with func<br>&gt; <br>&gt; Both features are actually available in the language as-is, just not with the func keyword:<br>&gt; <br>&gt; let someInferredFunction = { _ in 5}  // () -&gt; Int<br>&gt; <br>&gt; When teaching Swift we actually teach func + return keywords together, they make it easy to see all possible return paths from a function.<br>&gt; <br>&gt; And we recommend using func instead of a closure when there is a multiline body with control statements. Having implicit return in that case hurts readability.  For example, out of three possible return points within this function only one is not marked with return:<br>&gt; <br>&gt; func f(input: Int) -&gt; Int {<br>&gt;     if input &gt; 10 { <br>&gt;         return 10 <br>&gt;     }<br>&gt;     if input &lt; 0 { <br>&gt;         return 0 <br>&gt;     }<br>&gt;     input<br>&gt; }<br>&gt; <br>&gt; <br>&gt; +1 on omitting return from var {} declaration, those methods look like closures and will often be one-liners.<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 5:29 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I looked at the discussion and it looked like they were discussion two things combined.<br>&gt;    - inferred return type (on function signature) <br>&gt;    - and omitting return on the return.<br>&gt; <br>&gt; I agree with Chris on the fact that the function should have the type of return specified on the signature and not inferred since it is useful for API documentation to know that ahead of time on a strongly typed language.<br>&gt; <br>&gt; What is not necessary is actually forcing people to type return “x” on the last line - since “return” is rather redundant and clutter for those people of a functional programming paradigm point of view.<br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-20, at 4:15:15, Stephen Christopher via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The discussion I was remembering, comment courtesy of Chris: <br>&gt;&gt; https://devforums.apple.com/message/1014317#1014317 &lt;https://devforums.apple.com/message/1014317#1014317&gt;<br>&gt;&gt; <br>&gt;&gt; (linked from https://devforums.apple.com/thread/255242 &lt;https://devforums.apple.com/thread/255242&gt;)<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/64b380c6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 20, 2015 at 11:00:00pm</p></header><div class="content"><p>Also since the example rewrite is a single line function it could be rewritten as:<br></p><p>  def f2(input: Integer) : Integer = input match {<br>    case _ if input &gt; 10 =&gt; 10<br>    case _ if input &lt; 0  =&gt; 0<br>    case _ =&gt; input<br>  }<br></p><p>Even with the overkill of pattern matching it — it still is easy to understand what is being returned without forcing the use of “return” all over the place.<br></p><p><br></p><p>&gt; On 2015-12-20, at 22:30:28, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; Having returns all over the place in the middle of the code already is sloppy to my eyes, I prefer to try at all cost to avoid spaghetti like code.  <br>&gt; <br>&gt; The downside of Swift not having everything as a function/expression - or at least other replacements for them is it tends to encourage spaghetti code like the example you are posting.  I also tend to dislike compound/nested if’s where possible sometimes breaking stuff down into other functions scooped within functions.  <br>&gt; <br>&gt; Hence for my example I am going to use the Scala match (which is for pattern matching — i.e. more than just a switch) with guards.  _ = match everything / def is func.<br>&gt; <br>&gt;   def f(input: Integer) : Integer = {<br>&gt;     input match {<br>&gt;       case _ if input &gt; 10 =&gt; 10<br>&gt;       case _ if input &lt; 0  =&gt; 0<br>&gt;       case _ =&gt; input<br>&gt;     }<br>&gt;   }<br>&gt; <br>&gt; The downside of Scala is that it rides on top of the jvm and I would prefer something that compiled using llvm.   Two things that I would like to see for me to be able to replace a jvm solution for server code is clean functional code where you did not have to either do let x then return at the end or random “returns” in the middle of code and of course a nice jdbc (interface standard for SQL databases rather than relying on vendor specific driver code) like standard SQL database interface [which is out of scope for evolution].<br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-20, at 19:11:09, ilya &lt;ilya.nikokoshev at gmail.com &lt;mailto:ilya.nikokoshev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 on inferred return type and omitting return with func<br>&gt;&gt; <br>&gt;&gt; Both features are actually available in the language as-is, just not with the func keyword:<br>&gt;&gt; <br>&gt;&gt; let someInferredFunction = { _ in 5}  // () -&gt; Int<br>&gt;&gt; <br>&gt;&gt; When teaching Swift we actually teach func + return keywords together, they make it easy to see all possible return paths from a function.<br>&gt;&gt; <br>&gt;&gt; And we recommend using func instead of a closure when there is a multiline body with control statements. Having implicit return in that case hurts readability.  For example, out of three possible return points within this function only one is not marked with return:<br>&gt;&gt; <br>&gt;&gt; func f(input: Int) -&gt; Int {<br>&gt;&gt;     if input &gt; 10 { <br>&gt;&gt;         return 10 <br>&gt;&gt;     }<br>&gt;&gt;     if input &lt; 0 { <br>&gt;&gt;         return 0 <br>&gt;&gt;     }<br>&gt;&gt;     input<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; +1 on omitting return from var {} declaration, those methods look like closures and will often be one-liners.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 20, 2015 at 5:29 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I looked at the discussion and it looked like they were discussion two things combined.<br>&gt;&gt;    - inferred return type (on function signature) <br>&gt;&gt;    - and omitting return on the return.<br>&gt;&gt; <br>&gt;&gt; I agree with Chris on the fact that the function should have the type of return specified on the signature and not inferred since it is useful for API documentation to know that ahead of time on a strongly typed language.<br>&gt;&gt; <br>&gt;&gt; What is not necessary is actually forcing people to type return “x” on the last line - since “return” is rather redundant and clutter for those people of a functional programming paradigm point of view.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2015-12-20, at 4:15:15, Stephen Christopher via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The discussion I was remembering, comment courtesy of Chris: <br>&gt;&gt;&gt; https://devforums.apple.com/message/1014317#1014317 &lt;https://devforums.apple.com/message/1014317#1014317&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (linked from https://devforums.apple.com/thread/255242 &lt;https://devforums.apple.com/thread/255242&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/293152f0/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>December 20, 2015 at 01:00:00pm</p></header><div class="content"><p>I have to agree with everything Ilya has mentioned in her response.<br></p><p>It comes down to readability. Omit the &quot;return&quot; keyword from a function and points that the function returns become hard to see. The optional &quot;return&quot; keyboard in Ruby is one of the few features of Ruby that I genuinely dislike for this reason. Of course, Ruby makes it more difficult because it doesn&#39;t type methods.<br></p><p>Cheers,<br>-Patrick<br></p><p>&gt; On Dec 20, 2015, at 7:11 AM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 on inferred return type and omitting return with func<br>&gt; <br>&gt; Both features are actually available in the language as-is, just not with the func keyword:<br>&gt; <br>&gt; let someInferredFunction = { _ in 5}  // () -&gt; Int<br>&gt; <br>&gt; When teaching Swift we actually teach func + return keywords together, they make it easy to see all possible return paths from a function.<br>&gt; <br>&gt; And we recommend using func instead of a closure when there is a multiline body with control statements. Having implicit return in that case hurts readability.  For example, out of three possible return points within this function only one is not marked with return:<br>&gt; <br>&gt; func f(input: Int) -&gt; Int {<br>&gt;     if input &gt; 10 { <br>&gt;         return 10 <br>&gt;     }<br>&gt;     if input &lt; 0 { <br>&gt;         return 0 <br>&gt;     }<br>&gt;     input<br>&gt; }<br>&gt; <br>&gt; <br>&gt; +1 on omitting return from var {} declaration, those methods look like closures and will often be one-liners.<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 5:29 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I looked at the discussion and it looked like they were discussion two things combined.<br>&gt;    - inferred return type (on function signature) <br>&gt;    - and omitting return on the return.<br>&gt; <br>&gt; I agree with Chris on the fact that the function should have the type of return specified on the signature and not inferred since it is useful for API documentation to know that ahead of time on a strongly typed language.<br>&gt; <br>&gt; What is not necessary is actually forcing people to type return “x” on the last line - since “return” is rather redundant and clutter for those people of a functional programming paradigm point of view.<br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-20, at 4:15:15, Stephen Christopher via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The discussion I was remembering, comment courtesy of Chris: <br>&gt;&gt; https://devforums.apple.com/message/1014317#1014317 &lt;https://devforums.apple.com/message/1014317#1014317&gt;<br>&gt;&gt; <br>&gt;&gt; (linked from https://devforums.apple.com/thread/255242 &lt;https://devforums.apple.com/thread/255242&gt;)<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/f998b876/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 19, 2015 at 06:00:00pm</p></header><div class="content"><p>If Swift ever changes to be Rust-like and have every statement actually be an expression with a non-void type (I believe this was discussed in the thread about replacing ?:), then your proposed behavior is already an implicit part of that change.<br></p><p>But barring a large change like that, I&#39;m against dropping the `return`<br>here, as it&#39;s inconsistent with the rest of the language. The only<br>construct today that lets you drop the return is a one-line closure, but<br>that&#39;s already something that looks like an expression (`foo.map({ $0.x<br>})` looks perfectly fine; `foo.map({ return $0.x })` is just unnecessary<br>syntax). But the last statement of a function isn&#39;t an expression, it&#39;s<br>a statement.<br></p><p>-Kevin Ballard<br></p><p>On Sat, Dec 19, 2015, at 05:30 AM, Craig Cruden via swift-evolution wrote:<br>&gt;<br>&gt; When writing short functional code in a function it would be nice if<br>&gt; the return keyword were an optional keyword.<br>&gt;<br>&gt; Just return the last evaluated expression.<br>&gt;<br>&gt;<br>&gt; i.e.<br>&gt;<br>&gt; func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {        (arg2,<br>&gt; arg1)    }<br>&gt;<br>&gt;<br>&gt; The keyword return would still be there for breaking out of a<br>&gt; function.<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/ef3ca4a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 20, 2015 at 03:00:00pm</p></header><div class="content"><p>Great points Kevin, that&#39;s pretty much my thinking as well. If we&#39;re<br>heading towards everything being an expression then it&#39;ll happen, perhaps<br>that change shouldn&#39;t be incremental as you&#39;ve suggested, I&#39;m not sure.<br></p><p>The only time I&#39;ve found I&#39;ve naturally wanted to do this is with things<br>like property definitions:<br></p><p>var twiceSomething: Int { self.something * 2 }<br></p><p><br></p><p>On Sun, Dec 20, 2015 at 1:55 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; If Swift ever changes to be Rust-like and have every statement actually be<br>&gt; an expression with a non-void type (I believe this was discussed in the<br>&gt; thread about replacing ?:), then your proposed behavior is already an<br>&gt; implicit part of that change.<br>&gt;<br>&gt; But barring a large change like that, I&#39;m against dropping the `return`<br>&gt; here, as it&#39;s inconsistent with the rest of the language. The only<br>&gt; construct today that lets you drop the return is a one-line closure, but<br>&gt; that&#39;s already something that looks like an expression (`foo.map({ $0.x })`<br>&gt; looks perfectly fine; `foo.map({ return $0.x })` is just unnecessary<br>&gt; syntax). But the last statement of a function isn&#39;t an expression, it&#39;s a<br>&gt; statement.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; On Sat, Dec 19, 2015, at 05:30 AM, Craig Cruden via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt; When writing short functional code in a function it would be nice if the<br>&gt; return keyword were an optional keyword.<br>&gt;<br>&gt; Just return the last evaluated expression.<br>&gt;<br>&gt;<br>&gt; i.e.<br>&gt;<br>&gt; func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/aac8e40c/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>I&#39;m not going to go as far as a definitive +1, but I&#39;ve definitely wanted this for var and subscript getters. If it were limited to single-expression functions, I don&#39;t see much harm. The only time there&#39;d be a problem is if the return types matched and you were going to have another statement instead.<br></p><p>It feels weird for anything imperative, but I think the whole point is that there are plenty of functions which do absolutely no imperative work. I personally wouldn&#39;t want people to start using it for forwarding imperative things, though.<br></p><p>func sendHTTPRequest() -&gt; Result {<br>  sendHTTPRequestImpl(destinationURL, body)<br>}<br></p><p>Jordan<br></p><p><br>&gt; On Dec 19, 2015, at 5:30 , Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt; <br>&gt; Just return the last evaluated expression.<br>&gt; <br>&gt; <br>&gt; i.e.<br>&gt; <br>&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt; <br>&gt; <br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/13eafb05/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 11:00:00pm</p></header><div class="content"><p>Just food for thought: C# has a special syntax, inspired by its own lambda syntax, for single-expression functions:<br></p><p>&gt; // lambda syntax<br>&gt; param =&gt; param + 4<br>&gt; <br>&gt; // single-expression method syntax<br>&gt; int AddFour(int param) =&gt; param + 4;<br></p><p>Swift&#39;s syntax for declaring functions and lambdas are harder to link like that though.<br></p><p>Félix<br></p><p>&gt; Le 19 déc. 2015 à 23:26:49, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I&#39;m not going to go as far as a definitive +1, but I&#39;ve definitely wanted this for var and subscript getters. If it were limited to single-expression functions, I don&#39;t see much harm. The only time there&#39;d be a problem is if the return types matched and you were going to have another statement instead.<br>&gt; <br>&gt; It feels weird for anything imperative, but I think the whole point is that there are plenty of functions which do absolutely no imperative work. I personally wouldn&#39;t want people to start using it for forwarding imperative things, though.<br>&gt; <br>&gt; func sendHTTPRequest() -&gt; Result {<br>&gt;   sendHTTPRequestImpl(destinationURL, body)<br>&gt; }<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 5:30 , Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt;&gt; <br>&gt;&gt; Just return the last evaluated expression.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; i.e.<br>&gt;&gt; <br>&gt;&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;&gt;         (arg2, arg1)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The keyword return would still be there for breaking out of a function.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/59a0cb1a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 20, 2015 at 09:00:00pm</p></header><div class="content"><p>I honestly don’t have a problem with having to say `return` inside functions. That’s not necessarily a -1, but I’m reluctant to say +1 when _even I_ don’t really have the problem with extra verbosity.<br></p><p>*However*, as others pointed out, having to type `return` is a bit tiring in the context of a computer property’s “get”:<br></p><p>&gt; var twiceSomething: Int { self.something * 2 }<br></p><p>— Radek<br></p><p>&gt; On 19 Dec 2015, at 14:30, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt; <br>&gt; Just return the last evaluated expression.<br>&gt; <br>&gt; <br>&gt; i.e.<br>&gt; <br>&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt; <br>&gt; <br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/2c2cf06b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 21, 2015 at 07:00:00am</p></header><div class="content"><p>For those simple computed var cases I wonder if we could use a simpler<br>definition, inferring the type:<br></p><p>var twiceSomething =&gt; something * 2<br></p><p>On the other hand, it&#39;s better to specify types for names that can be<br>visible outside of current scope explicitly. So may be the getter declared<br>via this syntax should always be private.<br></p><p>On Sun, Dec 20, 2015 at 23:29 Radosław Pietruszewski &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I honestly don’t have a problem with having to say `return` inside<br>&gt; functions. That’s not necessarily a -1, but I’m reluctant to say +1 when<br>&gt; _even I_ don’t really have the problem with extra verbosity.<br>&gt;<br>&gt; *However*, as others pointed out, having to type `return` is a bit tiring<br>&gt; in the context of a computer property’s “get”:<br>&gt;<br>&gt; var twiceSomething: Int { self.something * 2 }<br>&gt;<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 19 Dec 2015, at 14:30, Craig Cruden via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; When writing short functional code in a function it would be nice if the<br>&gt; return keyword were an optional keyword.<br>&gt;<br>&gt; Just return the last evaluated expression.<br>&gt;<br>&gt;<br>&gt; i.e.<br>&gt;<br>&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;         (arg2, arg1)<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; The keyword return would still be there for breaking out of a function.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/f58b23fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 21, 2015 at 01:00:00pm</p></header><div class="content"><p>Well, it’s debatable if this would be simpler considering you’d introduce a new syntax. However I agree that inferred return type would be great.<br></p><p>If we can do:<br></p><p>var aProperty = 10<br></p><p>It would be nice to be able to do<br></p><p>var anotherProperty { foo * 2 }<br></p><p>— Radek<br></p><p>&gt; On 21 Dec 2015, at 08:52, ilya &lt;ilya.nikokoshev at gmail.com&gt; wrote:<br>&gt; <br>&gt; For those simple computed var cases I wonder if we could use a simpler definition, inferring the type:<br>&gt; <br>&gt; var twiceSomething =&gt; something * 2 <br>&gt; <br>&gt; On the other hand,  it&#39;s better to specify types for names that can be visible outside of current scope explicitly. So may be the getter declared via this syntax should always be private. <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 23:29 Radosław Pietruszewski &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I honestly don’t have a problem with having to say `return` inside functions. That’s not necessarily a -1, but I’m reluctant to say +1 when _even I_ don’t really have the problem with extra verbosity.<br>&gt; <br>&gt; *However*, as others pointed out, having to type `return` is a bit tiring in the context of a computer property’s “get”:<br>&gt; <br>&gt;&gt; var twiceSomething: Int { self.something * 2 }<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 19 Dec 2015, at 14:30, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt;&gt; <br>&gt;&gt; Just return the last evaluated expression.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; i.e.<br>&gt;&gt; <br>&gt;&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;&gt;         (arg2, arg1)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The keyword return would still be there for breaking out of a function.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/be7f3765/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 21, 2015 at 08:00:00pm</p></header><div class="content"><p>The difference between issuing return embedded in multiple locations to reduce verbosity is actually slightly more than extra verbosity it is actually a different execution path.<br></p><p>In my last example (Scalaish).  The last and only expression in the function is the whole match case - it terminates at the end of the function.<br></p><p>  def f2(input: Integer) : Integer = {<br>    input match {<br>        case _ if input &gt; 10 =&gt; 10<br>        case _ if input &lt; 0  =&gt; 0<br>        case _ =&gt; input<br>    }<br>  }<br></p><p>Whereas if you sprinkle in returns as such, you are actually changing the execution path:<br></p><p>  def f2(input: Integer) : Integer = {<br>    input match {<br>        case _ if input &gt; 10 =&gt; return 10  &lt;— function terminates here<br>        case _ if input &lt; 0  =&gt; return 0  &lt;— function terminates and here<br>        case _ =&gt; return input  &lt;— &lt;— function terminates and here<br>    }<br>  }<br></p><p>A move towards spaghetti like code.<br></p><p>Now if you were to add an extra expression like using an intermediate value.<br></p><p>  def f2(input: Integer) : Integer = {<br>    let x = input match {<br>        case _ if input &gt; 10 =&gt; 10  // no longer terminates here<br>        case _ if input &lt; 0  =&gt; 0  // no longer terminates here<br>        case _ =&gt; input   // no longer terminates here<br>    }<br>    x /2  // or return x/2<br>  }<br></p><p>You would have had to go back and modify the original execution path with all the embedded returns which can also be a source of unwanted defects if one is missed (in larger functions).<br></p><p><br>&gt; On 2015-12-21, at 3:29:27, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; I honestly don’t have a problem with having to say `return` inside functions. That’s not necessarily a -1, but I’m reluctant to say +1 when _even I_ don’t really have the problem with extra verbosity.<br>&gt; <br>&gt; *However*, as others pointed out, having to type `return` is a bit tiring in the context of a computer property’s “get”:<br>&gt; <br>&gt;&gt; var twiceSomething: Int { self.something * 2 }<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 19 Dec 2015, at 14:30, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt;&gt; <br>&gt;&gt; Just return the last evaluated expression.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; i.e.<br>&gt;&gt; <br>&gt;&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;&gt;         (arg2, arg1)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The keyword return would still be there for breaking out of a function.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/a0bd6ff9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December 21, 2015 at 09:00:00am</p></header><div class="content"><p>In my experience, early returns usually reduce spaghetti and it is why I’m a huge fan of guard since it encourages this pattern. In an effort to return as early as possible, my conditions usually coalesce into small nuggets of logic that all terminate with a return which makes them really easy to identify and it seems to reduce the nesting depth of statements. When stepping through code in the debugger, it’s easy to spot a problem, too, if it hits a return I didn’t expect rather than weaving down a bunch of conditional code and maybe going into one branch, skipping over another, etc. all in an effort to reach the &quot;one true return&quot; at the end.<br></p><p>l8r<br>Sean<br></p><p>&gt; On Dec 21, 2015, at 7:31 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The difference between issuing return embedded in multiple locations to reduce verbosity is actually slightly more than extra verbosity it is actually a different execution path.<br>&gt; <br>&gt; In my last example (Scalaish).  The last and only expression in the function is the whole match case - it terminates at the end of the function.<br>&gt; <br>&gt;   def f2(input: Integer) : Integer = {<br>&gt;     input match {<br>&gt;         case _ if input &gt; 10 =&gt; 10<br>&gt;         case _ if input &lt; 0  =&gt; 0<br>&gt;         case _ =&gt; input<br>&gt;     }<br>&gt;   }<br>&gt; <br>&gt; Whereas if you sprinkle in returns as such, you are actually changing the execution path:<br>&gt; <br>&gt;   def f2(input: Integer) : Integer = {<br>&gt;     input match {<br>&gt;         case _ if input &gt; 10 =&gt; return 10  &lt;— function terminates here<br>&gt;         case _ if input &lt; 0  =&gt; return 0  &lt;— function terminates and here<br>&gt;         case _ =&gt; return input  &lt;— &lt;— function terminates and here<br>&gt;     }<br>&gt;   }<br>&gt; <br>&gt; A move towards spaghetti like code.<br>&gt; <br>&gt; Now if you were to add an extra expression like using an intermediate value.<br>&gt; <br>&gt;   def f2(input: Integer) : Integer = {<br>&gt;     let x = input match {<br>&gt;         case _ if input &gt; 10 =&gt; 10  // no longer terminates here<br>&gt;         case _ if input &lt; 0  =&gt; 0  // no longer terminates here<br>&gt;         case _ =&gt; input   // no longer terminates here<br>&gt;     }<br>&gt;     x /2  // or return x/2<br>&gt;   }<br>&gt; <br>&gt; You would have had to go back and modify the original execution path with all the embedded returns which can also be a source of unwanted defects if one is missed (in larger functions).<br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-21, at 3:29:27, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I honestly don’t have a problem with having to say `return` inside functions. That’s not necessarily a -1, but I’m reluctant to say +1 when _even I_ don’t really have the problem with extra verbosity.<br>&gt;&gt; <br>&gt;&gt; *However*, as others pointed out, having to type `return` is a bit tiring in the context of a computer property’s “get”:<br>&gt;&gt; <br>&gt;&gt;&gt; var twiceSomething: Int { self.something * 2 }<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 19 Dec 2015, at 14:30, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just return the last evaluated expression.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; i.e.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;&gt;&gt;         (arg2, arg1)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The keyword return would still be there for breaking out of a function.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Proposal] function &quot;return&quot; optional keyword.</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 21, 2015 at 11:00:00pm</p></header><div class="content"><p>A guard is an interesting idea as it is really just saying to not perform the function if.<br></p><p>Of course a lot of the cases you are guarding against is where a value is null/nil and would have caused an abend if passing a null.<br></p><p>Now with options though if you have one option -&gt; map -&gt; new Option you would not necessarily have the same issue (not saying never).<br></p><p><br>&gt; On 2015-12-21, at 22:36:19, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; In my experience, early returns usually reduce spaghetti and it is why I’m a huge fan of guard since it encourages this pattern. In an effort to return as early as possible, my conditions usually coalesce into small nuggets of logic that all terminate with a return which makes them really easy to identify and it seems to reduce the nesting depth of statements. When stepping through code in the debugger, it’s easy to spot a problem, too, if it hits a return I didn’t expect rather than weaving down a bunch of conditional code and maybe going into one branch, skipping over another, etc. all in an effort to reach the &quot;one true return&quot; at the end.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 7:31 AM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The difference between issuing return embedded in multiple locations to reduce verbosity is actually slightly more than extra verbosity it is actually a different execution path.<br>&gt;&gt; <br>&gt;&gt; In my last example (Scalaish).  The last and only expression in the function is the whole match case - it terminates at the end of the function.<br>&gt;&gt; <br>&gt;&gt;  def f2(input: Integer) : Integer = {<br>&gt;&gt;    input match {<br>&gt;&gt;        case _ if input &gt; 10 =&gt; 10<br>&gt;&gt;        case _ if input &lt; 0  =&gt; 0<br>&gt;&gt;        case _ =&gt; input<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; Whereas if you sprinkle in returns as such, you are actually changing the execution path:<br>&gt;&gt; <br>&gt;&gt;  def f2(input: Integer) : Integer = {<br>&gt;&gt;    input match {<br>&gt;&gt;        case _ if input &gt; 10 =&gt; return 10  &lt;— function terminates here<br>&gt;&gt;        case _ if input &lt; 0  =&gt; return 0  &lt;— function terminates and here<br>&gt;&gt;        case _ =&gt; return input  &lt;— &lt;— function terminates and here<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; A move towards spaghetti like code.<br>&gt;&gt; <br>&gt;&gt; Now if you were to add an extra expression like using an intermediate value.<br>&gt;&gt; <br>&gt;&gt;  def f2(input: Integer) : Integer = {<br>&gt;&gt;    let x = input match {<br>&gt;&gt;        case _ if input &gt; 10 =&gt; 10  // no longer terminates here<br>&gt;&gt;        case _ if input &lt; 0  =&gt; 0  // no longer terminates here<br>&gt;&gt;        case _ =&gt; input   // no longer terminates here<br>&gt;&gt;    }<br>&gt;&gt;    x /2  // or return x/2<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; You would have had to go back and modify the original execution path with all the embedded returns which can also be a source of unwanted defects if one is missed (in larger functions).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2015-12-21, at 3:29:27, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I honestly don’t have a problem with having to say `return` inside functions. That’s not necessarily a -1, but I’m reluctant to say +1 when _even I_ don’t really have the problem with extra verbosity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; *However*, as others pointed out, having to type `return` is a bit tiring in the context of a computer property’s “get”:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var twiceSomething: Int { self.something * 2 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 19 Dec 2015, at 14:30, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When writing short functional code in a function it would be nice if the return keyword were an optional keyword. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just return the last evaluated expression.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; i.e.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    func flipFunc&lt;T, U&gt;(arg1: T, arg2: U) -&gt; (U, T) {<br>&gt;&gt;&gt;&gt;        (arg2, arg1)<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The keyword return would still be there for breaking out of a function.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
