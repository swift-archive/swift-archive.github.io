<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri Jul 22 2016, Ben Rimmington &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 21 Jul 2016, at 18:02, Michael Gottesman wrote:<br>&gt;&gt; <br>&gt;&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from<br>&gt;&gt; StdlibCore to the Objective C overlay. The reason to do this is that<br>&gt;&gt; ideally StdlibCore would not have any code specific to ObjC in<br>&gt;<br>&gt;&gt; it. This is a small step that we can take in this direction by<br>&gt;&gt; moving the public API of AutoreleasingUnsafeMutablePointer to the<br>&gt;&gt; ObjC overlay. The way that this would be done is that the<br>&gt;&gt; implementation for AutoreleasingUnsafeMutablePointer would remain in<br>&gt;&gt; StdlibCore, but we would add an underscore to make that API private<br>&gt;&gt; to the standard library. Then inside the ObjC overlay, we would<br>&gt;&gt; create a typealias to the internal API with the non-underscored name<br>&gt;&gt; (i.e. make the typealias the public API). Then at a later point in<br>&gt;&gt; time we can move the implementation. The reason why I am not<br>&gt;&gt; proposing to move the implementation today is that there are<br>&gt;&gt; dependencies in Array/Hashed Collections on<br>&gt;&gt; AutoreleasingUnsafeMutablePointer. Moving that code is a larger<br>&gt;&gt; project that is preconditioned on this proposal going in first as an<br>&gt;&gt; incremental step.<br>&gt;<br>&gt; If you want to move APIs which aren&#39;t cross-platform out of stdlib,<br>&gt; should there be a similar proposal for the PlaygroundQuickLook enum<br>&gt; and CustomPlaygroundQuickLookable protocol?<br>&gt;<br>&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Mirror.swift&gt;<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-xcode-playground-support&gt;<br></p><p>That is a good question!  We don&#39;t have an obvious existing module into<br>which to move them, though, do we?<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>July 22, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 11:42 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jul 22 2016, Ben Rimmington &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On 21 Jul 2016, at 18:02, Michael Gottesman wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from<br>&gt;&gt;&gt; StdlibCore to the Objective C overlay. The reason to do this is that<br>&gt;&gt;&gt; ideally StdlibCore would not have any code specific to ObjC in<br>&gt;&gt; <br>&gt;&gt;&gt; it. This is a small step that we can take in this direction by<br>&gt;&gt;&gt; moving the public API of AutoreleasingUnsafeMutablePointer to the<br>&gt;&gt;&gt; ObjC overlay. The way that this would be done is that the<br>&gt;&gt;&gt; implementation for AutoreleasingUnsafeMutablePointer would remain in<br>&gt;&gt;&gt; StdlibCore, but we would add an underscore to make that API private<br>&gt;&gt;&gt; to the standard library. Then inside the ObjC overlay, we would<br>&gt;&gt;&gt; create a typealias to the internal API with the non-underscored name<br>&gt;&gt;&gt; (i.e. make the typealias the public API). Then at a later point in<br>&gt;&gt;&gt; time we can move the implementation. The reason why I am not<br>&gt;&gt;&gt; proposing to move the implementation today is that there are<br>&gt;&gt;&gt; dependencies in Array/Hashed Collections on<br>&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer. Moving that code is a larger<br>&gt;&gt;&gt; project that is preconditioned on this proposal going in first as an<br>&gt;&gt;&gt; incremental step.<br>&gt;&gt; <br>&gt;&gt; If you want to move APIs which aren&#39;t cross-platform out of stdlib,<br>&gt;&gt; should there be a similar proposal for the PlaygroundQuickLook enum<br>&gt;&gt; and CustomPlaygroundQuickLookable protocol?<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Mirror.swift&gt;<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift-xcode-playground-support&gt;<br>&gt; <br>&gt; That is a good question!  We don&#39;t have an obvious existing module into<br>&gt; which to move them, though, do we?<br></p><p>This is just an incremental proposal. The playground work should be in a different proposal so we keep this proposal focused.<br></p><p>Michael<br></p><p>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/59e7e691/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 12:42 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jul 22 2016, Ben Rimmington &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On 21 Jul 2016, at 18:02, Michael Gottesman wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a proposal to move AutoreleasingUnsafeMutablePointer from<br>&gt;&gt;&gt; StdlibCore to the Objective C overlay. The reason to do this is that<br>&gt;&gt;&gt; ideally StdlibCore would not have any code specific to ObjC in<br>&gt;&gt; <br>&gt;&gt;&gt; it. This is a small step that we can take in this direction by<br>&gt;&gt;&gt; moving the public API of AutoreleasingUnsafeMutablePointer to the<br>&gt;&gt;&gt; ObjC overlay. The way that this would be done is that the<br>&gt;&gt;&gt; implementation for AutoreleasingUnsafeMutablePointer would remain in<br>&gt;&gt;&gt; StdlibCore, but we would add an underscore to make that API private<br>&gt;&gt;&gt; to the standard library. Then inside the ObjC overlay, we would<br>&gt;&gt;&gt; create a typealias to the internal API with the non-underscored name<br>&gt;&gt;&gt; (i.e. make the typealias the public API). Then at a later point in<br>&gt;&gt;&gt; time we can move the implementation. The reason why I am not<br>&gt;&gt;&gt; proposing to move the implementation today is that there are<br>&gt;&gt;&gt; dependencies in Array/Hashed Collections on<br>&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer. Moving that code is a larger<br>&gt;&gt;&gt; project that is preconditioned on this proposal going in first as an<br>&gt;&gt;&gt; incremental step.<br>&gt;&gt; <br>&gt;&gt; If you want to move APIs which aren&#39;t cross-platform out of stdlib,<br>&gt;&gt; should there be a similar proposal for the PlaygroundQuickLook enum<br>&gt;&gt; and CustomPlaygroundQuickLookable protocol?<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Mirror.swift&gt;<br>&gt;&gt; <br>&gt;&gt; &lt;https://github.com/apple/swift-xcode-playground-support&gt;<br>&gt; <br>&gt; That is a good question!  We don&#39;t have an obvious existing module into<br>&gt; which to move them, though, do we?<br></p><p><br>This philosophy appeals to me, especially when considering Swift as a <br>cross-platform language. Would you all be open to &quot;new module&quot; proposals?<br>Would that be internal or through Swift Evolution? I&#39;m thinking also of<br>the discussion about creating a Swift native Math module w/ JordanR and<br>Steve C for things that don&#39;t belong in the stdlib but would be nice to have around,<br>sanctioned native modules.<br></p><p>As for PlaygroundSupport, how does that tie into stdlib? I thought it was its own <br>thing, separate from stdlib. Wouldn&#39;t both quick look and lookable belong there?<br></p><p>-- E<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/9694082b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
