<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/31a2262ac7623c7c625c20b11367255d?s=50"></div><header><strong>Type access level as the default for its members?</strong> from <string>Eric-Paul Lecluse</string> &lt;epl at lecluse.org&gt;<p>July 22, 2016 at 12:00:00pm</p></header><div class="content"><p>To illustrate my question below, here are three publicly modified entities:<br>a struct, an enum and an extension, whose properties lack explicit access<br>modifiers:<br></p><p>    public struct Car {<br>        var wheel: [Wheel]<br>        var licensePlate: String<br></p><p>        func combust() { ... }<br>    }<br></p><p>    public enum Wheel {<br>        case big<br>        case small<br></p><p>        var revolutionDistance: Double { ... }<br>    }<br></p><p>    public extension Car {<br>        func park() { ... }<br>    }<br></p><p>The default access level for every member is `internal` for all members of<br>an original type. Therefore both `combust()` and `revolutionDistance` are<br>publicly inaccessible. For extensions, this is different, `park()` _is_<br>publicly accessible (as would be computed properties if it had any) because<br>the extension is marked `public`. There&#39;s no option to modify an enum&#39;s<br>cases individually (nor should there be), they&#39;re inherently linked to the<br>enum&#39;s access level.<br></p><p>When modifying any of the entities to `private`, their members become<br>inaccessible by association. If a type isn&#39;t accessible, neither are its<br>members. Thus for the `private` case, the behavior feels more like what the<br>extension modifier did in the first place.<br></p><p>Not immediately apparent from this example is that the struct has an<br>implicit constructor (lacking any explicit ones), whose access level also<br>defaults to `internal`. This means the Car-struct can&#39;t be constructed<br>outside of its defining module, until we create an explicit initializer<br>with the `public` access modifier.<br></p><p># Problems<br>The current approach is very verbose for any kind of access modification.<br>Public structs that are intended to expose their members, require<br>explicitly marked `public` modifiers everywhere. Consider the case where<br>you want to expose a previously hidden (internal or private) type, you need<br>to modify every individual member. Except if you&#39;re modifying an extension,<br>in that case you only need to modify in one place. This means that<br>conceptually, putting a `public` or `private` modifier on a type behaves<br>differently from putting one one an extension, with regard to a type&#39;s<br>members, which can lead to confusion (and has in my case, and with several<br>fellow developers).<br></p><p># Idea<br>What if the default access level were chosen differently? Instead of being<br>`internal` by default, or `private` by association, what if the<br>_type-level_ access modifier would determine the default for _all_ members,<br>unless explicitly modified, including `public` and to-be-introduced ones?<br></p><p>This would...<br>1. equalize the conceptual behavior between access levels of an original<br>type and the ones of their extensions.<br>2. greatly reduce verbosity on members due to explicit access level<br>modifiers.<br>3. make it easier to modify the access level of an entire type, without<br>requiring modification of individual members.<br>4. reduce the requirement of public constructors where they would match the<br>implicit ones.<br>5. still allow exceptions on an individual level<br></p><p>What do you think?<br>Regards,<br>Eric-Paul<br></p><p>--<br>Notes:<br>* I&#39;m using the word &#39;entity&#39; to lump types and extensions together under<br>one term. There must be a better term, please do share!<br>* My examples are based off of my experience with Swift 2.2, even though I<br>believe the concepts still apply in 2.3 and the 3.0-beta.<br>* Protocols don&#39;t allow access modification on individual members, of<br>course, similar to an enum&#39;s cases.<br>* Didn&#39;t find any similar topics in the [commonly rejected list](<br>https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md)<br>* There&#39;s a [newly accepted proposal](<br>https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md#proposed-solution)<br>that adds `fileprivate` as a fourth access level modifier.<br></p><p>Other discussions about access levels, yet not what I was looking for:<br>* [Default access control / Access control blocks] (<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/013683.html<br>)<br>* [Access modifier blocks] (<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160613/020968.html<br>)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/60326a86/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Type access level as the default for its members?</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 3:34 AM, Eric-Paul Lecluse via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; To illustrate my question below, here are three publicly modified entities: a struct, an enum and an extension, whose properties lack explicit access modifiers:<br>&gt; <br>&gt;     public struct Car {<br>&gt;         var wheel: [Wheel]<br>&gt;         var licensePlate: String<br>&gt;        <br>&gt;         func combust() { ... }<br>&gt;     }<br>&gt;     <br>&gt;     public enum Wheel {<br>&gt;         case big<br>&gt;         case small<br>&gt;         <br>&gt;         var revolutionDistance: Double { ... }<br>&gt;     }<br>&gt; <br>&gt;     public extension Car {<br>&gt;         func park() { ... }<br>&gt;     }<br>&gt; <br>&gt; The default access level for every member is `internal` for all members of an original type. Therefore both `combust()` and `revolutionDistance` are publicly inaccessible. For extensions, this is different, `park()` _is_ publicly accessible (as would be computed properties if it had any) because the extension is marked `public`. There&#39;s no option to modify an enum&#39;s cases individually (nor should there be), they&#39;re inherently linked to the enum&#39;s access level.<br>&gt; <br>&gt; When modifying any of the entities to `private`, their members become inaccessible by association. If a type isn&#39;t accessible, neither are its members. Thus for the `private` case, the behavior feels more like what the extension modifier did in the first place. <br>&gt; <br>&gt; Not immediately apparent from this example is that the struct has an implicit constructor (lacking any explicit ones), whose access level also defaults to `internal`. This means the Car-struct can&#39;t be constructed outside of its defining module, until we create an explicit initializer with the `public` access modifier.<br>&gt; <br>&gt; # Problems<br>&gt; The current approach is very verbose for any kind of access modification. Public structs that are intended to expose their members, require explicitly marked `public` modifiers everywhere. Consider the case where you want to expose a previously hidden (internal or private) type, you need to modify every individual member. Except if you&#39;re modifying an extension, in that case you only need to modify in one place. This means that conceptually, putting a `public` or `private` modifier on a type behaves differently from putting one one an extension, with regard to a type&#39;s members, which can lead to confusion (and has in my case, and with several fellow developers).<br>&gt; <br>&gt; # Idea<br>&gt; What if the default access level were chosen differently? Instead of being `internal` by default, or `private` by association, what if the _type-level_ access modifier would determine the default for _all_ members, unless explicitly modified, including `public` and to-be-introduced ones?<br></p><p>I don&#39;t think this is going fly:<br>- internal is the default because the team wants any public API to be explicit. <br>- There was a rejected proposal (119?) that tried to make extensions work just like types. <br>- This is a breaking change and we are out of time for swift3<br>- What you want is already offered by public extensions. (Some people find this confusing but it looks like this is stay in swift 3). <br></p><p><br>&gt; <br>&gt; This would...<br>&gt; 1. equalize the conceptual behavior between access levels of an original type and the ones of their extensions.<br>&gt; 2. greatly reduce verbosity on members due to explicit access level modifiers.<br>&gt; 3. make it easier to modify the access level of an entire type, without requiring modification of individual members.<br>&gt; 4. reduce the requirement of public constructors where they would match the implicit ones.<br>&gt; 5. still allow exceptions on an individual level<br>&gt; <br>&gt; What do you think?<br>&gt; Regards,<br>&gt; Eric-Paul<br>&gt; <br>&gt; --<br>&gt; Notes:<br>&gt; * I&#39;m using the word &#39;entity&#39; to lump types and extensions together under one term. There must be a better term, please do share!<br>&gt; * My examples are based off of my experience with Swift 2.2, even though I believe the concepts still apply in 2.3 and the 3.0-beta.<br>&gt; * Protocols don&#39;t allow access modification on individual members, of course, similar to an enum&#39;s cases.<br>&gt; * Didn&#39;t find any similar topics in the [commonly rejected list](https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md)<br>&gt; * There&#39;s a [newly accepted proposal](https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md#proposed-solution) that adds `fileprivate` as a fourth access level modifier.<br>&gt; <br>&gt; Other discussions about access levels, yet not what I was looking for:<br>&gt; * [Default access control / Access control blocks] (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/013683.html)<br>&gt; * [Access modifier blocks] (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160613/020968.html)<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/e801a964/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Type access level as the default for its members?</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>The only point that judges the proposal on its merits would be the first one, and I would personally be happy to have that discussion.<br></p><p>Félix<br></p><p>&gt; Le 22 juil. 2016 à 10:14:13, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Jul 22, 2016, at 3:34 AM, Eric-Paul Lecluse via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; To illustrate my question below, here are three publicly modified entities: a struct, an enum and an extension, whose properties lack explicit access modifiers:<br>&gt;&gt; <br>&gt;&gt;     public struct Car {<br>&gt;&gt;         var wheel: [Wheel]<br>&gt;&gt;         var licensePlate: String<br>&gt;&gt;        <br>&gt;&gt;         func combust() { ... }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     public enum Wheel {<br>&gt;&gt;         case big<br>&gt;&gt;         case small<br>&gt;&gt;         <br>&gt;&gt;         var revolutionDistance: Double { ... }<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt;     public extension Car {<br>&gt;&gt;         func park() { ... }<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; The default access level for every member is `internal` for all members of an original type. Therefore both `combust()` and `revolutionDistance` are publicly inaccessible. For extensions, this is different, `park()` _is_ publicly accessible (as would be computed properties if it had any) because the extension is marked `public`. There&#39;s no option to modify an enum&#39;s cases individually (nor should there be), they&#39;re inherently linked to the enum&#39;s access level.<br>&gt;&gt; <br>&gt;&gt; When modifying any of the entities to `private`, their members become inaccessible by association. If a type isn&#39;t accessible, neither are its members. Thus for the `private` case, the behavior feels more like what the extension modifier did in the first place. <br>&gt;&gt; <br>&gt;&gt; Not immediately apparent from this example is that the struct has an implicit constructor (lacking any explicit ones), whose access level also defaults to `internal`. This means the Car-struct can&#39;t be constructed outside of its defining module, until we create an explicit initializer with the `public` access modifier.<br>&gt;&gt; <br>&gt;&gt; # Problems<br>&gt;&gt; The current approach is very verbose for any kind of access modification. Public structs that are intended to expose their members, require explicitly marked `public` modifiers everywhere. Consider the case where you want to expose a previously hidden (internal or private) type, you need to modify every individual member. Except if you&#39;re modifying an extension, in that case you only need to modify in one place. This means that conceptually, putting a `public` or `private` modifier on a type behaves differently from putting one one an extension, with regard to a type&#39;s members, which can lead to confusion (and has in my case, and with several fellow developers).<br>&gt;&gt; <br>&gt;&gt; # Idea<br>&gt;&gt; What if the default access level were chosen differently? Instead of being `internal` by default, or `private` by association, what if the _type-level_ access modifier would determine the default for _all_ members, unless explicitly modified, including `public` and to-be-introduced ones?<br>&gt; <br>&gt; I don&#39;t think this is going fly:<br>&gt; - internal is the default because the team wants any public API to be explicit. <br>&gt; - There was a rejected proposal (119?) that tried to make extensions work just like types. <br>&gt; - This is a breaking change and we are out of time for swift3<br>&gt; - What you want is already offered by public extensions. (Some people find this confusing but it looks like this is stay in swift 3). <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; This would...<br>&gt;&gt; 1. equalize the conceptual behavior between access levels of an original type and the ones of their extensions.<br>&gt;&gt; 2. greatly reduce verbosity on members due to explicit access level modifiers.<br>&gt;&gt; 3. make it easier to modify the access level of an entire type, without requiring modification of individual members.<br>&gt;&gt; 4. reduce the requirement of public constructors where they would match the implicit ones.<br>&gt;&gt; 5. still allow exceptions on an individual level<br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt;&gt; Regards,<br>&gt;&gt; Eric-Paul<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Notes:<br>&gt;&gt; * I&#39;m using the word &#39;entity&#39; to lump types and extensions together under one term. There must be a better term, please do share!<br>&gt;&gt; * My examples are based off of my experience with Swift 2.2, even though I believe the concepts still apply in 2.3 and the 3.0-beta.<br>&gt;&gt; * Protocols don&#39;t allow access modification on individual members, of course, similar to an enum&#39;s cases.<br>&gt;&gt; * Didn&#39;t find any similar topics in the [commonly rejected list](https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;)<br>&gt;&gt; * There&#39;s a [newly accepted proposal](https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md#proposed-solution &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md#proposed-solution&gt;) that adds `fileprivate` as a fourth access level modifier.<br>&gt;&gt; <br>&gt;&gt; Other discussions about access levels, yet not what I was looking for:<br>&gt;&gt; * [Default access control / Access control blocks] (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/013683.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/013683.html&gt;)<br>&gt;&gt; * [Access modifier blocks] (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160613/020968.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160613/020968.html&gt;)<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/fab90f52/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Type access level as the default for its members?</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 7:05 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; The only point that judges the proposal on its merits would be the first one, and I would personally be happy to have that discussion.<br></p><p>https://github.com/apple/swift-evolution/pull/438<br></p><p>I think that battle is lost for now. <br></p><p>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 22 juil. 2016 à 10:14:13, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 22, 2016, at 3:34 AM, Eric-Paul Lecluse via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; To illustrate my question below, here are three publicly modified entities: a struct, an enum and an extension, whose properties lack explicit access modifiers:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     public struct Car {<br>&gt;&gt;&gt;         var wheel: [Wheel]<br>&gt;&gt;&gt;         var licensePlate: String<br>&gt;&gt;&gt;        <br>&gt;&gt;&gt;         func combust() { ... }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     public enum Wheel {<br>&gt;&gt;&gt;         case big<br>&gt;&gt;&gt;         case small<br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         var revolutionDistance: Double { ... }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     public extension Car {<br>&gt;&gt;&gt;         func park() { ... }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The default access level for every member is `internal` for all members of an original type. Therefore both `combust()` and `revolutionDistance` are publicly inaccessible. For extensions, this is different, `park()` _is_ publicly accessible (as would be computed properties if it had any) because the extension is marked `public`. There&#39;s no option to modify an enum&#39;s cases individually (nor should there be), they&#39;re inherently linked to the enum&#39;s access level.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When modifying any of the entities to `private`, their members become inaccessible by association. If a type isn&#39;t accessible, neither are its members. Thus for the `private` case, the behavior feels more like what the extension modifier did in the first place. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not immediately apparent from this example is that the struct has an implicit constructor (lacking any explicit ones), whose access level also defaults to `internal`. This means the Car-struct can&#39;t be constructed outside of its defining module, until we create an explicit initializer with the `public` access modifier.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; # Problems<br>&gt;&gt;&gt; The current approach is very verbose for any kind of access modification. Public structs that are intended to expose their members, require explicitly marked `public` modifiers everywhere. Consider the case where you want to expose a previously hidden (internal or private) type, you need to modify every individual member. Except if you&#39;re modifying an extension, in that case you only need to modify in one place. This means that conceptually, putting a `public` or `private` modifier on a type behaves differently from putting one one an extension, with regard to a type&#39;s members, which can lead to confusion (and has in my case, and with several fellow developers).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; # Idea<br>&gt;&gt;&gt; What if the default access level were chosen differently? Instead of being `internal` by default, or `private` by association, what if the _type-level_ access modifier would determine the default for _all_ members, unless explicitly modified, including `public` and to-be-introduced ones?<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this is going fly:<br>&gt;&gt; - internal is the default because the team wants any public API to be explicit. <br>&gt;&gt; - There was a rejected proposal (119?) that tried to make extensions work just like types. <br>&gt;&gt; - This is a breaking change and we are out of time for swift3<br>&gt;&gt; - What you want is already offered by public extensions. (Some people find this confusing but it looks like this is stay in swift 3). <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would...<br>&gt;&gt;&gt; 1. equalize the conceptual behavior between access levels of an original type and the ones of their extensions.<br>&gt;&gt;&gt; 2. greatly reduce verbosity on members due to explicit access level modifiers.<br>&gt;&gt;&gt; 3. make it easier to modify the access level of an entire type, without requiring modification of individual members.<br>&gt;&gt;&gt; 4. reduce the requirement of public constructors where they would match the implicit ones.<br>&gt;&gt;&gt; 5. still allow exceptions on an individual level<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; Eric-Paul<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Notes:<br>&gt;&gt;&gt; * I&#39;m using the word &#39;entity&#39; to lump types and extensions together under one term. There must be a better term, please do share!<br>&gt;&gt;&gt; * My examples are based off of my experience with Swift 2.2, even though I believe the concepts still apply in 2.3 and the 3.0-beta.<br>&gt;&gt;&gt; * Protocols don&#39;t allow access modification on individual members, of course, similar to an enum&#39;s cases.<br>&gt;&gt;&gt; * Didn&#39;t find any similar topics in the [commonly rejected list](https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md)<br>&gt;&gt;&gt; * There&#39;s a [newly accepted proposal](https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md#proposed-solution) that adds `fileprivate` as a fourth access level modifier.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other discussions about access levels, yet not what I was looking for:<br>&gt;&gt;&gt; * [Default access control / Access control blocks] (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/013683.html)<br>&gt;&gt;&gt; * [Access modifier blocks] (https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160613/020968.html)<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/9e5a42e0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
