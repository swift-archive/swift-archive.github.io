<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 22, 2016 at 07:00:00pm</p></header><div class="content"><p>on Sun May 22 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I haven&#39;t had the<br>&gt;&gt; chance to consider all the implications yet, but—at least until someone<br>&gt;&gt; can demonstrate that we really custom == for classes—we should be open<br>&gt;&gt; to the idea as we consider the value semantics story.<br>&gt;<br>&gt; I&#39;ve been lurking and skimming the discussion around this so far, but<br>&gt; I&#39;ll speak up at this point. I really do think making `==` always be<br>&gt; an identity check for class types is not a realistic option.<br>&gt;<br>&gt; What you&#39;re proposing is essentially what Objective-C does. When Swift<br>&gt; was introduced, the ability to use operators like `==` to mean<br>&gt; *logical* equality instead of *referential* equality was touted as a<br>&gt; major advantage. And it *is* a major advantage for readability—`text1<br>&gt; == text2` (where text1 and text2 are, say, NSMutableString or<br>&gt; NSAttributedString) is much nicer than `text1.isEqual(text2)`. <br></p><p>Yes, but:<br></p><p>1. The equality operator is supposed to mean substitutability, and the<br>   the fact that identity is significant for mutable class types means<br>   `==` instances are not substitutable for one another.<br></p><p>2. IIUC these things should not be reference types in Swift, and pretty<br>   soon they won&#39;t be.<br></p><p>&gt; We would be giving up a significant feature of the language for a<br>&gt; vision of purity that most programmers don&#39;t (think they) care about.<br></p><p>Not for a “vision of purity;” for coherence and simplicity.  If Swift<br>was about addressing only things programmers *think* they care about, we<br>wouldn&#39;t have value semantic arrays or strings.<br></p><p>&gt; Now, one thing you *could* do is allow overloading of `==` and instead<br>&gt; take `===` for this purpose. `===` is already an identity check on<br>&gt; reference types and unavailable on value types; for value types, it<br>&gt; could be defined as always equivalent to `==`. This would leave `==`<br>&gt; open to user definition on class types, while exposing your value<br>&gt; equality operation as `===`.<br></p><p>I think that would continue to break generic programming.  There are<br>already a few generic components in the standard library that won&#39;t work<br>as expected with reference types, and these were written by people aware<br>of the issue!  I don&#39;t think this is a practical programming model for<br>most people.<br></p><p>We&#39;d have to tell them, “it doesn&#39;t matter that your algorithm seems to<br>work just fine with `==` when you tested it with `Int`s; you have to use<br>`===` or it will break in subtle ways when used with reference types.<br>And when you *do* use `===`, remember that you&#39;re only getting reference<br>equality, so the equality semantics you normally expect for mutable<br>reference types doesn&#39;t apply.”  It&#39;s just not a tenable system.<br></p><p>&gt; Either way, though, if `Hashable` is always identity-based on class<br>&gt; types, that will cause bridging issues. <br>&gt; NSDictionary and Dictionary (or NSSet and Set) will no longer agree on<br>&gt; which objects are distinct and which are not. Converting from the<br>&gt; Swift type to the Foundation type and back again may lose elements. If<br>&gt; we broaden `===` to all instances, `Hashable` will probably still need<br>&gt; to be tied to `==`, not `===`.<br></p><p>If all these reference types bridge to values in Swift, I don&#39;t think we<br>have a problem.<br></p><p>&gt; It&#39;s unfortunate that those darned users are always getting in the way<br>&gt; of our elegant designs. :^)<br></p><p>Smiley aside, I don&#39;t agree with your implication that I&#39;m prioritizing<br>purity over user experience.  This is *all about* the user experience.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
