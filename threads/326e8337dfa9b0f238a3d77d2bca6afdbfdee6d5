<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94fc7b58c03a0650fe1e8d78140bd451?s=50"></div><header><strong>Inconsistent behaviour of forward declarations</strong> from <string>Dan Cutting</string> &lt;dan at cutting.io&gt;<p>January  9, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>This code builds and runs fine:<br></p><p>func foo() -&gt; Int { return soon + 1 }<br>let soon = 1<br></p><p>But the following code has a compilation error (“Use of unresolved identifier ‘soon’”):<br></p><p>func foo() -&gt; Int { return soon + 1 }<br>let wat = true<br>let soon = 1<br></p><p>Any ideas why? Is this a bug in Swift or intended behaviour?<br></p><p>I might expect either or neither of these to work, but to have one work and one fail is perplexing.<br></p><p>Thanks,<br>Dan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160109/326ee6d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a3b25a47532e94ff5871af45bd74710?s=50"></div><header><strong>Inconsistent behaviour of forward declarations</strong> from <string>Victor Guerra</string> &lt;vguerra at gmail.com&gt;<p>January  9, 2016 at 10:00:00pm</p></header><div class="content"><p>hi Dan,<br></p><p>Seems to work when using Swift 2.2 Snapshot from 6th of jan:<br></p><p>Welcome to Apple Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b,<br>Swift 54dcd16759). Type :help for assistance.<br>  1&gt; func foo() -&gt; Int { return soon + 1 }<br>  2. let wat = true<br>  3. let soon = 1<br>wat: Bool = true<br>soon: Int = 1<br>  4&gt; foo()<br>$R0: Int = 2<br></p><p>I am able to reproduce the bug on a playground though where swift 2.1 is<br>used I guess.<br></p><p>On Sat, Jan 9, 2016 at 10:44 PM Dan Cutting via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; This code builds and runs fine:<br>&gt;<br>&gt; func foo() -&gt; Int { return soon + 1 }<br>&gt; let soon = 1<br>&gt;<br>&gt; But the following code has a compilation error (“Use of unresolved<br>&gt; identifier ‘soon’”):<br>&gt;<br>&gt; func foo() -&gt; Int { return soon + 1 }<br>&gt; let wat = true<br>&gt; let soon = 1<br>&gt;<br>&gt; Any ideas why? Is this a bug in Swift or intended behaviour?<br>&gt;<br>&gt; I might expect either or neither of these to work, but to have one work<br>&gt; and one fail is perplexing.<br>&gt;<br>&gt; Thanks,<br>&gt; Dan<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160109/698a4628/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94fc7b58c03a0650fe1e8d78140bd451?s=50"></div><header><strong>Inconsistent behaviour of forward declarations</strong> from <string>Dan Cutting</string> &lt;dan at cutting.io&gt;<p>January  9, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks Victor.<br></p><p>Actually, that snippet works in the v2.1.1 REPL as well, so I think the REPL environment works differently.<br></p><p>Both v2.1.1 and v2.2-dev fail when running that code as a script.<br></p><p>Thanks,<br>Dan<br></p><p><br>&gt; On 9 Jan 2016, at 10:41 PM, Victor Guerra &lt;vguerra at gmail.com&gt; wrote:<br>&gt; <br>&gt; hi Dan, <br>&gt; <br>&gt; Seems to work when using Swift 2.2 Snapshot from 6th of jan: <br>&gt; <br>&gt; Welcome to Apple Swift version 2.2-dev (LLVM 3ebdbb2c7e, Clang f66c5bb67b, Swift 54dcd16759). Type :help for assistance.<br>&gt;   1&gt; func foo() -&gt; Int { return soon + 1 } <br>&gt;   2. let wat = true <br>&gt;   3. let soon = 1<br>&gt; wat: Bool = true<br>&gt; soon: Int = 1<br>&gt;   4&gt; foo()<br>&gt; $R0: Int = 2<br>&gt; <br>&gt; I am able to reproduce the bug on a playground though where swift 2.1 is used I guess. <br>&gt; <br>&gt; On Sat, Jan 9, 2016 at 10:44 PM Dan Cutting via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hi,<br>&gt; <br>&gt; This code builds and runs fine:<br>&gt; <br>&gt; func foo() -&gt; Int { return soon + 1 }<br>&gt; let soon = 1<br>&gt; <br>&gt; But the following code has a compilation error (“Use of unresolved identifier ‘soon’”):<br>&gt; <br>&gt; func foo() -&gt; Int { return soon + 1 }<br>&gt; let wat = true<br>&gt; let soon = 1<br>&gt; <br>&gt; Any ideas why? Is this a bug in Swift or intended behaviour?<br>&gt; <br>&gt; I might expect either or neither of these to work, but to have one work and one fail is perplexing.<br>&gt; <br>&gt; Thanks,<br>&gt; Dan<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160109/5f50102b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a3b25a47532e94ff5871af45bd74710?s=50"></div><header><strong>Inconsistent behaviour of forward declarations</strong> from <string>Victor Guerra</string> &lt;vguerra at gmail.com&gt;<p>January  9, 2016 at 11:00:00pm</p></header><div class="content"><p>On Sat, Jan 9, 2016 at 11:56 PM Dan Cutting &lt;dan at cutting.io&gt; wrote:<br></p><p>&gt; Thanks Victor.<br>&gt;<br>&gt; Actually, that snippet works in the v2.1.1 REPL as well, so I think the<br>&gt; REPL environment works differently.<br>&gt;<br>&gt;<br>Both v2.1.1 and v2.2-dev fail when running that code as a script.<br>&gt;<br>&gt;<br>You are right Dan. I did give it a try previously from the REPL. And yes,<br>fails if scripted.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160109/e4dcfc3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Inconsistent behaviour of forward declarations</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>January 10, 2016 at 10:00:00am</p></header><div class="content"><p>I think the codes should not run in a playground file. But they should run<br>in a swift file. Both assuming they are outside a class/struct/enum.<br></p><p>Because in playground, codes run from top to bottom; in swift file, all<br>global variables and functions are known by the compiler before the app<br>runs.<br></p><p>zhaoxin<br></p><p>On Sun, Jan 10, 2016 at 7:08 AM, Victor Guerra via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Sat, Jan 9, 2016 at 11:56 PM Dan Cutting &lt;dan at cutting.io&gt; wrote:<br>&gt;<br>&gt;&gt; Thanks Victor.<br>&gt;&gt;<br>&gt;&gt; Actually, that snippet works in the v2.1.1 REPL as well, so I think the<br>&gt;&gt; REPL environment works differently.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Both v2.1.1 and v2.2-dev fail when running that code as a script.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; You are right Dan. I did give it a try previously from the REPL. And yes,<br>&gt; fails if scripted.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>Owen Zhao<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160110/75b9229d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/094f3e16a9a1276cde39096860496ad8?s=50"></div><header><strong>Inconsistent behaviour of forward declarations</strong> from <string>Joshua Scott Emmons</string> &lt;skia at skia.net&gt;<p>January 10, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; <br>&gt; You are right Dan. I did give it a try previously from the REPL. And yes, fails if scripted. <br></p><p>I think what you&#39;re running into here is the different ways the REPL, Playgrounds, and .swift files are initialized (esp. with respect to globals). There&#39;s some interesting talk about this on the (original) Swift blog at Apple: https://developer.apple.com/swift/blog/#article-18<br></p><p>&quot;Most Swift files in your app are order-independent, meaning you can use a type before it is defined, and can even import modules at the bottom of the file (although that is not recommended Swift style.)&quot;<br></p><p>&quot;Code within a playground file is order-dependent, run in top-down lexical order. For example, you can’t use a type before you define it.&quot;<br></p><p>&quot;The exception is a special file named “main.swift”, which behaves much like a playground file, but is built with your app’s source code. &quot;<br></p><p>&quot;Given how Swift determines where to start executing an app, how should global variables work? ... In a single-file program, code is executed top-down, similar to the behavior of variables within a function. Pretty simple. The answer for complex apps is less obvious... [Swift] runs the initializer for a global the first time it is referenced, similar to Java ... which is the best of all worlds: it allows custom initializers, startup time in Swift scales cleanly with no global initializers to slow it down, and the order of execution is completely predictable.&quot;<br></p><p>This was from back in beta days, but I&#39;m pretty sure it still applies.<br></p><p>-- <br>Cheers!<br>-jemmons<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160110/52b3e3e7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
