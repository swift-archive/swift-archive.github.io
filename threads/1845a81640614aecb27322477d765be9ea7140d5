<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Dropping Comparable requirement for indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  7, 2016 at 03:00:00pm</p></header><div class="content"><p>on Thu Jul 07 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 7 Jul 2016, at 02:41, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Jul 06 2016, Haravikk &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On 6 Jul 2016, at 03:39, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; For example, with<br>&gt;&gt;&gt;&gt; Comparable indices, you can&#39;t build a linked list that supports<br>&gt;&gt;&gt;&gt; restructuring (e.g. insert, delete, splice) in O(1) without invalidating<br>&gt;&gt;&gt;&gt; indices... not even an unsafe linked list with reference semantics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the question is why you need to retain indices in these cases?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When it comes to these operations I wonder if we might want to<br>&gt;&gt;&gt; investigate something like a mutating iterator; you might still use an<br>&gt;&gt;&gt; index to jump to an initial position, but then use .insert(),<br>&gt;&gt;&gt; .remove() etc. methods of the iterator to perform modification without<br>&gt;&gt;&gt; the need to track indices at all. <br>&gt;&gt; <br>&gt;&gt; There is no way, AFAIK, to implement important algorithms like rotate<br>&gt;&gt; binarySearch and several others, without having some representation of<br>&gt;&gt; position within a collection.<br>&gt;&gt; <br>&gt;&gt;&gt; This is essentially how you want to edit trees anyway, as indexing<br>&gt;&gt;&gt; them isn&#39;t especially pretty, as it avoids the need to track the<br>&gt;&gt;&gt; indices at all for these operations, and many common cases should work<br>&gt;&gt;&gt; well when done as part of an iterator in this way.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know what you mean by “track,” here.  We don&#39;t track the<br>&gt;&gt; indices of an array.<br>&gt;<br>&gt; By track I just mean store in a variable.<br>&gt;<br>&gt; As an example, consider removing multiple values using a closure:<br>&gt;<br>&gt; 	let delete:(Int) -&gt; Bool = { ($0 % 2) == 1 } // Delete all odd numbers<br>&gt; 	let filtered = myArray.filter { !delete($0) } // Produces new copy of array with elements filtered<br>&gt;<br>&gt; 	// In-place removal<br>&gt; 	var index = myArray.startIndex, indices:[Array&lt;Int&gt;.Index] = []<br>&gt; 	for eachElement in myArray {<br>&gt; 		if delete(eachElement) { indices.append(index) }<br>&gt; 		myArray.formIndex(after: &amp;index)<br>&gt; 	}<br>&gt; 	for eachIndex in indices { myArray.remove(at: eachIndex }<br></p><p>I&#39;m afraid that doesn&#39;t work (remove elements from [0, 1] with the<br>predicate {true}), and even if it did work it would take O(N^2) time and<br>O(N) space.  The right algorithm is O(N) time and O(1) space.<br></p><p>&gt; The latter case only works with types where you know that there&#39;s a<br>&gt; safe way to use the indices (removing in reverse order doesn&#39;t<br>&gt; invalidate earlier indices of Array) so it&#39;s not suitable for generic<br>&gt; collections. <br></p><p>Exercise for the reader: write a generic one that works for any<br>RangeReplaceableCollection.  It should be easy.  Hint: you only want one<br>call removeSubrange.<br></p><p>&gt; Since it requires iterating myArray anyway, then if the removals could<br>&gt; be performed at the same time it would eliminate the need to store and<br>&gt; then use indices at all, and would be a much better way to work with<br>&gt; linked-lists, trees and so-on. So with a mutable iterator for example<br>&gt; the in-place removal would look like:<br>&gt;<br>&gt; 	var iterator = myArray.makeMutatingIterator()<br>&gt; 	while let eachElement = iterator.next() {<br>&gt; 		if delete(eachElement) { iterator.remove() }<br>&gt; 	}<br></p><p>In general, because arrays have value semantics, there&#39;s no way to<br>mutate the array through another object such as a mutating iterator.<br>And even if there was a way, it would still force the whole<br>array&#39;s storage to be cloned at least once, which is not something we<br>want to pay for.<br></p><p>&gt; Maybe this isn&#39;t directly applicable to this topic, but this for<br>&gt; example seems like a better solution to the linked list problems<br>&gt; raised than removing Comparable as a requirement which was my intended<br>&gt; point, that perhaps this isn&#39;t necessary?<br>&gt;<br>&gt; Otherwise I think the main issue with types that don&#39;t seem like they<br>&gt; can implement Comparable is that they need a means of detecting that<br>&gt; they&#39;ve been invalidated; arguably a singly-linked list&#39;s indices<br>&gt; should become unusable if it has been changed, which could be done for<br>&gt; example by giving the list a mutationCount value that is incremented<br>&gt; each time it is mutated; indices would take a copy of this value and<br>&gt; if they don&#39;t match, they produce a runtime error. Like so (heavily<br>&gt; abridged):<br>&gt;<br>&gt; 	struct LinkedListIndex&lt;Element&gt; : Comparable {<br>&gt; 		let mutationCount:Int<br>&gt; 		var position:Int, node:LinkedListNode&lt;Element&gt;<br>&gt; 	}<br>&gt; 	func == &lt;E&gt;(lhs:LinkedListIndex&lt;E&gt;, rhs:LinkedListIndex&lt;E&gt;) { return lhs.position == rhs.position }<br>&gt; 	func &lt; &lt;E&gt;(lhs:LinkedListIndex&lt;E&gt;, rhs:LinkedListIndex&lt;E&gt;) { return lhs.position &lt; rhs.position }<br>&gt;<br>&gt; 	class LinkedListNode&lt;Element&gt; {<br>&gt; 		var element:Element, next:LinkedListNode&lt;Element&gt;?<br>&gt; 		init(_ element:Element) { self.element = element }<br>&gt; 	}<br>&gt;<br>&gt; 	struct LinkedList&lt;Element&gt; : Indexable {<br>&gt; 		var mutationCount:Int = 0, head:LinkedListNode&lt;Element&gt;?, tail:LinkedListNode&lt;Element&gt;?<br>&gt;<br>&gt; 		typealias Index = LinkedListIndex<br>&gt; 		var startIndex:Index { return LinkedListIndex(mutationCount: self.mutationCount, position: 0) }<br>&gt; 		func formIndex(after i:inout Index) {<br>&gt; 			precondition(i.mutationCount == self.mutationCount, &quot;Invalid index&quot;)<br>&gt; 			i.position += 1<br>&gt; 			i.node = i.node?.next<br>&gt; 		}<br>&gt; 		func index(after i:Index) -&gt; Index { var i = i; self.formIndex(after: &amp;i); return i }<br>&gt; 		subscript(i:Index) -&gt; Element {<br>&gt; 			precondition(i.mutationCount == self.mutationCount, &quot;Invalid index&quot;)<br>&gt; 			return i.node!.element<br>&gt; 		}<br>&gt;<br>&gt; 		mutating func append(_ element:Element) {<br>&gt; 			let node = LinkedListNode(element)<br>&gt; 			if self.tail == nil { self.head = node; self.tail = node }<br>&gt; 			else { self.tail.next = node; self.tail = node }<br>&gt; 			self.mutationCount = self.mutationCount &amp;+ 1<br>&gt; 		}<br>&gt; 	}<br>&gt;<br>&gt; Please forgive typos/omissions, tried to keep it as short as possible. But yeah, this is essentially how I&#39;d try to implement a linked list, while retaining the Comparable constraint.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
