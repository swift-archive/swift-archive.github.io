<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2e16111dba5701b975ab2b47beb013cf?s=50"></div><header><strong>TreeLiteralConvertible</strong> from <string>Milos Rankovic</string> &lt;milos.and.slavica at me.com&gt;<p>April 14, 2016 at 01:00:00pm</p></header><div class="content"><p>In Swift, we cannot compile:<br></p><p>_ = [[], 1, [2, 3], [[4, 5], [6, 7], [8, 9]]]<br></p><p>The reason for the compile-time error is that we are not in fact creating an array, but a tree – a more general structure of which arrays are only a special case. Given the well-deserved and growing reputation of Swift, one would hope that in this instance the compiler would be able to default to something like a:<br></p><p>enum Tree&lt;Value&gt; {<br>	case Leaf(Value)<br>	case Branches([Tree])<br>}<br></p><p>extension Tree : ArrayLiteralConvertible {<br>	init(arrayLiteral elements: Tree...) {<br>		self = .Branches(elements)<br>	}<br>}<br></p><p>For this to work in the playground, however, we must manually lift the values into the world of trees first. And to make that chore in turn easier on the eye we can introduce a:<br></p><p>prefix operator ◊ {} // looks a bit like a leaf (us/uk kbd: ⎇⇧V)<br>prefix func ◊ &lt;T&gt; (leaf: T) -&gt; Tree&lt;T&gt; { return .Leaf(leaf) }<br></p><p>let tree: Tree&lt;Int&gt; = [[], ◊1, [◊2, ◊3], [[◊4, ◊5], [◊6, ◊7], [◊8, ◊9]]]<br></p><p>The point here is that if adding such a fundamental type to the Standard Library would not be a priority at present, it is not the end of the world since we can easily enough write it ourselves… What we cannot do ourselves, however, is to get rid of the need for that operator. For this we need a literal-convertible protocol requiring two initialisers:<br></p><p>protocol TreeLiteralConvertible {<br>	associatedtype Element<br>	init(literal: Element...)<br>	init(literal: Tree&lt;Element&gt;...)<br>}<br></p><p>Then we could simply:<br></p><p>let tree: Tree&lt;Int&gt; = [[], 1, [2, 3], [[4, 5], [6, 7], [8, 9]]]<br></p><p>And, whilst we are at it, we could also get rid of the need for that operator in the case of nested associative arrays (again, you can try this in the playground):<br></p><p>enum DictionaryTree&lt;Key, Value&gt; {<br>	case Leaf(Value)<br>	case Branches([(Key, DictionaryTree)])<br>}<br></p><p>extension DictionaryTree : DictionaryLiteralConvertible {<br>	init(dictionaryLiteral pairs: (Key, DictionaryTree)...) {<br>		self = .Branches(pairs)<br>	}<br>}<br></p><p>prefix func ◊ &lt;Key, Value&gt; (leaf: Value) -&gt; DictionaryTree&lt;Key, Value&gt; { return .Leaf(leaf) }<br></p><p>let map: DictionaryTree&lt;String,Int&gt; = [<br>	&quot;A&quot; : [:],<br>	&quot;B&quot; : [<br>		&quot;Ba&quot; : ◊0,<br>		&quot;Bb&quot; : ◊0,<br>		&quot;Bc&quot; : [<br>			&quot;Bc1&quot; : ◊0,<br>			&quot;Bc2&quot; : ◊0,<br>			&quot;Bc3&quot; : ◊0<br>		]<br>	]<br>]<br></p><p>… by introducing an analogous protocol:<br></p><p>protocol DictionaryTreeLiteralConvertible {<br>	associatedtype Key<br>	associatedtype Value<br>	init(literal: Value...)<br>	init(literal: (Key, DictionaryTree&lt;Key, Value&gt;)...)<br>}<br></p><p>Please note: I do understand that fleshing out these structures (along with all the juicy methods, operators and lazy alternatives) may not currently be a priority for Swift. The two literal-convertible protocols however, may be a much less daunting task, which would open to us some very useful programming idioms…<br></p><p>milos<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/240317d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>TreeLiteralConvertible</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April 14, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 14 Apr 2016, at 13:26, Milos Rankovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Please disregard this, the earlier of the two posts with the subject “TreeLiteralConvertible&quot;. I appears it escaped me while composing. <br></p><p>With embarrassment and apologies,<br></p><p>milos<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/28955894/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
