<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 05:00:00pm</p></header><div class="content"><p>on Wed May 04 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of SE-0045: &quot;Add scan, prefix(while:), drop(while:), and<br>&gt; unfold to the stdlib&quot; ran from April 28...May 3, 2016. A subset of the<br>&gt; proposal is *accepted, with modifications* for Swift 3.  This proposal<br>&gt; included four new additions to the standard library:<br>&gt;<br>&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br></p><p>I know the review is over and all, but…<br></p><p>Chris brought to my attention an idea that I liked, and asked me to post<br>here about it.  Specifically, the argument label “where:” would probably<br>be better than “while:”.  “While” makes it sound to me like it&#39;s going<br>to take a nullary predicate and be much more active.  But it&#39;s hard to<br>love<br></p><p>     s.drop(where: { $0 &gt; 1 })<br>     s.drop { $0 &gt; 1 }<br></p><p>because it makes it sound like a general filtering operation.<br></p><p>Therefore, I&#39;d much rather see<br></p><p>       s.droppingPrefix(where: {$0 &gt; 1})<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May  6, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, May 6, 2016, at 05:19 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; <br>&gt; on Wed May 04 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt; &gt;<br>&gt; &gt; Hello Swift Community,<br>&gt; &gt;<br>&gt; &gt; The review of SE-0045: &quot;Add scan, prefix(while:), drop(while:), and<br>&gt; &gt; unfold to the stdlib&quot; ran from April 28...May 3, 2016. A subset of the<br>&gt; &gt; proposal is *accepted, with modifications* for Swift 3.  This proposal<br>&gt; &gt; included four new additions to the standard library:<br>&gt; &gt;<br>&gt; &gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt; <br>&gt; I know the review is over and all, but…<br>&gt; <br>&gt; Chris brought to my attention an idea that I liked, and asked me to post<br>&gt; here about it.  Specifically, the argument label “where:” would probably<br>&gt; be better than “while:”.  “While” makes it sound to me like it&#39;s going<br>&gt; to take a nullary predicate and be much more active.  But it&#39;s hard to<br>&gt; love<br>&gt; <br>&gt;      s.drop(where: { $0 &gt; 1 })<br>&gt;      s.drop { $0 &gt; 1 }<br>&gt; <br>&gt; because it makes it sound like a general filtering operation.<br>&gt; <br>&gt; Therefore, I&#39;d much rather see<br>&gt; <br>&gt;        s.droppingPrefix(where: {$0 &gt; 1})<br></p><p>Using &quot;where:&quot; has a very high potential for confusion, because &quot;where&quot; makes it sound like it runs the predicate against every single element, whereas &quot;while&quot; makes it clear that it stops evaluating elements once the predicate returns false. Or in other words, `drop(where: predicate)` looks like it should be equivalent to `filter({ !predicate($0) })`.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May  6, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, May 6, 2016, at 05:31 PM, Kevin Ballard wrote:<br>&gt; On Fri, May 6, 2016, at 05:19 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; &gt; <br>&gt; &gt; on Wed May 04 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Hello Swift Community,<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; The review of SE-0045: &quot;Add scan, prefix(while:), drop(while:), and<br>&gt; &gt; &gt; unfold to the stdlib&quot; ran from April 28...May 3, 2016. A subset of the<br>&gt; &gt; &gt; proposal is *accepted, with modifications* for Swift 3.  This proposal<br>&gt; &gt; &gt; included four new additions to the standard library:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt; &gt; <br>&gt; &gt; I know the review is over and all, but…<br>&gt; &gt; <br>&gt; &gt; Chris brought to my attention an idea that I liked, and asked me to post<br>&gt; &gt; here about it.  Specifically, the argument label “where:” would probably<br>&gt; &gt; be better than “while:”.  “While” makes it sound to me like it&#39;s going<br>&gt; &gt; to take a nullary predicate and be much more active.  But it&#39;s hard to<br>&gt; &gt; love<br>&gt; &gt; <br>&gt; &gt;      s.drop(where: { $0 &gt; 1 })<br>&gt; &gt;      s.drop { $0 &gt; 1 }<br>&gt; &gt; <br>&gt; &gt; because it makes it sound like a general filtering operation.<br>&gt; &gt; <br>&gt; &gt; Therefore, I&#39;d much rather see<br>&gt; &gt; <br>&gt; &gt;        s.droppingPrefix(where: {$0 &gt; 1})<br>&gt; <br>&gt; Using &quot;where:&quot; has a very high potential for confusion, because &quot;where&quot; makes it sound like it runs the predicate against every single element, whereas &quot;while&quot; makes it clear that it stops evaluating elements once the predicate returns false. Or in other words, `drop(where: predicate)` looks like it should be equivalent to `filter({ !predicate($0) })`.<br></p><p>Oops, I read your message too fast and missed the fact that you changed the function name too in the very last line.<br></p><p>If we switched to `droppingPrefix(where:)` then we&#39;d need to change `dropFirst(_:)` as well.<br></p><p>-Kevin<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
