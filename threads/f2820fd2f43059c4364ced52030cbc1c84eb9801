<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/56cb5a1cac292ddd8f5688fc031e0103?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Oliver M</string> &lt;selectedfordeletion at yahoo.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>Regarding In-Out Parameters:<br>My gut reaction to typing &#39;inout&#39; in front of every parameter I want to call by reference is that it makes code look rather waffly.<br>So I&#39;m reflecting an idea on this:<br></p><p>Use = to assign values.<br>Use : to associate variables.<br></p><p><br>A function declaration would look like this:<br>func addInt(add intToAdd = Int, to counterInt : Int ) {<br>    counterInt += intToAdd<br>}<br></p><p><br>Here is example code for a game of &#39;think of a number&#39; where you pick a random number and do some basic maths on it.<br></p><p>//declare the function<br>func multiplyAdd(multiplyBy intToMultiply = Int, add intToAdd = Int, toNumber pickedInt : Int) {    pickedInt *= intToMultiply    pickedInt += intToAdd<br>}<br></p><p><br>//declare some variables<br>var multiplier = 2var adder = 3var pickNumber = 4<br></p><p>//call the function<br>multiplyAdd(multiplyBy = multiplier, add = adder, toNumber : pickNumber)<br></p><p>It takes a little getting used to, but it does look quite clean.<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/f2829801/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; My gut reaction to typing &#39;inout&#39; in front of every parameter I want to call by reference is that it makes code look rather waffly.<br>&gt; <br>&gt; So I&#39;m reflecting an idea on this:<br>&gt; <br>&gt; <br>&gt; Use = to assign values.<br>&gt; <br>&gt; Use : to associate variables.<br>&gt; <br>&gt; <br>&gt; <br>&gt; A function declaration would look like this:<br>&gt; <br>&gt; func addInt(add intToAdd = Int, to counterInt : Int ) {<br>&gt;     counterInt += intToAdd<br>&gt; }<br></p><p>This doesn&#39;t work with unlabeled parameters. I think it also makes inout parameters too invisible; they have unusual semantics and ought to be marked. I don&#39;t think it&#39;s a good idea to overload `=` for parameter passing; it requires different spacing to look right, and the change would alter literally every method call in existing code. `=` is also semantically heavier than `:`, and yet it&#39;s being used in the lighter role here. And I think it makes inout parameters too &quot;easy&quot;—they&#39;re a pretty rare case and it&#39;s okay to require more than zero extra characters to declare them.<br></p><p>In short, -1.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 11 Feb 2016, at 23:29, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; My gut reaction to typing &#39;inout&#39; in front of every parameter I want to call by reference is that it makes code look rather waffly.<br>&gt;&gt; <br>&gt;&gt; So I&#39;m reflecting an idea on this:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Use = to assign values.<br>&gt;&gt; <br>&gt;&gt; Use : to associate variables.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; A function declaration would look like this:<br>&gt;&gt; <br>&gt;&gt; func addInt(add intToAdd = Int, to counterInt : Int ) {<br>&gt;&gt;    counterInt += intToAdd<br>&gt;&gt; }<br>&gt; <br>&gt; This doesn&#39;t work with unlabeled parameters. I think it also makes inout parameters too invisible; they have unusual semantics and ought to be marked. I don&#39;t think it&#39;s a good idea to overload `=` for parameter passing; it requires different spacing to look right, and the change would alter literally every method call in existing code. `=` is also semantically heavier than `:`, and yet it&#39;s being used in the lighter role here. And I think it makes inout parameters too &quot;easy&quot;—they&#39;re a pretty rare case and it&#39;s okay to require more than zero extra characters to declare them.<br>&gt; <br>&gt; In short, -1.<br></p><p>It’s a nice idea, but I have to agree with Brent; I think that while it’s concise, it’s not necessarily clear, especially if a function may have both inout parameters and parameters with default values. Also I tend to favour a little bit of extra verbosity, especially on things that may not be used a lot (depends on what you’re doing of course); while inout isn’t my favourite term it’s at least fairly clear of what it’s for to someone encountering it for the first time, though I might have gone with reference, or ref (in keeping with the three letter var and let) but that may just be me.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>thoughts on &#39;inout&#39;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 12, 2016 at 12:00:00am</p></header><div class="content"><p>If we were to change stuff for greater conciseness, don’t you think<br></p><p>	func addInt(a: &amp;Int, b: &amp;Int)<br>	addInt(&amp;a, &amp;b)<br></p><p>would be a less confusing solution than messing with : and = ?<br></p><p>— Radek<br></p><p>&gt; On 12 Feb 2016, at 00:17, Oliver M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Regarding In-Out Parameters:<br>&gt; <br>&gt; My gut reaction to typing &#39;inout&#39; in front of every parameter I want to call by reference is that it makes code look rather waffly.<br>&gt; <br>&gt; So I&#39;m reflecting an idea on this:<br>&gt; <br>&gt; <br>&gt; Use = to assign values.<br>&gt; <br>&gt; Use : to associate variables.<br>&gt; <br>&gt; <br>&gt; <br>&gt; A function declaration would look like this:<br>&gt; <br>&gt; func addInt(add intToAdd = Int, to counterInt : Int ) {<br>&gt;     counterInt += intToAdd<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Here is example code for a game of &#39;think of a number&#39; where you pick a random number and do some basic maths on it.<br>&gt; <br>&gt; //declare the function<br>&gt; <br>&gt; func multiplyAdd(multiplyBy intToMultiply = Int, add intToAdd = Int, toNumber pickedInt : Int) {<br>&gt;     pickedInt *= intToMultiply<br>&gt;     pickedInt += intToAdd<br>&gt; }<br>&gt; <br>&gt; <br>&gt; //declare some variables<br>&gt; <br>&gt; var multiplier = 2<br>&gt; var adder = 3<br>&gt; var pickNumber = 4<br>&gt; <br>&gt; <br>&gt; //call the function<br>&gt; <br>&gt; multiplyAdd(multiplyBy = multiplier, add = adder, toNumber : pickNumber)<br>&gt; <br>&gt; <br>&gt; It takes a little getting used to, but it does look quite clean.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/2ce6e599/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
