<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>SE-0028 Debugging Identifier #filename</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>April 11, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I have a small question about SE-0028, &quot;Modernizing Swift&#39;s Debugging Identifiers&quot;<br>https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br></p><p>I think this is a great feature, because I think it makes it clearer that there a special syntactic rules involved when the debug-identifier is written as &quot;#file&quot; instead of __FILE__.<br></p><p>Will &quot;#filename&quot; also be included in Swift 3.0? It&#39;s basically the same as #file.lastPathComponent, but with the additional safety feature that you cannot find the full pathnames when analyzing the executable file. I saw it mentioned in the proposal, but I&#39;m not sure if it was accepted, or if it is just an idea for some later Swift version. I think the idea is great. I think adding #filename would be an improvement. In the past, when writing Objective-C, I used the __FILE__ macro quite a few times, usually for writing logging macros. And in the function that gets called eventually, I always strip away all but the last path component (using strrchr()). (&quot;#file&quot; should stay, I&#39;m not suggesting that it is replaced with &quot;#filename&quot;, I only suggest that &quot;#filename&quot; be added.)<br></p><p>Another alternative would be to make &quot;#file.lastPathComponent&quot; a debugging-identifier that is handled by the preprocessor, so we could write something like<br></p><p>    func myLog(msg: String, filename: String = #file.lastPathComponent, line: Int = #line) { ... }<br></p><p>and the preprocessor would optimize away the call to lastPathComponent, so that the lastPathComponent function doesn&#39;t have to be called at runtime.<br></p><p>Regards,<br>Michael<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SE-0028 Debugging Identifier #filename</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 11, 2016 at 09:00:00pm</p></header><div class="content"><p>This was already brought up on list. See: [Pitch] Introducing #fileName debug identifier. Module-relative path seems to be most highly requested form of #file. Chris Lattner had the final word, <br></p><p>&quot;In this case, I don’t think that more is better.  Having too many options and knobs is not good for anyone.  Having #file produce the module-relative path (including the module name) serves all of the use-cases that I’m aware of, since you can further slice and dice it to get the base file name out. &quot;<br></p><p>To my best understanding this was the end of the discussion, leaving two loose threads:<br>	1. Actually introducing the change, which I&#39;m not sure if it needs a bug report or what<br>	2. Gregorizing the #function literal to match the new method/function naming scheme<br></p><p>-- E<br></p><p><br>&gt; On Apr 11, 2016, at 3:48 PM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I have a small question about SE-0028, &quot;Modernizing Swift&#39;s Debugging Identifiers&quot;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br>&gt; <br>&gt; I think this is a great feature, because I think it makes it clearer that there a special syntactic rules involved when the debug-identifier is written as &quot;#file&quot; instead of __FILE__.<br>&gt; <br>&gt; Will &quot;#filename&quot; also be included in Swift 3.0? It&#39;s basically the same as #file.lastPathComponent, but with the additional safety feature that you cannot find the full pathnames when analyzing the executable file. I saw it mentioned in the proposal, but I&#39;m not sure if it was accepted, or if it is just an idea for some later Swift version. I think the idea is great. I think adding #filename would be an improvement. In the past, when writing Objective-C, I used the __FILE__ macro quite a few times, usually for writing logging macros. And in the function that gets called eventually, I always strip away all but the last path component (using strrchr()). (&quot;#file&quot; should stay, I&#39;m not suggesting that it is replaced with &quot;#filename&quot;, I only suggest that &quot;#filename&quot; be added.)<br>&gt; <br>&gt; Another alternative would be to make &quot;#file.lastPathComponent&quot; a debugging-identifier that is handled by the preprocessor, so we could write something like<br>&gt; <br>&gt;    func myLog(msg: String, filename: String = #file.lastPathComponent, line: Int = #line) { ... }<br>&gt; <br>&gt; and the preprocessor would optimize away the call to lastPathComponent, so that the lastPathComponent function doesn&#39;t have to be called at runtime.<br>&gt; <br>&gt; Regards,<br>&gt; Michael<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/1a6f0690/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
