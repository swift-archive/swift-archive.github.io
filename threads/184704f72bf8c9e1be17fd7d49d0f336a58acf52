<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>May 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/<br>0088-libdispatch-for-swift3.md&gt;<br></p><p>## Type Names<br></p><p>I was going to suggest unprefixed type names, but having to qualify both<br>`Dispatch.Data` and `Foundation.Data` would be an issue. If libdispatch<br>had originally been part of Foundation, you&#39;d need prefixes anyway:<br></p><p>* DispatchQueue<br>* NotificationQueue<br>* OperationQueue<br></p><p>## Quality of Service<br></p><p>Should argument labels and type names match those in Foundation?<br></p><p>* qos:        =&gt; qualityOfService:<br>* DispatchQoS =&gt; DispatchQualityOfService<br></p><p>Could there be a shared `Swift.QualityOfService` enum?<br></p><p>* QOS_CLASS_DEFAULT = 0x15<br>* NSQualityOfServiceDefault = -1<br></p><p>The `.unspecified` QoS is not defined in NSQualityOfService.<br>Would an optional QoS parameter (defaulting to nil) be better?<br></p><p>## Time<br></p><p>The `dispatch_time` function uses a nanoseconds delta, so the operator<br>overloads taking `seconds: Double` might be ambiguous at the call site.<br>You could try changing the associated value types of your enum.<br></p><p>```<br>enum DispatchTimeInterval {<br>    case      seconds(Double) // changed from `Int`<br>    case milliseconds(Int64)  // changed from `Int`<br>    case microseconds(Int64)  // changed from `Int`<br>    case  nanoseconds(Int64)  // changed from `Int`<br>}<br></p><p>let _ = DispatchTime.now + 3.5 // ambiguous?<br>let a = DispatchTime.now +      .seconds(3.5)<br>let b = DispatchTime.now + .milliseconds(3_500)<br>let c = DispatchTime.now + .microseconds(3_500_000)<br>let d = DispatchTime.now +  .nanoseconds(3_500_000_000)<br>```<br></p><p>Is the `DispatchTime.now` in your example a type property?<br></p><p>## Data<br></p><p>Should the `DispatchData.append` methods have `contentsOf:` labels?<br>Or could it conform to the RangeReplaceableCollection protocol?<br></p><p>## Queues<br></p><p>My suggestions for the async/sync methods:<br></p><p>* enqueue(...)<br>* enqueueAndWaitUntilFinished(...)<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/901d914d4288b1c11599f55e0a452e8c?s=50"></div><header><strong>[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Matt Wright</string> &lt;mww at apple.com&gt;<p>May 12, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 12, 2016, at 7:00 AM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/<br>&gt; 0088-libdispatch-for-swift3.md&gt;<br>&gt; <br>&gt; ## Type Names<br>&gt; <br>&gt; I was going to suggest unprefixed type names, but having to qualify both<br>&gt; `Dispatch.Data` and `Foundation.Data` would be an issue. If libdispatch<br>&gt; had originally been part of Foundation, you&#39;d need prefixes anyway:<br>&gt; <br>&gt; * DispatchQueue<br>&gt; * NotificationQueue<br>&gt; * OperationQueue<br>&gt; <br>&gt; ## Quality of Service<br>&gt; <br>&gt; Should argument labels and type names match those in Foundation?<br>&gt; <br>&gt; * qos:        =&gt; qualityOfService:<br>&gt; * DispatchQoS =&gt; DispatchQualityOfService<br>&gt; <br>&gt; Could there be a shared `Swift.QualityOfService` enum?<br>&gt; <br>&gt; * QOS_CLASS_DEFAULT = 0x15<br>&gt; * NSQualityOfServiceDefault = -1<br>&gt; <br>&gt; The `.unspecified` QoS is not defined in NSQualityOfService.<br>&gt; Would an optional QoS parameter (defaulting to nil) be better?<br>&gt; <br>&gt; ## Time<br>&gt; <br>&gt; The `dispatch_time` function uses a nanoseconds delta, so the operator<br>&gt; overloads taking `seconds: Double` might be ambiguous at the call site.<br>&gt; You could try changing the associated value types of your enum.<br>&gt; <br>&gt; ```<br>&gt; enum DispatchTimeInterval {<br>&gt;    case      seconds(Double) // changed from `Int`<br>&gt;    case milliseconds(Int64)  // changed from `Int`<br>&gt;    case microseconds(Int64)  // changed from `Int`<br>&gt;    case  nanoseconds(Int64)  // changed from `Int`<br>&gt; }<br>&gt; <br>&gt; let _ = DispatchTime.now + 3.5 // ambiguous?<br></p><p>Are you talking about ambiguity at a compiler level, or in human-reading? The other four examples are an addition with an enum type, the first one is a double. There’s no compiler ambiguity here.<br></p><p>&gt; let a = DispatchTime.now +      .seconds(3.5)<br>&gt; let b = DispatchTime.now + .milliseconds(3_500)<br>&gt; let c = DispatchTime.now + .microseconds(3_500_000)<br>&gt; let d = DispatchTime.now +  .nanoseconds(3_500_000_000)<br>&gt; ```<br>&gt; <br>&gt; Is the `DispatchTime.now` in your example a type property?<br></p><p>DispatchTime.now() is a function that returns the current time. The subsequent examples are typos (now() became a method quite late in the proposal’s development) and I’ll fix it up before pushing a v2 proposal that’s fixed up a lot of the typos that arose from late changes.<br></p><p>&gt; <br>&gt; ## Data<br>&gt; <br>&gt; Should the `DispatchData.append` methods have `contentsOf:` labels?<br>&gt; Or could it conform to the RangeReplaceableCollection protocol?<br>&gt; <br>&gt; ## Queues<br>&gt; <br>&gt; My suggestions for the async/sync methods:<br>&gt; <br>&gt; * enqueue(...)<br>&gt; * enqueueAndWaitUntilFinished(...)<br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>May 12, 2016 at 10:00:00pm</p></header><div class="content"><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br></p><p>&gt; On 12 May 2016, at 19:03, Matt Wright &lt;mww at apple.com&gt; wrote:<br>&gt; <br>&gt; Are you talking about ambiguity at a compiler level, or in human-reading?<br></p><p>I meant ambiguous for people familiar with libdispatch. For example, the `interval`, `leeway`, and `delta` parameters of the following are all in nanoseconds:<br></p><p>* dispatch_io_set_interval<br>* dispatch_source_set_timer<br>* dispatch_time<br>* dispatch_walltime<br></p><p>```<br>_ = DispatchTime.now() + 3_500_000_000 // 3.5 seconds or 111 years?<br>_ = DispatchTime.now() + .seconds(3.5) // OK<br>```<br></p><p>The other associated value types were changed (from Int to Int64) to support 32-bit platforms.<br></p><p>DISPATCH_TIME_FOREVER can also be represented as an optional parameter:<br></p><p>```<br>func wait(timeout: DispatchTime? = nil)<br>```<br></p><p>Is it possible to eliminate the DispatchWalltime type?<br></p><p>```<br>public struct DispatchTime {<br></p><p>    private let _value: dispatch_time_t<br></p><p>    public init() {<br>        _value = dispatch_time(DISPATCH_TIME_NOW, 0)<br>    }<br></p><p>    public init(walltime: UnsafePointer&lt;timespec&gt;?) {<br>        _value = dispatch_walltime(walltime, 0)<br>    }<br>}<br>```<br></p><p>-- Ben<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
