<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2015bc9dfdb8fbb37c4f9c1f1e77a503?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Arsen Gasparyan</string> &lt;to.arsen.gasparyan at gmail.com&gt;<p>April  7, 2016 at 01:00:00pm</p></header><div class="content"><p>Hey guys,<br></p><p>The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment it<br>should have, to go along with reversed, sorted, joined, etc.<br>As I see Dmitri Gribenko already agree with it but we still have to discuss<br>it here. So what do you think?<br></p><p>Implementation: https://github.com/apple/swift/pull/2038<br></p><p>Cheers,<br>Arsen<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/84233e7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>April  7, 2016 at 10:00:00am</p></header><div class="content"><p>I agree. The related types (currently FlattenCollection, FlattenSequence) should get renamed as well.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  8, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment it should have, to go along with reversed, sorted, joined, etc.<br>&gt; As I see Dmitri Gribenko already agree with it but we still have to discuss it here. So what do you think?<br></p><p>I&#39;m in favor.<br></p><p>Though all of these things are terms of art, not all terms of art are created equal. For instance:<br></p><p>* `map` is supported by virtually any language which have any of these higher-order functions, and to my knowledge the name `map` is universally used.<br>* `reduce` is not quite as universally supported, but it&#39;s still very common, and most (but not quite all) languages with higher-order functions support it.<br>* `filter` is very widely supported, but the *name* `filter` is not quite so consistent. Ruby, for instance, calls it `select`, Perl calls it `grep`, etc.<br>* `takeWhile` lies on the other end of the spectrum, being very narrowly supported.<br></p><p>In my opinion, it would be a really bad idea to rename `map` or `reduce`; `filter` is probably a bad idea but not terrible; but we should feel relatively free to rename `takeWhile`.<br></p><p>`flatten` is nowhere near as weak a term of art as `takeWhile`, but I think it still falls towards that end of the spectrum. We shouldn&#39;t worry too much about changing it. `map`, `reduce`, and `filter` are much stronger terms, and we should be more cautious about changing them.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>April  8, 2016 at 06:00:00pm</p></header><div class="content"><p>Thanks Brent -- I completely agree with your assessment.<br>I was failing to come up with the proper argument for just about the same idea!<br></p><p>Guillaume Lessard<br></p><p><br>&gt; On 8 avr. 2016, at 18:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The &#39;flatten()&#39; method didn&#39;t get the Swift 3 API renaming treatment it should have, to go along with reversed, sorted, joined, etc.<br>&gt;&gt; As I see Dmitri Gribenko already agree with it but we still have to discuss it here. So what do you think?<br>&gt; <br>&gt; I&#39;m in favor.<br>&gt; <br>&gt; Though all of these things are terms of art, not all terms of art are created equal. For instance:<br>&gt; <br>&gt; * `map` is supported by virtually any language which have any of these higher-order functions, and to my knowledge the name `map` is universally used.<br>&gt; * `reduce` is not quite as universally supported, but it&#39;s still very common, and most (but not quite all) languages with higher-order functions support it.<br>&gt; * `filter` is very widely supported, but the *name* `filter` is not quite so consistent. Ruby, for instance, calls it `select`, Perl calls it `grep`, etc.<br>&gt; * `takeWhile` lies on the other end of the spectrum, being very narrowly supported.<br>&gt; <br>&gt; In my opinion, it would be a really bad idea to rename `map` or `reduce`; `filter` is probably a bad idea but not terrible; but we should feel relatively free to rename `takeWhile`.<br>&gt; <br>&gt; `flatten` is nowhere near as weak a term of art as `takeWhile`, but I think it still falls towards that end of the spectrum. We shouldn&#39;t worry too much about changing it. `map`, `reduce`, and `filter` are much stronger terms, and we should be more cautious about changing them.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 9 Apr 2016, at 01:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; `flatten` is nowhere near as weak a term of art as `takeWhile`, but I think it still falls towards that end of the spectrum. We shouldn&#39;t worry too much about changing it. `map`, `reduce`, and `filter` are much stronger terms, and we should be more cautious about changing them.<br></p><p>I still don’t see what’s being lost here, it’s not like the proposal is to radically rename them, all we’d end up with is .mapped(), .flattened(), .filtered() etc., which any good search engine should still be able to find, and will still come up in auto-completion if you start typing .map, .flatten and so-on. I just don’t see the point of even having naming conventions if we allow outside influences to force exceptions for IMO fairly weak reasons; it amounts to the “because everyone else is doing it” reasoning, but again, it’s not as if someone used to using .map is going to be suddenly lost and confused when presented with .mapped() instead.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 10, 2016 at 02:00:00pm</p></header><div class="content"><p>+1 for Haravikk&#39;s reasoning, mapped etc. are the best choice.<br></p><p>On Saturday, 9 April 2016, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 9 Apr 2016, at 01:32, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; `flatten` is nowhere near as weak a term of art as `takeWhile`, but I<br>&gt; think it still falls towards that end of the spectrum. We shouldn&#39;t worry<br>&gt; too much about changing it. `map`, `reduce`, and `filter` are much stronger<br>&gt; terms, and we should be more cautious about changing them.<br>&gt;<br>&gt; I still don’t see what’s being lost here, it’s not like the proposal is to<br>&gt; radically rename them, all we’d end up with is .mapped(), .flattened(),<br>&gt; .filtered() etc., which any good search engine should still be able to<br>&gt; find, and will still come up in auto-completion if you start typing .map,<br>&gt; .flatten and so-on. I just don’t see the point of even having naming<br>&gt; conventions if we allow outside influences to force exceptions for IMO<br>&gt; fairly weak reasons; it amounts to the “because everyone else is doing it”<br>&gt; reasoning, but again, it’s not as if someone used to using .map is going to<br>&gt; be suddenly lost and confused when presented with .mapped() instead.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/42eb8dd0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>April 10, 2016 at 07:00:00pm</p></header><div class="content"><p>Yet another +1 for Haravikk&#39;s suggestion.<br></p><p>Naming conventions are a good thing and mapped, filtered etc. are a perfect fit. I don&#39;t see a reason for an exception here.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 09 Apr 2016, at 11:03, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Apr 2016, at 01:32, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; `flatten` is nowhere near as weak a term of art as `takeWhile`, but I think it still falls towards that end of the spectrum. We shouldn&#39;t worry too much about changing it. `map`, `reduce`, and `filter` are much stronger terms, and we should be more cautious about changing them.<br>&gt; <br>&gt; I still don’t see what’s being lost here, it’s not like the proposal is to radically rename them, all we’d end up with is .mapped(), .flattened(), .filtered() etc., which any good search engine should still be able to find, and will still come up in auto-completion if you start typing .map, .flatten and so-on. I just don’t see the point of even having naming conventions if we allow outside influences to force exceptions for IMO fairly weak reasons; it amounts to the “because everyone else is doing it” reasoning, but again, it’s not as if someone used to using .map is going to be suddenly lost and confused when presented with .mapped() instead.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; I still don’t see what’s being lost here, it’s not like the proposal is to radically rename them, all we’d end up with is .mapped(), .flattened(), .filtered() etc., which any good search engine should still be able to find, and will still come up in auto-completion if you start typing .map, .flatten and so-on. I just don’t see the point of even having naming conventions if we allow outside influences to force exceptions for IMO fairly weak reasons; it amounts to the “because everyone else is doing it” reasoning, but again, it’s not as if someone used to using .map is going to be suddenly lost and confused when presented with .mapped() instead.<br></p><p>As someone who has been using `map` for virtually my entire programming career, across languages as different as Perl, Haskell, Ruby, Objective-C (with my own categories) and now Swift, I would be as surprised by a `map` named `mapped` as I would be by a letter addressed to &quot;Brented&quot;.<br></p><p>The naming exception is simple and principled: When other languages have universally adopted a given name, and there&#39;s nothing particularly wrong with that name except that it doesn&#39;t match Swift conventions, don&#39;t fight the trend just to be different, or just to be self-consistent. People would figure out `mapped`, sure, but `map` causes not even a moment of confusion.<br></p><p>Do you also think that trigonometry should be `foo.sined`, `foo.cosined`, and `foo.tangented`? Or maybe `foo.sine`, `foo.cosine`, and `foo.tangent`, with corresponding `foo.formSine`, `foo.formCosine`, and `foo.formTangent` functions?<br></p><p>Remember the first and most important sentence in the API Guidelines: &quot;Clarity at the point of use is your most important goal.&quot; If there is a universally-accepted nomenclature for a particular operation, the clearest thing we can do is to adopt it, even if it doesn&#39;t match our normal guidelines.<br></p><p>Consistency is a powerful and satisfying goal, but we must be careful not to be seduced by it. &quot;A foolish consistency is the hobgoblin of little minds.&quot; When there is a compelling reason to deviate from the guidelines, we should be prepared to do so.*<br></p><p>Consistency in API naming is a means to convey semantics, not an end in itself. We must not let the cart be put before the horse.<br></p><p>(Besides, since they take arguments, we should favor `mapping`, `filtering`, `flatMapping`, etc. Or perhaps even `mappingFlattened` for the last one. Can you see the rabbit hole we&#39;re beginning to tumble down?)<br></p><p><br></p><p>* Well, as the people writing the guidelines, we should try to modify the guidelines to write a general rule accommodating the deviation, because any situation we encounter is likely to be encountered by others as well. We&#39;ve done that in this case by writing the &quot;term of art&quot; rule.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>April 11, 2016 at 08:00:00am</p></header><div class="content"><p>Totally agree with Brent, map/flatMap are terms of art.<br></p><p>Sent from my iPad<br></p><p>On 10 Apr 2016, at 23:11, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I still don’t see what’s being lost here, it’s not like the proposal is to radically rename them, all we’d end up with is .mapped(), .flattened(), .filtered() etc., which any good search engine should still be able to find, and will still come up in auto-completion if you start typing .map, .flatten and so-on. I just don’t see the point of even having naming conventions if we allow outside influences to force exceptions for IMO fairly weak reasons; it amounts to the “because everyone else is doing it” reasoning, but again, it’s not as if someone used to using .map is going to be suddenly lost and confused when presented with .mapped() instead.<br>&gt; <br>&gt; As someone who has been using `map` for virtually my entire programming career, across languages as different as Perl, Haskell, Ruby, Objective-C (with my own categories) and now Swift, I would be as surprised by a `map` named `mapped` as I would be by a letter addressed to &quot;Brented&quot;.<br>&gt; <br>&gt; The naming exception is simple and principled: When other languages have universally adopted a given name, and there&#39;s nothing particularly wrong with that name except that it doesn&#39;t match Swift conventions, don&#39;t fight the trend just to be different, or just to be self-consistent. People would figure out `mapped`, sure, but `map` causes not even a moment of confusion.<br>&gt; <br>&gt; Do you also think that trigonometry should be `foo.sined`, `foo.cosined`, and `foo.tangented`? Or maybe `foo.sine`, `foo.cosine`, and `foo.tangent`, with corresponding `foo.formSine`, `foo.formCosine`, and `foo.formTangent` functions?<br>&gt; <br>&gt; Remember the first and most important sentence in the API Guidelines: &quot;Clarity at the point of use is your most important goal.&quot; If there is a universally-accepted nomenclature for a particular operation, the clearest thing we can do is to adopt it, even if it doesn&#39;t match our normal guidelines.<br>&gt; <br>&gt; Consistency is a powerful and satisfying goal, but we must be careful not to be seduced by it. &quot;A foolish consistency is the hobgoblin of little minds.&quot; When there is a compelling reason to deviate from the guidelines, we should be prepared to do so.*<br>&gt; <br>&gt; Consistency in API naming is a means to convey semantics, not an end in itself. We must not let the cart be put before the horse.<br>&gt; <br>&gt; (Besides, since they take arguments, we should favor `mapping`, `filtering`, `flatMapping`, etc. Or perhaps even `mappingFlattened` for the last one. Can you see the rabbit hole we&#39;re beginning to tumble down?)<br>&gt; <br>&gt; <br>&gt; <br>&gt; * Well, as the people writing the guidelines, we should try to modify the guidelines to write a general rule accommodating the deviation, because any situation we encounter is likely to be encountered by others as well. We&#39;ve done that in this case by writing the &quot;term of art&quot; rule.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 19, 2016 at 11:00:00am</p></header><div class="content"><p>Totally agree with Brent, too. And I wouldn&#39;t rename flatten either.<br></p><p>-Thorsten <br></p><p>&gt; Am 11.04.2016 um 08:03 schrieb David Hart via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Totally agree with Brent, map/flatMap are terms of art.<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On 10 Apr 2016, at 23:11, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I still don’t see what’s being lost here, it’s not like the proposal is to radically rename them, all we’d end up with is .mapped(), .flattened(), .filtered() etc., which any good search engine should still be able to find, and will still come up in auto-completion if you start typing .map, .flatten and so-on. I just don’t see the point of even having naming conventions if we allow outside influences to force exceptions for IMO fairly weak reasons; it amounts to the “because everyone else is doing it” reasoning, but again, it’s not as if someone used to using .map is going to be suddenly lost and confused when presented with .mapped() instead.<br>&gt;&gt; <br>&gt;&gt; As someone who has been using `map` for virtually my entire programming career, across languages as different as Perl, Haskell, Ruby, Objective-C (with my own categories) and now Swift, I would be as surprised by a `map` named `mapped` as I would be by a letter addressed to &quot;Brented&quot;.<br>&gt;&gt; <br>&gt;&gt; The naming exception is simple and principled: When other languages have universally adopted a given name, and there&#39;s nothing particularly wrong with that name except that it doesn&#39;t match Swift conventions, don&#39;t fight the trend just to be different, or just to be self-consistent. People would figure out `mapped`, sure, but `map` causes not even a moment of confusion.<br>&gt;&gt; <br>&gt;&gt; Do you also think that trigonometry should be `foo.sined`, `foo.cosined`, and `foo.tangented`? Or maybe `foo.sine`, `foo.cosine`, and `foo.tangent`, with corresponding `foo.formSine`, `foo.formCosine`, and `foo.formTangent` functions?<br>&gt;&gt; <br>&gt;&gt; Remember the first and most important sentence in the API Guidelines: &quot;Clarity at the point of use is your most important goal.&quot; If there is a universally-accepted nomenclature for a particular operation, the clearest thing we can do is to adopt it, even if it doesn&#39;t match our normal guidelines.<br>&gt;&gt; <br>&gt;&gt; Consistency is a powerful and satisfying goal, but we must be careful not to be seduced by it. &quot;A foolish consistency is the hobgoblin of little minds.&quot; When there is a compelling reason to deviate from the guidelines, we should be prepared to do so.*<br>&gt;&gt; <br>&gt;&gt; Consistency in API naming is a means to convey semantics, not an end in itself. We must not let the cart be put before the horse.<br>&gt;&gt; <br>&gt;&gt; (Besides, since they take arguments, we should favor `mapping`, `filtering`, `flatMapping`, etc. Or perhaps even `mappingFlattened` for the last one. Can you see the rabbit hole we&#39;re beginning to tumble down?)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; * Well, as the people writing the guidelines, we should try to modify the guidelines to write a general rule accommodating the deviation, because any situation we encounter is likely to be encountered by others as well. We&#39;ve done that in this case by writing the &quot;term of art&quot; rule.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 19, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; Totally agree with Brent, too. And I wouldn&#39;t rename flatten either.<br></p><p>A brief postscript on terms of art:<br></p><p>I wrote my first Python this week. I was very glad that `map` was named `map`. I just had to glance at the docs to see whether it was a function or a method and which argument came first. It took less time and involved less doubt than learning their closure syntax did.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 19, 2016 at 08:00:00pm</p></header><div class="content"><p>Although I personally don&#39;t feel this is right decision(renaming) for a <br>number of reasons, but the new API Design Guidelines were already accepted <br>and it seems like nothing can be changed already:<br></p><p>API Design Guidelines (SE-0023)<br>https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>https://swift.org/documentation/api-design-guidelines/<br></p><p>It seems like most of us like and support these changes. Even if some have <br>IMO strong arguments against it.<br></p><p>So we just have to accept all these mapped/sorted, and following the API <br>Design Guidelines we just *must* to have *flattened* instead of *flatten*<br></p><p>Don&#39;t see any possibilities to discuss this. Opinions?<br></p><p>On 19.04.2016 12:30, Thorsten Seitz via swift-evolution wrote:<br>&gt; Totally agree with Brent, too. And I wouldn&#39;t rename flatten either.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;&gt; Am 11.04.2016 um 08:03 schrieb David Hart via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; Totally agree with Brent, map/flatMap are terms of art.<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On 10 Apr 2016, at 23:11, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;&gt; I still don’t see what’s being lost here, it’s not like the proposal is to radically rename them, all we’d end up with is .mapped(), .flattened(), .filtered() etc., which any good search engine should still be able to find, and will still come up in auto-completion if you start typing .map, .flatten and so-on. I just don’t see the point of even having naming conventions if we allow outside influences to force exceptions for IMO fairly weak reasons; it amounts to the “because everyone else is doing it” reasoning, but again, it’s not as if someone used to using .map is going to be suddenly lost and confused when presented with .mapped() instead.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As someone who has been using `map` for virtually my entire programming career, across languages as different as Perl, Haskell, Ruby, Objective-C (with my own categories) and now Swift, I would be as surprised by a `map` named `mapped` as I would be by a letter addressed to &quot;Brented&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The naming exception is simple and principled: When other languages have universally adopted a given name, and there&#39;s nothing particularly wrong with that name except that it doesn&#39;t match Swift conventions, don&#39;t fight the trend just to be different, or just to be self-consistent. People would figure out `mapped`, sure, but `map` causes not even a moment of confusion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Do you also think that trigonometry should be `foo.sined`, `foo.cosined`, and `foo.tangented`? Or maybe `foo.sine`, `foo.cosine`, and `foo.tangent`, with corresponding `foo.formSine`, `foo.formCosine`, and `foo.formTangent` functions?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Remember the first and most important sentence in the API Guidelines: &quot;Clarity at the point of use is your most important goal.&quot; If there is a universally-accepted nomenclature for a particular operation, the clearest thing we can do is to adopt it, even if it doesn&#39;t match our normal guidelines.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Consistency is a powerful and satisfying goal, but we must be careful not to be seduced by it. &quot;A foolish consistency is the hobgoblin of little minds.&quot; When there is a compelling reason to deviate from the guidelines, we should be prepared to do so.*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Consistency in API naming is a means to convey semantics, not an end in itself. We must not let the cart be put before the horse.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (Besides, since they take arguments, we should favor `mapping`, `filtering`, `flatMapping`, etc. Or perhaps even `mappingFlattened` for the last one. Can you see the rabbit hole we&#39;re beginning to tumble down?)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * Well, as the people writing the guidelines, we should try to modify the guidelines to write a general rule accommodating the deviation, because any situation we encounter is likely to be encountered by others as well. We&#39;ve done that in this case by writing the &quot;term of art&quot; rule.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 10 Apr 2016, at 22:11, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt; Do you also think that trigonometry should be `foo.sined`, `foo.cosined`, and `foo.tangented`?<br></p><p>sine, cosine etc. are all nouns so I think as computed properties they’d be fine as is?<br></p><p>&gt; If there is a universally-accepted nomenclature for a particular operation, the clearest thing we can do is to adopt it, even if it doesn&#39;t match our normal guidelines.<br></p><p>It still makes me uncomfortable to accept something purely because it is “universal”, as I’d wager that most languages with these terms have chosen them for the same reason, i.e- they&#39;re common because they&#39;re common, rather than because they’re necessarily the best terms for each language. It’s like a self-fulfilling prophecy; if Swift accepts them because they’re common, then it continues to make them common; as long as that trend continues they’ll never cease to be common.<br></p><p>I know it’s pretty minor in the scheme of things, but I don’t see that we lose anything by naming them consistently.<br></p><p>flatMap is certainly a pain in the ass in this case, but perhaps there’s a better alternative that isn’t comprised of two other method names? i.e- what is it most commonly used to actually achieve, perhaps there’s a more suitable term from that? It’s not a method I’ve ever actually found myself using, as the only cases I’ve come close I’ve always had some kind of hiccup that prevent me from taking advantage of it, so had to use something more complex instead.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 11, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;&gt; Do you also think that trigonometry should be `foo.sined`, `foo.cosined`, and `foo.tangented`?<br>&gt; <br>&gt; sine, cosine etc. are all nouns so I think as computed properties they’d be fine as is?<br></p><p>So you would favor these?<br></p><p>	_ = number.sine()<br>	_ = number.cosine()<br>	_ = number.tangent()<br>	<br>	number.formSine()<br>	number.formCosine()<br>	number.formTangent()<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[SR-933] Rename flatten to flattened</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>With regard to trig they are functions:<br></p><p> let s = sin(x)<br></p><p>so not really relevant. But if the were made members then:<br></p><p>  let s = x.sined<br>  x.sin()<br></p><p>Would read well.<br></p><p>On Tuesday, 12 April 2016, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;&gt; Do you also think that trigonometry should be `foo.sined`,<br>&gt; `foo.cosined`, and `foo.tangented`?<br>&gt; &gt;<br>&gt; &gt; sine, cosine etc. are all nouns so I think as computed properties they’d<br>&gt; be fine as is?<br>&gt;<br>&gt; So you would favor these?<br>&gt;<br>&gt;         _ = number.sine()<br>&gt;         _ = number.cosine()<br>&gt;         _ = number.tangent()<br>&gt;<br>&gt;         number.formSine()<br>&gt;         number.formCosine()<br>&gt;         number.formTangent()<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/f7b94fd5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
