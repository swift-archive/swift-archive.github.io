<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>July  4, 2016 at 05:00:00pm</p></header><div class="content"><p>(Resending — this didn’t get any responses when I sent it a month ago.)<br></p><p>Swift 2.2 in Xcode 7.3.1.<br></p><p>Apparently you cannot use a named tuple constant as an expression pattern in a case label.<br></p><p>func test(x: Int, y: Int) -&gt; Int {<br>   let int_1 = 1<br>   switch x {<br>   case 0:<br>       return 0<br>   case int_1:<br>       return 1<br>   default:<br>       break<br>   }<br></p><p>   let int_1_1: (Int, Int) = (1, 1)<br>   switch (x, y) {<br>   case (0, 0):<br>       return 0<br>   case int_1_1:	// &lt;&lt;&lt;&lt;<br>       return 1<br>   default:<br>       return -1<br>   }<br>}<br></p><p>error: expression pattern of type &#39;(Int, Int)&#39; cannot match values of type &#39;(Int, Int)&#39;<br>   case int_1_1:<br>        ^~~~~~~<br></p><p>The error message is particularly amusing.<br></p><p>	- Neil Faiman<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  5, 2016 at 10:00:00am</p></header><div class="content"><p>I think switch treats (x,y) as two variables instead of a tuple. So it<br>prohibits int_1_1 as it looks like one value only at the first glance.<br>Below two expressions will work.<br></p><p>case (int_1_1.0,int_1_1.1):        // &lt;&lt;&lt;&lt;<br></p><p>case let foo where foo == int_1_1:        // &lt;&lt;&lt;&lt;<br></p><p>​That why you can use something like<br></p><p>case (_, 10)<br></p><p><br></p><p>​Zhaoxin ​<br></p><p><br>On Tue, Jul 5, 2016 at 5:56 AM, Neil Faiman via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; (Resending — this didn’t get any responses when I sent it a month ago.)<br>&gt;<br>&gt; Swift 2.2 in Xcode 7.3.1.<br>&gt;<br>&gt; Apparently you cannot use a named tuple constant as an expression pattern<br>&gt; in a case label.<br>&gt;<br>&gt; func test(x: Int, y: Int) -&gt; Int {<br>&gt;    let int_1 = 1<br>&gt;    switch x {<br>&gt;    case 0:<br>&gt;        return 0<br>&gt;    case int_1:<br>&gt;        return 1<br>&gt;    default:<br>&gt;        break<br>&gt;    }<br>&gt;<br>&gt;    let int_1_1: (Int, Int) = (1, 1)<br>&gt;    switch (x, y) {<br>&gt;    case (0, 0):<br>&gt;        return 0<br>&gt;    case int_1_1:        // &lt;&lt;&lt;&lt;<br>&gt;        return 1<br>&gt;    default:<br>&gt;        return -1<br>&gt;    }<br>&gt; }<br>&gt;<br>&gt; error: expression pattern of type &#39;(Int, Int)&#39; cannot match values of type<br>&gt; &#39;(Int, Int)&#39;<br>&gt;    case int_1_1:<br>&gt;         ^~~~~~~<br>&gt;<br>&gt; The error message is particularly amusing.<br>&gt;<br>&gt;         - Neil Faiman<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/12d12085/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  5, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;d definitely consider that a bug. Can you file it at bugs.swift.org?<br></p><p>Jordan<br></p><p>&gt; On Jul 4, 2016, at 14:56, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; (Resending — this didn’t get any responses when I sent it a month ago.)<br>&gt; <br>&gt; Swift 2.2 in Xcode 7.3.1.<br>&gt; <br>&gt; Apparently you cannot use a named tuple constant as an expression pattern in a case label.<br>&gt; <br>&gt; func test(x: Int, y: Int) -&gt; Int {<br>&gt;   let int_1 = 1<br>&gt;   switch x {<br>&gt;   case 0:<br>&gt;       return 0<br>&gt;   case int_1:<br>&gt;       return 1<br>&gt;   default:<br>&gt;       break<br>&gt;   }<br>&gt; <br>&gt;   let int_1_1: (Int, Int) = (1, 1)<br>&gt;   switch (x, y) {<br>&gt;   case (0, 0):<br>&gt;       return 0<br>&gt;   case int_1_1:	// &lt;&lt;&lt;&lt;<br>&gt;       return 1<br>&gt;   default:<br>&gt;       return -1<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; error: expression pattern of type &#39;(Int, Int)&#39; cannot match values of type &#39;(Int, Int)&#39;<br>&gt;   case int_1_1:<br>&gt;        ^~~~~~~<br>&gt; <br>&gt; The error message is particularly amusing.<br>&gt; <br>&gt; 	- Neil Faiman<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>July  5, 2016 at 09:00:00pm</p></header><div class="content"><p>SR-1993.<br></p><p>&gt; On Jul 5, 2016, at 4:15 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I&#39;d definitely consider that a bug. Can you file it at bugs.swift.org?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Jul 4, 2016, at 14:56, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; (Resending — this didn’t get any responses when I sent it a month ago.)<br>&gt;&gt; <br>&gt;&gt; Swift 2.2 in Xcode 7.3.1.<br>&gt;&gt; <br>&gt;&gt; Apparently you cannot use a named tuple constant as an expression pattern in a case label.<br>&gt;&gt; <br>&gt;&gt; func test(x: Int, y: Int) -&gt; Int {<br>&gt;&gt;  let int_1 = 1<br>&gt;&gt;  switch x {<br>&gt;&gt;  case 0:<br>&gt;&gt;      return 0<br>&gt;&gt;  case int_1:<br>&gt;&gt;      return 1<br>&gt;&gt;  default:<br>&gt;&gt;      break<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt;  let int_1_1: (Int, Int) = (1, 1)<br>&gt;&gt;  switch (x, y) {<br>&gt;&gt;  case (0, 0):<br>&gt;&gt;      return 0<br>&gt;&gt;  case int_1_1:	// &lt;&lt;&lt;&lt;<br>&gt;&gt;      return 1<br>&gt;&gt;  default:<br>&gt;&gt;      return -1<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; error: expression pattern of type &#39;(Int, Int)&#39; cannot match values of type &#39;(Int, Int)&#39;<br>&gt;&gt;  case int_1_1:<br>&gt;&gt;       ^~~~~~~<br>&gt;&gt; <br>&gt;&gt; The error message is particularly amusing.<br>&gt;&gt; <br>&gt;&gt; 	- Neil Faiman<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cb1ca7c823f65ddac613a22234a1c81?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Shane S</string> &lt;electro_alchemy at hotmail.com&gt;<p>July  6, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m not convinced that I see this as a bug, maybe more of a feature request?<br></p><p>The test given seems to be conflating a tuple-type with tuple-pattern…<br></p><p>Shane<br></p><p><br>&gt; On Jul 5, 2016, at 6:16 PM, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; SR-1993.<br>&gt; <br>&gt;&gt; On Jul 5, 2016, at 4:15 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d definitely consider that a bug. Can you file it at bugs.swift.org?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 4, 2016, at 14:56, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Resending — this didn’t get any responses when I sent it a month ago.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift 2.2 in Xcode 7.3.1.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Apparently you cannot use a named tuple constant as an expression pattern in a case label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func test(x: Int, y: Int) -&gt; Int {<br>&gt;&gt;&gt; let int_1 = 1<br>&gt;&gt;&gt; switch x {<br>&gt;&gt;&gt; case 0:<br>&gt;&gt;&gt;     return 0<br>&gt;&gt;&gt; case int_1:<br>&gt;&gt;&gt;     return 1<br>&gt;&gt;&gt; default:<br>&gt;&gt;&gt;     break<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let int_1_1: (Int, Int) = (1, 1)<br>&gt;&gt;&gt; switch (x, y) {<br>&gt;&gt;&gt; case (0, 0):<br>&gt;&gt;&gt;     return 0<br>&gt;&gt;&gt; case int_1_1:	// &lt;&lt;&lt;&lt;<br>&gt;&gt;&gt;     return 1<br>&gt;&gt;&gt; default:<br>&gt;&gt;&gt;     return -1<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; error: expression pattern of type &#39;(Int, Int)&#39; cannot match values of type &#39;(Int, Int)&#39;<br>&gt;&gt;&gt; case int_1_1:<br>&gt;&gt;&gt;      ^~~~~~~<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The error message is particularly amusing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Neil Faiman<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>July  6, 2016 at 11:00:00am</p></header><div class="content"><p>It’s actually more complicated than that.<br></p><p>case (0, 0): is a tuple-pattern, so its interpretation is well defined. case int_1_1: must be an expression-pattern, since it does’t match any of the other pattern kinds. So it should compare the value of the pattern expression case_1_1 against the value of the switch expression (x, y).<br></p><p>Now, the Swift Reference, in the Expression Patterns section, says<br></p><p>The expression represented by the expression pattern is compared with the value of an input expression using the Swift standard library ~= operator. The match succeeds if the ~= operator returns true. By default, the ~= operator compares two values of the same type using the == operator. …<br></p><p>If this were true, then my code would compile and work as I expected.<br></p><p>But in fact, I observe that the expression int_1_1 == (x, y) compiles, but the expression int_1_1 ~= (x, y) gets the error “Binary operator ‘~=‘ cannot be applied to two ‘(int, int)’ operands.”<br></p><p>This strongly suggests that the emphasized line in the Swift Reference quote does not correctly describe the language behavior — there is a bug either in the documentation (~= was not intended to be defined for tuple types) or in the standard library (~= was intended to be defined for tuple types, but never got implemented).<br></p><p>Regards,<br></p><p>	Neil<br></p><p><br>&gt; On Jul 6, 2016, at 10:00 AM, Shane S &lt;electro_alchemy at hotmail.com&gt; wrote:<br>&gt; <br>&gt; I’m not convinced that I see this as a bug, maybe more of a feature request?<br>&gt; <br>&gt; The test given seems to be conflating a tuple-type with tuple-pattern…<br>&gt; <br>&gt; Shane<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 5, 2016, at 6:16 PM, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; SR-1993.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 5, 2016, at 4:15 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d definitely consider that a bug. Can you file it at bugs.swift.org?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 4, 2016, at 14:56, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (Resending — this didn’t get any responses when I sent it a month ago.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift 2.2 in Xcode 7.3.1.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Apparently you cannot use a named tuple constant as an expression pattern in a case label.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func test(x: Int, y: Int) -&gt; Int {<br>&gt;&gt;&gt;&gt; let int_1 = 1<br>&gt;&gt;&gt;&gt; switch x {<br>&gt;&gt;&gt;&gt; case 0:<br>&gt;&gt;&gt;&gt;    return 0<br>&gt;&gt;&gt;&gt; case int_1:<br>&gt;&gt;&gt;&gt;    return 1<br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;    break<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let int_1_1: (Int, Int) = (1, 1)<br>&gt;&gt;&gt;&gt; switch (x, y) {<br>&gt;&gt;&gt;&gt; case (0, 0):<br>&gt;&gt;&gt;&gt;    return 0<br>&gt;&gt;&gt;&gt; case int_1_1:	// &lt;&lt;&lt;&lt;<br>&gt;&gt;&gt;&gt;    return 1<br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;    return -1<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; error: expression pattern of type &#39;(Int, Int)&#39; cannot match values of type &#39;(Int, Int)&#39;<br>&gt;&gt;&gt;&gt; case int_1_1:<br>&gt;&gt;&gt;&gt;     ^~~~~~~<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The error message is particularly amusing.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Neil Faiman<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/a9a9e9db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Expression pattern cannot be a named tuple constant</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 6, 2016, at 8:55, Neil Faiman &lt;neil.swift at faiman.org&gt; wrote:<br>&gt; <br>&gt; It’s actually more complicated than that.<br>&gt; <br>&gt; case (0, 0): is a tuple-pattern, so its interpretation is well defined. case int_1_1: must be an expression-pattern, since it does’t match any of the other pattern kinds. So it should compare the value of the pattern expression case_1_1 against the value of the switch expression (x, y).<br>&gt; <br>&gt; Now, the Swift Reference, in the Expression Patterns section, says<br>&gt; <br>&gt; The expression represented by the expression pattern is compared with the value of an input expression using the Swift standard library ~= operator. The match succeeds if the ~= operator returns true. By default, the ~= operator compares two values of the same type using the == operator. …<br>&gt; <br>&gt; If this were true, then my code would compile and work as I expected.<br>&gt; <br>&gt; But in fact, I observe that the expression int_1_1 == (x, y) compiles, but the expression int_1_1 ~= (x, y) gets the error “Binary operator ‘~=‘ cannot be applied to two ‘(int, int)’ operands.”<br>&gt; <br>&gt; This strongly suggests that the emphasized line in the Swift Reference quote does not correctly describe the language behavior — there is a bug either in the documentation (~= was not intended to be defined for tuple types) or in the standard library (~= was intended to be defined for tuple types, but never got implemented).<br></p><p>It&#39;s somewhere in between the two. More formally, &quot;by default, ~= compares two values of the same type using a conformance to Equatable&quot;. Since tuples aren&#39;t named types, they don&#39;t conform to Equatable, and so we don&#39;t use their == operator.<br></p><p>We could fix this by adding overloads of ~= for tuples, by having the compiler fall back to == in switches, or by eventually allowing tuples to conform to Equatable if their elements do (somehow). Maybe there are other answers I haven&#39;t thought of, too.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/1a5c7ae6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
