<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Add AnyHashable to the standard library</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 22, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>The implementation of SE-0116 &quot;Import Objective-C id as Swift Any type&quot;<br>requires a type-erased container for hashable values.<br></p><p>We are proposing to add such a type-erased container under the name<br>AnyHashable to the standard library.<br></p><p>This proposal is additive, source-breaking changes are discussed in SE-0116.<br></p><p>/// A type-erased hashable value.////// Forwards equality comparisons<br>and hashing operations to an/// underlying hashable value, hiding its<br>specific type.////// You can store mixed-type keys in `Dictionary` and<br>other/// collections that require `Hashable` by wrapping mixed-type<br>keys in/// `AnyHashable` instances://////     let descriptions:<br>[AnyHashable : Any] = [///         AnyHashable(&quot;ðŸ˜„&quot;): &quot;emoji&quot;,///<br>   AnyHashable(42): &quot;an Int&quot;,///         AnyHashable(Int8(43)): &quot;an<br>Int8&quot;,///         AnyHashable(Set([&quot;a&quot;, &quot;b&quot;])): &quot;a set of strings&quot;///<br>   ]///     print(descriptions[AnyHashable(42)]!)      // prints &quot;an<br>Int&quot;///     print(descriptions[AnyHashable(43)])       // prints<br>&quot;nil&quot;///     print(descriptions[AnyHashable(Int8(43))]!) // prints &quot;an<br>Int8&quot;///     print(descriptions[AnyHashable(Set([&quot;a&quot;, &quot;b&quot;]))]!) //<br>prints &quot;a set of strings&quot;public struct AnyHashable {<br>  /// Creates an opaque hashable value that wraps `base`.<br>  ///<br>  /// Example:<br>  ///<br>  ///     let x = AnyHashable(Int(42))<br>  ///     let y = AnyHashable(UInt8(42))<br>  ///<br>  ///     print(x == y) // Prints &quot;false&quot; because `Int` and `UInt8`<br>  ///                   // are different types.<br>  ///<br>  ///     print(x == AnyHashable(Int(42))) // Prints &quot;true&quot;.<br>  public init&lt;H : Hashable&gt;(_ base: H)<br></p><p>  /// The value wrapped in this `AnyHashable` instance.<br>  ///<br>  ///     let anyMessage = AnyHashable(&quot;Hello&quot;)<br>  ///     let unwrappedMessage: Any = anyMessage.base<br>  ///     print(unwrappedMessage) // prints &quot;hello&quot;<br>  public var base: Any<br>}<br>extension AnyHashable : Equatable, Hashable {<br>  public static func == (lhs: AnyHashable, rhs: AnyHashable) -&gt; Bool<br>  public var hashValue: Int {<br>}<br></p><p>We are adding convenience APIs to Set&lt;AnyHashable&gt; that allow using<br>existing Set APIs with concrete values that conform to Hashable. For<br>example:<br></p><p>func contains42(_ data: Set&lt;AnyHashable&gt;) -&gt; Bool {<br>  // Works, but is too verbose:<br>  // return data.contains(AnyHashable(42))<br></p><p>  return data.contains(42) // Convenience API.<br>}<br></p><p>extension Set where Element == AnyHashable {<br>  public func contains&lt;ConcreteElement : Hashable&gt;(<br>    _ member: ConcreteElement<br>  ) -&gt; Bool<br></p><p>  public func index&lt;ConcreteElement : Hashable&gt;(<br>    of member: ConcreteElement<br>  ) -&gt; SetIndex&lt;Element&gt;?<br></p><p>  mutating func insert&lt;ConcreteElement : Hashable&gt;(<br>    _ newMember: ConcreteElement<br>  ) -&gt; (inserted: Bool, memberAfterInsert: ConcreteElement)<br></p><p>  @discardableResult<br>  mutating func update&lt;ConcreteElement : Hashable&gt;(<br>    with newMember: ConcreteElement<br>  ) -&gt; ConcreteElement?<br></p><p>  @discardableResult<br>  mutating func remove&lt;ConcreteElement : Hashable&gt;(<br>    _ member: ConcreteElement<br>  ) -&gt; ConcreteElement?<br>}<br></p><p>Convenience APIs for Dictionary&lt;AnyHashable, *&gt;:<br></p><p>extension Dictionary where Key == AnyHashable {<br>  public func index&lt;ConcreteKey : Hashable&gt;(forKey key: ConcreteKey)<br>    -&gt; DictionaryIndex&lt;Key, Value&gt;?<br></p><p>  public subscript(_ key: _Hashable) -&gt; Value? { get set }<br></p><p>  @discardableResult<br>  public mutating func updateValue&lt;ConcreteKey : Hashable&gt;(<br>    _ value: Value, forKey key: ConcreteKey<br>  ) -&gt; Value?<br></p><p>  @discardableResult<br>  public mutating func removeValue&lt;ConcreteKey : Hashable&gt;(<br>    forKey key: ConcreteKey<br>  ) -&gt; Value?<br>}<br></p><p><br>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/507867d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Add AnyHashable to the standard library</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 22, 2016 at 03:00:00pm</p></header><div class="content"><p>You can view the full proposal here:<br>https://github.com/apple/swift-evolution/pull/458/files<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Add AnyHashable to the standard library</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 22, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 4:34 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You can view the full proposal here:<br>&gt; https://github.com/apple/swift-evolution/pull/458/files<br>&gt; <br>&gt; Dmitri<br>&gt; <br></p><p>The proposal looks solid. I would be in favor.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Add AnyHashable to the standard library</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>July 22, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 6:15 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Jul 22, 2016, at 4:34 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You can view the full proposal here:<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/458/files<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt; <br>&gt; The proposal looks solid. I would be in favor.<br></p><p>The proposal mostly just makes me long for robust existentials. Sigh.<br></p><p>But yes, given the limitations of Swift 3, this does seem useful.<br></p><p>P<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
