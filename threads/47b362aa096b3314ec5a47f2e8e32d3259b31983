<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/635a509f2fae0160f7c2391f2940b48c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Clemens Wagner</string> &lt;macmoonshine at gmx.de&gt;<p>December  6, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br></p><p>But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br></p><p>I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br></p><p>Cheers<br>Clemens<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>C-style For Loops</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>December  6, 2015 at 08:00:00am</p></header><div class="content"><p>https://github.com/apple/swift/commit/0d001480a94f975355cd458973d5c51cef55bff1<br></p><p>On Sunday, December 6, 2015, Clemens Wagner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; We’ve developed a number of Swift apps for various clients over the past<br>&gt; year and have not needed C style for loops either.<br>&gt;<br>&gt; But I think this is a very weak reason for *removing* any portion like<br>&gt; C-loops and increment or decrement operators of a programming language. How<br>&gt; about the developers and the productive code which used C-style loops<br>&gt; already?<br>&gt;<br>&gt; I understand the reasons why you, Erica and the others don’t like C-style<br>&gt; loops. But changing the philosophy of a productive programming language is<br>&gt; a very bad idea.<br>&gt;<br>&gt; Cheers<br>&gt; Clemens<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/ac5c649c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/635a509f2fae0160f7c2391f2940b48c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Clemens Wagner</string> &lt;macmoonshine at gmx.de&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>a little bit more explanation would be very helpful and welcome.<br></p><p>Cheers<br>Clemens<br></p><p>&gt; Am 06.12.2015 um 15:47 schrieb J. Cheyo Jimenez &lt;cheyo at masters3d.com&gt;:<br>&gt; <br>&gt; <br>&gt; https://github.com/apple/swift/commit/0d001480a94f975355cd458973d5c51cef55bff1<br>&gt; <br>&gt; On Sunday, December 6, 2015, Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt; <br>&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt; <br>&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt; <br>&gt; Cheers<br>&gt; Clemens<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>Last week, I made the following proposal for Swift:<br></p><p>The C-style for-loop appears to be a mechanical carry-over from C rather than a genuinely Swift-specific construct. It is rarely used and not very Swift-like.<br></p><p>More Swift-typical construction is already available with for-in statements and stride. Removing for loops would simplify the language and starve the most common use-points for -- and ++, which are already due to be eliminated from the language.<br></p><p>The value of this construct is limited and I believe its removal should be seriously considered.<br></p><p>Yesterday, I was on family time. Today, I am grabbing a little Swift-break to respond to the discussion I otherwise missed on-list. Please forgive the lateness of this response.<br></p><p>Lack of Language Necessity<br></p><p>Clemens writes:<br>&gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br></p><p><br>But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br></p><p>I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br></p><p>I don&#39;t think the C-style loop was ever really part of the language philosophy. It feels like a vestigial feature that no one ever got around to cleaning up. Its entire functionality is easily replaced by other, existing Swift constructs. While Swift design deliberately held onto C-like features for familiarity, I see no special benefit to retaining the for-loop.<br></p><p>In contrast, consider fallthrough. There was a discussion on Friday about fallthrough, and it quickly became apparent that losing this language feature would have a significant impact on a few key algorithms. Several list participant were able to pop forward and say &quot;without this feature, I would not be able to do X, Y or Z&quot;. I see no parallel case to be made for for-loops.<br></p><p>Lowered Readability and Maintainability<br></p><p>I have aesthetic reasons for disliking the for-loop. The C-style loop is harder to read especially for those not coming from C-style languages, easier to mess up at edge conditions, and is commonly used for side-effects which, in a language focused on safety, is not a feature to be encouraged. <br></p><p>For example, one side effect that was mentioned on-list yesterday was the incrementor, which is guaranteed in C-style to execute late:<br>Roland King writes:<br></p><p>for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>{<br>	// more than a few lines of code with early escape continues<br>}<br></p><p>shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can’t always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br></p><p>Late incrementor management is a feature that can be mimicked with defer, as pointed out by several other list members.<br></p><p>Another complaint regarded a loss of succinctness. Per Melin wrote: <br></p><p>Another example from the same LinkedList class. It finds the right place to insert a new node:<br></p><p>  for next = head; next != nil &amp;&amp; index &gt; 0; prev = next, next = next!.next, --index { }<br></p><p>Extreme? Probably, but I like it better than the same thing done in five lines of while loop.<br></p><p>I&#39;d argue that readability and maintainability are core API goals. Clarity is always to be preferred to brevity. Let me point you to Justin Etheredge&#39;s essay &quot;Don&#39;t be clever&quot; (http://www.codethinked.com/dont-be-clever). <br></p><p>So next time you go to write a super clever line of code, think to yourself &quot;Will the benefits of this super cleverness be outweighed by the future issues in maintaining and understanding the code?&quot; And if there is anyhesitation at all, then you better not be clever, because 3 months from now you will come across that code and say &quot;What the hell was I thinking?&quot; Then you’ll end up rewriting it anyway.<br></p><p>Incrementor Challenges<br></p><p>Another complaint involved forgetting or misplacing the incrementor when transforming items to while loops. There are two cases being glommed together here, and I&#39;d like to separate them.<br></p><p>First, there&#39;s a collection case, in which the collection provides its own indices. In such implementations, there&#39;s simply no need to manually declare and manage an index. You can use for-in.<br></p><p>Second, there&#39;s what I&#39;m going to call the bitmap case, where an index may refer to geometrically-related indices, which happens often in image processing. (I&#39;m going to repress any &quot;Just use Accelerate&quot; rant. This is a significant area of programming).  Here&#39;s some pseudocode that demonstrates how this might look in a for-loop-less Swift implementation:<br></p><p>    for row in 0..&lt;height {<br>        for column in 0..&lt;width {<br>            var sum: UInt = 0<br>            for rowOffset in -1...1 {<br>                for columnOffset in -1...1 {<br>                    let index = pixelOffsetAt(row + rowOffset, column + columnOffset) + redChannelOffset<br>                    sum += pixels[index]<br>                }<br>            }<br>            let currentRedPixelBlurredAverage = sum / 9<br>            // blah blah other stuff<br>        }<br>    }<br></p><p>Again, I don&#39;t see anything that would limit relative indexing  with this proposal.<br></p><p>The Skip Case<br></p><p>Matthijs Hollemans writes, <br></p><p>Another benefit of a C-style for loop is that it simply ignores the loop when n &lt;= i, as in the following example,<br></p><p>  for var i = 100; i &lt; n; ++i { ...<br></p><p>while the Swifty version gives an error because it cannot create a range where the end is smaller than the start: <br></p><p>  for i in 100..&lt;n { ...<br></p><p>Of course, you can add an if-statement to catch this but in the C-style loop this is implicit. Hence, it is more expressive.<br></p><p>I may be in the minority but I rather like that this becomes an error. The &quot;skip&quot; behavior reads to me as an unintended side-effect rather than a purposeful design goal. I prefer a philosophy that minimizes such possibilities in a safe modern language.<br></p><p>Issues of Type <br></p><p>Roland King writes,<br></p><p>I must be the only person who still likes C-style for loops on occasion. eg a loop with something floating point <br></p><p>I counter that stride addresses this for all conforming strideable types, not just floating point values. <br></p><p>Training Costs and Migration Benefits<br></p><p>The main argument against losing the feature seems to be the higher training costs for C-style coders and the higher porting costs for existing C-code.  I&#39;d argue that the training costs to a new language are significant and whether there&#39;s a C-style for loop will not materially change those overall costs, especially for those moving from Objective-C where the for-in loop is common. Second, porting to Swift should be motivated by an enhancement of safety and maintainability. Swift already supports external calls to C routines. If you want to keep your code in C, there&#39;s nothing stopping you from doing so. (Or to put it in American Politician-speak, &quot;If you like your C-code, you can keep your C-code&quot;)<br></p><p>More Direct Swift Replacements<br></p><p>After all this discussion, let me end with a suggestion proposed by Joe Groff for anyone who would still miss the for-loop by approximating the same control flow in native Swift:<br></p><p><br>func cStyleFor(@autoclosure init initializer: () -&gt; (), @autoclosure test: () -&gt; Bool, @autoclosure inc: () -&gt; (), body: () throws -&gt; ()) rethrows {<br>  // left as an exercise<br>}<br></p><p>var i = 0<br>cStyleFor(init: i = 0, test: i &lt; 10, inc: ++i) {<br>  print(i)<br>}<br></p><p>-Joe<br></p><p>The only feature this does not include, as pointed out by list members, is a co-declared variable binding. In a C-style for-loop, the &quot;i&quot; is bound as part of the declaration. In this implementation, it requires a separate declaration line and remains in the scope for its lifetime.<br></p><p>Wrap-up<br></p><p>I hope I have addressed the concerns brought up on-list. If I missed one of yours please feel free to reply. The voting and review period will be between 7 Dec and 10 Dec. Here is the master schedule: https://github.com/apple/swift-evolution/blob/master/schedule.md<br></p><p>Best regards,<br></p><p>-- Erica<br></p><p><br></p><p>&gt; On Dec 6, 2015, at 7:47 AM, J. Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; https://github.com/apple/swift/commit/0d001480a94f975355cd458973d5c51cef55bff1 &lt;https://github.com/apple/swift/commit/0d001480a94f975355cd458973d5c51cef55bff1&gt;<br>&gt; <br>&gt; On Sunday, December 6, 2015, Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt; <br>&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt; <br>&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt; <br>&gt; Cheers<br>&gt; Clemens<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/1b756a86/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/900e19fd7259c4962c14f7fee2cc9789?s=50"></div><header><strong>C-style For Loops</strong> from <string>Per Melin</string> &lt;p at greendale.se&gt;<p>December  6, 2015 at 07:00:00pm</p></header><div class="content"><p>On Sun, Dec 6, 2015 at 5:59 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Another complaint regarded a loss of succinctness. Per Melin wrote:<br>&gt;<br>&gt; Another example from the same LinkedList class. It finds the right place<br>&gt; to insert a new node:<br>&gt;<br>&gt;   for next = head; next != nil &amp;&amp; index &gt; 0; prev = next, next = next!.<br>&gt; next, --index { }<br>&gt;<br>&gt; Extreme? Probably, but I like it better than the same thing done in five<br>&gt; lines of while loop.<br>&gt;<br>&gt;<br>&gt;<br>No worries, but for the record, I did absolutely not write that. I *quoted*<br>that. I think that C-style &#39;for&#39; is a horrible mess that should be killed<br>with fire.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/5413cf2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 11:00:00am</p></header><div class="content"><p>On Dec 6, 2015, at 11:08 AM, Per Melin &lt;p at greendale.se&gt; wrote:<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 5:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Another complaint regarded a loss of succinctness. Per Melin wrote: <br>&gt; <br>&gt; Another example from the same LinkedList class. It finds the right place to insert a new node:<br>&gt; <br>&gt;   for next = head; next != nil &amp;&amp; index &gt; 0; prev = next, next = next!.next, --index { }<br>&gt; <br>&gt; Extreme? Probably, but I like it better than the same thing done in five lines of while loop.<br>&gt; <br>&gt; <br>&gt; No worries, but for the record, I did absolutely not write that. I *quoted* that. I think that C-style &#39;for&#39; is a horrible mess that should be killed with fire.<br>&gt; <br>&gt; <br></p><p>My apologies! -- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/c06e5e38/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>C-style For Loops</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>There is actually one good reason I see in favor of keeping the C-style for loop, and only one: ease of porting existing code to Swift.<br></p><p>If you are porting code from another language that uses C-style for loops, currently you can keep the loop as is while you translate all the syntactic differences everywhere. If Swift didn&#39;t had a C-style for loop, then you&#39;d need to rethink the control flow at the same time you are converting everything else, increasing the risk of errors during what is already a delicate operation.<br></p><p>C-style for loops are very common in code you can find everywhere because many languages have it, and therefore there is a lot of algorithms, sometime tricky algorithms you don&#39;t want to mess up, that rely on such loops. Even if you had the desire to convert all of them to for-in loops in your port, rewriting the control flow *at the same time* you are addressing all the other porting issues is much worse than doing it in a separate step *after* the crude port has been tested to work.<br></p><p>In other words: you should avoid refactoring everything in one step. The C-style for loop enables that.<br></p><p>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>C-style For Loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>This is the exact scenario that lead to my own code base having a few cases of C-style (all of which I&#39;ve now trivially removed). Even so, I do not believe it is worth keeping it around for this reason.<br></p><p>l8r<br>Sean<br></p><p>&gt; On Dec 6, 2015, at 2:37 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There is actually one good reason I see in favor of keeping the C-style for loop, and only one: ease of porting existing code to Swift.<br>&gt; <br>&gt; If you are porting code from another language that uses C-style for loops, currently you can keep the loop as is while you translate all the syntactic differences everywhere. If Swift didn&#39;t had a C-style for loop, then you&#39;d need to rethink the control flow at the same time you are converting everything else, increasing the risk of errors during what is already a delicate operation.<br>&gt; <br>&gt; C-style for loops are very common in code you can find everywhere because many languages have it, and therefore there is a lot of algorithms, sometime tricky algorithms you don&#39;t want to mess up, that rely on such loops. Even if you had the desire to convert all of them to for-in loops in your port, rewriting the control flow *at the same time* you are addressing all the other porting issues is much worse than doing it in a separate step *after* the crude port has been tested to work.<br>&gt; <br>&gt; In other words: you should avoid refactoring everything in one step. The C-style for loop enables that.<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; michel.fortin at michelf.ca<br>&gt; https://michelf.ca<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>C-style For Loops</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>There are a couple of ways of solving this issue:<br></p><p>1 refactor to where loop first, then convert to Swift<br>2 leave a fixit in Xcode that will perform while loop conversion<br>On Mon, Dec 7, 2015 at 00:04 Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is the exact scenario that lead to my own code base having a few<br>&gt; cases of C-style (all of which I&#39;ve now trivially removed). Even so, I do<br>&gt; not believe it is worth keeping it around for this reason.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; &gt; On Dec 6, 2015, at 2:37 PM, Michel Fortin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; There is actually one good reason I see in favor of keeping the C-style<br>&gt; for loop, and only one: ease of porting existing code to Swift.<br>&gt; &gt;<br>&gt; &gt; If you are porting code from another language that uses C-style for<br>&gt; loops, currently you can keep the loop as is while you translate all the<br>&gt; syntactic differences everywhere. If Swift didn&#39;t had a C-style for loop,<br>&gt; then you&#39;d need to rethink the control flow at the same time you are<br>&gt; converting everything else, increasing the risk of errors during what is<br>&gt; already a delicate operation.<br>&gt; &gt;<br>&gt; &gt; C-style for loops are very common in code you can find everywhere<br>&gt; because many languages have it, and therefore there is a lot of algorithms,<br>&gt; sometime tricky algorithms you don&#39;t want to mess up, that rely on such<br>&gt; loops. Even if you had the desire to convert all of them to for-in loops in<br>&gt; your port, rewriting the control flow *at the same time* you are addressing<br>&gt; all the other porting issues is much worse than doing it in a separate step<br>&gt; *after* the crude port has been tested to work.<br>&gt; &gt;<br>&gt; &gt; In other words: you should avoid refactoring everything in one step. The<br>&gt; C-style for loop enables that.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Michel Fortin<br>&gt; &gt; michel.fortin at michelf.ca<br>&gt; &gt; https://michelf.ca<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/dd03f446/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>C-style For Loops</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>Le 6 déc. 2015 à 16:08, ilya &lt;ilya.nikokoshev at gmail.com&gt; a écrit :<br></p><p>&gt; There are a couple of ways of solving this issue:<br>&gt; <br>&gt; 1 refactor to where loop first, then convert to Swift <br></p><p>This assumes 1) that you have a working toolchain to compile, execute, and test the original code, and 2) that the other language has a way to express the loop in a similar way to Swift, or something close enough.<br></p><p><br>&gt; 2 leave a fixit in Xcode that will perform while loop conversion <br></p><p>As it was pointed out earlier, converting to a while loop requires duplication of the &quot;increment&quot; part of the loop everywhere there is a `continue` inside the loop. While you could make a fixit that correctly does this, I would argue that duplicating code shouldn&#39;t be done so lightly (someone will have to edit or maintain it afterwards). It&#39;s unclear to me what else could be done here however, as I can&#39;t think of a refactoring that would prevent code duplication. (And defer shouldn&#39;t be used here because it has a different behaviour when an exception is thrown.)<br></p><p>The fixit probably should also introduce a do{} block to correctly scope the loop variable and avoid clashes with the surrounding context.<br></p><p>It remains that even with a fixit that changes the code like this, the various differences it&#39;ll create in line count, increment expression placement, indentation, and sometime duplicated code, are going to impair your ability to compare the two loops side by side when hunting for porting bugs. Also the Swift version, the one that compiles thanks to a fixit, will simply be less readable... to the point that it&#39;ll generally be better to just do the refactoring as you port, despite the downsides.<br></p><p>Before fixit:<br></p><p>	for var i = 10; i &gt;= 0; i -= 1 {<br>		if i == 5 {<br>			continue<br>		}<br>		for var j = 100; i &gt;= 0; j -= 2 {<br>			print(&quot;\(i) \(j)&quot;)<br>		}<br>	}<br></p><p>After fixit:<br></p><p>	do {<br>		var i = 10<br>		while i &gt;= 0 {<br>			if i == 5 {<br>				i -= 1<br>				continue<br>			}<br>			do {<br>				var j = 100;<br>				while j &gt;= 0 {<br>					print(&quot;\(i) \(j)&quot;)<br>					j -= 2<br>				}<br>			}<br>			i -= 1<br>		}<br>	}<br></p><p><br>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>C-style For Loops</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; As it was pointed out earlier, converting to a while loop requires duplication of the &quot;increment&quot; part of the loop everywhere there is a `continue` inside the loop.<br>This is not necessarily true. `defer` could be used at the top of the<br>while loop scope to increment whenever the loop turns. The after-fixit<br>example you gave can be written like so:<br></p><p>do {<br>	var i = 10<br>	while i &gt;= 0 {<br>		defer { i -= 1 }<br>		if i == 5 {<br>			continue<br>		}<br>		do {<br>			var j = 100;<br>			while j &gt;= 0 {<br>				print(&quot;\(i) \(j)&quot;)<br>				j -= 2<br>			}<br> 		}<br>	}<br>}<br></p><p><br></p><p>On 12/6/2015 9:10 PM, Michel Fortin via swift-evolution wrote:<br>&gt; Le 6 déc. 2015 à 16:08, ilya &lt;ilya.nikokoshev at gmail.com&gt; a écrit :<br>&gt;<br>&gt;&gt; There are a couple of ways of solving this issue:<br>&gt;&gt;<br>&gt;&gt; 1 refactor to where loop first, then convert to Swift <br>&gt; This assumes 1) that you have a working toolchain to compile, execute, and test the original code, and 2) that the other language has a way to express the loop in a similar way to Swift, or something close enough.<br>&gt;<br>&gt;<br>&gt;&gt; 2 leave a fixit in Xcode that will perform while loop conversion <br>&gt; As it was pointed out earlier, converting to a while loop requires duplication of the &quot;increment&quot; part of the loop everywhere there is a `continue` inside the loop. While you could make a fixit that correctly does this, I would argue that duplicating code shouldn&#39;t be done so lightly (someone will have to edit or maintain it afterwards). It&#39;s unclear to me what else could be done here however, as I can&#39;t think of a refactoring that would prevent code duplication. (And defer shouldn&#39;t be used here because it has a different behaviour when an exception is thrown.)<br>&gt;<br>&gt; The fixit probably should also introduce a do{} block to correctly scope the loop variable and avoid clashes with the surrounding context.<br>&gt;<br>&gt; It remains that even with a fixit that changes the code like this, the various differences it&#39;ll create in line count, increment expression placement, indentation, and sometime duplicated code, are going to impair your ability to compare the two loops side by side when hunting for porting bugs. Also the Swift version, the one that compiles thanks to a fixit, will simply be less readable... to the point that it&#39;ll generally be better to just do the refactoring as you port, despite the downsides.<br>&gt;<br>&gt; Before fixit:<br>&gt;<br>&gt; 	for var i = 10; i &gt;= 0; i -= 1 {<br>&gt; 		if i == 5 {<br>&gt; 			continue<br>&gt; 		}<br>&gt; 		for var j = 100; i &gt;= 0; j -= 2 {<br>&gt; 			print(&quot;\(i) \(j)&quot;)<br>&gt; 		}<br>&gt; 	}<br>&gt;<br>&gt; After fixit:<br>&gt;<br>&gt; 	do {<br>&gt; 		var i = 10<br>&gt; 		while i &gt;= 0 {<br>&gt; 			if i == 5 {<br>&gt; 				i -= 1<br>&gt; 				continue<br>&gt; 			}<br>&gt; 			do {<br>&gt; 				var j = 100;<br>&gt; 				while j &gt;= 0 {<br>&gt; 					print(&quot;\(i) \(j)&quot;)<br>&gt; 					j -= 2<br>&gt; 				}<br>&gt; 			}<br>&gt; 			i -= 1<br>&gt; 		}<br>&gt; 	}<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>C-style For Loops</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>Le 6 déc. 2015 à 21:45, Kevin Lundberg &lt;kevin at klundberg.com&gt; a écrit :<br></p><p>&gt;&gt; As it was pointed out earlier, converting to a while loop requires duplication of the &quot;increment&quot; part of the loop everywhere there is a `continue` inside the loop.<br>&gt; This is not necessarily true. `defer` could be used at the top of the<br>&gt; while loop scope to increment whenever the loop turns. The after-fixit<br>&gt; example you gave can be written like so:<br>&gt; <br>&gt; do {<br>&gt; 	var i = 10<br>&gt; 	while i &gt;= 0 {<br>&gt; 		defer { i -= 1 }<br>&gt; 		if i == 5 {<br>&gt; 			continue<br>&gt; 		}<br>&gt; 		do {<br>&gt; 			var j = 100;<br>&gt; 			while j &gt;= 0 {<br>&gt; 				print(&quot;\(i) \(j)&quot;)<br>&gt; 				j -= 2<br>&gt; 			}<br>&gt; 		}<br>&gt; 	}<br>&gt; }<br></p><p>It won&#39;t matter that you use defer *in this particular case* because the &quot;i -= 1&quot; statement has no side effects, and nothing appears like it can throw in the loop body. But you can&#39;t assume this will always be the case, so the fixit shouldn&#39;t be allowed to change the semantics like that.<br></p><p>(As I tried to point out in the last sentence of the paragraph you quoted.)<br></p><p><br>-- <br>Michel Fortin<br>michel.fortin at michelf.ca<br>https://michelf.ca<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>C-style For Loops</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December  6, 2015 at 08:00:00pm</p></header><div class="content"><p>People can do the (usually) trivial transformation to a while loop first. The cases where loop exits make the transformation nontrivial seem rare to me.<br></p><p>Doing a port of C, C++, Java, or C# code to Swift, that for→while transformation seems trivial next to, say, dealing with the differences in Swift’s type system, its memory management, or its handling of unsafe pointers — all things one would have to deal with in the first pass of a port.<br></p><p>I’m not sure easy porting from C is even a design consideration, but even if it is, it shouldn’t be a reason to hold back this proposal.<br></p><p>Cheers, P<br></p><p>&gt; On Dec 6, 2015, at 2:37 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There is actually one good reason I see in favor of keeping the C-style for loop, and only one: ease of porting existing code to Swift.<br>&gt; <br>&gt; If you are porting code from another language that uses C-style for loops, currently you can keep the loop as is while you translate all the syntactic differences everywhere. If Swift didn&#39;t had a C-style for loop, then you&#39;d need to rethink the control flow at the same time you are converting everything else, increasing the risk of errors during what is already a delicate operation.<br>&gt; <br>&gt; C-style for loops are very common in code you can find everywhere because many languages have it, and therefore there is a lot of algorithms, sometime tricky algorithms you don&#39;t want to mess up, that rely on such loops. Even if you had the desire to convert all of them to for-in loops in your port, rewriting the control flow *at the same time* you are addressing all the other porting issues is much worse than doing it in a separate step *after* the crude port has been tested to work.<br>&gt; <br>&gt; In other words: you should avoid refactoring everything in one step. The C-style for loop enables that.<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; michel.fortin at michelf.ca<br>&gt; https://michelf.ca<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>C-style For Loops</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; Lowered Readability and Maintainability<br>&gt; <br>&gt; I have aesthetic reasons for disliking the for-loop. The C-style loop is harder to read especially for those not coming from C-style languages, easier to mess up at edge conditions, and is commonly used for side-effects which, in a language focused on safety, is not a feature to be encouraged. <br>&gt; <br>&gt; For example, one side effect that was mentioned on-list yesterday was the incrementor, which is guaranteed in C-style to execute late:<br>&gt; Roland King writes:<br>&gt; <br>&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>&gt; {<br>&gt; 	// more than a few lines of code with early escape continues<br>&gt; }<br>&gt; <br>&gt; shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can’t always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br>&gt; <br>&gt; Late incrementor management is a feature that can be mimicked with defer, as pointed out by several other list members.<br>&gt; <br></p><p>Defer wouldn’t accomplish the exact same behavior because it would run if an exception was thrown, which is not the same as the last clause of a for loop, but perhaps is close enough.<br></p><p>The only other concern I would have is not being able to scope my variables to the loop. I didn’t see it addressed, but perhaps its not very important in the end anyway.<br></p><p>Something like the following might be nice to scope the variable exclusively to the loop.<br></p><p>for var x = 0 while (someCondition()) {<br>	// code<br>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/01429aab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>A slightly updated proposal write-up with everyone&#39;s feedback: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;<br></p><p><br>&gt; On Dec 6, 2015, at 2:13 PM, Tyler Fleming Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Lowered Readability and Maintainability<br>&gt;&gt; <br>&gt;&gt; I have aesthetic reasons for disliking the for-loop. The C-style loop is harder to read especially for those not coming from C-style languages, easier to mess up at edge conditions, and is commonly used for side-effects which, in a language focused on safety, is not a feature to be encouraged. <br>&gt;&gt; <br>&gt;&gt; For example, one side effect that was mentioned on-list yesterday was the incrementor, which is guaranteed in C-style to execute late:<br>&gt;&gt; Roland King writes:<br>&gt;&gt; <br>&gt;&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>&gt;&gt; {<br>&gt;&gt; 	// more than a few lines of code with early escape continues<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can’t always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br>&gt;&gt; <br>&gt;&gt; Late incrementor management is a feature that can be mimicked with defer, as pointed out by several other list members.<br>&gt;&gt; <br>&gt; <br>&gt; Defer wouldn’t accomplish the exact same behavior because it would run if an exception was thrown, which is not the same as the last clause of a for loop, but perhaps is close enough.<br>&gt; <br>&gt; The only other concern I would have is not being able to scope my variables to the loop. I didn’t see it addressed, but perhaps its not very important in the end anyway.<br>&gt; <br>&gt; Something like the following might be nice to scope the variable exclusively to the loop.<br>&gt; <br>&gt; for var x = 0 while (someCondition()) {<br>&gt; 	// code<br>&gt; }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/20f996f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>C-style For Loops</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>Cool! Thanks for updating the proposal with those concerns!<br></p><p>One thing though, could you possibly change<br></p><p>for var x = 0 while (someCondition()) {<br>to be <br>for var x = 0 while someCondition() {<br>in the gist?<br></p><p>I accidentally threw and extra set of parenthesis in there. Old habits die hard.<br></p><p>Tyler<br></p><p><br></p><p>&gt; On Dec 6, 2015, at 1:26 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; A slightly updated proposal write-up with everyone&#39;s feedback: https://gist.github.com/erica/56d533b75d0a36e3908f &lt;https://gist.github.com/erica/56d533b75d0a36e3908f&gt;<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 2:13 PM, Tyler Fleming Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Lowered Readability and Maintainability<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have aesthetic reasons for disliking the for-loop. The C-style loop is harder to read especially for those not coming from C-style languages, easier to mess up at edge conditions, and is commonly used for side-effects which, in a language focused on safety, is not a feature to be encouraged. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, one side effect that was mentioned on-list yesterday was the incrementor, which is guaranteed in C-style to execute late:<br>&gt;&gt;&gt; Roland King writes:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; 	// more than a few lines of code with early escape continues<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can’t always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Late incrementor management is a feature that can be mimicked with defer, as pointed out by several other list members.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Defer wouldn’t accomplish the exact same behavior because it would run if an exception was thrown, which is not the same as the last clause of a for loop, but perhaps is close enough.<br>&gt;&gt; <br>&gt;&gt; The only other concern I would have is not being able to scope my variables to the loop. I didn’t see it addressed, but perhaps its not very important in the end anyway.<br>&gt;&gt; <br>&gt;&gt; Something like the following might be nice to scope the variable exclusively to the loop.<br>&gt;&gt; <br>&gt;&gt; for var x = 0 while (someCondition()) {<br>&gt;&gt; 	// code<br>&gt;&gt; }<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a350da55/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/57885cfd0c4b4db16653e76d9e6f0266?s=50"></div><header><strong>C-style For Loops</strong> from <string>Johan Jensen</string> &lt;jj at johanjensen.dk&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>Well, it is possible to just add an extra scope around the variable and the<br>loop:<br></p><p>do {<br>    var i = 0<br>    while i &lt; 10 {<br>        print(i)<br>        i += 1<br>    }<br>}<br></p><p>—Johan<br></p><p>On Sun, Dec 6, 2015 at 10:13 PM, Tyler Fleming Cloutier via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; *Lowered Readability and Maintainability*<br>&gt;<br>&gt; I have aesthetic reasons for disliking the for-loop. The C-style loop is<br>&gt; harder to read especially for those not coming from C-style languages,<br>&gt; easier to mess up at edge conditions, and is commonly used for side-effects<br>&gt; which, in a language focused on safety, is not a feature to be encouraged.<br>&gt;<br>&gt; For example, one side effect that was mentioned on-list yesterday was the<br>&gt; incrementor, which is guaranteed in C-style to execute late:<br>&gt; Roland King writes:<br>&gt;<br>&gt;<br>&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing +=<br>&gt; delta<br>&gt; {<br>&gt; // more than a few lines of code with early escape continues<br>&gt; }<br>&gt;<br>&gt; shows intent of the loop very clearly, start, condition and increment all<br>&gt; together at the top, and however you loop you always execute the increment<br>&gt; part of the statement. Convert that to a while(), if you have a continue in<br>&gt; the body, you have a good chance of not incrementing at all, or duplicating<br>&gt; the increment code before every continue. So you can’t always nicely turn<br>&gt; for into while. I second the point below about the loop variable being<br>&gt; local to the for as well, I also like that.<br>&gt;<br>&gt; Late incrementor management is a feature that can be mimicked with defer,<br>&gt; as pointed out by several other list members.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Defer wouldn’t accomplish the exact same behavior because it would run if<br>&gt; an exception was thrown, which is not the same as the last clause of a for<br>&gt; loop, but perhaps is close enough.<br>&gt;<br>&gt; The only other concern I would have is not being able to scope my<br>&gt; variables to the loop. I didn’t see it addressed, but perhaps its not very<br>&gt; important in the end anyway.<br>&gt;<br>&gt; Something like the following might be nice to scope the variable<br>&gt; exclusively to the loop.<br>&gt;<br>&gt; for var x = 0 while (someCondition()) {<br>&gt; // code<br>&gt; }<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/b607c0d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>C-style For Loops</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>This is true. Kind of an unfortunate extra level of indention though.<br></p><p><br>&gt; On Dec 6, 2015, at 1:27 PM, Johan Jensen &lt;jj at johanjensen.dk&gt; wrote:<br>&gt; <br>&gt; Well, it is possible to just add an extra scope around the variable and the loop:<br>&gt; <br>&gt; do {<br>&gt;     var i = 0<br>&gt;     while i &lt; 10 {<br>&gt;         print(i)<br>&gt;         i += 1<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; —Johan<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 10:13 PM, Tyler Fleming Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Lowered Readability and Maintainability<br>&gt;&gt; <br>&gt;&gt; I have aesthetic reasons for disliking the for-loop. The C-style loop is harder to read especially for those not coming from C-style languages, easier to mess up at edge conditions, and is commonly used for side-effects which, in a language focused on safety, is not a feature to be encouraged. <br>&gt;&gt; <br>&gt;&gt; For example, one side effect that was mentioned on-list yesterday was the incrementor, which is guaranteed in C-style to execute late:<br>&gt;&gt; Roland King writes:<br>&gt;&gt; <br>&gt;&gt; for var floatingThing = start ; floatingThing &lt;= end ; floatingThing += delta<br>&gt;&gt; {<br>&gt;&gt; 	// more than a few lines of code with early escape continues<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; shows intent of the loop very clearly, start, condition and increment all together at the top, and however you loop you always execute the increment part of the statement. Convert that to a while(), if you have a continue in the body, you have a good chance of not incrementing at all, or duplicating the increment code before every continue. So you can’t always nicely turn for into while. I second the point below about the loop variable being local to the for as well, I also like that. <br>&gt;&gt; <br>&gt;&gt; Late incrementor management is a feature that can be mimicked with defer, as pointed out by several other list members.<br>&gt;&gt; <br>&gt; <br>&gt; Defer wouldn’t accomplish the exact same behavior because it would run if an exception was thrown, which is not the same as the last clause of a for loop, but perhaps is close enough.<br>&gt; <br>&gt; The only other concern I would have is not being able to scope my variables to the loop. I didn’t see it addressed, but perhaps its not very important in the end anyway.<br>&gt; <br>&gt; Something like the following might be nice to scope the variable exclusively to the loop.<br>&gt; <br>&gt; for var x = 0 while (someCondition()) {<br>&gt; 	// code<br>&gt; }<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/7d6b1412/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/503220368e284e974ffb41f5a9ff36ac?s=50"></div><header><strong>C-style For Loops</strong> from <string>inbox only</string> &lt;inboxonly4 at gmail.com&gt;<p>December  6, 2015 at 05:00:00pm</p></header><div class="content"><p>True,even that a feature isn&#39;t used doesn&#39;t mean that you need to remove<br>that feature.<br>I hope that the proposal will be rejected.<br></p><p>2015-12-06 12:03 GMT+02:00 Clemens Wagner via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; &gt; We’ve developed a number of Swift apps for various clients over the past<br>&gt; year and have not needed C style for loops either.<br>&gt;<br>&gt; But I think this is a very weak reason for *removing* any portion like<br>&gt; C-loops and increment or decrement operators of a programming language. How<br>&gt; about the developers and the productive code which used C-style loops<br>&gt; already?<br>&gt;<br>&gt; I understand the reasons why you, Erica and the others don’t like C-style<br>&gt; loops. But changing the philosophy of a productive programming language is<br>&gt; a very bad idea.<br>&gt;<br>&gt; Cheers<br>&gt; Clemens<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/ce1e33b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d258a22a520c13772442666364207fa?s=50"></div><header><strong>C-style For Loops</strong> from <string>Don Wills</string> &lt;don.wills at portablesoftware.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>I too hope that the proposal to remove C-style loops is rejected.  Yes, they aren&#39;t that necessary any more, but if we want Swift to compete with Java, C#, C++ and C, there is no reason to remove basic features like C-style loops just because they are politically incorrect.  If there was a functional reason, I might get on board with removing it, but there isn&#39;t.<br></p><p>I also hope that the decision to remove increment and decrement operators is reversed using the same logic.  Just because *you* don&#39;t like something that has been a feature of dozens of programming languages for 40 years doesn&#39;t mean removing that feature is a good idea.  One man&#39;s goto statement is another man&#39;s Leatherman multi-tool.  And FWIW, if C-style loops stay in the language, they become much more ugly without increment and decrement.<br></p><p>Don Wills<br></p><p>&gt; On Dec 6, 2015, at 8:33 AM, inbox only via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; True,even that a feature isn&#39;t used doesn&#39;t mean that you need to remove that feature.<br>&gt; I hope that the proposal will be rejected.<br>&gt; <br>&gt; 2015-12-06 12:03 GMT+02:00 Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt; <br>&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt; <br>&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt; <br>&gt; Cheers<br>&gt; Clemens<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a4f5d4d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>C-style For Loops</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>Nearly every for loop I’ve written in other languages has used pre or post increment (depending on the language), which is being removed in Swift 3.0. It makes sense for &#39;for loops&#39; to go if pre/post increment goes away.<br></p><p>-DW<br></p><p>&gt; On Dec 6, 2015, at 9:03 AM, Don Wills via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I too hope that the proposal to remove C-style loops is rejected.  Yes, they aren&#39;t that necessary any more, but if we want Swift to compete with Java, C#, C++ and C, there is no reason to remove basic features like C-style loops just because they are politically incorrect.  If there was a functional reason, I might get on board with removing it, but there isn&#39;t.<br>&gt; <br>&gt; I also hope that the decision to remove increment and decrement operators is reversed using the same logic.  Just because *you* don&#39;t like something that has been a feature of dozens of programming languages for 40 years doesn&#39;t mean removing that feature is a good idea.  One man&#39;s goto statement is another man&#39;s Leatherman multi-tool.  And FWIW, if C-style loops stay in the language, they become much more ugly without increment and decrement.<br>&gt; <br>&gt; Don Wills<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 8:33 AM, inbox only via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; True,even that a feature isn&#39;t used doesn&#39;t mean that you need to remove that feature.<br>&gt;&gt; I hope that the proposal will be rejected.<br>&gt;&gt; <br>&gt;&gt; 2015-12-06 12:03 GMT+02:00 Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt; <br>&gt;&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt;&gt; <br>&gt;&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt;&gt; <br>&gt;&gt; Cheers<br>&gt;&gt; Clemens<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/d1636ae1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/635a509f2fae0160f7c2391f2940b48c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Clemens Wagner</string> &lt;macmoonshine at gmx.de&gt;<p>December  6, 2015 at 06:00:00pm</p></header><div class="content"><p>I think removing the increment and decrement operators is just another bad idea. They are well known and frequently used by many developers. But discussing an approved proposal would be pointless. :( In my opinion Swift will be unusable if fundamental features will change every year. Some kind of stability in the language would be highly appreciated by Swift users.<br></p><p>Clemens<br></p><p>&gt; Am 06.12.2015 um 17:31 schrieb David Waite via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Nearly every for loop I’ve written in other languages has used pre or post increment (depending on the language), which is being removed in Swift 3.0. It makes sense for &#39;for loops&#39; to go if pre/post increment goes away.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 9:03 AM, Don Wills via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I too hope that the proposal to remove C-style loops is rejected.  Yes, they aren&#39;t that necessary any more, but if we want Swift to compete with Java, C#, C++ and C, there is no reason to remove basic features like C-style loops just because they are politically incorrect.  If there was a functional reason, I might get on board with removing it, but there isn&#39;t.<br>&gt;&gt; <br>&gt;&gt; I also hope that the decision to remove increment and decrement operators is reversed using the same logic.  Just because *you* don&#39;t like something that has been a feature of dozens of programming languages for 40 years doesn&#39;t mean removing that feature is a good idea.  One man&#39;s goto statement is another man&#39;s Leatherman multi-tool.  And FWIW, if C-style loops stay in the language, they become much more ugly without increment and decrement.<br>&gt;&gt; <br>&gt;&gt; Don Wills<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 8:33 AM, inbox only via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; True,even that a feature isn&#39;t used doesn&#39;t mean that you need to remove that feature.<br>&gt;&gt;&gt; I hope that the proposal will be rejected.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2015-12-06 12:03 GMT+02:00 Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers<br>&gt;&gt;&gt; Clemens<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 11:31 AM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Nearly every for loop I’ve written in other languages has used pre or post increment (depending on the language), which is being removed in Swift 3.0. It makes sense for &#39;for loops&#39; to go if pre/post increment goes away.<br></p><p>I’m not 100% convinced by this line of reasoning (using the += form or successor() isn’t THAT clunky) but it is awfully poetic.<br></p><p>Fun fact, you write (albiet with different syntax) C-style for-loops as library code:<br></p><p>&gt; for i in CStyle(0, {$0 &lt; 20}, {$0 += 1}) {<br>&gt;  // do something 20 times<br>&gt; }<br></p><p>Where CStyle is just a straightforward implementation of SequenceType. (Tuples allow for simultaneous iteration, which is usually when I end up with C-style for-loops)<br></p><p>(Apologies if this was mentioned up thread, I’ve only just recently joined the list)<br></p><p>-Colin<br></p><p>&gt; -DW<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 9:03 AM, Don Wills via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I too hope that the proposal to remove C-style loops is rejected.  Yes, they aren&#39;t that necessary any more, but if we want Swift to compete with Java, C#, C++ and C, there is no reason to remove basic features like C-style loops just because they are politically incorrect.  If there was a functional reason, I might get on board with removing it, but there isn&#39;t.<br>&gt;&gt; <br>&gt;&gt; I also hope that the decision to remove increment and decrement operators is reversed using the same logic.  Just because *you* don&#39;t like something that has been a feature of dozens of programming languages for 40 years doesn&#39;t mean removing that feature is a good idea.  One man&#39;s goto statement is another man&#39;s Leatherman multi-tool.  And FWIW, if C-style loops stay in the language, they become much more ugly without increment and decrement.<br>&gt;&gt; <br>&gt;&gt; Don Wills<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 8:33 AM, inbox only via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; True,even that a feature isn&#39;t used doesn&#39;t mean that you need to remove that feature.<br>&gt;&gt;&gt; I hope that the proposal will be rejected.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2015-12-06 12:03 GMT+02:00 Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers<br>&gt;&gt;&gt; Clemens<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/b9e3b559/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>C-style For Loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; Fun fact, you write (albiet with different syntax) C-style for-loops as library code:<br>&gt; <br>&gt;&gt; for i in CStyle(0, {$0 &lt; 20}, {$0 += 1}) {<br>&gt;&gt;  // do something 20 times<br>&gt;&gt; }<br>&gt; <br>&gt; Where CStyle is just a straightforward implementation of SequenceType. (Tuples allow for simultaneous iteration, which is usually when I end up with C-style for-loops)<br></p><p>I love the idea of this, but the syntax is remarkably ugly. (It’s actually even worse than you think, because inout closure parameters have to be declared with an exact type.) With a placeholder-based currying syntax, on the other hand…<br></p><p>	for i in CSequence(0, _ &lt; 20, _ += 1) { … }<br></p><p>That’s not too shabby, is it?<br></p><p>	public struct CSequence &lt;T&gt;: SequenceType {<br>		private let initialValue: T<br>		private let testClosure: T -&gt; Bool<br>		private let incrementClosure: (inout T) -&gt; Void<br></p><p>		public init(_ initial: T, _ test: T -&gt; Bool, _ increment: (inout T) -&gt; Void) {<br>			initialValue = initial<br>			testClosure = test<br>			incrementClosure = increment<br>		}<br></p><p>		public func generate() -&gt; CGenerator&lt;T&gt; {<br>			return CGenerator(self)<br>		}<br>	}<br></p><p>	public struct CGenerator&lt;T&gt;: GeneratorType {<br>		private let sequence: CSequence&lt;T&gt;<br>		private var value: T?<br>		<br>		private init(_ seq: CSequence&lt;T&gt;) {<br>			sequence = seq<br>		}<br>		<br>		public mutating func next() -&gt; T? {<br>			if value != nil {<br>				sequence.incrementClosure(&amp;value!)<br>			}<br>			else {<br>				value = sequence.initialValue<br>			}<br>			if sequence.testClosure(value!) {<br>				return value<br>			}<br>			else {<br>				return nil<br>			}<br>		}<br>	}<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268d9a6a10ecdf70a24fdf96d03cec1c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Colin Barrett</string> &lt;colin at springsandstruts.com&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 10:18 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Fun fact, you write (albiet with different syntax) C-style for-loops as library code:<br>&gt;&gt; <br>&gt;&gt;&gt; for i in CStyle(0, {$0 &lt; 20}, {$0 += 1}) {<br>&gt;&gt;&gt; // do something 20 times<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Where CStyle is just a straightforward implementation of SequenceType. (Tuples allow for simultaneous iteration, which is usually when I end up with C-style for-loops)<br>&gt; <br>&gt; I love the idea of this, but the syntax is remarkably ugly. (It’s actually even worse than you think, because inout closure parameters have to be declared with an exact type.) With a placeholder-based currying syntax, on the other hand…<br>&gt; <br>&gt; 	for i in CSequence(0, _ &lt; 20, _ += 1) { … }<br>&gt; <br>&gt; That’s not too shabby, is it?<br></p><p>This is terrific, Brent!  Thanks for taking a stab at the implementation as well.<br></p><p>Does this move the needle for anyone else on removing for loops?<br></p><p>&gt; 	public struct CSequence &lt;T&gt;: SequenceType {<br>&gt; 		private let initialValue: T<br>&gt; 		private let testClosure: T -&gt; Bool<br>&gt; 		private let incrementClosure: (inout T) -&gt; Void<br>&gt; <br>&gt; 		public init(_ initial: T, _ test: T -&gt; Bool, _ increment: (inout T) -&gt; Void) {<br>&gt; 			initialValue = initial<br>&gt; 			testClosure = test<br>&gt; 			incrementClosure = increment<br>&gt; 		}<br>&gt; <br>&gt; 		public func generate() -&gt; CGenerator&lt;T&gt; {<br>&gt; 			return CGenerator(self)<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; 	public struct CGenerator&lt;T&gt;: GeneratorType {<br>&gt; 		private let sequence: CSequence&lt;T&gt;<br>&gt; 		private var value: T?<br>&gt; 		<br>&gt; 		private init(_ seq: CSequence&lt;T&gt;) {<br>&gt; 			sequence = seq<br>&gt; 		}<br>&gt; 		<br>&gt; 		public mutating func next() -&gt; T? {<br>&gt; 			if value != nil {<br>&gt; 				sequence.incrementClosure(&amp;value!)<br>&gt; 			}<br>&gt; 			else {<br>&gt; 				value = sequence.initialValue<br>&gt; 			}<br>&gt; 			if sequence.testClosure(value!) {<br>&gt; 				return value<br>&gt; 			}<br>&gt; 			else {<br>&gt; 				return nil<br>&gt; 			}<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7877c384b6a5494c1b0283eb805831c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Liam Butler-Lawrence</string> &lt;liamdunn at me.com&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>I’m going to add a +1 for Erica’s proposal. Here’s why:<br></p><p>1. For every situation in which the for loop could be used, a for…in (either with ranges or strides) or while loop could achieve the same goals.<br></p><p>2. For the vast majority of these cases, the for…in or while version is much cleaner and easier to read than for(init;test;inc). More extensive refactoring might be necessary in some cases, but in my opinion that effort would be worthwhile to improve readability and consistency.<br></p><p>3. For new programmers learning the language, the for…in is much easier to learn. To my understanding, this is a major goal of Swift. For those coming to Swift that have some experience with other languages, we should be guiding them towards the optimal Swift way of doing things. Letting those programmers use an inelegant, legacy feature “just because” does not seem to me to fit the goals of Swift. In addition, the for…in loop is not even a new Swift concept; many languages (including C++, and Objective-C, and Python) already have for..in style loops available.<br></p><p>4. To the comment that said &quot;even that a feature isn&#39;t used doesn&#39;t mean that you need to remove that feature&quot;: I don’t agree. If a given feature is inferior to its alternatives and is not actually in common use, why not simplify the language and just remove it? I think many of us would agree that for(init;test;inc) loops fail the smell test we should be using: would we add this in Swift 3 if it didn’t already exist?<br></p><p>Lastly, I’d like to point out that I, too, had a knee-jerk negative reaction when I saw the already accepted proposal for removing ++ and --. After reading the rationale and discussion regarding that change, I completely changed my mind. I believe this proposal should accepted for similar reasons.<br></p><p>Thanks,<br>Liam<br></p><p>&gt; On Dec 6, 2015, at 10:33 AM, inbox only via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; True,even that a feature isn&#39;t used doesn&#39;t mean that you need to remove that feature.<br>&gt; I hope that the proposal will be rejected.<br>&gt; <br>&gt; 2015-12-06 12:03 GMT+02:00 Clemens Wagner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; &gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt; <br>&gt;&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language. How about the developers and the productive code which used C-style loops already?<br>&gt;&gt; <br>&gt;&gt; I understand the reasons why you, Erica and the others don’t like C-style loops. But changing the philosophy of a productive programming language is a very bad idea.<br>&gt;&gt; <br>&gt;&gt; Cheers<br>&gt;&gt; Clemens<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/0035dafb/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>C-style For Loops</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>I’d like to express my pure joy at a proposal to _remove_ a feature from a popular language.<br></p><p>My favorite Swift feature? Its brilliant insights that optionality should be a characteristic of _types_ but mutability should be a characteristic of _variables_ are right up there. But no, my favorite feature of Swift so far is its willingness to make breaking language changes. Hallelujiah!<br></p><p>Fear of removing features and making breaking changes is what doomed Java to its current status of “most used, most sneered at.” It’s what’s turned C++ into the world’s largest ball of twine. Swift is wise to set the early precedent of carefully considered breaking language changes.<br></p><p>&gt;&gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt; <br>&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language.<br></p><p>I cannot imagine a better case for removing a language feature.<br></p><p>We have a feature that is:<br></p><p>1. not widely used,<br>2. easily replaced with other languages features where it is used, and<br>3. inconsistent with the language’s general aesthetic.<br></p><p>Theory, observation, and taste agree. If this isn’t a feature to remove for the health of the language, then what is?<br></p><p>Cheers,<br></p><p>Paul<br></p><p>–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––<br>https://innig.net • @inthehands • http://siestaframework.com/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  6, 2015 at 12:00:00pm</p></header><div class="content"><p>That is very odd indeed.<br></p><p>If you add explicit capture, the issue goes away:<br></p><p>var handlers: [() -&gt; Void] = []<br></p><p>for i in 0..&lt;5 {<br>    handlers.append {[i] in print(i, terminator:&quot;,&quot;) }<br>}<br></p><p>for handler in handlers {<br>    handler()  // &quot;0 1 2 3 4&quot;<br>}<br></p><p>handlers = []<br></p><p>for var i = 0; i &lt; 5; i += 1 {<br>    handlers.append {[i] in print(i, terminator:&quot;,&quot;) }<br>}<br></p><p>print(&quot;&quot;)<br>for handler in handlers {<br>    handler()  // was &quot;5 5 5 5 5&quot;, now 1, 2, 3, 4, 5<br>}<br></p><p>It really seems like a bug to me rather than a feature of the for-loop<br></p><p>-- Erica<br></p><p><br>&gt; On Dec 6, 2015, at 12:03 PM, Kelly Gerber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think that the C-style for loop should be removed from Swift. The scope rules for this for loop are wrong. Every loop sees the same scope. This is a source of bugs if you export the loop variable name outside the scope of the for statement, for example in a closure. The following code illustrates the problem:<br>&gt; <br>&gt; var handlers: [() -&gt; ()] = []<br>&gt; <br>&gt; for i in 0..&lt;5 {<br>&gt;     handlers.append { print(i) }<br>&gt; }<br>&gt; <br>&gt; for handler in handlers {<br>&gt;     handler()  // &quot;0 1 2 3 4&quot;<br>&gt; }<br>&gt; <br>&gt; handlers = []<br>&gt; <br>&gt; for var i = 0; i &lt; 5; i += 1 {<br>&gt;     handlers.append { print(i) }<br>&gt; }<br>&gt; <br>&gt; for handler in handlers {<br>&gt;     handler()  // &quot;5 5 5 5 5&quot;<br>&gt; }<br>&gt; <br>&gt; The Swift for-in loop does the right thing naturally. The C-style for loop does the wrong thing naturally. Removing the C-style for loop from Swift will eliminate one more class of possible errors from the language.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/c0d7c9bf/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: open.gif<br>Type: image/gif<br>Size: 43 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/c0d7c9bf/attachment.gif&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>C-style For Loops</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>I think this is indeed an (anti-)feature of C-style loop.<br></p><p>`for var i = 0; i &lt; 5; i += 1` is supposed to actually create a variable i;<br>in particular you can change this variable yourself or pass the reference<br>to it, so the implementation must work as follows:<br></p><p>var i = 0;<br>while( ...<br></p><p>Naturally, the closures are able to capture and modify i as well.<br></p><p>Or, in other words, by the definition of what C-style loop is, `for let i =<br>0; i &lt; 5; i += 1` is impossible.<br></p><p>This magic behavior is in fact the best argument for the removal of C-style<br>loop, imho.<br></p><p><br></p><p>On Sun, Dec 6, 2015 at 10:14 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; That is very odd indeed.<br>&gt;<br>&gt; If you add explicit capture, the issue goes away:<br>&gt;<br>&gt; var handlers: [() -&gt; Void] = []<br>&gt;<br>&gt; for i in 0..&lt;5 {<br>&gt;     handlers.append {[i] in print(i, terminator:&quot;,&quot;) }<br>&gt; }<br>&gt;<br>&gt; for handler in handlers {<br>&gt;     handler()  // &quot;0 1 2 3 4&quot;<br>&gt; }<br>&gt;<br>&gt; handlers = []<br>&gt;<br>&gt; for var i = 0; i &lt; 5; i += 1 {<br>&gt;     handlers.append {[i] in print(i, terminator:&quot;,&quot;) }<br>&gt; }<br>&gt;<br>&gt; print(&quot;&quot;)<br>&gt; for handler in handlers {<br>&gt;     handler()  // was &quot;5 5 5 5 5&quot;, now 1, 2, 3, 4, 5<br>&gt; }<br>&gt;<br>&gt; It really seems like a bug to me rather than a feature of the for-loop<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; On Dec 6, 2015, at 12:03 PM, Kelly Gerber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think that the C-style *for* loop should be removed from Swift. The<br>&gt; scope rules for this *for* loop are wrong. Every loop sees the same<br>&gt; scope. This is a source of bugs if you export the loop variable name<br>&gt; outside the scope of the *for* statement, for example in a closure. The<br>&gt; following code illustrates the problem:<br>&gt;<br>&gt; var handlers: [() -&gt; ()] = []<br>&gt;<br>&gt; for i in 0..&lt;5 {<br>&gt;     handlers.append { print(i) }<br>&gt; }<br>&gt;<br>&gt; for handler in handlers {<br>&gt;     handler()  // &quot;0 1 2 3 4&quot;<br>&gt; }<br>&gt;<br>&gt; handlers = []<br>&gt;<br>&gt; for var i = 0; i &lt; 5; i += 1 {<br>&gt;     handlers.append { print(i) }<br>&gt; }<br>&gt;<br>&gt; for handler in handlers {<br>&gt;     handler()  // &quot;5 5 5 5 5&quot;<br>&gt; }<br>&gt;<br>&gt; The Swift *for-in* loop does the right thing naturally. The C-style *for* loop<br>&gt; does the wrong thing naturally. Removing the C-style *for* loop from<br>&gt; Swift will eliminate one more class of possible errors from the language.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a6f87478/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: open.gif<br>Type: image/gif<br>Size: 43 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a6f87478/attachment.gif&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>C-style For Loops</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>+1 on embracing breaking change as necessary for moving the language forward!<br></p><p>&gt; On Dec 6, 2015, at 1:08 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’d like to express my pure joy at a proposal to _remove_ a feature from a popular language.<br>&gt; <br>&gt; My favorite Swift feature? Its brilliant insights that optionality should be a characteristic of _types_ but mutability should be a characteristic of _variables_ are right up there. But no, my favorite feature of Swift so far is its willingness to make breaking language changes. Hallelujiah!<br>&gt; <br>&gt; Fear of removing features and making breaking changes is what doomed Java to its current status of “most used, most sneered at.” It’s what’s turned C++ into the world’s largest ball of twine. Swift is wise to set the early precedent of carefully considered breaking language changes.<br>&gt; <br>&gt;&gt;&gt; We’ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt; <br>&gt;&gt; But I think this is a very weak reason for *removing* any portion like C-loops and increment or decrement operators of a programming language.<br>&gt; <br>&gt; I cannot imagine a better case for removing a language feature.<br>&gt; <br>&gt; We have a feature that is:<br>&gt; <br>&gt; 1. not widely used,<br>&gt; 2. easily replaced with other languages features where it is used, and<br>&gt; 3. inconsistent with the language’s general aesthetic.<br>&gt; <br>&gt; Theory, observation, and taste agree. If this isn’t a feature to remove for the health of the language, then what is?<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Paul<br>&gt; <br>&gt; –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––<br>&gt; https://innig.net • @inthehands • http://siestaframework.com/<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
