<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32bc8f3d077b26024665ae3904895569?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Tony Allevato</string> &lt;tony.allevato at gmail.com&gt;<p>May 14, 2016 at 08:00:00am</p></header><div class="content"><p>On 2016-05-10 18:51:29 +0000, Chris Lattner via swift-evolution said:<br></p><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins <br>&gt; now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt;  <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md <br>&gt; <br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All <br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the <br>&gt; review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review <br>&gt; through constructive criticism and contribute to the direction of <br>&gt; Swift. When writing your review, here are some questions you might want <br>&gt; to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. My thoughts essentially mirror those of Jon Shier, Karl Wagner, and <br>Nicola Salmoria.<br></p><p>To me, this makes declarations with complex sets of constraints much <br>harder to read, because I have to hunt them down instead of finding <br>them all in one place. Under this proposal, the longer an argument list <br>gets, the further separated the constraints are from the type <br>parameters that use them.<br></p><p>This solution also obfuscates function definitions. Having the <br>function&#39;s return type be the very last thing in the header line is has <br>very nice readability benefit, and this proposal takes that away by <br>sandwiching the return type awkwardly in the middle.<br></p><p>The admission that some constraints should be allowed inside the angle <br>brackets (conformance constraints) while moving others (associated type <br>constraints) out introduces inconsistency in the language and seems <br>like an incomplete fix. From a teaching point of view, I would find it <br>more difficult to explain to users of the language &quot;constraints that <br>look like *this* go here, but constraints that look like *that* go way <br>over there&quot;. The current model of &quot;all generic constraints go between &lt; <br>and &gt;&quot; is clean and simple.<br></p><p>Lastly, from a bit of a pedantic point of view, moving the where-clause <br>to the end of a function declaration makes it look like the function is <br>satisfying some constraints, when it&#39;s actually the generic type <br>parameters that are satisfying them. In that sense, it&#39;s better to keep <br>them closer together.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a <br>&gt; change to Swift?<br></p><p>Yes, but not in this fashion. I agree with some of the other sentiment <br>that there should be better ways of satisfying complex constraint sets <br>(through generic typealiases or something else) to clean them up, but <br>moving the where-clause creates more readability problems than it <br>solves.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don&#39;t believe so; it adds inconsistency rather than removes it.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar <br>&gt; feature, how do you feel that this proposal compares to those?<br></p><p>No languages that allow generics to be expressed so richly as Swift&#39;s.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick <br>&gt; reading, or an in-depth study?<br></p><p>Read the proposal and followed the mailing list threads.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 14, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 14 May 2016, at 16:52, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; To me, this makes declarations with complex sets of constraints much harder to read, because I have to hunt them down instead of finding them all in one place. Under this proposal, the longer an argument list gets, the further separated the constraints are from the type parameters that use them.<br></p><p>This is partly an issue of how you use the feature rather than an issue with the feature itself, as you’re assuming that everything is all on one line, but really I think the intent of this feature is to better support multi-line declarations. It enables things like:<br></p><p>	func someMethod&lt;S:SequenceType, T&gt;(value:S) -&gt; AnySequence&lt;T&gt;<br>		where S.Generator.Element == T { … }<br></p><p>The actual function signature stays on the top, but the constraint can now move down neatly, since it’s a supplementary condition that you may not to consider right away, or at all, if it’s just reinforcing some kind of common-sense limitation.<br></p><p>This is partly why I’d prefer to see it optional though, as some things will fit on one line reasonably well (you probably could with the above for example), but like you say, with it all on one line the return type becomes less visible.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160514/39cdb7a0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 16, 2016 at 12:00:00pm</p></header><div class="content"><p>I tend to agree with Jon Shier, Karl Wagner, Nicola Salmoria, and Tony Allevato. I think moving `where` to the end hinders comprehension. The extra constraint abilities that Nicola brought up look interesting.<br></p><p><br>&gt; On 15 May 2016, at 1:52 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On 2016-05-10 18:51:29 +0000, Chris Lattner via swift-evolution said:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; What goes into a review?<br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; -1. My thoughts essentially mirror those of Jon Shier, Karl Wagner, and Nicola Salmoria.<br>&gt; <br>&gt; To me, this makes declarations with complex sets of constraints much harder to read, because I have to hunt them down instead of finding them all in one place. Under this proposal, the longer an argument list gets, the further separated the constraints are from the type parameters that use them.<br>&gt; <br>&gt; This solution also obfuscates function definitions. Having the function&#39;s return type be the very last thing in the header line is has very nice readability benefit, and this proposal takes that away by sandwiching the return type awkwardly in the middle.<br>&gt; <br>&gt; The admission that some constraints should be allowed inside the angle brackets (conformance constraints) while moving others (associated type constraints) out introduces inconsistency in the language and seems like an incomplete fix. From a teaching point of view, I would find it more difficult to explain to users of the language &quot;constraints that look like *this* go here, but constraints that look like *that* go way over there&quot;. The current model of &quot;all generic constraints go between &lt; and &gt;&quot; is clean and simple.<br>&gt; <br>&gt; Lastly, from a bit of a pedantic point of view, moving the where-clause to the end of a function declaration makes it look like the function is satisfying some constraints, when it&#39;s actually the generic type parameters that are satisfying them. In that sense, it&#39;s better to keep them closer together.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, but not in this fashion. I agree with some of the other sentiment that there should be better ways of satisfying complex constraint sets (through generic typealiases or something else) to clean them up, but moving the where-clause creates more readability problems than it solves.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I don&#39;t believe so; it adds inconsistency rather than removes it.<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; No languages that allow generics to be expressed so richly as Swift&#39;s.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Read the proposal and followed the mailing list threads.<br>&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; Thank you,<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0081: Move where clause to end of declaration</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>May 16, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Am 14.05.2016 um 17:52 schrieb Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; On 2016-05-10 18:51:29 +0000, Chris Lattner via swift-evolution said:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; The review of &quot;SE-0081: Move where clause to end of declaration&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; What goes into a review?<br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; -1. My thoughts essentially mirror those of Jon Shier, Karl Wagner, and Nicola Salmoria.<br>&gt; <br>&gt; To me, this makes declarations with complex sets of constraints much harder to read, because I have to hunt them down instead of finding them all in one place. Under this proposal, the longer an argument list gets, the further separated the constraints are from the type parameters that use them.<br>&gt; <br>&gt; This solution also obfuscates function definitions. Having the function&#39;s return type be the very last thing in the header line is has very nice readability benefit, and this proposal takes that away by sandwiching the return type awkwardly in the middle.<br></p><p>IMO the readability is improved because the where clause can be easily placed in a new line. Generic function definitions with where clauses typically are too long for being crammed into one line without having the readability suffer. The proposal allows a much more readable splitting of the definition into several lines. This completely alleviates the problem of separating generic type information or sandwiching the return type, because the where clause in the next line will be near the generic type parameter list again.<br>Taking Jon Shier’s example: <br>The following definition is already too long IMO. The current syntax does not allow nice splitting of the line and readability suffers from the long gap between the function name and its parameter list:<br>    func something&lt;T: Decodable where T == T.DecodedType&gt;(with something: T) -&gt; String<br></p><p>instead of writing a long line with sandwiching problems like that:<br>    func something&lt;T: Decodable&gt;(with something: T) -&gt; String where T == T.DecodedType<br></p><p>I would write:<br>    func something&lt;T: Decodable&gt;(with something: T) -&gt; String <br>        where T == T.DecodedType<br></p><p><br>To recap: I think that readability improves with the proposal for the following reasons:<br>- The gap between the function name and its parameter list is reduced<br>- Definitions with where clauses typically are already too long to readably fit into one line, so they should be split over more than one line. The current syntax does not offer a natural position for a line break (breaking before the where even further increases the gap between the function name and its parameter list and it looks ugly because of the angle brackets being on separate lines.<br></p><p>-Thorsten<br></p><p>&gt; <br>&gt; The admission that some constraints should be allowed inside the angle brackets (conformance constraints) while moving others (associated type constraints) out introduces inconsistency in the language and seems like an incomplete fix. From a teaching point of view, I would find it more difficult to explain to users of the language &quot;constraints that look like *this* go here, but constraints that look like *that* go way over there&quot;. The current model of &quot;all generic constraints go between &lt; and &gt;&quot; is clean and simple.<br>&gt; <br>&gt; Lastly, from a bit of a pedantic point of view, moving the where-clause to the end of a function declaration makes it look like the function is satisfying some constraints, when it&#39;s actually the generic type parameters that are satisfying them. In that sense, it&#39;s better to keep them closer together.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, but not in this fashion. I agree with some of the other sentiment that there should be better ways of satisfying complex constraint sets (through generic typealiases or something else) to clean them up, but moving the where-clause creates more readability problems than it solves.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I don&#39;t believe so; it adds inconsistency rather than removes it.<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; No languages that allow generics to be expressed so richly as Swift&#39;s.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Read the proposal and followed the mailing list threads.<br>&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; Thank you,<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/978b3f5c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
