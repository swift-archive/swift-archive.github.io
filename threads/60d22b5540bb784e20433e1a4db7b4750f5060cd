<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/62749cfcefbf700862299872a12b2d57?s=50"></div><header><strong>Character vs. String literals</strong> from <string>Andrew Duncan</string> &lt;andrewzboard at gmail.com&gt;<p>December 20, 2015 at 01:00:00pm</p></header><div class="content"><p>We have all watched the evolution of the String class, and the amazing jockeying required to accommodate Unicode combining characters and the like. At this point, the distinction between Characters and Strings and Arrays of Characters (myString.characters) is becoming clearer.<br></p><p>But in the source code, there is ambiguity. What is &quot;a&quot;, a character literal or a string of length 1? I suggest reinstating the C convention of using single-quotes for delimiting Characters.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Character vs. String literals</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 21, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 20, 2015, at 4:44 PM, Andrew Duncan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We have all watched the evolution of the String class, and the amazing jockeying required to accommodate Unicode combining characters and the like. At this point, the distinction between Characters and Strings and Arrays of Characters (myString.characters) is becoming clearer.<br>&gt; <br>&gt; But in the source code, there is ambiguity. What is &quot;a&quot;, a character literal or a string of length 1? I suggest reinstating the C convention of using single-quotes for delimiting Characters.<br></p><p>What are you looking to solve for here? Have you encountered specific bugs because of this?<br></p><p>You can usually disambiguate by investigating where resolution takes place (using an IDE like Xcode right now makes this a lot easier).<br></p><p>    let str = &quot;a&quot; // String takes precedence. Option-click `str` in Xcode to see that it&#39;s a String<br>    let chr: Character = &quot;a&quot; // It&#39;s a character :)<br></p><p>    funcTakingCharacter(&quot;a&quot;) // Option-click `funcTakingCharacter` to see that it&#39;s takes a Character<br>    funcTakingString(&quot;a&quot;) // Same<br></p><p>Anything conforming to StringLiteralConvertible can be determined similarly. Where there _is_ actual ambiguity, an explicit &quot;as T&quot; is required.<br></p><p>Stephen<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
