<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March  4, 2016 at 05:00:00pm</p></header><div class="content"><p>on Fri Mar 04 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; What algorithms or components can be simplified by taking advantage of<br>&gt;&gt; this extra guarantee?  If the category of code that can use it is<br>&gt;&gt; broader than the category of generators that would suffer an overhead or<br>&gt;&gt; implementation complexity, it might be worth doing.<br>&gt;&gt; <br>&gt;&gt; My intuition is that both categories are small.  <br>&gt;<br>&gt; I do agree that both categories are probably small. But they have very different consequences:<br>&gt;<br>&gt; * If you make the guarantee, certain rare types of generators will<br>&gt;   need a little more storage and an extra branch.<br>&gt;<br>&gt; * If you don&#39;t make the guarantee, code which works most of the time<br>&gt;   will fail when combined with certain generators.<br>&gt;<br>&gt; It seems like we&#39;re facing a tradeoff between a tiny efficiency gain<br>&gt; in rare cases and predictable semantics in all cases. I&#39;m not<br>&gt; convinced efficiency is the right choice here.<br></p><p>Me neither; I&#39;m just trying to focus the analysis.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
