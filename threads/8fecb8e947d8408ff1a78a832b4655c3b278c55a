<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bf5d39881b91eb515f07d65c57b1fa?s=50"></div><header><strong>Passing a pointer to self to C function</strong> from <string>John Brownie</string> &lt;john_brownie at sil.org&gt;<p>September 30, 2016 at 01:00:00pm</p></header><div class="content"><p>Still working on the expat wrapper. The thing I need to do is to pass a <br>pointer to self to be stored in the userData that will be passed to <br>callbacks, allowing me to get at the local instance. I did this in Swift <br>2.2 as:<br></p><p>XML_SetUserData(parser, unsafeBitCast(self, <br>UnsafeMutablePointer&lt;Void&gt;.self))<br></p><p>The migrator turned this into:<br></p><p>XML_SetUserData(parser, unsafeBitCast(self, to: <br>UnsafeMutableRawPointer.self))<br></p><p>but it doesn&#39;t work. I don&#39;t get an appropriate pointer back in the <br>callback that I can turn into what I need.<br></p><p> From reading the migration documentation, I don&#39;t want to use <br>unsafeBitCast if at all possible, but I&#39;m not clear what the alternative is.<br></p><p>Also, getting the userData back is something I will need. I currently use:<br></p><p>let theParser = userData!.bindMemory(to: ExpatSwift.self, capacity: 1)<br></p><p>I think that&#39;s correct, but I&#39;m not getting a valid object reference.<br></p><p>Any insight is greatly appreciated!<br>-- <br>John Brownie<br>In Finland on furlough from SIL Papua New Guinea<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160930/8fecc55a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c23a24dd9f358575e9764f1a535e2ce0?s=50"></div><header><strong>Passing a pointer to self to C function</strong> from <string>Mike Ferenduros</string> &lt;mike.ferenduros at gmail.com&gt;<p>September 30, 2016 at 11:00:00am</p></header><div class="content"><p>The way to do this is via Unmanaged:<br>    let raw = Unmanaged.passUnretained(expat).toOpaque()<br>gets you an UnsafeMutableRawPointer you can pass into C functions. You can<br>turn this back into an ExpatSwift with<br>    let expat = Unmanaged&lt;ExpatSwift&gt;.fromOpaque(raw).takeUnretainedValue()<br></p><p>There are also retained variants that will add or remove a reference to the<br>object in question.<br>Basically, if you know that the pointer won&#39;t outlive the thing it<br>references, you want the unretained variants. This is usually what you want<br>when you&#39;re wrapping C APIs with callbacks, especially if callbacks happen<br>synchronously.<br></p><p>On the other hand, if the pointer lives independently of the Whatever then<br>you may want to<br> - create the pointer with passRetained(), which will keep the object it<br>points to alive<br> - access the object with take*Un*retainedValue() (so you don&#39;t prematurely<br>release your reference to it), and<br>- call release() on it when you&#39;re done with it.<br>If you forget the 3rd step then you&#39;re leaking memory, and if you<br>miscalculate and do it twice then you crash.<br></p><p>Or if you&#39;re just passing a pointer from A to B one time, you can use<br>passRetained() + takeRetainedValue().<br></p><p>Hope that helps<br>Mike<br></p><p>On Fri, 30 Sep 2016 at 13:11 John Brownie via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Still working on the expat wrapper. The thing I need to do is to pass a<br>&gt; pointer to self to be stored in the userData that will be passed to<br>&gt; callbacks, allowing me to get at the local instance. I did this in Swift<br>&gt; 2.2 as:<br>&gt;<br>&gt; XML_SetUserData(parser, unsafeBitCast(self,<br>&gt; UnsafeMutablePointer&lt;Void&gt;.self))<br>&gt;<br>&gt; The migrator turned this into:<br>&gt;<br>&gt; XML_SetUserData(parser, unsafeBitCast(self, to:<br>&gt; UnsafeMutableRawPointer.self))<br>&gt;<br>&gt; but it doesn&#39;t work. I don&#39;t get an appropriate pointer back in the<br>&gt; callback that I can turn into what I need.<br>&gt;<br>&gt; &gt;From reading the migration documentation, I don&#39;t want to use<br>&gt; unsafeBitCast if at all possible, but I&#39;m not clear what the alternative is.<br>&gt;<br>&gt; Also, getting the userData back is something I will need. I currently use:<br>&gt;<br>&gt; let theParser = userData!.bindMemory(to: ExpatSwift.self, capacity: 1)<br>&gt;<br>&gt; I think that&#39;s correct, but I&#39;m not getting a valid object reference.<br>&gt;<br>&gt; Any insight is greatly appreciated!<br>&gt; --<br>&gt; John Brownie<br>&gt; In Finland on furlough from SIL Papua New Guinea<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160930/17526684/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bf5d39881b91eb515f07d65c57b1fa?s=50"></div><header><strong>Passing a pointer to self to C function</strong> from <string>John Brownie</string> &lt;john_brownie at sil.org&gt;<p>September 30, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks! That works just as it should. It&#39;s all compiling and unit tests <br>are passing, so I can move on now.<br>&gt; Mike Ferenduros &lt;mailto:mike.ferenduros at gmail.com&gt;<br>&gt; 30 September 2016 at 14:14<br>&gt; The way to do this is via Unmanaged:<br>&gt;     let raw = Unmanaged.passUnretained(expat).toOpaque()<br>&gt; gets you an UnsafeMutableRawPointer you can pass into C functions. You <br>&gt; can turn this back into an ExpatSwift with<br>&gt;     let expat = <br>&gt; Unmanaged&lt;ExpatSwift&gt;.fromOpaque(raw).takeUnretainedValue()<br>&gt;<br>&gt; There are also retained variants that will add or remove a reference <br>&gt; to the object in question.<br>&gt; Basically, if you know that the pointer won&#39;t outlive the thing it <br>&gt; references, you want the unretained variants. This is usually what you <br>&gt; want when you&#39;re wrapping C APIs with callbacks, especially if <br>&gt; callbacks happen synchronously.<br>&gt;<br>&gt; On the other hand, if the pointer lives independently of the Whatever <br>&gt; then you may want to<br>&gt;  - create the pointer with passRetained(), which will keep the object <br>&gt; it points to alive<br>&gt;  - access the object with take*Un*retainedValue() (so you don&#39;t <br>&gt; prematurely release your reference to it), and<br>&gt; - call release() on it when you&#39;re done with it.<br>&gt; If you forget the 3rd step then you&#39;re leaking memory, and if you <br>&gt; miscalculate and do it twice then you crash.<br>&gt;<br>&gt; Or if you&#39;re just passing a pointer from A to B one time, you can use <br>&gt; passRetained() + takeRetainedValue().<br>&gt;<br></p><p>-- <br>John Brownie<br>In Finland on furlough from SIL Papua New Guinea<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160930/a3c41e94/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
