<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>on Sat Feb 13 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On a skim, if there’s a specific explanation as to *why* `inPlace` is<br>&gt; a now a no-go, I don’t see it. <br></p><p>Several justifications were given:<br></p><p>* Several people have an “ick” reaction when they see it.<br></p><p>* It&#39;s not in the guidelines.<br></p><p>* If we add it to the guidelines, it will only be as fallback<br>  last-resort alternative.<br></p><p>* If one of the three main collection types can&#39;t conform to the<br>  recommendations of the non-last-resort guidelines, the guidelines are<br>  a failure.<br></p><p>&gt; I can’t say I like the proposed changes<br>&gt; very much, and I definitely don’t like some of the more-creative<br>&gt; suggestions.<br>&gt;<br>&gt; It’s hard to offer help when it’s not clear what was deemed<br>&gt; problematic about the existing (and “perfectly fine with me”!) names.<br>&gt;<br>&gt; Separately, can I ask here why SetAlgebra protocol doesn’t contain an<br>&gt; *overridable* method like `func intersects(other: Self) -&gt; Bool`?<br>&gt;<br>&gt; (Note: I am *well-aware* that `a intersects b &lt;=&gt; !(a and b are disjoint)`).<br></p><p>There&#39;s no point in providing an override if there&#39;s no chance of it<br>being better than the default implementation.<br></p><p>&gt; That absence has been puzzling me ever whichever release of Swift<br>&gt; first introduced this protocol, particularly since e.g. both<br>&gt; `isSubsetOf` and `isSupersetOf` are individually-overridable.<br>&gt;<br>&gt;  (Likewise, but less so, I do wonder why the protocol doesn’t contain<br>&gt; *overridable* `isStrictSubset` and `isStrictSuperset` functions,<br>&gt; either...).<br></p><p>Same reasoning, but we may have mistakenly decided there was no chance<br>of optimization.  If so, please open a ticket.<br></p><p>&gt;&gt; On Feb 11, 2016, at 10:52 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi All,<br>&gt;&gt; <br>&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt; to the API of<br>&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt; under development.<br>&gt;&gt; <br>&gt;&gt; Comments welcome as usual,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>February 14, 2016 at 07:00:00am</p></header><div class="content"><p>I was a fan of the inPlace variants because for me it was more clear than remembering sort from sorted.<br></p><p>Is there a reason for the mutating versions of these at all? <br></p><p>I would say that setA = setA.union(setB) is most expressive of intent. It makes it absolutely clear that setA is being replaced by something.<br></p><p>Having a mutating or non-mutating version of an operation but not both would be less confusing IMO.<br></p><p>Methods such as append() and remove() could still be mutating as there has never been non-mutating version of them. Or the suggested .= operator could be used and all of these methods could become non-mutating.<br></p><p>i.e.<br></p><p>setA .= union(setB)<br></p><p>arrayC .= elementToAdd<br></p><p>arrayD .= removeAll()<br></p><p>where A .= method() means A = A.method()<br></p><p>Daniel<br></p><p>&gt; On Feb 13, 2016, at 2:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Feb 13 2016, plx &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On a skim, if there’s a specific explanation as to *why* `inPlace` is<br>&gt;&gt; a now a no-go, I don’t see it. <br>&gt; <br>&gt; Several justifications were given:<br>&gt; <br>&gt; * Several people have an “ick” reaction when they see it.<br>&gt; <br>&gt; * It&#39;s not in the guidelines.<br>&gt; <br>&gt; * If we add it to the guidelines, it will only be as fallback<br>&gt;  last-resort alternative.<br>&gt; <br>&gt; * If one of the three main collection types can&#39;t conform to the<br>&gt;  recommendations of the non-last-resort guidelines, the guidelines are<br>&gt;  a failure.<br>&gt; <br>&gt;&gt; I can’t say I like the proposed changes<br>&gt;&gt; very much, and I definitely don’t like some of the more-creative<br>&gt;&gt; suggestions.<br>&gt;&gt; <br>&gt;&gt; It’s hard to offer help when it’s not clear what was deemed<br>&gt;&gt; problematic about the existing (and “perfectly fine with me”!) names.<br>&gt;&gt; <br>&gt;&gt; Separately, can I ask here why SetAlgebra protocol doesn’t contain an<br>&gt;&gt; *overridable* method like `func intersects(other: Self) -&gt; Bool`?<br>&gt;&gt; <br>&gt;&gt; (Note: I am *well-aware* that `a intersects b &lt;=&gt; !(a and b are disjoint)`).<br>&gt; <br>&gt; There&#39;s no point in providing an override if there&#39;s no chance of it<br>&gt; being better than the default implementation.<br>&gt; <br>&gt;&gt; That absence has been puzzling me ever whichever release of Swift<br>&gt;&gt; first introduced this protocol, particularly since e.g. both<br>&gt;&gt; `isSubsetOf` and `isSupersetOf` are individually-overridable.<br>&gt;&gt; <br>&gt;&gt; (Likewise, but less so, I do wonder why the protocol doesn’t contain<br>&gt;&gt; *overridable* `isStrictSubset` and `isStrictSuperset` functions,<br>&gt;&gt; either...).<br>&gt; <br>&gt; Same reasoning, but we may have mistakenly decided there was no chance<br>&gt; of optimization.  If so, please open a ticket.<br>&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 10:52 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt; to the API of<br>&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt; under development.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Comments welcome as usual,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/40a73586/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>February 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 14, 2016, at 7:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was a fan of the inPlace variants because for me it was more clear than remembering sort from sorted.<br>&gt; <br>&gt; Is there a reason for the mutating versions of these at all? <br>&gt; <br>&gt; I would say that setA = setA.union(setB) is most expressive of intent. It makes it absolutely clear that setA is being replaced by something.<br>&gt; <br>&gt; Having a mutating or non-mutating version of an operation but not both would be less confusing IMO.<br>&gt; <br>&gt; Methods such as append() and remove() could still be mutating as there has never been non-mutating version of them. Or the suggested .= operator could be used and all of these methods could become non-mutating.<br>&gt; <br>&gt; i.e.<br>&gt; <br>&gt; setA .= union(setB)<br>&gt; <br>&gt; arrayC .= elementToAdd<br></p><p>sorry this should be arrayC .= append(elementToAdd)<br>&gt; <br>&gt; arrayD .= removeAll()<br>&gt; <br>&gt; where A .= method() means A = A.method()<br>&gt; <br>&gt; Daniel<br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 2:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sat Feb 13 2016, plx &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On a skim, if there’s a specific explanation as to *why* `inPlace` is<br>&gt;&gt;&gt; a now a no-go, I don’t see it. <br>&gt;&gt; <br>&gt;&gt; Several justifications were given:<br>&gt;&gt; <br>&gt;&gt; * Several people have an “ick” reaction when they see it.<br>&gt;&gt; <br>&gt;&gt; * It&#39;s not in the guidelines.<br>&gt;&gt; <br>&gt;&gt; * If we add it to the guidelines, it will only be as fallback<br>&gt;&gt;  last-resort alternative.<br>&gt;&gt; <br>&gt;&gt; * If one of the three main collection types can&#39;t conform to the<br>&gt;&gt;  recommendations of the non-last-resort guidelines, the guidelines are<br>&gt;&gt;  a failure.<br>&gt;&gt; <br>&gt;&gt;&gt; I can’t say I like the proposed changes<br>&gt;&gt;&gt; very much, and I definitely don’t like some of the more-creative<br>&gt;&gt;&gt; suggestions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s hard to offer help when it’s not clear what was deemed<br>&gt;&gt;&gt; problematic about the existing (and “perfectly fine with me”!) names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Separately, can I ask here why SetAlgebra protocol doesn’t contain an<br>&gt;&gt;&gt; *overridable* method like `func intersects(other: Self) -&gt; Bool`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Note: I am *well-aware* that `a intersects b &lt;=&gt; !(a and b are disjoint)`).<br>&gt;&gt; <br>&gt;&gt; There&#39;s no point in providing an override if there&#39;s no chance of it<br>&gt;&gt; being better than the default implementation.<br>&gt;&gt; <br>&gt;&gt;&gt; That absence has been puzzling me ever whichever release of Swift<br>&gt;&gt;&gt; first introduced this protocol, particularly since e.g. both<br>&gt;&gt;&gt; `isSubsetOf` and `isSupersetOf` are individually-overridable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Likewise, but less so, I do wonder why the protocol doesn’t contain<br>&gt;&gt;&gt; *overridable* `isStrictSubset` and `isStrictSuperset` functions,<br>&gt;&gt;&gt; either...).<br>&gt;&gt; <br>&gt;&gt; Same reasoning, but we may have mistakenly decided there was no chance<br>&gt;&gt; of optimization.  If so, please open a ticket.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 10:52 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5 &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt;&gt; to the API of<br>&gt;&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt;&gt; under development.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Comments welcome as usual,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/6d84ab6f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 14, 2016 at 08:00:00am</p></header><div class="content"><p>on Sun Feb 14 2016, Daniel Steinberg &lt;daniel-AT-dimsumthinking.com&gt; wrote:<br></p><p>&gt; I was a fan of the inPlace variants because for me it was more clear<br>&gt; than remembering sort from sorted.<br>&gt;<br>&gt; Is there a reason for the mutating versions of these at all? <br></p><p>Efficiency.<br></p><p>&gt; I would say that setA = setA.union(setB) is most expressive of<br>&gt; intent. It makes it absolutely clear that setA is being replaced by<br>&gt; something.<br>&gt;<br>&gt; Having a mutating or non-mutating version of an operation but not both<br>&gt; would be less confusing IMO.<br>&gt;<br>&gt; Methods such as append() and remove() could still be mutating as there<br>&gt; has never been non-mutating version of them. Or the suggested .=<br>&gt; operator could be used and all of these methods could become<br>&gt; non-mutating.<br>&gt;<br>&gt; i.e.<br>&gt;<br>&gt; setA .= union(setB)<br>&gt;<br>&gt; arrayC .= elementToAdd<br>&gt;<br>&gt; arrayD .= removeAll()<br>&gt;<br>&gt; where A .= method() means A = A.method()<br></p><p>As noted elsewhere, language features to help solve this are<br>out-of-scope—at least for the time being and quite possibly forever.  We<br>need to handle it with naming conventions in the here and now.<br></p><p>&gt; Daniel<br>&gt;<br>&gt;&gt; On Feb 13, 2016, at 2:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sat Feb 13 2016, plx &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On a skim, if there’s a specific explanation as to *why* `inPlace` is<br>&gt;&gt;&gt; a now a no-go, I don’t see it. <br>&gt;&gt; <br>&gt;&gt; Several justifications were given:<br>&gt;&gt; <br>&gt;&gt; * Several people have an “ick” reaction when they see it.<br>&gt;&gt; <br>&gt;&gt; * It&#39;s not in the guidelines.<br>&gt;&gt; <br>&gt;&gt; * If we add it to the guidelines, it will only be as fallback<br>&gt;&gt;  last-resort alternative.<br>&gt;&gt; <br>&gt;&gt; * If one of the three main collection types can&#39;t conform to the<br>&gt;&gt;  recommendations of the non-last-resort guidelines, the guidelines are<br>&gt;&gt;  a failure.<br>&gt;&gt; <br>&gt;&gt;&gt; I can’t say I like the proposed changes<br>&gt;&gt;&gt; very much, and I definitely don’t like some of the more-creative<br>&gt;&gt;&gt; suggestions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s hard to offer help when it’s not clear what was deemed<br>&gt;&gt;&gt; problematic about the existing (and “perfectly fine with me”!) names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Separately, can I ask here why SetAlgebra protocol doesn’t contain an<br>&gt;&gt;&gt; *overridable* method like `func intersects(other: Self) -&gt; Bool`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Note: I am *well-aware* that `a intersects b &lt;=&gt; !(a and b are disjoint)`).<br>&gt;&gt; <br>&gt;&gt; There&#39;s no point in providing an override if there&#39;s no chance of it<br>&gt;&gt; being better than the default implementation.<br>&gt;&gt; <br>&gt;&gt;&gt; That absence has been puzzling me ever whichever release of Swift<br>&gt;&gt;&gt; first introduced this protocol, particularly since e.g. both<br>&gt;&gt;&gt; `isSubsetOf` and `isSupersetOf` are individually-overridable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Likewise, but less so, I do wonder why the protocol doesn’t contain<br>&gt;&gt;&gt; *overridable* `isStrictSubset` and `isStrictSuperset` functions,<br>&gt;&gt;&gt; either...).<br>&gt;&gt; <br>&gt;&gt; Same reasoning, but we may have mistakenly decided there was no chance<br>&gt;&gt; of optimization.  If so, please open a ticket.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 10:52 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt; to the API of<br>&gt;&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt;&gt; under development.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Comments welcome as usual,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>February 14, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 1:32 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Feb 13 2016, plx &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On a skim, if there’s a specific explanation as to *why* `inPlace` is<br>&gt;&gt; a now a no-go, I don’t see it. <br>&gt; <br>&gt; Several justifications were given:<br>&gt; <br>&gt; * Several people have an “ick” reaction when they see it.<br>&gt; <br>&gt; * It&#39;s not in the guidelines.<br>&gt; <br>&gt; * If we add it to the guidelines, it will only be as fallback<br>&gt;  last-resort alternative.<br>&gt; <br>&gt; * If one of the three main collection types can&#39;t conform to the<br>&gt;  recommendations of the non-last-resort guidelines, the guidelines are<br>&gt;  a failure.<br></p><p>As a devil’s advocate, why wouldn’t the existing names be justifiable under “Use terminology well” guideline?<br></p><p>I’d consider making up new terminology for a well-established domain much worse than simply not following the naming conventions.<br></p><p>&gt; <br>&gt;&gt; I can’t say I like the proposed changes<br>&gt;&gt; very much, and I definitely don’t like some of the more-creative<br>&gt;&gt; suggestions.<br>&gt;&gt; <br>&gt;&gt; It’s hard to offer help when it’s not clear what was deemed<br>&gt;&gt; problematic about the existing (and “perfectly fine with me”!) names.<br>&gt;&gt; <br>&gt;&gt; Separately, can I ask here why SetAlgebra protocol doesn’t contain an<br>&gt;&gt; *overridable* method like `func intersects(other: Self) -&gt; Bool`?<br>&gt;&gt; <br>&gt;&gt; (Note: I am *well-aware* that `a intersects b &lt;=&gt; !(a and b are disjoint)`).<br>&gt; <br>&gt; There&#39;s no point in providing an override if there&#39;s no chance of it<br>&gt; being better than the default implementation.<br></p><p>But again, cf `isSupersetOf` and `isSubsetOf`...which are both overridable unless I’m misunderstanding. (Especially as there’s risk of a performance “gotcha” if you only override “the wrong one”). <br></p><p>&gt; <br>&gt;&gt; That absence has been puzzling me ever whichever release of Swift<br>&gt;&gt; first introduced this protocol, particularly since e.g. both<br>&gt;&gt; `isSubsetOf` and `isSupersetOf` are individually-overridable.<br>&gt;&gt; <br>&gt;&gt; (Likewise, but less so, I do wonder why the protocol doesn’t contain<br>&gt;&gt; *overridable* `isStrictSubset` and `isStrictSuperset` functions,<br>&gt;&gt; either...).<br>&gt; <br>&gt; Same reasoning, but we may have mistakenly decided there was no chance<br>&gt; of optimization.  If so, please open a ticket.<br></p><p>There are definitely examples of such; https://bugs.swift.org/browse/SR-735 . <br></p><p>After looking at what’s in github, there really ought to be a few more families of default implementations, e.g. `extension SetAlgebraType where Self:CollectionType` and `extension SetAlgebraType where Self:CollectionType, Index: RandomAccessIndexType` (where we can assume O(1) count).<br></p><p>Is that better as just a ticket or as a discussion on one of the lists?<br></p><p>&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 10:52 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi All,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt; to the API of<br>&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt; under development.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Comments welcome as usual,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/d8c91ff6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
