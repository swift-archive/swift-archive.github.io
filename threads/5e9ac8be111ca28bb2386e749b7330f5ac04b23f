<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b1050243fba63752e081f574b19ee92?s=50"></div><header><strong>plugins, verifiable code?</strong> from <string>Robert Nikander</string> &lt;robert.nikander at icloud.com&gt;<p>May 25, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I’m thinking about creating an OS X app with dynamically loaded plugins. I hear that it’s safest to load plugins in a separate process, so they can’t crash the host program. I haven’t tried this yet, so I’m not sure exactly how it will work. But it got me wondering… has there been any discussion about doing something in Swift like Java’s “verified” code, where you can load a 3rd party plugin and trust that it’s not going to segfault or call some C-library? In other words, no unsafe actions. I’ve seen references to “bitcode” but I don’t know how close that is to JVM bytecode.  And maybe this idea is incompatible in some way with the guiding principles of Swift.<br></p><p>Rob<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>plugins, verifiable code?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 25, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi Robert,<br></p><p>To my knowledge, nothing like this has been seriously proposed. You may want to mail the swift-evolution at swift.org list and start a discussion there.<br></p><p>I think a good way to approach your objectives might be for Swift to adopt some sort of taint analysis-like checking, much like what Rust does with its &#39;unsafe&#39; keyword. The idea being that certain things, like a function which invokes a C function or unsafe direct access to memory, would be marked as &#39;unsafe&#39;, and anything using an &#39;unsafe&#39; thing would itself become &#39;unsafe&#39;. A library that is &#39;safe&#39; at the top level would be guaranteed not to segfault, call C code, or do many other things that could cause issues.<br></p><p>Best,<br>Austin<br></p><p>https://doc.rust-lang.org/book/unsafe.html &lt;https://doc.rust-lang.org/book/unsafe.html&gt;<br></p><p>&gt; On May 25, 2016, at 8:54 PM, Robert Nikander via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I’m thinking about creating an OS X app with dynamically loaded plugins. I hear that it’s safest to load plugins in a separate process, so they can’t crash the host program. I haven’t tried this yet, so I’m not sure exactly how it will work. But it got me wondering… has there been any discussion about doing something in Swift like Java’s “verified” code, where you can load a 3rd party plugin and trust that it’s not going to segfault or call some C-library? In other words, no unsafe actions. I’ve seen references to “bitcode” but I don’t know how close that is to JVM bytecode.  And maybe this idea is incompatible in some way with the guiding principles of Swift.<br>&gt; <br>&gt; Rob<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160525/b50cf26e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>plugins, verifiable code?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>May 25, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 25, 2016, at 8:54 PM, Robert Nikander via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; has there been any discussion about doing something in Swift like Java’s “verified” code, where you can load a 3rd party plugin and trust that it’s not going to segfault or call some C-library?<br></p><p>Any Swift code can abort the process by failing an assertion, or by calling a library function in a way that will cause it to fail an assertion (e.g. by accessing an out-of-bounds array element.) Swift isn’t designed as a “safe” language.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160525/a3f6323b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
