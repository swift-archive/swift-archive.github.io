<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Discussion] stride behavior and a little bit of a call-back to digital numbers</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 28, 2016 at 01:00:00am</p></header><div class="content"><p>Erica Sadun via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; As implemented, `stride` is broken for floating-point numbers. Instead<br>&gt;&gt; of repeatedly adding the `by` interval, it should multiply the interval<br>&gt;&gt; by successive integral values and add that to the base to avoid accruing<br>&gt;&gt; error. Your proposal only papers over the problem.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; Agreed. This is &quot;papering over the problem&quot; of accumulated floating point<br>&gt; error.  There are two issues being addressed:<br>&gt; <br>&gt; 1. Semantics of `through` do not match their promise of going through the<br>&gt; end point rather than stopping at it or before.<br>&gt; 2. Floating point strides accumulate errors by repeatedly adding the `by` interval.<br>&gt; <br>&gt; I mention issue 2 in the alternative implementations:<br>&gt; https://gist.github.com/erica/03c398c06f6c47824429<br>&gt; <br>&gt; Counting expected iterations by forming (max - min) / by, e.g. (2.0 -<br>&gt; 1.0) / 0.1, which is 10, and performing each step as a pro-rated<br>&gt; progression along those steps, which would remove most of the accumulated<br>&gt; floating point errors along the way.<br>&gt; <br>&gt; If you were addressing issue 2, what approach would you suggest:<br>&gt; <br>&gt; * Differentiating integer strides from floating point, and minimizing<br>&gt; floating point errors?<br>&gt; * Leaving the tech as-is with minimal code<br>&gt; change with a relatively high benefit?<br></p><p>Arguably, floating point types shouldn&#39;t conform to Strideable at all, on<br>the general principle that genericizing arithmetic over ints and floats is<br>a trap. That would free floating point types to provide their own<br>specialized implementation of the stride methods. <br></p><p>&gt; <br>&gt; In both cases, I&#39;d still prefer the semantics to *go through* the end<br>&gt; point, not just stop at it, which is issue 1.<br></p><p>I&#39;ll have to defer to domain experts on this one. It seems superficially<br>appealing at least. If your only motivation is to get 1.0 through 2.0 by<br>0.1 to include 2.0, though, that feels like weak justification to me, since<br>that&#39;s a symptom of a different problem. <br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] stride behavior and a little bit of a call-back to digital numbers</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 27, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 6:28 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; If you were addressing issue 2, what approach would you suggest:<br>&gt;&gt; <br>&gt;&gt; * Differentiating integer strides from floating point, and minimizing<br>&gt;&gt; floating point errors?<br>&gt;&gt; * Leaving the tech as-is with minimal code<br>&gt;&gt; change with a relatively high benefit?<br>&gt; <br>&gt; Arguably, floating point types shouldn&#39;t conform to Strideable at all, on<br>&gt; the general principle that genericizing arithmetic over ints and floats is<br>&gt; a trap. That would free floating point types to provide their own<br>&gt; specialized implementation of the stride methods. <br>&gt; <br></p><p><br>As if I don&#39;t already get enough grief from the C-for-loop people, now this? They&#39;ll be <br>burning semicolons on my front lawn at this rate. (And let me mention again that this<br>problem affects C-for-loop just as much as it does strides.)<br></p><p>&gt;&gt; In both cases, I&#39;d still prefer the semantics to *go through* the end<br>&gt;&gt; point, not just stop at it, which is issue 1.<br>&gt; <br>&gt; I&#39;ll have to defer to domain experts on this one. It seems superficially<br>&gt; appealing at least. If your only motivation is to get 1.0 through 2.0 by<br>&gt; 0.1 to include 2.0, though, that feels like weak justification to me, since<br>&gt; that&#39;s a symptom of a different problem. <br></p><p>This sounds like it reduces to the following:<br></p><p>1. Leave as is, broken, requiring workarounds for nearly all floating point cases<br></p><p>2. Leave as is but remove floating point stride support, tick off forloopians. Introduce floating point stride-alike,<br>which isn&#39;t terribly difficult but will need a different something since `Stride` is built on `SignedNumberType`.<br></p><p>3. (This) Introduce a fix to make floating point less sucky and integers more semantically fitting, with<br>minimal code change. Issue FIXME warnings during migration to warn against changed semantics.<br></p><p>4. Do something else. Magic happens. Profit.<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/a8d95ea4/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
