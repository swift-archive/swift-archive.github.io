<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Pitch] inout with capture variable</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>October  6, 2016 at 12:00:00pm</p></header><div class="content"><p>for example:<br></p><p>var a = 1<br></p><p>let block = { [inout a] in<br>	a += 1<br>}<br></p><p>block()<br>block()<br></p><p>print(a) // 3<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36f3ec204630839e54fb68c6979e5f78?s=50"></div><header><strong>[Pitch] inout with capture variable</strong> from <string>Daniel Resnick</string> &lt;danielzresnick at gmail.com&gt;<p>October  5, 2016 at 09:00:00pm</p></header><div class="content"><p>You can currently achieve the same result if you remove `[inout a]` since<br>`var`s are captured by reference.<br></p><p>On Wed, Oct 5, 2016 at 9:06 PM, Cao Jiannan via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; for example:<br>&gt;<br>&gt; var a = 1<br>&gt;<br>&gt; let block = { [inout a] in<br>&gt;         a += 1<br>&gt; }<br>&gt;<br>&gt; block()<br>&gt; block()<br>&gt;<br>&gt; print(a) // 3<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161005/79f7fe58/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>[Pitch] inout with capture variable</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  5, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 9:06 PM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; for example:<br>&gt; <br>&gt; var a = 1<br>&gt; <br>&gt; let block = { [inout a] in<br>&gt; 	a += 1<br>&gt; }<br>&gt; <br>&gt; block()<br>&gt; block()<br>&gt; <br>&gt; print(a) // 3<br></p><p>This is already how captures work by default in closures and nested functions in Swift:<br></p><p>var a = 1<br></p><p>let block = { a += 1 }<br></p><p>block()<br>block()<br></p><p>print(a) // prints 3<br></p><p><br>If you want to capture something immutably you can put it in the capture list:<br></p><p>var a = 1<br>let block = { [a] in a += 1 } // error: left side of mutating operator isn&#39;t mutable: &#39;a&#39; is a &#39;let&#39; constant<br></p><p>Mark<br></p><p>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
