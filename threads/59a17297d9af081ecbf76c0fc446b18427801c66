<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>August 31, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi all,<br>In both examples below I&#39;m attempting to call a function from the<br>function&#39;s address.   The first example works but the second doesn&#39;t.  I<br>suspect I&#39;m missing something fundamental about function invocations.  Can<br>someone explain why the second example fails?  First:<br></p><p>func doNothing() {}<br>func call(_ ptr: UnsafePointer&lt;() -&gt; ()&gt;) {<br>    ptr.pointee()<br>}<br>var x = doNothing<br>call(&amp;x)<br></p><p><br>There&#39;s no crash there.  Everything works as expected - in that it does<br>nothing.  So far so good, but this crashes:<br></p><p>doNothing<br>$R16: () -&gt; () = 0x0000000100561060 $__lldb_expr2`__lldb_expr_1.doNothing<br>() -&gt; () at repl.swift:1<br>let ptr = UnsafePointer&lt;() -&gt; ()&gt;(bitPattern: 0x0000000100561060)<br>ptr!.pointee()<br></p><p>Crashes!  Also, I notice that the address of the pointee changes each time<br>I ask for it:<br></p><p>ptr!.pointee<br>$R17: () -&gt; () = 0x0000000100567440 $__lldb_expr50`partial apply forwarder<br>for reabstraction thunk helper from @callee_owned (@in ()) -&gt; (@out ()) to<br>@callee_owned () -&gt; () at repl49.swift<br>ptr!.pointee<br>$R18: () -&gt; () = 0x0000000100567740 $__lldb_expr52`partial apply forwarder<br>for reabstraction thunk helper from @callee_owned (@in ()) -&gt; (@out ()) to<br>@callee_owned () -&gt; () at repl51.swift<br>Questions:<br>1. Why does the first example succeed but the second one fail?<br>2. Why does the pointee address change on sequential calls?<br>3. What is a reabstraction thunk helper (do I want to know :))<br></p><p>I know it&#39;s a lot to ask, if there&#39;s something you would rather point me to<br>to read that&#39;s a-ok!<br></p><p>Thanks,<br>Lou<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160831/59a11c66/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>September  1, 2016 at 10:00:00am</p></header><div class="content"><p>On 1 Sep 2016, at 01:41, Lou Zell via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; 3. What is a reabstraction thunk helper (do I want to know :))<br></p><p>This makes for a great read.<br></p><p>&lt;https://medium.com/@slavapestov/how-to-talk-to-your-kids-about-sil-type-use-6b45f7595f43&gt;<br></p><p>As to your real question, what’s your high-level goal?  Swift doesn’t really do pointers to functions [1] but it does provide lots of other excellent ‘treat code as data’ features.  If you can explain more about your goal, perhaps we can direct you to a better path.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p><p>[1] At least not natively.  You can use @convention(c) to interact with C APIs that require a function pointer.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>September  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; As to your real question, what’s your high-level goal?  Swift doesn’t<br>&gt; really do pointers to functions [1] but it does provide lots of other<br>&gt; excellent ‘treat code as data’ features.  If you can explain more about<br>&gt; your goal, perhaps we can direct you to a better path.<br>&gt;<br>​<br>Curiosity got the better of me on this one - there&#39;s no higher level goal<br>other than improved understanding.  I was playing around with function<br>currying in the repl and that&#39;s what lead me to those experiments.<br></p><p>The article, and the preceding one in the series, has plenty for me to work<br>with.  Thank you!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160901/a6ed37dd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Sep 1, 2016, at 12:37 PM, Lou Zell via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; As to your real question, what’s your high-level goal?  Swift doesn’t really do pointers to functions [1] but it does provide lots of other excellent ‘treat code as data’ features.  If you can explain more about your goal, perhaps we can direct you to a better path.<br>&gt; ​<br>&gt; Curiosity got the better of me on this one - there&#39;s no higher level goal other than improved understanding.  I was playing around with function currying in the repl and that&#39;s what lead me to those experiments.  <br>&gt; <br>&gt; The article, and the preceding one in the series, has plenty for me to work with.  Thank you!<br></p><p>That’s an awesome article, but I don’t think you need to understand any of it! I’m not an expert in this either, but here’s what I can see from your code...<br></p><p>It looks like you’re trying to capture the address of a function that was JIT’d for the purpose of evaluating a statement in the repl. That address might not be valid in the next statement.<br></p><p>Also, in the first case the UnsafePointer points to local memory that holds the function value. In the second case, you’re trying to load a function value from the address of the function body. So a level of indirection is missing.<br></p><p>You can’t take an address to a function in Swift. You can assign a variable to the function, as you did in the first case:<br></p><p>var x = doNothing<br></p><p>And view the address of that variable as an argument, only for the duration of the call, as you did in the first case:<br></p><p>call(&amp;x)<br></p><p>-Andy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160901/fae5568e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>September  2, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Sep 1, 2016, at 13:48, Andrew Trick via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 1, 2016, at 12:37 PM, Lou Zell via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As to your real question, what’s your high-level goal?  Swift doesn’t really do pointers to functions [1] but it does provide lots of other excellent ‘treat code as data’ features.  If you can explain more about your goal, perhaps we can direct you to a better path.<br>&gt;&gt; ​<br>&gt;&gt; Curiosity got the better of me on this one - there&#39;s no higher level goal other than improved understanding.  I was playing around with function currying in the repl and that&#39;s what lead me to those experiments.  <br>&gt;&gt; <br>&gt;&gt; The article, and the preceding one in the series, has plenty for me to work with.  Thank you!<br>&gt; <br>&gt; That’s an awesome article, but I don’t think you need to understand any of it! I’m not an expert in this either, but here’s what I can see from your code...<br>&gt; <br>&gt; It looks like you’re trying to capture the address of a function that was JIT’d for the purpose of evaluating a statement in the repl. That address might not be valid in the next statement.<br>&gt; <br>&gt; Also, in the first case the UnsafePointer points to local memory that holds the function value. In the second case, you’re trying to load a function value from the address of the function body. So a level of indirection is missing.<br>&gt; <br>&gt; You can’t take an address to a function in Swift. You can assign a variable to the function, as you did in the first case:<br>&gt; <br>&gt; var x = doNothing<br>&gt; <br>&gt; And view the address of that variable as an argument, only for the duration of the call, as you did in the first case:<br>&gt; <br>&gt; call(&amp;x)<br></p><p>I feel like there’s still one last piece missing here, which is that in Swft a &quot;function-typed value” is not the same as a “function pointer” in C. Because a function value might have come from a closure, it might include captured state…so the representation of a closure is not the same as a representation of a plain function.<br></p><p>Because of that, the address you’re seeing isn’t the address of the function in memory; it’s the address of the temporary allocation used to represent “this global function and no associated state”. That’s why you can’t just form a pointer with that bit-pattern and expect it to work.<br></p><p>If you really need something compatible with a C function, you can use the type &#39;@convention(c) () -&gt; Void’ (or whatever). Note the lack of UnsafePointer here—the reference-ness is baked in in Swift. Even then, though, you can’t rely on the function having the same address every time you run the program (at least on macOS), because of address space randomization—the offset at which your code is loaded will be different on each run. There shouldn’t be any need to do this anyway.<br></p><p>(One place we are still weak is in converting between C function references and UnsafeRawPointer—there’s no dedicated API to do this. I’m not sure we have a recommendation in the rare cases when this is necessary. Andy?)<br></p><p>Hope you’ve gotten some useful information between the three of us. :-)<br>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160902/78f80ebf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 9:49 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; (One place we are still weak is in converting between C function references and UnsafeRawPointer—there’s no dedicated API to do this. I’m not sure we have a recommendation in the rare cases when this is necessary. Andy?)<br></p><p>Good question. I don’t know how to do off the top of my head that without passing a function typed value off to C as a function pointer and returning a void*.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160902/503c01e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>Function to unsafe pointer and back</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>September  2, 2016 at 04:00:00pm</p></header><div class="content"><p>On Thu, Sep 1, 2016 at 1:48 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; Also, in the first case the UnsafePointer points to local memory that<br>&gt; holds the function value. In the second case, you’re trying to load a<br>&gt; function value from the address of the function body.<br>&gt;<br>&gt;<br>Beginning to see...<br></p><p>On Fri, Sep 2, 2016 at 9:49 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; I feel like there’s still one last piece missing here, which is that in<br>&gt; Swft a &quot;function-typed value” is not the same as a “function pointer” in C.<br>&gt; Because a function value might have come from a closure, it might include<br>&gt; captured state…so the representation of a closure is not the same as a<br>&gt; representation of a plain function.<br>&gt;<br>&gt; Because of *that*, the address you’re seeing isn’t the address of the<br>&gt; function in memory; it’s the address of the temporary allocation used to<br>&gt; represent “this global function and no associated state”. That’s why you<br>&gt; can’t just form a pointer with that bit-pattern and expect it to work.<br>&gt;<br>&gt;<br>Seeing!<br></p><p><br>&gt; Hope you’ve gotten some useful information between the three of us. :-)<br>&gt;<br></p><p>That&#39;s the trifecta of support right there!  Thank you all!<br></p><p>I ran a new little experiment for the curious:<br></p><p>var a: () -&gt; () = {<br>    print(&quot;foo!&quot;)<br>}<br>a: () -&gt; () = 0x0000000100561080 $&lt;snip&gt; at repl2.swift<br>withUnsafePointer(&amp;a) {$0}<br>$R0: UnsafePointer&lt;() -&gt; ()&gt; = 0x00007fff5fbffce8<br></p><p>UnsafePointer&lt;() -&gt; ()&gt;(bitPattern: 0x00007fff5fbffce8)!.pointee()<br>// foo!<br>UnsafePointer&lt;() -&gt; ()&gt;(bitPattern: 0x0000000100561080)!.pointee()<br>// Crashes as expected!<br></p><p>And:<br></p><p>typealias MyType = @convention(c) () -&gt; ()<br>var b: MyType = {<br>    print(&quot;bar!&quot;)<br>}<br>b: __lldb_expr_10.MyType = 0x000000010056b150 $&lt;snip&gt; at repl12.swift<br>withUnsafePointer(&amp;b) {$0}<br>$R1: UnsafePointer&lt;__lldb_expr_10.MyType&gt; = 0x0000000100564c80<br></p><p>UnsafePointer&lt;MyType&gt;(bitPattern: 0x0000000100564c80)!.pointee()<br>// bar!<br>UnsafePointer&lt;MyType&gt;(bitPattern: 0x000000010056b150)!.pointee()<br>// Crash!<br></p><p>I am surprised to find here that the addresses are different, albeit much<br>closer in space than the first example. I suppose there&#39;s still some swift<br>machinery at work to make a function type declared as @convention(c) to<br>_behave_ as a function pointer.  Cool.<br></p><p>Thanks again Quinn, Andy, Jordan!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160902/e3978e42/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
