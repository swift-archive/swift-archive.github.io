<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>September 13, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m trying to write this function. The errorHandler: parameter is modeled after the NSFileManager enumerate() function. If I include the @escaping you see there, I get the error &quot;@escaping may only be applied to parameters of function type&quot;.<br></p><p>The second parameter, iterator:, seems to have no problems with @escaping.<br></p><p>func<br>iterate(directory inURL: URL?,<br>        includingPropertiesForKeys: [URLResourceKey]? = nil,<br>        options: FileManager.DirectoryEnumerationOptions = [],<br>        errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? = nil,<br>        iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>{<br>}<br></p><p>I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me? Thank you.<br></p><p>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>September 14, 2016 at 02:00:00am</p></header><div class="content"><p>I hit this issue as well. I had an early email on this list regarding do<br>this topic, not in a situation to search for it. It is a short coming in<br>how escaping can be applied to things like optional closures.<br></p><p>I was in the process of authoring an email for swift evolution about it and<br>haven&#39;t yet gotten around to filing a defect about it.<br></p><p>-Shawn<br>On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled<br>&gt; after the NSFileManager enumerate() function. If I include the @escaping<br>&gt; you see there, I get the error &quot;@escaping may only be applied to parameters<br>&gt; of function type&quot;.<br>&gt;<br>&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt;<br>&gt; func<br>&gt; iterate(directory inURL: URL?,<br>&gt;         includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt;         options: FileManager.DirectoryEnumerationOptions = [],<br>&gt;         errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? =<br>&gt; nil,<br>&gt;         iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt; {<br>&gt; }<br>&gt;<br>&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me?<br>&gt; Thank you.<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160914/8284278b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>September 14, 2016 at 02:00:00am</p></header><div class="content"><p>The following is the earlier thread I was talking about.<br></p><p>[swift-users] Swift 3 (Xcode 8 GM) issue with @escaping<br>&lt;https://lists.swift.org/pipermail/swift-users/Week-of-Mon-20160905/003179.html&gt;<br></p><p>-Shawn<br></p><p>On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; I hit this issue as well. I had an early email on this list regarding do<br>&gt; this topic, not in a situation to search for it. It is a short coming in<br>&gt; how escaping can be applied to things like optional closures.<br>&gt;<br>&gt; I was in the process of authoring an email for swift evolution about it<br>&gt; and haven&#39;t yet gotten around to filing a defect about it.<br>&gt;<br>&gt; -Shawn<br>&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled<br>&gt;&gt; after the NSFileManager enumerate() function. If I include the @escaping<br>&gt;&gt; you see there, I get the error &quot;@escaping may only be applied to parameters<br>&gt;&gt; of function type&quot;.<br>&gt;&gt;<br>&gt;&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt;&gt;<br>&gt;&gt; func<br>&gt;&gt; iterate(directory inURL: URL?,<br>&gt;&gt;         includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt;&gt;         options: FileManager.DirectoryEnumerationOptions = [],<br>&gt;&gt;         errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? =<br>&gt;&gt; nil,<br>&gt;&gt;         iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt;&gt; {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me?<br>&gt;&gt; Thank you.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160914/a38f391e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>September 13, 2016 at 08:00:00pm</p></header><div class="content"><p>TL;DR: The optional is already escaping, due to the fact that “T?&quot; is sugar for Optional&lt;T&gt;, and the noescape-by-default rule only applies to types in immediate parameter position. Current Swift master has much better diagnostics for this case.<br></p><p>There is not currently a general solution involving escapability of closure types used a generic parameters or tuple members, though such a thing would be useful in Swift 4.<br></p><p>&gt; On Sep 13, 2016, at 7:42 PM, Shawn Erickson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The following is the earlier thread I was talking about. <br>&gt; <br>&gt; [swift-users] Swift 3 (Xcode 8 GM) issue with @escaping  &lt;https://lists.swift.org/pipermail/swift-users/Week-of-Mon-20160905/003179.html&gt;<br>&gt; <br>&gt; -Shawn<br>&gt; <br>&gt; On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com &lt;mailto:shawnce at gmail.com&gt;&gt; wrote:<br>&gt; I hit this issue as well. I had an early email on this list regarding do this topic, not in a situation to search for it. It is a short coming in how escaping can be applied to things like optional closures.<br>&gt; <br>&gt; I was in the process of authoring an email for swift evolution about it and haven&#39;t yet gotten around to filing a defect about it.<br>&gt; <br>&gt; -Shawn<br>&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled after the NSFileManager enumerate() function. If I include the @escaping you see there, I get the error &quot;@escaping may only be applied to parameters of function type&quot;.<br>&gt; <br>&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt; <br>&gt; func<br>&gt; iterate(directory inURL: URL?,<br>&gt;         includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt;         options: FileManager.DirectoryEnumerationOptions = [],<br>&gt;         errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? = nil,<br>&gt;         iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt; {<br>&gt; }<br>&gt; <br>&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me? Thank you.<br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160913/c5a2981f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>September 13, 2016 at 08:00:00pm</p></header><div class="content"><p>But the Apple declaration (accessible via Xcode) of the method it&#39;s based on looks like this:<br></p><p>open func enumerator(at url: URL,<br>    includingPropertiesForKeys keys: [URLResourceKey]?,<br>    options mask: FileManager.DirectoryEnumerationOptions = [],<br>    errorHandler handler: (@escaping (URL, Error) -&gt; Bool)? = nil)<br>        -&gt; FileManager.DirectoryEnumerator?<br></p><p>handler is optional, but has @escaping. Is this an artifact of how Xcode presents system header files?<br></p><p><br>&gt; On Sep 13, 2016, at 20:11 , Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt; <br>&gt; TL;DR: The optional is already escaping, due to the fact that “T?&quot; is sugar for Optional&lt;T&gt;, and the noescape-by-default rule only applies to types in immediate parameter position. Current Swift master has much better diagnostics for this case.<br>&gt; <br>&gt; There is not currently a general solution involving escapability of closure types used a generic parameters or tuple members, though such a thing would be useful in Swift 4.<br>&gt; <br>&gt;&gt; On Sep 13, 2016, at 7:42 PM, Shawn Erickson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The following is the earlier thread I was talking about. <br>&gt;&gt; <br>&gt;&gt; [swift-users] Swift 3 (Xcode 8 GM) issue with @escaping <br>&gt;&gt; <br>&gt;&gt; -Shawn<br>&gt;&gt; <br>&gt;&gt; On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt; I hit this issue as well. I had an early email on this list regarding do this topic, not in a situation to search for it. It is a short coming in how escaping can be applied to things like optional closures.<br>&gt;&gt; <br>&gt;&gt; I was in the process of authoring an email for swift evolution about it and haven&#39;t yet gotten around to filing a defect about it.<br>&gt;&gt; <br>&gt;&gt; -Shawn<br>&gt;&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled after the NSFileManager enumerate() function. If I include the @escaping you see there, I get the error &quot;@escaping may only be applied to parameters of function type&quot;.<br>&gt;&gt; <br>&gt;&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt;&gt; <br>&gt;&gt; func<br>&gt;&gt; iterate(directory inURL: URL?,<br>&gt;&gt;         includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt;&gt;         options: FileManager.DirectoryEnumerationOptions = [],<br>&gt;&gt;         errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? = nil,<br>&gt;&gt;         iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt;&gt; {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me? Thank you.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>September 13, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 8:14 PM, Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br>&gt; <br>&gt; But the Apple declaration (accessible via Xcode) of the method it&#39;s based on looks like this:<br>&gt; <br>&gt; open func enumerator(at url: URL,<br>&gt;    includingPropertiesForKeys keys: [URLResourceKey]?,<br>&gt;    options mask: FileManager.DirectoryEnumerationOptions = [],<br>&gt;    errorHandler handler: (@escaping (URL, Error) -&gt; Bool)? = nil)<br>&gt;        -&gt; FileManager.DirectoryEnumerator?<br>&gt; <br>&gt; handler is optional, but has @escaping. Is this an artifact of how Xcode presents system header files?<br>&gt; <br></p><p>That’s certainly funky. Might be that or a bug in the AST printer.<br></p><p>&gt; <br>&gt;&gt; On Sep 13, 2016, at 20:11 , Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; TL;DR: The optional is already escaping, due to the fact that “T?&quot; is sugar for Optional&lt;T&gt;, and the noescape-by-default rule only applies to types in immediate parameter position. Current Swift master has much better diagnostics for this case.<br>&gt;&gt; <br>&gt;&gt; There is not currently a general solution involving escapability of closure types used a generic parameters or tuple members, though such a thing would be useful in Swift 4.<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 13, 2016, at 7:42 PM, Shawn Erickson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The following is the earlier thread I was talking about. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [swift-users] Swift 3 (Xcode 8 GM) issue with @escaping <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt;&gt; I hit this issue as well. I had an early email on this list regarding do this topic, not in a situation to search for it. It is a short coming in how escaping can be applied to things like optional closures.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was in the process of authoring an email for swift evolution about it and haven&#39;t yet gotten around to filing a defect about it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled after the NSFileManager enumerate() function. If I include the @escaping you see there, I get the error &quot;@escaping may only be applied to parameters of function type&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func<br>&gt;&gt;&gt; iterate(directory inURL: URL?,<br>&gt;&gt;&gt;        includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt;&gt;&gt;        options: FileManager.DirectoryEnumerationOptions = [],<br>&gt;&gt;&gt;        errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? = nil,<br>&gt;&gt;&gt;        iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me? Thank you.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Rick Mann<br>&gt;&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>September 14, 2016 at 03:00:00am</p></header><div class="content"><p>I am in the process of updating to Xcode 8 release so I can&#39;t confirm at<br>the moment but I am fairly sure I hit a situation with being asked to<br>implement a func from a protocol that got autocompleted with @escape nested<br>as shown. It would then of course complain that wasn&#39;t valid. If I fixed it<br>I don&#39;t think it was considered being implemented (it could only be an<br>issue as noted in my prior thread related to default implementation not<br>being picked up).<br></p><p>I will start a discussion about @escaping on the evolution list (hopefully<br>soon). The main issue I see – beyond quirks like this – is that the<br>proposal stated that closures would become noescape by default. I had<br>existing code that applied @noescape against optional closures as well as<br>tuples with closures, etc. which was happy and appeared to honor @noescape.<br>I had expected closures in all &quot;constructs&quot; to be considered noescape after<br>this change (what I got from reading the proposal) however in some<br>situations they are considered escaping now when in fact in the past<br>@noescape was able to be applied to state otherwise. It is possible that<br>@noescape wasn&#39;t actually doing anything in those cases but it seemed like<br>it was working to me.<br></p><p>So now I have code that I can&#39;t make work since it was meant to be noescape<br>yet it is now considered escaping implicitly. If I try to fix this code I<br>get complaints about things expected to escape and/or things needed to not<br>escape (hard to explain with examples). I can likely rework the code to get<br>it working again but expect to lose some of the desired implementation.<br></p><p>-Shawn<br></p><p>On Tue, Sep 13, 2016 at 8:16 PM Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Sep 13, 2016, at 8:14 PM, Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; But the Apple declaration (accessible via Xcode) of the method it&#39;s<br>&gt; based on looks like this:<br>&gt; &gt;<br>&gt; &gt; open func enumerator(at url: URL,<br>&gt; &gt;    includingPropertiesForKeys keys: [URLResourceKey]?,<br>&gt; &gt;    options mask: FileManager.DirectoryEnumerationOptions = [],<br>&gt; &gt;    errorHandler handler: (@escaping (URL, Error) -&gt; Bool)? = nil)<br>&gt; &gt;        -&gt; FileManager.DirectoryEnumerator?<br>&gt; &gt;<br>&gt; &gt; handler is optional, but has @escaping. Is this an artifact of how Xcode<br>&gt; presents system header files?<br>&gt; &gt;<br>&gt;<br>&gt; That’s certainly funky. Might be that or a bug in the AST printer.<br>&gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On Sep 13, 2016, at 20:11 , Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; TL;DR: The optional is already escaping, due to the fact that “T?&quot; is<br>&gt; sugar for Optional&lt;T&gt;, and the noescape-by-default rule only applies to<br>&gt; types in immediate parameter position. Current Swift master has much better<br>&gt; diagnostics for this case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There is not currently a general solution involving escapability of<br>&gt; closure types used a generic parameters or tuple members, though such a<br>&gt; thing would be useful in Swift 4.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Sep 13, 2016, at 7:42 PM, Shawn Erickson via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The following is the earlier thread I was talking about.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; [swift-users] Swift 3 (Xcode 8 GM) issue with @escaping<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Shawn<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt; I hit this issue as well. I had an early email on this list regarding<br>&gt; do this topic, not in a situation to search for it. It is a short coming in<br>&gt; how escaping can be applied to things like optional closures.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I was in the process of authoring an email for swift evolution about<br>&gt; it and haven&#39;t yet gotten around to filing a defect about it.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Shawn<br>&gt; &gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; I&#39;m trying to write this function. The errorHandler: parameter is<br>&gt; modeled after the NSFileManager enumerate() function. If I include the<br>&gt; @escaping you see there, I get the error &quot;@escaping may only be applied to<br>&gt; parameters of function type&quot;.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The second parameter, iterator:, seems to have no problems with<br>&gt; @escaping.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; func<br>&gt; &gt;&gt;&gt; iterate(directory inURL: URL?,<br>&gt; &gt;&gt;&gt;        includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt; &gt;&gt;&gt;        options: FileManager.DirectoryEnumerationOptions = [],<br>&gt; &gt;&gt;&gt;        errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)?<br>&gt; = nil,<br>&gt; &gt;&gt;&gt;        iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt; &gt;&gt;&gt; {<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten<br>&gt; me? Thank you.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Rick Mann<br>&gt; &gt;&gt;&gt; rmann at latencyzero.com<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-users mailing list<br>&gt; &gt;&gt;&gt; swift-users at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-users mailing list<br>&gt; &gt;&gt;&gt; swift-users at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Rick Mann<br>&gt; &gt; rmann at latencyzero.com<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160914/14538186/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>September 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 8:37 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; <br>&gt; I am in the process of updating to Xcode 8 release so I can&#39;t confirm at the moment but I am fairly sure I hit a situation with being asked to implement a func from a protocol that got autocompleted with @escape nested as shown. It would then of course complain that wasn&#39;t valid. If I fixed it I don&#39;t think it was considered being implemented (it could only be an issue as noted in my prior thread related to default implementation not being picked up).<br>&gt; <br>&gt; I will start a discussion about @escaping on the evolution list (hopefully soon). The main issue I see – beyond quirks like this – is that the proposal stated that closures would become noescape by default.<br></p><p>Link for those following along at home: https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br></p><p>Practically every occurrence of the word “closure” is immediately proceeded by “argument” or “argument to function”. Thus, it does not apply to stored members of structs, enum payloads, etc. I don’t like this either, but that is the current situation. Additionally, withoutActuallyEscaping is not implemented yet either, though I am looking into that.<br></p><p>This gets muddy and non-intuitive very quickly, especially with syntactic sugar and the overall prevalence of optionals (especially when importing from ObjC!). In a pure Swift world, the most effective workaround (though I haven’t tested this myself) if one wants non-escaping optional closure arguments, is to use function overloading for the interface, but that’s not particularly fun (although withoutActuallyEscaping could help a tiny bit). In a mixed world, there is outright breakage around the seams, and I’m investigating what all the issues there are (I suspect many are compiler bugs, rather than language bugs).<br></p><p>I would be in favor (and can help you champion) an escaping rule that propagates through generic parameters and non-nominal-type members. <br></p><p>&gt; I had existing code that applied @noescape against optional closures as well as tuples with closures, etc. which was happy and appeared to honor @noescape. I had expected closures in all &quot;constructs&quot; to be considered noescape after this change (what I got from reading the proposal) however in some situations they are considered escaping now when in fact in the past @noescape was able to be applied to state otherwise. It is possible that @noescape wasn&#39;t actually doing anything in those cases but it seemed like it was working to me.<br>&gt; <br>&gt; So now I have code that I can&#39;t make work since it was meant to be noescape yet it is now considered escaping implicitly. If I try to fix this code I get complaints about things expected to escape and/or things needed to not escape (hard to explain with examples). I can likely rework the code to get it working again but expect to lose some of the desired implementation.<br>&gt; <br>&gt; -Shawn<br>&gt; <br>&gt; On Tue, Sep 13, 2016 at 8:16 PM Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Sep 13, 2016, at 8:14 PM, Rick Mann &lt;rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; But the Apple declaration (accessible via Xcode) of the method it&#39;s based on looks like this:<br>&gt; &gt;<br>&gt; &gt; open func enumerator(at url: URL,<br>&gt; &gt;    includingPropertiesForKeys keys: [URLResourceKey]?,<br>&gt; &gt;    options mask: FileManager.DirectoryEnumerationOptions = [],<br>&gt; &gt;    errorHandler handler: (@escaping (URL, Error) -&gt; Bool)? = nil)<br>&gt; &gt;        -&gt; FileManager.DirectoryEnumerator?<br>&gt; &gt;<br>&gt; &gt; handler is optional, but has @escaping. Is this an artifact of how Xcode presents system header files?<br>&gt; &gt;<br>&gt; <br>&gt; That’s certainly funky. Might be that or a bug in the AST printer.<br>&gt; <br>&gt; &gt;<br>&gt; &gt;&gt; On Sep 13, 2016, at 20:11 , Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; TL;DR: The optional is already escaping, due to the fact that “T?&quot; is sugar for Optional&lt;T&gt;, and the noescape-by-default rule only applies to types in immediate parameter position. Current Swift master has much better diagnostics for this case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There is not currently a general solution involving escapability of closure types used a generic parameters or tuple members, though such a thing would be useful in Swift 4.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Sep 13, 2016, at 7:42 PM, Shawn Erickson via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The following is the earlier thread I was talking about.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; [swift-users] Swift 3 (Xcode 8 GM) issue with @escaping<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Shawn<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com &lt;mailto:shawnce at gmail.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; I hit this issue as well. I had an early email on this list regarding do this topic, not in a situation to search for it. It is a short coming in how escaping can be applied to things like optional closures.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I was in the process of authoring an email for swift evolution about it and haven&#39;t yet gotten around to filing a defect about it.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Shawn<br>&gt; &gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled after the NSFileManager enumerate() function. If I include the @escaping you see there, I get the error &quot;@escaping may only be applied to parameters of function type&quot;.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; func<br>&gt; &gt;&gt;&gt; iterate(directory inURL: URL?,<br>&gt; &gt;&gt;&gt;        includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt; &gt;&gt;&gt;        options: FileManager.DirectoryEnumerationOptions = [],<br>&gt; &gt;&gt;&gt;        errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? = nil,<br>&gt; &gt;&gt;&gt;        iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt; &gt;&gt;&gt; {<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me? Thank you.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Rick Mann<br>&gt; &gt;&gt;&gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-users mailing list<br>&gt; &gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-users mailing list<br>&gt; &gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Rick Mann<br>&gt; &gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160914/110e7d99/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>@escaping may only be applied to parameters of function type</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>September 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Sep 13, 2016, at 8:16 PM, Michael Ilseman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 13, 2016, at 8:14 PM, Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; But the Apple declaration (accessible via Xcode) of the method it&#39;s based on looks like this:<br>&gt;&gt; <br>&gt;&gt; open func enumerator(at url: URL,<br>&gt;&gt;   includingPropertiesForKeys keys: [URLResourceKey]?,<br>&gt;&gt;   options mask: FileManager.DirectoryEnumerationOptions = [],<br>&gt;&gt;   errorHandler handler: (@escaping (URL, Error) -&gt; Bool)? = nil)<br>&gt;&gt;       -&gt; FileManager.DirectoryEnumerator?<br>&gt;&gt; <br>&gt;&gt; handler is optional, but has @escaping. Is this an artifact of how Xcode presents system header files?<br>&gt;&gt; <br>&gt; <br>&gt; That’s certainly funky. Might be that or a bug in the AST printer.<br>&gt; <br></p><p>Definitely a bug in the AST printer<br></p><p>&gt;&gt; <br>&gt;&gt;&gt; On Sep 13, 2016, at 20:11 , Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; TL;DR: The optional is already escaping, due to the fact that “T?&quot; is sugar for Optional&lt;T&gt;, and the noescape-by-default rule only applies to types in immediate parameter position. Current Swift master has much better diagnostics for this case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is not currently a general solution involving escapability of closure types used a generic parameters or tuple members, though such a thing would be useful in Swift 4.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sep 13, 2016, at 7:42 PM, Shawn Erickson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The following is the earlier thread I was talking about. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [swift-users] Swift 3 (Xcode 8 GM) issue with @escaping <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:31 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I hit this issue as well. I had an early email on this list regarding do this topic, not in a situation to search for it. It is a short coming in how escaping can be applied to things like optional closures.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was in the process of authoring an email for swift evolution about it and haven&#39;t yet gotten around to filing a defect about it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt;&gt; On Tue, Sep 13, 2016 at 7:27 PM Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I&#39;m trying to write this function. The errorHandler: parameter is modeled after the NSFileManager enumerate() function. If I include the @escaping you see there, I get the error &quot;@escaping may only be applied to parameters of function type&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The second parameter, iterator:, seems to have no problems with @escaping.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func<br>&gt;&gt;&gt;&gt; iterate(directory inURL: URL?,<br>&gt;&gt;&gt;&gt;       includingPropertiesForKeys: [URLResourceKey]? = nil,<br>&gt;&gt;&gt;&gt;       options: FileManager.DirectoryEnumerationOptions = [],<br>&gt;&gt;&gt;&gt;       errorHandler inErrorHandler: (@escaping (URL, Error) -&gt; Bool)? = nil,<br>&gt;&gt;&gt;&gt;       iterator inIterator: (@escaping (URL) throws -&gt; ())) rethrows<br>&gt;&gt;&gt;&gt; {<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not sure why I can&#39;t apply @escaping here. Can anyone enlighten me? Thank you.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Rick Mann<br>&gt;&gt;&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
