<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 15, 2016 at 03:00:00pm</p></header><div class="content"><p>It&#39;s tempting to mention SE-0077 in this context. If it&#39;s accepted, we will<br>be able to make omission of parentheses an error in ambiguous cases.<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/1963e882/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 04:00:00pm</p></header><div class="content"><p>As I understand, the question is if<br></p><p>`a ?? x + y + z`<br>and<br>`a ? b : c + x + y`<br>(or `b + c * d / e`)<br></p><p>an &quot;ambiguous case&quot; ?<br></p><p>On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt; It&#39;s tempting to mention SE-0077 in this context. If it&#39;s accepted, we will<br>&gt; be able to make omission of parentheses an error in ambiguous cases.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 15, 2016 at 04:00:00pm</p></header><div class="content"><p>`b + c * d / e` is not, obviously.<br>`a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s ternary<br>operator, the special case that everyone should know (otherwise it looks<br>like a mess with ? and : operators).<br>`a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and knowing<br>about @autoclosure, I&#39;d say that priority of ?? should be very high.<br></p><p>Now that I think about it, if job of SE-0077 could be done with a linter,<br>then... do we still need it?<br></p><p>- Anton<br></p><p>2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com&gt;:<br></p><p>&gt; As I understand, the question is if<br>&gt;<br>&gt; `a ?? x + y + z`<br>&gt; and<br>&gt; `a ? b : c + x + y`<br>&gt; (or `b + c * d / e`)<br>&gt;<br>&gt; an &quot;ambiguous case&quot; ?<br>&gt;<br>&gt;<br>&gt; On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;&gt; It&#39;s tempting to mention SE-0077 in this context. If it&#39;s accepted, we<br>&gt;&gt; will<br>&gt;&gt; be able to make omission of parentheses an error in ambiguous cases.<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/89058332/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 08:00:00am</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 8:43 AM, Антон Жилин &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; `b + c * d / e` is not, obviously.<br>&gt; `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s ternary<br>&gt; operator, the special case that everyone should know (otherwise it looks<br>&gt; like a mess with ? and : operators).<br>&gt; `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and knowing<br>&gt; about @autoclosure, I&#39;d say that priority of ?? should be very high.<br>&gt;<br>&gt; Now that I think about it, if job of SE-0077 could be done with a linter,<br>&gt; then... do we still need it?<br>&gt;<br></p><p>Well, I for one would veer conservative on this one and say that there is a<br>place for precedence in operators, if only because the mathematical ones<br>(the majority of them) are commonly used and unambiguous. I think SE-0077<br>raises some good points. But as to whether `a ?? x + y + z` should be<br>forced to have parentheses, you have a point here that this might be<br>territory for a linter.<br></p><p><br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com&gt;:<br>&gt;<br>&gt;&gt; As I understand, the question is if<br>&gt;&gt;<br>&gt;&gt; `a ?? x + y + z`<br>&gt;&gt; and<br>&gt;&gt; `a ? b : c + x + y`<br>&gt;&gt; (or `b + c * d / e`)<br>&gt;&gt;<br>&gt;&gt; an &quot;ambiguous case&quot; ?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; It&#39;s tempting to mention SE-0077 in this context. If it&#39;s accepted, we<br>&gt;&gt;&gt; will<br>&gt;&gt;&gt; be able to make omission of parentheses an error in ambiguous cases.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/4ad75933/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt; `b + c * d / e` is not, obviously.<br></p><p>obviously, for math operators it seems like we don&#39;t need any clarifications<br></p><p>&gt; `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s ternary<br>&gt; operator, the special case that everyone should know (otherwise it looks<br>&gt; like a mess with ? and : operators).<br></p><p>Yes, it&#39;s ternary operator.  But is it<br>a ? b : (c + x + y)<br>or<br>(a ? b : c) + x + y<br></p><p>IMO ambiguous.<br></p><p>&gt; `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and knowing<br>&gt; about @autoclosure, I&#39;d say that priority of ?? should be very high.<br>&gt;<br></p><p>The same, is it<br>a ?? (x + y + z)<br>or<br>(a ?? x) + y + z<br></p><p>? I.e. I&#39;m not asking, just show that the question is not if we know what <br>does ?? mean, but how all the expression will be treated.<br></p><p>IMO it&#39;s totally false assumption that most of developers(and poor <br>beginners) do remember the the correct precedence in such expressions and <br>in most cases will not make a bug and so we should not require the <br>parentheses. Imagine how each such expression will be crystal clear about <br>the order of processing in *any* Swift source code you could find anywhere. <br>IMO this will be great advantage of the language.<br></p><p>&gt; Now that I think about it, if job of SE-0077 could be done with a linter,<br>&gt; then... do we still need it?<br></p><p>I didn&#39;t read se-0077 in details, so have no opinion. Probably you can <br>describe main ideas of it here in two words.<br></p><p>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;<br>&gt;     As I understand, the question is if<br>&gt;<br>&gt;     `a ?? x + y + z`<br>&gt;     and<br>&gt;     `a ? b : c + x + y`<br>&gt;     (or `b + c * d / e`)<br>&gt;<br>&gt;     an &quot;ambiguous case&quot; ?<br>&gt;<br>&gt;<br>&gt;     On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;         It&#39;s tempting to mention SE-0077 in this context. If it&#39;s accepted,<br>&gt;         we will<br>&gt;         be able to make omission of parentheses an error in ambiguous cases.<br>&gt;<br>&gt;         - Anton<br>&gt;<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 15, 2016 at 05:00:00pm</p></header><div class="content"><p>Nice points, I also think that unless operators are from the same domain,<br>more parentheses is better.<br>Other than that, what rules do we need? I can name these:<br>1. Assignment operators have lower precedence than most operators<br>2. Arithmetics has higher precedence than comparative and logical<br>operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>control flow.<br>3. Unary operators obviously have higher precedence than everything<br></p><p>&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>describe main ideas of it here in two words.<br>Replace numeric precedence with precedence relationships between pairs of<br>operators. If precedence between two operators is undefined, we cannot omit<br>parentheses.<br></p><p>My thought was basically: &quot;parentheses between some operators must be<br>enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br></p><p>- Anton<br></p><p>2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com&gt;:<br></p><p>&gt;<br>&gt; On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;&gt; `b + c * d / e` is not, obviously.<br>&gt;&gt;<br>&gt;<br>&gt; obviously, for math operators it seems like we don&#39;t need any<br>&gt; clarifications<br>&gt;<br>&gt; `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s ternary<br>&gt;&gt; operator, the special case that everyone should know (otherwise it looks<br>&gt;&gt; like a mess with ? and : operators).<br>&gt;&gt;<br>&gt;<br>&gt; Yes, it&#39;s ternary operator.  But is it<br>&gt; a ? b : (c + x + y)<br>&gt; or<br>&gt; (a ? b : c) + x + y<br>&gt;<br>&gt; IMO ambiguous.<br>&gt;<br>&gt; `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and knowing<br>&gt;&gt; about @autoclosure, I&#39;d say that priority of ?? should be very high.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; The same, is it<br>&gt; a ?? (x + y + z)<br>&gt; or<br>&gt; (a ?? x) + y + z<br>&gt;<br>&gt; ? I.e. I&#39;m not asking, just show that the question is not if we know what<br>&gt; does ?? mean, but how all the expression will be treated.<br>&gt;<br>&gt; IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt; beginners) do remember the the correct precedence in such expressions and<br>&gt; in most cases will not make a bug and so we should not require the<br>&gt; parentheses. Imagine how each such expression will be crystal clear about<br>&gt; the order of processing in *any* Swift source code you could find anywhere.<br>&gt; IMO this will be great advantage of the language.<br>&gt;<br>&gt; Now that I think about it, if job of SE-0077 could be done with a linter,<br>&gt;&gt; then... do we still need it?<br>&gt;&gt;<br>&gt;<br>&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt; describe main ideas of it here in two words.<br>&gt;<br>&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;     As I understand, the question is if<br>&gt;&gt;<br>&gt;&gt;     `a ?? x + y + z`<br>&gt;&gt;     and<br>&gt;&gt;     `a ? b : c + x + y`<br>&gt;&gt;     (or `b + c * d / e`)<br>&gt;&gt;<br>&gt;&gt;     an &quot;ambiguous case&quot; ?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt;         It&#39;s tempting to mention SE-0077 in this context. If it&#39;s<br>&gt;&gt; accepted,<br>&gt;&gt;         we will<br>&gt;&gt;         be able to make omission of parentheses an error in ambiguous<br>&gt;&gt; cases.<br>&gt;&gt;<br>&gt;&gt;         - Anton<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         _______________________________________________<br>&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/6cabb0a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 10:00:00am</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 9:53 AM, Антон Жилин &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; Nice points, I also think that unless operators are from the same domain,<br>&gt; more parentheses is better.<br>&gt;<br></p><p>I agree. I would, however, advocate for defining &#39;domains&#39; widely. For<br>instance, the precedence between comparison operators and arithmetic<br>operators is unambiguous in mathematics (recall, from your school days if<br>need be, solving inequalities) and I&#39;d hate to have that lost if someone<br>deems comparisons to be a different &#39;domain&#39; from arithmetic.<br></p><p><br>&gt; Other than that, what rules do we need? I can name these:<br>&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;<br></p><p>Lower than all other operators, I believe<br></p><p><br>&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt; control flow.<br>&gt;<br></p><p>I like the point made earlier that ?? is evoking logical operators &amp;&amp; and<br>||. I think there are some parallels there worth exploring.<br></p><p><br>&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;<br></p><p>I&#39;d add, in addition to the three points above, that the ternary operator<br>?: (which looks like it will likely stay as such given the commonly<br>rejected suggestions list) naturally forces itself into a low precedence,<br>because whatever you can type in between ? and : should naturally have<br>higher precedence.<br></p><p><br>&gt; &gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt; describe main ideas of it here in two words.<br>&gt; Replace numeric precedence with precedence relationships between pairs of<br>&gt; operators. If precedence between two operators is undefined, we cannot omit<br>&gt; parentheses.<br>&gt;<br>&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;<br></p><p>+1 on that. I&#39;d be very much excited to see the ability to leave undefined<br>the precedence between two unrelated operators.<br></p><p>Returning to the original problem though, this wouldn&#39;t address the problem<br>that chaining ?? operators is surprising to a lot of people. Should ?? have<br>no associativity? Are there other ways to address the issue?<br></p><p><br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt; clarifications<br>&gt;&gt;<br>&gt;&gt; `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s ternary<br>&gt;&gt;&gt; operator, the special case that everyone should know (otherwise it looks<br>&gt;&gt;&gt; like a mess with ? and : operators).<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt; a ? b : (c + x + y)<br>&gt;&gt; or<br>&gt;&gt; (a ? b : c) + x + y<br>&gt;&gt;<br>&gt;&gt; IMO ambiguous.<br>&gt;&gt;<br>&gt;&gt; `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and knowing<br>&gt;&gt;&gt; about @autoclosure, I&#39;d say that priority of ?? should be very high.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; The same, is it<br>&gt;&gt; a ?? (x + y + z)<br>&gt;&gt; or<br>&gt;&gt; (a ?? x) + y + z<br>&gt;&gt;<br>&gt;&gt; ? I.e. I&#39;m not asking, just show that the question is not if we know what<br>&gt;&gt; does ?? mean, but how all the expression will be treated.<br>&gt;&gt;<br>&gt;&gt; IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;&gt; beginners) do remember the the correct precedence in such expressions and<br>&gt;&gt; in most cases will not make a bug and so we should not require the<br>&gt;&gt; parentheses. Imagine how each such expression will be crystal clear about<br>&gt;&gt; the order of processing in *any* Swift source code you could find anywhere.<br>&gt;&gt; IMO this will be great advantage of the language.<br>&gt;&gt;<br>&gt;&gt; Now that I think about it, if job of SE-0077 could be done with a linter,<br>&gt;&gt;&gt; then... do we still need it?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     As I understand, the question is if<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     `a ?? x + y + z`<br>&gt;&gt;&gt;     and<br>&gt;&gt;&gt;     `a ? b : c + x + y`<br>&gt;&gt;&gt;     (or `b + c * d / e`)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         It&#39;s tempting to mention SE-0077 in this context. If it&#39;s<br>&gt;&gt;&gt; accepted,<br>&gt;&gt;&gt;         we will<br>&gt;&gt;&gt;         be able to make omission of parentheses an error in ambiguous<br>&gt;&gt;&gt; cases.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/34f04341/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;  If precedence between two operators is undefined, we cannot omit<br> &gt; parentheses.<br></p><p>Hm.. Probably the initial problem could be solved with this? I.e. if we&#39;ll <br>have *no* defined precedence between math operators and between ?? and <br>between ?: (and probably something else?)  ?<br></p><p>As for rules of precedence, I think it is really not important what <br>precedence will be assigned for ??/?: as in any case IMO most devs will not <br>remember this for sure in situation when one need to write/read such <br>complex expression.<br></p><p>For me, probably I have some extreme opinion: if we have a mix of operators <br>from different domains (math and ?? for example) we need parentheses to <br>exclude any kind of ambiguity.<br></p><p>On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt; Nice points, I also think that unless operators are from the same domain,<br>&gt; more parentheses is better.<br>&gt; Other than that, what rules do we need? I can name these:<br>&gt; 1. Assignment operators have lower precedence than most operators<br>&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt; control flow.<br>&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;<br>&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt; describe main ideas of it here in two words.<br>&gt; Replace numeric precedence with precedence relationships between pairs of<br>&gt; operators. If precedence between two operators is undefined, we cannot omit<br>&gt; parentheses.<br>&gt;<br>&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;<br>&gt;<br>&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;         `b + c * d / e` is not, obviously.<br>&gt;<br>&gt;<br>&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;     clarifications<br>&gt;<br>&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s ternary<br>&gt;         operator, the special case that everyone should know (otherwise it<br>&gt;         looks<br>&gt;         like a mess with ? and : operators).<br>&gt;<br>&gt;<br>&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;     a ? b : (c + x + y)<br>&gt;     or<br>&gt;     (a ? b : c) + x + y<br>&gt;<br>&gt;     IMO ambiguous.<br>&gt;<br>&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and<br>&gt;         knowing<br>&gt;         about @autoclosure, I&#39;d say that priority of ?? should be very high.<br>&gt;<br>&gt;<br>&gt;     The same, is it<br>&gt;     a ?? (x + y + z)<br>&gt;     or<br>&gt;     (a ?? x) + y + z<br>&gt;<br>&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we know<br>&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;<br>&gt;     IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;     beginners) do remember the the correct precedence in such expressions<br>&gt;     and in most cases will not make a bug and so we should not require the<br>&gt;     parentheses. Imagine how each such expression will be crystal clear<br>&gt;     about the order of processing in *any* Swift source code you could find<br>&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;<br>&gt;         Now that I think about it, if job of SE-0077 could be done with a<br>&gt;         linter,<br>&gt;         then... do we still need it?<br>&gt;<br>&gt;<br>&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;     describe main ideas of it here in two words.<br>&gt;<br>&gt;<br>&gt;         - Anton<br>&gt;<br>&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;<br>&gt;             As I understand, the question is if<br>&gt;<br>&gt;             `a ?? x + y + z`<br>&gt;             and<br>&gt;             `a ? b : c + x + y`<br>&gt;             (or `b + c * d / e`)<br>&gt;<br>&gt;             an &quot;ambiguous case&quot; ?<br>&gt;<br>&gt;<br>&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;                 It&#39;s tempting to mention SE-0077 in this context. If it&#39;s<br>&gt;         accepted,<br>&gt;                 we will<br>&gt;                 be able to make omission of parentheses an error in<br>&gt;         ambiguous cases.<br>&gt;<br>&gt;                 - Anton<br>&gt;<br>&gt;<br>&gt;                 _______________________________________________<br>&gt;                 swift-evolution mailing list<br>&gt;                 swift-evolution at swift.org<br>&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt; &gt; parentheses.<br>&gt;<br>&gt; Hm.. Probably the initial problem could be solved with this? I.e. if we&#39;ll<br>&gt; have *no* defined precedence between math operators and between ?? and<br>&gt; between ?: (and probably something else?)  ?<br>&gt;<br></p><p>Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>operators. That&#39;s a problem with expectations about associativity and not<br>about precedence, right?<br></p><p><br>&gt;<br>&gt; As for rules of precedence, I think it is really not important what<br>&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt; remember this for sure in situation when one need to write/read such<br>&gt; complex expression.<br>&gt;<br>&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt; operators from different domains (math and ?? for example) we need<br>&gt; parentheses to exclude any kind of ambiguity.<br>&gt;<br>&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;<br>&gt;&gt; Nice points, I also think that unless operators are from the same domain,<br>&gt;&gt; more parentheses is better.<br>&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt;&gt; control flow.<br>&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;<br>&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt;&gt;<br>&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt; Replace numeric precedence with precedence relationships between pairs of<br>&gt;&gt; operators. If precedence between two operators is undefined, we cannot<br>&gt;&gt; omit<br>&gt;&gt; parentheses.<br>&gt;&gt;<br>&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;     clarifications<br>&gt;&gt;<br>&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt; ternary<br>&gt;&gt;         operator, the special case that everyone should know (otherwise it<br>&gt;&gt;         looks<br>&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;     or<br>&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;<br>&gt;&gt;     IMO ambiguous.<br>&gt;&gt;<br>&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp; and<br>&gt;&gt;         knowing<br>&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be very<br>&gt;&gt; high.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     The same, is it<br>&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;     or<br>&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;<br>&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we know<br>&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;<br>&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;&gt;     beginners) do remember the the correct precedence in such expressions<br>&gt;&gt;     and in most cases will not make a bug and so we should not require the<br>&gt;&gt;     parentheses. Imagine how each such expression will be crystal clear<br>&gt;&gt;     about the order of processing in *any* Swift source code you could<br>&gt;&gt; find<br>&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;<br>&gt;&gt;         Now that I think about it, if job of SE-0077 could be done with a<br>&gt;&gt;         linter,<br>&gt;&gt;         then... do we still need it?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         - Anton<br>&gt;&gt;<br>&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;             As I understand, the question is if<br>&gt;&gt;<br>&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;             and<br>&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;<br>&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;<br>&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If it&#39;s<br>&gt;&gt;         accepted,<br>&gt;&gt;                 we will<br>&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;         ambiguous cases.<br>&gt;&gt;<br>&gt;&gt;                 - Anton<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;                 _______________________________________________<br>&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         _______________________________________________<br>&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/7c9eddbc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Back to associativity, I see nothing wrong with what  a ?? b ?? c  does.<br>Analogous constructions are found in Ruby, for example. Right associativity<br>exists so that we can do lazy evaluation, computing fallback values only<br>when required. Nothing terrible, again.<br></p><p>- Anton<br></p><p>2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br></p><p>&gt;<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt; &gt; parentheses.<br>&gt;&gt;<br>&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;<br>&gt;<br>&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt; about precedence, right?<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt; complex expression.<br>&gt;&gt;<br>&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;<br>&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Nice points, I also think that unless operators are from the same domain,<br>&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt; Replace numeric precedence with precedence relationships between pairs of<br>&gt;&gt;&gt; operators. If precedence between two operators is undefined, we cannot<br>&gt;&gt;&gt; omit<br>&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt;&gt; ternary<br>&gt;&gt;&gt;         operator, the special case that everyone should know (otherwise<br>&gt;&gt;&gt; it<br>&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;     or<br>&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp;<br>&gt;&gt;&gt; and<br>&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be very<br>&gt;&gt;&gt; high.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;     or<br>&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we know<br>&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;&gt;&gt;     beginners) do remember the the correct precedence in such expressions<br>&gt;&gt;&gt;     and in most cases will not make a bug and so we should not require<br>&gt;&gt;&gt; the<br>&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal clear<br>&gt;&gt;&gt;     about the order of processing in *any* Swift source code you could<br>&gt;&gt;&gt; find<br>&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done with a<br>&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt; can<br>&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;             and<br>&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If it&#39;s<br>&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/35f16c65/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 15, 2016 at 08:00:00pm</p></header><div class="content"><p>I wonder if it&#39;s worth it to start a new thread right now.<br>We could start discussing, what precedence relationships between opeartors<br>should be, even *before* that proposal is accepted.<br>If it&#39;s rejected though, that discussion is going to trash bin.<br></p><p>- Anton<br></p><p>2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c  does.<br>&gt; Analogous constructions are found in Ruby, for example. Right associativity<br>&gt; exists so that we can do lazy evaluation, computing fallback values only<br>&gt; when required. Nothing terrible, again.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt; about precedence, right?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between pairs<br>&gt;&gt;&gt;&gt; of<br>&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we cannot<br>&gt;&gt;&gt;&gt; omit<br>&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt;&gt;&gt; ternary<br>&gt;&gt;&gt;&gt;         operator, the special case that everyone should know (otherwise<br>&gt;&gt;&gt;&gt; it<br>&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp;<br>&gt;&gt;&gt;&gt; and<br>&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be very<br>&gt;&gt;&gt;&gt; high.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we know<br>&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not require<br>&gt;&gt;&gt;&gt; the<br>&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal clear<br>&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you could<br>&gt;&gt;&gt;&gt; find<br>&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done with<br>&gt;&gt;&gt;&gt; a<br>&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt;&gt; can<br>&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If<br>&gt;&gt;&gt;&gt; it&#39;s<br>&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/e45b021b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 06:00:00pm</p></header><div class="content"><p>Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>interaction with the core team on operator precedence suggested that they<br>believed that they had arrived at the correct relative precedence values<br>and were not receptive to changing them.<br>On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br></p><p>&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt; We could start discussing, what precedence relationships between opeartors<br>&gt; should be, even *before* that proposal is accepted.<br>&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;<br>&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c  does.<br>&gt;&gt; Analogous constructions are found in Ruby, for example. Right associativity<br>&gt;&gt; exists so that we can do lazy evaluation, computing fallback values only<br>&gt;&gt; when required. Nothing terrible, again.<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt;&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt;&gt; about precedence, right?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between pairs<br>&gt;&gt;&gt;&gt;&gt; of<br>&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we cannot<br>&gt;&gt;&gt;&gt;&gt; omit<br>&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt;&gt;&gt;&gt; ternary<br>&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and &amp;&amp;<br>&gt;&gt;&gt;&gt;&gt; and<br>&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be very<br>&gt;&gt;&gt;&gt;&gt; high.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we<br>&gt;&gt;&gt;&gt;&gt; know<br>&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not require<br>&gt;&gt;&gt;&gt;&gt; the<br>&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal clear<br>&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you could<br>&gt;&gt;&gt;&gt;&gt; find<br>&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done<br>&gt;&gt;&gt;&gt;&gt; with a<br>&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt;&gt;&gt; can<br>&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If<br>&gt;&gt;&gt;&gt;&gt; it&#39;s<br>&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/8d3b66ca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 15, 2016 at 06:00:00pm</p></header><div class="content"><p>We’ve talked about how expressions like `a + b * c / d` aren’t ambiguous<br>because they are borrowed, in this case from math. The same thing applies<br>to the ternary conditional: `a ? b : c + x + y`-it too is borrowed (from<br>the C-type languages) and behaves likewise. There is no need for<br>parentheses-the only people who will think this is ambiguous is those who<br>haven’t been introduced to it before. IMHO, requiring parentheses would be<br>*more* ambiguous because you’re breaking precedent, people already know how<br>it should work, without parentheses. Forcing them to use it breaks their<br>prior knowledge. We don’t need to hand-hold people who *know* how it works.<br>For those who don’t know, it’s a simple matter of reading it up (which they<br>would be doing anyways to learn about it!)<br></p><p>As for nil coalescing, it’s visually similar to the ternary operator and as<br>such has similar behavior. Having a reminder in the Swift guide about its<br>precedence should be enough, once users have learned it they don’t need to<br>be reminded every time they use it through a warning.<br></p><p>On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt; interaction with the core team on operator precedence suggested that they<br>&gt; believed that they had arrived at the correct relative precedence values<br>&gt; and were not receptive to changing them.<br>&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c  does.<br>&gt;&gt;&gt; Analogous constructions are found in Ruby, for example. Right associativity<br>&gt;&gt;&gt; exists so that we can do lazy evaluation, computing fallback values only<br>&gt;&gt;&gt; when required. Nothing terrible, again.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt;&gt;&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt;&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt;&gt;&gt; about precedence, right?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more<br>&gt;&gt;&gt;&gt;&gt;&gt; like<br>&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt; ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and<br>&gt;&gt;&gt;&gt;&gt;&gt; &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;&gt;&gt;&gt;&gt;&gt; very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we<br>&gt;&gt;&gt;&gt;&gt;&gt; know<br>&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal<br>&gt;&gt;&gt;&gt;&gt;&gt; clear<br>&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done<br>&gt;&gt;&gt;&gt;&gt;&gt; with a<br>&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If<br>&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/341bc3de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 15, 2016 at 09:00:00pm</p></header><div class="content"><p>What do you think about arithmetic and bitwise operators? Arithmetic and<br>casting? Should they have defined precedence?<br></p><p>- Anton<br></p><p>2016-06-15 21:17 GMT+03:00 Saagar Jha &lt;saagarjha28 at gmail.com&gt;:<br></p><p>&gt; We’ve talked about how expressions like `a + b * c / d` aren’t ambiguous<br>&gt; because they are borrowed, in this case from math. The same thing applies<br>&gt; to the ternary conditional: `a ? b : c + x + y`-it too is borrowed (from<br>&gt; the C-type languages) and behaves likewise. There is no need for<br>&gt; parentheses-the only people who will think this is ambiguous is those who<br>&gt; haven’t been introduced to it before. IMHO, requiring parentheses would be<br>&gt; *more* ambiguous because you’re breaking precedent, people already know<br>&gt; how it should work, without parentheses. Forcing them to use it breaks<br>&gt; their prior knowledge. We don’t need to hand-hold people who *know* how<br>&gt; it works. For those who don’t know, it’s a simple matter of reading it up<br>&gt; (which they would be doing anyways to learn about it!)<br>&gt;<br>&gt; As for nil coalescing, it’s visually similar to the ternary operator and<br>&gt; as such has similar behavior. Having a reminder in the Swift guide about<br>&gt; its precedence should be enough, once users have learned it they don’t need<br>&gt; to be reminded every time they use it through a warning.<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt;&gt; interaction with the core team on operator precedence suggested that they<br>&gt;&gt; believed that they had arrived at the correct relative precedence values<br>&gt;&gt; and were not receptive to changing them.<br>&gt;&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c<br>&gt;&gt;&gt;&gt;  does. Analogous constructions are found in Ruby, for example. Right<br>&gt;&gt;&gt;&gt; associativity exists so that we can do lazy evaluation, computing fallback<br>&gt;&gt;&gt;&gt; values only when required. Nothing terrible, again.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt;&gt;&gt;&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt;&gt;&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt;&gt;&gt;&gt; about precedence, right?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt;&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt;&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt;&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; poor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; clear<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; with a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/856fbb59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 15, 2016 at 06:00:00pm</p></header><div class="content"><p>Yes. They’re all operators we know about already, and the same argument<br>applies. Just like you wouldn’t change + to have a higher precedence than<br>*, bitwise operators already have their own, uniform precedences. I can’t<br>see any reason not to have one, other than confusion from those who aren’t<br>completely sure how they function-in which case they’re better of taking a<br>look at the docs (or Quick Help, as another thread suggests) to learn how<br>they work.<br></p><p>On Wed, Jun 15, 2016 at 11:23 AM Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br></p><p>&gt; What do you think about arithmetic and bitwise operators? Arithmetic and<br>&gt; casting? Should they have defined precedence?<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-06-15 21:17 GMT+03:00 Saagar Jha &lt;saagarjha28 at gmail.com&gt;:<br>&gt;<br>&gt;&gt; We’ve talked about how expressions like `a + b * c / d` aren’t ambiguous<br>&gt;&gt; because they are borrowed, in this case from math. The same thing applies<br>&gt;&gt; to the ternary conditional: `a ? b : c + x + y`-it too is borrowed (from<br>&gt;&gt; the C-type languages) and behaves likewise. There is no need for<br>&gt;&gt; parentheses-the only people who will think this is ambiguous is those who<br>&gt;&gt; haven’t been introduced to it before. IMHO, requiring parentheses would be<br>&gt;&gt; *more* ambiguous because you’re breaking precedent, people already know<br>&gt;&gt; how it should work, without parentheses. Forcing them to use it breaks<br>&gt;&gt; their prior knowledge. We don’t need to hand-hold people who *know* how<br>&gt;&gt; it works. For those who don’t know, it’s a simple matter of reading it up<br>&gt;&gt; (which they would be doing anyways to learn about it!)<br>&gt;&gt;<br>&gt;&gt; As for nil coalescing, it’s visually similar to the ternary operator and<br>&gt;&gt; as such has similar behavior. Having a reminder in the Swift guide about<br>&gt;&gt; its precedence should be enough, once users have learned it they don’t need<br>&gt;&gt; to be reminded every time they use it through a warning.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt;&gt;&gt; interaction with the core team on operator precedence suggested that they<br>&gt;&gt;&gt; believed that they had arrived at the correct relative precedence values<br>&gt;&gt;&gt; and were not receptive to changing them.<br>&gt;&gt;&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt;&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt;&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt;&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c<br>&gt;&gt;&gt;&gt;&gt;  does. Analogous constructions are found in Ruby, for example. Right<br>&gt;&gt;&gt;&gt;&gt; associativity exists so that we can do lazy evaluation, computing fallback<br>&gt;&gt;&gt;&gt;&gt; values only when required. Nothing terrible, again.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt;&gt;&gt;&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt;&gt;&gt;&gt;&gt; about precedence, right?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; poor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; clear<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Saagar Jha<br>&gt;&gt;<br>&gt;<br>&gt; --<br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/3981985a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 1:31 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br></p><p>&gt; Yes. They’re all operators we know about already, and the same argument<br>&gt; applies. Just like you wouldn’t change + to have a higher precedence than<br>&gt; *, bitwise operators already have their own, uniform precedences. I can’t<br>&gt; see any reason not to have one, other than confusion from those who aren’t<br>&gt; completely sure how they function-in which case they’re better of taking a<br>&gt; look at the docs (or Quick Help, as another thread suggests) to learn how<br>&gt; they work.<br>&gt;<br></p><p>FYI, the relative precedence of arithmetic and bitwise operators is not the<br>same across languages in the C family. Here, Swift diverges from C and<br>resembles Go. I raised this point some time ago and was told in no<br>uncertain terms by the core team that it was intentional and that they were<br>satisfied with the result.<br></p><p><br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 11:23 AM Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; What do you think about arithmetic and bitwise operators? Arithmetic and<br>&gt;&gt; casting? Should they have defined precedence?<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-06-15 21:17 GMT+03:00 Saagar Jha &lt;saagarjha28 at gmail.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; We’ve talked about how expressions like `a + b * c / d` aren’t ambiguous<br>&gt;&gt;&gt; because they are borrowed, in this case from math. The same thing applies<br>&gt;&gt;&gt; to the ternary conditional: `a ? b : c + x + y`-it too is borrowed (from<br>&gt;&gt;&gt; the C-type languages) and behaves likewise. There is no need for<br>&gt;&gt;&gt; parentheses-the only people who will think this is ambiguous is those who<br>&gt;&gt;&gt; haven’t been introduced to it before. IMHO, requiring parentheses would be<br>&gt;&gt;&gt; *more* ambiguous because you’re breaking precedent, people already know<br>&gt;&gt;&gt; how it should work, without parentheses. Forcing them to use it breaks<br>&gt;&gt;&gt; their prior knowledge. We don’t need to hand-hold people who *know* how<br>&gt;&gt;&gt; it works. For those who don’t know, it’s a simple matter of reading it up<br>&gt;&gt;&gt; (which they would be doing anyways to learn about it!)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As for nil coalescing, it’s visually similar to the ternary operator and<br>&gt;&gt;&gt; as such has similar behavior. Having a reminder in the Swift guide about<br>&gt;&gt;&gt; its precedence should be enough, once users have learned it they don’t need<br>&gt;&gt;&gt; to be reminded every time they use it through a warning.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt;&gt;&gt;&gt; interaction with the core team on operator precedence suggested that they<br>&gt;&gt;&gt;&gt; believed that they had arrived at the correct relative precedence values<br>&gt;&gt;&gt;&gt; and were not receptive to changing them.<br>&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt;&gt;&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt;&gt;&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt;&gt;&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c<br>&gt;&gt;&gt;&gt;&gt;&gt;  does. Analogous constructions are found in Ruby, for example. Right<br>&gt;&gt;&gt;&gt;&gt;&gt; associativity exists so that we can do lazy evaluation, computing fallback<br>&gt;&gt;&gt;&gt;&gt;&gt; values only when required. Nothing terrible, again.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; about precedence, right?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with ||<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; poor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; clear<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/93ab8b23/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 15, 2016 at 06:00:00pm</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 11:36 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Jun 15, 2016 at 1:31 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Yes. They’re all operators we know about already, and the same argument<br>&gt;&gt; applies. Just like you wouldn’t change + to have a higher precedence than<br>&gt;&gt; *, bitwise operators already have their own, uniform precedences. I can’t<br>&gt;&gt; see any reason not to have one, other than confusion from those who aren’t<br>&gt;&gt; completely sure how they function-in which case they’re better of taking a<br>&gt;&gt; look at the docs (or Quick Help, as another thread suggests) to learn how<br>&gt;&gt; they work.<br>&gt;&gt;<br>&gt;<br>&gt; FYI, the relative precedence of arithmetic and bitwise operators is not<br>&gt; the same across languages in the C family. Here, Swift diverges from C and<br>&gt; resembles Go. I raised this point some time ago and was told in no<br>&gt; uncertain terms by the core team that it was intentional and that they were<br>&gt; satisfied with the result.<br>&gt;<br></p><p>Is the core team talking only for bitwise operators or all of them?<br></p><p><br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 15, 2016 at 11:23 AM Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; What do you think about arithmetic and bitwise operators? Arithmetic and<br>&gt;&gt;&gt; casting? Should they have defined precedence?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-06-15 21:17 GMT+03:00 Saagar Jha &lt;saagarjha28 at gmail.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; We’ve talked about how expressions like `a + b * c / d` aren’t<br>&gt;&gt;&gt;&gt; ambiguous because they are borrowed, in this case from math. The same thing<br>&gt;&gt;&gt;&gt; applies to the ternary conditional: `a ? b : c + x + y`-it too is borrowed<br>&gt;&gt;&gt;&gt; (from the C-type languages) and behaves likewise. There is no need for<br>&gt;&gt;&gt;&gt; parentheses-the only people who will think this is ambiguous is those who<br>&gt;&gt;&gt;&gt; haven’t been introduced to it before. IMHO, requiring parentheses would be<br>&gt;&gt;&gt;&gt; *more* ambiguous because you’re breaking precedent, people already<br>&gt;&gt;&gt;&gt; know how it should work, without parentheses. Forcing them to use it breaks<br>&gt;&gt;&gt;&gt; their prior knowledge. We don’t need to hand-hold people who *know* how<br>&gt;&gt;&gt;&gt; it works. For those who don’t know, it’s a simple matter of reading it up<br>&gt;&gt;&gt;&gt; (which they would be doing anyways to learn about it!)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As for nil coalescing, it’s visually similar to the ternary operator<br>&gt;&gt;&gt;&gt; and as such has similar behavior. Having a reminder in the Swift guide<br>&gt;&gt;&gt;&gt; about its precedence should be enough, once users have learned it they<br>&gt;&gt;&gt;&gt; don’t need to be reminded every time they use it through a warning.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt;&gt;&gt;&gt;&gt; interaction with the core team on operator precedence suggested that they<br>&gt;&gt;&gt;&gt;&gt; believed that they had arrived at the correct relative precedence values<br>&gt;&gt;&gt;&gt;&gt; and were not receptive to changing them.<br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt;&gt;&gt;&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt;&gt;&gt;&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  does. Analogous constructions are found in Ruby, for example. Right<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; associativity exists so that we can do lazy evaluation, computing fallback<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; values only when required. Nothing terrible, again.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ?? operators. That&#39;s a problem with expectations about associativity and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; not about precedence, right?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; what precedence will be assigned for ??/?: as in any case IMO most devs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; will not remember this for sure in situation when one need to write/read<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; such complex expression.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; more like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everything<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; must be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with ||<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; poor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; clear<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; done with a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Probably you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt; -Saagar Jha<br>&gt;&gt;<br>&gt; --<br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/9f103b6d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 01:00:00pm</p></header><div class="content"><p>I was asking about only bitwise operators, but the reply was more general.<br>One reply from Chris Lattner:<br></p><p>&gt; On Feb 13, 2016, at 6:32 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Not sure if this is intentional, a bug, and/or a topic for evolution:<br>&gt; &gt;<br>&gt; &gt; In Swift, bitwise operators seem to have a different precedence in<br>&gt; &gt; relation to other operators than they do in (all other?) C-family<br>&gt; &gt; languages, at least per documentation.<br>&gt; Yep, this is true, and this is intentional.  Swift has a greatly<br>&gt; simplified and rationalized set of precedences, and yes, that means they<br>&gt; differ from C.<br></p><p><br></p><p>On Wed, Jun 15, 2016 at 1:46 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Wed, Jun 15, 2016 at 11:36 AM Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Wed, Jun 15, 2016 at 1:31 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Yes. They’re all operators we know about already, and the same argument<br>&gt;&gt;&gt; applies. Just like you wouldn’t change + to have a higher precedence than<br>&gt;&gt;&gt; *, bitwise operators already have their own, uniform precedences. I can’t<br>&gt;&gt;&gt; see any reason not to have one, other than confusion from those who aren’t<br>&gt;&gt;&gt; completely sure how they function-in which case they’re better of taking a<br>&gt;&gt;&gt; look at the docs (or Quick Help, as another thread suggests) to learn how<br>&gt;&gt;&gt; they work.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; FYI, the relative precedence of arithmetic and bitwise operators is not<br>&gt;&gt; the same across languages in the C family. Here, Swift diverges from C and<br>&gt;&gt; resembles Go. I raised this point some time ago and was told in no<br>&gt;&gt; uncertain terms by the core team that it was intentional and that they were<br>&gt;&gt; satisfied with the result.<br>&gt;&gt;<br>&gt;<br>&gt; Is the core team talking only for bitwise operators or all of them?<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:23 AM Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What do you think about arithmetic and bitwise operators? Arithmetic<br>&gt;&gt;&gt;&gt; and casting? Should they have defined precedence?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2016-06-15 21:17 GMT+03:00 Saagar Jha &lt;saagarjha28 at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; We’ve talked about how expressions like `a + b * c / d` aren’t<br>&gt;&gt;&gt;&gt;&gt; ambiguous because they are borrowed, in this case from math. The same thing<br>&gt;&gt;&gt;&gt;&gt; applies to the ternary conditional: `a ? b : c + x + y`-it too is borrowed<br>&gt;&gt;&gt;&gt;&gt; (from the C-type languages) and behaves likewise. There is no need for<br>&gt;&gt;&gt;&gt;&gt; parentheses-the only people who will think this is ambiguous is those who<br>&gt;&gt;&gt;&gt;&gt; haven’t been introduced to it before. IMHO, requiring parentheses would be<br>&gt;&gt;&gt;&gt;&gt; *more* ambiguous because you’re breaking precedent, people already<br>&gt;&gt;&gt;&gt;&gt; know how it should work, without parentheses. Forcing them to use it breaks<br>&gt;&gt;&gt;&gt;&gt; their prior knowledge. We don’t need to hand-hold people who *know* how<br>&gt;&gt;&gt;&gt;&gt; it works. For those who don’t know, it’s a simple matter of reading it up<br>&gt;&gt;&gt;&gt;&gt; (which they would be doing anyways to learn about it!)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As for nil coalescing, it’s visually similar to the ternary operator<br>&gt;&gt;&gt;&gt;&gt; and as such has similar behavior. Having a reminder in the Swift guide<br>&gt;&gt;&gt;&gt;&gt; about its precedence should be enough, once users have learned it they<br>&gt;&gt;&gt;&gt;&gt; don’t need to be reminded every time they use it through a warning.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt;&gt;&gt;&gt;&gt;&gt; interaction with the core team on operator precedence suggested that they<br>&gt;&gt;&gt;&gt;&gt;&gt; believed that they had arrived at the correct relative precedence values<br>&gt;&gt;&gt;&gt;&gt;&gt; and were not receptive to changing them.<br>&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  does. Analogous constructions are found in Ruby, for example. Right<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; associativity exists so that we can do lazy evaluation, computing fallback<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; values only when required. Nothing terrible, again.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; if we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ?? operators. That&#39;s a problem with expectations about associativity and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; not about precedence, right?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; what precedence will be assigned for ??/?: as in any case IMO most devs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; will not remember this for sure in situation when one need to write/read<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; such complex expression.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; same domain,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; more like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; everything<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; must be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with ||<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; be very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; we know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; developers(and poor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; crystal clear<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; done with a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Probably you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; context. If it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/bd84eacf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 1:17 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br></p><p>&gt; We’ve talked about how expressions like `a + b * c / d` aren’t ambiguous<br>&gt; because they are borrowed, in this case from math. The same thing applies<br>&gt; to the ternary conditional: `a ? b : c + x + y`-it too is borrowed (from<br>&gt; the C-type languages) and behaves likewise. There is no need for<br>&gt; parentheses-the only people who will think this is ambiguous is those who<br>&gt; haven’t been introduced to it before.<br>&gt;<br></p><p>Well, as I touched on above, I argue that the ternary operator is<br>constrained to be low precedence because of the syntax itself. Here&#39;s why:<br></p><p>* Since it&#39;s a single operator, it has only one precedence--that is, to the<br>extent that it makes sense to think about them separately, ? and : have<br>equal precedence.<br>* Imagine the statement `a ? c + x + y : b`. If this statement is to be<br>syntactically correct, + *must* have higher precedence than ?: because<br>there is no such thing as `(a ? c) + x + (y : b)`.<br>* Therefore, by symmetry, `a ? b : c + x + y` must mean `a ? b : (c + x +<br>y)`.<br></p><p><br>&gt; IMHO, requiring parentheses would be *more* ambiguous because you’re<br>&gt; breaking precedent, people already know how it should work, without<br>&gt; parentheses. Forcing them to use it breaks their prior knowledge. We don’t<br>&gt; need to hand-hold people who *know* how it works. For those who don’t<br>&gt; know, it’s a simple matter of reading it up (which they would be doing<br>&gt; anyways to learn about it!)<br>&gt;<br>&gt; As for nil coalescing, it’s visually similar to the ternary operator and<br>&gt; as such has similar behavior. Having a reminder in the Swift guide about<br>&gt; its precedence should be enough, once users have learned it they don’t need<br>&gt; to be reminded every time they use it through a warning.<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 11:00 AM Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Maybe wise to wait to see if that proposal is accepted. FWIW, my last<br>&gt;&gt; interaction with the core team on operator precedence suggested that they<br>&gt;&gt; believed that they had arrived at the correct relative precedence values<br>&gt;&gt; and were not receptive to changing them.<br>&gt;&gt; On Wed, Jun 15, 2016 at 12:54 Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I wonder if it&#39;s worth it to start a new thread right now.<br>&gt;&gt;&gt; We could start discussing, what precedence relationships between<br>&gt;&gt;&gt; opeartors should be, even *before* that proposal is accepted.<br>&gt;&gt;&gt; If it&#39;s rejected though, that discussion is going to trash bin.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-06-15 19:52 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Back to associativity, I see nothing wrong with what  a ?? b ?? c<br>&gt;&gt;&gt;&gt;  does. Analogous constructions are found in Ruby, for example. Right<br>&gt;&gt;&gt;&gt; associativity exists so that we can do lazy evaluation, computing fallback<br>&gt;&gt;&gt;&gt; values only when required. Nothing terrible, again.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2016-06-15 19:15 GMT+03:00 Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;&gt;&gt;&gt;&gt;&gt; we&#39;ll have *no* defined precedence between math operators and between ??<br>&gt;&gt;&gt;&gt;&gt;&gt; and between ?: (and probably something else?)  ?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt;&gt;&gt;&gt;&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt;&gt;&gt;&gt;&gt; about precedence, right?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; As for rules of precedence, I think it is really not important what<br>&gt;&gt;&gt;&gt;&gt;&gt; precedence will be assigned for ??/?: as in any case IMO most devs will not<br>&gt;&gt;&gt;&gt;&gt;&gt; remember this for sure in situation when one need to write/read such<br>&gt;&gt;&gt;&gt;&gt;&gt; complex expression.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; For me, probably I have some extreme opinion: if we have a mix of<br>&gt;&gt;&gt;&gt;&gt;&gt; operators from different domains (math and ?? for example) we need<br>&gt;&gt;&gt;&gt;&gt;&gt; parentheses to exclude any kind of ambiguity.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nice points, I also think that unless operators are from the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; domain,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; more parentheses is better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Other than that, what rules do we need? I can name these:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Assignment operators have lower precedence than most operators<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Arithmetics has higher precedence than comparative and logical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; control flow.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. Unary operators obviously have higher precedence than everything<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t read se-0077 in details, so have no opinion. Probably you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Replace numeric precedence with precedence relationships between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; pairs of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operators. If precedence between two operators is undefined, we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; cannot omit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; parentheses.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; My thought was basically: &quot;parentheses between some operators must be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:svabox at gmail.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `b + c * d / e` is not, obviously.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     obviously, for math operators it seems like we don&#39;t need any<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     clarifications<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ? b : c + x + y` -- I&#39;d also say not, because, well, it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ternary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         operator, the special case that everyone should know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (otherwise it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         looks<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         like a mess with ? and : operators).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     Yes, it&#39;s ternary operator.  But is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ? b : (c + x + y)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ? b : c) + x + y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO ambiguous.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         `a ?? x + y + z` -- maybe. If not for analogies with || and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &amp;&amp; and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         knowing<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; very high.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     The same, is it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     a ?? (x + y + z)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     (a ?? x) + y + z<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     ? I.e. I&#39;m not asking, just show that the question is not if we<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     what does ?? mean, but how all the expression will be treated.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     IMO it&#39;s totally false assumption that most of developers(and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; poor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     beginners) do remember the the correct precedence in such<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; expressions<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     and in most cases will not make a bug and so we should not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; require the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     parentheses. Imagine how each such expression will be crystal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; clear<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     about the order of processing in *any* Swift source code you<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; could find<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     anywhere. IMO this will be great advantage of the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         Now that I think about it, if job of SE-0077 could be done<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; with a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         linter,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         then... do we still need it?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; you can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     describe main ideas of it here in two words.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             As I understand, the question is if<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ?? x + y + z`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             `a ? b : c + x + y`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             (or `b + c * d / e`)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             an &quot;ambiguous case&quot; ?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;             On 15.06.2016 15:42, Антон Жилин via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 It&#39;s tempting to mention SE-0077 in this context. If<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         accepted,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 we will<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 be able to make omission of parentheses an error in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         ambiguous cases.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/25a13009/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 08:00:00pm</p></header><div class="content"><p>On 15.06.2016 19:15, Xiaodi Wu wrote:<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 15, 2016 at 11:07 AM, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     &gt;  If precedence between two operators is undefined, we cannot omit<br>&gt;     &gt; parentheses.<br>&gt;<br>&gt;     Hm.. Probably the initial problem could be solved with this? I.e. if<br>&gt;     we&#39;ll have *no* defined precedence between math operators and between<br>&gt;     ?? and between ?: (and probably something else?)  ?<br>&gt;<br>&gt;<br>&gt; Sorry, I don&#39;t see it. The initial question was about chaining of ??<br>&gt; operators. That&#39;s a problem with expectations about associativity and not<br>&gt; about precedence, right?<br></p><p>Hmm... The initial question of this thread was about<br>let result = v1 ?? 0 + v2 ?? 0<br>Which will resolve to<br>let result = v1 ?? (0 + v2 ?? 0)<br></p><p>And then the question was raised regarding the ternary operator:<br>a ? b : c + x + y<br></p><p>So, the question was can we require a parentheses in these cases and if we <br>can, how. I&#39;m not sure if these questions about precedence or associativity.<br></p><p>&gt;<br>&gt;<br>&gt;<br>&gt;     As for rules of precedence, I think it is really not important what<br>&gt;     precedence will be assigned for ??/?: as in any case IMO most devs will<br>&gt;     not remember this for sure in situation when one need to write/read<br>&gt;     such complex expression.<br>&gt;<br>&gt;     For me, probably I have some extreme opinion: if we have a mix of<br>&gt;     operators from different domains (math and ?? for example) we need<br>&gt;     parentheses to exclude any kind of ambiguity.<br>&gt;<br>&gt;     On 15.06.2016 17:53, Антон Жилин wrote:<br>&gt;<br>&gt;         Nice points, I also think that unless operators are from the same<br>&gt;         domain,<br>&gt;         more parentheses is better.<br>&gt;         Other than that, what rules do we need? I can name these:<br>&gt;         1. Assignment operators have lower precedence than most operators<br>&gt;         2. Arithmetics has higher precedence than comparative and logical<br>&gt;         operators. I don&#39;t think that ?? belongs to arithmetics, it&#39;s more like<br>&gt;         control flow.<br>&gt;         3. Unary operators obviously have higher precedence than everything<br>&gt;<br>&gt;             I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;             you can<br>&gt;<br>&gt;         describe main ideas of it here in two words.<br>&gt;         Replace numeric precedence with precedence relationships between<br>&gt;         pairs of<br>&gt;         operators. If precedence between two operators is undefined, we<br>&gt;         cannot omit<br>&gt;         parentheses.<br>&gt;<br>&gt;         My thought was basically: &quot;parentheses between some operators must be<br>&gt;         enforced by the language&quot; &lt;=&gt; &quot;SE-0077 is needed&quot;<br>&gt;<br>&gt;         - Anton<br>&gt;<br>&gt;         2016-06-15 17:17 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;:<br>&gt;<br>&gt;<br>&gt;<br>&gt;             On 15.06.2016 16:43, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;                 `b + c * d / e` is not, obviously.<br>&gt;<br>&gt;<br>&gt;             obviously, for math operators it seems like we don&#39;t need any<br>&gt;             clarifications<br>&gt;<br>&gt;                 `a ? b : c + x + y` -- I&#39;d also say not, because, well,<br>&gt;         it&#39;s ternary<br>&gt;                 operator, the special case that everyone should know<br>&gt;         (otherwise it<br>&gt;                 looks<br>&gt;                 like a mess with ? and : operators).<br>&gt;<br>&gt;<br>&gt;             Yes, it&#39;s ternary operator.  But is it<br>&gt;             a ? b : (c + x + y)<br>&gt;             or<br>&gt;             (a ? b : c) + x + y<br>&gt;<br>&gt;             IMO ambiguous.<br>&gt;<br>&gt;                 `a ?? x + y + z` -- maybe. If not for analogies with || and<br>&gt;         &amp;&amp; and<br>&gt;                 knowing<br>&gt;                 about @autoclosure, I&#39;d say that priority of ?? should be<br>&gt;         very high.<br>&gt;<br>&gt;<br>&gt;             The same, is it<br>&gt;             a ?? (x + y + z)<br>&gt;             or<br>&gt;             (a ?? x) + y + z<br>&gt;<br>&gt;             ? I.e. I&#39;m not asking, just show that the question is not if we<br>&gt;         know<br>&gt;             what does ?? mean, but how all the expression will be treated.<br>&gt;<br>&gt;             IMO it&#39;s totally false assumption that most of developers(and poor<br>&gt;             beginners) do remember the the correct precedence in such<br>&gt;         expressions<br>&gt;             and in most cases will not make a bug and so we should not<br>&gt;         require the<br>&gt;             parentheses. Imagine how each such expression will be crystal clear<br>&gt;             about the order of processing in *any* Swift source code you<br>&gt;         could find<br>&gt;             anywhere. IMO this will be great advantage of the language.<br>&gt;<br>&gt;                 Now that I think about it, if job of SE-0077 could be done<br>&gt;         with a<br>&gt;                 linter,<br>&gt;                 then... do we still need it?<br>&gt;<br>&gt;<br>&gt;             I didn&#39;t read se-0077 in details, so have no opinion. Probably<br>&gt;         you can<br>&gt;             describe main ideas of it here in two words.<br>&gt;<br>&gt;<br>&gt;                 - Anton<br>&gt;<br>&gt;                 2016-06-15 16:00 GMT+03:00 Vladimir.S &lt;svabox at gmail.com<br>&gt;         &lt;mailto:svabox at gmail.com&gt;<br>&gt;                 &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;<br>&gt;                 &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;<br>&gt;         &lt;mailto:svabox at gmail.com &lt;mailto:svabox at gmail.com&gt;&gt;&gt;&gt;:<br>&gt;<br>&gt;                     As I understand, the question is if<br>&gt;<br>&gt;                     `a ?? x + y + z`<br>&gt;                     and<br>&gt;                     `a ? b : c + x + y`<br>&gt;                     (or `b + c * d / e`)<br>&gt;<br>&gt;                     an &quot;ambiguous case&quot; ?<br>&gt;<br>&gt;<br>&gt;                     On 15.06.2016 15:42, Антон Жилин via swift-evolution wrote:<br>&gt;<br>&gt;                         It&#39;s tempting to mention SE-0077 in this context.<br>&gt;         If it&#39;s<br>&gt;                 accepted,<br>&gt;                         we will<br>&gt;                         be able to make omission of parentheses an error in<br>&gt;                 ambiguous cases.<br>&gt;<br>&gt;                         - Anton<br>&gt;<br>&gt;<br>&gt;                         _______________________________________________<br>&gt;                         swift-evolution mailing list<br>&gt;                         swift-evolution at swift.org<br>&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;                 &lt;mailto:swift-evolution at swift.org<br>&gt;         &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;                 &lt;mailto:swift-evolution at swift.org<br>&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;                 _______________________________________________<br>&gt;                 swift-evolution mailing list<br>&gt;                 swift-evolution at swift.org<br>&gt;         &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
