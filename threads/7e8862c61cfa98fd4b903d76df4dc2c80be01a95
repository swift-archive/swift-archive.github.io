<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>SE-0025: Scoped Access Level, next steps</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 29, 2016 at 07:00:00am</p></header><div class="content"><p>I still think that &quot;local&quot; expresses the concept exactly, as it restricts visibility to the local scope, doesn&#39;t it?<br></p><p>-Thorsten <br></p><p>&gt; Am 25.03.2016 um 17:46 schrieb Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Well, several prominent voices seem to think that &#39;private&#39; is &quot;intuitively obvious&quot; when it refers to declaration-level scope, so I didn&#39;t argue that point. I still happen to disagree; I would add &#39;privatetodeclaration&#39; to &#39;privatetomodule&#39; and &#39;privatetofile&#39;, which would solve that conversational point: &quot;These properties are private to the declaration&quot;.<br>&gt; <br>&gt; Alternatively: &#39;fileaccessible&#39;, &#39;moduleaccessible&#39;, &#39;declarationaccessible&#39;? (Does that confuse code accessibility with such things as UIAccessibility?)<br>&gt; <br>&gt; That doesn&#39;t answer your awkward-to-read-in-code problem. I don&#39;t have a solution to that.<br>&gt; <br>&gt; To re-specify the problem, again (perhaps more for my benefit while writing as yours while reading): the terms we choose have to suggest accessibility, but a subjective spectrum of adjectives does not give us clarity. The idea of building into these symbols references to exactly where the scope ends appears to be popular. There aren&#39;t any existing one-word terms which express these concepts so we&#39;re coining new words out of two (or more) existing words. Which combination of words is least awkward to read, or most intuitive to type, is still going to be subjective.<br>&gt; <br>&gt; <br>&gt;&gt; On Fri, Mar 25, 2016 at 4:29 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt; It doesn&#39;t solve the problem for me. &quot;These properties are private.&quot; &quot;To what?&quot; &quot;Just private&quot; / &quot;To the scope&quot;.<br>&gt;&gt; <br>&gt;&gt; They&#39;re also still awkward to read in code. I know we have lots of decl modifiers, but I&#39;ve convinced myself we&#39;re not in Java&#39;s &quot;public static void main&quot; soup situation yet.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 25, 2016, at 9:27 , Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well... how about we reverse the terms: call them &#39;privatetomodule&#39; and &#39;privatetofile&#39;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is &#39;private(module)&#39; and &#39;private(file)&#39; but fitting the all lower-case style. It puts &#39;private&#39; first (and when you use the keyword, &#39;private&#39; is the bit you want to start with more than &#39;module&#39; or &#39;file&#39;). It&#39;s easier to use in conversation (&quot;these properties are private to the file&quot;).<br>&gt;&gt;&gt; Disadvantage: it adds &#39;to&#39;, so the words are even longer (but no longer than the parenthesised form would&#39;ve taken).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &#39;privatetofile extension Foo : BarConvertible { }&#39;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Mar 25, 2016 at 4:15 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Mar 24, 2016, at 16:20 , Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mar 24, 2016, at 5:13 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think it does. `module` could mean many things related to how Swift creates and consumes modules. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; `moduleprivate` combines something about access levels (public/private) and scope (module), is easy to <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Google, offers few &quot;wrong&quot; interpretations. By using a longer keyword, it is less flexible in meaning and <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; more fixed in purpose.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sure, but is that worth 7 to 9 extra characters at every single use site for something that&#39;s actually pretty common? Is it worth the muddled mess of an all-lowercase keyword with no obvious break, or the attention-grabbing of a capital letter or an underscore?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; `module` and `file` are not going to be obscure corners of the language. Most people will probably learn about them at the same time they learn about `public` and `private`. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; (Actually, if `module` continues to be the default, you probably won&#39;t see it *that* often. You *will* see `file`, but that&#39;s the one that can&#39;t be as easily confused with a declaration.)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Obviousness for new users is great, but you can take it too far. We call the type `Int32`, not `SignedIntegerBetweenNegative2ToThe31stPowerAnd2ToThe31stPowerMinus1`—and if we did, it&#39;s not clear the longer name would really be more obvious, because it would be such a pain to read.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; `moduleprivate` is the default value. I doubt it will get  used much if at all. I don&#39;t think `fileprivate` will get used much either<br>&gt;&gt;&gt;&gt;&gt; but in such cases, I think those seven extra letters are essential and documenting.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The two remaining public and private access levels are simple and intuitively obvious.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m going to say that I remain unhappy with these new names. I don&#39;t believe that these won&#39;t get used, and I don&#39;t want them to feel awkward, discouraged, or penalized when they do. The standard library, for example, has in its style guide that all access control should be explicit, which is a reasonable style to enforce. I also have a small concern that they won&#39;t be easy to talk about: &quot;this method is private&quot; &quot;wait, file-private or module-private?&quot; &quot;neither, just private-private&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I realize these are all vague concerns, and I don&#39;t have something more concrete—or a better alternative. &quot;modulescoped&quot; and &quot;filescoped&quot; would be very literally accurate but (a) would force people to learn what &quot;scoped&quot; means unnecessarily, and (b) aren&#39;t less awkward.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree with the concerns that just saying &quot;file var foo&quot; makes it sound like there&#39;s one copy of the variable shared in the entire file, even when applied to an instance property. I think there&#39;s a lot of value is making the access control terms adjectives.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I honestly still think &quot;public, internal, private, local&quot; is a better taxonomy.. It&#39;s true that &quot;internal&quot; and &quot;private&quot; aren&#39;t automatically ordered relative to each other (and maybe not even &quot;local&quot;), but they&#39;re all adjectives (unlike &quot;module&quot; and &quot;file&quot;), and they&#39;re not awkward to read or to use in conversation. But both the core team and the list disagree, mainly because (a) it aligns &#39;private&#39; more closely with other languages, and (b) if you&#39;re not thinking about it, more restrictive is better than less. (Both of which I agree are good ideas.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/7e881a95/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
