<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[META] Re-invigorating the compiler directive discussion</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 10, 2016 at 07:00:00pm</p></header><div class="content"><p>I would like to bring the compiler directive discussion back to life. Introducing new conditionals <br>has been raised at several points, poked at, and then died down and gone nowhere.<br></p><p>Discussed at a variety of times directives mentioned on-list include<br></p><p>Apple/Non-Apple Platform to differentiate imports. The current art allows if os(Linux) but does not categorize Apple platforms as an entire coherent group. #if os(Darwin) // os(iOS) || os(OSX) || os(watchOS) || os(tvOS), expandable for any new OS&#39;s. Kevin Ballard writes, &quot;Without this, I think people are going to be tempted to write if !os(Linux) instead of writing out all 4 Apple platforms, and this is unfortunate because it makes the assumption that Linux is the only non-Apple platform, and that&#39;s simply not true.&quot;<br>Common UIKit platform: #if os(iOS) || os(tvOS) or general module availability: #if available(AppKit), #if available(UIKit) (Plus a proposal to replace os with platform) (&quot;Is the target a common UIKit platform? Can it import UIKit?&quot;)<br>Linux distribution check (&quot;Is this target a specific Linux distro? Is it at least this distro or later?&quot;)<br>Is this a Unixy-platform (vs, for example, running on Windows would not be)<br>What BSD characteristics does this platform support?<br>Simulator/Physical destinations (&quot;Is the target a simulator environment or physical device?&quot;)<br>Debug/Release builds (bypassing the need for -DDEBUG flags) (&quot;Is the target in Debug or Release mode?&quot;)<br>DebugAsserts/ReleaseAsserts/FastAsserts<br>General conditional flag detection #if config(Debug)<br>Test-supporting (&quot;Is the target built for running tests?)<br>Big-or-little endian<br>Architecture families: Is this a 32-or-64-bit target<br>Architecture subtypes<br>Signed-or-unsigned char<br>Existing build configurations include os() (OSX, iOS, watchOS, tvOS, Linux) and arch() (X86_64, arm, arm64, i386), the literals true and false, and testing for command-line flags defined using -D &lt;#flag#&gt;.<br></p><p>I believe these directives involve relatively minor changes, should be easy to implement, and <br>can be extended over time as needed. It would probably be best to get a sense of which <br>ones the dev community *really* want and need  and push on those to avoid clutter, <br>but I’d hate to see these languish without getting a proper discussion.<br></p><p>Core team members: Would it best to propose individual changes, <br>create a small groups of related items, or try to push through a large suite?<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/e0528119/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[META] Re-invigorating the compiler directive discussion</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 10, 2016 at 06:00:00pm</p></header><div class="content"><p>Thanks for this, Erica.  A huge +1 from me.<br></p><p>- Will<br></p><p>&gt; On Mar 10, 2016, at 6:15 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would like to bring the compiler directive discussion back to life. Introducing new conditionals <br>&gt; has been raised at several points, poked at, and then died down and gone nowhere.<br>&gt; <br>&gt; Discussed at a variety of times directives mentioned on-list include<br>&gt; <br>&gt; Apple/Non-Apple Platform to differentiate imports. The current art allows if os(Linux) but does not categorize Apple platforms as an entire coherent group. #if os(Darwin) // os(iOS) || os(OSX) || os(watchOS) || os(tvOS), expandable for any new OS&#39;s. Kevin Ballard writes, &quot;Without this, I think people are going to be tempted to write if !os(Linux) instead of writing out all 4 Apple platforms, and this is unfortunate because it makes the assumption that Linux is the only non-Apple platform, and that&#39;s simply not true.&quot;<br>&gt; Common UIKit platform: #if os(iOS) || os(tvOS) or general module availability: #if available(AppKit), #if available(UIKit) (Plus a proposal to replace os with platform) (&quot;Is the target a common UIKit platform? Can it import UIKit?&quot;)<br>&gt; Linux distribution check (&quot;Is this target a specific Linux distro? Is it at least this distro or later?&quot;)<br>&gt; Is this a Unixy-platform (vs, for example, running on Windows would not be)<br>&gt; What BSD characteristics does this platform support?<br>&gt; Simulator/Physical destinations (&quot;Is the target a simulator environment or physical device?&quot;)<br>&gt; Debug/Release builds (bypassing the need for -DDEBUG flags) (&quot;Is the target in Debug or Release mode?&quot;)<br>&gt; DebugAsserts/ReleaseAsserts/FastAsserts<br>&gt; General conditional flag detection #if config(Debug)<br>&gt; Test-supporting (&quot;Is the target built for running tests?)<br>&gt; Big-or-little endian<br>&gt; Architecture families: Is this a 32-or-64-bit target<br>&gt; Architecture subtypes<br>&gt; Signed-or-unsigned char<br>&gt; Existing build configurations include os() (OSX, iOS, watchOS, tvOS, Linux) and arch() (X86_64, arm, arm64, i386), the literals true and false, and testing for command-line flags defined using -D &lt;#flag#&gt;.<br>&gt; <br>&gt; I believe these directives involve relatively minor changes, should be easy to implement, and <br>&gt; can be extended over time as needed. It would probably be best to get a sense of which <br>&gt; ones the dev community *really* want and need  and push on those to avoid clutter, <br>&gt; but I’d hate to see these languish without getting a proper discussion.<br>&gt; <br>&gt; Core team members: Would it best to propose individual changes, <br>&gt; create a small groups of related items, or try to push through a large suite?<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/c0f64c8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5c9df42e3c293e3cdb5f3e1b34d44ef9?s=50"></div><header><strong>[META] Re-invigorating the compiler directive discussion</strong> from <string>Step C</string> &lt;schristopher at bignerdranch.com&gt;<p>March 11, 2016 at 12:00:00am</p></header><div class="content"><p>Agreed, thanks for tracking this, Erica. I want to see this move forward. <br></p><p>I&#39;d personally like to see:<br>- os(darwin) or Apple platform grouping<br>- simulator vs physical device<br>- test supporting<br>- module / UIKit availability<br></p><p>- Step<br></p><p>&gt; On Mar 10, 2016, at 9:26 PM, William Dillon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for this, Erica.  A huge +1 from me.<br>&gt; <br>&gt; - Will<br>&gt; <br>&gt;&gt; On Mar 10, 2016, at 6:15 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would like to bring the compiler directive discussion back to life. Introducing new conditionals <br>&gt;&gt; has been raised at several points, poked at, and then died down and gone nowhere.<br>&gt;&gt; <br>&gt;&gt; Discussed at a variety of times directives mentioned on-list include<br>&gt;&gt; <br>&gt;&gt; Apple/Non-Apple Platform to differentiate imports. The current art allows if os(Linux) but does not categorize Apple platforms as an entire coherent group. #if os(Darwin) // os(iOS) || os(OSX) || os(watchOS) || os(tvOS), expandable for any new OS&#39;s. Kevin Ballard writes, &quot;Without this, I think people are going to be tempted to write if !os(Linux) instead of writing out all 4 Apple platforms, and this is unfortunate because it makes the assumption that Linux is the only non-Apple platform, and that&#39;s simply not true.&quot;<br>&gt;&gt; Common UIKit platform: #if os(iOS) || os(tvOS) or general module availability: #if available(AppKit), #if available(UIKit) (Plus a proposal to replace os with platform) (&quot;Is the target a common UIKit platform? Can it import UIKit?&quot;)<br>&gt;&gt; Linux distribution check (&quot;Is this target a specific Linux distro? Is it at least this distro or later?&quot;)<br>&gt;&gt; Is this a Unixy-platform (vs, for example, running on Windows would not be)<br>&gt;&gt; What BSD characteristics does this platform support?<br>&gt;&gt; Simulator/Physical destinations (&quot;Is the target a simulator environment or physical device?&quot;)<br>&gt;&gt; Debug/Release builds (bypassing the need for -DDEBUG flags) (&quot;Is the target in Debug or Release mode?&quot;)<br>&gt;&gt; DebugAsserts/ReleaseAsserts/FastAsserts<br>&gt;&gt; General conditional flag detection #if config(Debug)<br>&gt;&gt; Test-supporting (&quot;Is the target built for running tests?)<br>&gt;&gt; Big-or-little endian<br>&gt;&gt; Architecture families: Is this a 32-or-64-bit target<br>&gt;&gt; Architecture subtypes<br>&gt;&gt; Signed-or-unsigned char<br>&gt;&gt; Existing build configurations include os() (OSX, iOS, watchOS, tvOS, Linux) and arch() (X86_64, arm, arm64, i386), the literals true and false, and testing for command-line flags defined using -D &lt;#flag#&gt;.<br>&gt;&gt; <br>&gt;&gt; I believe these directives involve relatively minor changes, should be easy to implement, and <br>&gt;&gt; can be extended over time as needed. It would probably be best to get a sense of which <br>&gt;&gt; ones the dev community *really* want and need  and push on those to avoid clutter, <br>&gt;&gt; but I’d hate to see these languish without getting a proper discussion.<br>&gt;&gt; <br>&gt;&gt; Core team members: Would it best to propose individual changes, <br>&gt;&gt; create a small groups of related items, or try to push through a large suite?<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/7ca22adc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
