<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>April 16, 2016 at 06:00:00am</p></header><div class="content"><p>Since we know the types of the properties, how about we replace the type in the signature with either an indication that the property should be automatically set, or better yet, the property which should be set:<br></p><p>class Foo<br>{<br>	let foo : String<br>	let bar : String<br>	let barCount : Int<br>	let baz : Int<br></p><p>	init(foo: self.foo, bar: self.bar, baz: self.baz)<br>	{<br>		self.barCount = bar.characters.count<br>	} <br>}<br></p><p>That way you don’t always have to have the init’s parameter names match the names of the properties they set (even though they often would).  We could also allow a leading dot as a shorthand for ‘self.’<br></p><p>	init(foo: .foo, bar: .bar, baz: .baz)<br> <br>I think I like explicit ‘self.’ better, but that may just be my preference.  In either case, the generated interface would show the actual type.<br></p><p>	// init(foo: String, bar: String, baz: Int)<br></p><p>Thanks,<br>Jon<br></p><p>&gt; This is a common pattern for initialisers at the moment:<br>&gt; <br>&gt; class Foo<br>&gt; <br>&gt; {<br>&gt; <br>&gt; let foo : String<br>&gt; <br>&gt; let bar : String<br>&gt; <br>&gt; let barCount : Int<br>&gt; <br>&gt; let baz : Int<br>&gt; <br>&gt; <br>&gt; init(foo: String, bar: String, baz: Int)<br>&gt; <br>&gt; {<br>&gt; <br>&gt; self.foo = foo<br>&gt; <br>&gt; self.bar = bar<br>&gt; <br>&gt; self.baz = baz<br>&gt; <br>&gt; barCount = bar.characters.count<br>&gt; <br>&gt; }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; This involves a lot of using &#39;self.&#39;. For those who prefer not to use<br>&gt; &#39;self.&#39; explicitly everywhere, this is probably the main place it gets<br>&gt; used. It&#39;s a lot of boilerplate code.<br>&gt; <br>&gt; How would it be if, like default variables, we could pack some of that<br>&gt; information into the argument tuple, and unify parameters with properties<br>&gt; immediately?<br>&gt; <br>&gt; class Foo<br>&gt; <br>&gt; {<br>&gt; <br>&gt; let foo : String<br>&gt; <br>&gt; let bar : String<br>&gt; <br>&gt; let barCount : Int<br>&gt; <br>&gt; let baz : Int<br>&gt; <br>&gt; <br>&gt; init(self.foo: String, self.bar: String, self.baz: Int)<br>&gt; <br>&gt; {<br>&gt; <br>&gt; barCount = bar.characters.count<br>&gt; <br>&gt; }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; Less boilerplate, more focus on the properties which need to be generated.<br>&gt; <br>&gt; Thoughts?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160416/69882b2f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 17, 2016 at 06:00:00pm</p></header><div class="content"><p>I think I like the idea... However IMHO this really feels like something that should be part of a macro system, not a &quot;proper&quot; language feature.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 16, 2016, at 08:17, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Since we know the types of the properties, how about we replace the type in the signature with either an indication that the property should be automatically set, or better yet, the property which should be set:<br>&gt; <br>&gt; class Foo<br>&gt; {<br>&gt; 	let foo : String<br>&gt; 	let bar : String<br>&gt; 	let barCount : Int<br>&gt; 	let baz : Int<br>&gt; <br>&gt; 	init(foo: self.foo, bar: self.bar, baz: self.baz)<br>&gt; 	{<br>&gt; 		self.barCount = bar.characters.count<br>&gt; 	} <br>&gt; }<br>&gt; <br>&gt; That way you don’t always have to have the init’s parameter names match the names of the properties they set (even though they often would).  We could also allow a leading dot as a shorthand for ‘self.’<br>&gt; <br>&gt; 	init(foo: .foo, bar: .bar, baz: .baz)<br>&gt;  <br>&gt; I think I like explicit ‘self.’ better, but that may just be my preference.  In either case, the generated interface would show the actual type.<br>&gt; <br>&gt; 	// init(foo: String, bar: String, baz: Int)<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; <br>&gt;&gt; This is a common pattern for initialisers at the moment:<br>&gt;&gt; <br>&gt;&gt; class Foo<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; let foo : String<br>&gt;&gt; <br>&gt;&gt; let bar : String<br>&gt;&gt; <br>&gt;&gt; let barCount : Int<br>&gt;&gt; <br>&gt;&gt; let baz : Int<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; init(foo: String, bar: String, baz: Int)<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; self.foo = foo<br>&gt;&gt; <br>&gt;&gt; self.bar = bar<br>&gt;&gt; <br>&gt;&gt; self.baz = baz<br>&gt;&gt; <br>&gt;&gt; barCount = bar.characters.count<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This involves a lot of using &#39;self.&#39;. For those who prefer not to use<br>&gt;&gt; &#39;self.&#39; explicitly everywhere, this is probably the main place it gets<br>&gt;&gt; used. It&#39;s a lot of boilerplate code.<br>&gt;&gt; <br>&gt;&gt; How would it be if, like default variables, we could pack some of that<br>&gt;&gt; information into the argument tuple, and unify parameters with properties<br>&gt;&gt; immediately?<br>&gt;&gt; <br>&gt;&gt; class Foo<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; let foo : String<br>&gt;&gt; <br>&gt;&gt; let bar : String<br>&gt;&gt; <br>&gt;&gt; let barCount : Int<br>&gt;&gt; <br>&gt;&gt; let baz : Int<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; init(self.foo: String, self.bar: String, self.baz: Int)<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; barCount = bar.characters.count<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Less boilerplate, more focus on the properties which need to be generated.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 18, 2016 at 03:00:00pm</p></header><div class="content"><p>-1 on this. After the parameter declaration we expect to see a type of that <br>parameter. I don&#39;t think we should break Swift method declarations for this <br>feature. I prefer to see information about parameter types in func/init <br>declaration. I don&#39;t want to scroll up to the start of class declaration to <br>find out the type of parameter.<br></p><p>And, why in this case we need these foo: bar: at all?<br>We had a discussion earlier in this thread about such variant:<br></p><p>class Foo<br>{<br>let foo : String<br>let bar : String<br>let barCount : Int<br>let baz : Int<br></p><p>init(self.foo, self.bar, self.baz) // just self.foo etc, no parameter <br>labels at ll<br>{<br>self.barCount = bar.characters.count<br>}<br>}<br></p><p>But I also think this is not OK to not have a types of parameters in init.<br></p><p>On 16.04.2016 16:17, Jonathan Hull via swift-evolution wrote:<br>&gt; Since we know the types of the properties, how about we replace the type in<br>&gt; the signature with either an indication that the property should be<br>&gt; automatically set, or better yet, the property which should be set:<br>&gt;<br>&gt; class Foo<br>&gt; {<br>&gt; let foo : String<br>&gt; let bar : String<br>&gt; let barCount : Int<br>&gt; let baz : Int<br>&gt;<br>&gt; init(foo: self.foo, bar: self.bar, baz: self.baz)<br>&gt; {<br>&gt; self.barCount = bar.characters.count<br>&gt; }<br>&gt; }<br>&gt;<br>&gt; That way you don’t always have to have the init’s parameter names match the<br>&gt; names of the properties they set (even though they often would).  We could<br>&gt; also allow a leading dot as a shorthand for ‘self.’<br>&gt;<br>&gt; init(foo: .foo, bar: .bar, baz: .baz)<br>&gt;<br>&gt; I think I like explicit ‘self.’ better, but that may just be my preference.<br>&gt;  In either case, the generated interface would show the actual type.<br>&gt;<br>&gt; // init(foo: String, bar: String, baz: Int)<br>&gt;<br>&gt; Thanks,<br>&gt; Jon<br>&gt;<br>&gt;&gt; This is a common pattern for initialisers at the moment:<br>&gt;&gt;<br>&gt;&gt; class Foo<br>&gt;&gt;<br>&gt;&gt; {<br>&gt;&gt;<br>&gt;&gt; let foo : String<br>&gt;&gt;<br>&gt;&gt; let bar : String<br>&gt;&gt;<br>&gt;&gt; let barCount : Int<br>&gt;&gt;<br>&gt;&gt; let baz : Int<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; init(foo: String, bar: String, baz: Int)<br>&gt;&gt;<br>&gt;&gt; {<br>&gt;&gt;<br>&gt;&gt; self.foo = foo<br>&gt;&gt;<br>&gt;&gt; self.bar = bar<br>&gt;&gt;<br>&gt;&gt; self.baz = baz<br>&gt;&gt;<br>&gt;&gt; barCount = bar.characters.count<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This involves a lot of using &#39;self.&#39;. For those who prefer not to use<br>&gt;&gt; &#39;self.&#39; explicitly everywhere, this is probably the main place it gets<br>&gt;&gt; used. It&#39;s a lot of boilerplate code.<br>&gt;&gt;<br>&gt;&gt; How would it be if, like default variables, we could pack some of that<br>&gt;&gt; information into the argument tuple, and unify parameters with properties<br>&gt;&gt; immediately?<br>&gt;&gt;<br>&gt;&gt; class Foo<br>&gt;&gt;<br>&gt;&gt; {<br>&gt;&gt;<br>&gt;&gt; let foo : String<br>&gt;&gt;<br>&gt;&gt; let bar : String<br>&gt;&gt;<br>&gt;&gt; let barCount : Int<br>&gt;&gt;<br>&gt;&gt; let baz : Int<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; init(self.foo: String, self.bar: String, self.baz: Int)<br>&gt;&gt;<br>&gt;&gt; {<br>&gt;&gt;<br>&gt;&gt; barCount = bar.characters.count<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Less boilerplate, more focus on the properties which need to be generated.<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 18, 2016 at 10:00:00pm</p></header><div class="content"><p>I agree with the intent of this, but perhaps not the solution; sticking with the original example, simply being able to have an implied initialiser for classes, as we have for structs, would be enough, for example:<br></p><p>class Foo {<br>	let foo:String<br>	let bar:String<br>	let baz:Int<br></p><p>	var barCount:Int { return self.bar.characters.count } // Computed property, could be lazy instead I think?<br></p><p>	// Implied init(foo:String, bar:String, baz:Int)<br>}<br></p><p>Personally I’m not a fan of the syntax, I wonder if an #autoinit or such directive could be used to indicate properties that should be initialised automatically where possible, like so:<br></p><p>class Foo {<br>	#autoInit let foo:String<br>	#autoInit let bar:String<br>	#autoInit let baz:Int<br>		let barCount:Int<br></p><p>	init(foo:String, bar:String, baz:Int) {<br>		// foo, bar, baz handled behind the scenes<br>		self.barCount = bar.characters.count<br>	}<br>}<br></p><p>(or it could be on the parameters of the init function, might be clearer that way)<br></p><p>Just an idea anyway<br></p><p>&gt; On 16 Apr 2016, at 14:17, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Since we know the types of the properties, how about we replace the type in the signature with either an indication that the property should be automatically set, or better yet, the property which should be set:<br>&gt; <br>&gt; class Foo<br>&gt; {<br>&gt; 	let foo : String<br>&gt; 	let bar : String<br>&gt; 	let barCount : Int<br>&gt; 	let baz : Int<br>&gt; <br>&gt; 	init(foo: self.foo, bar: self.bar, baz: self.baz)<br>&gt; 	{<br>&gt; 		self.barCount = bar.characters.count<br>&gt; 	} <br>&gt; }<br>&gt; <br>&gt; That way you don’t always have to have the init’s parameter names match the names of the properties they set (even though they often would).  We could also allow a leading dot as a shorthand for ‘self.’<br>&gt; <br>&gt; 	init(foo: .foo, bar: .bar, baz: .baz)<br>&gt;  <br>&gt; I think I like explicit ‘self.’ better, but that may just be my preference.  In either case, the generated interface would show the actual type.<br>&gt; <br>&gt; 	// init(foo: String, bar: String, baz: Int)<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; <br>&gt;&gt; This is a common pattern for initialisers at the moment:<br>&gt;&gt; <br>&gt;&gt; class Foo<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; let foo : String<br>&gt;&gt; <br>&gt;&gt; let bar : String<br>&gt;&gt; <br>&gt;&gt; let barCount : Int<br>&gt;&gt; <br>&gt;&gt; let baz : Int<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; init(foo: String, bar: String, baz: Int)<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; self.foo = foo<br>&gt;&gt; <br>&gt;&gt; self.bar = bar<br>&gt;&gt; <br>&gt;&gt; self.baz = baz<br>&gt;&gt; <br>&gt;&gt; barCount = bar.characters.count<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This involves a lot of using &#39;self.&#39;. For those who prefer not to use<br>&gt;&gt; &#39;self.&#39; explicitly everywhere, this is probably the main place it gets<br>&gt;&gt; used. It&#39;s a lot of boilerplate code.<br>&gt;&gt; <br>&gt;&gt; How would it be if, like default variables, we could pack some of that<br>&gt;&gt; information into the argument tuple, and unify parameters with properties<br>&gt;&gt; immediately?<br>&gt;&gt; <br>&gt;&gt; class Foo<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; let foo : String<br>&gt;&gt; <br>&gt;&gt; let bar : String<br>&gt;&gt; <br>&gt;&gt; let barCount : Int<br>&gt;&gt; <br>&gt;&gt; let baz : Int<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; init(self.foo: String, self.bar: String, self.baz: Int)<br>&gt;&gt; <br>&gt;&gt; {<br>&gt;&gt; <br>&gt;&gt; barCount = bar.characters.count<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Less boilerplate, more focus on the properties which need to be generated.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/697b3968/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 19, 2016 at 09:00:00am</p></header><div class="content"><p>-1 on #autoInit for properties declaration. Init should explicitly shows <br>what parameters it will get and what will be assiged. I believe in case we <br>want this feature, &quot;self.&quot; prefix must be in init declaration in parameter <br>list, with or without type(I prefer with type):<br></p><p>init( self.foo: String, self.bar: String, baz: Int){..}<br></p><p>or<br></p><p>init( self.foo, self.bar, baz: Int){..}<br></p><p>In this case IMO it is obvious that this init will set self.foo&amp;self.bar by <br>provided values from caller. And it is clear(in first variant) what is the <br>types of parameters for init(let&#39;s imaging a class with long list of <br>properties/internal structs/classes/enums, number of initializers then. And <br>you see init( self.foo, self.bar, baz: Int) - what is the type of first <br>parameter for this initializer? You have to scroll up to defenition of <br>self.foo, then find self.bar definition etc. This is why I prefer explicit <br>type declaration in init. Also this protects against automatic change of <br>init parameter types after you changed type of property - i.e. you have to <br>explicity change init declaration i.e. you must be sure that you want to <br>change init method)<br></p><p>On 19.04.2016 0:51, Haravikk via swift-evolution wrote:<br>&gt; I agree with the intent of this, but perhaps not the solution; sticking<br>&gt; with the original example, simply being able to have an implied initialiser<br>&gt; for classes, as we have for structs, would be enough, for example:<br>&gt;<br>&gt;     class Foo {<br>&gt;     let foo:String<br>&gt;     let bar:String<br>&gt;     let baz:Int<br>&gt;<br>&gt;     var barCount:Int { return self.bar.characters.count } // Computed<br>&gt;     property, could be lazy instead I think?<br>&gt;<br>&gt;     // Implied init(foo:String, bar:String, baz:Int)<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; Personally I’m not a fan of the syntax, I wonder if an #autoinit or such<br>&gt; directive could be used to indicate properties that should be initialised<br>&gt; automatically where possible, like so:<br>&gt;<br>&gt;     class Foo {<br>&gt;     #autoInit let foo:String<br>&gt;     #autoInit let bar:String<br>&gt;     #autoInit let baz:Int<br>&gt;     let barCount:Int<br>&gt;<br>&gt;     init(foo:String, bar:String, baz:Int) {<br>&gt;     // foo, bar, baz handled behind the scenes<br>&gt;     self.barCount = bar.characters.count<br>&gt;     }<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; (or it could be on the parameters of the init function, might be clearer<br>&gt; that way)<br>&gt;<br>&gt; Just an idea anyway<br>&gt;<br>&gt;&gt; On 16 Apr 2016, at 14:17, Jonathan Hull via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Since we know the types of the properties, how about we replace the type<br>&gt;&gt; in the signature with either an indication that the property should be<br>&gt;&gt; automatically set, or better yet, the property which should be set:<br>&gt;&gt;<br>&gt;&gt; class Foo<br>&gt;&gt; {<br>&gt;&gt; let foo : String<br>&gt;&gt; let bar : String<br>&gt;&gt; let barCount : Int<br>&gt;&gt; let baz : Int<br>&gt;&gt;<br>&gt;&gt; init(foo: self.foo, bar: self.bar, baz: self.baz)<br>&gt;&gt; {<br>&gt;&gt; self.barCount = bar.characters.count<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; That way you don’t always have to have the init’s parameter names match<br>&gt;&gt; the names of the properties they set (even though they often would).  We<br>&gt;&gt; could also allow a leading dot as a shorthand for ‘self.’<br>&gt;&gt;<br>&gt;&gt; init(foo: .foo, bar: .bar, baz: .baz)<br>&gt;&gt;<br>&gt;&gt; I think I like explicit ‘self.’ better, but that may just be my<br>&gt;&gt; preference.  In either case, the generated interface would show the<br>&gt;&gt; actual type.<br>&gt;&gt;<br>&gt;&gt; // init(foo: String, bar: String, baz: Int)<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Jon<br>&gt;&gt;<br>&gt;&gt;&gt; This is a common pattern for initialisers at the moment:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class Foo<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let foo : String<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let bar : String<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let barCount : Int<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let baz : Int<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; init(foo: String, bar: String, baz: Int)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; self.foo = foo<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; self.bar = bar<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; self.baz = baz<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; barCount = bar.characters.count<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This involves a lot of using &#39;self.&#39;. For those who prefer not to use<br>&gt;&gt;&gt; &#39;self.&#39; explicitly everywhere, this is probably the main place it gets<br>&gt;&gt;&gt; used. It&#39;s a lot of boilerplate code.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; How would it be if, like default variables, we could pack some of that<br>&gt;&gt;&gt; information into the argument tuple, and unify parameters with properties<br>&gt;&gt;&gt; immediately?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class Foo<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let foo : String<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let bar : String<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let barCount : Int<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let baz : Int<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; init(self.foo: String, self.bar: String, self.baz: Int)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; barCount = bar.characters.count<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Less boilerplate, more focus on the properties which need to be generated.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
