<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 23, 2016 at 01:00:00pm</p></header><div class="content"><p>1. I&#39;ve revised the proposal to mostly meet the recommendations.<br></p><p>https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-<br>operator-precedence.md<br></p><p>2. My reaction to the rationale:<br></p><p>precedencegroup Foo {<br>  associativity: left<br>  strongerThan: Bar<br>  weakerThan: Bas<br>}<br></p><p>I agree with colons, but I would prefer above and below. Anyway, core <br>team will have at least one more chance to change their mind.<br></p><p>- The proposal states that precedence groups live in a separate <br>namespace from other declarations; however, this is unprecedented in <br>Swift, and leads to significant implementation challenges. The core team <br>recommends that precedence groups exist in the same namespace as all <br>Swift declarations.<br></p><p>How unfortunate. We will need to discuss naming convention and try not <br>to add too much visual clutter.<br></p><p>3. I also have a suggestion to discuss.<br></p><p>Under &quot;Joining unrelated precedence groups&quot; I see an algorithm that does <br>not match anything I&#39;ve seen in network theory.<br></p><p>My suggestion is to make it a warning, not an error. It will reduce the <br>pressure on the language and compilers.<br></p><p>When we break down precedence hierarchy in a follow-up proposal, <br>developers will be able to use a library that will join precedence <br>groups and make their old code compile, although with warnings.<br></p><p>- Anton<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 23, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 8:18 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1. I&#39;ve revised the proposal to mostly meet the recommendations.<br></p><p>Thanks continuing to push this forward!  I’m really looking forward to this change and hope the revision is met with acceptance.<br> <br>&gt; <br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-<br>&gt; operator-precedence.md<br>&gt; <br>&gt; 2. My reaction to the rationale:<br>&gt; <br>&gt; precedencegroup Foo {<br>&gt;   associativity: left<br>&gt;   strongerThan: Bar<br>&gt;   weakerThan: Bas<br>&gt; }<br>&gt; <br>&gt; I agree with colons, but I would prefer above and below. Anyway, core <br>&gt; team will have at least one more chance to change their mind.<br></p><p>This is the first time I have encountered the “stronger” and “weaker” terminology in this context.  I am curious about the rationale for preferring those.<br></p><p>FWIW, I also prefer `above` and `below`.  The terms I am most familiar with in discussing precedence are “higher” and “lower” (and is the vocabulary used here: https://en.wikipedia.org/wiki/Order_of_operations &lt;https://en.wikipedia.org/wiki/Order_of_operations&gt; for example).  However, as with `strongerThan` and `weakerThan`, these would require `higherThan` and `lowerThan` in order to read well.   `above` and `below` have a strong relationship to that common vocabulary while being more concise because they do not require including a word that only serves to make our code read like a phrase while offering no information.<br></p><p>&gt; <br>&gt; - The proposal states that precedence groups live in a separate <br>&gt; namespace from other declarations; however, this is unprecedented in <br>&gt; Swift, and leads to significant implementation challenges. The core team <br>&gt; recommends that precedence groups exist in the same namespace as all <br>&gt; Swift declarations.<br>&gt; <br>&gt; How unfortunate. We will need to discuss naming convention and try not <br>&gt; to add too much visual clutter.<br>&gt; <br>&gt; 3. I also have a suggestion to discuss.<br>&gt; <br>&gt; Under &quot;Joining unrelated precedence groups&quot; I see an algorithm that does <br>&gt; not match anything I&#39;ve seen in network theory.<br>&gt; <br>&gt; My suggestion is to make it a warning, not an error. It will reduce the <br>&gt; pressure on the language and compilers.<br>&gt; <br>&gt; When we break down precedence hierarchy in a follow-up proposal, <br>&gt; developers will be able to use a library that will join precedence <br>&gt; groups and make their old code compile, although with warnings.<br>&gt; <br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/0277a520/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>June 23, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;ve got another suggestion for the bike shedding, and a question.<br></p><p>The naming suggestion: why not simply &#39;precedes&#39; and &#39;succeeds&#39;? This<br>avoids the conjoined words problem. Then you&#39;re just writing<br>&#39;Multiplication { succeeds: Exponentiation, precedes: Addition }&#39;.<br></p><p>The question: this syntax lets you declare a precedence group C and<br>position it between two groups A and B in the precedence order. If no<br>existing precedence relationship exists between A and B when this happens<br>(I&#39;m assuming neither is imported), then creating C between A and B<br>implicitly creates that relationship.<br>Suppose wanted to define C&#39;s precedence so its operation preceded both A<br>and B, or succeeded both A and B. Does that require an explicit declaration<br>of which of A or B takes precedence? If not, would this be legal?:<br>&#39;precedencegroup C { strongerThan: A, strongerThan: B }&#39;<br></p><p><br></p><p>On Thu, Jun 23, 2016 at 3:52 PM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 23, 2016, at 8:18 AM, Anton Zhilin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; 1. I&#39;ve revised the proposal to mostly meet the recommendations.<br>&gt;<br>&gt;<br>&gt; Thanks continuing to push this forward!  I’m really looking forward to<br>&gt; this change and hope the revision is met with acceptance.<br>&gt;<br>&gt;<br>&gt;<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-<br>&gt; operator-precedence.md<br>&gt;<br>&gt; 2. My reaction to the rationale:<br>&gt;<br>&gt; precedencegroup Foo {<br>&gt;   associativity: left<br>&gt;   strongerThan: Bar<br>&gt;   weakerThan: Bas<br>&gt; }<br>&gt;<br>&gt; I agree with colons, but I would prefer above and below. Anyway, core<br>&gt; team will have at least one more chance to change their mind.<br>&gt;<br>&gt;<br>&gt; This is the first time I have encountered the “stronger” and “weaker”<br>&gt; terminology in this context.  I am curious about the rationale for<br>&gt; preferring those.<br>&gt;<br>&gt; FWIW, I also prefer `above` and `below`.  The terms I am most familiar<br>&gt; with in discussing precedence are “higher” and “lower” (and is the<br>&gt; vocabulary used here: https://en.wikipedia.org/wiki/Order_of_operations for<br>&gt; example).  However, as with `strongerThan` and `weakerThan`, these would<br>&gt; require `higherThan` and `lowerThan` in order to read well.   `above` and<br>&gt; `below` have a strong relationship to that common vocabulary while being<br>&gt; more concise because they do not require including a word that only serves<br>&gt; to make our code read like a phrase while offering no information.<br>&gt;<br>&gt;<br>&gt; - The proposal states that precedence groups live in a separate<br>&gt; namespace from other declarations; however, this is unprecedented in<br>&gt; Swift, and leads to significant implementation challenges. The core team<br>&gt; recommends that precedence groups exist in the same namespace as all<br>&gt; Swift declarations.<br>&gt;<br>&gt; How unfortunate. We will need to discuss naming convention and try not<br>&gt; to add too much visual clutter.<br>&gt;<br>&gt; 3. I also have a suggestion to discuss.<br>&gt;<br>&gt; Under &quot;Joining unrelated precedence groups&quot; I see an algorithm that does<br>&gt; not match anything I&#39;ve seen in network theory.<br>&gt;<br>&gt; My suggestion is to make it a warning, not an error. It will reduce the<br>&gt; pressure on the language and compilers.<br>&gt;<br>&gt; When we break down precedence hierarchy in a follow-up proposal,<br>&gt; developers will be able to use a library that will join precedence<br>&gt; groups and make their old code compile, although with warnings.<br>&gt;<br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/dbc70db8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 23, 2016 at 07:00:00pm</p></header><div class="content"><p>Has a meta-circular syntax been considered for the precedence group definitions? Aside from limiting the proliferation of new keywords, it would also make them discoverable by reflection when the api gets added in 4.0. My apologies if it was already discarded.<br>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jun 23, 2016, at 3:18 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1. I&#39;ve revised the proposal to mostly meet the recommendations.<br>&gt; <br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-<br>&gt; operator-precedence.md<br>&gt; <br>&gt; 2. My reaction to the rationale:<br>&gt; <br>&gt; precedencegroup Foo {<br>&gt;   associativity: left<br>&gt;   strongerThan: Bar<br>&gt;   weakerThan: Bas<br>&gt; }<br>&gt; <br>&gt; I agree with colons, but I would prefer above and below. Anyway, core <br>&gt; team will have at least one more chance to change their mind.<br>&gt; <br>&gt; - The proposal states that precedence groups live in a separate <br>&gt; namespace from other declarations; however, this is unprecedented in <br>&gt; Swift, and leads to significant implementation challenges. The core team <br>&gt; recommends that precedence groups exist in the same namespace as all <br>&gt; Swift declarations.<br>&gt; <br>&gt; How unfortunate. We will need to discuss naming convention and try not <br>&gt; to add too much visual clutter.<br>&gt; <br>&gt; 3. I also have a suggestion to discuss.<br>&gt; <br>&gt; Under &quot;Joining unrelated precedence groups&quot; I see an algorithm that does <br>&gt; not match anything I&#39;ve seen in network theory.<br>&gt; <br>&gt; My suggestion is to make it a warning, not an error. It will reduce the <br>&gt; pressure on the language and compilers.<br>&gt; <br>&gt; When we break down precedence hierarchy in a follow-up proposal, <br>&gt; developers will be able to use a library that will join precedence <br>&gt; groups and make their old code compile, although with warnings.<br>&gt; <br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
