<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 23, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>The Swift API guidelines state that Boolean properties should reflect assertions about the receiver, so in Swift one would expect:<br></p><p>	class Foo {<br>	  var isEnabled: Bool // good<br>	}<br></p><p>rather than<br></p><p>	class Foo {<br>	  var enabled: Bool // not Swifty<br>	}<br></p><p>When the property is @objc, e.g.,<br></p><p>	class Foo : NSObject {<br>	  @objc var isEnabled: Bool<br>	}<br></p><p>The resulting Objective-C property doesn’t follow the Cocoa guidelines for Objective-C &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;:<br></p><p>	@property (readwrite,nonatomic) BOOL isEnabled;<br></p><p>because those guidelines state that properties do not use the “is” prefix.<br></p><p>My proposal is to strip the “is” prefix from the Objective-C name, but leave it off the getter, e.g.,<br></p><p>	@property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br></p><p>The change would have no effect on the Swift name; it will only affect the Objective-C property name and setter name.<br></p><p>Thoughts?<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160223/5e2bdb2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>February 23, 2016 at 04:00:00pm</p></header><div class="content"><p>+1. This definitely matches my real-world use of boolean properties across<br>both languages.<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; |<br>jeffkelley.org<br></p><p>On Tue, Feb 23, 2016 at 4:00 PM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; The Swift API guidelines state that Boolean properties should reflect<br>&gt; assertions about the receiver, so in Swift one would expect:<br>&gt;<br>&gt; class Foo {<br>&gt;   var isEnabled: Bool // good<br>&gt; }<br>&gt;<br>&gt; rather than<br>&gt;<br>&gt; class Foo {<br>&gt;   var enabled: Bool // not Swifty<br>&gt; }<br>&gt;<br>&gt; When the property is @objc, e.g.,<br>&gt;<br>&gt; class Foo : NSObject {<br>&gt;   @objc var isEnabled: Bool<br>&gt; }<br>&gt;<br>&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines<br>&gt; for Objective-C<br>&gt; &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;<br>&gt; :<br>&gt;<br>&gt; @property (readwrite,nonatomic) BOOL isEnabled;<br>&gt;<br>&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt;<br>&gt; My proposal is to strip the “is” prefix from the Objective-C name, but<br>&gt; leave it off the getter, e.g.,<br>&gt;<br>&gt; @property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt;<br>&gt; The change would have no effect on the Swift name; it will only affect the<br>&gt; Objective-C property name and setter name.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160223/3f3f4790/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 23, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 from me.<br></p><p>&gt; On Feb 23, 2016, at 13:00, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; The Swift API guidelines state that Boolean properties should reflect assertions about the receiver, so in Swift one would expect:<br>&gt; <br>&gt; 	class Foo {<br>&gt; 	  var isEnabled: Bool // good<br>&gt; 	}<br>&gt; <br>&gt; rather than<br>&gt; <br>&gt; 	class Foo {<br>&gt; 	  var enabled: Bool // not Swifty<br>&gt; 	}<br>&gt; <br>&gt; When the property is @objc, e.g.,<br>&gt; <br>&gt; 	class Foo : NSObject {<br>&gt; 	  @objc var isEnabled: Bool<br>&gt; 	}<br>&gt; <br>&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines for Objective-C &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;:<br>&gt; <br>&gt; 	@property (readwrite,nonatomic) BOOL isEnabled;<br>&gt; <br>&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt; <br>&gt; My proposal is to strip the “is” prefix from the Objective-C name, but leave it off the getter, e.g.,<br>&gt; <br>&gt; 	@property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt; <br>&gt; The change would have no effect on the Swift name; it will only affect the Objective-C property name and setter name.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160223/c29067be/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>February 24, 2016 at 10:00:00am</p></header><div class="content"><p>+1. I’ve been dealing with this quite a lot recently. Great solution.<br></p><p>&gt; On 24 Feb 2016, at 8:00 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; The Swift API guidelines state that Boolean properties should reflect assertions about the receiver, so in Swift one would expect:<br>&gt; <br>&gt; 	class Foo {<br>&gt; 	  var isEnabled: Bool // good<br>&gt; 	}<br>&gt; <br>&gt; rather than<br>&gt; <br>&gt; 	class Foo {<br>&gt; 	  var enabled: Bool // not Swifty<br>&gt; 	}<br>&gt; <br>&gt; When the property is @objc, e.g.,<br>&gt; <br>&gt; 	class Foo : NSObject {<br>&gt; 	  @objc var isEnabled: Bool<br>&gt; 	}<br>&gt; <br>&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines for Objective-C &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;:<br>&gt; <br>&gt; 	@property (readwrite,nonatomic) BOOL isEnabled;<br>&gt; <br>&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt; <br>&gt; My proposal is to strip the “is” prefix from the Objective-C name, but leave it off the getter, e.g.,<br>&gt; <br>&gt; 	@property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt; <br>&gt; The change would have no effect on the Swift name; it will only affect the Objective-C property name and setter name.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/ae6fc537/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 24, 2016 at 09:00:00am</p></header><div class="content"><p>Seems like an easy win, so I’m leaning towards a +1.<br></p><p>OTOH, are there any other cases where Swift -&gt; ObjC automatically changes names of things to optimize for ObjC? If we don’t do more of that (the &#39;&quot;Add needless words&quot; to Objective-C method names’ thread, or other quick wins like this one), it would be weird to make just this one exception, a single special case. I fear this would be more surprising than not changing anything at all.<br></p><p>— Radek<br></p><p>&gt; On 23 Feb 2016, at 22:00, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; The Swift API guidelines state that Boolean properties should reflect assertions about the receiver, so in Swift one would expect:<br>&gt; <br>&gt; 	class Foo {<br>&gt; 	  var isEnabled: Bool // good<br>&gt; 	}<br>&gt; <br>&gt; rather than<br>&gt; <br>&gt; 	class Foo {<br>&gt; 	  var enabled: Bool // not Swifty<br>&gt; 	}<br>&gt; <br>&gt; When the property is @objc, e.g.,<br>&gt; <br>&gt; 	class Foo : NSObject {<br>&gt; 	  @objc var isEnabled: Bool<br>&gt; 	}<br>&gt; <br>&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines for Objective-C &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;:<br>&gt; <br>&gt; 	@property (readwrite,nonatomic) BOOL isEnabled;<br>&gt; <br>&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt; <br>&gt; My proposal is to strip the “is” prefix from the Objective-C name, but leave it off the getter, e.g.,<br>&gt; <br>&gt; 	@property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt; <br>&gt; The change would have no effect on the Swift name; it will only affect the Objective-C property name and setter name.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/b58ea662/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/74b2be3f33e2efebef65c9a48c32872a?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Angelo Villegas</string> &lt;gelo.web at gmail.com&gt;<p>February 24, 2016 at 08:00:00am</p></header><div class="content"><p>Initialising a getter for a Boolean property is the default behaviour so a<br>+1 vote from me.<br></p><p><br>- Angelo<br></p><p>On Wed, 24 Feb 2016 at 4:43 PM Radosław Pietruszewski &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Seems like an easy win, so I’m leaning towards a +1.<br>&gt;<br>&gt; OTOH, are there any other cases where Swift -&gt; ObjC automatically changes<br>&gt; names of things to optimize for ObjC? If we don’t do more of that (the &#39;&quot;Add<br>&gt; needless words&quot; to Objective-C method names’ thread, or other quick wins<br>&gt; like this one), it would be weird to make just this one exception, a single<br>&gt; special case. I fear this would be more surprising than not changing<br>&gt; anything at all.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 23 Feb 2016, at 22:00, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; The Swift API guidelines state that Boolean properties should reflect<br>&gt; assertions about the receiver, so in Swift one would expect:<br>&gt;<br>&gt; class Foo {<br>&gt;   var isEnabled: Bool // good<br>&gt; }<br>&gt;<br>&gt; rather than<br>&gt;<br>&gt; class Foo {<br>&gt;   var enabled: Bool // not Swifty<br>&gt; }<br>&gt;<br>&gt; When the property is @objc, e.g.,<br>&gt;<br>&gt; class Foo : NSObject {<br>&gt;   @objc var isEnabled: Bool<br>&gt; }<br>&gt;<br>&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines<br>&gt; for Objective-C<br>&gt; &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;<br>&gt; :<br>&gt;<br>&gt; @property (readwrite,nonatomic) BOOL isEnabled;<br>&gt;<br>&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt;<br>&gt; My proposal is to strip the “is” prefix from the Objective-C name, but<br>&gt; leave it off the getter, e.g.,<br>&gt;<br>&gt; @property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt;<br>&gt; The change would have no effect on the Swift name; it will only affect the<br>&gt; Objective-C property name and setter name.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/b15cf3f4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 24, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 24, 2016, at 12:36 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; Seems like an easy win, so I’m leaning towards a +1.<br>&gt; <br>&gt; OTOH, are there any other cases where Swift -&gt; ObjC automatically changes names of things to optimize for ObjC? If we don’t do more of that (the &#39;&quot;Add needless words&quot; to Objective-C method names’ thread, or other quick wins like this one), it would be weird to make just this one exception, a single special case. I fear this would be more surprising than not changing anything at all.<br></p><p>We do a bunch of this already. We join the first argument label to the base name to form the first selector piece, inserting “with” if there’s no preposition in between already, and for throwing methods we either add “error:” in the appropriate place or append “AndReturnError” to the first selector piece if there are no other parameters.<br></p><p>	- Doug<br></p><p><br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 23 Feb 2016, at 22:00, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; The Swift API guidelines state that Boolean properties should reflect assertions about the receiver, so in Swift one would expect:<br>&gt;&gt; <br>&gt;&gt; 	class Foo {<br>&gt;&gt; 	  var isEnabled: Bool // good<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; rather than<br>&gt;&gt; <br>&gt;&gt; 	class Foo {<br>&gt;&gt; 	  var enabled: Bool // not Swifty<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; When the property is @objc, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	class Foo : NSObject {<br>&gt;&gt; 	  @objc var isEnabled: Bool<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines for Objective-C &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;:<br>&gt;&gt; <br>&gt;&gt; 	@property (readwrite,nonatomic) BOOL isEnabled;<br>&gt;&gt; <br>&gt;&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt;&gt; <br>&gt;&gt; My proposal is to strip the “is” prefix from the Objective-C name, but leave it off the getter, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	@property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt;&gt; <br>&gt;&gt; The change would have no effect on the Swift name; it will only affect the Objective-C property name and setter name.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/3745797a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Ah, didn’t realize this.<br></p><p>+1 then.<br></p><p>— Radek<br></p><p>&gt; On 24 Feb 2016, at 17:31, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 24, 2016, at 12:36 AM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Seems like an easy win, so I’m leaning towards a +1.<br>&gt;&gt; <br>&gt;&gt; OTOH, are there any other cases where Swift -&gt; ObjC automatically changes names of things to optimize for ObjC? If we don’t do more of that (the &#39;&quot;Add needless words&quot; to Objective-C method names’ thread, or other quick wins like this one), it would be weird to make just this one exception, a single special case. I fear this would be more surprising than not changing anything at all.<br>&gt; <br>&gt; We do a bunch of this already. We join the first argument label to the base name to form the first selector piece, inserting “with” if there’s no preposition in between already, and for throwing methods we either add “error:” in the appropriate place or append “AndReturnError” to the first selector piece if there are no other parameters.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 23 Feb 2016, at 22:00, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The Swift API guidelines state that Boolean properties should reflect assertions about the receiver, so in Swift one would expect:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	class Foo {<br>&gt;&gt;&gt; 	  var isEnabled: Bool // good<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; rather than<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	class Foo {<br>&gt;&gt;&gt; 	  var enabled: Bool // not Swifty<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When the property is @objc, e.g.,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	class Foo : NSObject {<br>&gt;&gt;&gt; 	  @objc var isEnabled: Bool<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines for Objective-C &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	@property (readwrite,nonatomic) BOOL isEnabled;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My proposal is to strip the “is” prefix from the Objective-C name, but leave it off the getter, e.g.,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	@property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The change would have no effect on the Swift name; it will only affect the Objective-C property name and setter name.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/77fefb94/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Idea] Make Boolean @objc properties reflect better into Objective-C</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 24, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br></p><p>On Wed, Feb 24, 2016 at 11:45 AM, Radosław Pietruszewski &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Ah, didn’t realize this.<br>&gt;<br>&gt; +1 then.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 24 Feb 2016, at 17:31, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Feb 24, 2016, at 12:36 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Seems like an easy win, so I’m leaning towards a +1.<br>&gt;<br>&gt; OTOH, are there any other cases where Swift -&gt; ObjC automatically changes<br>&gt; names of things to optimize for ObjC? If we don’t do more of that (the &#39;&quot;Add<br>&gt; needless words&quot; to Objective-C method names’ thread, or other quick wins<br>&gt; like this one), it would be weird to make just this one exception, a single<br>&gt; special case. I fear this would be more surprising than not changing<br>&gt; anything at all.<br>&gt;<br>&gt;<br>&gt; We do a bunch of this already. We join the first argument label to the<br>&gt; base name to form the first selector piece, inserting “with” if there’s no<br>&gt; preposition in between already, and for throwing methods we either add<br>&gt; “error:” in the appropriate place or append “AndReturnError” to the first<br>&gt; selector piece if there are no other parameters.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 23 Feb 2016, at 22:00, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; The Swift API guidelines state that Boolean properties should reflect<br>&gt; assertions about the receiver, so in Swift one would expect:<br>&gt;<br>&gt; class Foo {<br>&gt;   var isEnabled: Bool // good<br>&gt; }<br>&gt;<br>&gt; rather than<br>&gt;<br>&gt; class Foo {<br>&gt;   var enabled: Bool // not Swifty<br>&gt; }<br>&gt;<br>&gt; When the property is @objc, e.g.,<br>&gt;<br>&gt; class Foo : NSObject {<br>&gt;   @objc var isEnabled: Bool<br>&gt; }<br>&gt;<br>&gt; The resulting Objective-C property doesn’t follow the Cocoa guidelines<br>&gt; for Objective-C<br>&gt; &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE&gt;<br>&gt; :<br>&gt;<br>&gt; @property (readwrite,nonatomic) BOOL isEnabled;<br>&gt;<br>&gt; because those guidelines state that properties do not use the “is” prefix.<br>&gt;<br>&gt; My proposal is to strip the “is” prefix from the Objective-C name, but<br>&gt; leave it off the getter, e.g.,<br>&gt;<br>&gt; @property (readwrite,nonatomic,getter=isEnabled) BOOL enabled;<br>&gt;<br>&gt; The change would have no effect on the Swift name; it will only affect the<br>&gt; Objective-C property name and setter name.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/9f6bc65f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
