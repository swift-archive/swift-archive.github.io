<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; Do you mean *sorted*(by:) ? Or I&#39;m missing something in naming rules?<br></p><p>IIRC, sort is mutating and sorted is nonmutating (copying) version.<br>Also, I forgot `initial` parameter in `reduce`.<br></p><p>&gt; &gt; Data flow is an area where code becomes the less understandable when<br>&gt; &gt; more visual clutter is added. In my opinion,<br>&gt; &gt;<br>&gt; &gt; array.filter(isEven).map(square).reduce(sum)<br>&gt; &gt;<br>&gt; &gt; reads better than<br>&gt; &gt;<br>&gt; &gt; array.filter(suchThatTrue: isEven).map(applyingTransformation:<br>&gt; &gt; square).reduce(accumulatingResultBy: sum)<br>&gt; &gt;<br>&gt; &gt; What do you think?<br>&gt; <br>&gt; +100. I even want to brought the term-of-art argument here. IMO These <br>&gt; functions are expected to be called without any parameter names.<br></p><p>That would probably be a good scenario, but core team needs to release <br>their grip on strictly following new naming conventions.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 4:11 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt; <br>&gt;&gt; Do you mean *sorted*(by:) ? Or I&#39;m missing something in naming rules?<br>&gt; <br>&gt; IIRC, sort is mutating and sorted is nonmutating (copying) version.<br>&gt; Also, I forgot `initial` parameter in `reduce`.<br>&gt; <br>&gt;&gt;&gt; Data flow is an area where code becomes the less understandable when<br>&gt;&gt;&gt; more visual clutter is added. In my opinion,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; array.filter(isEven).map(square).reduce(sum)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; reads better than<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; array.filter(suchThatTrue: isEven).map(applyingTransformation:<br>&gt;&gt;&gt; square).reduce(accumulatingResultBy: sum)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you think?<br>&gt;&gt; <br>&gt;&gt; +100. I even want to brought the term-of-art argument here. IMO These <br>&gt;&gt; functions are expected to be called without any parameter names.<br>&gt; <br>&gt; That would probably be a good scenario, but core team needs to release <br>&gt; their grip on strictly following new naming conventions.<br></p><p>I know it might not exactly by the naming conventions, but have you considered<br></p><p>filter(predicate:) // Though it might get confused with (NS)Predicate?<br>map(transform:)<br>reduce(accumulator:)<br></p><p>All of this may be extended to follow the convetions:<br></p><p>filter(usingPredicate:)<br>map(usingTransform:)<br>reduce(usingAccumulator:) // or applyingAccumulator?<br></p><p>But I agree the label-less argument here reads best.<br></p><p><br></p><p>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>June 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 24 Jun 2016, at 16:26, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 24, 2016, at 4:11 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;&gt; <br>&gt;&gt;&gt; Do you mean *sorted*(by:) ? Or I&#39;m missing something in naming rules?<br>&gt;&gt; <br>&gt;&gt; IIRC, sort is mutating and sorted is nonmutating (copying) version.<br>&gt;&gt; Also, I forgot `initial` parameter in `reduce`.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Data flow is an area where code becomes the less understandable when<br>&gt;&gt;&gt;&gt; more visual clutter is added. In my opinion,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; array.filter(isEven).map(square).reduce(sum)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; reads better than<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; array.filter(suchThatTrue: isEven).map(applyingTransformation:<br>&gt;&gt;&gt;&gt; square).reduce(accumulatingResultBy: sum)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What do you think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +100. I even want to brought the term-of-art argument here. IMO These <br>&gt;&gt;&gt; functions are expected to be called without any parameter names.<br>&gt;&gt; <br>&gt;&gt; That would probably be a good scenario, but core team needs to release <br>&gt;&gt; their grip on strictly following new naming conventions.<br>&gt; <br>&gt; I know it might not exactly by the naming conventions, but have you considered<br>&gt; <br>&gt; filter(predicate:) // Though it might get confused with (NS)Predicate?<br>&gt; map(transform:)<br>&gt; reduce(accumulator:)<br>&gt; <br>&gt; All of this may be extended to follow the convetions:<br>&gt; <br>&gt; filter(usingPredicate:)<br>&gt; map(usingTransform:)<br>&gt; reduce(usingAccumulator:) // or applyingAccumulator?<br>&gt; <br>&gt; But I agree the label-less argument here reads best.<br>&gt; <br></p><p>Depending on how the API Guidelines (specifically about “omit needless words”) is read and if one considers a function (A) -&gt; Bool to be a predicate and a function (A) -&gt; B to be a transform, then the argument could be made that the words “predicate” and “transform” should be omitted. This only leaves the label “using” in both these cases (which I find to be too general and not very descriptive). <br></p><p>- David <br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/f86fcd38/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
