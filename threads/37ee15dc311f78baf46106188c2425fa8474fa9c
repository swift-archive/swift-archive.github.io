<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>​Swift Evolution ​Community,<br></p><p>Currently writing an infinite loop in swift looks either something like<br>this:<br></p><p>    while true {<br>        if ... { break }<br>        //...<br>    }<br></p><p>Or this:<br></p><p>    repeat {<br>        if ... { break }<br>        //...<br>    } while true<br></p><p>But I think it might be best to change the syntax / behaviour of `repeat`<br>to loop<br>indefinitely if no trailing while clause is present:<br></p><p>    repeat {<br>        if ... { break }<br>        //...<br>    }<br></p><p>while still allowing a trailing `while` clause as in:<br></p><p>    repeat {<br>        foo += bar<br>    } while foo.count &lt; limit<br></p><p>I also want to propose that it should be a compile time error to use single<br>`Bool` constants as while loop conditions, so no more `while true { ... }`<br>it would become `repeat { ... }`<br></p><p>I was thinking of drafting a short proposal if there was enough positive<br>feedback.<br></p><p>How does it sound?<br></p><p>- Nick<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/37eefa9c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 02:00:00am</p></header><div class="content"><p>On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; ​Swift Evolution ​Community,<br>&gt;<br>&gt; Currently writing an infinite loop in swift looks either something like<br>&gt; this:<br>&gt;<br>&gt;     while true {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt;<br>&gt; Or this:<br>&gt;<br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     } while true<br>&gt;<br>&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt; to loop<br>&gt; indefinitely if no trailing while clause is present:<br>&gt;<br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt;<br>&gt; while still allowing a trailing `while` clause as in:<br>&gt;<br>&gt;     repeat {<br>&gt;         foo += bar<br>&gt;     } while foo.count &lt; limit<br>&gt;<br></p><p>What is your motivation for this change?<br></p><p><br>&gt; I also want to propose that it should be a compile time error to use<br>&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt; ... }` it would become `repeat { ... }`<br>&gt;<br></p><p>What problems are solved by forbidding `while true`?<br></p><p><br>&gt; I was thinking of drafting a short proposal if there was enough positive<br>&gt; feedback.<br>&gt;<br>&gt; How does it sound?<br>&gt;<br>&gt; - Nick<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f1355fb4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 10, 2016, at 12:39 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; ​Swift Evolution ​Community,<br>&gt; <br>&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt; <br>&gt;     while true {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt; <br>&gt; Or this:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     } while true<br>&gt; <br>&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt; indefinitely if no trailing while clause is present:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt; <br>&gt; while still allowing a trailing `while` clause as in:<br>&gt; <br>&gt;     repeat { <br>&gt;         foo += bar<br>&gt;     } while foo.count &lt; limit <br>&gt;  <br>&gt; What is your motivation for this change?<br>&gt;  <br>&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt; <br>&gt; What problems are solved by forbidding `while true`?<br></p><p>I don’t think the proposal is forbidding it, but rather making it optional. So that <br></p><p>repeat {<br></p><p>} <br></p><p>is equivalent to <br></p><p>repeat {<br></p><p>} while true<br></p><p>&gt;  <br>&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt; <br>&gt; How does it sound?<br>&gt; <br>&gt; - Nick <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/b50c75d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 07:00:00pm</p></header><div class="content"><p>Nicholas wrote that he would like `while true` to be a compile-time error.<br>I&#39;m curious as to why.<br></p><p>On Tue, May 10, 2016 at 13:47 Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br></p><p>&gt; On May 10, 2016, at 12:39 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;<br>&gt;&gt; Currently writing an infinite loop in swift looks either something like<br>&gt;&gt; this:<br>&gt;&gt;<br>&gt;&gt;     while true {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; Or this:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     } while true<br>&gt;&gt;<br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt;&gt; to loop<br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         foo += bar<br>&gt;&gt;     } while foo.count &lt; limit<br>&gt;&gt;<br>&gt;<br>&gt; What is your motivation for this change?<br>&gt;<br>&gt;<br>&gt;&gt; I also want to propose that it should be a compile time error to use<br>&gt;&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt;&gt; ... }` it would become `repeat { ... }`<br>&gt;&gt;<br>&gt;<br>&gt; What problems are solved by forbidding `while true`?<br>&gt;<br>&gt;<br>&gt; I don’t think the proposal is forbidding it, but rather making it<br>&gt; optional. So that<br>&gt;<br>&gt; repeat {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; is equivalent to<br>&gt;<br>&gt; repeat {<br>&gt;<br>&gt; } while true<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; I was thinking of drafting a short proposal if there was enough positive<br>&gt;&gt; feedback.<br>&gt;&gt;<br>&gt;&gt; How does it sound?<br>&gt;&gt;<br>&gt;&gt; - Nick<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/4b444b5b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>As am I. I like that the while clause can be optional, but I don&#39;t see the point of banning &quot;while true&quot;.<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 10, 2016, at 14:10, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Nicholas wrote that he would like `while true` to be a compile-time error. I&#39;m curious as to why.<br>&gt; <br>&gt; On Tue, May 10, 2016 at 13:47 Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 12:39 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; What is your motivation for this change?<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What problems are solved by forbidding `while true`?<br>&gt;&gt; <br>&gt;&gt; I don’t think the proposal is forbidding it, but rather making it optional. So that <br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; <br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; is equivalent to <br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; <br>&gt;&gt; } while true<br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/41ae8093/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Oh you are right, I totally missed that, thanks.<br></p><p>&gt; On May 10, 2016, at 12:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Nicholas wrote that he would like `while true` to be a compile-time error. I&#39;m curious as to why.<br>&gt; <br>&gt; On Tue, May 10, 2016 at 13:47 Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 12:39 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Swift Evolution Community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; What is your motivation for this change?<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What problems are solved by forbidding `while true`?<br>&gt;&gt; <br>&gt;&gt; I don’t think the proposal is forbidding it, but rather making it optional. So that <br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; <br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; is equivalent to <br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; <br>&gt;&gt; } while true<br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/2698f7e2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 10, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 10 May 2016, at 08:27, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt; indefinitely if no trailing while clause is present:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br></p><p>-1 from me on both counts; the thing I like about while true is that it’s explicit about what I meant, whereas a repeat block with no while clause is indistinguishable from me forgetting to include one, or me wanting an infinite loop.<br></p><p>An alternative could be to add a new “forever” keyword or something similar, replacing while true wherever applicable, but personally I don’t think it’s that important.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/d5cf64db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Agreed. I&#39;m not convinced that this actually prevents any more errors than<br>it might cause (forgot to finish writing my &quot;repeat&quot; block, and now my app<br>is unresponsive), and I don&#39;t think there&#39;s enough of an expressivity win<br>to add another keyword.<br></p><p>Austin<br></p><p>On Tue, May 10, 2016 at 1:04 PM, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 10 May 2016, at 08:27, Nicholas Maccharoli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt; to loop<br>&gt; indefinitely if no trailing while clause is present:<br>&gt;<br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt;<br>&gt;<br>&gt; -1 from me on both counts; the thing I like about while true is that it’s<br>&gt; explicit about what I meant, whereas a repeat block with no while clause is<br>&gt; indistinguishable from me forgetting to include one, or me wanting an<br>&gt; infinite loop.<br>&gt;<br>&gt; An alternative could be to add a new “forever” keyword or something<br>&gt; similar, replacing while true wherever applicable, but personally I don’t<br>&gt; think it’s that important.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/ba7c275a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 1:10 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Agreed. I&#39;m not convinced that this actually prevents any more errors than it might cause (forgot to finish writing my &quot;repeat&quot; block, and now my app is unresponsive), and I don&#39;t think there&#39;s enough of an expressivity win to add another keyword.<br></p><p>Certainly it’s not adding a new keyword, however it is changing the meaning of a keyword.<br></p><p>&gt; <br>&gt; Austin<br>&gt; <br>&gt; On Tue, May 10, 2016 at 1:04 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On 10 May 2016, at 08:27, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt; <br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt; <br>&gt; -1 from me on both counts; the thing I like about while true is that it’s explicit about what I meant, whereas a repeat block with no while clause is indistinguishable from me forgetting to include one, or me wanting an infinite loop.<br>&gt; <br>&gt; An alternative could be to add a new “forever” keyword or something similar, replacing while true wherever applicable, but personally I don’t think it’s that important.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f5a01d69/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Sorry, I was trying to quote Haravikk but I didn&#39;t do it very clearly.<br></p><p>Austin<br></p><p>On Tue, May 10, 2016 at 1:32 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 10, 2016, at 1:10 PM, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Agreed. I&#39;m not convinced that this actually prevents any more errors than<br>&gt; it might cause (forgot to finish writing my &quot;repeat&quot; block, and now my app<br>&gt; is unresponsive), and I don&#39;t think there&#39;s enough of an expressivity win<br>&gt; to add another keyword.<br>&gt;<br>&gt;<br>&gt; Certainly it’s not adding a new keyword, however it is changing the<br>&gt; meaning of a keyword.<br>&gt;<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt; On Tue, May 10, 2016 at 1:04 PM, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On 10 May 2016, at 08:27, Nicholas Maccharoli via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt;&gt; to loop<br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -1 from me on both counts; the thing I like about while true is that it’s<br>&gt;&gt; explicit about what I meant, whereas a repeat block with no while clause is<br>&gt;&gt; indistinguishable from me forgetting to include one, or me wanting an<br>&gt;&gt; infinite loop.<br>&gt;&gt;<br>&gt;&gt; An alternative could be to add a new “forever” keyword or something<br>&gt;&gt; similar, replacing while true wherever applicable, but personally I don’t<br>&gt;&gt; think it’s that important.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/4d3ef421/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br></p><p>I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>always refreshing to see innovative thoughts added to the discussion. Please do not be <br>discouraged by the generally negative feedback on this particular idea.<br></p><p>-- Erica<br></p><p>&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ​Swift Evolution ​Community,<br>&gt; <br>&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt; <br>&gt;     while true {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt; <br>&gt; Or this:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     } while true<br>&gt; <br>&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt; indefinitely if no trailing while clause is present:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt; <br>&gt; while still allowing a trailing `while` clause as in:<br>&gt; <br>&gt;     repeat { <br>&gt;         foo += bar<br>&gt;     } while foo.count &lt; limit <br>&gt; <br>&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt; <br>&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt; <br>&gt; How does it sound?<br>&gt; <br>&gt; - Nick <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/dd7b0a3e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br></p><p>Firstly it reduces clutter and makes it very clear that the the code is just supposed to repeat. <br>Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br></p><p>I also think the concern that an accidental infinite loop is any greater than it is currently.<br></p><p>Tyler<br></p><p><br></p><p>&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt; <br>&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt; <br>&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt; <br>&gt;&gt;     while true {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Or this:<br>&gt;&gt; <br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     } while true<br>&gt;&gt; <br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt; <br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt; <br>&gt;&gt;     repeat { <br>&gt;&gt;         foo += bar<br>&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt; <br>&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt; <br>&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt; <br>&gt;&gt; How does it sound?<br>&gt;&gt; <br>&gt;&gt; - Nick <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/a129485d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>May 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br></p><p>This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 1:34 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt; <br>&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br></p><p>That is a fair point, but it’s probably a good way of illustrating other ways of exiting a loop, without having the complication of a while condition.<br></p><p>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d128cffeaf768e0ad7c47488aaa95f13?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Dominik Pich</string> &lt;dominik at pich.info&gt;<p>May 10, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt; <br>&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>totally agree… it would be a bad first introduction, id say :)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>May 10, 2016 at 11:00:00pm</p></header><div class="content"><p>When I need a loop with complex control flow that does not fit into the classical while {} or repeat {} while structure, I use this:<br></p><p>do_stuff: do {<br>  …<br>  continue do_stuff<br>} <br></p><p>This pattern explicit and allows very complex control flow patterns without the drawbacks of the unrestricted goto construct. <br></p><p>Therefore I don’t see utility with having a repeat {} without while clause. <br></p><p>Best, <br></p><p> Taras<br></p><p><br>&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt; <br>&gt;&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>The proposed `repeat { }` is identical to `while true { }`. One of these<br>can happen accidentally because a trailing clause was unintentionally<br>omitted, while the other cannot. One of these currently exists in the<br>language, while the other does not. What is the motivation for having a new<br>way of doing the same thing? I have not seen an answer.<br></p><p><br>On Tue, May 10, 2016 at 4:05 PM, Taras Zakharko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; When I need a loop with complex control flow that does not fit into the<br>&gt; classical while {} or repeat {} while structure, I use this:<br>&gt;<br>&gt; do_stuff: do {<br>&gt;   …<br>&gt;   continue do_stuff<br>&gt; }<br>&gt;<br>&gt; This pattern explicit and allows very complex control flow patterns<br>&gt; without the drawbacks of the unrestricted goto construct.<br>&gt;<br>&gt; Therefore I don’t see utility with having a repeat {} without while clause.<br>&gt;<br>&gt; Best,<br>&gt;<br>&gt;  Taras<br>&gt;<br>&gt;<br>&gt; &gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to<br>&gt; loops. It’s IMHO more clear to a new programmer that repeat will just<br>&gt; repeat indefinitely vs while true.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This point seems strange to me - why teach a new programmer about loops<br>&gt; by first showing them a looping construct they should probably never use in<br>&gt; actual practice until they really know what they’re doing?<br>&gt; &gt; totally agree… it would be a bad first introduction, id say :)<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/29c21181/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>You could always do your control flow with goto’s anyway…<br></p><p>func foo() {<br>  var i = 0<br>  func goto(_ label: String = &quot;entry&quot;) {<br>    switch label {<br>    case &quot;entry&quot;:<br>      print(&quot;beginning loop…&quot;)<br>      goto(&quot;cond&quot;)<br>    case &quot;cond&quot;:<br>      goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>    case &quot;body&quot;:<br>      i += 1<br>      print(&quot;\(i)&quot;)<br>      goto(&quot;cond&quot;)<br>    case &quot;end&quot;:<br>      break<br>    default: break<br>    }<br>  }<br>  goto()<br>}<br></p><p>Apologies,<br>Harlan<br></p><p>&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; When I need a loop with complex control flow that does not fit into the classical while {} or repeat {} while structure, I use this:<br>&gt; <br>&gt; do_stuff: do {<br>&gt;  …<br>&gt;  continue do_stuff<br>&gt; } <br>&gt; <br>&gt; This pattern explicit and allows very complex control flow patterns without the drawbacks of the unrestricted goto construct. <br>&gt; <br>&gt; Therefore I don’t see utility with having a repeat {} without while clause. <br>&gt; <br>&gt; Best, <br>&gt; <br>&gt; Taras<br>&gt; <br>&gt; <br>&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/c5f4b132/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You could always do your control flow with goto’s anyway…<br>&gt; <br>&gt; func foo() {<br>&gt;   var i = 0<br>&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;     switch label {<br>&gt;     case &quot;entry&quot;:<br>&gt;       print(&quot;beginning loop…&quot;)<br>&gt;       goto(&quot;cond&quot;)<br>&gt;     case &quot;cond&quot;:<br>&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;     case &quot;body&quot;:<br>&gt;       i += 1<br>&gt;       print(&quot;\(i)&quot;)<br>&gt;       goto(&quot;cond&quot;)<br>&gt;     case &quot;end&quot;:<br>&gt;       break<br>&gt;     default: break<br>&gt;     }<br>&gt;   }<br>&gt;   goto()<br>&gt; }<br>&gt; <br>&gt; Apologies,<br>&gt; Harlan<br></p><p><br>And isn’t this the point really. Yes there are many different ways of doing something, but there should be one obvious way. IMHO, there is nothing more obvious than just <br></p><p>repeat {<br></p><p>}<br></p><p>It’s very clear. It’s not about adding complex control flow, it’s about simplifying current syntax. I don’t think anyone is arguing that it’s more powerful than what while loops currently offer.<br></p><p><br>&gt; <br>&gt;&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; When I need a loop with complex control flow that does not fit into the classical while {} or repeat {} while structure, I use this:<br>&gt;&gt; <br>&gt;&gt; do_stuff: do {<br>&gt;&gt;  …<br>&gt;&gt;  continue do_stuff<br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; This pattern explicit and allows very complex control flow patterns without the drawbacks of the unrestricted goto construct. <br>&gt;&gt; <br>&gt;&gt; Therefore I don’t see utility with having a repeat {} without while clause. <br>&gt;&gt; <br>&gt;&gt; Best, <br>&gt;&gt; <br>&gt;&gt; Taras<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>&gt;&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/502ddc00/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 09:00:00pm</p></header><div class="content"><p>I think, on the contrary, it&#39;s missing the point utterly. It&#39;s up to those<br>proposing a new feature to justify its addition in light of what&#39;s already<br>here, and it&#39;s up to those proposing the removal of a feature to justify<br>why it should be removed.<br></p><p>Certainly no one is proposing the removal of the while loop. Currently, the<br>One Obvious Way of making an infinite loop is `while true`, and it is up to<br>the proponents to advance a reason why a replacement would be superior. I<br>cannot think of a greater non-sequitur than supplying a demonstration of<br>why while loops are useful.<br>On Tue, May 10, 2016 at 16:27 Tyler Cloutier via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; You could always do your control flow with goto’s anyway…<br>&gt;<br>&gt; func foo() {<br>&gt;   var i = 0<br>&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;     switch label {<br>&gt;     case &quot;entry&quot;:<br>&gt;       print(&quot;beginning loop…&quot;)<br>&gt;       goto(&quot;cond&quot;)<br>&gt;     case &quot;cond&quot;:<br>&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;     case &quot;body&quot;:<br>&gt;       i += 1<br>&gt;       print(&quot;\(i)&quot;)<br>&gt;       goto(&quot;cond&quot;)<br>&gt;     case &quot;end&quot;:<br>&gt;       break<br>&gt;     default: break<br>&gt;     }<br>&gt;   }<br>&gt;   goto()<br>&gt; }<br>&gt;<br>&gt; Apologies,<br>&gt; Harlan<br>&gt;<br>&gt;<br>&gt;<br>&gt; And isn’t this the point really. Yes there are many different ways of<br>&gt; doing something, but there should be one obvious way. IMHO, there is<br>&gt; nothing more obvious than just<br>&gt;<br>&gt; repeat {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; It’s very clear. It’s not about adding complex control flow, it’s about<br>&gt; simplifying current syntax. I don’t think anyone is arguing that it’s more<br>&gt; powerful than what while loops currently offer.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; When I need a loop with complex control flow that does not fit into the<br>&gt; classical while {} or repeat {} while structure, I use this:<br>&gt;<br>&gt; do_stuff: do {<br>&gt;  …<br>&gt;  continue do_stuff<br>&gt; }<br>&gt;<br>&gt; This pattern explicit and allows very complex control flow patterns<br>&gt; without the drawbacks of the unrestricted goto construct.<br>&gt;<br>&gt; Therefore I don’t see utility with having a repeat {} without while<br>&gt; clause.<br>&gt;<br>&gt; Best,<br>&gt;<br>&gt; Taras<br>&gt;<br>&gt;<br>&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Secondly it’s a very simple way of introducing new programmers to loops.<br>&gt; It’s IMHO more clear to a new programmer that repeat will just repeat<br>&gt; indefinitely vs while true.<br>&gt;<br>&gt;<br>&gt; This point seems strange to me - why teach a new programmer about loops by<br>&gt; first showing them a looping construct they should probably never use in<br>&gt; actual practice until they really know what they’re doing?<br>&gt;<br>&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/d632c874/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 2:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I think, on the contrary, it&#39;s missing the point utterly. It&#39;s up to those proposing a new feature to justify its addition in light of what&#39;s already here, and it&#39;s up to those proposing the removal of a feature to justify why it should be removed.<br>&gt; <br>&gt; Certainly no one is proposing the removal of the while loop. Currently, the One Obvious Way of making an infinite loop is `while true`, and it is up to the proponents to advance a reason why a replacement would be superior. I cannot think of a greater non-sequitur than supplying a demonstration of why while loops are useful.<br></p><p>That’s what I am saying. No one is supplying a demonstration of why while loops are useful and that suggestion is a straw man. My point below that simple and clear syntax is an improvement on syntax with more noise.<br></p><p>repeat {<br>	// code<br>}<br></p><p>vs<br></p><p>repeat {<br>	// code<br>} while true<br></p><p>The reason that the former is superior to the latter is that, given repeat is already part of the language, the former it is simpler, with less noise. It reads like simple english. It also aligns well with current do {} syntax. This is the only argument I’m offering, and I think it’s the only one that could be offered for such a small syntax change given that it *only* serves to clarify and reduce noise of current syntax which has the same functionality.<br></p><p><br>&gt; On Tue, May 10, 2016 at 16:27 Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You could always do your control flow with goto’s anyway…<br>&gt;&gt; <br>&gt;&gt; func foo() {<br>&gt;&gt;   var i = 0<br>&gt;&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;&gt;     switch label {<br>&gt;&gt;     case &quot;entry&quot;:<br>&gt;&gt;       print(&quot;beginning loop…&quot;)<br>&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;     case &quot;cond&quot;:<br>&gt;&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;&gt;     case &quot;body&quot;:<br>&gt;&gt;       i += 1<br>&gt;&gt;       print(&quot;\(i)&quot;)<br>&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;     case &quot;end&quot;:<br>&gt;&gt;       break<br>&gt;&gt;     default: break<br>&gt;&gt;     }<br>&gt;&gt;   }<br>&gt;&gt;   goto()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Apologies,<br>&gt;&gt; Harlan<br>&gt; <br>&gt; <br>&gt; And isn’t this the point really. Yes there are many different ways of doing something, but there should be one obvious way. IMHO, there is nothing more obvious than just <br>&gt; <br>&gt; repeat {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; It’s very clear. It’s not about adding complex control flow, it’s about simplifying current syntax. I don’t think anyone is arguing that it’s more powerful than what while loops currently offer.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When I need a loop with complex control flow that does not fit into the classical while {} or repeat {} while structure, I use this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; do_stuff: do {<br>&gt;&gt;&gt;  …<br>&gt;&gt;&gt;  continue do_stuff<br>&gt;&gt;&gt; } <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This pattern explicit and allows very complex control flow patterns without the drawbacks of the unrestricted goto construct. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Therefore I don’t see utility with having a repeat {} without while clause. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best, <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Taras<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>&gt;&gt;&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/a2f8225a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 4:46 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 10, 2016, at 2:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; I think, on the contrary, it&#39;s missing the point utterly. It&#39;s up to those<br>&gt; proposing a new feature to justify its addition in light of what&#39;s already<br>&gt; here, and it&#39;s up to those proposing the removal of a feature to justify<br>&gt; why it should be removed.<br>&gt;<br>&gt; Certainly no one is proposing the removal of the while loop. Currently,<br>&gt; the One Obvious Way of making an infinite loop is `while true`, and it is<br>&gt; up to the proponents to advance a reason why a replacement would be<br>&gt; superior. I cannot think of a greater non-sequitur than supplying a<br>&gt; demonstration of why while loops are useful.<br>&gt;<br>&gt;<br>&gt; That’s what I am saying. No one is supplying a demonstration of why while<br>&gt; loops are useful and that suggestion is a straw man.<br>&gt;<br></p><p>That was not meant to be a straw man, not on my part. It is my<br>understanding of Harlan&#39;s example. It shows that, without while loops, it<br>is unwieldy to express the same thing using goto statements. That is fine,<br>but it is not at all on point for this discussion.<br></p><p><br>&gt; My point below that simple and clear syntax is an improvement on syntax<br>&gt; with more noise.<br>&gt;<br>&gt; repeat {<br>&gt; // code<br>&gt; }<br>&gt;<br>&gt; vs<br>&gt;<br>&gt; repeat {<br>&gt; // code<br>&gt; } while true<br>&gt;<br></p><p>What&#39;s wrong with `while true { }` ?<br></p><p>The reason that the former is superior to the latter is that, given repeat<br>&gt; is already part of the language, the former it is simpler, with less noise.<br>&gt; It reads like simple english. It also aligns well with current do {}<br>&gt; syntax. This is the only argument I’m offering, and I think it’s the only<br>&gt; one that could be offered for such a small syntax change given that it<br>&gt; *only* serves to clarify and reduce noise of current syntax which has the<br>&gt; same functionality.<br>&gt;<br>&gt;<br>&gt; On Tue, May 10, 2016 at 16:27 Tyler Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; You could always do your control flow with goto’s anyway…<br>&gt;&gt;<br>&gt;&gt; func foo() {<br>&gt;&gt;   var i = 0<br>&gt;&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;&gt;     switch label {<br>&gt;&gt;     case &quot;entry&quot;:<br>&gt;&gt;       print(&quot;beginning loop…&quot;)<br>&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;     case &quot;cond&quot;:<br>&gt;&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;&gt;     case &quot;body&quot;:<br>&gt;&gt;       i += 1<br>&gt;&gt;       print(&quot;\(i)&quot;)<br>&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;     case &quot;end&quot;:<br>&gt;&gt;       break<br>&gt;&gt;     default: break<br>&gt;&gt;     }<br>&gt;&gt;   }<br>&gt;&gt;   goto()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Apologies,<br>&gt;&gt; Harlan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And isn’t this the point really. Yes there are many different ways of<br>&gt;&gt; doing something, but there should be one obvious way. IMHO, there is<br>&gt;&gt; nothing more obvious than just<br>&gt;&gt;<br>&gt;&gt; repeat {<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; It’s very clear. It’s not about adding complex control flow, it’s about<br>&gt;&gt; simplifying current syntax. I don’t think anyone is arguing that it’s more<br>&gt;&gt; powerful than what while loops currently offer.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; When I need a loop with complex control flow that does not fit into the<br>&gt;&gt; classical while {} or repeat {} while structure, I use this:<br>&gt;&gt;<br>&gt;&gt; do_stuff: do {<br>&gt;&gt;  …<br>&gt;&gt;  continue do_stuff<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; This pattern explicit and allows very complex control flow patterns<br>&gt;&gt; without the drawbacks of the unrestricted goto construct.<br>&gt;&gt;<br>&gt;&gt; Therefore I don’t see utility with having a repeat {} without while<br>&gt;&gt; clause.<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt;<br>&gt;&gt; Taras<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops.<br>&gt;&gt; It’s IMHO more clear to a new programmer that repeat will just repeat<br>&gt;&gt; indefinitely vs while true.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This point seems strange to me - why teach a new programmer about loops<br>&gt;&gt; by first showing them a looping construct they should probably never use in<br>&gt;&gt; actual practice until they really know what they’re doing?<br>&gt;&gt;<br>&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/950acb52/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a69f91816dae5f787bd9f58ceb7b70bd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Eduardo Mourey Lopez Ne</string> &lt;edmourey at icloud.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>The only advantage that I see if of a repeat without a while true, is that the compiler could check for the presence of a break or give a warning <br></p><p>repeat {<br> //code<br>  if (check) {break} //will be required to avoid a warning <br>}<br></p><p>repeat {<br>  //code<br>  //the user could forget to add a if break<br>} while true<br></p><p><br>&gt; On May 10, 2016, at 4:50 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, May 10, 2016 at 4:46 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 10, 2016, at 2:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think, on the contrary, it&#39;s missing the point utterly. It&#39;s up to those proposing a new feature to justify its addition in light of what&#39;s already here, and it&#39;s up to those proposing the removal of a feature to justify why it should be removed.<br>&gt;&gt; <br>&gt;&gt; Certainly no one is proposing the removal of the while loop. Currently, the One Obvious Way of making an infinite loop is `while true`, and it is up to the proponents to advance a reason why a replacement would be superior. I cannot think of a greater non-sequitur than supplying a demonstration of why while loops are useful.<br>&gt; <br>&gt; That’s what I am saying. No one is supplying a demonstration of why while loops are useful and that suggestion is a straw man.<br>&gt; <br>&gt; That was not meant to be a straw man, not on my part. It is my understanding of Harlan&#39;s example. It shows that, without while loops, it is unwieldy to express the same thing using goto statements. That is fine, but it is not at all on point for this discussion.<br>&gt;  <br>&gt; My point below that simple and clear syntax is an improvement on syntax with more noise.<br>&gt; <br>&gt; repeat {<br>&gt; 	// code<br>&gt; }<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; repeat {<br>&gt; 	// code<br>&gt; } while true<br>&gt; <br>&gt; What&#39;s wrong with `while true { }` ? <br>&gt; <br>&gt; The reason that the former is superior to the latter is that, given repeat is already part of the language, the former it is simpler, with less noise. It reads like simple english. It also aligns well with current do {} syntax. This is the only argument I’m offering, and I think it’s the only one that could be offered for such a small syntax change given that it *only* serves to clarify and reduce noise of current syntax which has the same functionality.<br>&gt; <br>&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 16:27 Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You could always do your control flow with goto’s anyway…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;   var i = 0<br>&gt;&gt;&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;&gt;&gt;     switch label {<br>&gt;&gt;&gt;     case &quot;entry&quot;:<br>&gt;&gt;&gt;       print(&quot;beginning loop…&quot;)<br>&gt;&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;&gt;     case &quot;cond&quot;:<br>&gt;&gt;&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;&gt;&gt;     case &quot;body&quot;:<br>&gt;&gt;&gt;       i += 1<br>&gt;&gt;&gt;       print(&quot;\(i)&quot;)<br>&gt;&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;&gt;     case &quot;end&quot;:<br>&gt;&gt;&gt;       break<br>&gt;&gt;&gt;     default: break<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;   goto()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Apologies,<br>&gt;&gt;&gt; Harlan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; And isn’t this the point really. Yes there are many different ways of doing something, but there should be one obvious way. IMHO, there is nothing more obvious than just <br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It’s very clear. It’s not about adding complex control flow, it’s about simplifying current syntax. I don’t think anyone is arguing that it’s more powerful than what while loops currently offer.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When I need a loop with complex control flow that does not fit into the classical while {} or repeat {} while structure, I use this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; do_stuff: do {<br>&gt;&gt;&gt;&gt;  …<br>&gt;&gt;&gt;&gt;  continue do_stuff<br>&gt;&gt;&gt;&gt; } <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This pattern explicit and allows very complex control flow patterns without the drawbacks of the unrestricted goto construct. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Therefore I don’t see utility with having a repeat {} without while clause. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best, <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Taras<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>&gt;&gt;&gt;&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/38e8f71a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 2:50 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, May 10, 2016 at 4:46 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 10, 2016, at 2:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think, on the contrary, it&#39;s missing the point utterly. It&#39;s up to those proposing a new feature to justify its addition in light of what&#39;s already here, and it&#39;s up to those proposing the removal of a feature to justify why it should be removed.<br>&gt;&gt; <br>&gt;&gt; Certainly no one is proposing the removal of the while loop. Currently, the One Obvious Way of making an infinite loop is `while true`, and it is up to the proponents to advance a reason why a replacement would be superior. I cannot think of a greater non-sequitur than supplying a demonstration of why while loops are useful.<br>&gt; <br>&gt; That’s what I am saying. No one is supplying a demonstration of why while loops are useful and that suggestion is a straw man.<br>&gt; <br>&gt; That was not meant to be a straw man, not on my part. It is my understanding of Harlan&#39;s example. It shows that, without while loops, it is unwieldy to express the same thing using goto statements. That is fine, but it is not at all on point for this discussion.<br>&gt;  <br>&gt; My point below that simple and clear syntax is an improvement on syntax with more noise.<br>&gt; <br>&gt; repeat {<br>&gt; 	// code<br>&gt; }<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; repeat {<br>&gt; 	// code<br>&gt; } while true<br>&gt; <br>&gt; What&#39;s wrong with `while true { }` ? <br></p><p>This is a good question. In my opinion, nothing in and of itself, however since repeat is part of the language and it has a stand alone meaning in english, it stands to reason that users will expect that it can stand alone just as do { } does. I would love to hear if this is a sentiment I alone have, or if others feel the same.<br></p><p>&gt; <br>&gt; The reason that the former is superior to the latter is that, given repeat is already part of the language, the former it is simpler, with less noise. It reads like simple english. It also aligns well with current do {} syntax. This is the only argument I’m offering, and I think it’s the only one that could be offered for such a small syntax change given that it *only* serves to clarify and reduce noise of current syntax which has the same functionality.<br>&gt; <br>&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 16:27 Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You could always do your control flow with goto’s anyway…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;   var i = 0<br>&gt;&gt;&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;&gt;&gt;     switch label {<br>&gt;&gt;&gt;     case &quot;entry&quot;:<br>&gt;&gt;&gt;       print(&quot;beginning loop…&quot;)<br>&gt;&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;&gt;     case &quot;cond&quot;:<br>&gt;&gt;&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;&gt;&gt;     case &quot;body&quot;:<br>&gt;&gt;&gt;       i += 1<br>&gt;&gt;&gt;       print(&quot;\(i)&quot;)<br>&gt;&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;&gt;     case &quot;end&quot;:<br>&gt;&gt;&gt;       break<br>&gt;&gt;&gt;     default: break<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;   goto()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Apologies,<br>&gt;&gt;&gt; Harlan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; And isn’t this the point really. Yes there are many different ways of doing something, but there should be one obvious way. IMHO, there is nothing more obvious than just <br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It’s very clear. It’s not about adding complex control flow, it’s about simplifying current syntax. I don’t think anyone is arguing that it’s more powerful than what while loops currently offer.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When I need a loop with complex control flow that does not fit into the classical while {} or repeat {} while structure, I use this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; do_stuff: do {<br>&gt;&gt;&gt;&gt;  …<br>&gt;&gt;&gt;&gt;  continue do_stuff<br>&gt;&gt;&gt;&gt; } <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This pattern explicit and allows very complex control flow patterns without the drawbacks of the unrestricted goto construct. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Therefore I don’t see utility with having a repeat {} without while clause. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best, <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Taras<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This point seems strange to me - why teach a new programmer about loops by first showing them a looping construct they should probably never use in actual practice until they really know what they’re doing?<br>&gt;&gt;&gt;&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/030654d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 4:57 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 10, 2016, at 2:50 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, May 10, 2016 at 4:46 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 2:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I think, on the contrary, it&#39;s missing the point utterly. It&#39;s up to<br>&gt;&gt; those proposing a new feature to justify its addition in light of what&#39;s<br>&gt;&gt; already here, and it&#39;s up to those proposing the removal of a feature to<br>&gt;&gt; justify why it should be removed.<br>&gt;&gt;<br>&gt;&gt; Certainly no one is proposing the removal of the while loop. Currently,<br>&gt;&gt; the One Obvious Way of making an infinite loop is `while true`, and it is<br>&gt;&gt; up to the proponents to advance a reason why a replacement would be<br>&gt;&gt; superior. I cannot think of a greater non-sequitur than supplying a<br>&gt;&gt; demonstration of why while loops are useful.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That’s what I am saying. No one is supplying a demonstration of why while<br>&gt;&gt; loops are useful and that suggestion is a straw man.<br>&gt;&gt;<br>&gt;<br>&gt; That was not meant to be a straw man, not on my part. It is my<br>&gt; understanding of Harlan&#39;s example. It shows that, without while loops, it<br>&gt; is unwieldy to express the same thing using goto statements. That is fine,<br>&gt; but it is not at all on point for this discussion.<br>&gt;<br>&gt;<br>&gt;&gt; My point below that simple and clear syntax is an improvement on syntax<br>&gt;&gt; with more noise.<br>&gt;&gt;<br>&gt;&gt; repeat {<br>&gt;&gt; // code<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; vs<br>&gt;&gt;<br>&gt;&gt; repeat {<br>&gt;&gt; // code<br>&gt;&gt; } while true<br>&gt;&gt;<br>&gt;<br>&gt; What&#39;s wrong with `while true { }` ?<br>&gt;<br>&gt;<br>&gt; This is a good question. In my opinion, nothing in and of itself, however<br>&gt; since repeat is part of the language and it has a stand alone meaning in<br>&gt; english,<br>&gt;<br></p><p>&quot;Repeat&quot; in English does not mean &quot;do something forever.&quot; It means &quot;do<br>something one more time.&quot;<br></p><p><br>&gt; it stands to reason that users will expect that it can stand alone just as<br>&gt; do { } does. I would love to hear if this is a sentiment I alone have, or<br>&gt; if others feel the same.<br>&gt;<br>&gt;<br>&gt; The reason that the former is superior to the latter is that, given repeat<br>&gt;&gt; is already part of the language, the former it is simpler, with less noise.<br>&gt;&gt; It reads like simple english. It also aligns well with current do {}<br>&gt;&gt; syntax. This is the only argument I’m offering, and I think it’s the only<br>&gt;&gt; one that could be offered for such a small syntax change given that it<br>&gt;&gt; *only* serves to clarify and reduce noise of current syntax which has the<br>&gt;&gt; same functionality.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Tue, May 10, 2016 at 16:27 Tyler Cloutier via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 2:13 PM, Harlan Haskins via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; You could always do your control flow with goto’s anyway…<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;   var i = 0<br>&gt;&gt;&gt;   func goto(_ label: String = &quot;entry&quot;) {<br>&gt;&gt;&gt;     switch label {<br>&gt;&gt;&gt;     case &quot;entry&quot;:<br>&gt;&gt;&gt;       print(&quot;beginning loop…&quot;)<br>&gt;&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;&gt;     case &quot;cond&quot;:<br>&gt;&gt;&gt;       goto(i &lt; 10 ? &quot;body&quot; : &quot;end&quot;)<br>&gt;&gt;&gt;     case &quot;body&quot;:<br>&gt;&gt;&gt;       i += 1<br>&gt;&gt;&gt;       print(&quot;\(i)&quot;)<br>&gt;&gt;&gt;       goto(&quot;cond&quot;)<br>&gt;&gt;&gt;     case &quot;end&quot;:<br>&gt;&gt;&gt;       break<br>&gt;&gt;&gt;     default: break<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;   goto()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Apologies,<br>&gt;&gt;&gt; Harlan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And isn’t this the point really. Yes there are many different ways of<br>&gt;&gt;&gt; doing something, but there should be one obvious way. IMHO, there is<br>&gt;&gt;&gt; nothing more obvious than just<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; repeat {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It’s very clear. It’s not about adding complex control flow, it’s about<br>&gt;&gt;&gt; simplifying current syntax. I don’t think anyone is arguing that it’s more<br>&gt;&gt;&gt; powerful than what while loops currently offer.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 2:05 PM, Taras Zakharko via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When I need a loop with complex control flow that does not fit into the<br>&gt;&gt;&gt; classical while {} or repeat {} while structure, I use this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; do_stuff: do {<br>&gt;&gt;&gt;  …<br>&gt;&gt;&gt;  continue do_stuff<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This pattern explicit and allows very complex control flow patterns<br>&gt;&gt;&gt; without the drawbacks of the unrestricted goto construct.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Therefore I don’t see utility with having a repeat {} without while<br>&gt;&gt;&gt; clause.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Taras<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 10 May 2016, at 22:39, Dominik Pich via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops.<br>&gt;&gt;&gt; It’s IMHO more clear to a new programmer that repeat will just repeat<br>&gt;&gt;&gt; indefinitely vs while true.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This point seems strange to me - why teach a new programmer about loops<br>&gt;&gt;&gt; by first showing them a looping construct they should probably never use in<br>&gt;&gt;&gt; actual practice until they really know what they’re doing?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; totally agree… it would be a bad first introduction, id say :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/c989861f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>May 11, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 10 May 2016, at 22:27, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt; And isn’t this the point really. Yes there are many different ways of doing something, but there should be one obvious way. IMHO, there is nothing more obvious than just <br>&gt; <br>&gt; repeat {<br>&gt; <br>&gt; }<br></p><p>Yes there is:<br></p><p>    while true {<br></p><p>    }<br></p><p>is more obvious than repeat { … }<br></p><p>In the first case, the fact that it is a “loop forever” is obvious right there at the beginning of the loop. In the second case, you have to seek out the end of the loop to find out that the loop will repeat forever. And it might not be easy to find the correct bare closing brace in a sea of closing braces in a complexly structured program.<br></p><p><br>&gt; <br>&gt; It’s very clear. It’s not about adding complex control flow, it’s about simplifying current syntax. I don’t think anyone is arguing that it’s more powerful than what while loops currently offer.<br></p><p>I don’t think it simplifies the syntax, it adds an extra distinct version of the repeat loop. That’s not simplifying.<br></p><p>&gt; <br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’d actually say that I’m strongly in favor of allowing just a repeat<br>&gt; keyword, although I wouldn’t support making &#39;while true’.<br>&gt;<br>&gt; Firstly it reduces clutter<br>&gt;<br></p><p>Can you explain what clutter you see? Unless I misunderstand what you&#39;re<br>referring to, reducing the 10 letters in `while true` to the six letters in<br>`repeat` is hardly &quot;reducing clutter.&quot;<br></p><p><br>&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;<br></p><p>I disagree here also. It is not very clear at all that the code is supposed<br>to repeat indefinitely, not to any audience.<br></p><p>First, it would not be clear to users who are experienced in Swift and<br>aware of this proposal. Code is meant to be read, and allowing the omission<br>of a trailing clause to produce two very different behaviors means that it<br>is not clear what `repeat {` means until you encounter the closing brace<br>and check for what follows. Moreover, what follows could be the keyword<br>`while` on the following line, and in that case you cannot know whether the<br>expression that follows `while` is the beginning of a new while loop until<br>you encounter or don&#39;t encounter a new opening brace. By contrast, `while<br>true {` cannot be anything other than the beginning of an infinite loop.<br>You already know that fact after reading 12 letters.<br></p><p>Second, it would not be clear to users migrating from another C-family<br>language. `while true { }` is immediately understood by users of any other<br>related language.<br></p><p>Third, it would not be clear based on a knowledge of English. In common<br>use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e.<br>do something twice). If I ask you to repeat something you just said, I<br>should hope that you do not keep reciting it over and over until I tell you<br>to stop.<br></p><p><br>&gt; Secondly it’s a very simple way of introducing new programmers to loops.<br>&gt; It’s IMHO more clear to a new programmer that repeat will just repeat<br>&gt; indefinitely vs while true.<br>&gt;<br></p><p>I can speak to this a little bit, having introduced a new programmer to<br>loops very recently and having done so in the past as well. I have not<br>encountered anyone who has trouble with the *concept* of looping--i.e. the<br>idea that the same code can be run over and over.<br></p><p>Where things get tricky is the difficulty of mastering the syntax of the<br>while loop and, more problematic, the syntax of the classic for;; loop.<br>Introducing a simple way to make something repeat forever does not solve<br>this learning hurdle, because students will continue to have to contend<br>with these other types of loops in order to be productive in the language.<br>A special syntax for repeating forever is especially unhelpful because it<br>is just functional enough that a discouraged student may choose to avoid<br>learning other types of loops and instead combine the infinite loop with<br>if, continue, and break.<br></p><p><br>&gt; Lastly, this isn’t the first time this has been brought up on this list<br>&gt; and there was previously discussion about the fact that when people see the<br>&gt; repeat keyword that it should naturally repeat indefinitely unless a where<br>&gt; clause is specified.<br>&gt;<br></p><p>I do believe that this is the first time this suggestion has been<br>introduced to the list. I do not recall any previous discussion focused on<br>infinite loops; they have been about repeating a finite number of times,<br>using proposed syntax such as `repeat 3 times { }` or variations on that<br>theme.<br></p><p><br>&gt; I also think the concern that an accidental infinite loop is any greater<br>&gt; than it is currently.<br>&gt;<br></p><p>Code gets refactored and edited. We&#39;re discussing on another thread<br>changing the rules about dangling commas in parameter lists for that very<br>reason. If you try to move a block of code with a repeat...while loop but<br>accidentally leave behind the last line, this syntax will cause you grief.<br></p><p><br>&gt; Tyler<br>&gt;<br>&gt;<br>&gt;<br>&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I do not see sufficiently measurable benefits to this proposal to add it<br>&gt; to the language.<br>&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing<br>&gt; closure.<br>&gt;<br>&gt; I also want to thank you for bring it up on-list. Not every idea is right<br>&gt; for Swift but it&#39;s<br>&gt; always refreshing to see innovative thoughts added to the discussion.<br>&gt; Please do not be<br>&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; ​Swift Evolution ​Community,<br>&gt;<br>&gt; Currently writing an infinite loop in swift looks either something like<br>&gt; this:<br>&gt;<br>&gt;     while true {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt;<br>&gt; Or this:<br>&gt;<br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     } while true<br>&gt;<br>&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt; to loop<br>&gt; indefinitely if no trailing while clause is present:<br>&gt;<br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt;<br>&gt; while still allowing a trailing `while` clause as in:<br>&gt;<br>&gt;     repeat {<br>&gt;         foo += bar<br>&gt;     } while foo.count &lt; limit<br>&gt;<br>&gt; I also want to propose that it should be a compile time error to use<br>&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt; ... }` it would become `repeat { ... }`<br>&gt;<br>&gt; I was thinking of drafting a short proposal if there was enough positive<br>&gt; feedback.<br>&gt;<br>&gt; How does it sound?<br>&gt;<br>&gt; - Nick<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/a8c65d16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt; <br>&gt; Firstly it reduces clutter<br>&gt; <br>&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.”<br></p><p>I’m just referring to &#39;repeat {} while true’ -&gt; &#39;repeat {}&#39; <br></p><p>&gt;  <br>&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt; <br>&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt; <br>&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows.<br></p><p>This is just as true of all types of loops. If I have <br></p><p>repeat {<br>    ...<br>} while ...<br></p><p>I still have to scroll down to check the condition.<br></p><p>If I have <br></p><p>while true {<br>    ...<br>}<br></p><p>I still have to scan the entire body for different ways of exiting the loop. <br></p><p>&gt; Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace.<br></p><p>This is true, but it’s not ambiguous and any reasonable style would make it clear what the intension is. However, this does sound difficult for the compiler to parse, I will admit. This whole thing might be a moot point if can’t be integrated into the grammar. I don’t think I’m qualified to comment on the implications there.<br></p><p>&gt; By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt; <br></p><p>As I’ve said above, this is not true. I can break out of the loop at any time.<br></p><p>&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br></p><p>repeat as a keyword is already unfamiliar to users from other C-family languages. If they can grok the repeat-while loop, they can definitely understand repeat immediately.<br></p><p>&gt; <br>&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;  <br>&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt; <br>&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt; <br>&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language.<br></p><p>You’re saying that we should not have a simple syntax because they will eventually have to understand more complex syntax? Or am I misunderstanding?<br></p><p>&gt; A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt;  <br>&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt; <br>&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;  <br></p><p>Yes, that&#39;s the discussion I was referring to, and you can see that proponents had very similar arguments to the one I’m presenting now.<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001144.html<br></p><p>&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt; <br>&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br></p><p>This is also true of repeat-while loops with more than one condition<br></p><p>repeat {<br></p><p>} while this <br>&amp;&amp; that<br></p><p>Should we require parentheses on repeat-while loops to avoid this? Or should we err on the side of less noisy syntax?<br></p><p>Tyler<br></p><p>&gt;  <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt; <br>&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/300d6c84/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt; <br>&gt; Firstly it reduces clutter<br>&gt; <br>&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;  <br>&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt; <br>&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt; <br>&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt; <br>&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt; <br>&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;  <br>&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt; <br>&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt; <br>&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br></p><p>I’d also like to point out Chris’ comments on the <br></p><p>repeat X {<br></p><p>}<br></p><p>discussion.<br></p><p>“<br>This is a very valid use case.<br></p><p>FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br></p><p>I’d say that the pro’s and con’s of this are:<br></p><p>+ Makes a simple case very simple, particularly important in teaching.<br>+ Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>- It is “just syntactic sugar”, which makes the language more complex.<br>- It is a very narrow feature that is useful in few practical situations.<br></p><p>-Chris<br>“<br></p><p>In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br></p><p>&gt;  <br>&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt; <br>&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;  <br>&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt; <br>&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;  <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt; <br>&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/964811f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 3:56 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt; <br>&gt;&gt; Firstly it reduces clutter<br>&gt;&gt; <br>&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;  <br>&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt; <br>&gt;&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt;&gt; <br>&gt;&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt;&gt; <br>&gt;&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt;&gt; <br>&gt;&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;&gt;  <br>&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt; <br>&gt;&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt;&gt; <br>&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt; <br>&gt; I’d also like to point out Chris’ comments on the <br>&gt; <br>&gt; repeat X {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; discussion.<br>&gt; <br>&gt; “<br>&gt; This is a very valid use case.<br>&gt; <br>&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt; <br>&gt; I’d say that the pro’s and con’s of this are:<br>&gt; <br>&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt; <br>&gt; -Chris<br>&gt; “<br>&gt; <br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001234.html<br></p><p>&gt; In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br>&gt; <br>&gt;&gt;  <br>&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt;&gt; <br>&gt;&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;&gt;  <br>&gt;&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt;&gt; <br>&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;  <br>&gt;&gt; Tyler<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/99c75b80/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat<br>&gt;&gt; keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;<br>&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;<br>&gt;<br>&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re<br>&gt; referring to, reducing the 10 letters in `while true` to the six letters in<br>&gt; `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;<br>&gt;<br>&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;<br>&gt;<br>&gt; I disagree here also. It is not very clear at all that the code is<br>&gt; supposed to repeat indefinitely, not to any audience.<br>&gt;<br>&gt; First, it would not be clear to users who are experienced in Swift and<br>&gt; aware of this proposal. Code is meant to be read, and allowing the omission<br>&gt; of a trailing clause to produce two very different behaviors means that it<br>&gt; is not clear what `repeat {` means until you encounter the closing brace<br>&gt; and check for what follows. Moreover, what follows could be the keyword<br>&gt; `while` on the following line, and in that case you cannot know whether the<br>&gt; expression that follows `while` is the beginning of a new while loop until<br>&gt; you encounter or don&#39;t encounter a new opening brace. By contrast, `while<br>&gt; true {` cannot be anything other than the beginning of an infinite loop.<br>&gt; You already know that fact after reading 12 letters.<br>&gt;<br>&gt; Second, it would not be clear to users migrating from another C-family<br>&gt; language. `while true { }` is immediately understood by users of any other<br>&gt; related language.<br>&gt;<br>&gt; Third, it would not be clear based on a knowledge of English. In common<br>&gt; use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e.<br>&gt; do something twice). If I ask you to repeat something you just said, I<br>&gt; should hope that you do not keep reciting it over and over until I tell you<br>&gt; to stop.<br>&gt;<br>&gt;<br>&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops.<br>&gt;&gt; It’s IMHO more clear to a new programmer that repeat will just repeat<br>&gt;&gt; indefinitely vs while true.<br>&gt;&gt;<br>&gt;<br>&gt; I can speak to this a little bit, having introduced a new programmer to<br>&gt; loops very recently and having done so in the past as well. I have not<br>&gt; encountered anyone who has trouble with the *concept* of looping--i.e. the<br>&gt; idea that the same code can be run over and over.<br>&gt;<br>&gt; Where things get tricky is the difficulty of mastering the syntax of the<br>&gt; while loop and, more problematic, the syntax of the classic for;; loop.<br>&gt; Introducing a simple way to make something repeat forever does not solve<br>&gt; this learning hurdle, because students will continue to have to contend<br>&gt; with these other types of loops in order to be productive in the language.<br>&gt; A special syntax for repeating forever is especially unhelpful because it<br>&gt; is just functional enough that a discouraged student may choose to avoid<br>&gt; learning other types of loops and instead combine the infinite loop with<br>&gt; if, continue, and break.<br>&gt;<br>&gt;<br>&gt; I’d also like to point out Chris’ comments on the<br>&gt;<br>&gt; repeat X {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; discussion.<br>&gt;<br>&gt; “<br>&gt;<br>&gt; This is a very valid use case.<br>&gt;<br>&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;<br>&gt; I’d say that the pro’s and con’s of this are:<br>&gt;<br>&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; “<br>&gt;<br>&gt; In this case, I would say it’s not making the language any more complex<br>&gt; given that repeat-while is a current construct. Admittedly it is a very<br>&gt; narrow feature, but it’s also a small one.<br>&gt;<br></p><p>For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this<br>case.<br></p><p><br></p><p>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list<br>&gt;&gt; and there was previously discussion about the fact that when people see the<br>&gt;&gt; repeat keyword that it should naturally repeat indefinitely unless a where<br>&gt;&gt; clause is specified.<br>&gt;&gt;<br>&gt;<br>&gt; I do believe that this is the first time this suggestion has been<br>&gt; introduced to the list. I do not recall any previous discussion focused on<br>&gt; infinite loops; they have been about repeating a finite number of times,<br>&gt; using proposed syntax such as `repeat 3 times { }` or variations on that<br>&gt; theme.<br>&gt;<br>&gt;<br>&gt;&gt; I also think the concern that an accidental infinite loop is any greater<br>&gt;&gt; than it is currently.<br>&gt;&gt;<br>&gt;<br>&gt; Code gets refactored and edited. We&#39;re discussing on another thread<br>&gt; changing the rules about dangling commas in parameter lists for that very<br>&gt; reason. If you try to move a block of code with a repeat...while loop but<br>&gt; accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;<br>&gt;<br>&gt;&gt; Tyler<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it<br>&gt;&gt; to the language.<br>&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing<br>&gt;&gt; closure.<br>&gt;&gt;<br>&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right<br>&gt;&gt; for Swift but it&#39;s<br>&gt;&gt; always refreshing to see innovative thoughts added to the discussion.<br>&gt;&gt; Please do not be<br>&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;<br>&gt;&gt; -- Erica<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;<br>&gt;&gt; Currently writing an infinite loop in swift looks either something like<br>&gt;&gt; this:<br>&gt;&gt;<br>&gt;&gt;     while true {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; Or this:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     } while true<br>&gt;&gt;<br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt;&gt; to loop<br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         foo += bar<br>&gt;&gt;     } while foo.count &lt; limit<br>&gt;&gt;<br>&gt;&gt; I also want to propose that it should be a compile time error to use<br>&gt;&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt;&gt; ... }` it would become `repeat { ... }`<br>&gt;&gt;<br>&gt;&gt; I was thinking of drafting a short proposal if there was enough positive<br>&gt;&gt; feedback.<br>&gt;&gt;<br>&gt;&gt; How does it sound?<br>&gt;&gt;<br>&gt;&gt; - Nick<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/09ba214f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt; <br>&gt;&gt; Firstly it reduces clutter<br>&gt;&gt; <br>&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;  <br>&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt; <br>&gt;&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt;&gt; <br>&gt;&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt;&gt; <br>&gt;&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt;&gt; <br>&gt;&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;&gt;  <br>&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt; <br>&gt;&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt;&gt; <br>&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt; <br>&gt; I’d also like to point out Chris’ comments on the <br>&gt; <br>&gt; repeat X {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; discussion.<br>&gt; <br>&gt; “<br>&gt; This is a very valid use case.<br>&gt; <br>&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt; <br>&gt; I’d say that the pro’s and con’s of this are:<br>&gt; <br>&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt; <br>&gt; -Chris<br>&gt; “<br>&gt; <br>&gt; In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br>&gt; <br>&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this case.<br>&gt; <br></p><p>That’s fair enough. :)<br></p><p>But surely you’ll admit that if <br></p><p>repeat N {<br></p><p>}<br></p><p>was valid, then repeat { } follows as the logical repeat indefinitely syntax, no?<br></p><p><br>&gt;  <br>&gt; <br>&gt;&gt;  <br>&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt;&gt; <br>&gt;&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;&gt;  <br>&gt;&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt;&gt; <br>&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;  <br>&gt;&gt; Tyler<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/9a4c85f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat<br>&gt;&gt;&gt; keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re<br>&gt;&gt; referring to, reducing the 10 letters in `while true` to the six letters in<br>&gt;&gt; `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I disagree here also. It is not very clear at all that the code is<br>&gt;&gt; supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;<br>&gt;&gt; First, it would not be clear to users who are experienced in Swift and<br>&gt;&gt; aware of this proposal. Code is meant to be read, and allowing the omission<br>&gt;&gt; of a trailing clause to produce two very different behaviors means that it<br>&gt;&gt; is not clear what `repeat {` means until you encounter the closing brace<br>&gt;&gt; and check for what follows. Moreover, what follows could be the keyword<br>&gt;&gt; `while` on the following line, and in that case you cannot know whether the<br>&gt;&gt; expression that follows `while` is the beginning of a new while loop until<br>&gt;&gt; you encounter or don&#39;t encounter a new opening brace. By contrast, `while<br>&gt;&gt; true {` cannot be anything other than the beginning of an infinite loop.<br>&gt;&gt; You already know that fact after reading 12 letters.<br>&gt;&gt;<br>&gt;&gt; Second, it would not be clear to users migrating from another C-family<br>&gt;&gt; language. `while true { }` is immediately understood by users of any other<br>&gt;&gt; related language.<br>&gt;&gt;<br>&gt;&gt; Third, it would not be clear based on a knowledge of English. In common<br>&gt;&gt; use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e.<br>&gt;&gt; do something twice). If I ask you to repeat something you just said, I<br>&gt;&gt; should hope that you do not keep reciting it over and over until I tell you<br>&gt;&gt; to stop.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops.<br>&gt;&gt;&gt; It’s IMHO more clear to a new programmer that repeat will just repeat<br>&gt;&gt;&gt; indefinitely vs while true.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I can speak to this a little bit, having introduced a new programmer to<br>&gt;&gt; loops very recently and having done so in the past as well. I have not<br>&gt;&gt; encountered anyone who has trouble with the *concept* of looping--i.e. the<br>&gt;&gt; idea that the same code can be run over and over.<br>&gt;&gt;<br>&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the<br>&gt;&gt; while loop and, more problematic, the syntax of the classic for;; loop.<br>&gt;&gt; Introducing a simple way to make something repeat forever does not solve<br>&gt;&gt; this learning hurdle, because students will continue to have to contend<br>&gt;&gt; with these other types of loops in order to be productive in the language.<br>&gt;&gt; A special syntax for repeating forever is especially unhelpful because it<br>&gt;&gt; is just functional enough that a discouraged student may choose to avoid<br>&gt;&gt; learning other types of loops and instead combine the infinite loop with<br>&gt;&gt; if, continue, and break.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I’d also like to point out Chris’ comments on the<br>&gt;&gt;<br>&gt;&gt; repeat X {<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; discussion.<br>&gt;&gt;<br>&gt;&gt; “<br>&gt;&gt;<br>&gt;&gt; This is a very valid use case.<br>&gt;&gt;<br>&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;<br>&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;<br>&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; “<br>&gt;&gt;<br>&gt;&gt; In this case, I would say it’s not making the language any more complex<br>&gt;&gt; given that repeat-while is a current construct. Admittedly it is a very<br>&gt;&gt; narrow feature, but it’s also a small one.<br>&gt;&gt;<br>&gt;<br>&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this<br>&gt; case.<br>&gt;<br>&gt;<br>&gt; That’s fair enough. :)<br>&gt;<br>&gt; But surely you’ll admit that if<br>&gt;<br>&gt; repeat N {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; was valid, then repeat { } follows as the logical repeat indefinitely<br>&gt; syntax, no?<br>&gt;<br></p><p>No! Not at all! As I wrote above, it could mean repeat once. It currently<br>means repeat until the condition that follows, and if that condition is<br>optional you only find out after you read everything in the loop. So, IMO,<br>it does not follow at all!<br></p><p><br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list<br>&gt;&gt;&gt; and there was previously discussion about the fact that when people see the<br>&gt;&gt;&gt; repeat keyword that it should naturally repeat indefinitely unless a where<br>&gt;&gt;&gt; clause is specified.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I do believe that this is the first time this suggestion has been<br>&gt;&gt; introduced to the list. I do not recall any previous discussion focused on<br>&gt;&gt; infinite loops; they have been about repeating a finite number of times,<br>&gt;&gt; using proposed syntax such as `repeat 3 times { }` or variations on that<br>&gt;&gt; theme.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any greater<br>&gt;&gt;&gt; than it is currently.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread<br>&gt;&gt; changing the rules about dangling commas in parameter lists for that very<br>&gt;&gt; reason. If you try to move a block of code with a repeat...while loop but<br>&gt;&gt; accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it<br>&gt;&gt;&gt; to the language.<br>&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing<br>&gt;&gt;&gt; closure.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is<br>&gt;&gt;&gt; right for Swift but it&#39;s<br>&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion.<br>&gt;&gt;&gt; Please do not be<br>&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like<br>&gt;&gt;&gt; this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of<br>&gt;&gt;&gt; `repeat` to loop<br>&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;     } while foo.count &lt; limit<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also want to propose that it should be a compile time error to use<br>&gt;&gt;&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt;&gt;&gt; ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive<br>&gt;&gt;&gt; feedback.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Nick<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/040f4b95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f50a7532821edd503161abf3f2eb87cd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Cole Campbell</string> &lt;cole.m.campbell at icloud.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt;&gt; That’s fair enough. :)<br>&gt;&gt; <br>&gt;&gt; But surely you’ll admit that if <br>&gt;&gt; <br>&gt;&gt; repeat N {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; was valid, then repeat { } follows as the logical repeat indefinitely syntax, no?<br>&gt; <br>&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently means repeat until the condition that follows, and if that condition is optional you only find out after you read everything in the loop. So, IMO, it does not follow at all!<br></p><p>I agree, it doesn&#39;t follow that if repeat N { } exists then somehow repeat without an argument means &#39;forever&#39;. In English, &#39;repeat&#39; without anything to indicate how many time means &#39;repeat once&#39;.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/c7d5f653/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 11, 2016 at 12:00:00am</p></header><div class="content"><p>Right. I&#39;d like to echo Erica, though, and add my thanks to Nicholas for<br>bringing it up. It certainly prompted a discussion, and it was a refreshing<br>idea indeed.<br>On Tue, May 10, 2016 at 18:19 Cole Campbell &lt;cole.m.campbell at icloud.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; That’s fair enough. :)<br>&gt;&gt;<br>&gt;&gt; But surely you’ll admit that if<br>&gt;&gt;<br>&gt;&gt; repeat N {<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; was valid, then repeat { } follows as the logical repeat indefinitely<br>&gt;&gt; syntax, no?<br>&gt;&gt;<br>&gt;<br>&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently<br>&gt; means repeat until the condition that follows, and if that condition is<br>&gt; optional you only find out after you read everything in the loop. So, IMO,<br>&gt; it does not follow at all!<br>&gt;<br>&gt;<br>&gt; I agree, it doesn&#39;t follow that if repeat N { } exists then somehow repeat<br>&gt; without an argument means &#39;forever&#39;. In English, &#39;repeat&#39; without anything<br>&gt; to indicate how many time means &#39;repeat once&#39;.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/fdf54e43/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 4:07 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt;&gt; <br>&gt;&gt; I’d also like to point out Chris’ comments on the <br>&gt;&gt; <br>&gt;&gt; repeat X {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; discussion.<br>&gt;&gt; <br>&gt;&gt; “<br>&gt;&gt; This is a very valid use case.<br>&gt;&gt; <br>&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt; <br>&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt; <br>&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; “<br>&gt;&gt; <br>&gt;&gt; In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br>&gt;&gt; <br>&gt;&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this case.<br>&gt;&gt; <br>&gt; <br>&gt; That’s fair enough. :)<br>&gt; <br>&gt; But surely you’ll admit that if <br>&gt; <br>&gt; repeat N {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; was valid, then repeat { } follows as the logical repeat indefinitely syntax, no?<br>&gt; <br>&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently means repeat until the condition that follows, and if that condition is optional you only find out after you read everything in the loop. So, IMO, it does not follow at all!<br>&gt; <br></p><p>Let’s talk about this. <br></p><p>Could it mean repeat once? No, it hasn’t been run yet. In fact, there is very clear syntax for exactly this: do { }. It means do this once. Currently, repeat-while means that you repeat while the condition is true. Thus if you leave off the condition it can only mean repeat this unconditionally. I really don’t think that this a huge logical leap, and I doubt very much that someone would be confused by it’s meaning.<br></p><p>We will have to disagree here. I just see how adding a feature like repeat N, which increases complexity, would be better than extending the repeat syntax to allow you to repeat unconditionally.<br></p><p>I’m +1 on this proposal (sans disallowing while true).<br></p><p>Tyler<br></p><p><br>&gt; <br>&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/b9a53cd1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 11, 2016 at 12:00:00am</p></header><div class="content"><p>FWIW, repeat once means do twice.<br>On Tue, May 10, 2016 at 19:16 Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br></p><p>&gt; On May 10, 2016, at 4:07 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat<br>&gt;&gt;&gt;&gt; keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re<br>&gt;&gt;&gt; referring to, reducing the 10 letters in `while true` to the six letters in<br>&gt;&gt;&gt; `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I disagree here also. It is not very clear at all that the code is<br>&gt;&gt;&gt; supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; First, it would not be clear to users who are experienced in Swift and<br>&gt;&gt;&gt; aware of this proposal. Code is meant to be read, and allowing the omission<br>&gt;&gt;&gt; of a trailing clause to produce two very different behaviors means that it<br>&gt;&gt;&gt; is not clear what `repeat {` means until you encounter the closing brace<br>&gt;&gt;&gt; and check for what follows. Moreover, what follows could be the keyword<br>&gt;&gt;&gt; `while` on the following line, and in that case you cannot know whether the<br>&gt;&gt;&gt; expression that follows `while` is the beginning of a new while loop until<br>&gt;&gt;&gt; you encounter or don&#39;t encounter a new opening brace. By contrast, `while<br>&gt;&gt;&gt; true {` cannot be anything other than the beginning of an infinite loop.<br>&gt;&gt;&gt; You already know that fact after reading 12 letters.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Second, it would not be clear to users migrating from another C-family<br>&gt;&gt;&gt; language. `while true { }` is immediately understood by users of any other<br>&gt;&gt;&gt; related language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Third, it would not be clear based on a knowledge of English. In common<br>&gt;&gt;&gt; use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e.<br>&gt;&gt;&gt; do something twice). If I ask you to repeat something you just said, I<br>&gt;&gt;&gt; should hope that you do not keep reciting it over and over until I tell you<br>&gt;&gt;&gt; to stop.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to<br>&gt;&gt;&gt;&gt; loops. It’s IMHO more clear to a new programmer that repeat will just<br>&gt;&gt;&gt;&gt; repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I can speak to this a little bit, having introduced a new programmer to<br>&gt;&gt;&gt; loops very recently and having done so in the past as well. I have not<br>&gt;&gt;&gt; encountered anyone who has trouble with the *concept* of looping--i.e. the<br>&gt;&gt;&gt; idea that the same code can be run over and over.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the<br>&gt;&gt;&gt; while loop and, more problematic, the syntax of the classic for;; loop.<br>&gt;&gt;&gt; Introducing a simple way to make something repeat forever does not solve<br>&gt;&gt;&gt; this learning hurdle, because students will continue to have to contend<br>&gt;&gt;&gt; with these other types of loops in order to be productive in the language.<br>&gt;&gt;&gt; A special syntax for repeating forever is especially unhelpful because it<br>&gt;&gt;&gt; is just functional enough that a discouraged student may choose to avoid<br>&gt;&gt;&gt; learning other types of loops and instead combine the infinite loop with<br>&gt;&gt;&gt; if, continue, and break.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’d also like to point out Chris’ comments on the<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; repeat X {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; discussion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; “<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; “<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In this case, I would say it’s not making the language any more complex<br>&gt;&gt;&gt; given that repeat-while is a current construct. Admittedly it is a very<br>&gt;&gt;&gt; narrow feature, but it’s also a small one.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for<br>&gt;&gt; this case.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That’s fair enough. :)<br>&gt;&gt;<br>&gt;&gt; But surely you’ll admit that if<br>&gt;&gt;<br>&gt;&gt; repeat N {<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; was valid, then repeat { } follows as the logical repeat indefinitely<br>&gt;&gt; syntax, no?<br>&gt;&gt;<br>&gt;<br>&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently<br>&gt; means repeat until the condition that follows, and if that condition is<br>&gt; optional you only find out after you read everything in the loop. So, IMO,<br>&gt; it does not follow at all!<br>&gt;<br>&gt;<br>&gt; Let’s talk about this.<br>&gt;<br>&gt; Could it mean repeat once? No, it hasn’t been run yet. In fact, there is<br>&gt; very clear syntax for exactly this: do { }. It means do this once.<br>&gt; Currently, repeat-while means that you repeat while the condition is true.<br>&gt; Thus if you leave off the condition it can only mean repeat this<br>&gt; unconditionally. I really don’t think that this a huge logical leap, and I<br>&gt; doubt very much that someone would be confused by it’s meaning.<br>&gt;<br>&gt; We will have to disagree here. I just see how adding a feature like repeat<br>&gt; N, which increases complexity, would be better than extending the repeat<br>&gt; syntax to allow you to repeat unconditionally.<br>&gt;<br>&gt; I’m +1 on this proposal (sans disallowing while true).<br>&gt;<br>&gt; Tyler<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list<br>&gt;&gt;&gt;&gt; and there was previously discussion about the fact that when people see the<br>&gt;&gt;&gt;&gt; repeat keyword that it should naturally repeat indefinitely unless a where<br>&gt;&gt;&gt;&gt; clause is specified.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do believe that this is the first time this suggestion has been<br>&gt;&gt;&gt; introduced to the list. I do not recall any previous discussion focused on<br>&gt;&gt;&gt; infinite loops; they have been about repeating a finite number of times,<br>&gt;&gt;&gt; using proposed syntax such as `repeat 3 times { }` or variations on that<br>&gt;&gt;&gt; theme.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any<br>&gt;&gt;&gt;&gt; greater than it is currently.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread<br>&gt;&gt;&gt; changing the rules about dangling commas in parameter lists for that very<br>&gt;&gt;&gt; reason. If you try to move a block of code with a repeat...while loop but<br>&gt;&gt;&gt; accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add<br>&gt;&gt;&gt;&gt; it to the language.<br>&gt;&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with<br>&gt;&gt;&gt;&gt; trailing closure.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is<br>&gt;&gt;&gt;&gt; right for Swift but it&#39;s<br>&gt;&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion.<br>&gt;&gt;&gt;&gt; Please do not be<br>&gt;&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like<br>&gt;&gt;&gt;&gt; this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of<br>&gt;&gt;&gt;&gt; `repeat` to loop<br>&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;     } while foo.count &lt; limit<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use<br>&gt;&gt;&gt;&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt;&gt;&gt;&gt; ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough<br>&gt;&gt;&gt;&gt; positive feedback.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Nick<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/4445e2e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 05:00:00pm</p></header><div class="content"><p>What would repeat 1 { } mean then? Repeat N? Would it run N or N + 1 times? <br></p><p>That sounds a massive source of bugs.<br></p><p><br>&gt; On May 10, 2016, at 5:25 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; FWIW, repeat once means do twice.<br>&gt; On Tue, May 10, 2016 at 19:16 Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt;&gt; On May 10, 2016, at 4:07 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com &lt;mailto:cloutiertyler at aol.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d also like to point out Chris’ comments on the <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; repeat X {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “<br>&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; “<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this case.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That’s fair enough. :)<br>&gt;&gt; <br>&gt;&gt; But surely you’ll admit that if <br>&gt;&gt; <br>&gt;&gt; repeat N {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; was valid, then repeat { } follows as the logical repeat indefinitely syntax, no?<br>&gt;&gt; <br>&gt;&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently means repeat until the condition that follows, and if that condition is optional you only find out after you read everything in the loop. So, IMO, it does not follow at all!<br>&gt;&gt; <br>&gt; <br>&gt; Let’s talk about this. <br>&gt; <br>&gt; Could it mean repeat once? No, it hasn’t been run yet. In fact, there is very clear syntax for exactly this: do { }. It means do this once. Currently, repeat-while means that you repeat while the condition is true. Thus if you leave off the condition it can only mean repeat this unconditionally. I really don’t think that this a huge logical leap, and I doubt very much that someone would be confused by it’s meaning.<br>&gt; <br>&gt; We will have to disagree here. I just see how adding a feature like repeat N, which increases complexity, would be better than extending the repeat syntax to allow you to repeat unconditionally.<br>&gt; <br>&gt; I’m +1 on this proposal (sans disallowing while true).<br>&gt; <br>&gt; Tyler<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt;&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt;&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt;&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/dbe417c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 11, 2016 at 12:00:00am</p></header><div class="content"><p>I was speaking of what I meant in my written English prose. What `repeat 1`<br>means is a topic for another day.<br>On Tue, May 10, 2016 at 19:27 Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br></p><p>&gt; What would repeat 1 { } mean then? Repeat N? Would it run N or N + 1<br>&gt; times?<br>&gt;<br>&gt; That sounds a massive source of bugs.<br>&gt;<br>&gt;<br>&gt; On May 10, 2016, at 5:25 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; FWIW, repeat once means do twice.<br>&gt; On Tue, May 10, 2016 at 19:16 Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On May 10, 2016, at 4:07 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat<br>&gt;&gt;&gt;&gt;&gt; keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what<br>&gt;&gt;&gt;&gt; you&#39;re referring to, reducing the 10 letters in `while true` to the six<br>&gt;&gt;&gt;&gt; letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I disagree here also. It is not very clear at all that the code is<br>&gt;&gt;&gt;&gt; supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; First, it would not be clear to users who are experienced in Swift and<br>&gt;&gt;&gt;&gt; aware of this proposal. Code is meant to be read, and allowing the omission<br>&gt;&gt;&gt;&gt; of a trailing clause to produce two very different behaviors means that it<br>&gt;&gt;&gt;&gt; is not clear what `repeat {` means until you encounter the closing brace<br>&gt;&gt;&gt;&gt; and check for what follows. Moreover, what follows could be the keyword<br>&gt;&gt;&gt;&gt; `while` on the following line, and in that case you cannot know whether the<br>&gt;&gt;&gt;&gt; expression that follows `while` is the beginning of a new while loop until<br>&gt;&gt;&gt;&gt; you encounter or don&#39;t encounter a new opening brace. By contrast, `while<br>&gt;&gt;&gt;&gt; true {` cannot be anything other than the beginning of an infinite loop.<br>&gt;&gt;&gt;&gt; You already know that fact after reading 12 letters.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Second, it would not be clear to users migrating from another C-family<br>&gt;&gt;&gt;&gt; language. `while true { }` is immediately understood by users of any other<br>&gt;&gt;&gt;&gt; related language.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Third, it would not be clear based on a knowledge of English. In common<br>&gt;&gt;&gt;&gt; use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e.<br>&gt;&gt;&gt;&gt; do something twice). If I ask you to repeat something you just said, I<br>&gt;&gt;&gt;&gt; should hope that you do not keep reciting it over and over until I tell you<br>&gt;&gt;&gt;&gt; to stop.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to<br>&gt;&gt;&gt;&gt;&gt; loops. It’s IMHO more clear to a new programmer that repeat will just<br>&gt;&gt;&gt;&gt;&gt; repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I can speak to this a little bit, having introduced a new programmer to<br>&gt;&gt;&gt;&gt; loops very recently and having done so in the past as well. I have not<br>&gt;&gt;&gt;&gt; encountered anyone who has trouble with the *concept* of looping--i.e. the<br>&gt;&gt;&gt;&gt; idea that the same code can be run over and over.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of<br>&gt;&gt;&gt;&gt; the while loop and, more problematic, the syntax of the classic for;; loop.<br>&gt;&gt;&gt;&gt; Introducing a simple way to make something repeat forever does not solve<br>&gt;&gt;&gt;&gt; this learning hurdle, because students will continue to have to contend<br>&gt;&gt;&gt;&gt; with these other types of loops in order to be productive in the language.<br>&gt;&gt;&gt;&gt; A special syntax for repeating forever is especially unhelpful because it<br>&gt;&gt;&gt;&gt; is just functional enough that a discouraged student may choose to avoid<br>&gt;&gt;&gt;&gt; learning other types of loops and instead combine the infinite loop with<br>&gt;&gt;&gt;&gt; if, continue, and break.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I’d also like to point out Chris’ comments on the<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; repeat X {<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; discussion.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; “<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; “<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In this case, I would say it’s not making the language any more complex<br>&gt;&gt;&gt;&gt; given that repeat-while is a current construct. Admittedly it is a very<br>&gt;&gt;&gt;&gt; narrow feature, but it’s also a small one.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for<br>&gt;&gt;&gt; this case.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That’s fair enough. :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But surely you’ll admit that if<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; repeat N {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; was valid, then repeat { } follows as the logical repeat indefinitely<br>&gt;&gt;&gt; syntax, no?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently<br>&gt;&gt; means repeat until the condition that follows, and if that condition is<br>&gt;&gt; optional you only find out after you read everything in the loop. So, IMO,<br>&gt;&gt; it does not follow at all!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Let’s talk about this.<br>&gt;&gt;<br>&gt;&gt; Could it mean repeat once? No, it hasn’t been run yet. In fact, there is<br>&gt;&gt; very clear syntax for exactly this: do { }. It means do this once.<br>&gt;&gt; Currently, repeat-while means that you repeat while the condition is true.<br>&gt;&gt; Thus if you leave off the condition it can only mean repeat this<br>&gt;&gt; unconditionally. I really don’t think that this a huge logical leap, and I<br>&gt;&gt; doubt very much that someone would be confused by it’s meaning.<br>&gt;&gt;<br>&gt;&gt; We will have to disagree here. I just see how adding a feature like<br>&gt;&gt; repeat N, which increases complexity, would be better than extending the<br>&gt;&gt; repeat syntax to allow you to repeat unconditionally.<br>&gt;&gt;<br>&gt;&gt; I’m +1 on this proposal (sans disallowing while true).<br>&gt;&gt;<br>&gt;&gt; Tyler<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this<br>&gt;&gt;&gt;&gt;&gt; list and there was previously discussion about the fact that when people<br>&gt;&gt;&gt;&gt;&gt; see the repeat keyword that it should naturally repeat indefinitely unless<br>&gt;&gt;&gt;&gt;&gt; a where clause is specified.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I do believe that this is the first time this suggestion has been<br>&gt;&gt;&gt;&gt; introduced to the list. I do not recall any previous discussion focused on<br>&gt;&gt;&gt;&gt; infinite loops; they have been about repeating a finite number of times,<br>&gt;&gt;&gt;&gt; using proposed syntax such as `repeat 3 times { }` or variations on that<br>&gt;&gt;&gt;&gt; theme.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any<br>&gt;&gt;&gt;&gt;&gt; greater than it is currently.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread<br>&gt;&gt;&gt;&gt; changing the rules about dangling commas in parameter lists for that very<br>&gt;&gt;&gt;&gt; reason. If you try to move a block of code with a repeat...while loop but<br>&gt;&gt;&gt;&gt; accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add<br>&gt;&gt;&gt;&gt;&gt; it to the language.<br>&gt;&gt;&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with<br>&gt;&gt;&gt;&gt;&gt; trailing closure.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is<br>&gt;&gt;&gt;&gt;&gt; right for Swift but it&#39;s<br>&gt;&gt;&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion.<br>&gt;&gt;&gt;&gt;&gt; Please do not be<br>&gt;&gt;&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something<br>&gt;&gt;&gt;&gt;&gt; like this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of<br>&gt;&gt;&gt;&gt;&gt; `repeat` to loop<br>&gt;&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;&gt;     } while foo.count &lt; limit<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use<br>&gt;&gt;&gt;&gt;&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt;&gt;&gt;&gt;&gt; ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough<br>&gt;&gt;&gt;&gt;&gt; positive feedback.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; - Nick<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/c12559df/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 10, 2016 at 09:00:00pm</p></header><div class="content"><p>I think a clearer syntax here would be <br></p><p>   for n in 1...2 { }<br></p><p>as it casts no shadow of doubt about how many times the loop will be executed.<br></p><p>&gt; On 10 May 2016, at 9:27 pm, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What would repeat 1 { } mean then? Repeat N? Would it run N or N + 1 times? <br>&gt; <br>&gt; That sounds a massive source of bugs.<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 5:25 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; FWIW, repeat once means do twice.<br>&gt;&gt; On Tue, May 10, 2016 at 19:16 Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On May 10, 2016, at 4:07 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d also like to point out Chris’ comments on the <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; repeat X {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; discussion.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That’s fair enough. :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But surely you’ll admit that if <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; repeat N {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; was valid, then repeat { } follows as the logical repeat indefinitely syntax, no?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No! Not at all! As I wrote above, it could mean repeat once. It currently means repeat until the condition that follows, and if that condition is optional you only find out after you read everything in the loop. So, IMO, it does not follow at all!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let’s talk about this. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Could it mean repeat once? No, it hasn’t been run yet. In fact, there is very clear syntax for exactly this: do { }. It means do this once. Currently, repeat-while means that you repeat while the condition is true. Thus if you leave off the condition it can only mean repeat this unconditionally. I really don’t think that this a huge logical leap, and I doubt very much that someone would be confused by it’s meaning.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We will have to disagree here. I just see how adding a feature like repeat N, which increases complexity, would be better than extending the repeat syntax to allow you to repeat unconditionally.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m +1 on this proposal (sans disallowing while true).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/55e50ba7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f50a7532821edd503161abf3f2eb87cd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Cole Campbell</string> &lt;cole.m.campbell at icloud.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>I agree that repeat { } is ambiguous because you have to look to the end for a while clause to determine if it&#39;s infinite or not. while true { } is preferable in that regard, but a compromise that I saw mentioned is:<br></p><p>repeat forever { }<br></p><p>That is immediately clear that it is infinite like while true { } but reads better in English. And it&#39;s a nice extension of repeat N { }, which is something I wouldn&#39;t mind seeing being added to the language.<br></p><p>So +1 for repeat N { }, +1 for repeat forever { }, -1 for repeat { }.<br></p><p>&gt; On May 10, 2016, at 6:02 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 3:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, May 10, 2016 at 5:56 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 10, 2016, at 3:13 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, May 10, 2016 at 3:30 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I’d actually say that I’m strongly in favor of allowing just a repeat keyword, although I wouldn’t support making &#39;while true’.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Firstly it reduces clutter<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can you explain what clutter you see? Unless I misunderstand what you&#39;re referring to, reducing the 10 letters in `while true` to the six letters in `repeat` is hardly &quot;reducing clutter.&quot;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; and makes it very clear that the the code is just supposed to repeat.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I disagree here also. It is not very clear at all that the code is supposed to repeat indefinitely, not to any audience.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; First, it would not be clear to users who are experienced in Swift and aware of this proposal. Code is meant to be read, and allowing the omission of a trailing clause to produce two very different behaviors means that it is not clear what `repeat {` means until you encounter the closing brace and check for what follows. Moreover, what follows could be the keyword `while` on the following line, and in that case you cannot know whether the expression that follows `while` is the beginning of a new while loop until you encounter or don&#39;t encounter a new opening brace. By contrast, `while true {` cannot be anything other than the beginning of an infinite loop. You already know that fact after reading 12 letters.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Second, it would not be clear to users migrating from another C-family language. `while true { }` is immediately understood by users of any other related language.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Third, it would not be clear based on a knowledge of English. In common use, &quot;repeat&quot; does not mean repeat forever; it means to repeat once (i.e. do something twice). If I ask you to repeat something you just said, I should hope that you do not keep reciting it over and over until I tell you to stop.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Secondly it’s a very simple way of introducing new programmers to loops. It’s IMHO more clear to a new programmer that repeat will just repeat indefinitely vs while true.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can speak to this a little bit, having introduced a new programmer to loops very recently and having done so in the past as well. I have not encountered anyone who has trouble with the *concept* of looping--i.e. the idea that the same code can be run over and over.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Where things get tricky is the difficulty of mastering the syntax of the while loop and, more problematic, the syntax of the classic for;; loop. Introducing a simple way to make something repeat forever does not solve this learning hurdle, because students will continue to have to contend with these other types of loops in order to be productive in the language. A special syntax for repeating forever is especially unhelpful because it is just functional enough that a discouraged student may choose to avoid learning other types of loops and instead combine the infinite loop with if, continue, and break.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d also like to point out Chris’ comments on the <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; repeat X {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; discussion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “<br>&gt;&gt;&gt; This is a very valid use case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; “<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In this case, I would say it’s not making the language any more complex given that repeat-while is a current construct. Admittedly it is a very narrow feature, but it’s also a small one.<br>&gt;&gt; <br>&gt;&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this case.<br>&gt; <br>&gt; That’s fair enough. :)<br>&gt; <br>&gt; But surely you’ll admit that if <br>&gt; <br>&gt; repeat N {<br>&gt; <br>&gt; }<br>&gt; <br>&gt; was valid, then repeat { } follows as the logical repeat indefinitely syntax, no?<br>&gt; <br>&gt; <br>&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Lastly, this isn’t the first time this has been brought up on this list and there was previously discussion about the fact that when people see the repeat keyword that it should naturally repeat indefinitely unless a where clause is specified.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do believe that this is the first time this suggestion has been introduced to the list. I do not recall any previous discussion focused on infinite loops; they have been about repeating a finite number of times, using proposed syntax such as `repeat 3 times { }` or variations on that theme.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I also think the concern that an accidental infinite loop is any greater than it is currently.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Code gets refactored and edited. We&#39;re discussing on another thread changing the rules about dangling commas in parameter lists for that very reason. If you try to move a block of code with a repeat...while loop but accidentally leave behind the last line, this syntax will cause you grief.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Tyler<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt;&gt;&gt;&gt;&gt;&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt;&gt;&gt;&gt;&gt;&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     while true {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Or this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     } while true<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         if ... { break }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         //...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     repeat { <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;         foo += bar<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Nick <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/0fc5c1d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 10, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that repeat { } is ambiguous because you have to look to the end for a while clause to determine if it&#39;s infinite or not.<br></p><p>Right, this is the downside that I see with “repeat {}”.<br></p><p>&gt; while true { } is preferable in that regard, but a compromise that I saw mentioned is:<br>&gt; <br>&gt; repeat forever { }<br></p><p>This would require taking “forever” as a keyword if we supported “repeat N {&quot;, something we wouldn’t want to do.<br></p><p>Another option is to make it a statement modifier, which wouldn’t require taking it as a keyword (but also doesn’t read as well):<br></p><p>forever repeat { }<br></p><p><br>Personally, I don’t see this as a big enough improvement over “while true” to be worth introducing complexity for. <br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 5:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that repeat { } is ambiguous because you have to look to the end for a while clause to determine if it&#39;s infinite or not.<br>&gt; <br>&gt; Right, this is the downside that I see with “repeat {}”.<br></p><p><br>Not to beat a dead horse, but isn’t this also true of <br></p><p>repeat {<br></p><p>} while true<br></p><p>and <br></p><p>while true {<br>   ...<br>   ...<br>   if condition {<br>        break<br>   }<br>}<br></p><p>&gt; <br>&gt;&gt; while true { } is preferable in that regard, but a compromise that I saw mentioned is:<br>&gt;&gt; <br>&gt;&gt; repeat forever { }<br>&gt; <br>&gt; This would require taking “forever” as a keyword if we supported “repeat N {&quot;, something we wouldn’t want to do.<br>&gt; <br>&gt; Another option is to make it a statement modifier, which wouldn’t require taking it as a keyword (but also doesn’t read as well):<br>&gt; <br>&gt; forever repeat { }<br>&gt; <br>&gt; <br>&gt; Personally, I don’t see this as a big enough improvement over “while true” to be worth introducing complexity for. <br>&gt; <br></p><p>If you are referring to “forever&quot;, I also don’t think that adding a new keyword is an improvement over “while true”.<br></p><p>&gt; -Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>May 11, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello ​Swift Evolution community,​<br></p><p>Thank you so much for all the important feedback, this thread became more<br>lively than I initially hoped for!<br></p><p>First let me address Xiaodi Wu&#39;s questions from earlier:<br></p><p>What is your motivation for this change?<br></p><p><br>After thinking about it maybe I overreacted with wanting to phase out<br>`while true`.<br>I know `while true` is a programming idiom found in most languages but I<br>personally think expressions testing a single `Bool` literal<br>like `while true { ... }` are just as tasteless as directly using `true` as<br>in `if true { ... }` and might possibly signify that swift needs a better<br>construct to express an infinite loop.<br></p><p>So after reading this thread&#39;s feedback I&#39;m changing my tone and think we<br>should leave `while true` alone and let it continue to be<br>a valid way of expressing an infinite loop but maybe at the same time we<br>should think of adding a more Swifty alternative.<br></p><p>As a source of inspiration I really like rust&#39;s solution of `loop { ... }`:<br>https://doc.rust-lang.org/book/loops.html<br>but Swift already has a `repeat` statement so I initially thought of<br>modifying the behaviour of `repeat` to allow omitting the trailing `while<br>true` as to not bloat Swift with a new keyword.<br></p><p>What problems are solved by forbidding `while true`?<br></p><p><br>​As I said above, after thinking about it again I think we should keep<br>`while true` but I want to talk about a possible issue with the<br>`while true` idiom:<br></p><p>​    ​<br>let foo: Int<br>​<br>    ​<br>while true { foo = 5; break }<br>​    ​<br>print(foo)<br></p><p>​The above code will error out with the message &quot;Constant &#39;foo&#39; used before<br>being initialized&quot;​<br>`while true` will always enter the body of the loop at least once but since<br>`while` is a conditional statement this error occurs<br>whereas this code works just fine:<br></p><p>    let foo: Int<br>    repeat { foo = 5; break } while true<br>    print(foo)<br></p><p>since `repeat` will unconditionally enter the repeat block at least once.<br>So I think my initial idea can be broken up into two distinct parts.<br></p><p>Part I: add a `while true` alternative<br>----------------------------------------------------------------------------------------<br></p><p>So for the `while true` idiom replacement I want to propose adding<br>something like a `loop { }` construct or possibly modifying the `repeat`<br>keyword to take a statement modifier such as `sustained repeat { ... }`<br></p><p><br>Part II: change `repeat` statement ordering OR  `while` statement modifier<br>----------------------------------------------------------------------------------------<br></p><p>Idea #1:<br></p><p>Add a statement modifier to `while` that would ignore the `while` loop&#39;s<br>condition only<br>on the first run-through.<br>Not too sure on the naming of the statement modifier but maybe something<br>something like `after while foo &gt; bar { ... }`<br></p><p>`after` would signify that the while loops condition would be checked only<br>after the first iteration.<br></p><p>Idea #2:<br></p><p>change `repeat { ... } while ...` to `repeat while ... { ... }` so that the<br>loop condition can be seen upfront in long blocks,<br>adding a `repeat` in front of the while loop would ensure that the loop<br>runs once before evaluating the loop condition.<br>This would essentially remove the repeat keyword and make it a statement<br>modifier like the above written `after`.<br></p><p>Sorry for dragging this out a little after all the great feedback but does<br>either idea have any appeal to the Swift community?<br></p><p>Thanks!<br></p><p>- Nick<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>All the best,<br></p><p>Nicholas<br></p><p>Linked in:<br>http://lnkd.in/328U22<br></p><p><br>On Tue, May 10, 2016 at 4:39 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt;<br>&gt;&gt; Currently writing an infinite loop in swift looks either something like<br>&gt;&gt; this:<br>&gt;&gt;<br>&gt;&gt;     while true {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; Or this:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     } while true<br>&gt;&gt;<br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat`<br>&gt;&gt; to loop<br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt;<br>&gt;&gt;     repeat {<br>&gt;&gt;         foo += bar<br>&gt;&gt;     } while foo.count &lt; limit<br>&gt;&gt;<br>&gt;<br>&gt; What is your motivation for this change?<br>&gt;<br>&gt;<br>&gt;&gt; I also want to propose that it should be a compile time error to use<br>&gt;&gt; single `Bool` constants as while loop conditions, so no more `while true {<br>&gt;&gt; ... }` it would become `repeat { ... }`<br>&gt;&gt;<br>&gt;<br>&gt; What problems are solved by forbidding `while true`?<br>&gt;<br>&gt;<br>&gt;&gt; I was thinking of drafting a short proposal if there was enough positive<br>&gt;&gt; feedback.<br>&gt;&gt;<br>&gt;&gt; How does it sound?<br>&gt;&gt;<br>&gt;&gt; - Nick<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p>All the best,<br></p><p>Nicholas<br></p><p>Linked in:<br>http://lnkd.in/328U22<br></p><p><br>On Wed, May 11, 2016 at 10:11 AM, Tyler Cloutier via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On May 10, 2016, at 5:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I agree that repeat { } is ambiguous because you have to look to the<br>&gt; end for a while clause to determine if it&#39;s infinite or not.<br>&gt; &gt;<br>&gt; &gt; Right, this is the downside that I see with “repeat {}”.<br>&gt;<br>&gt;<br>&gt; Not to beat a dead horse, but isn’t this also true of<br>&gt;<br>&gt; repeat {<br>&gt;<br>&gt; } while true<br>&gt;<br>&gt; and<br>&gt;<br>&gt; while true {<br>&gt;    ...<br>&gt;    ...<br>&gt;    if condition {<br>&gt;         break<br>&gt;    }<br>&gt; }<br>&gt;<br>&gt; &gt;<br>&gt; &gt;&gt; while true { } is preferable in that regard, but a compromise that I<br>&gt; saw mentioned is:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; repeat forever { }<br>&gt; &gt;<br>&gt; &gt; This would require taking “forever” as a keyword if we supported “repeat<br>&gt; N {&quot;, something we wouldn’t want to do.<br>&gt; &gt;<br>&gt; &gt; Another option is to make it a statement modifier, which wouldn’t<br>&gt; require taking it as a keyword (but also doesn’t read as well):<br>&gt; &gt;<br>&gt; &gt; forever repeat { }<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Personally, I don’t see this as a big enough improvement over “while<br>&gt; true” to be worth introducing complexity for.<br>&gt; &gt;<br>&gt;<br>&gt; If you are referring to “forever&quot;, I also don’t think that adding a new<br>&gt; keyword is an improvement over “while true”.<br>&gt;<br>&gt; &gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160511/3e793122/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 11:12 PM, Nicholas Maccharoli &lt;nmaccharoli at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello ​Swift Evolution community,​<br>&gt; <br>&gt; Thank you so much for all the important feedback, this thread became more lively than I initially hoped for!<br>&gt; <br>&gt; First let me address Xiaodi Wu&#39;s questions from earlier: <br>&gt; <br>&gt; What is your motivation for this change?<br>&gt; <br>&gt; After thinking about it maybe I overreacted with wanting to phase out `while true`.<br>&gt; I know `while true` is a programming idiom found in most languages but I personally think expressions testing a single `Bool` literal<br>&gt; like `while true { ... }` are just as tasteless as directly using `true` as in `if true { ... }` and might possibly signify that swift needs a better construct to express an infinite loop.<br>&gt; <br>&gt; So after reading this thread&#39;s feedback I&#39;m changing my tone and think we should leave `while true` alone and let it continue to be<br>&gt; a valid way of expressing an infinite loop but maybe at the same time we should think of adding a more Swifty alternative.<br>&gt; <br>&gt; As a source of inspiration I really like rust&#39;s solution of `loop { ... }`: https://doc.rust-lang.org/book/loops.html &lt;https://doc.rust-lang.org/book/loops.html&gt;<br>&gt; but Swift already has a `repeat` statement so I initially thought of modifying the behaviour of `repeat` to allow omitting the trailing `while true` as to not bloat Swift with a new keyword.<br></p><p>Very interesting that there is precedence in Rust. <br></p><p>&gt; <br>&gt; What problems are solved by forbidding `while true`?<br>&gt; <br>&gt; ​As I said above, after thinking about it again I think we should keep `while true` but I want to talk about a possible issue with the<br>&gt; `while true` idiom:<br>&gt; <br>&gt; ​    ​let foo: Int​ <br>&gt;     ​while true { foo = 5; break }<br>&gt; ​    ​print(foo)<br>&gt; <br>&gt; ​The above code will error out with the message &quot;Constant &#39;foo&#39; used before being initialized&quot;​<br>&gt; `while true` will always enter the body of the loop at least once but since `while` is a conditional statement this error occurs<br>&gt; whereas this code works just fine:<br>&gt; <br>&gt;     let foo: Int<br>&gt;     repeat { foo = 5; break } while true<br>&gt;     print(foo)<br>&gt; <br>&gt; since `repeat` will unconditionally enter the repeat block at least once. <br>&gt; So I think my initial idea can be broken up into two distinct parts.<br>&gt; <br>&gt; Part I: add a `while true` alternative<br>&gt; ----------------------------------------------------------------------------------------<br>&gt; <br>&gt; So for the `while true` idiom replacement I want to propose adding something like a `loop { }` construct or possibly modifying the `repeat` keyword to take a statement modifier such as `sustained repeat { ... }`<br></p><p>I’m of the opinion that if it requires an additional keyword for this small a feature it’s probably not worth it.<br></p><p>&gt; <br>&gt; <br>&gt; Part II: change `repeat` statement ordering OR  `while` statement modifier<br>&gt; ----------------------------------------------------------------------------------------<br>&gt; <br>&gt; Idea #1:<br>&gt; <br>&gt; Add a statement modifier to `while` that would ignore the `while` loop&#39;s condition only<br>&gt; on the first run-through.<br>&gt; Not too sure on the naming of the statement modifier but maybe something something like `after while foo &gt; bar { ... }` <br>&gt; <br>&gt; `after` would signify that the while loops condition would be checked only after the first iteration. <br>&gt; <br>&gt; Idea #2:<br>&gt; <br>&gt; change `repeat { ... } while ...` to `repeat while ... { ... }` so that the loop condition can be seen upfront in long blocks, <br>&gt; adding a `repeat` in front of the while loop would ensure that the loop runs once before evaluating the loop condition.<br>&gt; This would essentially remove the repeat keyword and make it a statement modifier like the above written `after`. <br></p><p>I’m not really following you here. <br></p><p>With regards to #1, the repeat-while/do-while style loops are very familiar to C programmers and programmers generally. I don’t think the &quot;after&quot; keyword would serve to reduce confusion. <br></p><p>Same with #2. That syntax does seem to indicate in any way that the loop will run before the condition is checked. As far as I am aware, this runs counter to all while loop constructs in essentially all languages that have them.<br></p><p>&gt; <br>&gt; Sorry for dragging this out a little after all the great feedback but does either idea have any appeal to the Swift community?<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; - Nick <br>&gt; <br>&gt; <br>&gt;  <br>&gt; <br>&gt;  <br>&gt; <br>&gt;  <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; All the best,<br>&gt; <br>&gt; Nicholas<br>&gt; <br>&gt; Linked in:<br>&gt; http://lnkd.in/328U22 &lt;http://lnkd.in/328U22&gt;<br>&gt; <br>&gt; <br>&gt; On Tue, May 10, 2016 at 4:39 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt; On Tue, May 10, 2016 at 2:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; ​Swift Evolution ​Community,<br>&gt; <br>&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt; <br>&gt;     while true {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt; <br>&gt; Or this:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     } while true<br>&gt; <br>&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt; indefinitely if no trailing while clause is present:<br>&gt; <br>&gt;     repeat {<br>&gt;         if ... { break }<br>&gt;         //...<br>&gt;     }<br>&gt; <br>&gt; while still allowing a trailing `while` clause as in:<br>&gt; <br>&gt;     repeat { <br>&gt;         foo += bar<br>&gt;     } while foo.count &lt; limit <br>&gt;  <br>&gt; What is your motivation for this change?<br>&gt;  <br>&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt; <br>&gt; What problems are solved by forbidding `while true`?<br>&gt;  <br>&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt; <br>&gt; How does it sound?<br>&gt; <br>&gt; - Nick <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; All the best,<br>&gt; <br>&gt; Nicholas<br>&gt; <br>&gt; Linked in:<br>&gt; http://lnkd.in/328U22 &lt;http://lnkd.in/328U22&gt;<br>&gt; <br>&gt; <br>&gt; On Wed, May 11, 2016 at 10:11 AM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On May 10, 2016, at 5:56 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I agree that repeat { } is ambiguous because you have to look to the end for a while clause to determine if it&#39;s infinite or not.<br>&gt; &gt;<br>&gt; &gt; Right, this is the downside that I see with “repeat {}”.<br>&gt; <br>&gt; <br>&gt; Not to beat a dead horse, but isn’t this also true of<br>&gt; <br>&gt; repeat {<br>&gt; <br>&gt; } while true<br>&gt; <br>&gt; and<br>&gt; <br>&gt; while true {<br>&gt;    ...<br>&gt;    ...<br>&gt;    if condition {<br>&gt;         break<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; &gt;<br>&gt; &gt;&gt; while true { } is preferable in that regard, but a compromise that I saw mentioned is:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; repeat forever { }<br>&gt; &gt;<br>&gt; &gt; This would require taking “forever” as a keyword if we supported “repeat N {&quot;, something we wouldn’t want to do.<br>&gt; &gt;<br>&gt; &gt; Another option is to make it a statement modifier, which wouldn’t require taking it as a keyword (but also doesn’t read as well):<br>&gt; &gt;<br>&gt; &gt; forever repeat { }<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Personally, I don’t see this as a big enough improvement over “while true” to be worth introducing complexity for.<br>&gt; &gt;<br>&gt; <br>&gt; If you are referring to “forever&quot;, I also don’t think that adding a new keyword is an improvement over “while true”.<br>&gt; <br>&gt; &gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/62841ad6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>May 11, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On May 10, 2016, at 9:11 PM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 5:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that repeat { } is ambiguous because you have to look to the end for a while clause to determine if it&#39;s infinite or not.<br>&gt;&gt; <br>&gt;&gt; Right, this is the downside that I see with “repeat {}”.<br>&gt; <br>&gt; <br>&gt; Not to beat a dead horse, but isn’t this also true of <br>&gt; <br>&gt; repeat {<br>&gt; <br>&gt; } while true<br>&gt; <br>&gt; and <br>&gt; <br>&gt; while true {<br>&gt; ...<br>&gt; ...<br>&gt; if condition {<br>&gt;      break<br>&gt; }<br>&gt; }<br></p><p>In all the code I ever seen, infinite loop are seldom really forever, they must exit one day mainly for graceful exit of the application. So break statement are to be expected in all infinite loop. The question of the readability of a infinite loop is not about whether or not the loop can exit, but about the intent or goal of the loop. Here the &#39;while true&#39; strongly advertise up front that the loop is to run as long as it can; while for the &#39;repeat&#39;, one must go to the end to get that intent. So for readable code, a forever loop should preferably  be written as:<br></p><p>while true { /* multi-line work */ }<br></p><p>And never as:<br></p><p>repeat { /* multi-line work */ } while true<br></p><p>Removing the trailing &#39;while true&#39; of the &#39;repeat&#39; does not help with reading and quickly understanding the code, for that to occurs a keyword will need to be added to the repeat itself; like the &#39;repeat forever&#39; which is longer than the plain good old &#39;while true&#39; at the top.<br></p><p>Dany<br></p><p>&gt;&gt; <br>&gt;&gt;&gt; while true { } is preferable in that regard, but a compromise that I saw mentioned is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; repeat forever { }<br>&gt;&gt; <br>&gt;&gt; This would require taking “forever” as a keyword if we supported “repeat N {&quot;, something we wouldn’t want to do.<br>&gt;&gt; <br>&gt;&gt; Another option is to make it a statement modifier, which wouldn’t require taking it as a keyword (but also doesn’t read as well):<br>&gt;&gt; <br>&gt;&gt; forever repeat { }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Personally, I don’t see this as a big enough improvement over “while true” to be worth introducing complexity for.<br>&gt; <br>&gt; If you are referring to “forever&quot;, I also don’t think that adding a new keyword is an improvement over “while true”.<br>&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 10, 2016, at 6:11 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 10, 2016, at 5:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that repeat { } is ambiguous because you have to look to the end for a while clause to determine if it&#39;s infinite or not.<br>&gt;&gt; <br>&gt;&gt; Right, this is the downside that I see with “repeat {}”.<br>&gt; <br>&gt; <br>&gt; Not to beat a dead horse, but isn’t this also true of <br>&gt; <br>&gt; repeat { ...<br></p><p>&gt; while true { …<br></p><p>No, because today you always know that repeat has a condition, and that while does not.  That’s the point.<br></p><p><br>&gt;&gt; Another option is to make it a statement modifier, which wouldn’t require taking it as a keyword (but also doesn’t read as well):<br>&gt;&gt; <br>&gt;&gt; forever repeat { }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Personally, I don’t see this as a big enough improvement over “while true” to be worth introducing complexity for. <br>&gt;&gt; <br>&gt; <br>&gt; If you are referring to “forever&quot;, I also don’t think that adding a new keyword is an improvement over “while true”.<br></p><p>I agree.  Even if it didn’t take a keyword, Idon’t think that “repeat forever” is worth adding over “while true”.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>May 12, 2016 at 03:00:00am</p></header><div class="content"><p>Yeah after going though this thread again modifying the repeat keyword<br>seems like overkill.<br></p><p>while true { } isn&#39;t broken but I really like Ruby&#39;s loop { ... } keyword.<br></p><p>but adding a new loop type to swift just for replacing a special case of<br>the while loop also seems like a little too much.<br></p><p>If there isn&#39;t a strong argument for adding a loop keyword then I guess<br>this thread is at it&#39;s end for now.<br></p><p>Thanks for the feedback!<br></p><p>- Nick<br></p><p><br>2016年5月12日木曜日、Chris Lattner via swift-evolution&lt;swift-evolution at swift.org<br>&gt;さんは書きました:<br></p><p>&gt;<br>&gt; &gt; On May 10, 2016, at 6:11 PM, Tyler Cloutier &lt;cloutiertyler at aol.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On May 10, 2016, at 5:56 PM, Chris Lattner &lt;clattner at apple.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On May 10, 2016, at 4:13 PM, Cole Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I agree that repeat { } is ambiguous because you have to look to the<br>&gt; end for a while clause to determine if it&#39;s infinite or not.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Right, this is the downside that I see with “repeat {}”.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Not to beat a dead horse, but isn’t this also true of<br>&gt; &gt;<br>&gt; &gt; repeat { ...<br>&gt;<br>&gt; &gt; while true { …<br>&gt;<br>&gt; No, because today you always know that repeat has a condition, and that<br>&gt; while does not.  That’s the point.<br>&gt;<br>&gt;<br>&gt; &gt;&gt; Another option is to make it a statement modifier, which wouldn’t<br>&gt; require taking it as a keyword (but also doesn’t read as well):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; forever repeat { }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Personally, I don’t see this as a big enough improvement over “while<br>&gt; true” to be worth introducing complexity for.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; If you are referring to “forever&quot;, I also don’t think that adding a new<br>&gt; keyword is an improvement over “while true”.<br>&gt;<br>&gt; I agree.  Even if it didn’t take a keyword, Idon’t think that “repeat<br>&gt; forever” is worth adding over “while true”.<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br></p><p>All the best,<br></p><p>Nicholas<br></p><p>Linked in:<br>http://lnkd.in/328U22<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/01edbaef/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 06:00:00pm</p></header><div class="content"><p>On Tue, May 10, 2016 at 6:02 PM, Tyler Cloutier &lt;cloutiertyler at aol.com&gt;<br>wrote:<br></p><p>Let me be explicit about how the two ideas compare.<br></p><p>&gt; I’d also like to point out Chris’ comments on the<br>&gt;&gt;<br>&gt;&gt; repeat X {<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; discussion.<br>&gt;&gt;<br>&gt;&gt; “<br>&gt;&gt;<br>&gt;&gt; This is a very valid use case.<br>&gt;&gt;<br>&gt;&gt; FWIW, “repeat N {}” was originally designed and scoped into the Swift 2 implementation of the feature, but was cut due to schedule limitations.  There is precedent for this sort of feature in many teaching oriented languages (e.g. Logo).<br>&gt;&gt;<br>&gt;&gt; I’d say that the pro’s and con’s of this are:<br>&gt;&gt;<br>&gt;&gt; + Makes a simple case very simple, particularly important in teaching.<br>&gt;&gt;<br>&gt;&gt;<br>Repeating N times is a simple case, and `repeat N { }` makes it simple.<br>Repeating an indefinite number of times is not really a simple case--at<br>least, it&#39;s not the same case--and it&#39;s not even profitably usable until a<br>beginner has mastered another concept, namely `break`.<br></p><p><br>&gt; + Even if you aren’t familiar with it, you can tell at first glance what the behavior is.<br>&gt;&gt;<br>&gt;&gt;<br>As I&#39;ve mentioned above and Cole has just reinforced, with this proposal,<br>you can&#39;t tell at first glance what the behavior of `repeat {` is until you<br>read the end brace--even if you *are* familiar with it. By contrast,<br>`repeat N { }` is immediately understood, whether or not you&#39;re familiar<br>with it.<br></p><p><br>&gt; - It is “just syntactic sugar”, which makes the language more complex.<br>&gt;&gt;<br>&gt;&gt;<br>Whether you naively compare letters saved or concepts invoked, `repeat N {<br>}` is very sweet sugar in comparison to `for _ in 0..&lt;N { }`, but `repeat {<br>}` is not very sweet sugar in comparison to `while true { }`.<br></p><p><br>&gt; - It is a very narrow feature that is useful in few practical situations.<br>&gt;&gt;<br>&gt;&gt;<br>Here, `repeat N { }` can be used for any value N, but `repeat { }` is<br>useful only for saving four letters from `while true { }`.<br></p><p><br>&gt;<br>&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; “<br>&gt;&gt;<br>&gt;&gt; In this case, I would say it’s not making the language any more complex<br>&gt;&gt; given that repeat-while is a current construct. Admittedly it is a very<br>&gt;&gt; narrow feature, but it’s also a small one.<br>&gt;&gt;<br>&gt;<br>&gt; For the reasons I outlined above, I&#39;d be +1 for `repeat N` and -1 for this<br>&gt; case.<br>&gt;<br>&gt;<br>&gt; That’s fair enough. :)<br>&gt;<br>&gt; But surely you’ll admit that if<br>&gt;<br>&gt; repeat N {<br>&gt;<br>&gt; }<br>&gt;<br>&gt; was valid, then repeat { } follows as the logical repeat indefinitely<br>&gt; syntax, no?<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/bf3dc05c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Change `repeat` to loop indefinitely if no while clause is present</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Furthermore, I also think it is a nice generalization of the <br></p><p>do {<br></p><p>} <br></p><p>syntax for scopes. I think it is quite intuitive that do executes a block once, and repeat executes it repeatedly.<br></p><p><br>&gt; On May 10, 2016, at 1:09 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I do not see sufficiently measurable benefits to this proposal to add it to the language. <br>&gt; It&#39;s easy enough to roll your own `repeatForever` function with trailing closure.<br>&gt; <br>&gt; I also want to thank you for bring it up on-list. Not every idea is right for Swift but it&#39;s<br>&gt; always refreshing to see innovative thoughts added to the discussion. Please do not be <br>&gt; discouraged by the generally negative feedback on this particular idea.<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt;&gt; On May 10, 2016, at 1:27 AM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ​Swift Evolution ​Community,<br>&gt;&gt; <br>&gt;&gt; Currently writing an infinite loop in swift looks either something like this:<br>&gt;&gt; <br>&gt;&gt;     while true {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; Or this:<br>&gt;&gt; <br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     } while true<br>&gt;&gt; <br>&gt;&gt; But I think it might be best to change the syntax / behaviour of `repeat` to loop <br>&gt;&gt; indefinitely if no trailing while clause is present:<br>&gt;&gt; <br>&gt;&gt;     repeat {<br>&gt;&gt;         if ... { break }<br>&gt;&gt;         //...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; while still allowing a trailing `while` clause as in:<br>&gt;&gt; <br>&gt;&gt;     repeat { <br>&gt;&gt;         foo += bar<br>&gt;&gt;     } while foo.count &lt; limit <br>&gt;&gt; <br>&gt;&gt; I also want to propose that it should be a compile time error to use single `Bool` constants as while loop conditions, so no more `while true { ... }` it would become `repeat { ... }`<br>&gt;&gt; <br>&gt;&gt; I was thinking of drafting a short proposal if there was enough positive feedback. <br>&gt;&gt; <br>&gt;&gt; How does it sound?<br>&gt;&gt; <br>&gt;&gt; - Nick <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f377b5de/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
