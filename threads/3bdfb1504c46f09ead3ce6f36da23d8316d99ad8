<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June  8, 2016 at 06:00:00pm</p></header><div class="content"><p>The difference between  nil  and  .none  is that the former is more<br>&quot;generic&quot; than the latter.<br></p><p>NilLiteralConvertible protocol expresses types that can contain &quot;null&quot; as<br>legal values. `nil` does not have a type, it&#39;s just a token that is casted<br>to whatever NilLiteralConvertible type is expected. It is used in JSON<br>libraries, for example:<br></p><p>let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: nil]<br></p><p>Here, nil would be inferred to have our custom JSON type.<br>The same example with  none  would look a bit more weird:<br></p><p>let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: none]<br></p><p>None of what type? Of String? Of Int? Of JSON? There are no optionals in<br>this code. And a &quot;null&quot; present in JSON is different than no JSON in Swift.<br></p><p>Optional is the most significant example of NilLiteralConvertible, but<br>there are other users that would suffer from renaming. We could remove<br>NilLiteralConvertible at all, but look at the example in this case:<br></p><p>let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: JSON.nullValue]<br></p><p>That would hurt immersion of the DSL.<br></p><p>I think some Core team member told that they intentionally keep two ways of<br>handling Optional: one using nil, and the other treating it like other<br>enums.<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/3bdf9ad8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  8, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 8, 2016, at 11:54 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The difference between  nil  and  .none  is that the former is more &quot;generic&quot; than the latter.<br>&gt; <br>&gt; NilLiteralConvertible protocol expresses types that can contain &quot;null&quot; as legal values. `nil` does not have a type, it&#39;s just a token that is casted to whatever NilLiteralConvertible type is expected. It is used in JSON libraries, for example:<br>&gt; <br>&gt; let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: nil]<br>&gt; <br>&gt; Here, nil would be inferred to have our custom JSON type.<br>&gt; The same example with  none  would look a bit more weird:<br>&gt; <br>&gt; let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: none]<br>&gt; <br>&gt; None of what type? Of String? Of Int? Of JSON? There are no optionals in this code. And a &quot;null&quot; present in JSON is different than no JSON in Swift.<br></p><p>I have seen an example like this several times. In every case, I find the “none” one to be clearer. Why? Because it indicates that there is no email. nil to me looks like it could be a null pointer that could have bad consequences when accessed<br></p><p>nil is special word that we are use to from other languages. It *sounds* natural in this case because it is familiar.<br></p><p>I am not familiar with JSON libraries, but I don’t think that should guide the direction on which way to go.<br></p><p>Also, I am more specifically referring to nil with the use of optionals, not NilLiteralConvertible:<br></p><p>let i: Int? = nil<br>let i: Int? = .none<br></p><p>There are two ways to write the same thing with one being far clearer in my opinion. What does nil mean in this case? It precisely represents Optional&lt;Int&gt;.none making it somewhat redundant and surprising considering how nil is used in other languages. <br></p><p>More specifically, what is nil? 0? A pointer? A representation of nothing (again implying none!)?<br></p><p>I am very curious how new programmers coming to Swift as their first language would react to using nil in other languages. I think they would be very surprised.<br></p><p>&gt; <br>&gt; Optional is the most significant example of NilLiteralConvertible, but there are other users that would suffer from renaming. We could remove NilLiteralConvertible at all, but look at the example in this case:<br>&gt; <br>&gt; let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: JSON.nullValue]<br></p><p>This is somewhat more explicit and clearer in my opinion. Again, I am not familiar with JSON libraries so this could be why it looks clearer to me.<br></p><p>From your response, I see the words “nil”, “null”, and “none”. Doesn’t this seem a little excessive and maybe confusing for people?<br></p><p>Thanks,<br>Brandon<br></p><p>&gt; <br>&gt; That would hurt immersion of the DSL.<br>&gt; <br>&gt; I think some Core team member told that they intentionally keep two ways of handling Optional: one using nil, and the other treating it like other enums.<br>&gt; <br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/b06fdc85/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Discussion: Why is &quot;nil&quot; not &quot;none&quot;</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June  8, 2016 at 08:00:00pm</p></header><div class="content"><p>I think you should explore the direction of removing NilLiteralConvertible<br>entirely, together with nil. My example could instead use:<br></p><p>let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: .null]<br></p><p>Rationale would be that when nil was added to the language, enum<br>constructors could not omit their types. Now there is no reason for nil,<br>especially that it makes developers use only approximately suitable terms.<br></p><p>- Anton<br></p><p>2016-06-08 19:12 GMT+03:00 Brandon Knope &lt;bknope at me.com&gt;:<br></p><p>&gt;<br>&gt; On Jun 8, 2016, at 11:54 AM, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; The difference between  nil  and  .none  is that the former is more<br>&gt; &quot;generic&quot; than the latter.<br>&gt;<br>&gt; NilLiteralConvertible protocol expresses types that can contain &quot;null&quot; as<br>&gt; legal values. `nil` does not have a type, it&#39;s just a token that is casted<br>&gt; to whatever NilLiteralConvertible type is expected. It is used in JSON<br>&gt; libraries, for example:<br>&gt;<br>&gt; let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: nil]<br>&gt;<br>&gt; Here, nil would be inferred to have our custom JSON type.<br>&gt; The same example with  none  would look a bit more weird:<br>&gt;<br>&gt; let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: none]<br>&gt;<br>&gt; None of what type? Of String? Of Int? Of JSON? There are no optionals in<br>&gt; this code. And a &quot;null&quot; present in JSON is different than no JSON in Swift.<br>&gt;<br>&gt;<br>&gt; I have seen an example like this several times. In every case, I find the<br>&gt; “none” one to be clearer. Why? Because it indicates that there is no email.<br>&gt; nil to me looks like it could be a null pointer that could have bad<br>&gt; consequences when accessed<br>&gt;<br>&gt; nil is special word that we are use to from other languages. It *sounds*<br>&gt; natural in this case because it is familiar.<br>&gt;<br>&gt; I am not familiar with JSON libraries, but I don’t think that should guide<br>&gt; the direction on which way to go.<br>&gt;<br>&gt; Also,* I am more specifically referring to nil with the use of optionals,<br>&gt; not NilLiteralConvertible:*<br>&gt;<br>&gt; let i: Int? = nil<br>&gt; let i: Int? = .none<br>&gt;<br>&gt; There are two ways to write the same thing with one being far clearer in<br>&gt; my opinion. What does nil mean in this case? It precisely represents<br>&gt; Optional&lt;Int&gt;.none making it somewhat redundant and surprising considering<br>&gt; how nil is used in other languages.<br>&gt;<br>&gt; More specifically, what is nil? 0? A pointer? A representation of nothing<br>&gt; (again implying none!)?<br>&gt;<br>&gt; I am very curious how new programmers coming to Swift as their first<br>&gt; language would react to using nil in other languages. I think they would be<br>&gt; very surprised.<br>&gt;<br>&gt;<br>&gt; Optional is the most significant example of NilLiteralConvertible, but<br>&gt; there are other users that would suffer from renaming. We could remove<br>&gt; NilLiteralConvertible at all, but look at the example in this case:<br>&gt;<br>&gt; let tree: JSON = [&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 20, &quot;email&quot;: JSON.nullValue]<br>&gt;<br>&gt;<br>&gt; This is somewhat more explicit and clearer in my opinion. Again, I am not<br>&gt; familiar with JSON libraries so this could be why it looks clearer to me.<br>&gt;<br>&gt; From your response, I see the words “nil”, “null”, and “none”. Doesn’t<br>&gt; this seem a little excessive and maybe confusing for people?<br>&gt;<br>&gt; Thanks,<br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt; That would hurt immersion of the DSL.<br>&gt;<br>&gt; I think some Core team member told that they intentionally keep two ways<br>&gt; of handling Optional: one using nil, and the other treating it like other<br>&gt; enums.<br>&gt;<br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/cf9270df/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
