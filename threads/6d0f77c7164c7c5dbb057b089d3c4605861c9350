<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2fb70545b76a189370508f75158fdc79?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Andreas Ley</string> &lt;andreas at ley.info&gt;<p>June 23, 2016 at 12:00:00pm</p></header><div class="content"><p>(First time using a mailing list; I hope this message ends up in the correct thread)<br></p><p>This is a topic that comes up regularly on the Swift evolution mailing list and off it.<br>After reading through all the respective threads again, there seem to be the following two camps:<br></p><p>Arguments made for crashing when accessing a non-existent index: <br>- fast<br>- shows bugs quickly <br></p><p>Arguments made in favor of returning an optional by default: <br>- safe (as in &quot;doesn&#39;t crash&quot;)<br>- similar to what other modern languages do<br>- what an unexperienced Swift developer would expect<br></p><p>All are valid arguments, but for different use cases. <br>In my opinion, the biggest problem is that there&#39;s no indication that subscripting can crash on the default array. Alternative subscripts for bounded access wouldn&#39;t solve this either.<br></p><p>Maybe Swift should have two different array classes: A fast, fast-failing &quot;UnsafeArray&quot; and a default safe &quot;Array&quot;. This would prevent unexpected crashes for new Swift programmers while still providing a faster alternative for those who do low-level stuff. The name &quot;UnsafeArray&quot; would clearly communicate that this class should be handled with care.<br></p><p>- Andreas<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 23, 2016 at 05:00:00am</p></header><div class="content"><p>On Thu, Jun 23, 2016 at 5:12 AM, Andreas Ley via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; (First time using a mailing list; I hope this message ends up in the<br>&gt; correct thread)<br>&gt;<br>&gt; This is a topic that comes up regularly on the Swift evolution mailing<br>&gt; list and off it.<br>&gt; After reading through all the respective threads again, there seem to be<br>&gt; the following two camps:<br>&gt;<br>&gt; Arguments made for crashing when accessing a non-existent index:<br>&gt; - fast<br>&gt; - shows bugs quickly<br>&gt;<br>&gt; Arguments made in favor of returning an optional by default:<br>&gt; - safe (as in &quot;doesn&#39;t crash&quot;)<br>&gt; - similar to what other modern languages do<br>&gt; - what an unexperienced Swift developer would expect<br>&gt;<br>&gt; All are valid arguments, but for different use cases.<br>&gt; In my opinion, the biggest problem is that there&#39;s no indication that<br>&gt; subscripting can crash on the default array. Alternative subscripts for<br>&gt; bounded access wouldn&#39;t solve this either.<br>&gt;<br>&gt; Maybe Swift should have two different array classes: A fast, fast-failing<br>&gt; &quot;UnsafeArray&quot; and a default safe &quot;Array&quot;. This would prevent unexpected<br>&gt; crashes for new Swift programmers while still providing a faster<br>&gt; alternative for those who do low-level stuff. The name &quot;UnsafeArray&quot; would<br>&gt; clearly communicate that this class should be handled with care.<br>&gt;<br></p><p>I can see where you&#39;re coming from, but IMO the ship has sailed to change<br>the performance characteristics of every array currently written in Swift.<br>Moreover, as Dave A. has pointed out before, crashing isn&#39;t &quot;unsafe&quot; in the<br>sense it&#39;s used in Swift. It&#39;s actually quite safe, in that you&#39;re<br>immediately prevented from doing anything nonsensical based on your<br>incorrect assumption. If I saw a type called UnsafeArray, I&#39;d imagine that<br>it&#39;d allow me to peek beyond the end of my array without crashing.<br></p><p><br>&gt;<br>&gt; - Andreas<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/fd1f7f46/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>Please find the related proposal which was formed after the long discussion <br>in the list:<br></p><p>https://github.com/luish/swift-evolution/blob/proposal-lenient-collection-subscripts/proposals/nnnn-more-lenient-collections-subscripts.md<br></p><p>Here is the pull request on the swift-evolution repo:<br>https://github.com/apple/swift-evolution/pull/328<br></p><p>On 23.06.2016 13:12, Andreas Ley via swift-evolution wrote:<br>&gt; (First time using a mailing list; I hope this message ends up in the correct thread)<br>&gt;<br>&gt; This is a topic that comes up regularly on the Swift evolution mailing list and off it.<br>&gt; After reading through all the respective threads again, there seem to be the following two camps:<br>&gt;<br>&gt; Arguments made for crashing when accessing a non-existent index:<br>&gt; - fast<br>&gt; - shows bugs quickly<br>&gt;<br>&gt; Arguments made in favor of returning an optional by default:<br>&gt; - safe (as in &quot;doesn&#39;t crash&quot;)<br>&gt; - similar to what other modern languages do<br>&gt; - what an unexperienced Swift developer would expect<br>&gt;<br>&gt; All are valid arguments, but for different use cases.<br>&gt; In my opinion, the biggest problem is that there&#39;s no indication that subscripting can crash on the default array. Alternative subscripts for bounded access wouldn&#39;t solve this either.<br>&gt;<br>&gt; Maybe Swift should have two different array classes: A fast, fast-failing &quot;UnsafeArray&quot; and a default safe &quot;Array&quot;. This would prevent unexpected crashes for new Swift programmers while still providing a faster alternative for those who do low-level stuff. The name &quot;UnsafeArray&quot; would clearly communicate that this class should be handled with care.<br>&gt;<br>&gt; - Andreas<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2fb70545b76a189370508f75158fdc79?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Andreas Ley</string> &lt;andreas at ley.info&gt;<p>June 23, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; Please find the related proposal which was formed after the long discussion in the list:<br>&gt; <br>&gt; https://github.com/luish/swift-evolution/blob/proposal-lenient-collection-subscripts/proposals/nnnn-more-lenient-collections-subscripts.md &lt;https://github.com/luish/swift-evolution/blob/proposal-lenient-collection-subscripts/proposals/nnnn-more-lenient-collections-subscripts.md&gt;<br></p><p>Thanks; I have seen this and other proposals, but none of them address the problem that most people don’t expect a crash when using subscripting – except for Erica’s excellent suggestion to make subscript throw, which would also require considerable changes to existing code.<br></p><p>- Andreas<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/f1e9cfcd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>On 23.06.2016 15:48, Andreas Ley wrote:<br>&gt;&gt; Please find the related proposal which was formed after the long<br>&gt;&gt; discussion in the list:<br>&gt;&gt;<br>&gt;&gt; https://github.com/luish/swift-evolution/blob/proposal-lenient-collection-subscripts/proposals/nnnn-more-lenient-collections-subscripts.md<br>&gt;<br>&gt;&gt;<br>&gt; Thanks; I have seen this and other proposals, but none of them address<br>&gt; the problem that most people don’t expect a crash when using<br></p><p>&quot;..*most* people don’t expect..&quot; could you prove this please? Perhaps you <br>want to say *many* people. Probably. But the same many people expect this. <br>Especially if they know a little of C language or other language that don&#39;t <br>allow to use wrong indexes for arrays.<br></p><p>Also, why they don&#39;t expect this when writing in Swift? This behavior <br>described in help/documentation/tutorial for Swift, this is how Swift works <br>with arrays.<br></p><p>&gt; subscripting – except for Erica’s excellent suggestion to make subscript<br>&gt; throw, which would also require considerable changes to existing code.<br></p><p>I&#39;m not sure about this idea. Still - if you&#39;ll use wrong index your <br>program will crash by thrown exception. Or I don&#39;t understand the suggestion.<br></p><p>&gt;<br>&gt; - Andreas<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2fb70545b76a189370508f75158fdc79?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Andreas Ley</string> &lt;andreas at ley.info&gt;<p>June 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; &quot;..*most* people don’t expect..&quot; could you prove this please?<br></p><p>I should have written “most people I know” or “the people I work with&quot;.<br></p><p>&gt; Especially if they know a little of C language or other language that don&#39;t allow to use wrong indexes for arrays.<br></p><p>Maybe that’s the point: They don’t. And it is my understanding that they shouldn’t need to; that Swift should be for everyone and a great language to get into programming.<br></p><p>&gt; This behavior described in help/documentation/tutorial for Swift, this is how Swift works with arrays.<br></p><p>Yes, and I agree with you that people should read the documentation.<br>However, the question is: Is this behavior optimal? Is a runtime error really the best way to handle this for the most common use case of arrays?<br>But the definition of “most common use case” varies wildly. Hence my idea to have separate classes for separate needs.<br></p><p>In the end, what’s most important to me is to be able to have a consistent mental model. Something simple like: If I’m using classes called “unsafe” or exclamation marks, my app might experience runtime errors. That’s something the students I’ve taught could understand easily.<br></p><p>- Andreas<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/a3b4b6fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 4:52 PM, Andreas Ley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; &quot;..*most* people don’t expect..&quot; could you prove this please?<br>&gt; <br>&gt; I should have written “most people I know” or “the people I work with&quot;.<br>&gt; <br>&gt;&gt; Especially if they know a little of C language or other language that don&#39;t allow to use wrong indexes for arrays.<br>&gt; <br>&gt; Maybe that’s the point: They don’t. And it is my understanding that they shouldn’t need to; that Swift should be for everyone and a great language to get into programming.<br>&gt; <br>&gt;&gt; This behavior described in help/documentation/tutorial for Swift, this is how Swift works with arrays.<br>&gt; <br>&gt; Yes, and I agree with you that people should read the documentation.<br>&gt; However, the question is: Is this behavior optimal? Is a runtime error really the best way to handle this for the most common use case of arrays?<br></p><p>Yes. If you are reaching out of bounds of the array, there is a computation error (most likely) and the app is in an incosistent state and it&#39;s always better to crash than to pretend it&#39;s all OK and potentially do some harm to user&#39;s data.<br></p><p>If the getter returned an optional, most people would get annoyed really quickly and started just placing ! everywhere, which would make the code the same, without the diagnostic message which index was accessed.<br></p><p>There is only a handful of usecases where it is advantageous to have the behavior described and no one can stop you from creating an extension and adding an accessor method that returns an optional.<br></p><p>AFAIK I don&#39;t know any language that is as strongly typed as Swift whose default behavior would be allowing to reach our of the bounds without a runtime error.<br></p><p>&gt; But the definition of “most common use case” varies wildly. Hence my idea to have separate classes for separate needs.<br>&gt; <br>&gt; In the end, what’s most important to me is to be able to have a consistent mental model. Something simple like: If I’m using classes called “unsafe” or exclamation marks, my app might experience runtime errors. That’s something the students I’ve taught could understand easily.<br>&gt; <br>&gt; - Andreas<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/3935d9e9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Arrays Returning Optionals instead of Index Out of Bounds</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 23, 2016 at 12:00:00pm</p></header><div class="content"><p>I still think the best solution is that proposal, plus allowing subscript setters to take a T if their getters return a T? or T!, to avoid the problem of `nil` becoming the wrong type in cases where T itself is NilLiteralConvertible.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jun 23, 2016, at 7:34 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Please find the related proposal which was formed after the long discussion in the list:<br>&gt; <br>&gt; https://github.com/luish/swift-evolution/blob/proposal-lenient-collection-subscripts/proposals/nnnn-more-lenient-collections-subscripts.md<br>&gt; <br>&gt; Here is the pull request on the swift-evolution repo:<br>&gt; https://github.com/apple/swift-evolution/pull/328<br>&gt; <br>&gt; On 23.06.2016 13:12, Andreas Ley via swift-evolution wrote:<br>&gt;&gt; (First time using a mailing list; I hope this message ends up in the correct thread)<br>&gt;&gt; <br>&gt;&gt; This is a topic that comes up regularly on the Swift evolution mailing list and off it.<br>&gt;&gt; After reading through all the respective threads again, there seem to be the following two camps:<br>&gt;&gt; <br>&gt;&gt; Arguments made for crashing when accessing a non-existent index:<br>&gt;&gt; - fast<br>&gt;&gt; - shows bugs quickly<br>&gt;&gt; <br>&gt;&gt; Arguments made in favor of returning an optional by default:<br>&gt;&gt; - safe (as in &quot;doesn&#39;t crash&quot;)<br>&gt;&gt; - similar to what other modern languages do<br>&gt;&gt; - what an unexperienced Swift developer would expect<br>&gt;&gt; <br>&gt;&gt; All are valid arguments, but for different use cases.<br>&gt;&gt; In my opinion, the biggest problem is that there&#39;s no indication that subscripting can crash on the default array. Alternative subscripts for bounded access wouldn&#39;t solve this either.<br>&gt;&gt; <br>&gt;&gt; Maybe Swift should have two different array classes: A fast, fast-failing &quot;UnsafeArray&quot; and a default safe &quot;Array&quot;. This would prevent unexpected crashes for new Swift programmers while still providing a faster alternative for those who do low-level stuff. The name &quot;UnsafeArray&quot; would clearly communicate that this class should be handled with care.<br>&gt;&gt; <br>&gt;&gt; - Andreas<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
