<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f64d9558601ff253a2faf75455059df6?s=50"></div><header><strong>Normalizing operator&#39;s types</strong> from <string>J. Charles M. N.</string> &lt;jcharles.nmbiada at me.com&gt;<p>June 16, 2016 at 06:00:00pm</p></header><div class="content"><p>--<br>J. Charles <br></p><p>Le 16 juin 2016 à 15:57, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; a écrit :<br></p><p><br>On 15 Jun 2016, at 21:07, J. Charles N. MBIADA via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Hi Swift,<br></p><p>Since the &quot;removal&quot; of curried function, I am looking for some elegant ways to work with partial functions (and reduce creation of closure and nested func for the developper).<br></p><p>And now I am asking myself if it&#39;s not better to align operator&#39;s types to the arrow style instead of using tuple argument style.<br></p><p>For example:<br>Why Int.multiplyWithOverflow&#39;s type is (Int, Int) -&gt; (Int, overflow: Bool) instead of (Int -&gt; Int) -&gt; (Int, overflow: Bool)<br></p><p>That looks wrong to me. That says that Int.multiplyWithOverflow is a function that takes another function (of type (Int) -&gt; Int) and returns a tuple.<br></p><p>Function which takes a function require parenthesis as you showed up: (Int) -&gt; Int I am saying that using this fact, we can bring back auto curried function by eliminating parenthesis.<br>Int -&gt; Int -&gt; Int will be interpreted as a func which permit to generate partial function when arguments are missing.<br></p><p><br>What you really want is a function that takes an Int and returns another function that takes an Int and returns the tuple i.e. its signature would look like this<br></p><p>(Int) -&gt; ((Int) -&gt; (Int, Bool))<br></p><p>This last one will be interpreted as a final function which need exactly one parameter to be valid when it&#39;s called.<br></p><p>Plus seeing the example below work show how things are not clear if programmers doesn&#39;t want to go in a deep understanding of the language.. But it works well...<br></p><p>func f(_ arg: (Int, Int)) -&gt; Int { return arg.0 + arg.1 } // type :  (Int, Int) -&gt; Int<br>f(4,5) // returns 9<br>f((4,56)) // returns 60<br></p><p>func g(_ arg: Int, _ a: Int) -&gt; Int { return arg + a } // type : (Int, Int) -&gt; Int<br>g(4, 5) // returns 9<br>g((4,56)) // fails<br>// Ok putting label could help to distinguish but <br>func f( a:Int,  b:Int) -&gt; Int { return a + b } and func h(_ arg: (a:Int, b:Int)) -&gt; Int { return arg.0 + arg.1 } still has the same type<br></p><p>Clearifying this situation IMHO seem to me as complicated  (maybe more) as clarifying Int -&gt; Int -&gt; Int. Explaining the lambda concept once should be sufficient to clarify this one. Explaining Tuple concept could not help to clarify the behavior of the example above.<br></p><p><br>If we assume -&gt; is right associative we can simplify to<br></p><p>(Int) -&gt; (Int) -&gt; (Int, Bool)<br></p><p>Chris proposal to enforce parenthesis around arguments could be the opportunity to use that syntax to distinct curried functions from the others. <br>Then (Int) -&gt; (Int) -&gt; (Int, Bool) is valid and say that full implementation was handled by the developer since Int -&gt; Int -&gt; (Int, Bool) is valid too but some workaround could be handled by the compiler.<br>Making these functions some how different in programmer&#39;s intent. <br>fun f(a:Int, b:Int) -&gt; Int { return (a/b, a%b != 0)} has type Int -&gt; Int -&gt; (Int, Bool)<br>and h(a:Int) -&gt; Int { return { b:Int in return (a/b, a%b != 0)} } has type (Int) -&gt; (Int -&gt; (Int, Bool))<br></p><p>f(4, 5); f(4)(5) // OK<br>h(4)(5) // OK<br>h(4, 5) // fails, or why not works as well<br></p><p>f(a:Int) -&gt; Int { return { b:Int in return (a/b, a%b != 0)} } has type (Int) -&gt; (Int -&gt; (Int, Bool))<br>Of course this need to be refined and formalized.<br></p><p>which makes more sense but is less clear to most programmers than the current syntax. <br></p><p>In my opinion, what are clear for programmers are what they understand, a reference section explaining these concepts could do the work of clarifying things.<br></p><p><br>When curried function will come back (if it come back, which is a personal hope) that will avoid many refactoring.<br></p><p>I think that, write this : let f:(Int, Int) throws -&gt; Int = (+) seem a bit ugly for this purpose<br>let f:(Int -&gt; Int) -&gt; Int = (+) seem more suitable.<br></p><p>We could imagine that in the future the compile could automatically create a closure if the programmer define something like<br></p><p>let lmul: (Int) -&gt; (Int) -&gt; (Int) = (*)<br></p><p>and then, doing the habitual stuffs : let mulOfTwo = lmul(2)<br></p><p><br>Kind regards,<br>--<br>jcnm<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/9894f051/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Normalizing operator&#39;s types</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 16, 2016 at 09:00:00pm</p></header><div class="content"><p>Just checked with Swift 3.0 (Jun 6, 2016),<br></p><p>func f(_ arg: (Int, Int)) -&gt; Int { return arg.0 + arg.1 } // type :  (Int, <br>Int) -&gt; Int<br></p><p>This won&#39;t compile:<br>f(4, 5) // returns 9<br>ERROR : extra argument in call<br></p><p>This works as expected:<br>f((4,56)) // returns 60<br></p><p>On 16.06.2016 21:08, J. Charles N. MBIADA via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt; --<br>&gt; J. Charles<br>&gt;<br>&gt;&gt; Le 16 juin 2016 à 15:57, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt;<br>&gt;&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On 15 Jun 2016, at 21:07, J. Charles N. MBIADA via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hi Swift,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Since the &quot;removal&quot; of curried function, I am looking for some elegant<br>&gt;&gt;&gt; ways to work with partial functions (and reduce creation of closure and<br>&gt;&gt;&gt; nested func for the developper).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And now I am asking myself if it&#39;s not better to align operator&#39;s types<br>&gt;&gt;&gt; to the arrow style instead of using tuple argument style.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; Why Int.multiplyWithOverflow&#39;s type is (Int, Int) -&gt; (Int, overflow:<br>&gt;&gt;&gt; Bool) instead of (Int -&gt; Int) -&gt; (Int, overflow: Bool)<br>&gt;&gt;<br>&gt;&gt; That looks wrong to me. That says that Int.multiplyWithOverflow is a<br>&gt;&gt; function that takes another function (of type (Int) -&gt; Int) and returns a<br>&gt;&gt; tuple.<br>&gt;&gt;<br>&gt; Function which takes a function require parenthesis as you showed up: (Int)<br>&gt; -&gt; Int I am saying that using this fact, we can bring back auto curried<br>&gt; function by eliminating parenthesis.<br>&gt; Int -&gt; Int -&gt; Int will be interpreted as a func which permit to generate<br>&gt; partial function when arguments are missing.<br>&gt;<br>&gt;<br>&gt;&gt; What you really want is a function that takes an Int and returns another<br>&gt;&gt; function that takes an Int and returns the tuple i.e. its signature would<br>&gt;&gt; look like this<br>&gt;&gt;<br>&gt;&gt; (Int) -&gt; ((Int) -&gt; (Int, Bool))<br>&gt;&gt;<br>&gt; This last one will be interpreted as a final function which need exactly<br>&gt; one parameter to be valid when it&#39;s called.<br>&gt;<br>&gt; Plus seeing the example below work show how things are not clear if<br>&gt; programmers doesn&#39;t want to go in a deep understanding of the language..<br>&gt; But it works well...<br>&gt;<br>&gt; func f(_ arg: (Int, Int)) -&gt; Int { return arg.0 + arg.1 } // type :  (Int,<br>&gt; Int) -&gt; Int<br>&gt;<br>&gt; f(4,5) // returns 9<br>&gt;<br>&gt; f((4,56)) // returns 60<br>&gt;<br>&gt;<br>&gt; func g(_ arg: Int, _ a: Int) -&gt; Int { return arg + a } // type : (Int, Int)<br>&gt; -&gt; Int<br>&gt;<br>&gt; g(4, 5) // returns 9<br>&gt;<br>&gt; g((4,56)) // fails<br>&gt;<br>&gt; // Ok putting label could help to distinguish but<br>&gt;<br>&gt; func f( a:Int,  b:Int) -&gt; Int { return a + b } and func h(_ arg: (a:Int,<br>&gt; b:Int)) -&gt; Int { return arg.0 + arg.1 } still has the same type<br>&gt;<br>&gt;<br>&gt; Clearifying this situation IMHO seem to me as complicated  (maybe more) as<br>&gt; clarifying Int -&gt; Int -&gt; Int. Explaining the lambda concept once should be<br>&gt; sufficient to clarify this one. Explaining Tuple concept could not help to<br>&gt; clarify the behavior of the example above.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; If we assume -&gt; is right associative we can simplify to<br>&gt;&gt;<br>&gt;&gt; (Int) -&gt; (Int) -&gt; (Int, Bool)<br>&gt;<br>&gt; Chris proposal to enforce parenthesis around arguments could be the<br>&gt; opportunity to use that syntax to distinct curried functions from the others.<br>&gt; Then (Int) -&gt; (Int) -&gt; (Int, Bool) is valid and say that full<br>&gt; implementation was handled by the developer since Int -&gt; Int -&gt; (Int, Bool)<br>&gt; is valid too but some workaround could be handled by the compiler.<br>&gt; Making these functions some how different in programmer&#39;s intent.<br>&gt; fun f(a:Int, b:Int) -&gt; Int { return (a/b, a%b != 0)} has type Int -&gt; Int -&gt;<br>&gt; (Int, Bool)<br>&gt; and h(a:Int) -&gt; Int { return { b:Int in return (a/b, a%b != 0)} } has type<br>&gt; (Int) -&gt; (Int -&gt; (Int, Bool))<br>&gt;<br>&gt; f(4, 5); f(4)(5) // OK<br>&gt; h(4)(5) // OK<br>&gt; h(4, 5) // fails, or why not works as well<br>&gt;<br>&gt; f(a:Int) -&gt; Int { return { b:Int in return (a/b, a%b != 0)} } has type<br>&gt; (Int) -&gt; (Int -&gt; (Int, Bool))<br>&gt; Of course this need to be refined and formalized.<br>&gt;<br>&gt;&gt; which makes more sense but is less clear to most programmers than the<br>&gt;&gt; current syntax.<br>&gt;<br>&gt; In my opinion, what are clear for programmers are what they understand, a<br>&gt; reference section explaining these concepts could do the work of clarifying<br>&gt; things.<br>&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When curried function will come back (if it come back, which is a<br>&gt;&gt;&gt; personal hope) that will avoid many refactoring.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think that, write this : let f:(Int, Int) throws -&gt; Int = (+) seem a<br>&gt;&gt;&gt; bit ugly for this purpose<br>&gt;&gt;&gt; let f:(Int -&gt; Int) -&gt; Int = (+) seem more suitable.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We could imagine that in the future the compile could automatically<br>&gt;&gt;&gt; create a closure if the programmer define something like<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let lmul: (Int) -&gt; (Int) -&gt; (Int) = (*)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; and then, doing the habitual stuffs : let mulOfTwo = lmul(2)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Kind regards,<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; jcnm<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
