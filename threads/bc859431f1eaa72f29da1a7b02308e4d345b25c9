<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>[Pitch] Add `mapValues` method to Dictionary</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>May 24, 2016 at 09:00:00pm</p></header><div class="content"><p>Nate Cook via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; <br>&gt; <br>&gt; &gt; On May 24, 2016, at 7:43 AM, Matthew Johnson via swift-evolution<br>&lt;swift-evolution &lt;at&gt; swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Sent from my iPad<br>&gt; &gt; <br>&gt; &gt; On May 24, 2016, at 12:59 AM, Brent Royal-Gordon via swift-evolution<br>&lt;swift-evolution &lt;at&gt; swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt;&gt;&gt; I have a small remark though, wouldn’t it be better to let transform<br>be of type (Key, Value) throws -&gt; T<br>&gt; instead of (Value) throws -&gt; T? You can just ignore the key (with _) if<br>you don’t need it, but I think it<br>&gt; might come in handy in some cases.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; The problem is, that closes the door to writing many simple maps in<br>functional style. For instance, this:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;   dictionaryOfNumbers.mapValues(abs)<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Would have to become this:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;   dictionaryOfNumbers.mapValues { _, v in abs(v) }<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; (It *might* be possible to do it with `$1`, but I&#39;m not sure; there are<br>some limitations around that.)<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; A value-value map is just simpler and cleaner, while almost always<br>giving you what you need.<br>&gt; &gt; <br>&gt; &gt; +1.  <br>&gt; &gt; <br>&gt; &gt; I don&#39;t think I have ever mapped keys.  Incidentally, that doesn&#39;t have<br>the usual semantics of a map<br>&gt; operation as you can produce duplicate keys.<br>&gt; <br>&gt; I think this conversation suffers from not knowing whether Dictionary is<br>going to receive a<br>&gt; sequence-based initializer. There&#39;s been a proposal for that in the PR<br>queue for quite a while. Could<br>&gt; someone in the core team please either merge or close that proposal?<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/pull/125<br></p><p>+1 for scheduling that proposal!<br></p><p>&gt; <br>&gt; If there&#39;s no sequence-based init, mapValues should probably produce a new<br>Dictionary. If there is,<br>&gt; having mapValues produce a dictionary would be redundant. I&#39;d rather see a<br>MapDictionary type that wraps<br>&gt; a dictionary and only evaluates the transformation on access, rather than<br>eagerly allocating storage<br>&gt; and performing all the transformations.<br></p><p>I don&#39;t think it would be redundant, because producing a new Dictionary from<br>a Sequence should have complexity O(N log N) if I&#39;m not mistaken, while in<br>principle mapValues() could be implemented more efficiently, producing a new<br>Dictionary with the same structure and different values with just O(N)<br>complexity.<br></p><p>Nicola<br></p><p>&gt; <br>&gt; You can take a look at a rudimentary MapDictionary in this gist:<br>https://gist.github.com/natecook1000/7cfc5c04f18237066f7aca6e9658f276<br>&gt; <br>&gt; Best,<br>&gt; Nate<br>&gt; <br>&gt; &gt;&gt; -- <br>&gt; &gt;&gt; Brent Royal-Gordon<br>&gt; &gt;&gt; Architechies<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution &lt;at&gt; swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution &lt;at&gt; swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution &lt;at&gt; swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
