<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 26, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br></p><p>enum DispatchQOS {<br>  case UserInteractive<br>  case UserInitiated<br>  case Default<br>  case Utility<br>  case Background<br>}<br></p><p>If we’re lowerCamelCasting enum cases, this becomes:<br></p><p>enum DispatchQOS {<br>  case userInteractive<br>  case userInitiated<br>  case `default`<br>  case utility<br>  case background<br>}<br></p><p>Note the back-ticks, which are also needed at the call site:<br></p><p>	func dispatch(priority priority: <br></p><p>	dispatch(priority: .`default`) { … }<br></p><p>We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br></p><p>	func dispatch(priority priority: <br></p><p>	dispatch(priority: .`default`) { … }<br></p><p>One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/b70b5b9b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 26, 2016 at 04:00:00pm</p></header><div class="content"><p>I honestly like upper camel. I know my reasons are linguistically unsupported: static members are not types. But it seems to me that a union type, the fully qualified Type.EnumerationCase specifies the memory layout of how the type is realized. <br></p><p>Still, I like upper camel. I also like upper case for global functions and constants.<br></p><p>-- E, out of step, out of sync<br></p><p><br></p><p>&gt; On Feb 26, 2016, at 1:43 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt; <br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt; <br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/bed4b143/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>February 27, 2016 at 11:00:00pm</p></header><div class="content"><p>I’m with Erica on this one. Enum cases to me feel like datatype constructors, and not as members as such (for instance enum Tree { Leaf, Branch }). It makes them stand out more when deconstructing in switch statements. I think it’s unfortunate to switch to lowerCamel.<br> <br>—Sune<br></p><p>&gt; On 27 Feb 2016, at 00:27, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I honestly like upper camel. I know my reasons are linguistically unsupported: static members are not types. But it seems to me that a union type, the fully qualified Type.EnumerationCase specifies the memory layout of how the type is realized. <br>&gt; <br>&gt; Still, I like upper camel. I also like upper case for global functions and constants.<br>&gt; <br>&gt; -- E, out of step, out of sync<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>February 26, 2016 at 08:00:00pm</p></header><div class="content"><p>Le 26 févr. 2016 à 15:43, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt; <br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt; <br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br></p><p>Another idea is to replace the keyword default with something else. The only place it can occur is within a switch statement, right? We already have a synonym: case _<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/d35973ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February 26, 2016 at 10:00:00pm</p></header><div class="content"><p>+1 upper camel.<br></p><p>-Van<br></p><p>On Fri, Feb 26, 2016 at 10:12 PM, Michel Fortin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Le 26 févr. 2016 à 15:43, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; As part of the grand API guidelines discussion, there was a lot of support<br>&gt; for using lowerCamelCase for enum cases, because they are values in Swift.<br>&gt; One unfortunate wrinkle here is that it’s not at all uncommon to have a<br>&gt; case named “Default” for an enumeration. One example pulled randomly from<br>&gt; GitHub:<br>&gt;<br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt;<br>&gt;<br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt;<br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt;<br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt;<br>&gt; func dispatch(priority priority:<br>&gt;<br>&gt; dispatch(priority: .`default`) { … }<br>&gt;<br>&gt; We could allow one to refer to keywords without back-ticks following a<br>&gt; “.”, similarly to the way we allow keywords without back-ticks preceding a<br>&gt; ‘:’ for argument labels, e.g.:<br>&gt;<br>&gt; func dispatch(priority priority:<br>&gt;<br>&gt; dispatch(priority: .`default`) { … }<br>&gt;<br>&gt; One would still need to use back-ticks in the declaration of the case, but<br>&gt; at least uses would be back-tick-free. Thoughts?<br>&gt;<br>&gt;<br>&gt; Another idea is to replace the keyword default with something else. The<br>&gt; only place it can occur is within a switch statement, right? We already<br>&gt; have a synonym: case _<br>&gt;<br>&gt; --<br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/1eea2b51/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0cfe9bf4dd7fbabba043597960b120d?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Joel Lopes Da Silva</string> &lt;lopesdasilva at apple.com&gt;<p>February 26, 2016 at 05:00:00pm</p></header><div class="content"><p>I agree with Michel that we might as well standardize on &quot;case _&quot; instead of “default”. This way, we wouldn’t even require the back-ticks in the enum case definition in this one case.<br></p><p>But I also like Doug’s proposal, because it could apply nicely to other language keyword (such as switch).<br></p><p>-- <br>Joel Lopes Da Silva<br></p><p><br>&gt; On Feb 26, 2016, at 5:12 PM, Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Le 26 févr. 2016 à 15:43, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br>&gt;&gt; <br>&gt;&gt; enum DispatchQOS {<br>&gt;&gt;   case UserInteractive<br>&gt;&gt;   case UserInitiated<br>&gt;&gt;   case Default<br>&gt;&gt;   case Utility<br>&gt;&gt;   case Background<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt;&gt; <br>&gt;&gt; enum DispatchQOS {<br>&gt;&gt;   case userInteractive<br>&gt;&gt;   case userInitiated<br>&gt;&gt;   case `default`<br>&gt;&gt;   case utility<br>&gt;&gt;   case background<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Note the back-ticks, which are also needed at the call site:<br>&gt;&gt; <br>&gt;&gt; 	func dispatch(priority priority: <br>&gt;&gt; <br>&gt;&gt; 	dispatch(priority: .`default`) { … }<br>&gt;&gt; <br>&gt;&gt; We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br>&gt;&gt; <br>&gt;&gt; 	func dispatch(priority priority: <br>&gt;&gt; <br>&gt;&gt; 	dispatch(priority: .`default`) { … }<br>&gt;&gt; <br>&gt;&gt; One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br>&gt; <br>&gt; Another idea is to replace the keyword default with something else. The only place it can occur is within a switch statement, right? We already have a synonym: case _<br>&gt; <br>&gt; -- <br>&gt; Michel Fortin<br>&gt; https://michelf.ca &lt;https://michelf.ca/&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160226/b8185547/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 28, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 for lower camel &amp; case _<br></p><p>On Saturday, 27 February 2016, Joel Lopes Da Silva via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I agree with Michel that we might as well standardize on &quot;case _&quot; instead<br>&gt; of “default”. This way, we wouldn’t even require the back-ticks in the enum<br>&gt; case definition in this one case.<br>&gt;<br>&gt; But I also like Doug’s proposal, because it could apply nicely to other<br>&gt; language keyword (such as switch).<br>&gt;<br>&gt; --<br>&gt; Joel Lopes Da Silva<br>&gt;<br>&gt;<br>&gt; On Feb 26, 2016, at 5:12 PM, Michel Fortin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Le 26 févr. 2016 à 15:43, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; a écrit :<br>&gt;<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; As part of the grand API guidelines discussion, there was a lot of support<br>&gt; for using lowerCamelCase for enum cases, because they are values in Swift.<br>&gt; One unfortunate wrinkle here is that it’s not at all uncommon to have a<br>&gt; case named “Default” for an enumeration. One example pulled randomly from<br>&gt; GitHub:<br>&gt;<br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt;<br>&gt;<br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt;<br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt;<br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt;<br>&gt; func dispatch(priority priority:<br>&gt;<br>&gt; dispatch(priority: .`default`) { … }<br>&gt;<br>&gt; We could allow one to refer to keywords without back-ticks following a<br>&gt; “.”, similarly to the way we allow keywords without back-ticks preceding a<br>&gt; ‘:’ for argument labels, e.g.:<br>&gt;<br>&gt; func dispatch(priority priority:<br>&gt;<br>&gt; dispatch(priority: .`default`) { … }<br>&gt;<br>&gt; One would still need to use back-ticks in the declaration of the case, but<br>&gt; at least uses would be back-tick-free. Thoughts?<br>&gt;<br>&gt;<br>&gt; Another idea is to replace the keyword default with something else. The<br>&gt; only place it can occur is within a switch statement, right? We already<br>&gt; have a synonym: case _<br>&gt;<br>&gt; --<br>&gt; Michel Fortin<br>&gt; https://michelf.ca<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160228/a698533e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 27, 2016 at 02:00:00pm</p></header><div class="content"><p>+1, that makes a lot of sense.<br></p><p>Q: Is `case default` in enum context ambiguous? In case I’m forgetting something, `default` is only used in `switch` contexts. So… couldn’t we make the keyword context dependent?<br></p><p>— Radek<br></p><p>&gt; On 26 Feb 2016, at 21:43, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt; <br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt; <br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/9291e590/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 27, 2016 at 02:00:00pm</p></header><div class="content"><p>I meant “Unless I’m forgetting something”, uh :/<br></p><p>— Radek<br></p><p>&gt; On 27 Feb 2016, at 14:37, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; +1, that makes a lot of sense.<br>&gt; <br>&gt; Q: Is `case default` in enum context ambiguous? In case I’m forgetting something, `default` is only used in `switch` contexts. So… couldn’t we make the keyword context dependent?<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 26 Feb 2016, at 21:43, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br>&gt;&gt; <br>&gt;&gt; enum DispatchQOS {<br>&gt;&gt;   case UserInteractive<br>&gt;&gt;   case UserInitiated<br>&gt;&gt;   case Default<br>&gt;&gt;   case Utility<br>&gt;&gt;   case Background<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt;&gt; <br>&gt;&gt; enum DispatchQOS {<br>&gt;&gt;   case userInteractive<br>&gt;&gt;   case userInitiated<br>&gt;&gt;   case `default`<br>&gt;&gt;   case utility<br>&gt;&gt;   case background<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Note the back-ticks, which are also needed at the call site:<br>&gt;&gt; <br>&gt;&gt; 	func dispatch(priority priority: <br>&gt;&gt; <br>&gt;&gt; 	dispatch(priority: .`default`) { … }<br>&gt;&gt; <br>&gt;&gt; We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br>&gt;&gt; <br>&gt;&gt; 	func dispatch(priority priority: <br>&gt;&gt; <br>&gt;&gt; 	dispatch(priority: .`default`) { … }<br>&gt;&gt; <br>&gt;&gt; One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/aaef0a23/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 8:37 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1, that makes a lot of sense.<br>&gt; <br>&gt; Q: Is `case default` in enum context ambiguous? In case I’m forgetting something, `default` is only used in `switch` contexts. So… couldn’t we make the keyword context dependent?<br></p><p>According to the grammar, `default` is indeed only used in `switch`: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/default-label<br></p><p>I have two thoughts:<br></p><p>1. Is it possible to reconsider reusing another keyword, `else`, as Ruby does?<br></p><p>2. Could the parser scan the leading `.` to prevent the need for escaping cases named &quot;default&quot;, or would this unnecessarily complicate the compiler?<br></p><p>--<br>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 27, 2016 at 05:00:00pm</p></header><div class="content"><p>I do like `else` — it still reads naturally with the list of cases, maybe is even superior to `default`.<br></p><p>I think part of `default`s appeal (vs just removing it and mandating `case _`), is that default is familiar and used in a lot of languages (I don’t know of anything but Ruby that would use else in this context)<br></p><p>Still, `else` doesn&#39;t require understanding of wildcards or other pattern matching syntax details, which is good on this axis, and is also familiar, just isn’t used in this context in most languages.<br></p><p>&gt; 2. Could the parser scan the leading `.` to prevent the need for escaping cases named &quot;default&quot;, or would this unnecessarily complicate the compiler?<br></p><p>I’m sorry, I’m confused — I thought that was the whole point of the OP’s idea?<br></p><p>— Radek<br></p><p>&gt; On 27 Feb 2016, at 15:05, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 8:37 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1, that makes a lot of sense.<br>&gt;&gt; <br>&gt;&gt; Q: Is `case default` in enum context ambiguous? In case I’m forgetting something, `default` is only used in `switch` contexts. So… couldn’t we make the keyword context dependent?<br>&gt; <br>&gt; According to the grammar, `default` is indeed only used in `switch`: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/default-label<br>&gt; <br>&gt; I have two thoughts:<br>&gt; <br>&gt; 1. Is it possible to reconsider reusing another keyword, `else`, as Ruby does?<br>&gt; <br>&gt; 2. Could the parser scan the leading `.` to prevent the need for escaping cases named &quot;default&quot;, or would this unnecessarily complicate the compiler?<br>&gt; <br>&gt; --<br>&gt; Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 11:38 AM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; 2. Could the parser scan the leading `.` to prevent the need for escaping cases named &quot;default&quot;, or would this unnecessarily complicate the compiler?<br>&gt; <br>&gt; I’m sorry, I’m confused — I thought that was the whole point of the OP’s idea?<br></p><p>I was pre-coffee and my internal parser/scanner was buggy. Sorry!<br></p><p>Stephen<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 27, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 27, 2016, at 6:05 AM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 27, 2016, at 8:37 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1, that makes a lot of sense.<br>&gt;&gt; <br>&gt;&gt; Q: Is `case default` in enum context ambiguous? In case I’m forgetting something, `default` is only used in `switch` contexts. So… couldn’t we make the keyword context dependent?<br>&gt; <br>&gt; According to the grammar, `default` is indeed only used in `switch`: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/default-label<br>&gt; <br>&gt; I have two thoughts:<br>&gt; <br>&gt; 1. Is it possible to reconsider reusing another keyword, `else`, as Ruby does?<br>&gt; <br>&gt; 2. Could the parser scan the leading `.` to prevent the need for escaping cases named &quot;default&quot;, or would this unnecessarily complicate the compiler?<br></p><p>“default” isn’t core to Doug’s proposal.  There are other keywords that are problematic as well, particularly as we start importing more and more global constants as members (because of https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md).<br></p><p>Besides that, we’ve talked about default before: https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md  We could definitely make it context sensitive within refutable patterns (or something) but this doesn’t define away the need for something like Doug’s proposal.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 28, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 28, 2016, at 12:58 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; “default” isn’t core to Doug’s proposal.  There are other keywords that are problematic as well, particularly as we start importing more and more global constants as members (because of https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md).<br>&gt; <br>&gt; Besides that, we’ve talked about default before: https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md  We could definitely make it context sensitive within refutable patterns (or something) but this doesn’t define away the need for something like Doug’s proposal.<br></p><p>Understood and agreed! I&#39;m definitely in favor of the proposal as it stands and did not mean to derail the conversation.<br></p><p>Stephen<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 29, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; Besides that, we’ve talked about default before: https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br></p><p>Chris, my understanding is that the commonly proposed list is not a ban on certain topics, but merely a statement that those topics have been considered before and anyone reintroducing the topic should be certain they have something new to say. Surely &quot;This other change we&#39;re implementing makes this syntactically ambiguous&quot; would qualify?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 29, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 29, 2016, at 4:20 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Besides that, we’ve talked about default before: https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br>&gt; <br>&gt; Chris, my understanding is that the commonly proposed list is not a ban on certain topics, but merely a statement that those topics have been considered before and anyone reintroducing the topic should be certain they have something new to say.<br></p><p>Yep, absolutely.<br></p><p>&gt; Surely &quot;This other change we&#39;re implementing makes this syntactically ambiguous&quot; would qualify?<br></p><p>Yes it does.  The problem is (and Doug’s email didn’t make this clear enough…) that default isn’t the only problem here.  There are several different keywords that cause conflicts.<br></p><p>In any case, I’m sorry if my response was overly strong and negative.  I didn’t intend to curtail a positive discussion!<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 27, 2016 at 07:00:00am</p></header><div class="content"><p>Keywords following dots not requiring backticks also seems a valid option.<br></p><p>More of a meta-comment:<br> 1. Default was actually a poor name choice for an enumeration case given the meaning of ‘default’ in the language. Some might say this name choice is now being escalated<br> 2. Default has always been a restrictive term to have as a keyword, although it is only really required to be considered a keyword in one place<br></p><p>I personally would be fine with switching ‘default’ for ‘else’, as another evolutionator suggested. I don’t remember if this was proposed previously, or if that was only the idea of ‘case _:’, which I’m not really in favor of.<br></p><p>-DW<br></p><p>&gt; On Feb 26, 2016, at 1:43 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; As part of the grand API guidelines discussion, there was a lot of support for using lowerCamelCase for enum cases, because they are values in Swift. One unfortunate wrinkle here is that it’s not at all uncommon to have a case named “Default” for an enumeration. One example pulled randomly from GitHub:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt; <br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt; <br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt; <br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; We could allow one to refer to keywords without back-ticks following a “.”, similarly to the way we allow keywords without back-ticks preceding a ‘:’ for argument labels, e.g.:<br>&gt; <br>&gt; 	func dispatch(priority priority: <br>&gt; <br>&gt; 	dispatch(priority: .`default`) { … }<br>&gt; <br>&gt; One would still need to use back-ticks in the declaration of the case, but at least uses would be back-tick-free. Thoughts?<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/11c75d99/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/11c75d99/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Idea] Allowing most keywords after &quot;.&quot;</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February 27, 2016 at 02:00:00pm</p></header><div class="content"><p>It seems to me that deprecating &#39;default&#39; should be its own topic, or the<br>discussion on it will be harder to find, so I&#39;d suggest making a topic<br>dedicated to that idea, and keeping this one focused on .`keyword`.<br></p><p>Look for the topic: &quot;[Idea] Deprecate the &#39;default&#39; keyword.&quot;<br></p><p>On Sat, Feb 27, 2016 at 2:18 PM, David Waite via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Keywords following dots not requiring backticks also seems a valid option.<br>&gt;<br>&gt; More of a meta-comment:<br>&gt;  1. Default was actually a poor name choice for an enumeration case given<br>&gt; the meaning of ‘default’ in the language. Some might say this name choice<br>&gt; is now being escalated<br>&gt;  2. Default has always been a restrictive term to have as a keyword,<br>&gt; although it is only really required to be considered a keyword in one place<br>&gt;<br>&gt; I personally would be fine with switching ‘default’ for ‘else’, as another<br>&gt; evolutionator suggested. I don’t remember if this was proposed previously,<br>&gt; or if that was only the idea of ‘case _:’, which I’m not really in favor of.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; On Feb 26, 2016, at 1:43 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; As part of the grand API guidelines discussion, there was a lot of support<br>&gt; for using lowerCamelCase for enum cases, because they are values in Swift.<br>&gt; One unfortunate wrinkle here is that it’s not at all uncommon to have a<br>&gt; case named “Default” for an enumeration. One example pulled randomly from<br>&gt; GitHub:<br>&gt;<br>&gt; enum DispatchQOS {<br>&gt;   case UserInteractive<br>&gt;   case UserInitiated<br>&gt;   case Default<br>&gt;   case Utility<br>&gt;   case Background<br>&gt; }<br>&gt;<br>&gt;<br>&gt; If we’re lowerCamelCasting enum cases, this becomes:<br>&gt;<br>&gt; enum DispatchQOS {<br>&gt;   case userInteractive<br>&gt;   case userInitiated<br>&gt;   case `default`<br>&gt;   case utility<br>&gt;   case background<br>&gt; }<br>&gt;<br>&gt; Note the back-ticks, which are also needed at the call site:<br>&gt;<br>&gt; func dispatch(priority priority:<br>&gt;<br>&gt; dispatch(priority: .`default`) { … }<br>&gt;<br>&gt; We could allow one to refer to keywords without back-ticks following a<br>&gt; “.”, similarly to the way we allow keywords without back-ticks preceding a<br>&gt; ‘:’ for argument labels, e.g.:<br>&gt;<br>&gt; func dispatch(priority priority:<br>&gt;<br>&gt; dispatch(priority: .`default`) { … }<br>&gt;<br>&gt; One would still need to use back-ticks in the declaration of the case, but<br>&gt; at least uses would be back-tick-free. Thoughts?<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/3b5c4104/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
