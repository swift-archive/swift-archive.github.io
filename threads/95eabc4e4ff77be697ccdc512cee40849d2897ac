<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58e2591737c75b7700b11f23381b9590?s=50"></div><header><strong>[Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Rick Ballard</string> &lt;rballard at apple.com&gt;<p>January 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>A 2nd review of “Swift Testing” for the Swift Package Manager begins now and runs through Tuesday, January 19th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0019-package-manager-testing.md<br></p><p>This is the 2nd review of the proposal, after revisions based on the first review. A summary of issues raised in the first review can be found at:<br></p><p>	https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006466.html<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>	- Rick<br>	  Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[swift-evolution] [Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January 19, 2016 at 09:00:00pm</p></header><div class="content"><p>This proposal is a nice improvement over the previous iteration, and I support it.<br></p><p>The new command line makes much more sense: it’s worth the trouble to make “swift test” work right of the gate, and the hierarchical Module.TestGroup.individualTest structure makes sense and addresses several concerns.<br></p><p>It’s unclear to me how this plays out:<br></p><p>    swift test --kind=performance<br></p><p>…but it doesn’t seem to constrain what’s actually proposed here, so I’ll wait for the future proposal on that one.<br></p><p>I continue to think this is a bad decision:<br></p><p>&gt; Additionally, we propose that building a module also builds that module&#39;s corresponding tests. Although this would result in slightly increased build times, we believe that tests are important enough to justify this (one might even consider slow building tests to be a code smell).<br></p><p>I expounded on my this thoroughly (perhaps too) in my previous review, so I won’t repeat those concerns; I’ll just note that they still stand.<br></p><p>This is important:<br></p><p>&gt; This proposal also does not cover the need for utility code, ie. a module that is built for tests to consume that is provided as part of a package and is not desired to be an external package. This is something we would like to add as part of a future proposal.<br></p><p><br>…and it makes me wonder whether multiple test files can share helper code within a single test module (crucial!), or whether every test file is compiled in isolation.<br></p><p>I’ll be interested in the future proposals that work out how test module options are specified in Package.swift.<br></p><p>I assume that all test modules are run by default with “swift test”? Again, I won’t repeat the more details concerns about that from the previous review, but just note that it should be possible for Package.swift to specify that some test modules don’t get run by default. I imagine this might be part of the proposal that establishes what “--kind=performance” means.<br></p><p>Looking forward to seeing this in action!<br></p><p>Cheers,<br></p><p>Paul<br></p><p><br>&gt; On Jan 15, 2016, at 4:34 PM, Rick Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; A 2nd review of “Swift Testing” for the Swift Package Manager begins now and runs through Tuesday, January 19th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0019-package-manager-testing.md<br>&gt; <br>&gt; This is the 2nd review of the proposal, after revisions based on the first review. A summary of issues raised in the first review can be found at:<br>&gt; <br>&gt; 	https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006466.html<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>&gt; 	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>&gt; 	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; 	- Rick<br>&gt; 	  Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58e2591737c75b7700b11f23381b9590?s=50"></div><header><strong>[swift-evolution] [Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Rick Ballard</string> &lt;rballard at apple.com&gt;<p>January 21, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Paul,<br></p><p>&gt; On Jan 19, 2016, at 7:35 PM, Paul Cantrell &lt;cantrell at pobox.com&gt; wrote:<br>&gt; <br>&gt; This is important:<br>&gt; <br>&gt;&gt; This proposal also does not cover the need for utility code, ie. a module that is built for tests to consume that is provided as part of a package and is not desired to be an external package. This is something we would like to add as part of a future proposal.<br>&gt; <br>&gt; <br>&gt; …and it makes me wonder whether multiple test files can share helper code within a single test module (crucial!), or whether every test file is compiled in isolation.<br></p><p>Test modules are like any other swift module and are not restricted to compiling a single file. So sharing helper code within a test module should be fine; the part we don&#39;t support right now is sharing one module of utility code among multiple separate test modules, unless you make that utility module a separate package.<br></p><p>&gt; I’ll be interested in the future proposals that work out how test module options are specified in Package.swift.<br>&gt; <br>&gt; I assume that all test modules are run by default with “swift test”? Again, I won’t repeat the more details concerns about that from the previous review, but just note that it should be possible for Package.swift to specify that some test modules don’t get run by default. I imagine this might be part of the proposal that establishes what “--kind=performance” means.<br></p><p>Our plan is that &#39;swift test&#39; by default will run all the test modules in the top-level package, but will not by default run all test modules in depended-upon packages (though that will be possible). Adding the ability to remove test modules from the default set that we run would be a good future enhancement.<br></p><p>Thanks,<br></p><p>	- Rick<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[swift-evolution] [Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January 21, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 21, 2016, at 2:54 PM, Rick Ballard &lt;rballard at apple.com&gt; wrote:<br>&gt; <br>&gt; Test modules are like any other swift module and are not restricted to compiling a single file. So sharing helper code within a test module should be fine; the part we don&#39;t support right now is sharing one module of utility code among multiple separate test modules, unless you make that utility module a separate package.<br>&gt; <br>…<br>&gt; <br>&gt; Our plan is that &#39;swift test&#39; by default will run all the test modules in the top-level package, but will not by default run all test modules in depended-upon packages (though that will be possible). Adding the ability to remove test modules from the default set that we run would be a good future enhancement.<br></p><p>Good, that all seems to me like the right 80% case (or maybe more like 95% case) for the first round.<br></p><p>Some projects will eventually want code sharing across test modules and control over which test modules are run by default, but I think that can all wait, and the proposal as it stands does leave room for those future features.<br></p><p>Cheers, P<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[swift-build-dev] [Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>January 15, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, Jan 15, 2016 at 2:34 PM, Rick Ballard via swift-build-dev<br>&lt;swift-build-dev at swift.org&gt; wrote<br>&gt;         * What is your evaluation of the proposal?<br></p><p>I think this is an excellent proposal, and I am excited to see testing<br>support added to swift-package-manager.<br></p><p>My only reservation is in regards to the following:<br></p><p>&gt; Executing a test from the terminal will produce user-readable output. This should incorporate colorization and other formatting similar to other testing tools to indicate the success and failure of different tests. [...] An additional option may be passed to the testing command to output JUnit-style XML or other formats that can be integrated with continuous integration (CI) and other systems.<br></p><p>swift-corelibs-xctest is currently responsible for its own output--it<br>prints test results to stdout. How do the authors of the proposal plan<br>to implement colorization and formatting?<br></p><p>Personally, I believe that the testing framework itself--in this case<br>swift-corelibs-xctest--should be responsible for colorization and<br>output formatting. I believe swift-corelibs-xctest will soon provide<br>an observation API similar to Apple XCTest (adding it has been<br>discussed several times; see:<br>https://github.com/apple/swift-corelibs-xctest/pull/40,<br>https://lists.swift.org/pipermail/swift-corelibs-dev/2015-December/000034.html).<br>Once it does, any user will be able to register whichever output<br>formatter they wish.<br></p><p>So I would recommend that swift-package-manager use this API. Ideally,<br>swift-package-manager would provide default formatters, and those<br>could be customized via command-line arguments to `swift test`.<br></p><p>Another potential solution would be to borrow a page from third-party<br>utilities like xcpretty (https://github.com/supermarin/xcpretty),<br>which parses textual output from XCTest and formats it. This is<br>suboptimal, however, because it (1) assumes XCTest output is not<br>formatted via custom observers, and (2) establishes a dependency upon<br>a very particular output from XCTest, which is then hard to change.<br></p><p>I am concerned to find this proposal for swift-package-manager mention<br>output formatting, since I it doesn&#39;t seem like output formatters<br>belong in swift-package-manager itself, and the API for<br>swift-corelibs-xctest hasn&#39;t been implemented yet. I suggest deferring<br>the discussion on output formatting to a future proposal--it seems<br>like something that would be merely nice to have, whereas this<br>proposal states &quot;we would like to get testing up to speed as soon as<br>possible.&quot;<br></p><p>On Fri, Jan 15, 2016 at 2:34 PM, Rick Ballard via swift-build-dev<br>&lt;swift-build-dev at swift.org&gt; wrote<br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I have read the proposal thoroughly.<br></p><p>- Brian Gesiak<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-build-dev] [Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>January 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; My only reservation is in regards to the following:<br>&gt; <br>&gt;&gt; Executing a test from the terminal will produce user-readable output. This should incorporate colorization and other formatting similar to other testing tools to indicate the success and failure of different tests. [...] An additional option may be passed to the testing command to output JUnit-style XML or other formats that can be integrated with continuous integration (CI) and other systems.<br>&gt; <br>&gt; swift-corelibs-xctest is currently responsible for its own output--it<br>&gt; prints test results to stdout. How do the authors of the proposal plan<br>&gt; to implement colorization and formatting?<br></p><p>This is a good point.<br></p><p>&gt; Personally, I believe that the testing framework itself--in this case<br>&gt; swift-corelibs-xctest--should be responsible for colorization and<br>&gt; output formatting. I believe swift-corelibs-xctest will soon provide<br>&gt; an observation API similar to Apple XCTest (adding it has been<br>&gt; discussed several times; see:<br>&gt; https://github.com/apple/swift-corelibs-xctest/pull/40,<br>&gt; https://lists.swift.org/pipermail/swift-corelibs-dev/2015-December/000034.html).<br>&gt; Once it does, any user will be able to register whichever output<br>&gt; formatter they wish.<br></p><p>The proposal is not specific about who is providing the output. I personally<br>expected the testing-framework to provide the default Terminal output<br></p><p>&gt; I am concerned to find this proposal for swift-package-manager mention<br>&gt; output formatting, since I it doesn&#39;t seem like output formatters<br>&gt; belong in swift-package-manager itself, and the API for<br>&gt; swift-corelibs-xctest hasn&#39;t been implemented yet. I suggest deferring<br>&gt; the discussion on output formatting to a future proposal--it seems<br>&gt; like something that would be merely nice to have, whereas this<br>&gt; proposal states &quot;we would like to get testing up to speed as soon as<br>&gt; possible.”<br></p><p>I think the proposal is OK. We’re not clear about who provides the output,<br>so nothing is fixed.<br></p><p>When we work on the alternative testing framework proposal we will go into<br>more detail on this matter.<br></p><p>So TL;DR: for now XCTest will provide the output, colorization can be added<br>immediately with some output parsing but is probably better left for the next<br>proposal.<br></p><p>One part of the proposal cannot be met immediately:<br></p><p>&gt; An additional option may be passed to the testing command to output JUnit-style XML or other formats that can be integrated with continuous integration (CI) and other systems.<br></p><p>It is essential that `swift test` itself can provide some kind of standardized<br>output so other tools can use `swift test` as part of larger CI systems.<br></p><p>However what is sufficient? Is it mandatory for us to output JUnit-esque XML<br>for all possible test frameworks? Would that restrict what innovations are<br>possible by testing frameworks?<br></p><p>Is it enough to simply report success or failure for the invocation? CI services<br>would then know if the tests ran to success or not and could simply provide<br>the output from the test framework as logs.<br></p><p>If we are to provide XML/JSON output as part of this initial implementation<br>then we must parse XCTest output or figure out some other way to integrate<br>with XCTest so that the output format can be modified.<br></p><p>Really the proposal should be modified and this part removed pending the<br>next proposal, but it would be a shame to delay implementation by a further<br>week.<br></p><p>Max<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/95e47151/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11a8e906b9e22dfebe544e4e218a4be0?s=50"></div><header><strong>[swift-build-dev] [Review] SE-0019 Swift Testing (Package Manager)</strong> from <string>Brian Pratt</string> &lt;brian at pratt.io&gt;<p>January 19, 2016 at 03:00:00pm</p></header><div class="content"><p>However what is sufficient? Is it mandatory for us to output JUnit-esque XML<br>for all possible test frameworks? Would that restrict what innovations are<br>possible by testing frameworks?<br></p><p>&quot;for all possible test frameworks&quot;? I don&#39;t think you can do something like<br>that unless the build-tool provides an entire output shell that testing<br>frameworks can hook into for reporting at runtime... and in that case, yes,<br>I personally think it would be overly restrictive on testing frameworks, at<br>least from the perspective of a *build tool*. The build<br>tool&#39;s responsibility is that it has to compile and run the tests, and then<br>allow said tests to be configured to provide feedback in whatever way I can<br>configure them to. The opinionated output proposed in this document would<br>seem to overreach those responsibilities unless, as Max and Brian<br>mentioned, it lived in XCTest or similar.<br></p><p><br>Is it enough to simply report success or failure for the invocation? CI<br>services<br>would then know if the tests ran to success or not and could simply provide<br>the output from the test framework as logs.<br></p><p><br>I&#39;d say yes: Most CI tools I know of will just check the exit status of the<br>commands they&#39;re provided, in the simplest cases... So, if the test<br>framework provides a zero/non-zero status for pass/fail, that&#39;s enough for<br>most CI services I&#39;ve used (Travis, Wercker, Jenkins, to name a few). Yes,<br>you can get a lot more detailed, but the implementations would probably<br>differ for each service. Exit statuses are something they all understand,<br>and something the build tool understands already too.<br></p><p><br>If we are to provide XML/JSON output as part of this initial implementation<br>then we must parse XCTest output or figure out some other way to integrate<br>with XCTest so that the output format can be modified.<br></p><p>Parsing the output feels like a fragile integration, and one that could<br>handcuff what XCTest can change in the future. While it&#39;d be possible to<br>integrate with XCTest more directly (via a reporter registration system<br>that I&#39;m sure Brian can explain better than I can), I don&#39;t think the value<br>of that has been defended very well from the perspective of the build tool:<br>The win of getting uniform test output from a build tool is not worth the<br>loss of simple testing integration, whether it be provided by a runtime<br>library defining a set of output protocols, or by intercepting other tools&#39;<br>output and parsing them to transform it, or anything else I&#39;ve seen<br>mentioned.<br></p><p>We would like to get testing up to speed as soon as possible.<br></p><p>If this is true, then we should make it clear our intention to push those<br>details out to XCTest and allow it to innovate and report on its own terms.<br>Anything else is going to slow things down. Right now, given that the<br>output part of the proposal is getting pushback both from developers<br>working on XCTest and developers who have worked on third-party testing<br>frameworks, I&#39;d say that&#39;s just too much scope for a build tool to be<br>taking on.<br></p><p>Beyond that, there&#39;s a very low-effort way that&#39;s already included in the<br>tool to get testing up-to-speed, and this would do that: let me define a<br>target (or a list of targets) in my Package.swift that are for tests.<br>Compile them, link them with my testDependencies, and run them, checking<br>exit statuses for results. This achieves:<br>- the ability to build and run tests from the build-tool<br>- it works with XCTest. Today. Not in the future when they have<br>registration for reporters or when the build-tool writes some test wrapper<br>- a simple integration point for third-party frameworks<br>- support for almost every single CI system in existence (if it can run<br>Swift)<br>- a quick turnaround to put this in the hands of developers (who want it)<br></p><p>More notably, it leaves the concerns of actual testing output to the<br>testing frameworks, where, as so far all parties who have commented on this<br>review agree, those concerns actually belong. This would even fit in the<br>confines of this proposal and could &quot;kick the can down the road&quot; for<br>third-party testing protocols for quite some time as the build tool<br>evolves. Anything else is going to:<br>- limit the flexibility of test framework developers (including those who<br>work on XCTest)<br>- require more development (in the case of creating an XCTest<br>formatter/reporter, or a parser/transformer, or a protocol that XCTest<br>itself will then have to implement)<br>- be more complex<br></p><p>All of those things are net losses, all for something that we can&#39;t even<br>agree is *even philosophically a responsibility of the build tool*? Let&#39;s<br>just drop the output idea, even if just for now, and start delivering<br>first-class testability with the tools that already exist, please.<br></p><p>On Tue, Jan 19, 2016 at 1:50 PM, Max Howell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; My only reservation is in regards to the following:<br>&gt;<br>&gt; Executing a test from the terminal will produce user-readable output. This<br>&gt; should incorporate colorization and other formatting similar to other<br>&gt; testing tools to indicate the success and failure of different tests. [...]<br>&gt; An additional option may be passed to the testing command to output<br>&gt; JUnit-style XML or other formats that can be integrated with continuous<br>&gt; integration (CI) and other systems.<br>&gt;<br>&gt;<br>&gt; swift-corelibs-xctest is currently responsible for its own output--it<br>&gt; prints test results to stdout. How do the authors of the proposal plan<br>&gt; to implement colorization and formatting?<br>&gt;<br>&gt;<br>&gt; This is a good point.<br>&gt;<br>&gt; Personally, I believe that the testing framework itself--in this case<br>&gt; swift-corelibs-xctest--should be responsible for colorization and<br>&gt; output formatting. I believe swift-corelibs-xctest will soon provide<br>&gt; an observation API similar to Apple XCTest (adding it has been<br>&gt; discussed several times; see:<br>&gt; https://github.com/apple/swift-corelibs-xctest/pull/40,<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-corelibs-dev/2015-December/000034.html<br>&gt; ).<br>&gt; Once it does, any user will be able to register whichever output<br>&gt; formatter they wish.<br>&gt;<br>&gt;<br>&gt; The proposal is not specific about who is providing the output. I<br>&gt; personally<br>&gt; expected the testing-framework to provide the default Terminal output<br>&gt;<br>&gt; I am concerned to find this proposal for swift-package-manager mention<br>&gt; output formatting, since I it doesn&#39;t seem like output formatters<br>&gt; belong in swift-package-manager itself, and the API for<br>&gt; swift-corelibs-xctest hasn&#39;t been implemented yet. I suggest deferring<br>&gt; the discussion on output formatting to a future proposal--it seems<br>&gt; like something that would be merely nice to have, whereas this<br>&gt; proposal states &quot;we would like to get testing up to speed as soon as<br>&gt; possible.”<br>&gt;<br>&gt;<br>&gt; I think the proposal is OK. We’re not clear about who provides the output,<br>&gt; so nothing is fixed.<br>&gt;<br>&gt; When we work on the alternative testing framework proposal we will go into<br>&gt; more detail on this matter.<br>&gt;<br>&gt; So TL;DR: for now XCTest will provide the output, colorization can be added<br>&gt; immediately with some output parsing but is probably better left for the<br>&gt; next<br>&gt; proposal.<br>&gt;<br>&gt; One part of the proposal cannot be met immediately:<br>&gt;<br>&gt; An additional option may be passed to the testing command to output<br>&gt; JUnit-style XML or other formats that can be integrated with continuous<br>&gt; integration (CI) and other systems.<br>&gt;<br>&gt;<br>&gt; It is essential that `swift test` itself can provide some kind of<br>&gt; standardized<br>&gt; output so other tools can use `swift test` as part of larger CI systems.<br>&gt;<br>&gt; However what is sufficient? Is it mandatory for us to output JUnit-esque<br>&gt; XML<br>&gt; for all possible test frameworks? Would that restrict what innovations are<br>&gt; possible by testing frameworks?<br>&gt;<br>&gt; Is it enough to simply report success or failure for the invocation? CI<br>&gt; services<br>&gt; would then know if the tests ran to success or not and could simply provide<br>&gt; the output from the test framework as logs.<br>&gt;<br>&gt; If we are to provide XML/JSON output as part of this initial implementation<br>&gt; then we must parse XCTest output or figure out some other way to integrate<br>&gt; with XCTest so that the output format can be modified.<br>&gt;<br>&gt; Really the proposal should be modified and this part removed pending the<br>&gt; next proposal, but it would be a shame to delay implementation by a further<br>&gt; week.<br>&gt;<br>&gt; Max<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/8cad9b89/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
