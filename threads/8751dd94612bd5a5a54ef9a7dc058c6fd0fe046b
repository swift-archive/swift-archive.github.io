<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6a12391d986c7319185751acc3bd134f?s=50"></div><header><strong>building static binaries / reducing library dependencies?</strong> from <string>Brian Swetland</string> &lt;swetland at frotz.net&gt;<p>December  3, 2015 at 01:00:00pm</p></header><div class="content"><p>I&#39;ve noticed that the standard &quot;swift build&quot; binaries are dynamic (which<br>makes sense), and there are quite a few dependencies.  For a trivial hello<br>world, the hello binary depends on:<br>libswiftCore.so<br>libstdc++.so.6<br>libm.so<br>libgcc_s.so.1<br>libc.so.6<br></p><p>and libswiftCore.so further depends on:<br>libpthread.so.0<br>libdl.so.2<br>libicuuc.so.55<br>libicui18n.so.55<br>libbsd.so.0<br>libstdc++.so.6<br>libm.so.6<br>libgcc_s.so.1<br>libc.so.6<br>ld-linux-x86-64.so.2<br></p><p>If I want to build something I can hope will run on other linux machines<br>with potentially arbitrary distributions, it&#39;d be really nice to be able to<br>build fully static, or at least more self-contained binaries.<br></p><p>Both license-wise and operationally, linking glibc staticly is problematic,<br>but at least glibc has very strong backward compatibility with itself.<br>libstdc++ on the other hand is something I&#39;d always want staticly linked to<br>not be at the whim of ABI breakages from release to release.<br></p><p>I&#39;m curious about the libstdc++ dependency, since I was under the<br>impression the swift runtime was written in swift.  What part of the<br>runtime or generated code causes this dependency to exist?<br></p><p>The libc dependency could be simplified by supporting musl-libc (small, MIT<br>licensed, pretty source-compatible with glibc).<br></p><p>Given that libbsd and libicu are under permissive licenses and libstdc++<br>(if it&#39;s needed) has a linkage exception), it&#39;d be nice to have a way to<br>include those staticly (in either libswiftCore.so or final binaries),<br>resulting in the only remaining dependencies being on<br>libc/libc/libpthread/libdl which have extremely robust and well maintained<br>API/ABI backward compatibility.<br></p><p>This should allow for linux binaries which have significantly better<br>chances of working correctly on an arbitrary linux machine.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151203/8751046b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>building static binaries / reducing library dependencies?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  3, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 1:54 PM, Brian Swetland &lt;swetland at frotz.net&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I&#39;ve noticed that the standard &quot;swift build&quot; binaries are dynamic (which makes sense), and there are quite a few dependencies.  For a trivial hello world, the hello binary depends on:<br>&gt; libswiftCore.so<br>&gt; libstdc++.so.6<br>&gt; libm.so<br>&gt; libgcc_s.so.1<br>&gt; libc.so.6<br>&gt; <br>&gt; and libswiftCore.so further depends on:<br>&gt; libpthread.so.0<br>&gt; libdl.so.2<br>&gt; libicuuc.so.55<br>&gt; libicui18n.so.55<br>&gt; libbsd.so.0<br>&gt; libstdc++.so.6<br>&gt; libm.so.6<br>&gt; libgcc_s.so.1<br>&gt; libc.so.6<br>&gt; ld-linux-x86-64.so.2<br>&gt; <br>&gt; If I want to build something I can hope will run on other linux machines with potentially arbitrary distributions, it&#39;d be really nice to be able to build fully static, or at least more self-contained binaries.  <br>&gt; <br>&gt; Both license-wise and operationally, linking glibc staticly is problematic, but at least glibc has very strong backward compatibility with itself.  libstdc++ on the other hand is something I&#39;d always want staticly linked to not be at the whim of ABI breakages from release to release.<br>&gt; <br>&gt; I&#39;m curious about the libstdc++ dependency, since I was under the impression the swift runtime was written in swift.  What part of the runtime or generated code causes this dependency to exist?<br>&gt; <br>&gt; The libc dependency could be simplified by supporting musl-libc (small, MIT licensed, pretty source-compatible with glibc).<br>&gt; <br>&gt; Given that libbsd and libicu are under permissive licenses and libstdc++ (if it&#39;s needed) has a linkage exception), it&#39;d be nice to have a way to include those staticly (in either libswiftCore.so or final binaries), resulting in the only remaining dependencies being on libc/libc/libpthread/libdl which have extremely robust and well maintained API/ABI backward compatibility.<br>&gt; <br>&gt; This should allow for linux binaries which have significantly better chances of working correctly on an arbitrary linux machine.<br></p><p>It should be possible to configure Swift to statically link libswiftCore.so on Linux. We dynamically link on Apple platforms for future-proofing, but that&#39;s not a concern on Linux as far as I can see. The Swift core runtime is written in C++, as are some edges of the standard library, hence the libstdc++ dependency. If you&#39;re concerned about licensing issues statically linking libstdc++, then building against LLVM&#39;s UIUC-licensed libc++ might be a possibility.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6a12391d986c7319185751acc3bd134f?s=50"></div><header><strong>building static binaries / reducing library dependencies?</strong> from <string>Brian Swetland</string> &lt;swetland at frotz.net&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>On Thu, Dec 3, 2015 at 1:57 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 3, 2015, at 1:54 PM, Brian Swetland &lt;swetland at frotz.net&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; If I want to build something I can hope will run on other linux machines<br>&gt; with potentially arbitrary distributions, it&#39;d be really nice to be able to<br>&gt; build fully static, or at least more self-contained binaries.<br>&gt; &gt;<br>&gt; &gt; Both license-wise and operationally, linking glibc staticly is<br>&gt; problematic, but at least glibc has very strong backward compatibility with<br>&gt; itself.  libstdc++ on the other hand is something I&#39;d always want staticly<br>&gt; linked to not be at the whim of ABI breakages from release to release.<br>&gt; &gt;<br>&gt; &gt; I&#39;m curious about the libstdc++ dependency, since I was under the<br>&gt; impression the swift runtime was written in swift.  What part of the<br>&gt; runtime or generated code causes this dependency to exist?<br>&gt; &gt;<br>&gt; &gt; The libc dependency could be simplified by supporting musl-libc (small,<br>&gt; MIT licensed, pretty source-compatible with glibc).<br>&gt; &gt;<br>&gt; &gt; Given that libbsd and libicu are under permissive licenses and libstdc++<br>&gt; (if it&#39;s needed) has a linkage exception), it&#39;d be nice to have a way to<br>&gt; include those staticly (in either libswiftCore.so or final binaries),<br>&gt; resulting in the only remaining dependencies being on<br>&gt; libc/libc/libpthread/libdl which have extremely robust and well maintained<br>&gt; API/ABI backward compatibility.<br>&gt; &gt;<br>&gt; &gt; This should allow for linux binaries which have significantly better<br>&gt; chances of working correctly on an arbitrary linux machine.<br>&gt;<br>&gt; It should be possible to configure Swift to statically link<br>&gt; libswiftCore.so on Linux. We dynamically link on Apple platforms for<br>&gt; future-proofing, but that&#39;s not a concern on Linux as far as I can see. The<br>&gt; Swift core runtime is written in C++, as are some edges of the standard<br>&gt; library, hence the libstdc++ dependency. If you&#39;re concerned about<br>&gt; licensing issues statically linking libstdc++, then building against LLVM&#39;s<br>&gt; UIUC-licensed libc++ might be a possibility.<br>&gt;<br></p><p>libstdc++ has a pretty clear linkage exception that allows it to be bolted<br>into whatever, so the license is less of a concern than the fact that it<br>often is not forward/backward compatible across versions.  Static linking<br>libc/glibc is problematic license-wise, but since it&#39;s very stable from a<br>compatibility viewpoint linking it dynamically is not a worry.  Also<br>glibc&#39;s dns resolver and some other features do not work correctly when<br>it&#39;s linked staticly.<br></p><p>An option to link the non-libc/libm/libpthread/libdl dependencies of<br>libswiftCore.so into it on Linux would allow for far more robust binaries<br>(worst case you bundle the particular libswiftCore.so you built against<br>with your app and you should be pretty safe).<br></p><p>For the case of 100% static binaries, an option to build with musl-libc<br>would probably be the simplest, but this is a less critical improvement<br>than simply removing dynamic dependencies on more fragile libraries.<br></p><p>Brian<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151203/552d3f45/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>building static binaries / reducing library dependencies?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 3:24 PM, Brian Swetland &lt;swetland at frotz.net&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 1:57 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Dec 3, 2015, at 1:54 PM, Brian Swetland &lt;swetland at frotz.net &lt;mailto:swetland at frotz.net&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; If I want to build something I can hope will run on other linux machines with potentially arbitrary distributions, it&#39;d be really nice to be able to build fully static, or at least more self-contained binaries.<br>&gt; &gt;<br>&gt; &gt; Both license-wise and operationally, linking glibc staticly is problematic, but at least glibc has very strong backward compatibility with itself.  libstdc++ on the other hand is something I&#39;d always want staticly linked to not be at the whim of ABI breakages from release to release.<br>&gt; &gt;<br>&gt; &gt; I&#39;m curious about the libstdc++ dependency, since I was under the impression the swift runtime was written in swift.  What part of the runtime or generated code causes this dependency to exist?<br>&gt; &gt;<br>&gt; &gt; The libc dependency could be simplified by supporting musl-libc (small, MIT licensed, pretty source-compatible with glibc).<br>&gt; &gt;<br>&gt; &gt; Given that libbsd and libicu are under permissive licenses and libstdc++ (if it&#39;s needed) has a linkage exception), it&#39;d be nice to have a way to include those staticly (in either libswiftCore.so or final binaries), resulting in the only remaining dependencies being on libc/libc/libpthread/libdl which have extremely robust and well maintained API/ABI backward compatibility.<br>&gt; &gt;<br>&gt; &gt; This should allow for linux binaries which have significantly better chances of working correctly on an arbitrary linux machine.<br>&gt; <br>&gt; It should be possible to configure Swift to statically link libswiftCore.so on Linux. We dynamically link on Apple platforms for future-proofing, but that&#39;s not a concern on Linux as far as I can see. The Swift core runtime is written in C++, as are some edges of the standard library, hence the libstdc++ dependency. If you&#39;re concerned about licensing issues statically linking libstdc++, then building against LLVM&#39;s UIUC-licensed libc++ might be a possibility.<br>&gt; <br>&gt; libstdc++ has a pretty clear linkage exception that allows it to be bolted into whatever, so the license is less of a concern than the fact that it often is not forward/backward compatible across versions.  Static linking libc/glibc is problematic license-wise, but since it&#39;s very stable from a compatibility viewpoint linking it dynamically is not a worry.  Also glibc&#39;s dns resolver and some other features do not work correctly when it&#39;s linked staticly.<br>&gt; <br>&gt; An option to link the non-libc/libm/libpthread/libdl dependencies of libswiftCore.so into it on Linux would allow for far more robust binaries (worst case you bundle the particular libswiftCore.so you built against with your app and you should be pretty safe).<br></p><p>Sounds good. Statically linking libstdc++ and libswiftCore while leaving glibc dynamically linked should be fine. Porting to musl libc might be interesting too, but I&#39;m not sure how dependent the core libs are/will be on glibc stuff.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151203/f172e622/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
