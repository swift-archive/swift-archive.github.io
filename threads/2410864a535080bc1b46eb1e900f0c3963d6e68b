<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c673fa52f8aa5b3e9205e51230764ca?s=50"></div><header><strong>Proposal - Allow properties in Extensions</strong> from <string>Kevin Kachikian</string> &lt;kevyk at mac.com&gt;<p>December  8, 2015 at 10:00:00am</p></header><div class="content"><p>I’d like to proposal to the Swift community and discuss the advantages and disadvantages of adding modifiable properties to extensions (in addition to the already existing computed properties, instance methods, subscripts, etc.):<br></p><p>extension SomeType {<br>	<br>	var aNewProperty: Int<br>	var anotherVariable: String<br>	var aThirdOne: MyStruct<br></p><p>…<br></p><p>}<br></p><p>I have experienced many occasions where adding a a property to an extension would have resulted in cleaner code by keeping all similar code locally together in a file. Not knowing much about language design, I don&#39;t know if this offering this might break some fundamental principal in OOP design. Curiously ObjC also had this limitation but apparently C# offers the capability in partial classes.<br></p><p>One such use case is when extending ones own code, it&#39;s nice to break similar code blocks/behavior into their own extensions sometimes requiring the addition of properties. It would be nice to provide those properties right in line with the new code instead of just having a bunch of properties forced at the top of a main class file.<br></p><p>Wha-da-ya’all think?<br></p><p>Kevin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/2410e68b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal - Allow properties in Extensions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 10:51 AM, Kevin Kachikian via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’d like to proposal to the Swift community and discuss the advantages and disadvantages of adding modifiable properties to extensions (in addition to the already existing computed properties, instance methods, subscripts, etc.):<br>&gt; <br>&gt; extension SomeType {<br>&gt; 	<br>&gt; 	var aNewProperty: Int<br>&gt; 	var anotherVariable: String<br>&gt; 	var aThirdOne: MyStruct<br></p><p>IMO, this is a generally desirable thing.  It would be great to replace the need to use objc_setAssociatedObject with proper language support.  That said, the exact semantics and implementation details are unclear, so we’d need a specific detailed proposal.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/8d65c38f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c673fa52f8aa5b3e9205e51230764ca?s=50"></div><header><strong>Proposal - Allow properties in Extensions</strong> from <string>Kevin Kachikian</string> &lt;kevyk at mac.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>I never quite understood why ObjC never implemented such a capability as it seems really useful.<br></p><p>I will have to defer the details however to someone else in the community as defining the semantics and implementation details are currently above my pay grade. {:~)<br></p><p>-Kevin<br></p><p><br></p><p>&gt; On Dec 8, 2015, at 9:21 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 8, 2015, at 10:51 AM, Kevin Kachikian via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’d like to proposal to the Swift community and discuss the advantages and disadvantages of adding modifiable properties to extensions (in addition to the already existing computed properties, instance methods, subscripts, etc.):<br>&gt;&gt; <br>&gt;&gt; extension SomeType {<br>&gt;&gt; 	<br>&gt;&gt; 	var aNewProperty: Int<br>&gt;&gt; 	var anotherVariable: String<br>&gt;&gt; 	var aThirdOne: MyStruct<br>&gt; <br>&gt; IMO, this is a generally desirable thing.  It would be great to replace the need to use objc_setAssociatedObject with proper language support.  That said, the exact semantics and implementation details are unclear, so we’d need a specific detailed proposal.<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/1c0c3448/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
