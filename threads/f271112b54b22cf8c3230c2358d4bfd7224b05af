<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed60bdfc964ec62cc48aa6020a03d7b?s=50"></div><header><strong>Brace syntax</strong> from <string>Alexander Regueiro</string> &lt;alexreg at gmail.com&gt;<p>December 20, 2015 at 01:00:00am</p></header><div class="content"><p>Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br></p><p>Thoughts?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Brace syntax</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure. And FWIW removing braces means you have to come up with a completely different syntax for closures, because indentation does not suffice there.<br></p><p>Also, &quot;don&#39;t be like C&quot; is not even remotely a goal of Swift. The Swift syntax is C-like in many respects. &quot;Be like C&quot; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that would be more familiar to Obj-C programmers is usually a good idea.<br></p><p>-Kevin Ballard<br></p><p>On Sat, Dec 19, 2015, at 05:39 PM, Alexander Regueiro via swift-evolution wrote:<br>&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Brace syntax</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 20, 2015 at 09:00:00am</p></header><div class="content"><p>Removing braces for scope would cause more problems than whatever you would gain from it - it is one character at the end of a function declaration and one at the end of a function.<br></p><p>Using white space to (indentation sometimes is a tab, sometimes and sometimes get mixed up) scope is not the best way to do it.  <br></p><p>-1<br></p><p><br>&gt; On 2015-12-20, at 8:58:02, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure. And FWIW removing braces means you have to come up with a completely different syntax for closures, because indentation does not suffice there.<br>&gt; <br>&gt; Also, &quot;don&#39;t be like C&quot; is not even remotely a goal of Swift. The Swift syntax is C-like in many respects. &quot;Be like C&quot; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that would be more familiar to Obj-C programmers is usually a good idea.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Sat, Dec 19, 2015, at 05:39 PM, Alexander Regueiro via swift-evolution wrote:<br>&gt;&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Brace syntax</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 5:58 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure. And FWIW removing braces means you have to come up with a completely different syntax for closures, because indentation does not suffice there.<br>&gt; <br>&gt; Also, &quot;don&#39;t be like C&quot; is not even remotely a goal of Swift. The Swift syntax is C-like in many respects. &quot;Be like C&quot; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that would be more familiar to Obj-C programmers is usually a good idea.<br></p><p>Kevin got it exactly right, but I’d expand that last bit a bit to:<br></p><p> “… picking the one that is most familiar to programmers in the extended C family is a good idea.<br></p><p><br>The extended C family of language (which includes C, C++, ObjC, but also C#, Java, Javascript, and more) is an extremely popular and widely used set of languages that have a lot of surface-level similarity.  I don’t claim to know the design rationale of all of these languages, but I surmise that this is not an accident: programmers move around and work in different languages, and this allows a non-expert in the language to understand what is going on.  While there are things about C that are really unfortunate IMO (e.g. the declarator/declaration specifier part of the grammar) there is a lot of goodness in the basic operator set, focus on dot syntax, and more.<br></p><p>I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are also downsides.  Deviating from the C family in this respect would have to provide *overwhelmingly* large advantages for us to take such a plunge, and they simply don’t exist.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>This entire thread is just beating dead horse. Having said that; why not<br>allow braces for closures, and disallow them elsewhere? It doesn&#39;t seem<br>like a deal-breaker, really. I don&#39;t think there&#39;s much to debate aside<br>from this: some people worry that significant whitespace makes code more<br>error-prone, and others feel the increased legibility makes it less<br>error-prone.<br></p><p>On Sat, Dec 19, 2015 at 5:58 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There is not in fact an emphasis on conciseness. This has been repeated<br>&gt; many times by the swift team. Conciseness is not a goal of Swift, but<br>&gt; expressiveness absolutely is. Braces are a well-understood and simple way<br>&gt; to express the notion of a scope/closure. And FWIW removing braces means<br>&gt; you have to come up with a completely different syntax for closures,<br>&gt; because indentation does not suffice there.<br>&gt;<br>&gt; Also, &quot;don&#39;t be like C&quot; is not even remotely a goal of Swift. The Swift<br>&gt; syntax is C-like in many respects. &quot;Be like C&quot; isn&#39;t a goal either of<br>&gt; course, but when deciding between two alternatives that have no compelling<br>&gt; arguments either way, picking the one that would be more familiar to Obj-C<br>&gt; programmers is usually a good idea.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; On Sat, Dec 19, 2015, at 05:39 PM, Alexander Regueiro via swift-evolution<br>&gt; wrote:<br>&gt; &gt; Has anyone considered removing braces from the Swift language? The main<br>&gt; alternative would be indentation-based scoping like in Python or Ruby.<br>&gt; There already seems to be a general emphasis on conciseness,  lack of<br>&gt; redundancy, and a modern syntax. e.g. semicolons are not required for<br>&gt; single-line statements; brackets have been removed from if/for/while<br>&gt; expressions, compared to C-style syntax. So, why not go the whole way in<br>&gt; breaking the C-style connection? The present syntax seems to be shunning C,<br>&gt; but only slightly.<br>&gt; &gt;<br>&gt; &gt; Thoughts?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/53a80c5b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Brace syntax</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>I have done a bunch of Python programming and when programming in Python I don’t find the lack of braces to be a problem most of the time, except occasionally if cutting and pasting code from web pages (then it is a huge pain). <br></p><p>I think Swift has this right though. In my mind, braces indicate groupings of statements. Making the use of them mandatory, I believe is also the right choice to avoid ambiguity as to whether the else clause goes with the inner if or the outer. I believe this discipline is good in that it avoids errors which are hard to detect. Finally, this enforces a consistency across all teams (despite my voting against required self). Being able to use more expressions and fewer statements may quell some people who hate lots of braces. Shameless plug for my new proposal on the ternary thread :-) <br></p><p>Further the statements vs expressions where statements are contained in braces and expressions have parenthesis, i think helps to subtly reinforce the differences between the two forms. This is why in my opinion, making statements into expressions is not a good direction for Swift as has been done in other languages, like Ruby. It complicates the programming model. <br></p><p>I feel like there is a discussion coming up with this soon as to whether statements and expressions should remain separate in Swift or the two should be combined. Haskell and other functional programming languages have blurred this line, but is it a good thing? In my experience with the ternary thread this came up quite a bit. <br></p><p>- Paul <br>&gt; On Dec 19, 2015, at 8:37 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This entire thread is just beating dead horse. Having said that; why not allow braces for closures, and disallow them elsewhere? It doesn&#39;t seem like a deal-breaker, really. I don&#39;t think there&#39;s much to debate aside from this: some people worry that significant whitespace makes code more error-prone, and others feel the increased legibility makes it less error-prone.<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 5:58 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure. And FWIW removing braces means you have to come up with a completely different syntax for closures, because indentation does not suffice there.<br>&gt; <br>&gt; Also, &quot;don&#39;t be like C&quot; is not even remotely a goal of Swift. The Swift syntax is C-like in many respects. &quot;Be like C&quot; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that would be more familiar to Obj-C programmers is usually a good idea.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Sat, Dec 19, 2015, at 05:39 PM, Alexander Regueiro via swift-evolution wrote:<br>&gt; &gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt; &gt;<br>&gt; &gt; Thoughts?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/ea11e439/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Brace syntax</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 19, 2015 at 09:00:00pm</p></header><div class="content"><p>Python started in 1990 and Ruby started in 1995. Java started in 1996; C# in 2000; Go in 2010. These languages all use braces and are more recent than Python and Ruby. ALGOL 60, where 60 stands for 1960, didn&#39;t use braces either.<br></p><p>To me, that&#39;s basically a fashion point. Given that this doesn&#39;t seem to open any new possibility over what we have, I wouldn&#39;t be in favor of it.<br></p><p>&gt; Le 19 déc. 2015 à 20:39:06, Alexander Regueiro via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed60bdfc964ec62cc48aa6020a03d7b?s=50"></div><header><strong>Brace syntax</strong> from <string>Alexander Regueiro</string> &lt;alexreg at gmail.com&gt;<p>December 20, 2015 at 02:00:00am</p></header><div class="content"><p>I think you miss my point. In any case, it’s more stylistic consistency than fashion. Also, who wants to type braces? Your current philosophy seems to be to towards minimising syntax. So surely this is a matter of being consistent?<br></p><p>Also, if indenting code is good (universal) practice, and makes braces redundant without loss of readability, why keep them?<br></p><p>&gt; On 20 Dec 2015, at 02:24, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; Python started in 1990 and Ruby started in 1995. Java started in 1996; C# in 2000; Go in 2010. These languages all use braces and are more recent than Python and Ruby. ALGOL 60, where 60 stands for 1960, didn&#39;t use braces either.<br>&gt; <br>&gt; To me, that&#39;s basically a fashion point. Given that this doesn&#39;t seem to open any new possibility over what we have, I wouldn&#39;t be in favor of it.<br>&gt; <br>&gt;&gt; Le 19 déc. 2015 à 20:39:06, Alexander Regueiro via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Brace syntax</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 20, 2015 at 04:00:00am</p></header><div class="content"><p>Also, Ruby has braces, though it is generally stylistically suggested to<br>only use them for inline blocks (arr.map { |x| x.name.chars.first }) and<br>when you don&#39;t use braces, you use even more verbose `do`/`end` syntax.<br></p><p>I don&#39;t know many people who have experienced a large variety (8+?) of<br>programming languages and prefer Python&#39;s forced indentation, but that&#39;s<br>just a point of style. Generally, I agree with all the stated points about<br>why braces are used, and Swift really seems to have been built with them in<br>mind.<br></p><p>On Sat, Dec 19, 2015 at 9:24 PM Félix Cloutier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; Python started in 1990 and Ruby started in 1995. Java started in 1996; C#<br>&gt; in 2000; Go in 2010. These languages all use braces and are more recent<br>&gt; than Python and Ruby. ALGOL 60, where 60 stands for 1960, didn&#39;t use braces<br>&gt; either.<br>&gt;<br>&gt; To me, that&#39;s basically a fashion point. Given that this doesn&#39;t seem to<br>&gt; open any new possibility over what we have, I wouldn&#39;t be in favor of it.<br>&gt;<br>&gt; &gt; Le 19 déc. 2015 à 20:39:06, Alexander Regueiro via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt;<br>&gt; &gt; Has anyone considered removing braces from the Swift language? The main<br>&gt; alternative would be indentation-based scoping like in Python or Ruby.<br>&gt; There already seems to be a general emphasis on conciseness,  lack of<br>&gt; redundancy, and a modern syntax. e.g. semicolons are not required for<br>&gt; single-line statements; brackets have been removed from if/for/while<br>&gt; expressions, compared to C-style syntax. So, why not go the whole way in<br>&gt; breaking the C-style connection? The present syntax seems to be shunning C,<br>&gt; but only slightly.<br>&gt; &gt;<br>&gt; &gt; Thoughts?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/bb0657e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Brace syntax</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 20, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; I don&#39;t know many people who have experienced a large variety (8+?) of programming languages and prefer Python&#39;s forced indentation<br></p><p>Count me as one. I&#39;d prefer Swift to have Python-style indentation, just on the grounds of braces being stupid (why would you want to enter the same scope information twice)?<br></p><p>So +1 from me, although I don&#39;t suffer from the braces at all.<br></p><p>I do want to point out that the amount of code that fits on a screen is fairly important, and you should keep your methods short, so one less brace per method means a couple more methods per screen.<br></p><p>This would also free up braces to mean “closure” in 100% of cases, which is good for consistency.<br></p><p>But it would introduce it&#39;s share of problems for sure, so I don&#39;t feel strongly about this proposal.<br></p><p>I also admit that braces are generally preferred, for some mysterious reason that I hope a believer can articulate here. Take Sass, for example; it has both an indentation-based syntax and a braces-based syntax, and the latter one seems way more popular.<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/85061220/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 20, 2015 at 04:00:00am</p></header><div class="content"><p>Andrey&#39;s post encourages me to veer into the merits of significant<br>whitespace vs braces. This is probably unwise of me, since we&#39;re not all<br>going to agree any time soon, but I can&#39;t resist pointing out an example:<br></p><p>////////////////////////////////////////////////////////////////////////<br></p><p>var foo: Int<br>{<br>    get<br>    {<br>        return _foo<br>    }<br>    set<br>    {<br>        _foo = newValue<br>    }<br>}<br></p><p>////////////////////////////////////////////////////////////////////////<br></p><p>var foo: Int:<br>    get:<br>        return _foo<br>    set:<br>        _foo = newValue<br></p><p>////////////////////////////////////////////////////////////////////////<br></p><p>It&#39;s obvious no programmer is going to be consistent about braces in the<br>first example - it&#39;s absurdly verbose. So with braces in Swift, pretty much<br>everything you write carries the overhead of &quot;what inconsistent way will i<br>format the braces for this code?&quot; For me, I&#39;d rather throw out the (largely<br>redundant) noise, and stick with just the content.<br></p><p><br></p><p><br></p><p><br>On Sun, Dec 20, 2015 at 3:59 AM, Andrey Tarantsov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I don&#39;t know many people who have experienced a large variety (8+?) of<br>&gt; programming languages and prefer Python&#39;s forced indentation<br>&gt;<br>&gt;<br>&gt; Count me as one. I&#39;d prefer Swift to have Python-style indentation, just<br>&gt; on the grounds of braces being stupid (why would you want to enter the same<br>&gt; scope information *twice*)?<br>&gt;<br>&gt; So +1 from me, although I don&#39;t suffer from the braces at all.<br>&gt;<br>&gt; I do want to point out that the amount of code that fits on a screen *is* fairly<br>&gt; important, and you should keep your methods short, so one less brace per<br>&gt; method means a couple more methods per screen.<br>&gt;<br>&gt; This would also free up braces to mean “closure” in 100% of cases, which<br>&gt; is good for consistency.<br>&gt;<br>&gt; But it would introduce it&#39;s share of problems for sure, so I don&#39;t feel<br>&gt; strongly about this proposal.<br>&gt;<br>&gt; I also admit that braces are generally preferred, for some mysterious<br>&gt; reason that I hope a believer can articulate here. Take Sass, for example;<br>&gt; it has both an indentation-based syntax and a braces-based syntax, and the<br>&gt; latter one seems way more popular.<br>&gt;<br>&gt; A.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/ebb88e57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Brace syntax</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 20, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; var foo: Int <br>&gt; {<br>&gt;     get <br>&gt;     { <br>&gt;         return _foo<br>&gt;     }<br>&gt;     set <br>&gt;     {<br>&gt;         _foo = newValue<br>&gt;     }<br>&gt; }<br>&gt; <br>I assume you know that braces don&#39;t require an extra line for themselves? ;-)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/db52ab2d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 20, 2015 at 04:00:00am</p></header><div class="content"><p>Yes, that is the point. If you use braces in Swift, you will naturally<br>gravitate to all sorts of personalized strategies. Now this is possible<br>with significant whitespace (e.g.: Python uses the semicolon to put<br>multiple statements on the same line) but not nearly as common.<br></p><p><br>On Sun, Dec 20, 2015 at 4:22 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br></p><p>&gt;<br>&gt; var foo: Int<br>&gt; {<br>&gt;     get<br>&gt;     {<br>&gt;         return _foo<br>&gt;     }<br>&gt;     set<br>&gt;     {<br>&gt;         _foo = newValue<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; I assume you know that braces don&#39;t require an extra line for themselves?<br>&gt; ;-)<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/33ca093f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e41b4af40e5dcd99ca063dbbfd7af182?s=50"></div><header><strong>Brace syntax</strong> from <string>Valentin Radu</string> &lt;radu.v.valentin at me.com&gt;<p>December 20, 2015 at 04:00:00pm</p></header><div class="content"><p>I admit this is 100% a personal preference and that dropping the braces would not significantly affect me, but I got used to them and instinctually search code blocks using them. I prefer reading like that, even if that means writing more code. If you think about it, writing code is maybe 20% of the time you spend on an app.<br>-1<br></p><p>&gt; On Sun 20 Dec, 15, at 14:25, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, that is the point. If you use braces in Swift, you will naturally gravitate to all sorts of personalized strategies. Now this is possible with significant whitespace (e.g.: Python uses the semicolon to put multiple statements on the same line) but not nearly as common.<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 4:22 AM, Tino Heth &lt;2th at gmx.de &lt;mailto:2th at gmx.de&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; var foo: Int <br>&gt;&gt; {<br>&gt;&gt;     get <br>&gt;&gt;     { <br>&gt;&gt;         return _foo<br>&gt;&gt;     }<br>&gt;&gt;     set <br>&gt;&gt;     {<br>&gt;&gt;         _foo = newValue<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt; I assume you know that braces don&#39;t require an extra line for themselves? ;-)<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/c82c0383/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Brace syntax</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 20, 2015 at 03:00:00pm</p></header><div class="content"><p>Contrived example Charles. Apple&#39;s tutorials consistently put braces on the<br>line of the statement declaration.<br>https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120<br></p><p>On Sun, Dec 20, 2015 at 7:16 AM Charles Constant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Andrey&#39;s post encourages me to veer into the merits of significant<br>&gt; whitespace vs braces. This is probably unwise of me, since we&#39;re not all<br>&gt; going to agree any time soon, but I can&#39;t resist pointing out an example:<br>&gt;<br>&gt; ////////////////////////////////////////////////////////////////////////<br>&gt;<br>&gt; var foo: Int<br>&gt; {<br>&gt;     get<br>&gt;     {<br>&gt;         return _foo<br>&gt;     }<br>&gt;     set<br>&gt;     {<br>&gt;         _foo = newValue<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; ////////////////////////////////////////////////////////////////////////<br>&gt;<br>&gt; var foo: Int:<br>&gt;     get:<br>&gt;         return _foo<br>&gt;     set:<br>&gt;         _foo = newValue<br>&gt;<br>&gt; ////////////////////////////////////////////////////////////////////////<br>&gt;<br>&gt; It&#39;s obvious no programmer is going to be consistent about braces in the<br>&gt; first example - it&#39;s absurdly verbose. So with braces in Swift, pretty much<br>&gt; everything you write carries the overhead of &quot;what inconsistent way will i<br>&gt; format the braces for this code?&quot; For me, I&#39;d rather throw out the (largely<br>&gt; redundant) noise, and stick with just the content.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Dec 20, 2015 at 3:59 AM, Andrey Tarantsov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I don&#39;t know many people who have experienced a large variety (8+?) of<br>&gt;&gt; programming languages and prefer Python&#39;s forced indentation<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Count me as one. I&#39;d prefer Swift to have Python-style indentation, just<br>&gt;&gt; on the grounds of braces being stupid (why would you want to enter the same<br>&gt;&gt; scope information *twice*)?<br>&gt;&gt;<br>&gt;&gt; So +1 from me, although I don&#39;t suffer from the braces at all.<br>&gt;&gt;<br>&gt;&gt; I do want to point out that the amount of code that fits on a screen *is* fairly<br>&gt;&gt; important, and you should keep your methods short, so one less brace per<br>&gt;&gt; method means a couple more methods per screen.<br>&gt;&gt;<br>&gt;&gt; This would also free up braces to mean “closure” in 100% of cases, which<br>&gt;&gt; is good for consistency.<br>&gt;&gt;<br>&gt;&gt; But it would introduce it&#39;s share of problems for sure, so I don&#39;t feel<br>&gt;&gt; strongly about this proposal.<br>&gt;&gt;<br>&gt;&gt; I also admit that braces are generally preferred, for some mysterious<br>&gt;&gt; reason that I hope a believer can articulate here. Take Sass, for example;<br>&gt;&gt; it has both an indentation-based syntax and a braces-based syntax, and the<br>&gt;&gt; latter one seems way more popular.<br>&gt;&gt;<br>&gt;&gt; A.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/25b09f87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed60bdfc964ec62cc48aa6020a03d7b?s=50"></div><header><strong>Brace syntax</strong> from <string>Alexander Regueiro</string> &lt;alexreg at gmail.com&gt;<p>December 20, 2015 at 04:00:00pm</p></header><div class="content"><p>Interesting discussion. Thank you for the points, Charles and Andrey, in particular. I too consider braces to be “redundant noise” in the same way semicolons are for single-line statements, among other syntactical features. Indeed, it feels like I’m stating myself twice whenever I write them.<br></p><p>There have also been a few votes against removing braces, but these seem to be reactionary. Could any of you perhaps clarify why you want to keep them, or is it just the “change is bad” stance?<br></p><p>Thanks.<br></p><p>&gt; On 20 Dec 2015, at 15:52, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt; wrote:<br>&gt; <br>&gt; Contrived example Charles. Apple&#39;s tutorials consistently put braces on the line of the statement declaration. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120&gt;<br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 7:16 AM Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Andrey&#39;s post encourages me to veer into the merits of significant whitespace vs braces. This is probably unwise of me, since we&#39;re not all going to agree any time soon, but I can&#39;t resist pointing out an example:<br>&gt; <br>&gt; ////////////////////////////////////////////////////////////////////////<br>&gt; <br>&gt; var foo: Int <br>&gt; {<br>&gt;     get <br>&gt;     { <br>&gt;         return _foo<br>&gt;     }<br>&gt;     set <br>&gt;     {<br>&gt;         _foo = newValue<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; ////////////////////////////////////////////////////////////////////////<br>&gt; <br>&gt; var foo: Int:<br>&gt;     get: <br>&gt;         return _foo<br>&gt;     set:<br>&gt;         _foo = newValue<br>&gt; <br>&gt; ////////////////////////////////////////////////////////////////////////<br>&gt; <br>&gt; It&#39;s obvious no programmer is going to be consistent about braces in the first example - it&#39;s absurdly verbose. So with braces in Swift, pretty much everything you write carries the overhead of &quot;what inconsistent way will i format the braces for this code?&quot; For me, I&#39;d rather throw out the (largely redundant) noise, and stick with just the content.<br>&gt; <br>&gt; <br>&gt;  <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 3:59 AM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I don&#39;t know many people who have experienced a large variety (8+?) of programming languages and prefer Python&#39;s forced indentation<br>&gt; <br>&gt; Count me as one. I&#39;d prefer Swift to have Python-style indentation, just on the grounds of braces being stupid (why would you want to enter the same scope information twice)?<br>&gt; <br>&gt; So +1 from me, although I don&#39;t suffer from the braces at all.<br>&gt; <br>&gt; I do want to point out that the amount of code that fits on a screen is fairly important, and you should keep your methods short, so one less brace per method means a couple more methods per screen.<br>&gt; <br>&gt; This would also free up braces to mean “closure” in 100% of cases, which is good for consistency.<br>&gt; <br>&gt; But it would introduce it&#39;s share of problems for sure, so I don&#39;t feel strongly about this proposal.<br>&gt; <br>&gt; I also admit that braces are generally preferred, for some mysterious reason that I hope a believer can articulate here. Take Sass, for example; it has both an indentation-based syntax and a braces-based syntax, and the latter one seems way more popular.<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/01e317bb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Brace syntax</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December 20, 2015 at 10:00:00am</p></header><div class="content"><p>On Sun, Dec 20, 2015 at 8:12 AM, Alexander Regueiro via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; There have also been a few votes against removing braces, but these seem<br>&gt; to be reactionary. Could any of you perhaps clarify why you want to keep<br>&gt; them, or is it just the “change is bad” stance?<br>&gt;<br></p><p>Having written a lot of Python code over the last seven years, I definitely<br>prefer braces to significant whitespace, not because I enjoy looking at<br>them or I want to indent my code incorrectly, but because they help my<br>indent my code correctly and keep it correctly indented. The problems I&#39;ll<br>describe below are all problems I have had in the real world when working<br>with Python code.<br></p><p>Python suffers from the famous tab-spaces problem with significant<br>indentation, which Guido listed is one of this &quot;Python Regrets&quot; in 2002. In<br>short, Python considers tab characters to be worth 8 space characters, but<br>very few if any people have their editor set to tab = 8 spaces. It actually<br>doesn&#39;t matter what value you assign to tab. Sone people will have tab = 2<br>spaces, others 4, and I&#39;ve even worked with programmers who have it set to<br>5. The only defense against this is for everyone on a project to stick with<br>either tabs or spaces, and this is why most Python programmers use spaces.<br>But all it takes is one misconfigured text editor to introduce tabs into<br>the project. They likely won&#39;t be caught by code review, and they may not<br>immediately cause an error. But later on, they&#39;ll end up causing<br>frustrating, difficult-to-diagnose errors. You also need to be paranoid<br>about integrating code from other projects, because they might use tabs.<br></p><p>You could try to prevent this is Swift by banning the use of either tabs or<br>spaces in indentation. But this would put you in the middle of a holy war<br>that has been going on for decades, and would be a huge distraction. Not<br>only would you anger those who like either tabs or spaces, but you would<br>anger those who use tabs for semantic indentation, spaces for alignment.<br></p><p>The other classic problem, though not as common as it once was, is that<br>HTML doesn&#39;t preserve multiple spaces in a row by default. Not a problem<br>when you put the code in preformatted blocks, but there are HTML contexts<br>that will still mangle your code unexpectedly. For example, some Web mail<br>systems out there will display plan-text emails using HTML.<br></p><p>My personal pet peeve with significant whitespace is that it makes<br>refactoring code more tedious. Let&#39;s say I want to move an if statement out<br>of a loop. I select the statement, cut it, move my text cursor out of the<br>loop to where I want to insert it, make sure I&#39;m indented at the level I<br>want to be, and paste. The first line gets pasted with the proper<br>indentation. All the subsequent lines get pasted with their original<br>indentation, which I now have to fix.<br></p><p>Which brings me to the reason why I like braces: They allow text editors to<br>handle the indentation for me. I don&#39;t have to worry about it. In the above<br>example, I can just paste the code, and all the lines are indented<br>properly. If I get sent some code in an HTML context that mangles<br>indentation, or code that contains tabs, I can paste it into my text<br>editor, and the editor will indent it properly and remove all the tabs.<br></p><p>Critics of tabs tend to focus on the fact that they don&#39;t express anything<br>not already expressed by indentation. But as I&#39;ve explained here, that&#39;s<br>not quite true. They provide enough context to text editors to<br>automatically format your code for you. Without them, text editors cannot<br>perform certain formatting operations.<br></p><p>Additionally, I have heard tell that one of the original inspirations for<br>Python&#39;s significant whitespace code were C bugs caused by programmers who<br>omitted braces and relied on indentation for if statements. In other words,<br>code like the goto fail bug. Swift already takes care of this by making the<br>curly braces mandatory in if statements, so Swift code will not fall victim<br>to the class of bugs that inspired significant whitespace.<br></p><p>Python on the other hand, is vulnerable to this kind of bug due to<br>unintentional outdenting. Maybe a programmer, when moving a block, missed<br>intending the last line of the block. Perhaps an errant finger hit the<br>delete key, outdenting the last line of an if statement. Python will now<br>execute this line unconditionally. The equivalent error in braces-based<br>languages, accidentally deleting the closing brace, will just cause the<br>code to not compile.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/315b2a96/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed60bdfc964ec62cc48aa6020a03d7b?s=50"></div><header><strong>Brace syntax</strong> from <string>Alexander Regueiro</string> &lt;alexreg at gmail.com&gt;<p>December 20, 2015 at 07:00:00pm</p></header><div class="content"><p>Thanks for sharing your thoughts. I hear what you’re saying, but not sure any of these points are substantial enough to outweigh the benefits.<br></p><p>&gt; Having written a lot of Python code over the last seven years, I definitely prefer braces to significant whitespace, not because I enjoy looking at them or I want to indent my code incorrectly, but because they help my indent my code correctly and keep it correctly indented. The problems I&#39;ll describe below are all problems I have had in the real world when working with Python code.<br></p><p>Fair enough, though I should also say I’ve used the following languages significantly and still prefer tabs (having found braces only to be an annoyance, primarily because of redundancy and/or inconsistent application, &amp; other reasons).<br>C – braces<br>C# – braces<br>F# – tabs<br>Python – tabs<br>Haskell – tabs<br>Javascript – braces<br></p><p>&gt; Python suffers from the famous tab-spaces problem with significant indentation, which Guido listed is one of this &quot;Python Regrets&quot; in 2002. In short, Python considers tab characters to be worth 8 space characters, but very few if any people have their editor set to tab = 8 spaces. It actually doesn&#39;t matter what value you assign to tab. Sone people will have tab = 2 spaces, others 4, and I&#39;ve even worked with programmers who have it set to 5. The only defense against this is for everyone on a project to stick with either tabs or spaces, and this is why most Python programmers use spaces. But all it takes is one misconfigured text editor to introduce tabs into the project. They likely won&#39;t be caught by code review, and they may not immediately cause an error. But later on, they&#39;ll end up causing frustrating, difficult-to-diagnose errors. You also need to be paranoid about integrating code from other projects, because they might use tabs.<br></p><p>I think the best and simplest solution for this is just to force tabs to be used for semantic indentation, and disallow spaces. I believe F# does this (and also allows optional spaces which are ignored) – though that could have changed since I last used it.<br></p><p>&gt; You could try to prevent this is Swift by banning the use of either tabs or spaces in indentation. But this would put you in the middle of a holy war that has been going on for decades, and would be a huge distraction. Not only would you anger those who like either tabs or spaces, but you would anger those who use tabs for semantic indentation, spaces for alignment.<br></p><p>Is this really as big a problem as you make it out? Personally, as a programmer, I *like* being constrained in these ways. If there’s only one way to do something correctly, it saves me a potential headache. Also, I thought tabs had won the war(!)<br></p><p>&gt; The other classic problem, though not as common as it once was, is that HTML doesn&#39;t preserve multiple spaces in a row by default. Not a problem when you put the code in preformatted blocks, but there are HTML contexts that will still mangle your code unexpectedly. For example, some Web mail systems out there will display plan-text emails using HTML.<br>&gt; <br>&gt; My personal pet peeve with significant whitespace is that it makes refactoring code more tedious. Let&#39;s say I want to move an if statement out of a loop. I select the statement, cut it, move my text cursor out of the loop to where I want to insert it, make sure I&#39;m indented at the level I want to be, and paste. The first line gets pasted with the proper indentation. All the subsequent lines get pasted with their original indentation, which I now have to fix.<br></p><p>This is not a significant issue for me. We can’t help other software being stupid (or other languages having small deficiencies). I don’t think it crops up enough anyway.<br></p><p>&gt; Which brings me to the reason why I like braces: They allow text editors to handle the indentation for me. I don&#39;t have to worry about it. In the above example, I can just paste the code, and all the lines are indented properly. If I get sent some code in an HTML context that mangles indentation, or code that contains tabs, I can paste it into my text editor, and the editor will indent it properly and remove all the tabs.<br></p><p>It’s all about what you consider primary. Sure, you don’t have to worry about indentation then (or very little) if you use braces and have an editor that auto-formats. But equally you don’t have to worry about any braces (or lack of braces in single-line cases especially), if you use semantic indentation.<br></p><p>&gt; Critics of tabs tend to focus on the fact that they don&#39;t express anything not already expressed by indentation. But as I&#39;ve explained here, that&#39;s not quite true. They provide enough context to text editors to automatically format your code for you. Without them, text editors cannot perform certain formatting operations.<br></p><p>I think it is still true, as per above.<br></p><p>&gt; Additionally, I have heard tell that one of the original inspirations for Python&#39;s significant whitespace code were C bugs caused by programmers who omitted braces and relied on indentation for if statements. In other words, code like the goto fail bug. Swift already takes care of this by making the curly braces mandatory in if statements, so Swift code will not fall victim to the class of bugs that inspired significant whitespace.<br></p><p>I think that if you know from the outset that whitespace is semantic in a given language, such bugs are no more likely than mismatched brace problems.<br></p><p>&gt; Python on the other hand, is vulnerable to this kind of bug due to unintentional outdenting. Maybe a programmer, when moving a block, missed intending the last line of the block. Perhaps an errant finger hit the delete key, outdenting the last line of an if statement. Python will now execute this line unconditionally. The equivalent error in braces-based languages, accidentally deleting the closing brace, will just cause the code to not compile.<br></p><p>This has never personally happened to me in all my Python coding… though related issues like forgetting to indent are caught by the Python compiler, since empty blocks are not allowed (there’s the `pass` statement of course). It’s well worth my Python code being more readable and prettier, in any case.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Brace syntax</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December 20, 2015 at 12:00:00pm</p></header><div class="content"><p>On Sun, Dec 20, 2015 at 11:46 AM, Alexander Regueiro &lt;alexreg at gmail.com&gt;<br>wrote:<br></p><p>&gt; Thanks for sharing your thoughts. I hear what you’re saying, but not sure<br>&gt; any of these points are substantial enough to outweigh the benefits.<br>&gt;<br></p><p>And I think this is one of the most difficult aspects of discussing<br>languages on this list. We&#39;re both looking at the issues from our own<br>points of view, which are informed by our experiences, and neither of us<br>can&#39;t rightly say, &quot;your experience is invalid&quot;. The truth of the matter<br>is, we lack any empiric evidence on which to base our decisions. Do braces<br>hinder readability? You might say yes, I would say no. Again, we disagree,<br>but without a large-scale analysis of these types of bugs in languages with<br>braces vs. those without, we have nothing but our own experiences to go on,<br>and our experiences may not be representative of the programming community<br>at large.<br></p><p>That&#39;s a long-winded way of saying that, while you may not think any of<br>these points are substantial enough to outweigh the benefits, I don&#39;t see<br>any benefits to be outweighed. I&#39;m receptive to the argument that redundant<br>and unnecessary features should be removed from the language, but from my<br>point of view, braces provide value with no downsides.<br></p><p><br>&gt; I think the best and simplest solution for this is just to force tabs to<br>&gt; be used for semantic indentation, and disallow spaces. I believe F# does<br>&gt; this (and also allows optional spaces which are ignored) – though that<br>&gt; could have changed since I last used it.<br></p><p><br>Golang did something similar a while back. The go-fmt tool indents<br>everything with tabs. There was some grumbling about this, but my<br>impression was people got over it.<br></p><p><br>&gt; Is this really as big a problem as you make it out? Personally, as a<br>&gt; programmer, I *like* being constrained in these ways. If there’s only one<br>&gt; way to do something correctly, it saves me a potential headache. Also, I<br>&gt; thought tabs had won the war(!)<br></p><p><br>It&#39;s a very, very large distraction. Programmers love to bikeshed. I get<br>more than enough  email on this list, and I shudder to think of the flood<br>that would occur if the tabs-spaces war began in here. The war is not over.<br>Just google tabs vs spaces and you&#39;ll still find that people are writing<br>arguments about this in 2015.<br></p><p>For reference, everything I have seen has indicated that spaces are more<br>popular. PEP-8 even calls out spaces as the preferred indentation method in<br>Python, so I found it interesting that, coming from a Python background,<br>you thought tabs had won the war. It goes to show that, despite PEP-8, the<br>Python community is still not unified on tabs or spaces.<br></p><p>http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces<br></p><p>Two years ago, spaces were used three times more in Java projects on Github.<br></p><p>http://haacked.com/archive/2013/09/17/popular-code-conventions-on-github.aspx/<br></p><p><br></p><p>&gt; This is not a significant issue for me. We can’t help other software being<br>&gt; stupid (or other languages having small deficiencies). I don’t think it<br>&gt; crops up enough anyway.<br></p><p><br>This is a great example of my point about our different experiences. This<br>crops up often for me, but not often for you. Who knows how big a problem<br>this really is? Not I!<br></p><p><br>&gt; Additionally, I have heard tell that one of the original inspirations for<br>&gt; Python&#39;s significant whitespace code were C bugs caused by programmers who<br>&gt; omitted braces and relied on indentation for if statements. In other words,<br>&gt; code like the goto fail bug. Swift already takes care of this by making the<br>&gt; curly braces mandatory in if statements, so Swift code will not fall victim<br>&gt; to the class of bugs that inspired significant whitespace.<br>&gt;<br>&gt; I think that if you know from the outset that whitespace is semantic in a<br>&gt; given language, such bugs are no more likely than mismatched brace problems.<br></p><p><br>No more likely, I agree, but my point is these bugs are more catastrophic<br>in significant indentation languages. The entire reason why swift requires<br>braces for even single-line statements is to avoid the kinds of bugs that<br>caused the goto fail issue.<br></p><p><br>This has never personally happened to me in all my Python coding… though<br>&gt; related issues like forgetting to indent are caught by the Python compiler,<br>&gt; since empty blocks are not allowed (there’s the `pass` statement of<br>&gt; course). It’s well worth my Python code being more readable and prettier,<br>&gt; in any case.<br>&gt;<br></p><p>And again, different experiences. This has happened to me a couple of times<br>over the years.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/a3e33399/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed60bdfc964ec62cc48aa6020a03d7b?s=50"></div><header><strong>Brace syntax</strong> from <string>Alexander Regueiro</string> &lt;alexreg at gmail.com&gt;<p>December 20, 2015 at 08:00:00pm</p></header><div class="content"><p>That’s true, we are discussing a rather subjective point here. At the end of the day, it will probably come down to personal preferences of the core team members.<br></p><p>I haven’t yet seen a good argument against the ‘redundancy’ point I (and a couple of others) have made, but then again what others consider a ‘good’ argument seems to differ. Perhaps the best argument is that the redundancy is worth it for other reasons (easier to spot scoping errors?).<br></p><p>Regarding tabs vs. spaces, I was only kidding around really. The (!) was meant to indicate that, sorry for not being clear! I’ve done a fair amount of Python, but actually come from more of a C/C# background. My personal preference is tabs, but wouldn’t like to claim the same of the community. We don’t want to start up the war here, like you say.<br></p><p>I’ll be honest, I do like that Swift requires braces for single-line statements. It introduces a level of consistency that makes me reasonably happy (given that I have to tolerate braces anyway).<br></p><p>&gt; On 20 Dec 2015, at 20:37, Michael Buckley &lt;michael at buckleyisms.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sun, Dec 20, 2015 at 11:46 AM, Alexander Regueiro &lt;alexreg at gmail.com &lt;mailto:alexreg at gmail.com&gt;&gt; wrote:<br>&gt; Thanks for sharing your thoughts. I hear what you’re saying, but not sure any of these points are substantial enough to outweigh the benefits.<br>&gt; <br>&gt; And I think this is one of the most difficult aspects of discussing languages on this list. We&#39;re both looking at the issues from our own points of view, which are informed by our experiences, and neither of us can&#39;t rightly say, &quot;your experience is invalid&quot;. The truth of the matter is, we lack any empiric evidence on which to base our decisions. Do braces hinder readability? You might say yes, I would say no. Again, we disagree, but without a large-scale analysis of these types of bugs in languages with braces vs. those without, we have nothing but our own experiences to go on, and our experiences may not be representative of the programming community at large.<br>&gt; <br>&gt; That&#39;s a long-winded way of saying that, while you may not think any of these points are substantial enough to outweigh the benefits, I don&#39;t see any benefits to be outweighed. I&#39;m receptive to the argument that redundant and unnecessary features should be removed from the language, but from my point of view, braces provide value with no downsides.<br>&gt;  <br>&gt; I think the best and simplest solution for this is just to force tabs to be used for semantic indentation, and disallow spaces. I believe F# does this (and also allows optional spaces which are ignored) – though that could have changed since I last used it.<br>&gt; <br>&gt; Golang did something similar a while back. The go-fmt tool indents everything with tabs. There was some grumbling about this, but my impression was people got over it. <br>&gt;  <br>&gt; Is this really as big a problem as you make it out? Personally, as a programmer, I *like* being constrained in these ways. If there’s only one way to do something correctly, it saves me a potential headache. Also, I thought tabs had won the war(!)<br>&gt; <br>&gt; It&#39;s a very, very large distraction. Programmers love to bikeshed. I get more than enough  email on this list, and I shudder to think of the flood that would occur if the tabs-spaces war began in here. The war is not over. Just google tabs vs spaces and you&#39;ll still find that people are writing arguments about this in 2015.<br>&gt; <br>&gt; For reference, everything I have seen has indicated that spaces are more popular. PEP-8 even calls out spaces as the preferred indentation method in Python, so I found it interesting that, coming from a Python background, you thought tabs had won the war. It goes to show that, despite PEP-8, the Python community is still not unified on tabs or spaces.<br>&gt; <br>&gt; http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces &lt;http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces&gt;<br>&gt; <br>&gt; Two years ago, spaces were used three times more in Java projects on Github.<br>&gt; <br>&gt; http://haacked.com/archive/2013/09/17/popular-code-conventions-on-github.aspx/ &lt;http://haacked.com/archive/2013/09/17/popular-code-conventions-on-github.aspx/&gt;<br>&gt; <br>&gt;  <br>&gt; This is not a significant issue for me. We can’t help other software being stupid (or other languages having small deficiencies). I don’t think it crops up enough anyway.<br>&gt; <br>&gt; This is a great example of my point about our different experiences. This crops up often for me, but not often for you. Who knows how big a problem this really is? Not I! <br>&gt; <br>&gt; <br>&gt; &gt; Additionally, I have heard tell that one of the original inspirations for Python&#39;s significant whitespace code were C bugs caused by programmers who omitted braces and relied on indentation for if statements. In other words, code like the goto fail bug. Swift already takes care of this by making the curly braces mandatory in if statements, so Swift code will not fall victim to the class of bugs that inspired significant whitespace.<br>&gt; <br>&gt; I think that if you know from the outset that whitespace is semantic in a given language, such bugs are no more likely than mismatched brace problems.<br>&gt; <br>&gt; No more likely, I agree, but my point is these bugs are more catastrophic in significant indentation languages. The entire reason why swift requires braces for even single-line statements is to avoid the kinds of bugs that caused the goto fail issue.<br>&gt;  <br>&gt; <br>&gt; This has never personally happened to me in all my Python coding… though related issues like forgetting to indent are caught by the Python compiler, since empty blocks are not allowed (there’s the `pass` statement of course). It’s well worth my Python code being more readable and prettier, in any case.<br>&gt; <br>&gt; And again, different experiences. This has happened to me a couple of times over the years.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/f989ac59/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Brace syntax</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 21, 2015 at 02:00:00am</p></header><div class="content"><p>We&#39;re really wasting time here (I&#39;m pretty sure that the core team isn&#39;t considering the possibility), but:<br></p><p>&gt; You could try to prevent this is Swift by banning the use of either tabs or spaces in indentation. But this would put you in the middle of a holy war [...]<br></p><p>Go does just that, with great profit.<br></p><p>(gofmt turns all indentation into tabs, although I would argue that a better approach is to ban tabs and only ever allow spaces)<br></p><p>&gt; Critics of [braces] tend to focus on the fact that they don&#39;t express anything not already expressed by indentation. But as I&#39;ve explained here, that&#39;s not quite true. They provide enough context to text editors to automatically format your code for you. Without them, text editors cannot perform certain formatting operations.<br></p><p><br>Your whole point is that indentation sometimes gets lost on copy/paste, and braces don&#39;t. But it&#39;s a strange argument. Why would you use an editor or email program that routinely loses your data (indentation in this case)? Why would you copy your code from a strange web page whose author didn&#39;t even bother to format it correctly?<br></p><p>It sounds like you&#39;re not using per-line copy/paste features in your editor, and you need to change your editor or editing habits.<br></p><p>But I take the resulting broader point: indentation-based editing skills are a bit harder to master.<br></p><p>&gt; Python on the other hand, is vulnerable to this kind of bug due to unintentional outdenting.<br></p><p>This is actually true. I&#39;ve experienced this in Python a few times. Second valid point, I suppose, although it has never been a problem to catch it in practice.<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eed60bdfc964ec62cc48aa6020a03d7b?s=50"></div><header><strong>Brace syntax</strong> from <string>Alexander Regueiro</string> &lt;alexreg at gmail.com&gt;<p>December 20, 2015 at 08:00:00pm</p></header><div class="content"><p>How can we find out if the core team is willing to consider this? Do we know their original rationale for choosing braces? The reason I proposed this in the first place was because I suspected they’d just chosen them by default (given that Swift was inspired to large extends by Objective C and C#).<br></p><p>&gt; On 20 Dec 2015, at 20:33, Andrey Tarantsov &lt;andrey at tarantsov.com&gt; wrote:<br>&gt; <br>&gt; We&#39;re really wasting time here (I&#39;m pretty sure that the core team isn&#39;t considering the possibility), but:<br>&gt; <br>&gt;&gt; You could try to prevent this is Swift by banning the use of either tabs or spaces in indentation. But this would put you in the middle of a holy war [...]<br>&gt; <br>&gt; Go does just that, with great profit.<br>&gt; <br>&gt; (gofmt turns all indentation into tabs, although I would argue that a better approach is to ban tabs and only ever allow spaces)<br>&gt; <br>&gt;&gt; Critics of [braces] tend to focus on the fact that they don&#39;t express anything not already expressed by indentation. But as I&#39;ve explained here, that&#39;s not quite true. They provide enough context to text editors to automatically format your code for you. Without them, text editors cannot perform certain formatting operations.<br>&gt; <br>&gt; <br>&gt; Your whole point is that indentation sometimes gets lost on copy/paste, and braces don&#39;t. But it&#39;s a strange argument. Why would you use an editor or email program that routinely loses your data (indentation in this case)? Why would you copy your code from a strange web page whose author didn&#39;t even bother to format it correctly?<br>&gt; <br>&gt; It sounds like you&#39;re not using per-line copy/paste features in your editor, and you need to change your editor or editing habits.<br>&gt; <br>&gt; But I take the resulting broader point: indentation-based editing skills are a bit harder to master.<br>&gt; <br>&gt;&gt; Python on the other hand, is vulnerable to this kind of bug due to unintentional outdenting.<br>&gt; <br>&gt; This is actually true. I&#39;ve experienced this in Python a few times. Second valid point, I suppose, although it has never been a problem to catch it in practice.<br>&gt; <br>&gt; A.<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Brace syntax</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 21, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; How can we find out if the core team is willing to consider this?<br></p><p>Well, for example:<br></p><p>&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are also downsides.  Deviating from the C family in this respect would have to provide *overwhelmingly* large advantages for us to take such a plunge, and they simply don’t exist.<br>&gt; <br>&gt; -Chris<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Brace syntax</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 20, 2015 at 12:00:00pm</p></header><div class="content"><p>It&#39;s been mentioned in a few other threads, but it would be nice to have a FAQ somewhere listing common things that people are likely to ask for, and what sort of burden of proof they should bring to the table if they want to make a proposal about those things.<br></p><p>This would prevent us from having perennially recurring (and increasingly useless) discussions, while also leaving the door open for people who really do have groundbreaking new arguments for e.g. whitespace vs braces.<br></p><p>Austin<br></p><p>&gt; On Dec 20, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; How can we find out if the core team is willing to consider this?<br>&gt; <br>&gt; Well, for example:<br>&gt; <br>&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are also downsides.  Deviating from the C family in this respect would have to provide *overwhelmingly* large advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Brace syntax</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 20, 2015 at 01:00:00pm</p></header><div class="content"><p>You&#39;re right that this has been requested elsewhere;  it&#39;s currently on me to get some basic structure for a &quot;commonly requested changes&quot; page into the swift-evolution repo so we can track such things. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 20, 2015, at 12:45 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s been mentioned in a few other threads, but it would be nice to have a FAQ somewhere listing common things that people are likely to ask for, and what sort of burden of proof they should bring to the table if they want to make a proposal about those things.<br>&gt; <br>&gt; This would prevent us from having perennially recurring (and increasingly useless) discussions, while also leaving the door open for people who really do have groundbreaking new arguments for e.g. whitespace vs braces.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt;&gt; On Dec 20, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How can we find out if the core team is willing to consider this?<br>&gt;&gt; <br>&gt;&gt; Well, for example:<br>&gt;&gt; <br>&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are also downsides.  Deviating from the C family in this respect would have to provide *overwhelmingly* large advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; A.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Brace syntax</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 20, 2015 at 06:00:00pm</p></header><div class="content"><p>I agree, there is no need to change this. Braces are fine. Even if they are recommended at the end of the line, prior to Swift I was a firm believer in the one-true-brace style (i.e. aligned) but I prefer to have the defacto standard present in Swift. It turns out it is fine and does not bother me now that I am used to it. Was initially maybe wishing it was no braces? Yes, but I think it was the right decision in the end. If we change it, some people will be annoyed that it changed other will will be happy, I doubt there can can be any agreement to change it. <br></p><p>One advantage of being on the core team that designed the language prior to open sourcing it,  is that you get to make decisions like this. I am sure they were quite aware of Python and every other language out there and decided to go with this approach. <br></p><p>This may sound a bit ironic coming from a guy who wants to replace ternary, and it is not a bad thing to revisit things if they are truly going to make things better but I think what I am suggesting actually could be more powerful and useful. Changing the brace style does not improve anything it except level of clutter, after that, it is more of personal preference. <br></p><p>Further, I used to be in firmly in the tab camp but now, I find I don’t care and actually prefer spaces. <br></p><p>- Paul		<br></p><p>&gt; On Dec 20, 2015, at 1:34 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You&#39;re right that this has been requested elsewhere;  it&#39;s currently on me to get some basic structure for a &quot;commonly requested changes&quot; page into the swift-evolution repo so we can track such things. <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Dec 20, 2015, at 12:45 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s been mentioned in a few other threads, but it would be nice to have a FAQ somewhere listing common things that people are likely to ask for, and what sort of burden of proof they should bring to the table if they want to make a proposal about those things.<br>&gt;&gt; <br>&gt;&gt; This would prevent us from having perennially recurring (and increasingly useless) discussions, while also leaving the door open for people who really do have groundbreaking new arguments for e.g. whitespace vs braces.<br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 20, 2015, at 12:37 PM, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How can we find out if the core team is willing to consider this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, for example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do agree that there are some benefits to ditching braces and relying on indentation instead, but there are also downsides.  Deviating from the C family in this respect would have to provide *overwhelmingly* large advantages for us to take such a plunge, and they simply don’t exist.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Brace syntax</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December 20, 2015 at 12:00:00pm</p></header><div class="content"><p>On Sun, Dec 20, 2015 at 12:33 PM, Andrey Tarantsov &lt;andrey at tarantsov.com&gt;<br>wrote:<br></p><p>&gt; Your whole point is that indentation sometimes gets lost on copy/paste,<br>&gt; and braces don&#39;t. But it&#39;s a strange argument. Why would you use an editor<br>&gt; or email program that routinely loses your data (indentation in this case)?<br>&gt; Why would you copy your code from a strange web page whose author didn&#39;t<br>&gt; even bother to format it correctly?<br>&gt;<br>&gt; It sounds like you&#39;re not using per-line copy/paste features in your<br>&gt; editor, and you need to change your editor or editing habits.<br>&gt;<br>&gt; But I take the resulting broader point: indentation-based editing skills<br>&gt; are a bit harder to master.<br></p><p><br>Yeah, good point. But since I&#39;m writing Swift code, I&#39;m going to use Xcode.<br>And with apologies to users of other editors, I suspect 99% of swift code<br>will be written in Xcode, so it&#39;s probably worth considering how Xcode will<br>deal with copy-paste.<br></p><p>But for Python, I could use a different editor.<br></p><p>As for why I would accept such poorly-formatted code, the exact scenario<br>I&#39;m thinking of happened a few years ago. A colleague went on vacation and<br>realized one of the functions he had written had a bad bug in it. He<br>couldn&#39;t get into the corporate network over VPN from his remote location,<br>so he emailed me what the function should actually be and then disconnected<br>himself from the Internet for a week. The problem was whatever email system<br>he used to send the code mangled the indentation. It was quite an<br>impressive feat.<br></p><p>I suspect the more common use case is people copying and pasting<br>poorly-formatted code off Stack Overflow.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/8ee0a4a3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 20, 2015 at 11:00:00am</p></header><div class="content"><p>Yes, I went out of my way to point out that it *is* contrived, because even<br>a programmer who uses a newline for the opening brace *elsewhere* in the<br>same project, isn&#39;t going to take up 11 lines to define one variable.<br></p><p>On Sun, Dec 20, 2015 at 7:52 AM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt;<br>wrote:<br></p><p>&gt; Contrived example Charles. Apple&#39;s tutorials consistently put braces on<br>&gt; the line of the statement declaration.<br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120<br>&gt;<br>&gt; On Sun, Dec 20, 2015 at 7:16 AM Charles Constant via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Andrey&#39;s post encourages me to veer into the merits of significant<br>&gt;&gt; whitespace vs braces. This is probably unwise of me, since we&#39;re not all<br>&gt;&gt; going to agree any time soon, but I can&#39;t resist pointing out an example:<br>&gt;&gt;<br>&gt;&gt; ////////////////////////////////////////////////////////////////////////<br>&gt;&gt;<br>&gt;&gt; var foo: Int<br>&gt;&gt; {<br>&gt;&gt;     get<br>&gt;&gt;     {<br>&gt;&gt;         return _foo<br>&gt;&gt;     }<br>&gt;&gt;     set<br>&gt;&gt;     {<br>&gt;&gt;         _foo = newValue<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; ////////////////////////////////////////////////////////////////////////<br>&gt;&gt;<br>&gt;&gt; var foo: Int:<br>&gt;&gt;     get:<br>&gt;&gt;         return _foo<br>&gt;&gt;     set:<br>&gt;&gt;         _foo = newValue<br>&gt;&gt;<br>&gt;&gt; ////////////////////////////////////////////////////////////////////////<br>&gt;&gt;<br>&gt;&gt; It&#39;s obvious no programmer is going to be consistent about braces in the<br>&gt;&gt; first example - it&#39;s absurdly verbose. So with braces in Swift, pretty much<br>&gt;&gt; everything you write carries the overhead of &quot;what inconsistent way will i<br>&gt;&gt; format the braces for this code?&quot; For me, I&#39;d rather throw out the (largely<br>&gt;&gt; redundant) noise, and stick with just the content.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Sun, Dec 20, 2015 at 3:59 AM, Andrey Tarantsov via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t know many people who have experienced a large variety (8+?) of<br>&gt;&gt;&gt; programming languages and prefer Python&#39;s forced indentation<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Count me as one. I&#39;d prefer Swift to have Python-style indentation, just<br>&gt;&gt;&gt; on the grounds of braces being stupid (why would you want to enter the same<br>&gt;&gt;&gt; scope information *twice*)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So +1 from me, although I don&#39;t suffer from the braces at all.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I do want to point out that the amount of code that fits on a screen<br>&gt;&gt;&gt; *is* fairly important, and you should keep your methods short, so one<br>&gt;&gt;&gt; less brace per method means a couple more methods per screen.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This would also free up braces to mean “closure” in 100% of cases, which<br>&gt;&gt;&gt; is good for consistency.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But it would introduce it&#39;s share of problems for sure, so I don&#39;t feel<br>&gt;&gt;&gt; strongly about this proposal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also admit that braces are generally preferred, for some mysterious<br>&gt;&gt;&gt; reason that I hope a believer can articulate here. Take Sass, for example;<br>&gt;&gt;&gt; it has both an indentation-based syntax and a braces-based syntax, and the<br>&gt;&gt;&gt; latter one seems way more popular.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; A.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/27908cea/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>December 19, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:39 PM, Alexander Regueiro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby.<br></p><p>No. No no no no no no no. No. Please, no.<br></p><p>-1.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/7111ca41/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Brace syntax</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>December 20, 2015 at 03:00:00pm</p></header><div class="content"><p>-1 I agree with Charles, although Chris and Kevin made some pretty good<br>points too :)<br></p><p>On Sun, Dec 20, 2015 at 3:03 PM, Charles Srstka via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Dec 19, 2015, at 7:39 PM, Alexander Regueiro via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Has anyone considered removing braces from the Swift language? The main<br>&gt; alternative would be indentation-based scoping like in Python or Ruby.<br>&gt;<br>&gt;<br>&gt; No. No no no no no no no. No. Please, no.<br>&gt;<br>&gt; -1.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/b7aacba9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>+1 fwiw<br></p><p>Grr, I hate braces so much I can&#39;t even... but I&#39;ve seen this discussed on<br>the Apple dev forums. It&#39;s not going to happen. I think the best we (those<br>of us who dislike braces) can ever hope for is that Xcode gives us a way to<br>view our code in the IDE as though braces didn&#39;t exists - even if the<br>underlying file uses them, and probably the clipboard so that the outside<br>world can have &quot;one way&quot; of writing Swift. I doubt that will happen either,<br>but it seems far more likely to me than that Swift will suddenly do a 180<br>on something I&#39;m sure Chris and the rest considered at length already.<br></p><p><br></p><p>On Sat, Dec 19, 2015 at 5:39 PM, Alexander Regueiro via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Has anyone considered removing braces from the Swift language? The main<br>&gt; alternative would be indentation-based scoping like in Python or Ruby.<br>&gt; There already seems to be a general emphasis on conciseness,  lack of<br>&gt; redundancy, and a modern syntax. e.g. semicolons are not required for<br>&gt; single-line statements; brackets have been removed from if/for/while<br>&gt; expressions, compared to C-style syntax. So, why not go the whole way in<br>&gt; breaking the C-style connection? The present syntax seems to be shunning C,<br>&gt; but only slightly.<br>&gt;<br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/516482b0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Brace syntax</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 20, 2015 at 12:00:00pm</p></header><div class="content"><p>-1, I like braces<br></p><p>But it&#39;s interesting to see that there are many wishes that could be addressed quite easily by the IDE:<br>Mandatory self, braces, optional return keyword… just not sure weather it would be good to put more complexity into Xcode than into the compiler ;-)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Brace syntax</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 20, 2015 at 04:00:00am</p></header><div class="content"><p>&gt; just not sure weather it would be good to put more complexity into Xcode<br></p><p>Braceless mode is sort of a special case. It could be useful, even for<br>people prefer braces, to temporarily hide some of the more, uh, decorative<br>elements - and vice versa.<br></p><p>The option to switch back and forth, for braces/significant whitespace is<br>helpful to both sides. As much as I like Python, it would be cool to be<br>able to &quot;turn on braces&quot; and double-check some section of my code with an<br>unusually high number of indentations. Likewise, I can imagine it being<br>useful to get rid of some vertical space for someone who otherwise likes<br>braces - e.g.: to scan through a Class that has a large number of getters /<br>setters (which just love to barf out newlines with braces in Swift).<br></p><p>And it would be quite like Apple to brand it &quot;Pseudo-Code View&quot; or<br>something.<br></p><p><br></p><p><br></p><p><br>On Sun, Dec 20, 2015 at 3:48 AM, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1, I like braces<br>&gt;<br>&gt; But it&#39;s interesting to see that there are many wishes that could be<br>&gt; addressed quite easily by the IDE:<br>&gt; Mandatory self, braces, optional return keyword… just not sure weather it<br>&gt; would be good to put more complexity into Xcode than into the compiler ;-)<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/cb7ea8d9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Brace syntax</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 20, 2015 at 03:00:00pm</p></header><div class="content"><p>+1 for significant whitespace instead of braces. But as others said, ain&#39;t gonna happen... :(<br></p><p>Sent from my iPhone<br></p><p>&gt; On 20 Dec 2015, at 02:39, Alexander Regueiro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4889457e1fdb5f3ba65d7053432042f8?s=50"></div><header><strong>Brace syntax</strong> from <string>Bart Whiteley</string> &lt;bwhiteley at gmail.com&gt;<p>December 20, 2015 at 09:00:00am</p></header><div class="content"><p>On Sat, Dec 19, 2015 at 6:39 PM, Alexander Regueiro via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Has anyone considered removing braces from the Swift language?<br>&gt; The main alternative would be indentation-based scoping like in Python<br>&gt; or Ruby. There already seems to be a general emphasis on conciseness,<br>&gt; lack of redundancy, and a modern syntax. e.g. semicolons are not<br>&gt; required for single-line statements; brackets have been removed<br>&gt; from if/for/while expressions, compared to C-style syntax. So, why<br>&gt; not go the whole way in breaking the C-style connection?<br>&gt; The present syntax seems to be shunning C, but only slightly.<br></p><p>-1.<br>Please no. I&#39;ve written a lot of Python. I much prefer Swift&#39;s strict<br>brace requirement.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Brace syntax</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 20, 2015 at 09:00:00pm</p></header><div class="content"><p>Honestly? Who cares? This doesn’t seem like a reasonable conversation to have, especially 1.5 years into Swift’s existence.<br></p><p>Having done a lot of work in Objective C (C-style braces), Ruby (newline, end), and CoffeeScript (significant whitespace), I couldn’t be less bothered with Swift’s choice of curly braces.<br></p><p>To me, the problem with C-style syntax are things like unnecessary parentheses and semicolons. Swift has neither of those. Comparing {} and Ruby style, I could go either way, it doesn’t really matter. Ruby is hardly less characters, just different and less symbols. Also has advantage that {} in blocks is separate from scoping. OTOH, symbolic {} is easier to discern and very clearly shows scopes.<br></p><p>Significant whitespace is very neat, but many a times I was confused by it, and made a mistake, or was close to making a mistake, because scopes just weren’t clearly defined enough. I like it, but I can definitely see downsides.<br></p><p>&lt;/bikeshed&gt;<br></p><p>— Radek<br></p><p>&gt; On 20 Dec 2015, at 02:39, Alexander Regueiro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Has anyone considered removing braces from the Swift language? The main alternative would be indentation-based scoping like in Python or Ruby. There already seems to be a general emphasis on conciseness,  lack of redundancy, and a modern syntax. e.g. semicolons are not required for single-line statements; brackets have been removed from if/for/while expressions, compared to C-style syntax. So, why not go the whole way in breaking the C-style connection? The present syntax seems to be shunning C, but only slightly.<br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
