<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a24682926961206ad452d8455b09457?s=50"></div><header><strong>Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)</strong> from <string>thorsten at portableinnovations.de</string> &lt;thorsten at portableinnovations.de&gt;<p>December 10, 2015 at 11:00:00pm</p></header><div class="content"><p>I would like to revoke my support for the removal of the C-style for-loop because of the following reasons:<br></p><p>Peformance<br>When doing the review appended below I have neglected to think about performance issues the replacement of C-style for-loops by for-in loops might have. This has not been part of the discussion either, so I am worried that it is not possible to replace C-style for-loops without losing performance or having to use while-loops which might be more verbose especially in the problematic cases with continue and break that have been discussed.<br></p><p>Style<br>When replacing C-style for-loops by while-loops I fear that bad styles will creep in like the usage of &quot;defer&quot; for the incrementation part of the loop which has been suggested too often in the discussion, even though it has been made already clear by others that &quot;defer&quot; is not appropriate here because of changed semantics in case of break or exceptions.<br></p><p>Therefore I have reconsidered my review and now vote strongly against removal of the C-style for-loop, although I would like to see it replaced by a more Swifty version as proposed as alternative in my review below.<br></p><p>-Thorsten <br></p><p>Anfang der weitergeleiteten Eâ€‘Mail:<br></p><p>&gt; Von: &quot;thorsten at portableinnovations.de&quot; &lt;thorsten at portableinnovations.de&gt;<br>&gt; Datum: 10. Dezember 2015 um 08:22:51 MEZ<br>&gt; An: Swift Evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Betreff: [swift-evolution] Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)<br>&gt; <br>&gt; <br>&gt; 1. Evaluation<br>&gt; Initially I was hesitant but now I support this change.<br>&gt; The C-style for-loop is syntactic baggage (the semicolons do not separate its parts very well) and suffers from the problem that it is imperative, i.e. The loop variable is just that, a variable, and therefore will not work as expected when captured in closures that are executed later, e.g. in a GCD queue.<br>&gt; There might be some corner cases where the C-style for-loop cannot be easily replaced with a for-loop or a while-loop in the presence of several continue statements, which is why I originally proposed to Swiftify the C-style for-loop instead of removing it, but I haven&#39;t seen a concrete one yet and I am optimistic that good solutions can be found even for these cases by refactorings e.g. extracting the loop body into a function and replacing continue with return. If someone has a concrete case for which that does not apply for some reasons I&#39;d be interested to see that case and reconsider.<br>&gt; <br>&gt; 2. Significance<br>&gt; The C-style for-loop does not fit syntactically and its use is limited. In most cases the for-in loop is much better suited and more expressive and for the remaining few cases a while-loop can be used. <br>&gt; <br>&gt; 3. Direction of Swift<br>&gt; This proposal fits the philosophy of Swift with regards to readability and safety because the alternatives are more expressive and readable.<br>&gt; <br>&gt; 4. Comparisons<br>&gt; I have long experience with mostly Smalltalk, Haskell, Swift and Java, and from earlier times with C, C++, Python and Ruby. Furthermore I follow the development of many languages with modern constructs closely, e.g. Scala, Ceylon, Clojure and others and have a strong interest in programming language design.<br>&gt; Most of these languages, i.e. all except Swift, Java and of course C and C++, do not have a C-style for-loop. They typically do have more expressive loops similar to the for-in loop of Swift (or more powerful, e.g. Scala&#39;s for-expression which is similar to Haskells monadic do-notation).<br>&gt; Dylan has an iterating for-loop which improves on the C-style for-loop by introducing a new binding for the loop &quot;variable&quot; on each iteration, which might look like follows in a Swiftified syntax:<br>&gt; <br>&gt; for i = 0 then i + 1 while i &lt; limit { ... }<br>&gt; for i = 0 then i + 1 until i == limit { ... }<br>&gt; <br>&gt; which effectively introduces a let binding in the init clause scoped to the loop, an expression to replace the binding with for the next iteration and a while or until clause which is checked before each iteration.<br>&gt; <br>&gt; I would propose this as an alternative to removing the C-style for-loop if a review makes a convincing case that an incremental loop is still needed.<br>&gt; <br>&gt; 5. Effort<br>&gt; I read the proposal carefully, read the discussion in the mailing list, checked two large Java codebases (large systems for logistics) for occurences of for-loops and did only find trivial ones. Furthermore I checked textbooks for their looping constructs, e.g. &quot;Concepts, techniques and models of computer programming&quot; by van Roy and Haridi (highly recommended!), .<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/239737d4/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
