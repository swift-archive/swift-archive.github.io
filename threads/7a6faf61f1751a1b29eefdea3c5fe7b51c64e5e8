<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/37ed623c7e539c1e991c5be604e4a7aa?s=50"></div><header><strong>Automatically dump stack trace on trap</strong> from <string>Karl Pickett</string> &lt;karl.pickett at gmail.com&gt;<p>December 22, 2015 at 06:00:00pm</p></header><div class="content"><p>Having stack traces on critical faults is an &quot;enterprisey&quot; feature that I<br>like.  It would be nice if swift allowed customization of what happened on<br>a trap (like array out of bounds), so it dumped the thread&#39;s stack trace to<br>stderr before exiting.<br></p><p>I can simulate the desired behavior by installing a signal handler for<br>SIGILL, and launch a script that fires up a debugger which attaches to the<br>process and dumps the stack trace(s) before terminating it.<br></p><p>I wrote it in C pretty easily and it is here:<br>https://gist.github.com/kjpgit/9a1059a5960694767193<br></p><p>It&#39;s just a small pain to build and link the C code to each swift project.<br>So my question is, can I use pure swift code for the signal handling<br>instead of that C shim.<br></p><p>1)  Does swift on linux support an atomic_fetch_add() equivalent out of the<br>box (or some other signal-safe serialization)<br>2) Any other concerns using swift code in a signal handler.  I&#39;d just be<br>using Glibc system calls, and any char data would be pre-allocated.<br></p><p>Thanks<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151222/7a6fe5e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Automatically dump stack trace on trap</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>December 22, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 22, 2015, at 4:32 PM, Karl Pickett via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Having stack traces on critical faults is an &quot;enterprisey&quot; feature that I like.  It would be nice if swift allowed customization of what happened on a trap (like array out of bounds), so it dumped the thread&#39;s stack trace to stderr before exiting.<br>&gt; <br>&gt; I can simulate the desired behavior by installing a signal handler for SIGILL, and launch a script that fires up a debugger which attaches to the process and dumps the stack trace(s) before terminating it.<br>&gt; <br>&gt; I wrote it in C pretty easily and it is here: https://gist.github.com/kjpgit/9a1059a5960694767193 &lt;https://gist.github.com/kjpgit/9a1059a5960694767193&gt;<br>&gt; <br>&gt; It&#39;s just a small pain to build and link the C code to each swift project.  So my question is, can I use pure swift code for the signal handling instead of that C shim.<br>&gt; <br>&gt; 1)  Does swift on linux support an atomic_fetch_add() equivalent out of the box (or some other signal-safe serialization)<br>&gt; 2) Any other concerns using swift code in a signal handler.  I&#39;d just be using Glibc system calls, and any char data would be pre-allocated.<br></p><p>You should use the C code. Signal handlers are allowed to do almost nothing. Neither the Swift runtime nor the code generated by the Swift compiler promise to be signal-safe.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151222/5dfeef75/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
