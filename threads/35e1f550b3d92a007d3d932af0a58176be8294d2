<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Swift 3 Ranges</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>September  6, 2016 at 08:00:00am</p></header><div class="content"><p>Hi people,<br></p><p>I’ve recently started migrating some Swift 2 projects to Swift 3. I came across the split of Range into Range and ClosedRange and I’ve really struggled with it. Specifically, in Swift 2, I had a struct with a Range property that was initialised in many places with either a closed or open range:<br></p><p>struct Day { … }<br>struct Day : Comparable { … }<br>struct Day : Strippable { … }<br></p><p>struct Info {<br>    let name: String<br>    let range: Range&lt;Day&gt;<br>}<br></p><p>Info(name: &quot;Christmas Vacation&quot;, range: twentyfith...thirtyfirst)<br>Info(name: &quot;Summer Vacation&quot;, range: someday..&lt;otherday)<br></p><p>Now, in Swift 3, it seems like we’ve lost a type to represent any range to allow an API client the flexibility to specify it as he wishes. Is there a solution to this problem through a protocol which both ranges conform to, or are we stuck with this because of the new API?<br></p><p>protocol RangeType {<br>    associatedtype Bounds<br>    let lowerBound: Bound { get }<br>    let upperBound: Bound { get }<br>    // what else? not even sure if it is possible to define such a protocol<br>}<br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/35e194d2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Swift 3 Ranges</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>September  6, 2016 at 08:00:00am</p></header><div class="content"><p>I have the impression we exchanged flexibility for correctness (the ability to represent 0..&lt;Int.max) and that it&#39;s wasn&#39;t worth the loss of flexibility.1<br></p><p>Or am I missing something?<br></p><p>&gt; On 6 Sep 2016, at 08:15, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi people,<br>&gt; <br>&gt; I’ve recently started migrating some Swift 2 projects to Swift 3. I came across the split of Range into Range and ClosedRange and I’ve really struggled with it. Specifically, in Swift 2, I had a struct with a Range property that was initialised in many places with either a closed or open range:<br>&gt; <br>&gt; struct Day { … }<br>&gt; struct Day : Comparable { … }<br>&gt; struct Day : Strippable { … }<br>&gt; <br>&gt; struct Info {<br>&gt;     let name: String<br>&gt;     let range: Range&lt;Day&gt;<br>&gt; }<br>&gt; <br>&gt; Info(name: &quot;Christmas Vacation&quot;, range: twentyfith...thirtyfirst)<br>&gt; Info(name: &quot;Summer Vacation&quot;, range: someday..&lt;otherday)<br>&gt; <br>&gt; Now, in Swift 3, it seems like we’ve lost a type to represent any range to allow an API client the flexibility to specify it as he wishes. Is there a solution to this problem through a protocol which both ranges conform to, or are we stuck with this because of the new API?<br>&gt; <br>&gt; protocol RangeType {<br>&gt;     associatedtype Bounds<br>&gt;     let lowerBound: Bound { get }<br>&gt;     let upperBound: Bound { get }<br>&gt;     // what else? not even sure if it is possible to define such a protocol<br>&gt; }<br>&gt; <br>&gt; David.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/b0a945d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Swift 3 Ranges</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>September  6, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 6 Sep 2016, at 07:39, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I have the impression we exchanged flexibility for correctness (the ability to represent 0..&lt;Int.max) and that it&#39;s wasn&#39;t worth the loss of flexibility.1<br>&gt; <br>&gt; Or am I missing something?<br>&gt; <br>&gt; On 6 Sep 2016, at 08:15, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi people,<br>&gt;&gt; <br>&gt;&gt; I’ve recently started migrating some Swift 2 projects to Swift 3. I came across the split of Range into Range and ClosedRange and I’ve really struggled with it. Specifically, in Swift 2, I had a struct with a Range property that was initialised in many places with either a closed or open range:<br>&gt;&gt; <br>&gt;&gt; struct Day { … }<br>&gt;&gt; struct Day : Comparable { … }<br>&gt;&gt; struct Day : Strippable { … }<br>&gt;&gt; <br>&gt;&gt; struct Info {<br>&gt;&gt;     let name: String<br>&gt;&gt;     let range: Range&lt;Day&gt;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Info(name: &quot;Christmas Vacation&quot;, range: twentyfith...thirtyfirst)<br>&gt;&gt; Info(name: &quot;Summer Vacation&quot;, range: someday..&lt;otherday)<br>&gt;&gt; <br>&gt;&gt; Now, in Swift 3, it seems like we’ve lost a type to represent any range to allow an API client the flexibility to specify it as he wishes. Is there a solution to this problem through a protocol which both ranges conform to, or are we stuck with this because of the new API?<br>&gt;&gt; <br>&gt;&gt; protocol RangeType {<br>&gt;&gt;     associatedtype Bounds<br>&gt;&gt;     let lowerBound: Bound { get }<br>&gt;&gt;     let upperBound: Bound { get }<br>&gt;&gt;     // what else? not even sure if it is possible to define such a protocol<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; David.<br></p><p>The problem was that to implement both generically, a closed range was just an open range with the upper bound increment by one step, but as you say this wasn&#39;t safe as Int.max etc. could not be used.<br></p><p>I think if you wanted to solve this you&#39;d need to reintroduce the concept of incrementing by a minimum step, which was moved away from index types during the changes to the new indexing model for collections. You could do this something like so:<br></p><p>// Reintroduce these methods that were lost in the new indexing API<br>protocol ForwardStep { func successor()? -&gt; Self }<br>protocol BackwardStep : ForwardStep { func predecessor()? -&gt; Self }<br></p><p>// Enable conversion of ranges<br>extend ClosedRange where Self.Bound : ForwardStep {<br>	func toOpenRange() -&gt; Range&lt;Self.Bound&gt;? {<br>		guard let upperBound = self.upperBound.successor() else { return nil }<br>		return self.lowerBound ..&lt; upperBound<br>	}<br>}<br>extend Range where Self.Bound : BackwardStep {<br>	func toClosedRange() -&gt; ClosedRange&lt;Self.Bound&gt;? {<br>		guard let upperBound = self.upperBound.predecessor() else { return nil }<br>		return self.lowerBound ... upperBound<br>	}<br>}<br>extend ClosedRange where Self.Bound : BackwardStep {<br>	init(_ openRange:Range&lt;Self.Bound&gt;)? {<br>		guard let closedRange = openRange.toClosedRange() else { return nil }<br>		self = closedRange<br>	}<br>}<br>extend Range where Self.Bound : ForwardStep {<br>	init(_ closedRange:Range&lt;Self.Bound&gt;)? {<br>		guard let openRange = closedRange.toClosedRange() else { return nil }<br>		self = openRange<br>	}<br>}<br></p><p>I&#39;ve rushed this a bit so forgive any glaring errors, but this is essentially how I&#39;d bolt this on right now myself. Basically it reintroduces some of the flexibility, but with the safety of optionals to avoid the previous problem of incrementing a maximum value, this shouldn&#39;t be a problem for performance since it&#39;s just being used for conversion.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/4bb37b71/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
