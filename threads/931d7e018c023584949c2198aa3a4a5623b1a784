<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 12, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160212/931da784/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February 12, 2016 at 09:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>+1. I&#39;m always up for removing duplicated code.<br></p><p>• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. It pairs well with the other operator/assignment operators (e.g. *=, +=, etc...).<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Seems fairly identical to other languages that allow this.<br></p><p>• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the review and a few of the replies in conversation thread. <br></p><p>-David<br></p><p><br>&gt; On Feb 12, 2016, at 9:15 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/df4f5a73/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February 12, 2016 at 10:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>+1 this is seems like a natural addition similar to += or other operators which assign and perform an action.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Not found in other languages. <br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read proposal and thread.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/f8e894e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>+1 for the same reason (consistent with +=)<br></p><p>On Sat, Feb 13, 2016 at 1:29 AM Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What is your evaluation of the proposal?<br>&gt; +1 this is seems like a natural addition similar to += or other operators<br>&gt; which assign and perform an action.<br>&gt;<br>&gt; Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; Yes.<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes.<br>&gt;<br>&gt; If you have used other languages or libraries with a similar feature, how<br>&gt; do you feel that this proposal compares to those?<br>&gt; Not found in other languages.<br>&gt;<br>&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt; Read proposal and thread.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/ede50c37/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 13, 2016 at 07:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>+1 for the simple reason that there is no real downside and it is consistent with existing operators.<br>If consistency is not a goal of swift then 0.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>No, Problem indicates that without it that you would have a problem accomplishing something or it would be much less efficient.<br>None of the shorthand operators “solve a problem” they are just shorthand.<br>Using &quot;a = a ?? b&quot; instead of “a ??= b” is not much of a saver, but there are many programmers that work/think in that shorthand.<br>I generally never use any of the shorthand operators mostly because I generally avoid mutable — but even when using mutable state<br>I don’t generally type/think in shorthand when it comes to existing types of the same ilk.<br>It would actually cost me time to use them since I would have to think then type the shorthand (and I type fairly quickly) vs automatic.  <br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Yes<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I have not used other languages with a similar feature for optionals.<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read the proposal, played around in playground comparing it to similar operators that exist and compared <br></p><p><br>&gt; On 2016-02-13, at 18:32:28, Ilya Belenkiy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for the same reason (consistent with +=)<br>&gt; <br>&gt; On Sat, Feb 13, 2016 at 1:29 AM Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; What is your evaluation of the proposal?<br>&gt; +1 this is seems like a natural addition similar to += or other operators which assign and perform an action.<br>&gt; <br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Yes.<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes.<br>&gt; <br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; Not found in other languages. <br>&gt; <br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; Read proposal and thread.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/76b4d211/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 13 Feb 2016, at 05:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>I’m in favour of it, for some reason I encounter cases like these a lot, so a simplified operator would be great.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>It’s not exactly a major problem, but clean code is always good and it should be a fairly simple feature.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Quick reading, but the proposal is self-explanatory.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/4464b225/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 13, 2016 at 08:00:00pm</p></header><div class="content"><p>Nuetral on this. Not a major problem but then again it is just a library<br>addition.<br></p><p>On Saturday, 13 February 2016, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 13 Feb 2016, at 05:15, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; I’m in favour of it, for some reason I encounter cases like these a lot,<br>&gt; so a simplified operator would be great.<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; It’s not exactly a major problem, but clean code is always good and it<br>&gt; should be a fairly simple feature.<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; Quick reading, but the proposal is self-explanatory.<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/cd66a283/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>February 13, 2016 at 09:00:00am</p></header><div class="content"><p>-0.2<br>&gt; What is your evaluation of the proposal?<br>There is nothing particularly wrong with this proposal but I think we should have a reasonably high bar on adding operators. Each one is nice and reasonable but if you add them all you get a large language and there is more for a beginner to learn and for all of us to remember when reading code. <br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>No. I don&#39;t think it is. I believe (though I haven&#39;t tried it) that it is implementable as a user defined operator for those that really wanted it. There have only been a few occasions where I have had the situation to use this operator (not none but not enough). <br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Syntactically it is fine but I do think it encourages use of optionals where they may not be necessary. It also adds to the language/standard library surface area without sufficient benefit. <br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Yes but Ruby has less support for constants and all variables are nilable and I found I used it a lot there where in Swift I would be setting a constant non-optional by using nil coalescing originally rather than making a sequence of attempts to set the value. I don&#39;t miss it in Swift. <br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Quick read of proposal. <br></p><p>Joseph<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/ce82478d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>+0.5<br></p><p>I am generally for this proposal, because I don’t see why not — there are cases where this is useful, and it’s symmetric with other X/X= operator pairs, so it’s not like it’s a completely new thing.<br></p><p>However, I don’t think the operator is _as_ useful in Swift as it is in other languages.<br></p><p>In Ruby, for example, it’s extremely common to use `||=` (an equivalent of ??=, more or less) to modify function arguments, e.g. assign default values if nil was passed. But you can’t do that in Swift since SE-0003 removed the ability to mark a parameter as `var`.<br></p><p>So you can’t do that<br></p><p>	arg ??= default<br></p><p>and you have to do<br></p><p>	let arg = arg ?? default<br></p><p>Except you wouldn’t want the earlier version anyway, because `arg` would continue to be an optional. A notion not relevant in a dynamically typed language, but in Swift, it matters.<br></p><p>And I see other cases like this. A proposal to add `??=` to Swift was one of the first Swift radars I filed, because it was just something I was really used to. But with time I realized there are actually relatively few cases where this is useful. And that’s all because of Swift’s characteristics: it’s statically typed, it pushes you to use constants and not variables where possible, optionality is explicit, and avoided when not necessary.<br></p><p>Still, I searched through my code and found _a few_ instances of `??=` (my own implementation), almost all used for dealing with dictionaries (and a dictionary-like structure in a library called SwiftyUserDefaults) — and having this operator definitely improved the clarity of those places.<br></p><p>&gt; What is your evaluation of the proposal?<br></p><p>All in all, I’m for.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I’d say yes, because it’s simple to implement, and carries little risk AFAICT. Still, it’s not as significant an improvement as many of the other proposals.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Again, ??= is only useful in _some_ cases, and in many other cases you want to avoid optionality and mutability. So it’s not necessarily something we want to encourage a lot, but I don’t see real risk in people trying to damage their Swift code just so they can use ??=. And OTOH having nice tools for dealing with optionality when it’s necessary is a very Swifty thing to do, so overall, yes.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Mostly dynamically typed languages with ||=, Ruby in particular. Also my own implementation of ??= in my projects and https://github.com/radex/swiftyuserdefaults &lt;https://github.com/radex/swiftyuserdefaults&gt;<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick reading of the proposal.<br></p><p>Best,<br>— Radek<br></p><p>&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/8d87dc3f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>I think the proposal should include some discussion on the common cases where this operator would be useful. As such, I don’t see much hard of including this, except that I am not sure that the problem is significant enough to warrant a reaction. <br></p><p>— T<br></p><p><br>&gt; On 13 Feb 2016, at 11:11, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +0.5<br>&gt; <br>&gt; I am generally for this proposal, because I don’t see why not — there are cases where this is useful, and it’s symmetric with other X/X= operator pairs, so it’s not like it’s a completely new thing.<br>&gt; <br>&gt; However, I don’t think the operator is _as_ useful in Swift as it is in other languages.<br>&gt; <br>&gt; In Ruby, for example, it’s extremely common to use `||=` (an equivalent of ??=, more or less) to modify function arguments, e.g. assign default values if nil was passed. But you can’t do that in Swift since SE-0003 removed the ability to mark a parameter as `var`.<br>&gt; <br>&gt; So you can’t do that<br>&gt; <br>&gt; 	arg ??= default<br>&gt; <br>&gt; and you have to do<br>&gt; <br>&gt; 	let arg = arg ?? default<br>&gt; <br>&gt; Except you wouldn’t want the earlier version anyway, because `arg` would continue to be an optional. A notion not relevant in a dynamically typed language, but in Swift, it matters.<br>&gt; <br>&gt; And I see other cases like this. A proposal to add `??=` to Swift was one of the first Swift radars I filed, because it was just something I was really used to. But with time I realized there are actually relatively few cases where this is useful. And that’s all because of Swift’s characteristics: it’s statically typed, it pushes you to use constants and not variables where possible, optionality is explicit, and avoided when not necessary.<br>&gt; <br>&gt; Still, I searched through my code and found _a few_ instances of `??=` (my own implementation), almost all used for dealing with dictionaries (and a dictionary-like structure in a library called SwiftyUserDefaults) — and having this operator definitely improved the clarity of those places.<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; All in all, I’m for.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; I’d say yes, because it’s simple to implement, and carries little risk AFAICT. Still, it’s not as significant an improvement as many of the other proposals.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Again, ??= is only useful in _some_ cases, and in many other cases you want to avoid optionality and mutability. So it’s not necessarily something we want to encourage a lot, but I don’t see real risk in people trying to damage their Swift code just so they can use ??=. And OTOH having nice tools for dealing with optionality when it’s necessary is a very Swifty thing to do, so overall, yes.<br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; Mostly dynamically typed languages with ||=, Ruby in particular. Also my own implementation of ??= in my projects and https://github.com/radex/swiftyuserdefaults &lt;https://github.com/radex/swiftyuserdefaults&gt;<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; A quick reading of the proposal.<br>&gt; <br>&gt; Best,<br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/d4a9b0de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>One common case could be for a error catching, consider this:<br></p><p>let object = try? UnsupportedMessage(text: &quot;James&quot;, type:.Text,<br>date:NSDate()) ?? FailedObject()<br></p><p>vs<br></p><p>var object = try? Message(text: &quot;James&quot;, type:.Text, date:NSDate())<br>object ??= UnsupportedMessage()<br></p><p>Why would we need this? I have a chat application where if it gets a<br>message it doesn&#39;t understand it will throw an error. In the past I would<br>handle this errors by returning nil like so. However we want to communicate<br>to the user that they missing content by vending a UnsupportedMessage<br>object which shows the UI to prompt them to upgrade.<br></p><p>If the object being constructed has a lot of variables then it could be<br>lost off the side of the screen. I feel ??= is more concise in this case.<br></p><p>This could also be great for the null object pattern where you may not want<br>a variable to be nil, you may want some sort of null object that is vended<br>in cases of failure that could log this error.<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Awesome*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Sat, Feb 13, 2016 at 11:20 AM, Taras Zakharko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think the proposal should include some discussion on the common cases<br>&gt; where this operator would be useful. As such, I don’t see much hard of<br>&gt; including this, except that I am not sure that the problem is significant<br>&gt; enough to warrant a reaction.<br>&gt;<br>&gt; — T<br>&gt;<br>&gt;<br>&gt; On 13 Feb 2016, at 11:11, Radosław Pietruszewski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +0.5<br>&gt;<br>&gt; I am generally for this proposal, because I don’t see why not — there are<br>&gt; cases where this is useful, and it’s symmetric with other X/X= operator<br>&gt; pairs, so it’s not like it’s a completely new thing.<br>&gt;<br>&gt; However, I don’t think the operator is _as_ useful in Swift as it is in<br>&gt; other languages.<br>&gt;<br>&gt; In Ruby, for example, it’s extremely common to use `||=` (an equivalent of<br>&gt; ??=, more or less) to modify function arguments, e.g. assign default values<br>&gt; if nil was passed. But you can’t do that in Swift since SE-0003 removed the<br>&gt; ability to mark a parameter as `var`.<br>&gt;<br>&gt; So you can’t do that<br>&gt;<br>&gt; arg ??= default<br>&gt;<br>&gt; and you have to do<br>&gt;<br>&gt; let arg = arg ?? default<br>&gt;<br>&gt; Except you wouldn’t want the earlier version anyway, because `arg` would<br>&gt; continue to be an optional. A notion not relevant in a dynamically typed<br>&gt; language, but in Swift, it matters.<br>&gt;<br>&gt; And I see other cases like this. A proposal to add `??=` to Swift was one<br>&gt; of the first Swift radars I filed, because it was just something I was<br>&gt; really used to. But with time I realized there are actually relatively few<br>&gt; cases where this is useful. And that’s all because of Swift’s<br>&gt; characteristics: it’s statically typed, it pushes you to use constants and<br>&gt; not variables where possible, optionality is explicit, and avoided when not<br>&gt; necessary.<br>&gt;<br>&gt; Still, I searched through my code and found _a few_ instances of `??=` (my<br>&gt; own implementation), almost all used for dealing with dictionaries (and a<br>&gt; dictionary-like structure in a library called SwiftyUserDefaults) — and<br>&gt; having this operator definitely improved the clarity of those places.<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; All in all, I’m for.<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; I’d say yes, because it’s simple to implement, and carries little risk<br>&gt; AFAICT. Still, it’s not as significant an improvement as many of the other<br>&gt; proposals.<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Again, ??= is only useful in _some_ cases, and in many other cases you<br>&gt; want to avoid optionality and mutability. So it’s not necessarily something<br>&gt; we want to encourage a lot, but I don’t see real risk in people trying to<br>&gt; damage their Swift code just so they can use ??=. And OTOH having nice<br>&gt; tools for dealing with optionality when it’s necessary is a very Swifty<br>&gt; thing to do, so overall, yes.<br>&gt;<br>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Mostly dynamically typed languages with ||=, Ruby in particular. Also my<br>&gt; own implementation of ??= in my projects and<br>&gt; https://github.com/radex/swiftyuserdefaults<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; A quick reading of the proposal.<br>&gt;<br>&gt; Best,<br>&gt; — Radek<br>&gt;<br>&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt; through February 18, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/609b5614/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 03:00:00pm</p></header><div class="content"><p>I disagree. I think those are exactly the wrong use cases for ??= and, in fact, could be used as an argument against this proposal (??= encouraging unidiomatic behavior).<br></p><p>&gt; let object = try? UnsupportedMessage(text: &quot;James&quot;, type:.Text, date:NSDate()) ?? FailedObject()<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; var object = try? Message(text: &quot;James&quot;, type:.Text, date:NSDate())<br>&gt; object ??= UnsupportedMessage()<br></p><p>The first example — though an admittedly long line — is clearly better to my eyes.<br></p><p>The second one does *two* things considered undesirable in Swift:<br></p><p>- it creates a mutable variable even though it’s not necessary<br>- it leaves `object` as an Optional, even though we don’t mean it to actually ever be nil.<br></p><p>&gt; This could also be great for the null object pattern where you may not want a variable to be nil, you may want some sort of null object that is vended in cases of failure that could log this error.<br></p><p>I agree with the premise — a null object or value is often much better than a nil (e.g. [] vs nil when there isn’t a semantic diff between the two). But when you use ??=, the variable you’re mutating is still an Optional and could be nil!<br></p><p>* * *<br></p><p>I see two reasons to use ??=:<br></p><p>- when applying a default value to a dictionary (or a dictionary-like structure), since subscripting it will produce Optionals *either way*<br>- when mutating a property (not a local variable!), that is (has to be) optional and mutable *either way*<br></p><p>It’s a useful shortcut in those two circumstances. But it is not desirable to damage our Swift code with needless optionals or mutability so we can use ??=.<br></p><p>best,<br>— Radek<br></p><p>&gt; On 13 Feb 2016, at 13:10, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; One common case could be for a error catching, consider this:<br>&gt; <br>&gt; let object = try? UnsupportedMessage(text: &quot;James&quot;, type:.Text, date:NSDate()) ?? FailedObject()<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; var object = try? Message(text: &quot;James&quot;, type:.Text, date:NSDate())<br>&gt; object ??= UnsupportedMessage()<br>&gt; <br>&gt; Why would we need this? I have a chat application where if it gets a message it doesn&#39;t understand it will throw an error. In the past I would handle this errors by returning nil like so. However we want to communicate to the user that they missing content by vending a UnsupportedMessage object which shows the UI to prompt them to upgrade.<br>&gt; <br>&gt; If the object being constructed has a lot of variables then it could be lost off the side of the screen. I feel ??= is more concise in this case.<br>&gt; <br>&gt; This could also be great for the null object pattern where you may not want a variable to be nil, you may want some sort of null object that is vended in cases of failure that could log this error.<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Awesome<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On Sat, Feb 13, 2016 at 11:20 AM, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think the proposal should include some discussion on the common cases where this operator would be useful. As such, I don’t see much hard of including this, except that I am not sure that the problem is significant enough to warrant a reaction. <br>&gt; <br>&gt; — T<br>&gt; <br>&gt; <br>&gt;&gt; On 13 Feb 2016, at 11:11, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +0.5<br>&gt;&gt; <br>&gt;&gt; I am generally for this proposal, because I don’t see why not — there are cases where this is useful, and it’s symmetric with other X/X= operator pairs, so it’s not like it’s a completely new thing.<br>&gt;&gt; <br>&gt;&gt; However, I don’t think the operator is _as_ useful in Swift as it is in other languages.<br>&gt;&gt; <br>&gt;&gt; In Ruby, for example, it’s extremely common to use `||=` (an equivalent of ??=, more or less) to modify function arguments, e.g. assign default values if nil was passed. But you can’t do that in Swift since SE-0003 removed the ability to mark a parameter as `var`.<br>&gt;&gt; <br>&gt;&gt; So you can’t do that<br>&gt;&gt; <br>&gt;&gt; 	arg ??= default<br>&gt;&gt; <br>&gt;&gt; and you have to do<br>&gt;&gt; <br>&gt;&gt; 	let arg = arg ?? default<br>&gt;&gt; <br>&gt;&gt; Except you wouldn’t want the earlier version anyway, because `arg` would continue to be an optional. A notion not relevant in a dynamically typed language, but in Swift, it matters.<br>&gt;&gt; <br>&gt;&gt; And I see other cases like this. A proposal to add `??=` to Swift was one of the first Swift radars I filed, because it was just something I was really used to. But with time I realized there are actually relatively few cases where this is useful. And that’s all because of Swift’s characteristics: it’s statically typed, it pushes you to use constants and not variables where possible, optionality is explicit, and avoided when not necessary.<br>&gt;&gt; <br>&gt;&gt; Still, I searched through my code and found _a few_ instances of `??=` (my own implementation), almost all used for dealing with dictionaries (and a dictionary-like structure in a library called SwiftyUserDefaults) — and having this operator definitely improved the clarity of those places.<br>&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; All in all, I’m for.<br>&gt;&gt; <br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; I’d say yes, because it’s simple to implement, and carries little risk AFAICT. Still, it’s not as significant an improvement as many of the other proposals.<br>&gt;&gt; <br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Again, ??= is only useful in _some_ cases, and in many other cases you want to avoid optionality and mutability. So it’s not necessarily something we want to encourage a lot, but I don’t see real risk in people trying to damage their Swift code just so they can use ??=. And OTOH having nice tools for dealing with optionality when it’s necessary is a very Swifty thing to do, so overall, yes.<br>&gt;&gt; <br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; Mostly dynamically typed languages with ||=, Ruby in particular. Also my own implementation of ??= in my projects and https://github.com/radex/swiftyuserdefaults &lt;https://github.com/radex/swiftyuserdefaults&gt;<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; A quick reading of the proposal.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/02b39c2b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 7:10 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; One common case could be for a error catching, consider this:<br>&gt; <br>&gt; let object = try? UnsupportedMessage(text: &quot;James&quot;, type:.Text, date:NSDate()) ?? FailedObject()<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; var object = try? Message(text: &quot;James&quot;, type:.Text, date:NSDate())<br>&gt; object ??= UnsupportedMessage()<br>&gt; <br>&gt; Why would we need this? I have a chat application where if it gets a message it doesn&#39;t understand it will throw an error. In the past I would handle this errors by returning nil like so. However we want to communicate to the user that they missing content by vending a UnsupportedMessage object which shows the UI to prompt them to upgrade.<br>&gt; <br>&gt; If the object being constructed has a lot of variables then it could be lost off the side of the screen. I feel ??= is more concise in this case.<br></p><p>If conciseness is your goal, isn&#39;t &quot;??&quot; more concise here? (It&#39;s a single line—rather than two—and fewer characters.)<br></p><p>If you&#39;re worried about line length and/or readability, have you considered using a newline to break the logic up?<br></p><p>    let object = try? UnsupportedMessage(text: &quot;James&quot;, type:.Text, date:NSDate())<br>        ?? FailedObject()<br></p><p>This way<br></p><p>- the result isn&#39;t mutable and<br>- the result isn&#39;t optional<br></p><p>Stephen<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>A soft +1.<br></p><p>I am worried about the attractive nuisance quality of this proposal; users may be tempted to leave variables optional and mutable even though they could be non-optional constants. But there are good, solid use cases for it, like working with properties or subscripts that are always optional, and I think this will be genuinely useful there.<br></p><p>A warning with a fix-it *might* be warranted when this operator is used with a local variable that is not mutated again later in the function, but that could be overkill.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It&#39;s a minor problem. If the proposed solution did some sort of serious violence to the language, I might say it&#39;s not significant. But this is a purely additive change that has no impact on the rest of the language, so I would say the problem is significant enough to warrant such a low-impact solution.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. It flows naturally from other patterns in our operators.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I implemented the Perl 5 version of this operator, `//=`. Perl&#39;s looser typing (any value can be `undef`) made it more useful there, but that doesn&#39;t mean it won&#39;t be useful in Swift too.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal and the rest of this thread, and of course as previously mentioned I have some experience in these matters.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 13, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 12:15 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>I like this proposal, as it eliminate redundant code.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>I think any code redundancy represents a problems that needs to be addressed, and hence the answer to the question is &quot;yes&quot;.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Ruby has a similar operator, which I have always found extremely handy, especially when initializing from configuration files.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I read the proposal thoroughly. It didn&#39;t need in-depth study, given my familiarity with Ruby.<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/96e18bb4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 14, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>-1, on the basis of use being a potential anti-pattern, and the spec focusing on the benefit of a terser syntax over possible uses.<br></p><p>If there are additional uses outside the proposal, this evaluation may change.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Not as described. <br></p><p>“??” is described as the nil coalescing operator.  It is defined as the following function:<br></p><p>public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T) rethrows -&gt; T<br>The purpose of the nil coalescing operator is defined as follows by the Swift Programming Language book<br></p><p>“The nil coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil. The expression a is always of an optional type. The expression b must match the type that is stored inside a.”<br></p><p>This operator has thus two core properties:<br>1. it allows another mechanism to deal with nil values, by specifying an alternate value to use in the nil case<br>2. as either the value or the alternate is non-nil, it casts off optionality<br></p><p>This operator does not do the second. It allows you to apply a value in the nil case, but the resulting value is still an optional. As such, I fear the usefulness of the “??=“ operator is greatly diminished.<br></p><p>Note also that unlike other operators with inout equivalents like addition, the type of the left-hand input and the output are not the same in “??” due to the missing safe casting off of optionality.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>The example given by the proposal is as follows:<br></p><p>really.long.lvalue[expression] = really.long.lvalue[expression] ?? &quot;&quot;<br></p><p>In this case, you are setting a default value of “” to an optional target within a long expression.<br></p><p>However, it is unclear why the original expression allowed nil, or why setting this value to “” is an improvement.<br></p><p>To counter, some existing usage:<br></p><p>let userDefaults = NSUserDefaults.standardUserDefaults()<br>let repeatCount = userDefaults.valueForKey(&quot;repeatCount&quot;) as? Int ?? 4<br>for attempt in 0..&lt;repeatCount {<br>    // ...<br>}<br></p><p>The for loop only works because repeatCount is non-optional. Assigning the value back into the expression would mutate the original value, but would still require one to cast off the optionality of the value.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>As mentioned, Ruby has a similar behavior. Other than the “false” and “nil” literal values, everything evaluates as true. The || and &amp;&amp; operators preserve the values of the lhs and rhs arguments.<br></p><p>1 &amp;&amp; 2 # is 2<br>1 || 2    # is 1<br>nil || 2  # is 2<br></p><p>As such, ||= can be used for such a default assignment system.<br></p><p>However, ruby does not have optionality. All libraries must take into account the possibility of sending nil in for a value. As such, it is not influenced by the limitations of this proposal.<br> <br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>In-between a reading and a study.<br></p><p>-DW<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/4f0d321b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>February 14, 2016 at 02:00:00am</p></header><div class="content"><p>I just want to throw this out in case it changes your opinion - while the book does say that, the Swift library defines both of these:<br></p><p>@warn_unused_result<br>public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T?) rethrows -&gt; T?<br>@warn_unused_result<br>public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T) rethrows -&gt; T<br></p><p>This has the side-effect that this is legal code already today:<br></p><p>var o: Int? = nil<br>o = o ?? nil<br></p><p>I agree ??= has a much smaller surface area of potential use cases though.<br></p><p>A lot of times I have a need for something like this is when I&#39;m parsing data into an unstructured type that will then later be realized into a strong type further in the pipeline. <br></p><p>-David<br></p><p>&gt; On Feb 13, 2016, at 11:52 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; -1, on the basis of use being a potential anti-pattern, and the spec focusing on the benefit of a terser syntax over possible uses.<br>&gt; <br>&gt; If there are additional uses outside the proposal, this evaluation may change.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Not as described. <br>&gt; <br>&gt; “??” is described as the nil coalescing operator.  It is defined as the following function:<br>&gt; <br>&gt; public func ??&lt;T&gt;(optional: T?, @autoclosure defaultValue: () throws -&gt; T) rethrows -&gt; T<br>&gt; The purpose of the nil coalescing operator is defined as follows by the Swift Programming Language book<br>&gt; <br>&gt; “The nil coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil. The expression a is always of an optional type. The expression b must match the type that is stored inside a.”<br>&gt; <br>&gt; This operator has thus two core properties:<br>&gt; 1. it allows another mechanism to deal with nil values, by specifying an alternate value to use in the nil case<br>&gt; 2. as either the value or the alternate is non-nil, it casts off optionality<br>&gt; <br>&gt; This operator does not do the second. It allows you to apply a value in the nil case, but the resulting value is still an optional. As such, I fear the usefulness of the “??=“ operator is greatly diminished.<br>&gt; <br>&gt; Note also that unlike other operators with inout equivalents like addition, the type of the left-hand input and the output are not the same in “??” due to the missing safe casting off of optionality.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; The example given by the proposal is as follows:<br>&gt; <br>&gt; really.long.lvalue[expression] = really.long.lvalue[expression] ?? &quot;&quot;<br>&gt; <br>&gt; In this case, you are setting a default value of “” to an optional target within a long expression.<br>&gt; <br>&gt; However, it is unclear why the original expression allowed nil, or why setting this value to “” is an improvement.<br>&gt; <br>&gt; To counter, some existing usage:<br>&gt; <br>&gt; let userDefaults = NSUserDefaults.standardUserDefaults()<br>&gt; let repeatCount = userDefaults.valueForKey(&quot;repeatCount&quot;) as? Int ?? 4<br>&gt; for attempt in 0..&lt;repeatCount {<br>&gt;     // ...<br>&gt; }<br>&gt; <br>&gt; The for loop only works because repeatCount is non-optional. Assigning the value back into the expression would mutate the original value, but would still require one to cast off the optionality of the value.<br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; As mentioned, Ruby has a similar behavior. Other than the “false” and “nil” literal values, everything evaluates as true. The || and &amp;&amp; operators preserve the values of the lhs and rhs arguments.<br>&gt; <br>&gt; 1 &amp;&amp; 2 # is 2<br>&gt; 1 || 2    # is 1<br>&gt; nil || 2  # is 2<br>&gt; <br>&gt; As such, ||= can be used for such a default assignment system.<br>&gt; <br>&gt; However, ruby does not have optionality. All libraries must take into account the possibility of sending nil in for a value. As such, it is not influenced by the limitations of this proposal.<br>&gt;  <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; In-between a reading and a study.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/9fa16078/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>February 14, 2016 at 12:00:00pm</p></header><div class="content"><p>-1<br></p><p>For me, the meaning of the operator isn&#39;t intuitive (it isn&#39;t hard to explain or understand, though).<br>So far, I did not miss &quot;??=&quot;, and I think there are already some features marked for removal which are more valuable.<br></p><p>On the other hand, adding a new operator doesn&#39;t destroy anything, and it&#39;s only a tiny change, so the only real argument is keeping language and stdlib small.<br>Imho it would be a good idea to ask some developers that haven&#39;t read the proposal about their interpretation of &quot;??=&quot; to check how confusing it is.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>February 16, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>I&#39;m -1 on this.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>In my opinion it&#39;s not and I even consider it an anti-pattern, like the previous debaters noticed.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I used a ||= operator in Ruby and I think in the Ruby&#39;s world of brevity it fits there well.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I thought it over many times.<br></p><p>Regards,<br>Adrian Kashivskyy<br>Senior iOS Developer at Netguru<br></p><p>&gt; Wiadomość napisana przez Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 13.02.2016, o godz. 06:15:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/be17afab/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February 16, 2016 at 07:00:00am</p></header><div class="content"><p>-1, because in my mind, &quot;x ??= y&quot; kinda looks like &quot;y is assigned to x iff y isn&#39;t nil&quot;, or, if you associate the ?? part with the lhs, &quot;y is assigned to x if x is nil&quot;, neither of which is what the proposed operator means. In fact, the 2nd case is the *opposite* of what ??= means in this proposal.<br></p><p>To be clear, it&#39;s the syntax that I&#39;m opposed to, not the concept.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Feb 12, 2016, at 23:15, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/d954c7f2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February 16, 2016 at 02:00:00pm</p></header><div class="content"><p>&quot;y is assigned to x if x is nil&quot; *is* exactly what &quot;x ??= y&quot; means. If x is<br>nil, x is assigned the value of y; if x is not nil, it doesn&#39;t matter what<br>y is.<br></p><p>This is exactly consistent with the boolean operator ||= ; &quot;x ||= y&quot; means<br>&quot;y is assigned to x if x is false&quot; - if x is false, x is assigned the value<br>of y; if x is true, it doesn&#39;t matter what y is.)<br></p><p>Why do you think it means the opposite?<br></p><p>On Tue, Feb 16, 2016 at 1:24 PM, David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1, because in my mind, &quot;x ??= y&quot; kinda looks like &quot;y is assigned to x iff<br>&gt; y isn&#39;t nil&quot;, or, if you associate the ?? part with the lhs, &quot;y is assigned<br>&gt; to x if x is nil&quot;, neither of which is what the proposed operator means. In<br>&gt; fact, the 2nd case is the *opposite* of what ??= means in this proposal.<br>&gt;<br>&gt; To be clear, it&#39;s the syntax that I&#39;m opposed to, not the concept.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Feb 12, 2016, at 23:15, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt; through February 18, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/35f6d001/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February 16, 2016 at 02:00:00pm</p></header><div class="content"><p>Granted it may be confusing since other languages use the Or operator which reads better.<br>X ||= y<br>However I would argue that this operator has no choice but to use ??= Since it is a mirror for the ?? Operation.<br>Perhaps it would be better for the language if ?? Was actually || but this would be a small but big change and would belong in another proposal.<br>Sent from Supmenow.com<br></p><p><br></p><p><br>On Tue, Feb 16, 2016 at 6:14 AM -0800, &quot;Ross O&#39;Brien via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>&quot;y is assigned to x if x is nil&quot; is exactly what &quot;x ??= y&quot; means. If x is nil, x is assigned the value of y; if x is not nil, it doesn&#39;t matter what y is.<br>This is exactly consistent with the boolean operator ||= ; &quot;x ||= y&quot; means &quot;y is assigned to x if x is false&quot; - if x is false, x is assigned the value of y; if x is true, it doesn&#39;t matter what y is.)<br>Why do you think it means the opposite?<br></p><p>On Tue, Feb 16, 2016 at 1:24 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>-1, because in my mind, &quot;x ??= y&quot; kinda looks like &quot;y is assigned to x iff y isn&#39;t nil&quot;, or, if you associate the ?? part with the lhs, &quot;y is assigned to x if x is nil&quot;, neither of which is what the proposed operator means. In fact, the 2nd case is the *opposite* of what ??= means in this proposal.<br>To be clear, it&#39;s the syntax that I&#39;m opposed to, not the concept.<br>- Dave Sweeris<br>On Feb 12, 2016, at 23:15, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p><br></p><p>Hello Swift community,<br></p><p>The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list athttps://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br></p><p>Reply textOther repliesWhat goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:What is your evaluation of the proposal?Is the problem being addressed significant enough to warrant a change to Swift?Does this proposal fit well with the feel and direction of Swift?If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available athttps://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager_______________________________________________<br>swift-evolution-announce mailing list<br>swift-evolution-announce at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>_______________________________________________<br></p><p>swift-evolution mailing list<br></p><p>swift-evolution at swift.org<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/5e4599a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 16, 2016 at 05:00:00pm</p></header><div class="content"><p>This is very much on purpose. In more weakly typed languages, nil is treated as a “falsy” value, and so you can use || to deal with it. Swift is very strongly typed and only booleans can be used in boolean expressions, not boolean-like values. (Remember how you used to be able to do `if someOptional`, but it was changed so that you have to say `if someOptional != nil`). When we talk about optionals, we use ? symbol to convey that something is optional-related. And so there’s ??.<br></p><p>— Radek<br></p><p>&gt; On 16 Feb 2016, at 15:18, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Granted it may be confusing since other languages use the Or operator which reads better.<br>&gt; <br>&gt; X ||= y<br>&gt; <br>&gt; However I would argue that this operator has no choice but to use ??= Since it is a mirror for the ?? Operation.<br>&gt; <br>&gt; Perhaps it would be better for the language if ?? Was actually || but this would be a small but big change and would belong in another proposal.<br>&gt; <br>&gt; Sent from Supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Feb 16, 2016 at 6:14 AM -0800, &quot;Ross O&#39;Brien via swift-evolution&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &quot;y is assigned to x if x is nil&quot; is exactly what &quot;x ??= y&quot; means. If x is nil, x is assigned the value of y; if x is not nil, it doesn&#39;t matter what y is.<br>&gt; <br>&gt; This is exactly consistent with the boolean operator ||= ; &quot;x ||= y&quot; means &quot;y is assigned to x if x is false&quot; - if x is false, x is assigned the value of y; if x is true, it doesn&#39;t matter what y is.)<br>&gt; <br>&gt; Why do you think it means the opposite?<br>&gt; <br>&gt; On Tue, Feb 16, 2016 at 1:24 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1, because in my mind, &quot;x ??= y&quot; kinda looks like &quot;y is assigned to x iff y isn&#39;t nil&quot;, or, if you associate the ?? part with the lhs, &quot;y is assigned to x if x is nil&quot;, neither of which is what the proposed operator means. In fact, the 2nd case is the *opposite* of what ??= means in this proposal.<br>&gt; <br>&gt; To be clear, it&#39;s the syntax that I&#39;m opposed to, not the concept.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; On Feb 12, 2016, at 23:15, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/8ed53f53/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February 16, 2016 at 06:00:00pm</p></header><div class="content"><p>Much better explanation for it :)<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Awesome*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Tue, Feb 16, 2016 at 4:52 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>wrote:<br></p><p>&gt; This is very much on purpose. In more weakly typed languages, nil is<br>&gt; treated as a “falsy” value, and so you can use || to deal with it. Swift is<br>&gt; very strongly typed and only booleans can be used in boolean expressions,<br>&gt; not boolean-like values. (Remember how you used to be able to do `if<br>&gt; someOptional`, but it was changed so that you have to say `if someOptional<br>&gt; != nil`). When we talk about optionals, we use ? symbol to convey that<br>&gt; something is optional-related. And so there’s ??.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 16 Feb 2016, at 15:18, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Granted it may be confusing since other languages use the Or operator<br>&gt; which reads better.<br>&gt;<br>&gt; X ||= y<br>&gt;<br>&gt; However I would argue that this operator has no choice but to use ??=<br>&gt; Since it is a mirror for the ?? Operation.<br>&gt;<br>&gt; Perhaps it would be better for the language if ?? Was actually || but this<br>&gt; would be a small but big change and would belong in another proposal.<br>&gt;<br>&gt; Sent from Supmenow.com &lt;http://supmenow.com/&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Feb 16, 2016 at 6:14 AM -0800, &quot;Ross O&#39;Brien via swift-evolution&quot;<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &quot;y is assigned to x if x is nil&quot; *is* exactly what &quot;x ??= y&quot; means. If x<br>&gt;&gt; is nil, x is assigned the value of y; if x is not nil, it doesn&#39;t matter<br>&gt;&gt; what y is.<br>&gt;&gt;<br>&gt;&gt; This is exactly consistent with the boolean operator ||= ; &quot;x ||= y&quot;<br>&gt;&gt; means &quot;y is assigned to x if x is false&quot; - if x is false, x is assigned the<br>&gt;&gt; value of y; if x is true, it doesn&#39;t matter what y is.)<br>&gt;&gt;<br>&gt;&gt; Why do you think it means the opposite?<br>&gt;&gt;<br>&gt;&gt; On Tue, Feb 16, 2016 at 1:24 PM, David Sweeris via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; -1, because in my mind, &quot;x ??= y&quot; kinda looks like &quot;y is assigned to x<br>&gt;&gt;&gt; iff y isn&#39;t nil&quot;, or, if you associate the ?? part with the lhs, &quot;y is<br>&gt;&gt;&gt; assigned to x if x is nil&quot;, neither of which is what the proposed operator<br>&gt;&gt;&gt; means. In fact, the 2nd case is the *opposite* of what ??= means in this<br>&gt;&gt;&gt; proposal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To be clear, it&#39;s the syntax that I&#39;m opposed to, not the concept.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Dave Sweeris<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Feb 12, 2016, at 23:15, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt;&gt;&gt; through February 18, 2016. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt;&gt;&gt; top of the message:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - What is your evaluation of the proposal?<br>&gt;&gt;&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;&gt;&gt;    change to Swift?<br>&gt;&gt;&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;    - If you have used other languages or libraries with a similar<br>&gt;&gt;&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;    reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/883eb5c2/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February 16, 2016 at 01:00:00pm</p></header><div class="content"><p>Oops, I meant “if x is not nil”. Everywhere else, the ? or ?? &quot;goes through” when the value in question is not nil. In this case, something happens when the value *is* nil.<br></p><p>&gt; On Feb 16, 2016, at 8:13 AM, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; &quot;y is assigned to x if x is nil&quot; is exactly what &quot;x ??= y&quot; means. If x is nil, x is assigned the value of y; if x is not nil, it doesn&#39;t matter what y is.<br>&gt; <br>&gt; This is exactly consistent with the boolean operator ||= ; &quot;x ||= y&quot; means &quot;y is assigned to x if x is false&quot; - if x is false, x is assigned the value of y; if x is true, it doesn&#39;t matter what y is.)<br>&gt; <br>&gt; Why do you think it means the opposite?<br>&gt; <br>&gt; On Tue, Feb 16, 2016 at 1:24 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1, because in my mind, &quot;x ??= y&quot; kinda looks like &quot;y is assigned to x iff y isn&#39;t nil&quot;, or, if you associate the ?? part with the lhs, &quot;y is assigned to x if x is nil&quot;, neither of which is what the proposed operator means. In fact, the 2nd case is the *opposite* of what ??= means in this proposal.<br>&gt; <br>&gt; To be clear, it&#39;s the syntax that I&#39;m opposed to, not the concept.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; On Feb 12, 2016, at 23:15, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/d7b082a4/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>February 16, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt; through February 18, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; I like it.<br></p><p><br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt;<br>Yes. It&#39;s not a huge problem, but the solution is small.<br></p><p><br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes.<br></p><p><br>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Seems just right. I&#39;ve used ||= in perl and ${var:=value} in sh.<br></p><p><br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt;<br>I read the entire original discussion on the list, and I spent about two<br>minutes reading the proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/0f7f7744/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 16, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;m not sure this is the best design for Swift. In other languages where I&#39;ve used similar features, particularly Perl and Ruby, the &quot;set a dictionary key to a default value&quot; was by far the most common use. Particularly in Ruby, with its reference-semantics containers, it&#39;s useful to pass down &#39;foo[x] ||= []&#39; as an expression into a function or method that would then populate the array:<br></p><p>def populate(array)<br>  array &lt;&lt; [1,2,3]<br>end<br></p><p>hash = {}<br></p><p>populate(hash[&quot;foo&quot;] ||= [])<br></p><p>Though ugly, that&#39;s a handy bit of expressivity you don&#39;t get with the proposed &#39;??=&#39; design. Even if &#39;??=&#39; returned the result, it wouldn&#39;t be able to return it as an lvalue.<br></p><p>I think a more expressive alternative approach to this problem would be to extend Dictionary with a `subscript(_:orDefault:)` member:<br></p><p>extension Dictionary {<br>  subscript(key: Key, orDefault value: Value) -&gt; Value {<br>    get {<br>      return self[key] ?? value<br>    }<br>    set {<br>      self[key] = newValue<br>    }<br>  }<br>}<br></p><p>For the common use case of providing a default value for a dictionary key, this has several advantages. It can be used as an lvalue, as in `populate(&amp;hash[&quot;foo&quot;, orDefault: []])`. It also avoids storing to the dictionary if the defaulted value is only read. (I think in the fullness of time, the default value probably belongs as a type parameter, e.g. `DefaultDictionary&lt;Key: String, Value: [String], Default: []&gt;`, but we&#39;re a ways away from that today.) It&#39;s true that this feature is dictionary-centric, whereas `??=` applies generally to any optional, but as others have noted, I&#39;m not sure that generality is a *feature* we want to encourage.<br></p><p>-Joe<br></p><p>&gt; On Feb 12, 2016, at 9:15 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs through February 18, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/e5225429/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>February 16, 2016 at 09:00:00pm</p></header><div class="content"><p>Below is my -1 on the proposal. But before that:<br></p><p>&gt; On 16 Feb 2016, at 20:26, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think a more expressive alternative approach to this problem would be to extend Dictionary with a `subscript(_:orDefault:)` member:<br>&gt; <br>&gt; extension Dictionary {<br>&gt;   subscript(key: Key, orDefault value: Value) -&gt; Value { … }<br>&gt; }<br></p><p><br>I think it&#39;s really a shortcoming in Dictionary&#39;s interface, where the general use case of updating a key in place usually asks for a lot of boilerplate. Thinking outside the box somewhat, one way to make all kinds of updates—&quot;upserts&quot;, accumulating the value, but also removals—possible would be to extend Optional&#39;s interface with this simple addition:<br></p><p>extension Optional {<br>    public mutating func rewrap(@noescape transform: Wrapped? throws -&gt; Wrapped?) rethrows {<br>        self = try transform(self)<br>    }<br>}<br></p><p>Conditionally inserting a key would then be:<br></p><p>var dict = [2: &quot;two&quot;]<br>dict[1].rewrap {$0 ?? &quot;one&quot;}<br>dict[2].rewrap {$0 ?? &quot;deux&quot;} // no-op<br>// dict == [2: &quot;two&quot;, 1: &quot;one&quot;]<br></p><p>Maintaining a set of counters:<br></p><p>var counts = [String: Int]()<br>let increment: Int? -&gt; Int? = {($0 ?? 0) + 1}<br>let decrement: Int? -&gt; Int? = {<br>    let n = ($0 ?? 0) - 1<br>    return n == 0 ? nil : n<br>}<br>counts[&quot;Söze&quot;].rewrap(increment)<br>counts[&quot;Kujan&quot;].rewrap(increment)<br>counts[&quot;Kint&quot;].rewrap(increment)<br>counts[&quot;Söze&quot;].rewrap(decrement) // poof… he&#39;s gone<br>counts[&quot;Kint&quot;].rewrap(increment)<br>// counts == [&quot;Kujan&quot;: 1, &quot;Kint&quot;: 2]<br></p><p>Originally I thought calling it simply update, however rewrap has a closer correspondence to Optional&#39;s Wrapped, and might thus be less ambiguous.<br></p><p>— — —<br></p><p>What comes to the proposal then…<br></p><p>&gt; What is your evaluation of the proposal?<br></p><p>-1.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don&#39;t think this is the problem to be addressed. The issue here is that even after the update, the result is still an optional, so there&#39;s no promise that it&#39;ll have a non-nil value. I have a feeling guard could be used in most of these use cases for a better design. And lazy loading or set-once properties might help a bit too.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>It&#39;s true that we have the in-place mutating op= variant of many operators op which happen to return the same type as their first argument. However, I see ?? as two overloads ((T?, T) -&gt; T and (T?, T?) -&gt; T?), the one returning non-optional being the more official one which is somewhat against the current practice.<br></p><p>I also feel the use of this operator would leave too many T? hanging around where T would do.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Ruby comes in mind. Ruby is different in that it does nothing to prevent the Billion Dollar Mistake that they coincidentally call nil.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p><br>I&#39;ve followed the conversation for a couple of days and read through the proposal quickly. I&#39;ve thought about the problem domain a lot before though.<br></p><p>— Pyry Jahkola<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/3628014e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February 16, 2016 at 09:00:00pm</p></header><div class="content"><p>You could argue that rewrap is just flatMap<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Awesome*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Tue, Feb 16, 2016 at 7:44 PM, Pyry Jahkola via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Below is my -1 on the proposal. But before that:<br>&gt;<br>&gt; On 16 Feb 2016, at 20:26, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think a more expressive alternative approach to this problem would be to<br>&gt; extend Dictionary with a `subscript(_:orDefault:)` member:<br>&gt;<br>&gt; extension Dictionary {<br>&gt;   subscript(key: Key, orDefault value: Value) -&gt; Value { … }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I think it&#39;s really a shortcoming in Dictionary&#39;s interface, where the<br>&gt; general use case of updating a key in place usually asks for a lot of<br>&gt; boilerplate. Thinking outside the box somewhat, one way to make all kinds<br>&gt; of updates—&quot;upserts&quot;, accumulating the value, but also removals—possible<br>&gt; would be to extend Optional&#39;s interface with this simple addition:<br>&gt;<br>&gt; extension Optional {<br>&gt;     public mutating func rewrap(@noescape transform: Wrapped? throws -&gt;<br>&gt; Wrapped?) rethrows {<br>&gt;         self = try transform(self)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Conditionally inserting a key would then be:<br>&gt;<br>&gt; var dict = [2: &quot;two&quot;]<br>&gt; dict[1].rewrap {$0 ?? &quot;one&quot;}<br>&gt; dict[2].rewrap {$0 ?? &quot;deux&quot;} // no-op<br>&gt; // dict == [2: &quot;two&quot;, 1: &quot;one&quot;]<br>&gt;<br>&gt; Maintaining a set of counters:<br>&gt;<br>&gt; var counts = [String: Int]()<br>&gt; let increment: Int? -&gt; Int? = {($0 ?? 0) + 1}<br>&gt; let decrement: Int? -&gt; Int? = {<br>&gt;     let n = ($0 ?? 0) - 1<br>&gt;     return n == 0 ? nil : n<br>&gt; }<br>&gt; counts[&quot;Söze&quot;].rewrap(increment)<br>&gt; counts[&quot;Kujan&quot;].rewrap(increment)<br>&gt; counts[&quot;Kint&quot;].rewrap(increment)<br>&gt; counts[&quot;Söze&quot;].rewrap(decrement) // poof… he&#39;s gone<br>&gt; counts[&quot;Kint&quot;].rewrap(increment)<br>&gt; // counts == [&quot;Kujan&quot;: 1, &quot;Kint&quot;: 2]<br>&gt;<br>&gt; Originally I thought calling it simply update, however rewrap has a<br>&gt; closer correspondence to Optional&#39;s Wrapped, and might thus be less<br>&gt; ambiguous.<br>&gt;<br>&gt; — — —<br>&gt;<br>&gt; What comes to the proposal then…<br>&gt;<br>&gt; What is your evaluation of the proposal?<br>&gt;<br>&gt;<br>&gt; -1.<br>&gt;<br>&gt; Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt;<br>&gt; I don&#39;t think this is the problem to be addressed. The issue here is that<br>&gt; even after the update, the result is still an optional, so there&#39;s no<br>&gt; promise that it&#39;ll have a non-nil value. I have a feeling guard could be<br>&gt; used in most of these use cases for a better design. And lazy loading or<br>&gt; set-once properties might help a bit too.<br>&gt;<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; It&#39;s true that we have the in-place mutating op= variant of many<br>&gt; operators op which happen to return the same type as their first<br>&gt; argument. However, I see ?? as two overloads ((T?, T) -&gt; T and (T?, T?)<br>&gt; -&gt; T?), the one returning non-optional being the more official one which<br>&gt; is somewhat against the current practice.<br>&gt;<br>&gt; I also feel the use of this operator would leave too many T? hanging<br>&gt; around where T would do.<br>&gt;<br>&gt; If you have used other languages or libraries with a similar feature, how<br>&gt; do you feel that this proposal compares to those?<br>&gt;<br>&gt;<br>&gt; Ruby comes in mind. Ruby is different in that it does nothing to prevent<br>&gt; the Billion Dollar Mistake that they coincidentally call nil.<br>&gt;<br>&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt;<br>&gt; I&#39;ve followed the conversation for a couple of days and read through the<br>&gt; proposal quickly. I&#39;ve thought about the problem domain a lot before though.<br>&gt;<br>&gt; — Pyry Jahkola<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/3af7dd13/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>February 16, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>I’m -1. My main objection is the same as others have brought up, namely that, contrary to ??, it keeps us in “optional land”. That is, a ??= b ~&gt; a = a ?? b, so a must be optional.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>I don’t think so. In Python, where ||= works, I do use that from time to time because it’s “idiomatic”, but I don’t really think it’s very obvious what it does. In Swift, my programming style is a bit different, and I don’t find myself needing it. Especially due to the way it keeps optional (which is obviously not an issue in Python).<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>I don’t know, but I don’t think it’s a very important addition and can lead to confusion instead.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read the responses. Thought about my own use, and looked at some Python and Swift code.<br></p><p>-Sune<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/5b5694bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>February 16, 2016 at 07:00:00pm</p></header><div class="content"><p>…and I of course meant Ruby when I said Python :p<br></p><p>-Sune<br></p><p>&gt; On 16 Feb 2016, at 19:38, Sune Foldager &lt;cyano at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; I’m -1. My main objection is the same as others have brought up, namely that, contrary to ??, it keeps us in “optional land”. That is, a ??= b ~&gt; a = a ?? b, so a must be optional.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; I don’t think so. In Python, where ||= works, I do use that from time to time because it’s “idiomatic”, but I don’t really think it’s very obvious what it does. In Swift, my programming style is a bit different, and I don’t find myself needing it. Especially due to the way it keeps optional (which is obviously not an issue in Python).<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; I don’t know, but I don’t think it’s a very important addition and can lead to confusion instead.<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; Read the responses. Thought about my own use, and looked at some Python and Swift code.<br>&gt; <br>&gt; -Sune<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/a2d1cd6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February 16, 2016 at 07:00:00pm</p></header><div class="content"><p>So what would you guys feel to exposing a subscript method like mentioned,<br>like so:<br></p><p>dict.subscript(&quot;key&quot;, default:&quot;value&quot;)<br>dict.[](&quot;key&quot;, default:&quot;value&quot;)<br>dict[&quot;key&quot;, default:&quot;value&quot;]<br></p><p><br></p><p>*___________________________________*<br></p><p>*James⎥Head of Awesome*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Tue, Feb 16, 2016 at 6:42 PM, Sune Foldager via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; …and I of course meant Ruby when I said Python :p<br>&gt;<br>&gt; -Sune<br>&gt;<br>&gt; On 16 Feb 2016, at 19:38, Sune Foldager &lt;cyano at me.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; I’m -1. My main objection is the same as others have brought up, namely<br>&gt; that, contrary to ??, it keeps us in “optional land”. That is, a ??= b ~&gt; a<br>&gt; = a ?? b, so a must be optional.<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; I don’t think so. In Python, where ||= works, I do use that from time to<br>&gt; time because it’s “idiomatic”, but I don’t really think it’s very obvious<br>&gt; what it does. In Swift, my programming style is a bit different, and I<br>&gt; don’t find myself needing it. Especially due to the way it keeps optional<br>&gt; (which is obviously not an issue in Python).<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; I don’t know, but I don’t think it’s a very important addition and can<br>&gt; lead to confusion instead.<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; Read the responses. Thought about my own use, and looked at some Python<br>&gt; and Swift code.<br>&gt;<br>&gt; -Sune<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/42332427/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February 17, 2016 at 05:00:00pm</p></header><div class="content"><p>What is the difference to just using<br></p><p>dict[key] ?? &quot;value&quot;<br></p><p>-Thorsten <br></p><p>&gt; Am 16.02.2016 um 20:12 schrieb James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; So what would you guys feel to exposing a subscript method like mentioned, like so:<br>&gt; <br>&gt; dict.subscript(&quot;key&quot;, default:&quot;value&quot;)<br>&gt; dict.[](&quot;key&quot;, default:&quot;value&quot;)<br>&gt; dict[&quot;key&quot;, default:&quot;value&quot;]<br>&gt; <br>&gt; <br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Awesome<br>&gt; <br>&gt; james at supmenow.com⎥supmenow.com<br>&gt; <br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt;&gt; On Tue, Feb 16, 2016 at 6:42 PM, Sune Foldager via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; …and I of course meant Ruby when I said Python :p<br>&gt;&gt; <br>&gt;&gt; -Sune<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On 16 Feb 2016, at 19:38, Sune Foldager &lt;cyano at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 13 Feb 2016, at 06:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; I’m -1. My main objection is the same as others have brought up, namely that, contrary to ??, it keeps us in “optional land”. That is, a ??= b ~&gt; a = a ?? b, so a must be optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; I don’t think so. In Python, where ||= works, I do use that from time to time because it’s “idiomatic”, but I don’t really think it’s very obvious what it does. In Swift, my programming style is a bit different, and I don’t find myself needing it. Especially due to the way it keeps optional (which is obviously not an issue in Python).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; I don’t know, but I don’t think it’s a very important addition and can lead to confusion instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; Read the responses. Thought about my own use, and looked at some Python and Swift code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Sune<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/33976f37/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>February 16, 2016 at 12:00:00pm</p></header><div class="content"><p>For: https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br></p><p>&gt; • What is your evaluation of the proposal?<br></p><p>Negative.<br></p><p>The intent is interesting, but the ?? operator is simply not a good candidate for a mutating variant, as its left-hand operand and its result are of different types. The arithmetic operators generalize well to mutating variants, as lhs and result are of the same types.<br></p><p><br>&gt; • Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>The proposed ??= operator seems like a counterpart to flatMap for the .None path.<br>I’ve seen this called `recover` in a number of places:<br></p><p>extension Optional {<br>  public func recover(@noescape transform: () -&gt; Optional) -&gt; Optional {<br>    switch self {<br>    case .Some: return self<br>    case .None: return transform()<br>    }<br>  }<br>}<br></p><p><br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.<br></p><p><br>&gt; • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I looked at all the places I have used the ?? operator, and considered my intent; in every case I wanted to get out of Optionality, not keep it going.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>February 16, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Le 13 févr. 2016 à 00:15, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&gt;<br>&gt; What is your evaluation of the proposal?<br>Fits among the other assignment operators. Contrary to some beliefs, the nil/optional coalescing operator can still return an optional:<br></p><p>strongOptional = strongOptional ?? weakOptional<br></p><p>So the ??= assignment is well suited (for the form resulting in optional):<br></p><p>strongOptional ??= weakOptional<br></p><p>It may not be the best option for dictionary as some pointed out, but it can be use outside dictionary as well, allowing one to  break long chain of nil/optional coalescing.<br></p><p>strongOptional = strongOptional ?? weakOptional ?? weakerOptional ?? weakestOptional<br></p><p>In some possible used case:<br></p><p>currentSetting = currentSetting ?? userDefault ?? systemDefault ?? builtinDefault<br>currentSetting ??= userDefault<br>currentSetting ??= systemDefault<br>currentSetting ??= builtinDefault<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Not really a problem, just a &quot;why is this missing&quot; state. The change also seem of minimal churn and be of low risk.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>It’s just an assignment operator among others which are similar in shape, its not evolution and as such have no direction.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Nope<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Been following the thread<br></p><p>Dany<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/31a3ef65/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>February 16, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1.  It seems like this operator will be occasionally useful, and won’t be in anyone’s way if they don’t need it.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>More or less.  I don’t think the meaning will be obvious to a beginner, but neither are most operators, so it still seems fine.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I have used the equivalent in ruby, and it came in handy.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick read.<br></p><p>Matt<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/fe267152/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February 16, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Feb 12, 2016, at 09:15 PM, Douglas Gregor wrote:<br>&gt;  * What is your evaluation of the proposal?<br>-1. If we were to have this operator, then I think `??=` is a good<br>choice for it. But I don&#39;t think we need this operator. As others have<br>pointed out, a lot of the use-cases from other languages don&#39;t actually<br>work in Swift, and having the operator encourages people to write anti-<br>patterns in order to use it, such as making a value into a mutable<br>Optional when it really should be an immutable non-optional value.<br></p><p>&gt;  * Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>No. The need for this sort of operator is much rarer in Swift than it is<br>in languages that do have an equivalent (like Ruby).<br></p><p>Anecdotally, I&#39;ve written a lot of Swift code at this point, and I&#39;ve<br>never wanted this. I have on rare occasion wanted a local &quot;lazy&quot;<br>variable, but in those rare instances, the desire was to move the<br>initialization out of the main body of the function and up to the<br>declaration, which `??=` doesn&#39;t help with.<br></p><p>&gt;  * Does this proposal fit well with the feel and direction of Swift?<br>The choice of operator I think is reasonable, given the existing `??`<br>operator, but encouraging the use of Optionals for local variables that<br>will end up with a guaranteed-non-Optional value does not.<br></p><p>&gt;  * If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>The only languages that I know of with a similar operator also return<br>the rhs value from the assignment expression, and that&#39;s not something<br>Swift would do. So this is less useful than the operator in those<br>languages.<br></p><p>&gt;  * How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>A quick reading.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/ffdabee3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February 17, 2016 at 06:00:00pm</p></header><div class="content"><p>- What is your evaluation of the proposal?<br></p><p>-1. Kevin Ballard seems to have covered my reasons quite well.<br></p><p><br></p><p>   - Is the problem being addressed significant enough to warrant a change<br>   to Swift?<br></p><p>No. Again, Kevin Ballard has covered it. I think it encourages mutability<br>where it&#39;s not necessary, isn&#39;t useful without a return value, and<br>syntactically doesn&#39;t add much over `??`.<br></p><p><br>   - Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think it adds unnecessary syntactic sugar and encourages bad (swift)<br>practices, which doesn&#39;t fit the feel and direction of Swift. I can<br>understand the desire for it, but every time I&#39;ve wanted it I have used ??<br>and preferred the resulting code. The resulting code has felt more Swifty.<br>I suppose worst-case you can do this: `a = b ?? a`.<br></p><p><br>   - If you have used other languages or libraries with a similar feature,<br>   how do you feel that this proposal compares to those?<br></p><p>Other languages I&#39;ve used have allowed this operator to be chained, used as<br>a style of lazy-initialization. Using this operator for that doesn&#39;t<br>guarantee that the value is set, and set once, there&#39;s better ways to do<br>that in Swift. Other cases I&#39;ve seen it were to break expressions over<br>multiple lines, I think that&#39;s noisy, and prone to mistakes when<br>refactoring.<br></p><p><br>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br></p><p>Followed the discussion, read the proposal, read the last post (Kevin&#39;s).<br></p><p>- Andrew Bennett<br></p><p>On Wed, Feb 17, 2016 at 2:26 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Feb 12, 2016, at 09:15 PM, Douglas Gregor wrote:<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; -1. If we were to have this operator, then I think `??=` is a good choice<br>&gt; for it. But I don&#39;t think we need this operator. As others have pointed<br>&gt; out, a lot of the use-cases from other languages don&#39;t actually work in<br>&gt; Swift, and having the operator encourages people to write anti-patterns in<br>&gt; order to use it, such as making a value into a mutable Optional when it<br>&gt; really should be an immutable non-optional value.<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; No. The need for this sort of operator is much rarer in Swift than it is<br>&gt; in languages that do have an equivalent (like Ruby).<br>&gt;<br>&gt; Anecdotally, I&#39;ve written a lot of Swift code at this point, and I&#39;ve<br>&gt; never wanted this. I have on rare occasion wanted a local &quot;lazy&quot; variable,<br>&gt; but in those rare instances, the desire was to move the initialization out<br>&gt; of the main body of the function and up to the declaration, which `??=`<br>&gt; doesn&#39;t help with.<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; The choice of operator I think is reasonable, given the existing `??`<br>&gt; operator, but encouraging the use of Optionals for local variables that<br>&gt; will end up with a guaranteed-non-Optional value does not.<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; The only languages that I know of with a similar operator also return the<br>&gt; rhs value from the assignment expression, and that&#39;s not something Swift<br>&gt; would do. So this is less useful than the operator in those languages.<br>&gt;<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; A quick reading.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/ce588f45/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 17, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I&#39;m against the adoption of this operator. Echoing previous comments:<br></p><p>- Its use can encourage mutability and optionality where immutability and unwrapped types would be preferred<br>- Its surface area is smaller than the breadth that it covers—as Joe mentioned earlier, a Dictionary extension may be a better proposed solution<br></p><p>I also believe that inclusion in the standard library is an endorsement, and developers coming from other languages with similar operators will adopt its use in scenarios that would be better addressed with careful consideration of mutability and optionality.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p><br>No. It could create more problems than it solves.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p><br>Other than the fact that it fits in with the other operators, no. While Swift makes optionals and mutating state easy to work with, it also prefers immutability (it generates fix-its to change &quot;var&quot; to &quot;let&quot;) and non-optional types are still much easier (and safer) to work with.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p><br>I&#39;ve used Ruby extensively and it&#39;s generally a good fit there given the prevalence of nil and mutating state in the language and how the language is generally written. It makes much less sense for Swift for the reasons I mentioned earlier.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p><br>I participated in the earlier discussions, thought about it at length, and looked over my own code to consider where it would be useful.<br></p><p>Stephen<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February 17, 2016 at 06:00:00pm</p></header><div class="content"><p>-1 to the proposal.<br></p><p>Kevin and others have summed up the reasons already: the operator is encouraging mutability and optionality where it would not be needed and using it therefore seems to be an anti pattern. <br></p><p>-Thorsten <br></p><p>&gt; Am 17.02.2016 um 06:26 schrieb Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; On Fri, Feb 12, 2016, at 09:15 PM, Douglas Gregor wrote:<br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; -1. If we were to have this operator, then I think `??=` is a good choice for it. But I don&#39;t think we need this operator. As others have pointed out, a lot of the use-cases from other languages don&#39;t actually work in Swift, and having the operator encourages people to write anti-patterns in order to use it, such as making a value into a mutable Optional when it really should be an immutable non-optional value.<br>&gt;  <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; No. The need for this sort of operator is much rarer in Swift than it is in languages that do have an equivalent (like Ruby).<br>&gt;  <br>&gt; Anecdotally, I&#39;ve written a lot of Swift code at this point, and I&#39;ve never wanted this. I have on rare occasion wanted a local &quot;lazy&quot; variable, but in those rare instances, the desire was to move the initialization out of the main body of the function and up to the declaration, which `??=` doesn&#39;t help with.<br>&gt;  <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; The choice of operator I think is reasonable, given the existing `??` operator, but encouraging the use of Optionals for local variables that will end up with a guaranteed-non-Optional value does not.<br>&gt;  <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; The only languages that I know of with a similar operator also return the rhs value from the assignment expression, and that&#39;s not something Swift would do. So this is less useful than the operator in those languages.<br>&gt;  <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; A quick reading.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/e1fed755/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a03106b2fbee9e0ada822057dfd0b6d3?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Tal Atlas</string> &lt;me at tal.by&gt;<p>February 17, 2016 at 12:00:00pm</p></header><div class="content"><p>I think that overall this is a good operator that eventually should get in.<br>At this point though the wins that this would bring are probably not worth<br>the added complexity to the language.<br></p><p>As Joe said the primary use case for the hammer operator `||=` in ruby is<br>not even covered by this operator, so it’s use would be far more limited<br>than in those languages.<br></p><p>-Tal<br></p><p>On Sat, Feb 13, 2016 at 12:15 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt; through February 18, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/2c711c9a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>February 18, 2016 at 02:00:00am</p></header><div class="content"><p>&gt;       • What is your evaluation of the proposal?<br></p><p>I&#39;m for the adoption of this operator.<br></p><p>Acknowledging previous comments: Swift values non-optional and immutable<br>types, but I don&#39;t see this operator as encouraging optionals or mutable<br>types; instead I see it as one step in the process of make clearer how<br>mutable optionals are used. They aren&#39;t going anywhere.<br></p><p>The difficulties of &#39;??=&#39; lie with &#39;??&#39;, because it&#39;s overloaded; it serves<br>both of these signatures:<br>1) Optional&lt;T&gt; ?? Optional&lt;T&gt; -&gt; Optional&lt;T&gt;<br>2) Optional&lt;T&gt; ?? T -&gt; T<br>If we disambiguated this operator - for the sake of example, replaced the<br>operator in 1) with &#39;???&#39; and kept 2) as is - then &#39;??=&#39; would be<br>meaningless (its left argument would never be optional) and this proposal<br>would instead be for the inclusion of &#39;???=&#39;, which would be unambiguous.<br>And the number of question marks alone would drown the developer in doubt<br>until they went for the straightforward non-optional constant others in<br>this thread feel this operator would encourage.<br></p><p>As a further suggestion: just as the Swift compiler will currently warn a<br>developer that a local variable is unused (and suggest replacing it with<br>&#39;_&#39;) or that a variable doesn&#39;t change (and suggest replacing its<br>declaration with &#39;??&#39;), perhaps it could be possible to identify situations<br>where an optional var could be replaced with a non-optional let if a &#39;??=&#39;<br>statement was rewritten as &#39;??&#39;, and issue an appropriate warning.<br></p><p>&gt;       • Is the problem being addressed significant enough to warrant a<br>change to Swift?<br></p><p>Swift encourages non-optionals. This isn&#39;t a significant problem,<br>particularly if one follows the law of Demeter as one codes. But it&#39;s a<br>nice addition.<br></p><p>&gt;       • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Swift will continue to have optionals, and code handling optionals<br>should be clear. As long as the meaning of ?? is clearly understood, ??=<br>will be.<br></p><p>&gt;       • If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br></p><p>I haven&#39;t used a similar feature in other languages, but have previously<br>wished for such an operator in Objective C (prior to its<br>nullable/nonnullable additions).<br></p><p>&gt;       • How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>I&#39;ve read the proposal and much of the swift-evolution discussion of it.<br></p><p>On Wed, Feb 17, 2016 at 5:47 PM, Tal Atlas via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think that overall this is a good operator that eventually should get<br>&gt; in. At this point though the wins that this would bring are probably not<br>&gt; worth the added complexity to the language.<br>&gt;<br>&gt; As Joe said the primary use case for the hammer operator `||=` in ruby is<br>&gt; not even covered by this operator, so it’s use would be far more limited<br>&gt; than in those languages.<br>&gt;<br>&gt; -Tal<br>&gt;<br>&gt; On Sat, Feb 13, 2016 at 12:15 AM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt;&gt; through February 18, 2016. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt;&gt; top of the message:<br>&gt;&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;&gt;<br>&gt;&gt; Reply text<br>&gt;&gt;<br>&gt;&gt; Other replies<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt; goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt;    - What is your evaluation of the proposal?<br>&gt;&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;&gt;    change to Swift?<br>&gt;&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;    - If you have used other languages or libraries with a similar<br>&gt;&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;&gt;    reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; Doug Gregor<br>&gt;&gt;<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160218/729e1084/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0024 &quot;Optional Value Setter `??=`&quot;</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February 18, 2016 at 10:00:00am</p></header><div class="content"><p>Interesting what if instead of ??? it was ?! (Take an optional &quot;?&quot;, unwrap<br>to a default value if needed &quot;!&quot; and set it &quot;=&quot;)<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Awesome*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Thu, Feb 18, 2016 at 2:14 AM, Ross O&#39;Brien via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;       • What is your evaluation of the proposal?<br>&gt;<br>&gt; I&#39;m for the adoption of this operator.<br>&gt;<br>&gt; Acknowledging previous comments: Swift values non-optional and immutable<br>&gt; types, but I don&#39;t see this operator as encouraging optionals or mutable<br>&gt; types; instead I see it as one step in the process of make clearer how<br>&gt; mutable optionals are used. They aren&#39;t going anywhere.<br>&gt;<br>&gt; The difficulties of &#39;??=&#39; lie with &#39;??&#39;, because it&#39;s overloaded; it<br>&gt; serves both of these signatures:<br>&gt; 1) Optional&lt;T&gt; ?? Optional&lt;T&gt; -&gt; Optional&lt;T&gt;<br>&gt; 2) Optional&lt;T&gt; ?? T -&gt; T<br>&gt; If we disambiguated this operator - for the sake of example, replaced the<br>&gt; operator in 1) with &#39;???&#39; and kept 2) as is - then &#39;??=&#39; would be<br>&gt; meaningless (its left argument would never be optional) and this proposal<br>&gt; would instead be for the inclusion of &#39;???=&#39;, which would be unambiguous.<br>&gt; And the number of question marks alone would drown the developer in doubt<br>&gt; until they went for the straightforward non-optional constant others in<br>&gt; this thread feel this operator would encourage.<br>&gt;<br>&gt; As a further suggestion: just as the Swift compiler will currently warn a<br>&gt; developer that a local variable is unused (and suggest replacing it with<br>&gt; &#39;_&#39;) or that a variable doesn&#39;t change (and suggest replacing its<br>&gt; declaration with &#39;??&#39;), perhaps it could be possible to identify situations<br>&gt; where an optional var could be replaced with a non-optional let if a &#39;??=&#39;<br>&gt; statement was rewritten as &#39;??&#39;, and issue an appropriate warning.<br>&gt;<br>&gt; &gt;       • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>&gt; Swift encourages non-optionals. This isn&#39;t a significant problem,<br>&gt; particularly if one follows the law of Demeter as one codes. But it&#39;s a<br>&gt; nice addition.<br>&gt;<br>&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes. Swift will continue to have optionals, and code handling optionals<br>&gt; should be clear. As long as the meaning of ?? is clearly understood, ??=<br>&gt; will be.<br>&gt;<br>&gt; &gt;       • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I haven&#39;t used a similar feature in other languages, but have previously<br>&gt; wished for such an operator in Objective C (prior to its<br>&gt; nullable/nonnullable additions).<br>&gt;<br>&gt; &gt;       • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; I&#39;ve read the proposal and much of the swift-evolution discussion of it.<br>&gt;<br>&gt; On Wed, Feb 17, 2016 at 5:47 PM, Tal Atlas via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I think that overall this is a good operator that eventually should get<br>&gt;&gt; in. At this point though the wins that this would bring are probably not<br>&gt;&gt; worth the added complexity to the language.<br>&gt;&gt;<br>&gt;&gt; As Joe said the primary use case for the hammer operator `||=` in ruby is<br>&gt;&gt; not even covered by this operator, so it’s use would be far more limited<br>&gt;&gt; than in those languages.<br>&gt;&gt;<br>&gt;&gt; -Tal<br>&gt;&gt;<br>&gt;&gt; On Sat, Feb 13, 2016 at 12:15 AM, Douglas Gregor via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of SE-0024 &quot;Optional Value Setter `??=`&quot; begins now and runs<br>&gt;&gt;&gt; through February 18, 2016. The proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt;&gt;&gt; top of the message:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt;&gt; answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - What is your evaluation of the proposal?<br>&gt;&gt;&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;&gt;&gt;    change to Swift?<br>&gt;&gt;&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;    - If you have used other languages or libraries with a similar<br>&gt;&gt;&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;&gt;&gt;    reading, or an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160218/f773ad43/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
