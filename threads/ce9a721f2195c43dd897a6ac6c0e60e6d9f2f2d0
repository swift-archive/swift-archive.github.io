<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>September 28, 2016 at 03:00:00pm</p></header><div class="content"><p>Chris: &quot;Also, it is worth saying that any source breaking change still has to have an <br>ultra-compelling reason to be worth considering.  Despite having a framework to <br>support some source breaking changes, we still want to minimize them where <br>ever possible.&quot;<br></p><p>Since it seems to be open season on introducing a few, highly focused<br>breaking changes, let me throw this one out there.<br></p><p>Pitch: Renaming CharacterSet to UnicodeScalarSet<br></p><p>In Swift, String is defined as &quot;a Unicode string value.&quot; and a &quot;CharacterSet&quot; <br>represents a set of Unicode-compliant characters.<br></p><p>A CharacterSet&#39;s initializers are:<br>init()<br>init&lt;S&gt;(S)<br>init(arrayLiteral: UnicodeScalar...)<br>init(bitmapRepresentation: Data)<br>init(charactersIn: ClosedRange&lt;UnicodeScalar&gt;)<br>init(charactersIn: String)<br>init(charactersIn: Range&lt;UnicodeScalar&gt;)<br>init?(contentsOfFile: String)<br></p><p>Why not rename `CharacterSet` to `UnicodeScalarSe`t, and update the initializers<br>to reflect they&#39;re being initialized from the unicode scalars in strings and ranges?<br>I think the few places where the word `character` is left mentioned (in convenience<br>properties) can be better named from `punctuationCharacters` to `punctuation`, <br>`controlCharacters` to `controlAndFormat`, etc.<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160928/ce9af2d0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September 28, 2016 at 04:00:00pm</p></header><div class="content"><p>Is this really correct? Character and UnicodeScalar are not synonyms. The<br>Character type represents a character made up of one or more Unicode<br>scalars (i.e. an extended grapheme cluster). Is a CharacterSet a set of<br>Unicode-compliant characters that happens to be restricted to those<br>characters each made up of only a single Unicode scalar, or is it meant to<br>be a set of Unicode scalars? My read of the Foundation documentation is<br>that it is the former.<br></p><p><br>On Wed, Sep 28, 2016 at 4:27 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Chris: &quot;*Also, it is worth saying that any source breaking change still<br>&gt; has to have an *<br>&gt; *ultra-compelling reason to be worth considering.  Despite having a<br>&gt; framework to *<br>&gt; *support some source breaking changes, we still want to minimize them<br>&gt; where *<br>&gt; *ever possible.*&quot;<br>&gt;<br>&gt; Since it seems to be open season on introducing a few, highly focused<br>&gt; breaking changes, let me throw this one out there.<br>&gt;<br>&gt; *Pitch: Renaming CharacterSet to UnicodeScalarSet*<br>&gt;<br>&gt; In Swift, String is defined as &quot;a Unicode string value.&quot; and a<br>&gt; &quot;CharacterSet&quot;<br>&gt; represents a set of Unicode-compliant characters.<br>&gt;<br>&gt; A CharacterSet&#39;s initializers are:<br>&gt;<br>&gt;    - init()<br>&gt;    - init&lt;S&gt;(S)<br>&gt;    - init(arrayLiteral: UnicodeScalar...)<br>&gt;    - init(bitmapRepresentation: Data)<br>&gt;    - init(charactersIn: ClosedRange&lt;UnicodeScalar&gt;)<br>&gt;    - init(charactersIn: String)<br>&gt;    - init(charactersIn: Range&lt;UnicodeScalar&gt;)<br>&gt;    - init?(contentsOfFile: String)<br>&gt;<br>&gt;<br>&gt; Why not rename `CharacterSet` to `UnicodeScalarSe`t, and update the<br>&gt; initializers<br>&gt; to reflect they&#39;re being initialized from the unicode scalars in strings<br>&gt; and ranges?<br>&gt; I think the few places where the word `character` is left mentioned (in<br>&gt; convenience<br>&gt; properties) can be better named from `punctuationCharacters` to<br>&gt; `punctuation`,<br>&gt; `controlCharacters` to `controlAndFormat`, etc.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160928/55373012/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>September 28, 2016 at 05:00:00pm</p></header><div class="content"><p>On Sep 28, 2016, at 3:58 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is this really correct? Character and UnicodeScalar are not synonyms. The Character type represents a character made up of one or more Unicode scalars (i.e. an extended grapheme cluster). Is a CharacterSet a set of Unicode-compliant characters that happens to be restricted to those characters each made up of only a single Unicode scalar, or is it meant to be a set of Unicode scalars? My read of the Foundation documentation is that it is the former.<br></p><p>http://i.imgur.com/h6W5kYc.jpg &lt;http://i.imgur.com/h6W5kYc.jpg&gt;<br></p><p>http://i.imgur.com/q50PSld.jpg &lt;http://i.imgur.com/q50PSld.jpg&gt;<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160928/b9eefea1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September 29, 2016 at 12:00:00am</p></header><div class="content"><p>Afaik, every Unicode scalar can be its own character, so IMO it&#39;s not<br>bothersome that there are overloads that take Unicode scalar arguments.<br>However, since the stated purpose of the type is to be a set of characters,<br>isn&#39;t the problem you&#39;re presenting really an argument that the type should<br>be fleshed out to handle characters (grapheme clusters) containing more<br>than one Unicode scalar?<br></p><p><br>On Wed, Sep 28, 2016 at 18:43 Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt; On Sep 28, 2016, at 3:58 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Is this really correct? Character and UnicodeScalar are not synonyms. The<br>&gt; Character type represents a character made up of one or more Unicode<br>&gt; scalars (i.e. an extended grapheme cluster). Is a CharacterSet a set of<br>&gt; Unicode-compliant characters that happens to be restricted to those<br>&gt; characters each made up of only a single Unicode scalar, or is it meant to<br>&gt; be a set of Unicode scalars? My read of the Foundation documentation is<br>&gt; that it is the former.<br>&gt;<br>&gt;<br>&gt; http://i.imgur.com/h6W5kYc.jpg<br>&gt;<br>&gt; http://i.imgur.com/q50PSld.jpg<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160929/ed70030d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>September 29, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On 28 Sep 2016, at 22:27, Erica Sadun wrote:<br>&gt; <br>&gt; Why not rename `CharacterSet` to `UnicodeScalarSe`t, and update the initializers<br>&gt; to reflect they&#39;re being initialized from the unicode scalars in strings and ranges?<br></p><p>I agree, but `UnicodeScalarSet` was rejected during the SE-0069 discussion:<br></p><p>&lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160425/015685.html&gt;<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>September 28, 2016 at 08:00:00pm</p></header><div class="content"><p>On Sep 28, 2016, at 6:14 PM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 28 Sep 2016, at 22:27, Erica Sadun wrote:<br>&gt;&gt; <br>&gt;&gt; Why not rename `CharacterSet` to `UnicodeScalarSe`t, and update the initializers<br>&gt;&gt; to reflect they&#39;re being initialized from the unicode scalars in strings and ranges?<br>&gt; <br>&gt; I agree, but `UnicodeScalarSet` was rejected during the SE-0069 discussion:<br>&gt; <br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160425/015685.html&gt;<br>&gt; <br>&gt; -- Ben<br>&gt; <br></p><p>D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br></p><p>So let me move on to part B of the pitch: I think CharacterSets are broken.<br></p><p>&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that the type should be fleshed out to handle characters (grapheme clusters) containing more than one Unicode scalar?&quot;<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>September 28, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Sep 28, 2016, at 9:57 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br>&gt; <br>&gt; So let me move on to part B of the pitch: I think CharacterSets are broken.<br>&gt; <br>&gt;&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that the type should be fleshed out to handle characters (grapheme clusters) containing more than one Unicode scalar?&quot;<br></p><p>It seems that it already does handle such characters:<br></p><p>(done in Objective-C so we can log the length of the range as a count of UTF-16 code units)<br></p><p>#import &lt;Foundation/Foundation.h&gt;<br></p><p>int main(int argc, char *argv[]) {<br>    @autoreleasepool {<br>        NSCharacterSet *bikeSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;🚲&quot;];<br>        NSString *str = @&quot;foo🚲bar&quot;;<br>        <br>        NSRange range = [str rangeOfCharacterFromSet:bikeSet];<br>        <br>        NSLog(@&quot;location: %lu length: %lu&quot;, range.location, range.length);<br>    }<br>}<br></p><p>- - - - - - -<br></p><p>2016-09-28 22:20:00.622471 test[15577:2433912] location: 3 length: 2<br>Program ended with exit code: 0<br></p><p>- - - - - - -<br></p><p>As we can see, the character from the set is recognized as consisting of two code units. There are a few bugs in the system, though. See the cocoa-dev thread “Where is my bicycle?” from about a year ago: http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html &lt;http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html&gt;<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160928/b1825eaa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September 28, 2016 at 10:00:00pm</p></header><div class="content"><p>On Wed, Sep 28, 2016 at 10:23 PM, Charles Srstka via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Sep 28, 2016, at 9:57 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br>&gt;<br>&gt; So let me move on to part B of the pitch: I think CharacterSets are broken.<br>&gt;<br>&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that<br>&gt; the type should be fleshed out to handle characters (grapheme clusters)<br>&gt; containing more than one Unicode scalar?&quot;<br>&gt;<br>&gt;<br>&gt; It seems that it already does handle such characters:<br>&gt;<br>&gt; (done in Objective-C so we can log the length of the range as a count of<br>&gt; UTF-16 code units)<br>&gt;<br>&gt; #import &lt;Foundation/Foundation.h&gt;<br>&gt;<br>&gt; int main(int argc, char *argv[]) {<br>&gt;     @autoreleasepool {<br>&gt;         NSCharacterSet *bikeSet = [NSCharacterSet<br>&gt; characterSetWithCharactersInString:@&quot;🚲&quot;];<br>&gt;         NSString *str = @&quot;foo🚲bar&quot;;<br>&gt;<br>&gt;<br>&gt;         NSRange range = [str rangeOfCharacterFromSet:bikeSet];<br>&gt;<br>&gt;<br>&gt;         NSLog(@&quot;location: %lu length: %lu&quot;, range.location, range.length);<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; - - - - - - -<br>&gt;<br>&gt; *2016-09-28 22:20:00.622471 test[15577:2433912] location: 3 length: 2*<br>&gt; *Program ended with exit code: 0*<br>&gt;<br>&gt; - - - - - - -<br>&gt;<br>&gt; As we can see, the character from the set is recognized as consisting of<br>&gt; two code units. There are a few bugs in the system, though. See the<br>&gt; cocoa-dev thread “Where is my bicycle?” from about a year ago:<br>&gt; http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html<br>&gt;<br></p><p>The bike emoji might be two code units, but it is one Unicode scalar<br>(U+1F6B2). However, the Canadian flag emoji, for instance, is two Unicode<br>scalars (U+1F1E8 U+1F1E6) but nonetheless one character.<br></p><p>Charles<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160928/e89fda6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September 28, 2016 at 10:00:00pm</p></header><div class="content"><p>On Wed, Sep 28, 2016 at 10:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Sep 28, 2016 at 10:23 PM, Charles Srstka via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Sep 28, 2016, at 9:57 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br>&gt;&gt;<br>&gt;&gt; So let me move on to part B of the pitch: I think CharacterSets are<br>&gt;&gt; broken.<br>&gt;&gt;<br>&gt;&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that<br>&gt;&gt; the type should be fleshed out to handle characters (grapheme clusters)<br>&gt;&gt; containing more than one Unicode scalar?&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It seems that it already does handle such characters:<br>&gt;&gt;<br>&gt;&gt; (done in Objective-C so we can log the length of the range as a count of<br>&gt;&gt; UTF-16 code units)<br>&gt;&gt;<br>&gt;&gt; #import &lt;Foundation/Foundation.h&gt;<br>&gt;&gt;<br>&gt;&gt; int main(int argc, char *argv[]) {<br>&gt;&gt;     @autoreleasepool {<br>&gt;&gt;         NSCharacterSet *bikeSet = [NSCharacterSet<br>&gt;&gt; characterSetWithCharactersInString:@&quot;🚲&quot;];<br>&gt;&gt;         NSString *str = @&quot;foo🚲bar&quot;;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         NSRange range = [str rangeOfCharacterFromSet:bikeSet];<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         NSLog(@&quot;location: %lu length: %lu&quot;, range.location, range.length<br>&gt;&gt; );<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; - - - - - - -<br>&gt;&gt;<br>&gt;&gt; *2016-09-28 22:20:00.622471 test[15577:2433912] location: 3 length: 2*<br>&gt;&gt; *Program ended with exit code: 0*<br>&gt;&gt;<br>&gt;&gt; - - - - - - -<br>&gt;&gt;<br>&gt;&gt; As we can see, the character from the set is recognized as consisting of<br>&gt;&gt; two code units. There are a few bugs in the system, though. See the<br>&gt;&gt; cocoa-dev thread “Where is my bicycle?” from about a year ago:<br>&gt;&gt; http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html<br>&gt;&gt;<br>&gt;<br>&gt; The bike emoji might be two code units, but it is one Unicode scalar<br>&gt; (U+1F6B2). However, the Canadian flag emoji, for instance, is two Unicode<br>&gt; scalars (U+1F1E8 U+1F1E6) but nonetheless one character.<br>&gt;<br></p><p>To illustrate in code how CharacterSet doesn&#39;t actually handle characters<br>made up of multiple Unicode scalars:<br></p><p>```<br>import Foundation<br></p><p>let str1 = &quot;🇦🇩&quot;<br>let first = CharacterSet(charactersIn: str1) // this actually crashes<br>corelibs-foundation<br>let str2 = &quot;🇦🇺&quot;<br>let second = CharacterSet(charactersIn: str2)<br>let intersection = first.intersection(second)<br>print(intersection.isEmpty)<br>// actual output: false<br>// obviously, if we were really dealing with characters, the intersection<br>should be empty<br>```<br></p><p><br>&gt; Charles<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160928/9321ca5d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>September 29, 2016 at 04:00:00am</p></header><div class="content"><p>Yes - this is totally confusing. CharacterSet and Set&lt;Character&gt; are<br>completely different things with different semantics.<br></p><p>I don&#39;t know the history, but is CharacterSet simply to have a Swift<br>equivalent of NSCharacterSet? That seems to be what it is, but since Swift<br>redefined characters in a better way, this should be removed or called<br>something else to avoid confusion. You shouldn&#39;t have to qualify what you<br>mean by &#39;character&#39; in a type name because it diverges from the definition<br>in the rest of the language.<br></p><p>On Thu, 29 Sep 2016 at 04:48 Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Wed, Sep 28, 2016 at 10:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Wed, Sep 28, 2016 at 10:23 PM, Charles Srstka via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Sep 28, 2016, at 9:57 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; So let me move on to part B of the pitch: I think CharacterSets are<br>&gt;&gt;&gt; broken.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that<br>&gt;&gt;&gt; the type should be fleshed out to handle characters (grapheme clusters)<br>&gt;&gt;&gt; containing more than one Unicode scalar?&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It seems that it already does handle such characters:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (done in Objective-C so we can log the length of the range as a count of<br>&gt;&gt;&gt; UTF-16 code units)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; #import &lt;Foundation/Foundation.h&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; int main(int argc, char *argv[]) {<br>&gt;&gt;&gt;     @autoreleasepool {<br>&gt;&gt;&gt;         NSCharacterSet *bikeSet = [NSCharacterSet<br>&gt;&gt;&gt; characterSetWithCharactersInString:@&quot;🚲&quot;];<br>&gt;&gt;&gt;         NSString *str = @&quot;foo🚲bar&quot;;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         NSRange range = [str rangeOfCharacterFromSet:bikeSet];<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         NSLog(@&quot;location: %lu length: %lu&quot;, range.location, range.length<br>&gt;&gt;&gt; );<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - - - - - - -<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *2016-09-28 22:20:00.622471 test[15577:2433912] location: 3 length: 2*<br>&gt;&gt;&gt; *Program ended with exit code: 0*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - - - - - - -<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As we can see, the character from the set is recognized as consisting of<br>&gt;&gt;&gt; two code units. There are a few bugs in the system, though. See the<br>&gt;&gt;&gt; cocoa-dev thread “Where is my bicycle?” from about a year ago:<br>&gt;&gt;&gt; http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The bike emoji might be two code units, but it is one Unicode scalar<br>&gt;&gt; (U+1F6B2). However, the Canadian flag emoji, for instance, is two Unicode<br>&gt;&gt; scalars (U+1F1E8 U+1F1E6) but nonetheless one character.<br>&gt;&gt;<br>&gt;<br>&gt; To illustrate in code how CharacterSet doesn&#39;t actually handle characters<br>&gt; made up of multiple Unicode scalars:<br>&gt;<br>&gt; ```<br>&gt; import Foundation<br>&gt;<br>&gt; let str1 = &quot;🇦🇩&quot;<br>&gt; let first = CharacterSet(charactersIn: str1) // this actually crashes<br>&gt; corelibs-foundation<br>&gt; let str2 = &quot;🇦🇺&quot;<br>&gt; let second = CharacterSet(charactersIn: str2)<br>&gt; let intersection = first.intersection(second)<br>&gt; print(intersection.isEmpty)<br>&gt; // actual output: false<br>&gt; // obviously, if we were really dealing with characters, the intersection<br>&gt; should be empty<br>&gt; ```<br>&gt;<br>&gt;<br>&gt;&gt; Charles<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160929/6708deb8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September 29, 2016 at 05:00:00am</p></header><div class="content"><p>CharacterSet is a Foundation value type. It was a subject of the following<br>proposal:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md<br></p><p>We might be able improve on the implementation, but I don&#39;t think<br>re-arguing the name is an option.<br></p><p><br>On Wed, Sep 28, 2016 at 11:59 PM Jay Abbott &lt;jay at abbott.me.uk&gt; wrote:<br></p><p>&gt;<br>&gt; Yes - this is totally confusing. CharacterSet and Set&lt;Character&gt; are<br>&gt; completely different things with different semantics.<br>&gt;<br>&gt; I don&#39;t know the history, but is CharacterSet simply to have a Swift<br>&gt; equivalent of NSCharacterSet? That seems to be what it is, but since Swift<br>&gt; redefined characters in a better way, this should be removed or called<br>&gt; something else to avoid confusion. You shouldn&#39;t have to qualify what you<br>&gt; mean by &#39;character&#39; in a type name because it diverges from the definition<br>&gt; in the rest of the language.<br>&gt;<br>&gt; On Thu, 29 Sep 2016 at 04:48 Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Wed, Sep 28, 2016 at 10:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Wed, Sep 28, 2016 at 10:23 PM, Charles Srstka via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Sep 28, 2016, at 9:57 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; So let me move on to part B of the pitch: I think CharacterSets are<br>&gt;&gt;&gt;&gt; broken.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that<br>&gt;&gt;&gt;&gt; the type should be fleshed out to handle characters (grapheme clusters)<br>&gt;&gt;&gt;&gt; containing more than one Unicode scalar?&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It seems that it already does handle such characters:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; (done in Objective-C so we can log the length of the range as a count<br>&gt;&gt;&gt;&gt; of UTF-16 code units)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; #import &lt;Foundation/Foundation.h&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; int main(int argc, char *argv[]) {<br>&gt;&gt;&gt;&gt;     @autoreleasepool {<br>&gt;&gt;&gt;&gt;         NSCharacterSet *bikeSet = [NSCharacterSet<br>&gt;&gt;&gt;&gt; characterSetWithCharactersInString:@&quot;🚲&quot;];<br>&gt;&gt;&gt;&gt;         NSString *str = @&quot;foo🚲bar&quot;;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         NSRange range = [str rangeOfCharacterFromSet:bikeSet];<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         NSLog(@&quot;location: %lu length: %lu&quot;, range.location, range.<br>&gt;&gt;&gt;&gt; length);<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - - - - - - -<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; *2016-09-28 22:20:00.622471 test[15577:2433912] location: 3 length: 2*<br>&gt;&gt;&gt;&gt; *Program ended with exit code: 0*<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - - - - - - -<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As we can see, the character from the set is recognized as consisting<br>&gt;&gt;&gt;&gt; of two code units. There are a few bugs in the system, though. See the<br>&gt;&gt;&gt;&gt; cocoa-dev thread “Where is my bicycle?” from about a year ago:<br>&gt;&gt;&gt;&gt; http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The bike emoji might be two code units, but it is one Unicode scalar<br>&gt;&gt;&gt; (U+1F6B2). However, the Canadian flag emoji, for instance, is two Unicode<br>&gt;&gt;&gt; scalars (U+1F1E8 U+1F1E6) but nonetheless one character.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; To illustrate in code how CharacterSet doesn&#39;t actually handle characters<br>&gt;&gt; made up of multiple Unicode scalars:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; import Foundation<br>&gt;&gt;<br>&gt;&gt; let str1 = &quot;🇦🇩&quot;<br>&gt;&gt; let first = CharacterSet(charactersIn: str1) // this actually crashes<br>&gt;&gt; corelibs-foundation<br>&gt;&gt; let str2 = &quot;🇦🇺&quot;<br>&gt;&gt; let second = CharacterSet(charactersIn: str2)<br>&gt;&gt; let intersection = first.intersection(second)<br>&gt;&gt; print(intersection.isEmpty)<br>&gt;&gt; // actual output: false<br>&gt;&gt; // obviously, if we were really dealing with characters, the intersection<br>&gt;&gt; should be empty<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Charles<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160929/8de91239/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Pitch: Renaming CharacterSet to UnicodeScalarSet</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>September 29, 2016 at 07:00:00am</p></header><div class="content"><p>IIUC, Jay wasn&#39;t arguing for renaming CharacterSet, but replacing it with Swift&#39;s existing Set mechanism. If/when generics get to the point that we can say &#39;extension Set&lt;Character&gt; {...}&#39;, I think the transition could simply be putting &#39;typealias CharacterSet = Set&lt;Character&gt;&#39; somewhere in the framework (although I don&#39;t know how Obj-C interop would be affected by such a change).<br></p><p>- Dave Sweeris<br></p><p>&gt; On Sep 29, 2016, at 00:30, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; CharacterSet is a Foundation value type. It was a subject of the following proposal:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md<br>&gt; <br>&gt; We might be able improve on the implementation, but I don&#39;t think re-arguing the name is an option.<br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Sep 28, 2016 at 11:59 PM Jay Abbott &lt;jay at abbott.me.uk&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes - this is totally confusing. CharacterSet and Set&lt;Character&gt; are completely different things with different semantics.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know the history, but is CharacterSet simply to have a Swift equivalent of NSCharacterSet? That seems to be what it is, but since Swift redefined characters in a better way, this should be removed or called something else to avoid confusion. You shouldn&#39;t have to qualify what you mean by &#39;character&#39; in a type name because it diverges from the definition in the rest of the language.<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, 29 Sep 2016 at 04:48 Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; On Wed, Sep 28, 2016 at 10:34 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Sep 28, 2016 at 10:23 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Sep 28, 2016, at 9:57 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; D&#39;erp. I missed that. And that&#39;s an unambiguous answer.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; So let me move on to part B of the pitch: I think CharacterSets are broken.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Xiaodi Wu: &quot;isn&#39;t the problem you&#39;re presenting really an argument that the type should be fleshed out to handle characters (grapheme clusters) containing more than one Unicode scalar?&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It seems that it already does handle such characters:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (done in Objective-C so we can log the length of the range as a count of UTF-16 code units)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #import &lt;Foundation/Foundation.h&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; int main(int argc, char *argv[]) {<br>&gt;&gt;&gt;&gt;&gt;     @autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;         NSCharacterSet *bikeSet = [NSCharacterSet characterSetWithCharactersInString:@&quot;🚲&quot;];<br>&gt;&gt;&gt;&gt;&gt;         NSString *str = @&quot;foo🚲bar&quot;;<br>&gt;&gt;&gt;&gt;&gt;         <br>&gt;&gt;&gt;&gt;&gt;         NSRange range = [str rangeOfCharacterFromSet:bikeSet];<br>&gt;&gt;&gt;&gt;&gt;         <br>&gt;&gt;&gt;&gt;&gt;         NSLog(@&quot;location: %lu length: %lu&quot;, range.location, range.length);<br>&gt;&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - - - - - - -<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2016-09-28 22:20:00.622471 test[15577:2433912] location: 3 length: 2<br>&gt;&gt;&gt;&gt;&gt; Program ended with exit code: 0<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - - - - - - -<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As we can see, the character from the set is recognized as consisting of two code units. There are a few bugs in the system, though. See the cocoa-dev thread “Where is my bicycle?” from about a year ago: http://prod.lists.apple.com/archives/cocoa-dev/2015/Apr/msg00074.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The bike emoji might be two code units, but it is one Unicode scalar (U+1F6B2). However, the Canadian flag emoji, for instance, is two Unicode scalars (U+1F1E8 U+1F1E6) but nonetheless one character.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To illustrate in code how CharacterSet doesn&#39;t actually handle characters made up of multiple Unicode scalars:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let str1 = &quot;🇦🇩&quot;<br>&gt;&gt;&gt; let first = CharacterSet(charactersIn: str1) // this actually crashes corelibs-foundation<br>&gt;&gt;&gt; let str2 = &quot;🇦🇺&quot;<br>&gt;&gt;&gt; let second = CharacterSet(charactersIn: str2)<br>&gt;&gt;&gt; let intersection = first.intersection(second)<br>&gt;&gt;&gt; print(intersection.isEmpty)<br>&gt;&gt;&gt; // actual output: false<br>&gt;&gt;&gt; // obviously, if we were really dealing with characters, the intersection should be empty<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Charles<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160929/e6f77515/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
