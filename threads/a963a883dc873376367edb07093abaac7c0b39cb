<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Definite initialization implementation for property behaviors</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  2, 2016 at 09:00:00am</p></header><div class="content"><p>Hey Chris (and interested onlookers). I wanted your feedback on how to handle definite initialization with property behaviors. Behavior properties behave a lot like computed properties, so it&#39;s tricky to track their initialization behavior with our traditional storage-based analysis. For initialization purposes, the behavior property acts kind of like a proxy for the instantiated storage from the behavior declaration. For instance, if you have an `NSCopying` behavior, then an assignment that initializes the behavior property should trigger the `init` logic for the underlying storage, invoking `.copy()` on the initial value. I&#39;m thinking we can represent this in raw SIL with a `mark_uninitialized_behavior` instruction that abstractly represents the behavior property, with references to its storage and its initialization/setter logic:<br></p><p>  // Build references to the behavior&#39;s initializer and setter<br>  %init = function_ref @NSCopying.init<br>  %set = function_ref @NSCopying.set<br>  // Get the address of the storage<br>  %storage = ref_element_addr %self, #Type.property.[NSCopying].storage<br>  // Build the initialization marker<br>  %property = mark_uninitialized_behavior %self, %storage, init %init, set %set<br>  ...<br>  // Initialization<br>  assign %a to %property<br>  // Reassignment<br>  assign %b to %property<br></p><p>DI would then turn `assign`-ments that initialize %property into `apply %init(%storage)`, and reassignments into `apply %set(%self)`. Does that seem like a reasonable implementation approach?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Definite initialization implementation for property behaviors</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March  2, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 2, 2016, at 9:24 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; Hey Chris (and interested onlookers). I wanted your feedback on how to handle definite initialization with property behaviors. Behavior properties behave a lot like computed properties, so it&#39;s tricky to track their initialization behavior with our traditional storage-based analysis. For initialization purposes, the behavior property acts kind of like a proxy for the instantiated storage from the behavior declaration. For instance, if you have an `NSCopying` behavior, then an assignment that initializes the behavior property should trigger the `init` logic for the underlying storage, invoking `.copy()` on the initial value. I&#39;m thinking we can represent this in raw SIL with a `mark_uninitialized_behavior` instruction that abstractly represents the behavior property,<br></p><p>This makes sense to me.  <br></p><p>&gt; with references to its storage and its initialization/setter logic:<br>&gt; <br>&gt;  // Build references to the behavior&#39;s initializer and setter<br>&gt;  %init = function_ref @NSCopying.init<br>&gt;  %set = function_ref @NSCopying.set<br>&gt;  // Get the address of the storage<br>&gt;  %storage = ref_element_addr %self, #Type.property.[NSCopying].storage<br>&gt;  // Build the initialization marker<br>&gt;  %property = mark_uninitialized_behavior %self, %storage, init %init, set %set<br></p><p>Ah, I see why you canâ€™t reuse the existing mark_uninitialized instruction with another mode.  I agree with adding a new mark_uninitialized_behavior instruction, this is a very clever way to handle this!<br></p><p>&gt;  ...<br>&gt;  // Initialization<br>&gt;  assign %a to %property<br>&gt;  // Reassignment<br>&gt;  assign %b to %property<br>&gt; <br>&gt; DI would then turn `assign`-ments that initialize %property into `apply %init(%storage)`, and reassignments into `apply %set(%self)`. Does that seem like a reasonable implementation approach?<br></p><p>It does!  Very nice,<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
