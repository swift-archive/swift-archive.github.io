<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea125c5cd93ba84769387c17c973e2b3?s=50"></div><header><strong>[Pitch] Limiting member expression with right-bound period</strong> from <string>rintaro ishizaki</string> &lt;fs.output at gmail.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>The compiler currently accepts these expressions:<br></p><p>x = expr . member<br>x = expr .<br>         member<br></p><p>x = expr<br>    .<br></p><p>    member<br></p><p>x = .<br></p><p>    implicitMember<br></p><p><br>I propose to reject them because this could cause some unnecessary<br>confusion.<br>(especially after SE-0071<br>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md&gt;<br>)<br>For instance:<br></p><p>_ = foo(.<br>func bar(x: Int) { ... }<br></p><p><br>The current compiler parses this as:<br></p><p>// call foo(_:_:)<br>_ = foo(.func // implicit-member-expression<br>        // missing &#39;,&#39;<br>        // call bar(x:_:) with argument &#39;Int&#39; and trailing closure<br>        bar(x: Int) { ... }<br>// missing closing &#39;)&#39;<br></p><p><br>Here&#39;s the summary of *current* behavior:<br></p><p>// accept<br>expr.member<br></p><p>// accept<br>expr .member<br></p><p>// accept<br>expr<br>  .member<br></p><p>// reject with fix-it to remove white spaces<br>expr.  member<br></p><p>// two distinct statements<br>expr. // reject as missing member name<br>  member<br></p><p>// accept<br>expr  .  member<br></p><p>// accept<br>expr .<br>  member<br></p><p><br>I propose to change the last 2 examples:<br></p><p>// reject with fix-it to remove white spaces<br>some  .  member<br></p><p>// two distinct statements<br>some . // reject as missing member name<br>  member<br></p><p><br>I think, this is consistent behavior with &#39;.&#39; at postfix position.<br></p><p>Specifically:<br></p><p>   - If &#39;.&#39; is at *prefix-operator* or *unspaced-binary-operator* position,<br>   accept.<br>   - If the next token after &#39;.&#39; is at the same line, propose to fix-it.<br>   - Otherwise, reject it as missing member name.<br></p><p>This affect following expressions and types in the grammer:<br></p><p>expressions:<br>  self-method-expression<br>  self-initializer-expression<br>  superclass-method-expression<br>  superclass-initializer-expression<br>  implicit-member-expression<br>  initializer-expression<br>  explicit-member-expression<br>  postfix-self-expression<br>  explicit-member-expression<br>  postfix-self-expression<br>types:<br>  type-identifier<br>  metatype-type<br></p><p>Of course this is a source breaking change, though.<br>Any thought?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161102/79bf767f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c198ffcf0853e6011f58fdcdd32a111?s=50"></div><header><strong>[Pitch] Limiting member expression with right-bound period</strong> from <string>Benjamin Spratling</string> &lt;bspratling at mac.com&gt;<p>November  1, 2016 at 11:00:00pm</p></header><div class="content"><p>CGRect(origin:.zero, size:..<br></p><p>is pretty nice.  Why do you want to get rid of it?<br></p><p><br>return values<br>	.flatMap {<br>		//code<br>	}<br>	.filter {<br>		//code<br>	}<br>	.sorted { /* code */ 	 }<br>	.first<br></p><p>is also pretty clean, considering.<br></p><p><br>&gt; On Nov 1, 2016, at 11:06 PM, rintaro ishizaki via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; The compiler currently accepts these expressions:<br>&gt; <br>&gt; x = expr . member<br>&gt; x = expr .<br>&gt;          member<br>&gt; x = expr<br>&gt;     .<br>&gt;     member<br>&gt; x = .<br>&gt;     implicitMember<br>&gt; <br>&gt; I propose to reject them because this could cause some unnecessary confusion.<br>&gt; (especially after SE-0071 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md&gt;)<br>&gt; For instance:<br>&gt; <br>&gt; _ = foo(.<br>&gt; func bar(x: Int) { ... }<br>&gt; <br>&gt; The current compiler parses this as:<br>&gt; <br>&gt; // call foo(_:_:)<br>&gt; _ = foo(.func // implicit-member-expression<br>&gt;         // missing &#39;,&#39;<br>&gt;         // call bar(x:_:) with argument &#39;Int&#39; and trailing closure<br>&gt;         bar(x: Int) { ... }<br>&gt; // missing closing &#39;)&#39;<br>&gt; <br>&gt; Here&#39;s the summary of current behavior:<br>&gt; <br>&gt; // accept<br>&gt; expr.member<br>&gt; <br>&gt; // accept<br>&gt; expr .member<br>&gt; <br>&gt; // accept<br>&gt; expr<br>&gt;   .member<br>&gt; <br>&gt; // reject with fix-it to remove white spaces<br>&gt; expr.  member<br>&gt; <br>&gt; // two distinct statements<br>&gt; expr. // reject as missing member name<br>&gt;   member<br>&gt; <br>&gt; // accept<br>&gt; expr  .  member<br>&gt; <br>&gt; // accept<br>&gt; expr .<br>&gt;   member<br>&gt; <br>&gt; I propose to change the last 2 examples:<br>&gt; <br>&gt; // reject with fix-it to remove white spaces<br>&gt; some  .  member<br>&gt; <br>&gt; // two distinct statements <br>&gt; some . // reject as missing member name<br>&gt;   member<br>&gt; <br>&gt; I think, this is consistent behavior with &#39;.&#39; at postfix position.<br>&gt; <br>&gt; Specifically:<br>&gt; If &#39;.&#39; is at prefix-operator or unspaced-binary-operator position, accept.<br>&gt; If the next token after &#39;.&#39; is at the same line, propose to fix-it.<br>&gt; Otherwise, reject it as missing member name.<br>&gt; This affect following expressions and types in the grammer:<br>&gt; <br>&gt; expressions:<br>&gt;   self-method-expression<br>&gt;   self-initializer-expression <br>&gt;   superclass-method-expression<br>&gt;   superclass-initializer-expression<br>&gt;   implicit-member-expression<br>&gt;   initializer-expression<br>&gt;   explicit-member-expression<br>&gt;   postfix-self-expression<br>&gt;   explicit-member-expression<br>&gt;   postfix-self-expression<br>&gt; types:<br>&gt;   type-identifier<br>&gt;   metatype-type<br>&gt; <br>&gt; Of course this is a source breaking change, though.<br>&gt; Any thought?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161101/04fca6c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea125c5cd93ba84769387c17c973e2b3?s=50"></div><header><strong>[Pitch] Limiting member expression with right-bound period</strong> from <string>rintaro ishizaki</string> &lt;fs.output at gmail.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>2016-11-02 13:14 GMT+09:00 Benjamin Spratling via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt;<br>&gt; CGRect(origin:.zero, size:..<br>&gt;<br>&gt; is pretty nice.  Why do you want to get rid of it?<br>&gt;<br></p><p>No, I&#39;m proposing to reject CGRect(origin:.  zero, size:..)<br></p><p> &#39;.&#39; whitespace identifier<br></p><p>Reject whitespace in this.<br></p><p> &#39;.&#39; identifier<br></p><p>is OK.<br></p><p><br></p><p>&gt;<br>&gt;<br>&gt; return values<br>&gt; .flatMap {<br>&gt;<br></p><p>is OK. but<br></p><p>  return valus<br>        .<br>        flatMap {<br></p><p>should be rejected.<br></p><p><br></p><p>&gt; //code<br>&gt; }<br>&gt;<br>.filter {<br>&gt; //code<br>&gt; }<br>&gt; .sorted { /* code */   }<br>&gt; .first<br>&gt;<br>&gt; is also pretty clean, considering.<br>&gt;<br>&gt;<br>&gt; On Nov 1, 2016, at 11:06 PM, rintaro ishizaki via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; The compiler currently accepts these expressions:<br>&gt;<br>&gt; x = expr . member<br>&gt; x = expr .<br>&gt;          member<br>&gt;<br>&gt; x = expr<br>&gt;     .<br>&gt;<br>&gt;     member<br>&gt;<br>&gt; x = .<br>&gt;<br>&gt;     implicitMember<br>&gt;<br>&gt;<br>&gt; I propose to reject them because this could cause some unnecessary<br>&gt; confusion.<br>&gt; (especially after SE-0071<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md&gt;<br>&gt; )<br>&gt; For instance:<br>&gt;<br>&gt; _ = foo(.<br>&gt; func bar(x: Int) { ... }<br>&gt;<br>&gt;<br>&gt; The current compiler parses this as:<br>&gt;<br>&gt; // call foo(_:_:)<br>&gt; _ = foo(.func // implicit-member-expression<br>&gt;         // missing &#39;,&#39;<br>&gt;         // call bar(x:_:) with argument &#39;Int&#39; and trailing closure<br>&gt;         bar(x: Int) { ... }<br>&gt; // missing closing &#39;)&#39;<br>&gt;<br>&gt;<br>&gt; Here&#39;s the summary of *current* behavior:<br>&gt;<br>&gt; // accept<br>&gt; expr.member<br>&gt;<br>&gt; // accept<br>&gt; expr .member<br>&gt;<br>&gt; // accept<br>&gt; expr<br>&gt;   .member<br>&gt;<br>&gt; // reject with fix-it to remove white spaces<br>&gt; expr.  member<br>&gt;<br>&gt; // two distinct statements<br>&gt; expr. // reject as missing member name<br>&gt;   member<br>&gt;<br>&gt; // accept<br>&gt; expr  .  member<br>&gt;<br>&gt; // accept<br>&gt; expr .<br>&gt;   member<br>&gt;<br>&gt;<br>&gt; I propose to change the last 2 examples:<br>&gt;<br>&gt; // reject with fix-it to remove white spaces<br>&gt; some  .  member<br>&gt;<br>&gt; // two distinct statements<br>&gt; some . // reject as missing member name<br>&gt;   member<br>&gt;<br>&gt;<br>&gt; I think, this is consistent behavior with &#39;.&#39; at postfix position.<br>&gt;<br>&gt; Specifically:<br>&gt;<br>&gt;    - If &#39;.&#39; is at *prefix-operator* or *unspaced-binary-operator*<br>&gt;    position, accept.<br>&gt;    - If the next token after &#39;.&#39; is at the same line, propose to fix-it.<br>&gt;    - Otherwise, reject it as missing member name.<br>&gt;<br>&gt; This affect following expressions and types in the grammer:<br>&gt;<br>&gt; expressions:<br>&gt;   self-method-expression<br>&gt;   self-initializer-expression<br>&gt;   superclass-method-expression<br>&gt;   superclass-initializer-expression<br>&gt;   implicit-member-expression<br>&gt;   initializer-expression<br>&gt;   explicit-member-expression<br>&gt;   postfix-self-expression<br>&gt;   explicit-member-expression<br>&gt;   postfix-self-expression<br>&gt; types:<br>&gt;   type-identifier<br>&gt;   metatype-type<br>&gt;<br>&gt; Of course this is a source breaking change, though.<br>&gt; Any thought?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161102/e98742f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c198ffcf0853e6011f58fdcdd32a111?s=50"></div><header><strong>[Pitch] Limiting member expression with right-bound period</strong> from <string>Benjamin Spratling</string> &lt;bspratling at mac.com&gt;<p>November  1, 2016 at 11:00:00pm</p></header><div class="content"><p>I see what you’re saying now.  Thanks.<br>-Ben<br></p><p>&gt; On Nov 1, 2016, at 11:28 PM, rintaro ishizaki &lt;fs.output at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; 2016-11-02 13:14 GMT+09:00 Benjamin Spratling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt; CGRect(origin:.zero, size:..<br>&gt; <br>&gt; is pretty nice.  Why do you want to get rid of it?<br>&gt; <br>&gt; No, I&#39;m proposing to reject CGRect(origin:.  zero, size:..)<br>&gt; <br>&gt;  &#39;.&#39; whitespace identifier<br>&gt; <br>&gt; Reject whitespace in this.<br>&gt; <br>&gt;  &#39;.&#39; identifier<br>&gt; <br>&gt; is OK.<br>&gt; <br>&gt;  <br>&gt; <br>&gt; <br>&gt; return values<br>&gt; 	.flatMap {<br>&gt; <br>&gt; is OK. but <br>&gt; <br>&gt;   return valus<br>&gt;         .<br>&gt;         flatMap {<br>&gt; <br>&gt; should be rejected.<br>&gt;  <br>&gt;  <br>&gt; 		//code<br>&gt; 	} <br>&gt; 	.filter {<br>&gt; 		//code<br>&gt; 	}<br>&gt; 	.sorted { /* code */ 	 }<br>&gt; 	.first<br>&gt; <br>&gt; is also pretty clean, considering.<br>&gt; <br>&gt; <br>&gt;&gt; On Nov 1, 2016, at 11:06 PM, rintaro ishizaki via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; The compiler currently accepts these expressions:<br>&gt;&gt; <br>&gt;&gt; x = expr . member<br>&gt;&gt; x = expr .<br>&gt;&gt;          member<br>&gt;&gt; x = expr<br>&gt;&gt;     .<br>&gt;&gt;     member<br>&gt;&gt; x = .<br>&gt;&gt;     implicitMember<br>&gt;&gt; <br>&gt;&gt; I propose to reject them because this could cause some unnecessary confusion.<br>&gt;&gt; (especially after SE-0071 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0071-member-keywords.md&gt;)<br>&gt;&gt; For instance:<br>&gt;&gt; <br>&gt;&gt; _ = foo(.<br>&gt;&gt; func bar(x: Int) { ... }<br>&gt;&gt; <br>&gt;&gt; The current compiler parses this as:<br>&gt;&gt; <br>&gt;&gt; // call foo(_:_:)<br>&gt;&gt; _ = foo(.func // implicit-member-expression<br>&gt;&gt;         // missing &#39;,&#39;<br>&gt;&gt;         // call bar(x:_:) with argument &#39;Int&#39; and trailing closure<br>&gt;&gt;         bar(x: Int) { ... }<br>&gt;&gt; // missing closing &#39;)&#39;<br>&gt;&gt; <br>&gt;&gt; Here&#39;s the summary of current behavior:<br>&gt;&gt; <br>&gt;&gt; // accept<br>&gt;&gt; expr.member<br>&gt;&gt; <br>&gt;&gt; // accept<br>&gt;&gt; expr .member<br>&gt;&gt; <br>&gt;&gt; // accept<br>&gt;&gt; expr<br>&gt;&gt;   .member<br>&gt;&gt; <br>&gt;&gt; // reject with fix-it to remove white spaces<br>&gt;&gt; expr.  member<br>&gt;&gt; <br>&gt;&gt; // two distinct statements<br>&gt;&gt; expr. // reject as missing member name<br>&gt;&gt;   member<br>&gt;&gt; <br>&gt;&gt; // accept<br>&gt;&gt; expr  .  member<br>&gt;&gt; <br>&gt;&gt; // accept<br>&gt;&gt; expr .<br>&gt;&gt;   member<br>&gt;&gt; <br>&gt;&gt; I propose to change the last 2 examples:<br>&gt;&gt; <br>&gt;&gt; // reject with fix-it to remove white spaces<br>&gt;&gt; some  .  member<br>&gt;&gt; <br>&gt;&gt; // two distinct statements <br>&gt;&gt; some . // reject as missing member name<br>&gt;&gt;   member<br>&gt;&gt; <br>&gt;&gt; I think, this is consistent behavior with &#39;.&#39; at postfix position.<br>&gt;&gt; <br>&gt;&gt; Specifically:<br>&gt;&gt; If &#39;.&#39; is at prefix-operator or unspaced-binary-operator position, accept.<br>&gt;&gt; If the next token after &#39;.&#39; is at the same line, propose to fix-it.<br>&gt;&gt; Otherwise, reject it as missing member name.<br>&gt;&gt; This affect following expressions and types in the grammer:<br>&gt;&gt; <br>&gt;&gt; expressions:<br>&gt;&gt;   self-method-expression<br>&gt;&gt;   self-initializer-expression <br>&gt;&gt;   superclass-method-expression<br>&gt;&gt;   superclass-initializer-expression<br>&gt;&gt;   implicit-member-expression<br>&gt;&gt;   initializer-expression<br>&gt;&gt;   explicit-member-expression<br>&gt;&gt;   postfix-self-expression<br>&gt;&gt;   explicit-member-expression<br>&gt;&gt;   postfix-self-expression<br>&gt;&gt; types:<br>&gt;&gt;   type-identifier<br>&gt;&gt;   metatype-type<br>&gt;&gt; <br>&gt;&gt; Of course this is a source breaking change, though.<br>&gt;&gt; Any thought?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161101/8b302996/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
