<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Still Missing: Fixed Decimal Numerical Type.</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 30, 2016 at 03:00:00pm</p></header><div class="content"><p>There is still no fixed decimal numerical type available in Swift!<br></p><p>It should be  implemented *as soon as possible* <br>because the fixed decimal type is really needed <br>for applications working with financial and statistical data!<br></p><p>E.g. <br>var depositPromille: Decimal(10,3) = -1234.56<br>typealias  Money = Decimal(20,2) <br></p><p>Important: Implementation should be on a low level<br>and must be very, very efficient!<br>This is because usually in financial applications <br>very large amounts of data (e.g. bank accounts) are processed. <br></p><p>I’d suggest that Swift could deploy already existing<br>Fixed Decimal library functions available. <br>In fact, many do exist, for example here:<br>http://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01152.html <br></p><p>Of course, the fixed decimal type is also available in most relational databases,<br>currently there is no 1:1 way to get this type of data   DB &lt;—&gt; Swift,<br>and to process it easily in Swift. One now has to convert it e.g.<br>to large integers, thereby also somehow remembering the decimal fraction.<br>Yes, one could write a class/struct for it, but one also has<br>to implement all the arithmetic involved, with also needs <br>rounding, truncation, etc. It would also be too slow.<br></p><p>For those still considering using floating point types<br>for this purpose e.g. Double: Forget it, because <br>floating point types don’t have the required exact precision.<br>E.g. € 234,565,098.01   // the one cent at the end is important!<br></p><p>  <br>For some idea  on how this could be implemented in the Swift language<br>please read a PL/1 manual, like this one: <br></p><p>http://www.ibm.com/support/knowledgecenter/#!/SSY2V3_4.3.0/com.ibm.entpli.doc_4.3/lr/preface_plugin.htm &lt;http://www.ibm.com/support/knowledgecenter/#!/SSY2V3_4.3.0/com.ibm.entpli.doc_4.3/lr/preface_plugin.htm&gt;<br></p><p>especially under sub-topic “Data elements” <br></p><p><br></p><p>Kind Regards<br>TedvG<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/d2e41428/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Still Missing: Fixed Decimal Numerical Type.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; var depositPromille: Decimal(10,3) = -1234.56<br>&gt; typealias  Money = Decimal(20,2) <br></p><p>There is no mechanism to parameterize types like this. (Specifically, you can only parameterize a generic type with types, not integers or other values.) That makes this a fairly large effort—certainly not impossible, but more than just writing some code and putting it in the standard library. &quot;As soon as possible&quot; will still be quite a ways away, and may not even come in this Swift version.<br></p><p>As a stopgap, use NSDecimal (which is not fixed, but does provide decimal arithmetic) or write your own Money struct:<br></p><p>	struct Money {<br>		private var cents: Int<br>		<br>		init(_ value: Int) {<br>			cents = value * 100<br>		}<br>		<br>		init(cents: Int) {<br>			self.cents = cents<br>		}<br>		<br>		init(approximating value: Double) {<br>			cents = Int(value * 100)<br>		}<br>	}<br>	<br>	extension Int {<br>		init(approximating value: Money) {<br>			self = value.cents / 100<br>		}<br>		init(cents value: Money) {<br>			self = value.cents<br>		}<br>	}<br>	<br>	extension Double {<br>		init(approximating value: Money) {<br>			self = Double(value.cents) / 100<br>		}<br>	}<br>	<br>	extension Money: StringLiteralConvertible {<br>		// or FloatLiteralConvertible if you think you can get away with it<br>		...<br>	}<br>	<br>	extension Money: Hashable, Comparable, CustomStringConvertible {<br>		...<br>	}<br>	<br>	func + (lhs: Money, rhs: Money) -&gt; Money { return Money(cents: lhs.cents + rhs.cents) }<br>	func * (lhs: Money, rhs: Int) -&gt; Money { return Money(cents: lhs.cents * rhs) }<br>	// etc.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Still Missing: Fixed Decimal Numerical Type.</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>March 30, 2016 at 07:00:00pm</p></header><div class="content"><p>+CC Steve<br></p><p>&gt; On Mar 30, 2016, at 6:09 AM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; There is still no fixed decimal numerical type available in Swift!<br>&gt; <br>&gt; It should be  implemented *as soon as possible* <br>&gt; because the fixed decimal type is really needed <br>&gt; for applications working with financial and statistical data!<br>&gt; <br>&gt; E.g. <br>&gt; var depositPromille: Decimal(10,3) = -1234.56<br>&gt; typealias  Money = Decimal(20,2) <br>&gt; <br>&gt; Important: Implementation should be on a low level<br>&gt; and must be very, very efficient!<br>&gt; This is because usually in financial applications <br>&gt; very large amounts of data (e.g. bank accounts) are processed. <br>&gt; <br>&gt; I’d suggest that Swift could deploy already existing<br>&gt; Fixed Decimal library functions available. <br>&gt; In fact, many do exist, for example here:<br>&gt; http://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01152.html &lt;http://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01152.html&gt; <br>&gt; <br>&gt; Of course, the fixed decimal type is also available in most relational databases,<br>&gt; currently there is no 1:1 way to get this type of data   DB &lt;—&gt; Swift,<br>&gt; and to process it easily in Swift. One now has to convert it e.g.<br>&gt; to large integers, thereby also somehow remembering the decimal fraction.<br>&gt; Yes, one could write a class/struct for it, but one also has<br>&gt; to implement all the arithmetic involved, with also needs <br>&gt; rounding, truncation, etc. It would also be too slow.<br>&gt; <br>&gt; For those still considering using floating point types<br>&gt; for this purpose e.g. Double: Forget it, because <br>&gt; floating point types don’t have the required exact precision.<br>&gt; E.g. € 234,565,098.01   // the one cent at the end is important!<br>&gt; <br>&gt;   <br>&gt; For some idea  on how this could be implemented in the Swift language<br>&gt; please read a PL/1 manual, like this one: <br>&gt; <br>&gt; http://www.ibm.com/support/knowledgecenter/#!/SSY2V3_4.3.0/com.ibm.entpli.doc_4.3/lr/preface_plugin.htm &lt;http://www.ibm.com/support/knowledgecenter/#!/SSY2V3_4.3.0/com.ibm.entpli.doc_4.3/lr/preface_plugin.htm&gt;<br>&gt; <br>&gt; especially under sub-topic “Data elements” <br>&gt; <br>&gt; <br>&gt; <br>&gt; Kind Regards<br>&gt; TedvG<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/b03ba251/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
