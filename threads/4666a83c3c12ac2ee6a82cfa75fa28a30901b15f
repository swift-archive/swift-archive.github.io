<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0091: Improving operator requirements in protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 13, 2016 at 08:00:00pm</p></header><div class="content"><p>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md<br></p><p>The second review of &quot;SE-0091: Improving operator requirements in protocols&quot; ran from July 7...12, 2016. The proposal has been *accepted with revision*:<br></p><p>The second iteration of this proposal has been very well received by both the community and core team.  The core team requests one minor modification: in an effort to reduce the scope of the proposal, it should specifically require that operator declarations in classes be written as static (or equivalently, as “final class”).  In the future, support for operators may be extended to support dynamic dispatch, and the core team wants to keep the design space open.  The core team also observed that the impact on the standard library is not captured in this proposal, but that can be incorporated later (as an amendment to this proposal) since it should have little user impact.<br></p><p>Thank you to Tony Allevato and Doug Gregor for driving this discussion forward!  I filed SR-2073 to track implementation work on this.<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Accepted] SE-0091: Improving operator requirements in protocols</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 14, 2016 at 03:00:00am</p></header><div class="content"><p>Thanks Chris! I&#39;m happy that the proposal was well-received, and thanks to<br>Doug for the great improvements for revision 2.<br></p><p>Related, does the acceptance of this proposal imply the removal of the<br>named methods from FloatingPoint and Arithmetic in favor of static<br>operators, or do we need a separate proposal for that?<br></p><p>I&#39;ll work on a PR to the proposal that covers the changes regarding<br>classes, and to list the protocols affected by this (FP and Arithmetic<br>noted above, as well as Equatable and others).<br></p><p>On Wed, Jul 13, 2016 at 8:46 PM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal Link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md<br>&gt;<br>&gt; The second review of &quot;SE-0091: Improving operator requirements in<br>&gt; protocols&quot; ran from July 7...12, 2016. The proposal has been *accepted with<br>&gt; revision*:<br>&gt;<br>&gt; The second iteration of this proposal has been very well received by both<br>&gt; the community and core team.  The core team requests one minor<br>&gt; modification: in an effort to reduce the scope of the proposal, it should<br>&gt; specifically require that operator declarations in classes be written as<br>&gt; static (or equivalently, as “final class”).  In the future, support for<br>&gt; operators may be extended to support dynamic dispatch, and the core team<br>&gt; wants to keep the design space open.  The core team also observed that the<br>&gt; impact on the standard library is not captured in this proposal, but that<br>&gt; can be incorporated later (as an amendment to this proposal) since it<br>&gt; should have little user impact.<br>&gt;<br>&gt; Thank you to Tony Allevato and Doug Gregor for driving this discussion<br>&gt; forward!  I filed SR-2073 to track implementation work on this.<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160714/d158e5e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0091: Improving operator requirements in protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 13, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 13, 2016, at 8:57 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt; <br>&gt; Thanks Chris! I&#39;m happy that the proposal was well-received, and thanks to Doug for the great improvements for revision 2.<br>&gt; <br>&gt; Related, does the acceptance of this proposal imply the removal of the named methods from FloatingPoint and Arithmetic in favor of static operators, or do we need a separate proposal for that?<br></p><p>That should be either a separate proposal or a refinement to this one.  I suspect we’ll go with the later approach just because the changes are “obvious”, but I don’t speak for the whole core team with that opinion.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; I&#39;ll work on a PR to the proposal that covers the changes regarding classes, and to list the protocols affected by this (FP and Arithmetic noted above, as well as Equatable and others).<br>&gt; <br>&gt; On Wed, Jul 13, 2016 at 8:46 PM Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md&gt;<br>&gt; <br>&gt; The second review of &quot;SE-0091: Improving operator requirements in protocols&quot; ran from July 7...12, 2016. The proposal has been *accepted with revision*:<br>&gt; <br>&gt; The second iteration of this proposal has been very well received by both the community and core team.  The core team requests one minor modification: in an effort to reduce the scope of the proposal, it should specifically require that operator declarations in classes be written as static (or equivalently, as “final class”).  In the future, support for operators may be extended to support dynamic dispatch, and the core team wants to keep the design space open.  The core team also observed that the impact on the standard library is not captured in this proposal, but that can be incorporated later (as an amendment to this proposal) since it should have little user impact.<br>&gt; <br>&gt; Thank you to Tony Allevato and Doug Gregor for driving this discussion forward!  I filed SR-2073 to track implementation work on this.<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/8b636d9e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Accepted] SE-0091: Improving operator requirements in protocols</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>August 11, 2016 at 01:00:00pm</p></header><div class="content"><p>OK. I&#39;ll shut up since I wast your time.<br></p><p>&gt; 在 2016年7月14日，12:56，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 13, 2016, at 8:57 PM, Tony Allevato &lt;allevato at google.com &lt;mailto:allevato at google.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Chris! I&#39;m happy that the proposal was well-received, and thanks to Doug for the great improvements for revision 2.<br>&gt;&gt; <br>&gt;&gt; Related, does the acceptance of this proposal imply the removal of the named methods from FloatingPoint and Arithmetic in favor of static operators, or do we need a separate proposal for that?<br>&gt; <br>&gt; That should be either a separate proposal or a refinement to this one.  I suspect we’ll go with the later approach just because the changes are “obvious”, but I don’t speak for the whole core team with that opinion.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; I&#39;ll work on a PR to the proposal that covers the changes regarding classes, and to list the protocols affected by this (FP and Arithmetic noted above, as well as Equatable and others).<br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 13, 2016 at 8:46 PM Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0091-improving-operators-in-protocols.md&gt;<br>&gt;&gt; <br>&gt;&gt; The second review of &quot;SE-0091: Improving operator requirements in protocols&quot; ran from July 7...12, 2016. The proposal has been *accepted with revision*:<br>&gt;&gt; <br>&gt;&gt; The second iteration of this proposal has been very well received by both the community and core team.  The core team requests one minor modification: in an effort to reduce the scope of the proposal, it should specifically require that operator declarations in classes be written as static (or equivalently, as “final class”).  In the future, support for operators may be extended to support dynamic dispatch, and the core team wants to keep the design space open.  The core team also observed that the impact on the standard library is not captured in this proposal, but that can be incorporated later (as an amendment to this proposal) since it should have little user impact.<br>&gt;&gt; <br>&gt;&gt; Thank you to Tony Allevato and Doug Gregor for driving this discussion forward!  I filed SR-2073 to track implementation work on this.<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160811/ebbf40d8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
