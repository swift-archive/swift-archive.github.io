<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>stdlib tests under FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>January  8, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi.<br>I&#39;ve eventually tracked down all the problems that prevented swift<br>standard library and related tests to run correctly under FreeBSD but<br>one.When I run the testsuite as ./utils/build-script -R -t each single<br>test requiring SwiftGlibc fails because of missing headers.<br>e.g.<br></p><p>&lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>#include &quot;/usr/include/complex.h&quot;<br>         ^<br>/usr/include/complex.h:32:10: error: &#39;sys/cdefs.h&#39; file not found with<br>&lt;angled&gt; include; use &quot;quotes&quot; instead<br>#include &lt;sys/cdefs.h&gt;<br>         ^<br>&lt;module-includes&gt;:2:10: note: in file included from &lt;module-includes&gt;:2:<br>#include &quot;/usr/include/ctype.h&quot;<br>         ^<br></p><p>In a different thread Jordan suggested to pass -sdk / to see if that<br>fixed the problem, and indeed it did. Digging into the code I noticed<br>that the Driver checks for SDKROOT environment variable being set as<br>fallback if -sdk argument isn&#39;t passed on the cmdline.<br></p><p>If I set that environment variable and I run the tests standalone<br>(directly from cmdline), everything seems to be fine.<br></p><p>% /exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin/swiftc<br>-target x86_64-unknown-freebsd11.0-CURRENT -module-cache-path<br>&#39;/tmp/swift-testsuite-clang-module-cache3VHSof&#39;<br>/exps/swift/swift/test/1_stdlib/Builtins.swift -parse-stdlib<br>-Xfrontend -disable-access-control -Onone -o<br>/exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/test-freebsd-x86_64/1_stdlib/Output/Builtins.swift.tmp/Builtins<br>/exps/swift/swift/test/1_stdlib/Builtins.swift:113:3: warning: result<br>of call to &#39;unsafeUnwrap&#39; is unused<br>  unsafeUnwrap(empty)<br>  ^<br>davide at rabbit1:/exps/swift/swift % echo $SDKROOT<br>/<br></p><p>But, if I run the whole testsuite, it fails (with the error above).<br>I&#39;m no expert about swift build but it seems to me SDKROOT isn&#39;t<br>honored when the testsuite is invoked (maybe it doesn&#39;t share the<br>enviroment with the calling process?)<br></p><p>In any case, I&#39;m interested in getting this fixed as it seems to be<br>the only missing bit to get the whole testsuite to run (and setup a<br>buildbot to catch regressions).<br></p><p>I&#39;m not sure if it&#39;s better forcing the user to pass SDKROOT (and then<br>understanding why it&#39;s not honoured), or forcing -sdk / to be passed<br>to each test. I&#39;m not sure what Linux does (and wasn&#39;t entirely<br>obvious to me where to look).<br>Any suggestion on how to handle this case is greatly appreciated.<br></p><p>Thanks,<br></p><p>--<br>Davide<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>stdlib tests under FreeBSD</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  8, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi, Davide. On OS X, there are no headers in /, so it&#39;s pretty important that Swift doesn&#39;t try to use what&#39;s in /. (This was doubly true during the transition period where many people had stale headers in /.) It&#39;s also common to use swiftc to cross-compile on OS X, and we didn&#39;t want inscrutable errors about using OS X headers while compiling for iOS.<br></p><p>That said, on OS X either Xcode or the &quot;xcrun&quot; tool takes care of setting up SDKROOT appropriately. I&#39;d be fine with it defaulting to / on FreeBSD (and Linux), like C compilers do. If you&#39;re interested in implementing this, I would put it into the Driver &lt;https://github.com/apple/swift/blob/master/lib/Driver/Driver.cpp#L1080&gt;; we already do this for &quot;swift&quot; (the interpreter) on OS X.<br></p><p>The test suite deliberately blocks out all environment variables from your environment except for a select few, to minimize the chance that something is passing (or failing!) based solely on your configuration. For the test suite specifically, I would suggest adding &quot;-sdk&quot; to the %target-swift-frontend substitution the way we do on OS X.<br></p><p>Best,<br>Jordan<br></p><p>&gt; On Jan 8, 2016, at 15:12, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi.<br>&gt; I&#39;ve eventually tracked down all the problems that prevented swift<br>&gt; standard library and related tests to run correctly under FreeBSD but<br>&gt; one.When I run the testsuite as ./utils/build-script -R -t each single<br>&gt; test requiring SwiftGlibc fails because of missing headers.<br>&gt; e.g.<br>&gt; <br>&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt; #include &quot;/usr/include/complex.h&quot;<br>&gt;         ^<br>&gt; /usr/include/complex.h:32:10: error: &#39;sys/cdefs.h&#39; file not found with<br>&gt; &lt;angled&gt; include; use &quot;quotes&quot; instead<br>&gt; #include &lt;sys/cdefs.h&gt;<br>&gt;         ^<br>&gt; &lt;module-includes&gt;:2:10: note: in file included from &lt;module-includes&gt;:2:<br>&gt; #include &quot;/usr/include/ctype.h&quot;<br>&gt;         ^<br>&gt; <br>&gt; In a different thread Jordan suggested to pass -sdk / to see if that<br>&gt; fixed the problem, and indeed it did. Digging into the code I noticed<br>&gt; that the Driver checks for SDKROOT environment variable being set as<br>&gt; fallback if -sdk argument isn&#39;t passed on the cmdline.<br>&gt; <br>&gt; If I set that environment variable and I run the tests standalone<br>&gt; (directly from cmdline), everything seems to be fine.<br>&gt; <br>&gt; % /exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin/swiftc<br>&gt; -target x86_64-unknown-freebsd11.0-CURRENT -module-cache-path<br>&gt; &#39;/tmp/swift-testsuite-clang-module-cache3VHSof&#39;<br>&gt; /exps/swift/swift/test/1_stdlib/Builtins.swift -parse-stdlib<br>&gt; -Xfrontend -disable-access-control -Onone -o<br>&gt; /exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/test-freebsd-x86_64/1_stdlib/Output/Builtins.swift.tmp/Builtins<br>&gt; /exps/swift/swift/test/1_stdlib/Builtins.swift:113:3: warning: result<br>&gt; of call to &#39;unsafeUnwrap&#39; is unused<br>&gt;  unsafeUnwrap(empty)<br>&gt;  ^<br>&gt; davide at rabbit1:/exps/swift/swift % echo $SDKROOT<br>&gt; /<br>&gt; <br>&gt; But, if I run the whole testsuite, it fails (with the error above).<br>&gt; I&#39;m no expert about swift build but it seems to me SDKROOT isn&#39;t<br>&gt; honored when the testsuite is invoked (maybe it doesn&#39;t share the<br>&gt; enviroment with the calling process?)<br>&gt; <br>&gt; In any case, I&#39;m interested in getting this fixed as it seems to be<br>&gt; the only missing bit to get the whole testsuite to run (and setup a<br>&gt; buildbot to catch regressions).<br>&gt; <br>&gt; I&#39;m not sure if it&#39;s better forcing the user to pass SDKROOT (and then<br>&gt; understanding why it&#39;s not honoured), or forcing -sdk / to be passed<br>&gt; to each test. I&#39;m not sure what Linux does (and wasn&#39;t entirely<br>&gt; obvious to me where to look).<br>&gt; Any suggestion on how to handle this case is greatly appreciated.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; --<br>&gt; Davide<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160108/52f0f91d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>stdlib tests under FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>January  8, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Jan 8, 2016 at 4:30 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; Hi, Davide. On OS X, there are no headers in /, so it&#39;s pretty important<br>&gt; that Swift doesn&#39;t try to use what&#39;s in /. (This was doubly true during the<br>&gt; transition period where many people had stale headers in /.) It&#39;s also<br>&gt; common to use swiftc to cross-compile on OS X, and we didn&#39;t want<br>&gt; inscrutable errors about using OS X headers while compiling for iOS.<br>&gt;<br>&gt; That said, on OS X either Xcode or the &quot;xcrun&quot; tool takes care of setting up<br>&gt; SDKROOT appropriately. I&#39;d be fine with it defaulting to / on FreeBSD (and<br>&gt; Linux), like C compilers do. If you&#39;re interested in implementing this, I<br>&gt; would put it into the Driver; we already do this for &quot;swift&quot; (the<br>&gt; interpreter) on OS X.<br>&gt;<br>&gt; The test suite deliberately blocks out all environment variables from your<br>&gt; environment except for a select few, to minimize the chance that something<br>&gt; is passing (or failing!) based solely on your configuration. For the test<br>&gt; suite specifically, I would suggest adding &quot;-sdk&quot; to the<br>&gt; %target-swift-frontend substitution the way we do on OS X.<br>&gt;<br>&gt; Best,<br>&gt; Jordan<br>&gt;<br></p><p>I agree with your proposal. I&#39;ll implement the patches and submit pull<br>requests accordingly. Thank you for the time spent explaining me the<br>details/the rationale behind choices made.<br></p><p>Thanks,<br></p><p>--<br>Davide<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
