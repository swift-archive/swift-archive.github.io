<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7f819832e1487a75efea2149a0a952d6?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>BJ Homer</string> &lt;bjhomer at gmail.com&gt;<p>April 20, 2016 at 09:00:00am</p></header><div class="content"><p>How would this proposal affect curried functions? Would this:<br></p><p>   func foo(int: Int) -&gt; Int -&gt; String -&gt; String<br></p><p>become this?<br></p><p>   func foo(int: Int) -&gt; (((Int) -&gt; String) -&gt; String)<br></p><p>As I understand, that transformation is an accurate representation of the actual return type of “foo”, but it’s certainly going to raise some complaints among the functional Swift community if required.<br></p><p>-BJ<br></p><p><br></p><p><br>&gt; We currently accept function type syntax without parentheses, like:<br>&gt; <br>&gt; Int -&gt;Float<br>&gt; String -&gt;()<br>&gt; <br>&gt; etc. The original rationale aligned with the fact that we wanted to treat all functions as taking a single parameter (which was often of tuple type) and producing a tuple value (which was sometimes a tuple, in the case of void and multiple return values). However, we’ve long since moved on from that early design point: there are a number of things that you can only do in a parameter list now (varargs, default args, etc), implicit tuple splat has been removed, and the compiler has long ago stopped modeling function parameters this way. Beyond that, it eliminates one potential style war.<br>&gt; <br>&gt; Given all this, I think it makes sense to go for syntactic uniformity between parameter list and function types, and just require parenthesis on the argument list. The types above can be trivially written as:<br>&gt; <br>&gt; (Int) -&gt;Float<br>&gt; (String) -&gt;()<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
