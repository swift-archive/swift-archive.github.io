<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Improved value and move semantics</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  3, 2016 at 01:00:00pm</p></header><div class="content"><p>on Wed Aug 03 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Aug 2, 2016, at 4:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Aug 02 2016, Brent Royal-Gordon &lt;brent-AT-architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Aug 2, 2016, at 12:06 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If it says that, it&#39;s... not quite right.  There are things we could do<br>&gt;&gt;&gt;&gt; to make some value copies more optimal.  For example, any value type<br>&gt;&gt;&gt;&gt; containing multiple class references—or multiple other value types (such<br>&gt;&gt;&gt;&gt; as arrays or strings or dictionaries) that contain class references—will<br>&gt;&gt;&gt;&gt; cost more to copy than a single class reference does.  At the cost of<br>&gt;&gt;&gt;&gt; some allocation and indirection, we could reduce the copying cost of<br>&gt;&gt;&gt;&gt; such values.  It&#39;s an optimization we&#39;ve considered making, but haven&#39;t<br>&gt;&gt;&gt;&gt; prioritized.  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You can put a CoW wrapper around your value to do it manually.  I hacked<br>&gt;&gt;&gt;&gt; one up using ManagedBuffer for someone at WWDC but I don&#39;t seem to have<br>&gt;&gt;&gt;&gt; saved the code, sadly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Slightly off-topic, but one day I would like to see `indirect` turned<br>&gt;&gt;&gt; into a generalized COW feature:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * `indirect` can only be applied to a value type (or at least to a<br>&gt;&gt;&gt; type with `mutating` members, so reference types would have to gain<br>&gt;&gt;&gt; those).<br>&gt;&gt;&gt; * The value type is boxed in a reference type.<br>&gt;&gt;&gt; * Any use of a mutating member (and thus, use of the setter) is<br>&gt;&gt;&gt; guarded with `isKnownUniquelyReferenced` and a copy.<br>&gt;&gt;&gt; * `indirect` can be applied to an enum case with a payload (the<br>&gt;&gt;&gt; payload is boxed), a stored property (the value is boxed), or a type<br>&gt;&gt;&gt; (the entire type is boxed).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then you can just slap `indirect` on a struct whose copying is too<br>&gt;&gt;&gt; complicated and let Swift transparently COW it for you. (And it would<br>&gt;&gt;&gt; also permit recursive structs and other such niceties.)<br>&gt;&gt; <br>&gt;&gt; My vision for this feature is:<br>&gt;&gt; <br>&gt;&gt; a. We indirect automatically based on some heuristic, as an<br>&gt;&gt;   optimization.<br>&gt;&gt; <br>&gt;&gt; b. We allow you to indirect manually.<br>&gt;&gt; <br>&gt;&gt; c. We provide an attribute that suppresses automatic indirection to<br>&gt;&gt;   whatever depth possible given resilience boundaries.<br>&gt;<br>&gt; This all sounds great.  Does any of this fit into Swift 4 (either<br>&gt; phase 1 or phase 2)?  It seems like at least the automatic part would<br>&gt; have ABI impact.<br></p><p>Yes.  In principle, all of it has the potential to fit in Swift 4.  I&#39;m<br>not sure what will actually happen of course.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Improved value and move semantics</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>August  3, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Aug 3, 2016, at 3:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Aug 03 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Aug 2, 2016, at 4:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Aug 02 2016, Brent Royal-Gordon &lt;brent-AT-architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Aug 2, 2016, at 12:06 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If it says that, it&#39;s... not quite right.  There are things we could do<br>&gt;&gt;&gt;&gt;&gt; to make some value copies more optimal.  For example, any value type<br>&gt;&gt;&gt;&gt;&gt; containing multiple class references—or multiple other value types (such<br>&gt;&gt;&gt;&gt;&gt; as arrays or strings or dictionaries) that contain class references—will<br>&gt;&gt;&gt;&gt;&gt; cost more to copy than a single class reference does.  At the cost of<br>&gt;&gt;&gt;&gt;&gt; some allocation and indirection, we could reduce the copying cost of<br>&gt;&gt;&gt;&gt;&gt; such values.  It&#39;s an optimization we&#39;ve considered making, but haven&#39;t<br>&gt;&gt;&gt;&gt;&gt; prioritized.  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You can put a CoW wrapper around your value to do it manually.  I hacked<br>&gt;&gt;&gt;&gt;&gt; one up using ManagedBuffer for someone at WWDC but I don&#39;t seem to have<br>&gt;&gt;&gt;&gt;&gt; saved the code, sadly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Slightly off-topic, but one day I would like to see `indirect` turned<br>&gt;&gt;&gt;&gt; into a generalized COW feature:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * `indirect` can only be applied to a value type (or at least to a<br>&gt;&gt;&gt;&gt; type with `mutating` members, so reference types would have to gain<br>&gt;&gt;&gt;&gt; those).<br>&gt;&gt;&gt;&gt; * The value type is boxed in a reference type.<br>&gt;&gt;&gt;&gt; * Any use of a mutating member (and thus, use of the setter) is<br>&gt;&gt;&gt;&gt; guarded with `isKnownUniquelyReferenced` and a copy.<br>&gt;&gt;&gt;&gt; * `indirect` can be applied to an enum case with a payload (the<br>&gt;&gt;&gt;&gt; payload is boxed), a stored property (the value is boxed), or a type<br>&gt;&gt;&gt;&gt; (the entire type is boxed).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Then you can just slap `indirect` on a struct whose copying is too<br>&gt;&gt;&gt;&gt; complicated and let Swift transparently COW it for you. (And it would<br>&gt;&gt;&gt;&gt; also permit recursive structs and other such niceties.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My vision for this feature is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a. We indirect automatically based on some heuristic, as an<br>&gt;&gt;&gt;  optimization.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; b. We allow you to indirect manually.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; c. We provide an attribute that suppresses automatic indirection to<br>&gt;&gt;&gt;  whatever depth possible given resilience boundaries.<br>&gt;&gt; <br>&gt;&gt; This all sounds great.  Does any of this fit into Swift 4 (either<br>&gt;&gt; phase 1 or phase 2)?  It seems like at least the automatic part would<br>&gt;&gt; have ABI impact.<br>&gt; <br>&gt; Yes.  In principle, all of it has the potential to fit in Swift 4.  I&#39;m<br>&gt; not sure what will actually happen of course.<br></p><p>Of course. :)  <br></p><p>I asked mostly because I am wondering when it might be appropriate to start discussing these topics in more detail, and specifically if they fit into the first phase of Swift 4 whether we should start a thread now.<br></p><p>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
