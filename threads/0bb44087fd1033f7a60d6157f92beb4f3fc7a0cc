<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>May  9, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0086 &quot;Drop NS Prefix in Swift Foundation&quot; begins now and runs through May 16, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>-Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160509/0bb4a0cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 10, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1 I already gave my opinion in the original discussion but I’ll summarise it here. I understand the fears that this proposal may inhibit us in the future from making the modifications that Foundation needs to make it feel more Swifty. But I think that those fears are maybe exaggerated and that this proposal is the first step in the right direction.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>This could mean the difference between a good and a great adoption of corelibs-foundation, so I think it definitely is significant enough.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Definitely.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Not applicable to this proposal.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal in detail and followed the heated debate around the pitch :)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/474732af/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May  9, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I support the enum hoisting and case renaming, but not the dropping of the &quot;NS&quot; prefix quite this widely, for several reasons:<br></p><p>1. I agree with the critique that &quot;NSCoder&quot; and its ilk should retain their &quot;NS&quot; prefix because they represent something very specific to Foundation, not some general concept of a &quot;coder&quot;. (&quot;JSONSerialization&quot;, on the other hand, *is* something quite generic.)<br></p><p>2. I think the &quot;NS&quot; prefixes may be a valuable indicator of which types are values and which are references. (For this to be the case, we might need to drop some NS prefixes from certain enums.)<br></p><p>3. I am wholly unconvinced by the arguments in the &quot;Keep NS on future value types&quot; section.<br></p><p>Another proposal (I&#39;m behind, so I&#39;m not sure if it&#39;s been accepted) suggests that we add a value-typed `URL` to Foundation. Think about what would happen if that proposal were deferred to Swift 4: `NSURL` would be renamed to `URL` in Swift 3, and then Swift 4 would want to use `URL` for something else. At that point, we have several choices, none of them very nice:<br></p><p>* Rename uses of `URL` back to `NSURL`, only one version after making the opposite change. Note that this doesn&#39;t only mean migrating code, but also developers&#39; understanding of the frameworks—people will misread code for a while.<br></p><p>* Choose a different name for the new value-typed `URL`, like `URLValue` or `URI` or something. The preferred type then gets a suboptimal name.<br></p><p>* Deprecate the `URL` name, encourage use of `NSURL` instead, and delay the introduction of the new `URL` for a version or two while the deprecation works its magic. Now we&#39;ve slowed down the evolution of the language.<br></p><p>Any of these seems like a huge own goal next to the alternative of simply leaving all (or most) NS prefixes in place, at least until we feel the main work of adding value types to Foundation is complete.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Sure, Foundation needs some cleanup. Just not *this* cleanup.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes and no. I worry it&#39;ll slow the adoption of value types by Foundation, which would not be a good thing.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading, I suppose.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  9, 2016 at 07:00:00pm</p></header><div class="content"><p>I’m afraid I generally have to agree with this criticism. For types like NSURL which would make sense to become value types in the future, dropping the prefix does seem as if it would put constraints on future growth.<br></p><p>I do think the enum hoisting is great, though, and if it were in a separate proposal I’d definitely +1 it.<br></p><p>Charles<br></p><p>&gt; On May 9, 2016, at 6:57 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt; <br>&gt; I support the enum hoisting and case renaming, but not the dropping of the &quot;NS&quot; prefix quite this widely, for several reasons:<br>&gt; <br>&gt; 1. I agree with the critique that &quot;NSCoder&quot; and its ilk should retain their &quot;NS&quot; prefix because they represent something very specific to Foundation, not some general concept of a &quot;coder&quot;. (&quot;JSONSerialization&quot;, on the other hand, *is* something quite generic.)<br>&gt; <br>&gt; 2. I think the &quot;NS&quot; prefixes may be a valuable indicator of which types are values and which are references. (For this to be the case, we might need to drop some NS prefixes from certain enums.)<br>&gt; <br>&gt; 3. I am wholly unconvinced by the arguments in the &quot;Keep NS on future value types&quot; section.<br>&gt; <br>&gt; Another proposal (I&#39;m behind, so I&#39;m not sure if it&#39;s been accepted) suggests that we add a value-typed `URL` to Foundation. Think about what would happen if that proposal were deferred to Swift 4: `NSURL` would be renamed to `URL` in Swift 3, and then Swift 4 would want to use `URL` for something else. At that point, we have several choices, none of them very nice:<br>&gt; <br>&gt; * Rename uses of `URL` back to `NSURL`, only one version after making the opposite change. Note that this doesn&#39;t only mean migrating code, but also developers&#39; understanding of the frameworks—people will misread code for a while.<br>&gt; <br>&gt; * Choose a different name for the new value-typed `URL`, like `URLValue` or `URI` or something. The preferred type then gets a suboptimal name.<br>&gt; <br>&gt; * Deprecate the `URL` name, encourage use of `NSURL` instead, and delay the introduction of the new `URL` for a version or two while the deprecation works its magic. Now we&#39;ve slowed down the evolution of the language.<br>&gt; <br>&gt; Any of these seems like a huge own goal next to the alternative of simply leaving all (or most) NS prefixes in place, at least until we feel the main work of adding value types to Foundation is complete.<br>&gt; <br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Sure, Foundation needs some cleanup. Just not *this* cleanup.<br>&gt; <br>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes and no. I worry it&#39;ll slow the adoption of value types by Foundation, which would not be a good thing.<br>&gt; <br>&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; N/A.<br>&gt; <br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick reading, I suppose.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 12:00:00am</p></header><div class="content"><p>Unless I&#39;m mistaken, NSURL is not among the types being renamed in this<br>proposal?<br>On Mon, May 9, 2016 at 19:06 Charles Srstka via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m afraid I generally have to agree with this criticism. For types like<br>&gt; NSURL which would make sense to become value types in the future, dropping<br>&gt; the prefix does seem as if it would put constraints on future growth.<br>&gt;<br>&gt; I do think the enum hoisting is great, though, and if it were in a<br>&gt; separate proposal I’d definitely +1 it.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt; &gt; On May 9, 2016, at 6:57 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;      • What is your evaluation of the proposal?<br>&gt; &gt;<br>&gt; &gt; I support the enum hoisting and case renaming, but not the dropping of<br>&gt; the &quot;NS&quot; prefix quite this widely, for several reasons:<br>&gt; &gt;<br>&gt; &gt; 1. I agree with the critique that &quot;NSCoder&quot; and its ilk should retain<br>&gt; their &quot;NS&quot; prefix because they represent something very specific to<br>&gt; Foundation, not some general concept of a &quot;coder&quot;. (&quot;JSONSerialization&quot;, on<br>&gt; the other hand, *is* something quite generic.)<br>&gt; &gt;<br>&gt; &gt; 2. I think the &quot;NS&quot; prefixes may be a valuable indicator of which types<br>&gt; are values and which are references. (For this to be the case, we might<br>&gt; need to drop some NS prefixes from certain enums.)<br>&gt; &gt;<br>&gt; &gt; 3. I am wholly unconvinced by the arguments in the &quot;Keep NS on future<br>&gt; value types&quot; section.<br>&gt; &gt;<br>&gt; &gt; Another proposal (I&#39;m behind, so I&#39;m not sure if it&#39;s been accepted)<br>&gt; suggests that we add a value-typed `URL` to Foundation. Think about what<br>&gt; would happen if that proposal were deferred to Swift 4: `NSURL` would be<br>&gt; renamed to `URL` in Swift 3, and then Swift 4 would want to use `URL` for<br>&gt; something else. At that point, we have several choices, none of them very<br>&gt; nice:<br>&gt; &gt;<br>&gt; &gt; * Rename uses of `URL` back to `NSURL`, only one version after making<br>&gt; the opposite change. Note that this doesn&#39;t only mean migrating code, but<br>&gt; also developers&#39; understanding of the frameworks—people will misread code<br>&gt; for a while.<br>&gt; &gt;<br>&gt; &gt; * Choose a different name for the new value-typed `URL`, like `URLValue`<br>&gt; or `URI` or something. The preferred type then gets a suboptimal name.<br>&gt; &gt;<br>&gt; &gt; * Deprecate the `URL` name, encourage use of `NSURL` instead, and delay<br>&gt; the introduction of the new `URL` for a version or two while the<br>&gt; deprecation works its magic. Now we&#39;ve slowed down the evolution of the<br>&gt; language.<br>&gt; &gt;<br>&gt; &gt; Any of these seems like a huge own goal next to the alternative of<br>&gt; simply leaving all (or most) NS prefixes in place, at least until we feel<br>&gt; the main work of adding value types to Foundation is complete.<br>&gt; &gt;<br>&gt; &gt;&gt;      • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;<br>&gt; &gt; Sure, Foundation needs some cleanup. Just not *this* cleanup.<br>&gt; &gt;<br>&gt; &gt;&gt;      • Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;<br>&gt; &gt; Yes and no. I worry it&#39;ll slow the adoption of value types by<br>&gt; Foundation, which would not be a good thing.<br>&gt; &gt;<br>&gt; &gt;&gt;      • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;<br>&gt; &gt; N/A.<br>&gt; &gt;<br>&gt; &gt;&gt;      • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; Quick reading, I suppose.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/618f07f9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May  9, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Unless I&#39;m mistaken, NSURL is not among the types being renamed in this proposal?<br></p><p>It is not, because it&#39;s already receiving a value-type equivalent. But types like `NSAttributedString`, which the Foundation team eventually intends to provide value-type equivalents for, *are* in the proposal. I&#39;m merely illustrating the problem by using a type which we&#39;ve already decided will get a value-type equivalent.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 10, 2016 at 03:00:00am</p></header><div class="content"><p>Got it. In that case, count me in as +1 for most of the proposal but -1 on<br>AttributedString and its ilk. I agree with you and others that types which<br>are slated to receive the URL/NSURL treatment shouldn&#39;t go through an<br>interim renaming dance.<br></p><p>On Mon, May 9, 2016 at 20:53 Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>wrote:<br></p><p>&gt; &gt; Unless I&#39;m mistaken, NSURL is not among the types being renamed in this<br>&gt; proposal?<br>&gt;<br>&gt; It is not, because it&#39;s already receiving a value-type equivalent. But<br>&gt; types like `NSAttributedString`, which the Foundation team eventually<br>&gt; intends to provide value-type equivalents for, *are* in the proposal. I&#39;m<br>&gt; merely illustrating the problem by using a type which we&#39;ve already decided<br>&gt; will get a value-type equivalent.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/25887856/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>May 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; +1 to all except renaming classes that are planned in the future to become value types, and the NSCoding issue.<br>&gt; <br>&gt; I agree with Brent that I am unconvinced we should take off NS from those we have identified as future value types. Classes we highly suspect should become value types should retain their NS prefix at this time, as preparation to avoid the mess that would be to come from reverting, deprecating etc. Just because we don’t have enough time to get these value types sorted right away doesn’t mean we should shoot ourselves in the foot by changing things we’ve already identified as high potential for Value Type Transition. If we identify other types later on that should move to value semantics, these strategies would work, but I wonder why deliberately create a headache for ourselves?<br>&gt; <br>&gt; I am uncertain about the NSCoding proposition as it is not a generic concept that is platform agnostic. It is a baked in, Objective-C, Apple-only paradigm that seems to me should retain it’s NS prefix.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; It’s important to get Swift Foundation and Objective-C Foundation heading in the right direction, and to provide for more Swiftification in Foundation in the future, so I think this is significant enough.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes and no. I agree with Brent that dropping NS on high-probability value types is not a wise move, and will slow down value type adoption. It seems easier to deprecate the name with NS at a later date if it is determined it must stay a reference type, than it would be trying to go the other way when we decide to move something to value type.<br>&gt; <br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; N/A<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; Read through the proposal, and have followed the preceding discussions regarding value type adoption and the name transition.<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/9773acdf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  9, 2016 at 09:00:00pm</p></header><div class="content"><p>On May 9, 2016, at 7:38 PM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am uncertain about the NSCoding proposition as it is not a generic concept that is platform agnostic. It is a baked in, Objective-C, Apple-only paradigm that seems to me should retain it’s NS prefix.<br></p><p>Plus, NSCoding has a *lot* of legacy cruft associated with it that we would do well to jettison with a brand-new coding protocol, IMO.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/d16805ad/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 10, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/6b0db784/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4db4fede2f4e473341b873406b68e4e1?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Geordie Jay</string> &lt;geojay at gmail.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Am 10.05.2016 um 12:26 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br></p><p>I strongly agree with keeping NS prefix on API that has not been ‘Swiftified&#39;. First step, achieve functional equivalence with Darwin APIs. Second step, systematically improve Foundation to the point where it feels like this fundamental part of the language is as easy to use and idiomatic as the standard library itself. At that point I’d be very much for dropping the prefixes.<br></p><p>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br></p><p>Completely agree<br></p><p>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br>&gt; <br></p><p>Yes, we should be clear this is an older API, also to add motivation on introducing a more modern one (even if at first it just wraps Foundation with a more Swift-like API)<br></p><p>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f0fd832c/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 195 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/f0fd832c/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>May 16, 2016 at 09:00:00pm</p></header><div class="content"><p>This sounds like a good idea.<br></p><p>-Matt<br></p><p>&gt; On May 10, 2016, at 03:43, Geordie Jay via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Am 10.05.2016 um 12:26 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br>&gt; <br>&gt; I strongly agree with keeping NS prefix on API that has not been ‘Swiftified&#39;. First step, achieve functional equivalence with Darwin APIs. Second step, systematically improve Foundation to the point where it feels like this fundamental part of the language is as easy to use and idiomatic as the standard library itself. At that point I’d be very much for dropping the prefixes.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br>&gt;&gt; <br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br>&gt; <br>&gt; Completely agree<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br>&gt;&gt; <br>&gt; <br>&gt; Yes, we should be clear this is an older API, also to add motivation on introducing a more modern one (even if at first it just wraps Foundation with a more Swift-like API)<br>&gt; <br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/77acb5ea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>May 17, 2016 at 06:00:00am</p></header><div class="content"><p>I meant to say that it sounds like a good idea to leave the ’NS’ prefix on types that were auto-translated, and remove it from those that have been rewritten by hand for swift.<br></p><p>-Matt<br></p><p>&gt; On May 16, 2016, at 21:24, Matt Whiteside &lt;mwhiteside.dev at gmail.com&gt; wrote:<br>&gt; <br>&gt; This sounds like a good idea.<br>&gt; <br>&gt; -Matt<br>&gt; <br>&gt;&gt; On May 10, 2016, at 03:43, Geordie Jay via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 10.05.2016 um 12:26 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br>&gt;&gt; <br>&gt;&gt; I strongly agree with keeping NS prefix on API that has not been ‘Swiftified&#39;. First step, achieve functional equivalence with Darwin APIs. Second step, systematically improve Foundation to the point where it feels like this fundamental part of the language is as easy to use and idiomatic as the standard library itself. At that point I’d be very much for dropping the prefixes.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br>&gt;&gt; <br>&gt;&gt; Completely agree<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Yes, we should be clear this is an older API, also to add motivation on introducing a more modern one (even if at first it just wraps Foundation with a more Swift-like API)<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/7ffc8c2a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 17, 2016 at 11:00:00am</p></header><div class="content"><p>I don’t think the API of types have to be bulletproof from the start, but it shouldn’t have core usage limitations based on Objective C. One example would be if I have to deal with NSNumber/NSString/NSArray/NSDictionary to fully use the API, such as NSAttributedString or NSError.<br></p><p>The issue is that Foundation is both the objective-c compatibility base and the cross-platform foundational library for Swift. These goals conflict. Without an idea of how the Swift flavor of Foundation will evolve in the future to deal with this conflict, it is hard to evaluate this other than saying “will be confusing why some Objective-C things have prefixes and others don’t” and “will cause conflicts with non-Apple foundational libraries”.<br></p><p>-DW<br></p><p><br>&gt; On May 17, 2016, at 7:41 AM, Matt Whiteside via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I meant to say that it sounds like a good idea to leave the ’NS’ prefix on types that were auto-translated, and remove it from those that have been rewritten by hand for swift.<br>&gt; <br>&gt; -Matt<br>&gt; <br>&gt;&gt; On May 16, 2016, at 21:24, Matt Whiteside &lt;mwhiteside.dev at gmail.com &lt;mailto:mwhiteside.dev at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This sounds like a good idea.<br>&gt;&gt; <br>&gt;&gt; -Matt<br>&gt;&gt; <br>&gt;&gt;&gt; On May 10, 2016, at 03:43, Geordie Jay via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 10.05.2016 um 12:26 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I strongly agree with keeping NS prefix on API that has not been ‘Swiftified&#39;. First step, achieve functional equivalence with Darwin APIs. Second step, systematically improve Foundation to the point where it feels like this fundamental part of the language is as easy to use and idiomatic as the standard library itself. At that point I’d be very much for dropping the prefixes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Completely agree<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, we should be clear this is an older API, also to add motivation on introducing a more modern one (even if at first it just wraps Foundation with a more Swift-like API)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/8c38b606/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4db4fede2f4e473341b873406b68e4e1?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Geordie Jay</string> &lt;geojay at gmail.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Am 10.05.2016 um 12:26 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br></p><p>I strongly agree with keeping NS prefix on API that has not been ‘Swiftified&#39;. First step, achieve functional equivalence with Darwin APIs. Second step, systematically improve Foundation to the point where it feels like this fundamental part of the language is as easy to use and idiomatic as the standard library itself. At that point I’d be very much for dropping the prefixes.<br></p><p>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br></p><p>Completely agree<br></p><p>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br>&gt; <br></p><p>Yes, we should be clear this is an older API, also to add motivation on introducing a more modern one (even if at first it just wraps Foundation with a more Swift-like API)<br></p><p>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/3be341a1/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 195 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/3be341a1/attachment.sig&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4db4fede2f4e473341b873406b68e4e1?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Geordie Jay</string> &lt;geojay at gmail.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Am 10.05.2016 um 12:26 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; Personally I’m a -1; I’d prefer to see the NS prefix remain on types that have been translated automatically with minimal human interaction, in favour of dropping the prefix for types that have received more attention to establish a Swift-ier style, but migrating these into a new module instead.<br></p><p>I strongly agree with keeping NS prefix on API that has not been ‘Swiftified&#39;. First step, achieve functional equivalence with Darwin APIs. Second step, systematically improve Foundation to the point where it feels like this fundamental part of the language is as easy to use and idiomatic as the standard library itself. At that point I’d be very much for dropping the prefixes.<br></p><p>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Since it’s a basic API that most developers will be interacting with then yes, even though the change is fairly minor, it definitely bears consideration.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes and no. Prefixing types with NS definitely isn’t very Swift-y, but at the same time this is why I’d like to keep the current convention for existing (unchanged) types, as it makes it much clearer that these are things that weren’t originally designed for Swift and thus won’t behave quite as you might expect.<br></p><p>Completely agree<br></p><p>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; I’ve worked in languages where libraries had different styles of name-spacing, and while it was annoying to have a mixture, I think it was fine, especially for libraries that are older, as the prefix name-spacing style makes it absolutely clear that this is an older API.<br>&gt; <br></p><p>Yes, we should be clear this is an older API, also to add motivation on introducing a more modern one (even if at first it just wraps Foundation with a more Swift-like API)<br></p><p>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick read of the proposal, kept an eye on the discussion leading up to it though.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/d769460d/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 195 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/d769460d/attachment.sig&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>I very much support hoisting types, updating enumerations, and updating the NSStringEncoding constants.  <br></p><p>I do not support dropping NS on type level names.  Dropping the 2 character prefix is a very small benefit and it comes with very real costs.  I believe unprefixed top level names should not be taken without a manual review of the API design.  <br></p><p>Types which will be value types in the future are obvious candidates for redesign but are not the only types whose API would benefit by human consideration and Swiftification.  Keeping the NS prefix until this happens recognizes that the Swiftification of Foundation is a work in progress.  It will give us more options in the future that don’t involve breaking changes.  <br></p><p>It will also serve as a signal to developers about what kinds of APIs should be considered idiomatic in Swift.  If we want developers to learn how to distinguish idiomatic Swift, our API guidelines, etc from Objective-C mappings we need to provide some cues.  I believe name prefixes are a good way to do this.<br></p><p>I hope that we will move forward with most of this proposal while keeping the NS prefix for top-level names.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes, but we need to do this carefully, deliberately and in a way that we won’t regret in the future.  I believe several parts of the proposal are warranted, but the namesake “drop NS prefix” portion should deferred until each type receives manual consideration and possibly redesign.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Mostly yes.  However, taking top-level unprefixed names without a process of Swiftification does not.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I think this question is N/A for this proposal.<br></p><p>I hesitate in saying this, but I think the best comparison to consider is the origin of Foundation and Cocoa themselves.  They are fantastic Objective-C APIs.  If they had originated by wrapping pre-existing APIs written in a different language with different idioms and then incrementally enhanced I wonder if they may have been less fantastic.  <br></p><p>I believe reserving unprefixed top-level names for manually designed, idiomatic types is the path for Swift that avoids this risk altogether and gives us the best chance possible at an incredible, idiomatic set of libraries.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I participated in the discussion, read the proposal, and carefully considered the consequences of each piece.<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/c102da50/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 12, 2016 at 06:00:00pm</p></header><div class="content"><p>I second Matthew’s points. I believe dropping NS- is more harmful than helpful, especially for the future. People have been using Foundation with the prefix for decades, so I don’t think there’s a longing need that will make using it in Swift unbearable. It has an older Objective-C flavoured approach, relying heavily on classes, run loops, key value observing (e.g. NSOperation), exceptions, and notifications. I think its philosophy will stand out more than its NS- prefix. Even if many classes become value types, it feels more like a port.<br></p><p>I think for something to be so central as the recommended ‘foundational’ library for Swift, it carries too much baggage, which is unfortunate in the light of Swift’s radical eagerness to reject unnecessary legacy.<br></p><p>Many Foundation classes expect NSObject subclasses for delegates and for key value coding &amp; observing. Key value observing requires on-the-fly subclassing at run time, something which goes strongly against Swift’s philosophy AFAIK.<br></p><p>Foundation is in some cases a wrapper around underlying technologies such as GCD, because years ago an Objective-C wrapper was seen as a more friendly, more safe, and a more familiar object-oriented approach. With Swift we have the power to make those technologies themselves more friendly, safe, and familiar with modernisations such as the current proposal for libdispatch. Extensions allow us to add properties and methods directly to the native types.<br></p><p>NSURL has methods such as .getResourceValue(_:forKey:) that involve mutable state.<br></p><p>I think removing the prefixes will take valuable real estate for types such as ‘URL’ and ‘Data’, which instead can have new replacements made, focused on the use-cases of only Swift. I think DispatchData could be a fine choice for ‘Data’, and has the strong benefit that it bridges to NSData on Darwin.<br></p><p>I fully support the idea of improving Foundation, and of there being a Linux-compatible version. I don’t support it being as first class as the standard library or libdispatch, and don’t support removing the NS prefixes.<br></p><p>Patrick<br></p><p><br>&gt; On 11 May 2016, at 1:36 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; I very much support hoisting types, updating enumerations, and updating the NSStringEncoding constants.  <br>&gt; <br>&gt; I do not support dropping NS on type level names.  Dropping the 2 character prefix is a very small benefit and it comes with very real costs.  I believe unprefixed top level names should not be taken without a manual review of the API design.  <br>&gt; <br>&gt; Types which will be value types in the future are obvious candidates for redesign but are not the only types whose API would benefit by human consideration and Swiftification.  Keeping the NS prefix until this happens recognizes that the Swiftification of Foundation is a work in progress.  It will give us more options in the future that don’t involve breaking changes.  <br>&gt; <br>&gt; It will also serve as a signal to developers about what kinds of APIs should be considered idiomatic in Swift.  If we want developers to learn how to distinguish idiomatic Swift, our API guidelines, etc from Objective-C mappings we need to provide some cues.  I believe name prefixes are a good way to do this.<br>&gt; <br>&gt; I hope that we will move forward with most of this proposal while keeping the NS prefix for top-level names.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Yes, but we need to do this carefully, deliberately and in a way that we won’t regret in the future.  I believe several parts of the proposal are warranted, but the namesake “drop NS prefix” portion should deferred until each type receives manual consideration and possibly redesign.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Mostly yes.  However, taking top-level unprefixed names without a process of Swiftification does not.<br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; I think this question is N/A for this proposal.<br>&gt; <br>&gt; I hesitate in saying this, but I think the best comparison to consider is the origin of Foundation and Cocoa themselves.  They are fantastic Objective-C APIs.  If they had originated by wrapping pre-existing APIs written in a different language with different idioms and then incrementally enhanced I wonder if they may have been less fantastic.  <br>&gt; <br>&gt; I believe reserving unprefixed top-level names for manually designed, idiomatic types is the path for Swift that avoids this risk altogether and gives us the best chance possible at an incredible, idiomatic set of libraries.<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; I participated in the discussion, read the proposal, and carefully considered the consequences of each piece.<br>&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/30fe3e2b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 12, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 1:32 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I second Matthew’s points. I believe dropping NS- is more harmful than helpful, especially for the future. People have been using Foundation with the prefix for decades, so I don’t think there’s a longing need that will make using it in Swift unbearable. It has an older Objective-C flavoured approach, relying heavily on classes, run loops, key value observing (e.g. NSOperation), exceptions, and notifications. I think its philosophy will stand out more than its NS- prefix. Even if many classes become value types, it feels more like a port.<br>&gt; <br>&gt; I think for something to be so central as the recommended ‘foundational’ library for Swift, it carries too much baggage, which is unfortunate in the light of Swift’s radical eagerness to reject unnecessary legacy.<br>&gt; <br>&gt; Many Foundation classes expect NSObject subclasses for delegates and for key value coding &amp; observing. Key value observing requires on-the-fly subclassing at run time, something which goes strongly against Swift’s philosophy AFAIK.<br>&gt; <br>&gt; Foundation is in some cases a wrapper around underlying technologies such as GCD, because years ago an Objective-C wrapper was seen as a more friendly, more safe, and a more familiar object-oriented approach. With Swift we have the power to make those technologies themselves more friendly, safe, and familiar with modernisations such as the current proposal for libdispatch. Extensions allow us to add properties and methods directly to the native types.<br>&gt; <br>&gt; NSURL has methods such as .getResourceValue(_:forKey:) that involve mutable state.<br>&gt; <br>&gt; I think removing the prefixes will take valuable real estate for types such as ‘URL’ and ‘Data’, which instead can have new replacements made, focused on the use-cases of only Swift. I think DispatchData could be a fine choice for ‘Data’, and has the strong benefit that it bridges to NSData on Darwin.<br>&gt; <br></p><p>Perhaps you missed it, but SE-0069 adds corresponding value types for URL and Data, among others.<br></p><p>- Tony<br></p><p>&gt; I fully support the idea of improving Foundation, and of there being a Linux-compatible version. I don’t support it being as first class as the standard library or libdispatch, and don’t support removing the NS prefixes.<br>&gt; <br>&gt; Patrick<br>&gt; <br>&gt; <br>&gt;&gt; On 11 May 2016, at 1:36 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; I very much support hoisting types, updating enumerations, and updating the NSStringEncoding constants.  <br>&gt;&gt; <br>&gt;&gt; I do not support dropping NS on type level names.  Dropping the 2 character prefix is a very small benefit and it comes with very real costs.  I believe unprefixed top level names should not be taken without a manual review of the API design.  <br>&gt;&gt; <br>&gt;&gt; Types which will be value types in the future are obvious candidates for redesign but are not the only types whose API would benefit by human consideration and Swiftification.  Keeping the NS prefix until this happens recognizes that the Swiftification of Foundation is a work in progress.  It will give us more options in the future that don’t involve breaking changes.  <br>&gt;&gt; <br>&gt;&gt; It will also serve as a signal to developers about what kinds of APIs should be considered idiomatic in Swift.  If we want developers to learn how to distinguish idiomatic Swift, our API guidelines, etc from Objective-C mappings we need to provide some cues.  I believe name prefixes are a good way to do this.<br>&gt;&gt; <br>&gt;&gt; I hope that we will move forward with most of this proposal while keeping the NS prefix for top-level names.<br>&gt;&gt; <br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Yes, but we need to do this carefully, deliberately and in a way that we won’t regret in the future.  I believe several parts of the proposal are warranted, but the namesake “drop NS prefix” portion should deferred until each type receives manual consideration and possibly redesign.<br>&gt;&gt; <br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; Mostly yes.  However, taking top-level unprefixed names without a process of Swiftification does not.<br>&gt;&gt; <br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; I think this question is N/A for this proposal.<br>&gt;&gt; <br>&gt;&gt; I hesitate in saying this, but I think the best comparison to consider is the origin of Foundation and Cocoa themselves.  They are fantastic Objective-C APIs.  If they had originated by wrapping pre-existing APIs written in a different language with different idioms and then incrementally enhanced I wonder if they may have been less fantastic.  <br>&gt;&gt; <br>&gt;&gt; I believe reserving unprefixed top-level names for manually designed, idiomatic types is the path for Swift that avoids this risk altogether and gives us the best chance possible at an incredible, idiomatic set of libraries.<br>&gt;&gt; <br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; I participated in the discussion, read the proposal, and carefully considered the consequences of each piece.<br>&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Doug Gregor<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/071385a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 13, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Tony,<br></p><p>Thanks for the response! As Kevin said:<br></p><p>“And if done right, the swiftified types can operate without Foundation at all”<br></p><p>This is why I think DispatchData would be superior to NSData, as NSData brings along all the rest of Foundation, whereas the entire Dispatch library looks like a great fit for Swift.<br></p><p>In fact, won’t Foundation require Dispatch as a dependency? So there’s already a doubling there if it is.<br></p><p>I think Dispatch is much more native than Foundation, and would vote to have its Dispatch- prefixes removed rather than Foundation remove its NS- ones.<br></p><p>Patrick<br></p><p><br>&gt; On 13 May 2016, at 5:06 AM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 12, 2016, at 1:32 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I second Matthew’s points. I believe dropping NS- is more harmful than helpful, especially for the future. People have been using Foundation with the prefix for decades, so I don’t think there’s a longing need that will make using it in Swift unbearable. It has an older Objective-C flavoured approach, relying heavily on classes, run loops, key value observing (e.g. NSOperation), exceptions, and notifications. I think its philosophy will stand out more than its NS- prefix. Even if many classes become value types, it feels more like a port.<br>&gt;&gt; <br>&gt;&gt; I think for something to be so central as the recommended ‘foundational’ library for Swift, it carries too much baggage, which is unfortunate in the light of Swift’s radical eagerness to reject unnecessary legacy.<br>&gt;&gt; <br>&gt;&gt; Many Foundation classes expect NSObject subclasses for delegates and for key value coding &amp; observing. Key value observing requires on-the-fly subclassing at run time, something which goes strongly against Swift’s philosophy AFAIK.<br>&gt;&gt; <br>&gt;&gt; Foundation is in some cases a wrapper around underlying technologies such as GCD, because years ago an Objective-C wrapper was seen as a more friendly, more safe, and a more familiar object-oriented approach. With Swift we have the power to make those technologies themselves more friendly, safe, and familiar with modernisations such as the current proposal for libdispatch. Extensions allow us to add properties and methods directly to the native types.<br>&gt;&gt; <br>&gt;&gt; NSURL has methods such as .getResourceValue(_:forKey:) that involve mutable state.<br>&gt;&gt; <br>&gt;&gt; I think removing the prefixes will take valuable real estate for types such as ‘URL’ and ‘Data’, which instead can have new replacements made, focused on the use-cases of only Swift. I think DispatchData could be a fine choice for ‘Data’, and has the strong benefit that it bridges to NSData on Darwin.<br>&gt;&gt; <br>&gt; <br>&gt; Perhaps you missed it, but SE-0069 adds corresponding value types for URL and Data, among others.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; I fully support the idea of improving Foundation, and of there being a Linux-compatible version. I don’t support it being as first class as the standard library or libdispatch, and don’t support removing the NS prefixes.<br>&gt;&gt; <br>&gt;&gt; Patrick<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 11 May 2016, at 1:36 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; I very much support hoisting types, updating enumerations, and updating the NSStringEncoding constants.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do not support dropping NS on type level names.  Dropping the 2 character prefix is a very small benefit and it comes with very real costs.  I believe unprefixed top level names should not be taken without a manual review of the API design.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Types which will be value types in the future are obvious candidates for redesign but are not the only types whose API would benefit by human consideration and Swiftification.  Keeping the NS prefix until this happens recognizes that the Swiftification of Foundation is a work in progress.  It will give us more options in the future that don’t involve breaking changes.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It will also serve as a signal to developers about what kinds of APIs should be considered idiomatic in Swift.  If we want developers to learn how to distinguish idiomatic Swift, our API guidelines, etc from Objective-C mappings we need to provide some cues.  I believe name prefixes are a good way to do this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I hope that we will move forward with most of this proposal while keeping the NS prefix for top-level names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Yes, but we need to do this carefully, deliberately and in a way that we won’t regret in the future.  I believe several parts of the proposal are warranted, but the namesake “drop NS prefix” portion should deferred until each type receives manual consideration and possibly redesign.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; Mostly yes.  However, taking top-level unprefixed names without a process of Swiftification does not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; I think this question is N/A for this proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I hesitate in saying this, but I think the best comparison to consider is the origin of Foundation and Cocoa themselves.  They are fantastic Objective-C APIs.  If they had originated by wrapping pre-existing APIs written in a different language with different idioms and then incrementally enhanced I wonder if they may have been less fantastic.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe reserving unprefixed top-level names for manually designed, idiomatic types is the path for Swift that avoids this risk altogether and gives us the best chance possible at an incredible, idiomatic set of libraries.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; I participated in the discussion, read the proposal, and carefully considered the consequences of each piece.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Doug Gregor<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/6ced5ae2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Review of proposal:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md<br></p><p>&gt; What is your evaluation of the proposal?<br>I’m +1 on this.<br></p><p>I believe that it represents a useful cleanup of the Foundation type naming, and a maturation of the Swift/Foundation libraries and the integration thereof. Yes, changes can be expected in the future, but if we live in perpetual fear of what the future might bring then we will advance only slowly toward it. The proposal outlines careful thought into how future additional needed transitions can be accomplished.<br></p><p><br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>-<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve followed the discussion carefully and carefully read and assessed the proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/660bc1b4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>May 12, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>After some discussion, we have a small update to the proposal. The following types will keep their NS prefix:<br></p><p>NSCoding<br>NSSecureCoding<br>NSCoder<br>NSKeyedArchiver<br>NSKeyedUnarchiver<br></p><p>The reason is that NSCoding is, at least for the moment, fairly tied to Objective-C (since it is partially implemented with categories on NSObject). The others are not strictly part of that same rule, but they are so tied to NSCoding that I felt it was better to keep them in the same bucket.<br></p><p>- Tony<br></p><p>&gt; On May 9, 2016, at 3:20 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0086 &quot;Drop NS Prefix in Swift Foundation&quot; begins now and runs through May 16, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0086-drop-foundation-ns.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution/blob/master/process.md#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/0183a0af/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May 12, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, May 9, 2016, at 03:20 PM, Douglas Gregor via swift-evolution wrote:<br>&gt;  * What is your evaluation of the proposal?<br> <br>+1 to enum renaming / hoisting, including turning NSStringEncoding into<br>an enum, but -1 on dropping the NS prefix. I agree with a lot of what<br>the other -1 people have said, but the 2 biggest reasons for me are:<br> <br>1. The NS prefix is a signal that the type is probably an Objective-C<br>   class, and with the enum renaming/hoisting this signal will become<br>   even stronger. The fact that it&#39;s an Objective-C class means that<br>   it&#39;s not Swift-like, it&#39;s a reference type, it doesn&#39;t participate in<br>   copy-on-write mutation, etc.<br> <br>2. Dropping the NS prefix means that a *lot* of pretty generic names are<br>   now owned by Foundation, which makes it difficult to implement the<br>   same concept in the Swift standard library. A lot of these names<br>   aren&#39;t likely to end up in the Swift stdlib, but I&#39;d rather be<br>   cautious about this and not take any of these names.<br> <br>By keeping the NS prefixes, we can then &quot;swiftify&quot; these APIs on an<br>ongoing basis and drop the prefix once a type has been &quot;swiftified&quot;<br>(which includes turning things into value types when applicable, not<br>merely renaming methods). And if done right, the swiftified types can<br>operate without Foundation at all, the same way<br>String/Array/Dictionary/Set are independent implementations that bridge<br>to/from Obj-C.<br> <br>As a side note, regardless of everything else, we really should not<br>rename NSJSONSerialization to JSONSerialization. This class is a<br>specific implementation of a JSON encoder/decoder that operates on<br>Foundation types. The name JSONSerialization should be reserved for the<br>potential use of a Swift-native JSON encoder/decoder.<br></p><p>&gt;  * Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br> <br>I don&#39;t think so. I&#39;m not sure what the benefit of dropping the &quot;NS&quot;<br>prefix is supposed to be at all, besides saving 2 keystrokes. The<br>proposal says this is to &quot;establish these libraries as fundamental and<br>native Swift libraries&quot; by &quot;making their naming style match the<br>convention established by the standard library&quot;, but I don&#39;t think this<br>is actually the right way to do this. Renaming these classes doesn&#39;t<br>make the API feel like native Swift (biggest example is value vs<br>reference types). What would make them feel like native Swift is writing<br>a native Swift type with a native Swift API and native Swift conventions<br>that bridges to/from the obj-c class (e.g. how Swift 3 is gaining the<br>URL value type).<br></p><p>&gt;  * How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br> <br>A quick reading of the proposal, as well as reading previous discussions<br>about this topic.<br> <br>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/27d063df/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>May 16, 2016 at 08:00:00pm</p></header><div class="content"><p>We (you) shouldn&#39;t remove the NS prefixes from most of the classes in<br>the proposal. I agree with the reasons the other naysayers have given,<br>but I&#39;ll try to restate them in my own words.<br></p><p>Swift needs a better namespace/import system before these classes<br>should lose the NS prefix. Right now, you cannot just import one name<br>from a module. (If you think you can, try typing “import<br>Foundation.NSDate; NSPort.self” into the REPL.) Therefore we should be<br>selective about what loses the NS prefix.<br></p><p>For any type, some fraction of programs need to mention the type by<br>name in order to justify a prefixless name. What should that threshold<br>be? Fifty percent? Ten percent? Five percent? String and Int and a<br>bunch of other types in the standard library can pass a reasonable<br>threshold. What fraction of programs mention NSTask? NSPort? NSHost?<br>NSScanner?<br></p><p>For any name, some fraction of programs would want to use that term<br>for a program-specific type different than the Foundation type. What<br>fraction is high enough to justify prefixing the Foundation type name?<br>E.g. are there enough datebook programs that think &quot;Calendar&quot; should<br>mean the user&#39;s schedule of events, so that Foundation shouldn&#39;t claim<br>the generic term &quot;Calendar&quot;? How about &quot;Timer&quot;? &quot;Task&quot;? &quot;Port&quot;?<br>&quot;Host&quot;?<br></p><p>What fraction of these Foundation types would have a substantially<br>different API if they were designed from scratch in the age of Swift<br>with the experience of Foundation? Example: NSDate. Looking at each of<br>JodaTime, NodaTime, and boost::date_time, I see a type representing a<br>calendar date (e.g. 2016-05-16) with no associated time of day. I&#39;ve<br>seen and answered enough questions on stackoverflow to know that iOS<br>programmers want a type like that. A from-scratch Swift date/time<br>library would be justified in having such a type, and &quot;Date&quot; would be<br>a great name for that type (with a prefix or nested in another type,<br>unless Swift gets a better namespace/import system). NSDate represents<br>the same thing as CFAbsoluteTime, and should have a name more<br>representative of that.<br></p><p>I just don&#39;t see the benefit of stripping the NS prefix from most of<br>the types in Foundation, given the state of those types and the state<br>of Swift.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 17, 2016 at 02:00:00am</p></header><div class="content"><p>-1 for all the reasons given so far. Foundation is not a Swift API and the<br>NS prefixes help users understand that. Until Foundation gets an API<br>rewrite that makes it feel native in the Swift ecosystem, it should be made<br>very clear that it is a legacy API and not necessary following Swift best<br>practices. I&#39;m actually quite surprised that the Swift team decided to<br>reimplement Foundation with 100% api compatibility, rather than building a<br>&quot;new and improved&quot; version from scratch.<br></p><p>On Mon, May 16, 2016 at 6:37 PM Rob Mayoff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We (you) shouldn&#39;t remove the NS prefixes from most of the classes in<br>&gt; the proposal. I agree with the reasons the other naysayers have given,<br>&gt; but I&#39;ll try to restate them in my own words.<br>&gt;<br>&gt; Swift needs a better namespace/import system before these classes<br>&gt; should lose the NS prefix. Right now, you cannot just import one name<br>&gt; from a module. (If you think you can, try typing “import<br>&gt; Foundation.NSDate; NSPort.self” into the REPL.) Therefore we should be<br>&gt; selective about what loses the NS prefix.<br>&gt;<br>&gt; For any type, some fraction of programs need to mention the type by<br>&gt; name in order to justify a prefixless name. What should that threshold<br>&gt; be? Fifty percent? Ten percent? Five percent? String and Int and a<br>&gt; bunch of other types in the standard library can pass a reasonable<br>&gt; threshold. What fraction of programs mention NSTask? NSPort? NSHost?<br>&gt; NSScanner?<br>&gt;<br>&gt; For any name, some fraction of programs would want to use that term<br>&gt; for a program-specific type different than the Foundation type. What<br>&gt; fraction is high enough to justify prefixing the Foundation type name?<br>&gt; E.g. are there enough datebook programs that think &quot;Calendar&quot; should<br>&gt; mean the user&#39;s schedule of events, so that Foundation shouldn&#39;t claim<br>&gt; the generic term &quot;Calendar&quot;? How about &quot;Timer&quot;? &quot;Task&quot;? &quot;Port&quot;?<br>&gt; &quot;Host&quot;?<br>&gt;<br>&gt; What fraction of these Foundation types would have a substantially<br>&gt; different API if they were designed from scratch in the age of Swift<br>&gt; with the experience of Foundation? Example: NSDate. Looking at each of<br>&gt; JodaTime, NodaTime, and boost::date_time, I see a type representing a<br>&gt; calendar date (e.g. 2016-05-16) with no associated time of day. I&#39;ve<br>&gt; seen and answered enough questions on stackoverflow to know that iOS<br>&gt; programmers want a type like that. A from-scratch Swift date/time<br>&gt; library would be justified in having such a type, and &quot;Date&quot; would be<br>&gt; a great name for that type (with a prefix or nested in another type,<br>&gt; unless Swift gets a better namespace/import system). NSDate represents<br>&gt; the same thing as CFAbsoluteTime, and should have a name more<br>&gt; representative of that.<br>&gt;<br>&gt; I just don&#39;t see the benefit of stripping the NS prefix from most of<br>&gt; the types in Foundation, given the state of those types and the state<br>&gt; of Swift.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/2a2d60eb/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/426fbd3d9b662663dc5647b08c4e3410?s=50"></div><header><strong>[Review] SE-0086: Drop NS Prefix in Swift Foundation</strong> from <string>Anders Ha</string> &lt;hello at andersio.co&gt;<p>May 17, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On 17 May 2016, at 9:36 AM, Rob Mayoff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We (you) shouldn&#39;t remove the NS prefixes from most of the classes in<br>&gt; the proposal. I agree with the reasons the other naysayers have given,<br>&gt; but I&#39;ll try to restate them in my own words.<br>&gt; <br>&gt; Swift needs a better namespace/import system before these classes<br>&gt; should lose the NS prefix. Right now, you cannot just import one name<br>&gt; from a module. (If you think you can, try typing “import<br>&gt; Foundation.NSDate; NSPort.self” into the REPL.) Therefore we should be<br>&gt; selective about what loses the NS prefix.<br></p><p>You can. Try `import class Foundation.NSDate`. :)<br>That’s said there are cases which it won’t work. Say if you try to import CGFloat from UIKit/CoreGraphics, it seems a few conformances are lost, e.g. FloatLiteralConvertible.<br>&gt; <br>&gt; For any type, some fraction of programs need to mention the type by<br>&gt; name in order to justify a prefixless name. What should that threshold<br>&gt; be? Fifty percent? Ten percent? Five percent? String and Int and a<br>&gt; bunch of other types in the standard library can pass a reasonable<br>&gt; threshold. What fraction of programs mention NSTask? NSPort? NSHost?<br>&gt; NSScanner?<br>&gt; <br>&gt; For any name, some fraction of programs would want to use that term<br>&gt; for a program-specific type different than the Foundation type. What<br>&gt; fraction is high enough to justify prefixing the Foundation type name?<br>&gt; E.g. are there enough datebook programs that think &quot;Calendar&quot; should<br>&gt; mean the user&#39;s schedule of events, so that Foundation shouldn&#39;t claim<br>&gt; the generic term &quot;Calendar&quot;? How about &quot;Timer&quot;? &quot;Task&quot;? &quot;Port&quot;?<br>&gt; &quot;Host&quot;?<br>&gt; <br>&gt; What fraction of these Foundation types would have a substantially<br>&gt; different API if they were designed from scratch in the age of Swift<br>&gt; with the experience of Foundation? Example: NSDate. Looking at each of<br>&gt; JodaTime, NodaTime, and boost::date_time, I see a type representing a<br>&gt; calendar date (e.g. 2016-05-16) with no associated time of day. I&#39;ve<br>&gt; seen and answered enough questions on stackoverflow to know that iOS<br>&gt; programmers want a type like that. A from-scratch Swift date/time<br>&gt; library would be justified in having such a type, and &quot;Date&quot; would be<br>&gt; a great name for that type (with a prefix or nested in another type,<br>&gt; unless Swift gets a better namespace/import system). NSDate represents<br>&gt; the same thing as CFAbsoluteTime, and should have a name more<br>&gt; representative of that.<br>&gt; <br>&gt; I just don&#39;t see the benefit of stripping the NS prefix from most of<br>&gt; the types in Foundation, given the state of those types and the state<br>&gt; of Swift.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/befcb819/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
