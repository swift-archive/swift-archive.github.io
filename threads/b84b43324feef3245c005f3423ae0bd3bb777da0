<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 12, 2015 at 11:00:00pm</p></header><div class="content"><p>Hi,<br>I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>I&#39;m at a point where with a local patch (<br>https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>(-CURRENT).<br></p><p>The compiler itself seems to work fine (at least semantic analysis is<br>able to produce the correct result for toy examples).<br>Example:<br></p><p>% cat hello.swift<br>let number = 4<br>println(number)<br></p><p>% ./swiftc hello.swift -o hello<br>hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>println(number)<br>^~~~~~~<br>[...]<br></p><p>The executables generated seem to have some problems, though.<br>This is what I see:<br></p><p>% cat hello2.swift<br>let number = 4<br>print(number)<br>% ./swiftc hello2.swift -o hello2<br> % ./hello2<br>Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>ng(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Strin<br>g(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String<br>(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(<br>String(String(String(String(String(String(String(String(String(String(String(String(St<br>[...]<br></p><p>Rebuilding with symbols and trying to debug:<br></p><p>(gdb) down<br>#17750 0x0000000800d1f07e in<br>_TFs5printFTGSaP__9separatorSS10terminatorSS_T_ (items=...,<br>separator=..., terminator=...) at<br>/exps/swift/swift/stdlib/public/core/Print.swift:34<br>34            items, separator: separator, terminator: terminator,<br>toStream: &amp;output)<br>(gdb)<br>#17749 0x0000000800d1f57b in<br>_TFs6_printuRxs16OutputStreamTyperFTGSaP__9separatorSS10terminatorSS8toStreamRx_T_<br>(items=..., separator=..., terminator=..., output=...)<br>    at /exps/swift/swift/stdlib/public/core/Print.swift:128<br>128         _print_unlocked(item, &amp;output)<br>(gdb)<br>#17748 0x0000000800d1b099 in<br>_TFs15_print_unlockedu0_R_s16OutputStreamTyperFTxRq__T_ (value=...,<br>target=...) at /exps/swift/swift/stdlib/public/core/OutputStream.swift:193<br>193       _adHocPrint(value, &amp;target, isDebugPrint: false)<br>(gdb)<br>#17747 0x0000000800d1960b in<br>_TFs11_adHocPrintu0_R_s16OutputStreamTyperFTxRq_12isDebugPrintSb_T_<br>(value=..., isDebugPrint=...) at<br>/exps/swift/swift/stdlib/public/core/OutputStream.swift:124<br>124           print(label, terminator: &quot;&quot;, toStream: &amp;target)<br>(gdb)<br>#17746 0x0000000800d1a7ed in<br>_TFs5printuRxs16OutputStreamTyperFTGSaP__9separatorSS10terminatorSS8toStreamRx_T_<br>(items=..., separator=..., terminator=..., output=...)<br>    at /exps/swift/swift/stdlib/public/core/Print.swift:91<br>91        _print(items, separator: separator, terminator: terminator,<br>toStream: &amp;output)<br>(gdb)<br>#17745 0x0000000800d1f57b in<br>_TFs6_printuRxs16OutputStreamTyperFTGSaP__9separatorSS10terminatorSS8toStreamRx_T_<br>(items=..., separator=..., terminator=..., output=...)<br>    at /exps/swift/swift/stdlib/public/core/Print.swift:128<br>128         _print_unlocked(item, &amp;output)<br>(gdb)<br>#17744 0x0000000800d1b099 in<br>_TFs15_print_unlockedu0_R_s16OutputStreamTyperFTxRq__T_ (value=...,<br>target=...) at /exps/swift/swift/stdlib/public/core/OutputStream.swift:193<br>193       _adHocPrint(value, &amp;target, isDebugPrint: false)<br>(gdb)<br>#17743 0x0000000800d1960b in<br>_TFs11_adHocPrintu0_R_s16OutputStreamTyperFTxRq_12isDebugPrintSb_T_<br>(value=..., isDebugPrint=...) at<br>/exps/swift/swift/stdlib/public/core/OutputStream.swift:124<br>124           print(label, terminator: &quot;&quot;, toStream: &amp;target)<br></p><p>I have some suspicion this may be related to my local patch (although<br>I can&#39;t say that for sure).<br>I&#39;m still new to the internals of the language so any help on how what<br>could it be the root cause and how to try to debug this will be<br>appreciated.<br></p><p>Thanks!<br></p><p>--<br>Davide<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 12, 2015 at 08:00:00pm</p></header><div class="content"><p>On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; Hi,<br>&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt; I&#39;m at a point where with a local patch (<br>&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt; (-CURRENT).<br></p><p>+Doug for this patch.<br></p><p>&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt; able to produce the correct result for toy examples).<br>&gt; Example:<br>&gt;<br>&gt; % cat hello.swift<br>&gt; let number = 4<br>&gt; println(number)<br>&gt;<br>&gt; % ./swiftc hello.swift -o hello<br>&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt; println(number)<br>&gt; ^~~~~~~<br>&gt; [...]<br>&gt;<br>&gt; The executables generated seem to have some problems, though.<br>&gt; This is what I see:<br>&gt;<br>&gt; % cat hello2.swift<br>&gt; let number = 4<br>&gt; print(number)<br>&gt; % ./swiftc hello2.swift -o hello2<br>&gt;  % ./hello2<br>&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br></p><p>The reason is that the program can&#39;t find the protocol conformance<br>tables.  On Linux, we are using a linker script to collect all<br>conformances into one section, and insert symbols at the beginning and<br>at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>these sections is in stdlib/public/runtime/Casting.cpp.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 12:00:00am</p></header><div class="content"><p>On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; Hi,<br>&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt; (-CURRENT).<br>&gt;<br>&gt; +Doug for this patch.<br>&gt;<br>&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt; Example:<br>&gt;&gt;<br>&gt;&gt; % cat hello.swift<br>&gt;&gt; let number = 4<br>&gt;&gt; println(number)<br>&gt;&gt;<br>&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt; println(number)<br>&gt;&gt; ^~~~~~~<br>&gt;&gt; [...]<br>&gt;&gt;<br>&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt; This is what I see:<br>&gt;&gt;<br>&gt;&gt; % cat hello2.swift<br>&gt;&gt; let number = 4<br>&gt;&gt; print(number)<br>&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;  % ./hello2<br>&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;<br>&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt; conformances into one section, and insert symbols at the beginning and<br>&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;<br></p><p>Thanks Dmitri.<br>The linker script is actually executed on FreeBSD as well (with a<br>recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>the parsing of the linker script fails)<br></p><p>and the section is created (as objdump -h witnesses):<br></p><p> 20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>                  CONTENTS, ALLOC, LOAD, DATA<br> 21 .swift2_protocol_conformances 00000008  0000000000603228<br>0000000000603228  00003228  2**0<br>                  CONTENTS, ALLOC, LOAD, DATA<br> 22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>                  CONTENTS, ALLOC, LOAD, DATA<br></p><p>% objdump -t ./hello | grep conformances<br>0000000000603228 l    d  .swift2_protocol_conformances<br>0000000000000000              .swift2_protocol_conformances<br>0000000000603228 g       .swift2_protocol_conformances<br>0000000000000000              .swift2_protocol_conformances_start<br></p><p>Although the section seems to be empty/corrupted:<br></p><p>Disassembly of section .dtors:<br></p><p>0000000000603218 &lt;__DTOR_LIST__&gt;:<br>  603218:       ff                      (bad)<br>  603219:       ff                      (bad)<br>  60321a:       ff                      (bad)<br>  60321b:       ff                      (bad)<br>  60321c:       ff                      (bad)<br>  60321d:       ff                      (bad)<br>  60321e:       ff                      (bad)<br>  60321f:       ff 00                   incl   (%rax)<br></p><p>0000000000603220 &lt;__DTOR_END__&gt;:<br>        ...<br>Disassembly of section .swift2_protocol_conformances:<br></p><p>0000000000603228 &lt;.swift2_protocol_conformances_start&gt;:<br>        ...<br>Disassembly of section .jcr:<br></p><p>0000000000603230 &lt;__JCR_END__&gt;:<br></p><p>Do you have an example on how that should look like (on Linux) so I<br>can investigate and try to adapt that to work on FreeBSD?<br></p><p>Thanks,<br></p><p>--<br>Davide<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 12, 2015 at 09:00:00pm</p></header><div class="content"><p>On Sat, Dec 12, 2015 at 9:09 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt; On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt;&gt; (-CURRENT).<br>&gt;&gt;<br>&gt;&gt; +Doug for this patch.<br>&gt;&gt;<br>&gt;&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt; ^~~~~~~<br>&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt;&gt; This is what I see:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; % cat hello2.swift<br>&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt; print(number)<br>&gt;&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;&gt;  % ./hello2<br>&gt;&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;&gt;<br>&gt;&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt;&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt;&gt; conformances into one section, and insert symbols at the beginning and<br>&gt;&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt;&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;&gt;<br>&gt;<br>&gt; Thanks Dmitri.<br>&gt; The linker script is actually executed on FreeBSD as well (with a<br>&gt; recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>&gt; the parsing of the linker script fails)<br>&gt;<br>&gt; and the section is created (as objdump -h witnesses):<br>&gt;<br>&gt;  20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;  21 .swift2_protocol_conformances 00000008  0000000000603228<br>&gt; 0000000000603228  00003228  2**0<br>&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;  22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;<br>&gt; % objdump -t ./hello | grep conformances<br>&gt; 0000000000603228 l    d  .swift2_protocol_conformances<br>&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt; 0000000000603228 g       .swift2_protocol_conformances<br>&gt; 0000000000000000              .swift2_protocol_conformances_start<br>&gt;<br>&gt; Although the section seems to be empty/corrupted:<br></p><p>It should be empty in the binary (since this simple program does not<br>define any new conformances to protocols).  Could you try checking the<br>standard library, libswiftCore.so:<br></p><p>$ objdump -t lib/swift/linux/libswiftCore.so | grep conformances<br>0000000000602b10 l    d  .swift2_protocol_conformances<br>0000000000000000              .swift2_protocol_conformances<br>0000000000602b18 l     O .swift2_protocol_conformances<br>0000000000002eb0              l_protocol_conformances<br>0000000000602b10 g       .swift2_protocol_conformances<br>0000000000000000              .swift2_protocol_conformances_start<br></p><p>$ objdump -s -j .swift2_protocol_conformances<br>lib/swift/linux/libswiftCore.so | head<br></p><p>lib/swift/linux/libswiftCore.so:     file format elf64-x86-64<br></p><p>Contents of section .swift2_protocol_conformances:<br> 602b10 b02e0000 00000000 00000000 00000000  ................<br> 602b20 00000000 04000000 00000000 00000000  ................<br> 602b30 00000000 04000000 00000000 00000000  ................<br> 602b40 00000000 04000000 00000000 00000000  ................<br> 602b50 00000000 04000000 00000000 00000000  ................<br> 602b60 00000000 04000000 00000000 00000000  ................<br></p><p>I&#39;d recommend that you add debug output to<br>_addImageProtocolConformances() to see if the section is being found<br>and iterated over (or just use a debugger, after building with<br>--debug-swift-stdlib).<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 12:00:00am</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 12:22 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; On Sat, Dec 12, 2015 at 9:09 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt; On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt;&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt;&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt;&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt;&gt;&gt; (-CURRENT).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; +Doug for this patch.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt;&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt; ^~~~~~~<br>&gt;&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt;&gt;&gt; This is what I see:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; % cat hello2.swift<br>&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt; print(number)<br>&gt;&gt;&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;&gt;&gt;  % ./hello2<br>&gt;&gt;&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt;&gt;&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt;&gt;&gt; conformances into one section, and insert symbols at the beginning and<br>&gt;&gt;&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt;&gt;&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thanks Dmitri.<br>&gt;&gt; The linker script is actually executed on FreeBSD as well (with a<br>&gt;&gt; recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>&gt;&gt; the parsing of the linker script fails)<br>&gt;&gt;<br>&gt;&gt; and the section is created (as objdump -h witnesses):<br>&gt;&gt;<br>&gt;&gt;  20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;  21 .swift2_protocol_conformances 00000008  0000000000603228<br>&gt;&gt; 0000000000603228  00003228  2**0<br>&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;  22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;<br>&gt;&gt; % objdump -t ./hello | grep conformances<br>&gt;&gt; 0000000000603228 l    d  .swift2_protocol_conformances<br>&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt; 0000000000603228 g       .swift2_protocol_conformances<br>&gt;&gt; 0000000000000000              .swift2_protocol_conformances_start<br>&gt;&gt;<br>&gt;&gt; Although the section seems to be empty/corrupted:<br>&gt;<br>&gt; It should be empty in the binary (since this simple program does not<br>&gt; define any new conformances to protocols).  Could you try checking the<br>&gt; standard library, libswiftCore.so:<br>&gt;<br></p><p> % objdump -t ./lib/swift/freebsd/x86_64/libswiftCore.so | grep conformances<br>0000000000833710 l    d  .swift2_protocol_conformances<br>0000000000000000              .swift2_protocol_conformances<br>0000000000833710 l     O .swift2_protocol_conformances<br>0000000000002eb0              l_protocol_conformances<br>00000000008365c0 g       .swift2_protocol_conformances<br>0000000000000000              _edata<br></p><p> % objdump -s -j .swift2_protocol_conformances<br>./lib/swift/freebsd/libswiftCore.so |head -n 10<br></p><p>./lib/swift/freebsd/libswiftCore.so:     file format elf64-x86-64-freebsd<br></p><p>Contents of section .swift2_protocol_conformances:<br> 833710 00000000 00000000 00000000 04000000  ................<br> 833720 00000000 00000000 00000000 04000000  ................<br> 833730 00000000 00000000 00000000 04000000  ................<br> 833740 00000000 00000000 00000000 04000000  ................<br> 833750 00000000 00000000 00000000 04000000  ................<br> 833760 00000000 00000000 00000000 04000000  ................<br></p><p>Thanks,<br></p><p>--<br>Davide<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 12, 2015 at 09:00:00pm</p></header><div class="content"><p>On Sat, Dec 12, 2015 at 9:26 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt; On Sun, Dec 13, 2015 at 12:22 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; On Sat, Dec 12, 2015 at 9:09 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt;&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt;&gt;&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt;&gt;&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt;&gt;&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt;&gt;&gt;&gt; (-CURRENT).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; +Doug for this patch.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt;&gt;&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt;&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt; ^~~~~~~<br>&gt;&gt;&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt;&gt;&gt;&gt; This is what I see:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % cat hello2.swift<br>&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt; print(number)<br>&gt;&gt;&gt;&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;&gt;&gt;&gt;  % ./hello2<br>&gt;&gt;&gt;&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt;&gt;&gt;&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt;&gt;&gt;&gt; conformances into one section, and insert symbols at the beginning and<br>&gt;&gt;&gt;&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt;&gt;&gt;&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks Dmitri.<br>&gt;&gt;&gt; The linker script is actually executed on FreeBSD as well (with a<br>&gt;&gt;&gt; recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>&gt;&gt;&gt; the parsing of the linker script fails)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; and the section is created (as objdump -h witnesses):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;  21 .swift2_protocol_conformances 00000008  0000000000603228<br>&gt;&gt;&gt; 0000000000603228  00003228  2**0<br>&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;  22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; % objdump -t ./hello | grep conformances<br>&gt;&gt;&gt; 0000000000603228 l    d  .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000603228 g       .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances_start<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Although the section seems to be empty/corrupted:<br>&gt;&gt;<br>&gt;&gt; It should be empty in the binary (since this simple program does not<br>&gt;&gt; define any new conformances to protocols).  Could you try checking the<br>&gt;&gt; standard library, libswiftCore.so:<br>&gt;&gt;<br>&gt;<br>&gt;  % objdump -t ./lib/swift/freebsd/x86_64/libswiftCore.so | grep conformances<br>&gt; 0000000000833710 l    d  .swift2_protocol_conformances<br>&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt; 0000000000833710 l     O .swift2_protocol_conformances<br>&gt; 0000000000002eb0              l_protocol_conformances<br>&gt; 00000000008365c0 g       .swift2_protocol_conformances<br>&gt; 0000000000000000              _edata<br>&gt;<br>&gt;  % objdump -s -j .swift2_protocol_conformances<br>&gt; ./lib/swift/freebsd/libswiftCore.so |head -n 10<br>&gt;<br>&gt; ./lib/swift/freebsd/libswiftCore.so:     file format elf64-x86-64-freebsd<br>&gt;<br>&gt; Contents of section .swift2_protocol_conformances:<br>&gt;  833710 00000000 00000000 00000000 04000000  ................<br>&gt;  833720 00000000 00000000 00000000 04000000  ................<br></p><p>The section should start with an 8-byte size of the conformances<br>section, seems to be missing here (compare to my output, which has<br>&quot;b02e0000 00000000&quot;).<br></p><p>The linker script adds this size using:<br></p><p>QUAD(SIZEOF(.swift2_protocol_conformances) - 8) ;<br></p><p>Could you verify you have that line?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 12:00:00am</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 12:30 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; On Sat, Dec 12, 2015 at 9:26 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt; On Sun, Dec 13, 2015 at 12:22 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Sat, Dec 12, 2015 at 9:09 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt;&gt;&gt;&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt;&gt;&gt;&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt;&gt;&gt;&gt;&gt; (-CURRENT).<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; +Doug for this patch.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt;&gt;&gt;&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt;&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt;&gt;&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt;&gt; ^~~~~~~<br>&gt;&gt;&gt;&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt;&gt;&gt;&gt;&gt; This is what I see:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; % cat hello2.swift<br>&gt;&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt;&gt; print(number)<br>&gt;&gt;&gt;&gt;&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;&gt;&gt;&gt;&gt;  % ./hello2<br>&gt;&gt;&gt;&gt;&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt;&gt;&gt;&gt;&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt;&gt;&gt;&gt;&gt; conformances into one section, and insert symbols at the beginning and<br>&gt;&gt;&gt;&gt;&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt;&gt;&gt;&gt;&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks Dmitri.<br>&gt;&gt;&gt;&gt; The linker script is actually executed on FreeBSD as well (with a<br>&gt;&gt;&gt;&gt; recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>&gt;&gt;&gt;&gt; the parsing of the linker script fails)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; and the section is created (as objdump -h witnesses):<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>&gt;&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;&gt;  21 .swift2_protocol_conformances 00000008  0000000000603228<br>&gt;&gt;&gt;&gt; 0000000000603228  00003228  2**0<br>&gt;&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;&gt;  22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>&gt;&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; % objdump -t ./hello | grep conformances<br>&gt;&gt;&gt;&gt; 0000000000603228 l    d  .swift2_protocol_conformances<br>&gt;&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt;&gt;&gt; 0000000000603228 g       .swift2_protocol_conformances<br>&gt;&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances_start<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Although the section seems to be empty/corrupted:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It should be empty in the binary (since this simple program does not<br>&gt;&gt;&gt; define any new conformances to protocols).  Could you try checking the<br>&gt;&gt;&gt; standard library, libswiftCore.so:<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;  % objdump -t ./lib/swift/freebsd/x86_64/libswiftCore.so | grep conformances<br>&gt;&gt; 0000000000833710 l    d  .swift2_protocol_conformances<br>&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt; 0000000000833710 l     O .swift2_protocol_conformances<br>&gt;&gt; 0000000000002eb0              l_protocol_conformances<br>&gt;&gt; 00000000008365c0 g       .swift2_protocol_conformances<br>&gt;&gt; 0000000000000000              _edata<br>&gt;&gt;<br>&gt;&gt;  % objdump -s -j .swift2_protocol_conformances<br>&gt;&gt; ./lib/swift/freebsd/libswiftCore.so |head -n 10<br>&gt;&gt;<br>&gt;&gt; ./lib/swift/freebsd/libswiftCore.so:     file format elf64-x86-64-freebsd<br>&gt;&gt;<br>&gt;&gt; Contents of section .swift2_protocol_conformances:<br>&gt;&gt;  833710 00000000 00000000 00000000 04000000  ................<br>&gt;&gt;  833720 00000000 00000000 00000000 04000000  ................<br>&gt;<br>&gt; The section should start with an 8-byte size of the conformances<br>&gt; section, seems to be missing here (compare to my output, which has<br>&gt; &quot;b02e0000 00000000&quot;).<br>&gt;<br>&gt; The linker script adds this size using:<br>&gt;<br>&gt; QUAD(SIZEOF(.swift2_protocol_conformances) - 8) ;<br>&gt;<br>&gt; Could you verify you have that line?<br>&gt;<br></p><p>hmm, apparently we replied almost at the same time.<br>Anyway, yes, my linker script has the QUAD line.<br></p><p>SECTIONS<br>{<br>  .swift2_protocol_conformances :<br>  {<br>    .swift2_protocol_conformances_start = . ;<br>    QUAD(SIZEOF(.swift2_protocol_conformances) - 8) ;<br>    *(.swift2_protocol_conformances) ;<br>  }<br>}<br>INSERT AFTER .dtors<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 05:00:00am</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 12:35 AM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt; On Sun, Dec 13, 2015 at 12:30 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; On Sat, Dec 12, 2015 at 9:26 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Sun, Dec 13, 2015 at 12:22 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 9:09 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; (-CURRENT).<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; +Doug for this patch.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ^~~~~~~<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is what I see:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; % cat hello2.swift<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; print(number)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  % ./hello2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt;&gt;&gt;&gt;&gt;&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt;&gt;&gt;&gt;&gt;&gt; conformances into one section, and insert symbols at the beginning and<br>&gt;&gt;&gt;&gt;&gt;&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt;&gt;&gt;&gt;&gt;&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Thanks Dmitri.<br>&gt;&gt;&gt;&gt;&gt; The linker script is actually executed on FreeBSD as well (with a<br>&gt;&gt;&gt;&gt;&gt; recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>&gt;&gt;&gt;&gt;&gt; the parsing of the linker script fails)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; and the section is created (as objdump -h witnesses):<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>&gt;&gt;&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;&gt;&gt;  21 .swift2_protocol_conformances 00000008  0000000000603228<br>&gt;&gt;&gt;&gt;&gt; 0000000000603228  00003228  2**0<br>&gt;&gt;&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;&gt;&gt;  22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>&gt;&gt;&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % objdump -t ./hello | grep conformances<br>&gt;&gt;&gt;&gt;&gt; 0000000000603228 l    d  .swift2_protocol_conformances<br>&gt;&gt;&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt;&gt;&gt;&gt; 0000000000603228 g       .swift2_protocol_conformances<br>&gt;&gt;&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances_start<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Although the section seems to be empty/corrupted:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It should be empty in the binary (since this simple program does not<br>&gt;&gt;&gt;&gt; define any new conformances to protocols).  Could you try checking the<br>&gt;&gt;&gt;&gt; standard library, libswiftCore.so:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  % objdump -t ./lib/swift/freebsd/x86_64/libswiftCore.so | grep conformances<br>&gt;&gt;&gt; 0000000000833710 l    d  .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000833710 l     O .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000002eb0              l_protocol_conformances<br>&gt;&gt;&gt; 00000000008365c0 g       .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000000000              _edata<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  % objdump -s -j .swift2_protocol_conformances<br>&gt;&gt;&gt; ./lib/swift/freebsd/libswiftCore.so |head -n 10<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ./lib/swift/freebsd/libswiftCore.so:     file format elf64-x86-64-freebsd<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Contents of section .swift2_protocol_conformances:<br>&gt;&gt;&gt;  833710 00000000 00000000 00000000 04000000  ................<br>&gt;&gt;&gt;  833720 00000000 00000000 00000000 04000000  ................<br>&gt;&gt;<br>&gt;&gt; The section should start with an 8-byte size of the conformances<br>&gt;&gt; section, seems to be missing here (compare to my output, which has<br>&gt;&gt; &quot;b02e0000 00000000&quot;).<br>&gt;&gt;<br>&gt;&gt; The linker script adds this size using:<br>&gt;&gt;<br>&gt;&gt; QUAD(SIZEOF(.swift2_protocol_conformances) - 8) ;<br>&gt;&gt;<br>&gt;&gt; Could you verify you have that line?<br>&gt;&gt;<br>&gt;<br>&gt; hmm, apparently we replied almost at the same time.<br>&gt; Anyway, yes, my linker script has the QUAD line.<br>&gt;<br>&gt; SECTIONS<br>&gt; {<br>&gt;   .swift2_protocol_conformances :<br>&gt;   {<br>&gt;     .swift2_protocol_conformances_start = . ;<br>&gt;     QUAD(SIZEOF(.swift2_protocol_conformances) - 8) ;<br>&gt;     *(.swift2_protocol_conformances) ;<br>&gt;   }<br>&gt; }<br>&gt; INSERT AFTER .dtors<br></p><p>I found the problem. For the standard library the section weren&#39;t<br>coalesced because the correct flags weren&#39;t passed to the linker in<br>FreeBSD.<br>The following patch, which I&#39;m going to submit soon, fixes the problem for me.<br></p><p>diff --git a/cmake/modules/AddSwift.cmake b/cmake/modules/AddSwift.cmake<br>index 48288b7..37cb2ba 100644<br>--- a/cmake/modules/AddSwift.cmake<br>+++ b/cmake/modules/AddSwift.cmake<br>@@ -1099,10 +1099,11 @@ function(_add_swift_library_single target name)<br>     set(PLIST_INFO_BUILD_VERSION)<br>   endif()<br></p><p>-  # On Linux add the linker script that coalesces protocol conformance<br>-  # sections. This wouldn&#39;t be necessary if the link was done by the swift<br>-  # binary: rdar://problem/19007002<br>-  if(&quot;${CMAKE_SYSTEM_NAME}&quot; STREQUAL &quot;Linux&quot;)<br>+  # On Linux and FreeBSD add the linker script that coalesces protocol<br>+  # conformance sections. This wouldn&#39;t be necessary if the link was done by<br>+  # the swift binary: rdar://problem/19007002<br>+  if(&quot;${CMAKE_SYSTEM_NAME}&quot; STREQUAL &quot;Linux&quot; OR<br>+    &quot;${CMAKE_SYSTEM_NAME}&quot; STREQUAL &quot;FreeBSD&quot;)<br>     list(APPEND link_flags<br>         &quot;-Xlinker&quot; &quot;-T&quot;<br>         &quot;-Xlinker&quot; &quot;${SWIFTLIB_DIR}/${SWIFTLIB_SINGLE_SUBDIR}/swift.ld&quot;)<br></p><p>And now, swift compiled programs run correctly on FreeBSD!<br></p><p>% ./swiftc hello.swift -o hello<br>davide at rabbit1:/exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin<br>% ./hello<br>hello<br>% cat hello.swift<br>print (&quot;hello&quot;)<br></p><p>Thank you for your assistance Dmitri.<br></p><p>--<br>Davide<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 13, 2015 at 03:00:00am</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 2:52 AM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt; And now, swift compiled programs run correctly on FreeBSD!<br></p><p>This is great, thanks Davide!<br></p><p>&gt; % ./swiftc hello.swift -o hello<br>&gt; davide at rabbit1:/exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin<br>&gt; % ./hello<br>&gt; hello<br>&gt; % cat hello.swift<br>&gt; print (&quot;hello&quot;)<br></p><p>How much of the testsuite passes?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 06:00:00am</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 6:15 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; On Sun, Dec 13, 2015 at 2:52 AM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt; And now, swift compiled programs run correctly on FreeBSD!<br>&gt;<br>&gt; This is great, thanks Davide!<br>&gt;<br>&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt; davide at rabbit1:/exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin<br>&gt;&gt; % ./hello<br>&gt;&gt; hello<br>&gt;&gt; % cat hello.swift<br>&gt;&gt; print (&quot;hello&quot;)<br>&gt;<br>&gt; How much of the testsuite passes?<br>&gt;<br></p><p>There isn&#39;t (yet) support for FreeBSD in lit.cfg so it fails.<br>I&#39;ll try to add those bits tomorrow and report how far it goes.<br></p><p>Thanks,<br></p><p>--<br>Davide<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 13, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 13, 2015, at 3:34 AM, Davide Italiano via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sun, Dec 13, 2015 at 6:15 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; On Sun, Dec 13, 2015 at 2:52 AM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt; And now, swift compiled programs run correctly on FreeBSD!<br>&gt;&gt; <br>&gt;&gt; This is great, thanks Davide!<br>&gt;&gt; <br>&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt; davide at rabbit1:/exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin<br>&gt;&gt;&gt; % ./hello<br>&gt;&gt;&gt; hello<br>&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt; print (&quot;hello&quot;)<br>&gt;&gt; <br>&gt;&gt; How much of the testsuite passes?<br>&gt;&gt; <br>&gt; <br>&gt; There isn&#39;t (yet) support for FreeBSD in lit.cfg so it fails.<br>&gt; I&#39;ll try to add those bits tomorrow and report how far it goes.<br></p><p>This is very exciting Davide!  Thanks for pushing forward on this,<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 05:00:00pm</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 4:41 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 13, 2015, at 3:34 AM, Davide Italiano via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Sun, Dec 13, 2015 at 6:15 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Sun, Dec 13, 2015 at 2:52 AM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; And now, swift compiled programs run correctly on FreeBSD!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is great, thanks Davide!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt;&gt; davide at rabbit1:/exps/swift/build/Ninja-ReleaseAssert/swift-freebsd-x86_64/bin<br>&gt;&gt;&gt;&gt; % ./hello<br>&gt;&gt;&gt;&gt; hello<br>&gt;&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt;&gt; print (&quot;hello&quot;)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; How much of the testsuite passes?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There isn&#39;t (yet) support for FreeBSD in lit.cfg so it fails.<br>&gt;&gt; I&#39;ll try to add those bits tomorrow and report how far it goes.<br>&gt;<br>&gt; This is very exciting Davide!  Thanks for pushing forward on this,<br>&gt;<br>&gt; -Chris<br></p><p>Thank you. After some hacking (patches will come soon) I got the<br>testsuite to run on FreeBSD.<br>This is the current status.<br></p><p>  Expected Passes    : 780<br>  Expected Failures  : 5<br>  Unsupported Tests  : 572<br>  Unexpected Failures: 994<br></p><p>Sure, there&#39;s still a lot to do but doesn&#39;t seem that bad for a first run =)<br></p><p>Thanks,<br></p><p>--<br>Davide<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>December 13, 2015 at 12:00:00am</p></header><div class="content"><p>On Sun, Dec 13, 2015 at 12:26 AM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt; On Sun, Dec 13, 2015 at 12:22 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; On Sat, Dec 12, 2015 at 9:09 PM, Davide Italiano &lt;dccitaliano at gmail.com&gt; wrote:<br>&gt;&gt;&gt; On Sat, Dec 12, 2015 at 11:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt;&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt;&gt;&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt;&gt;&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt;&gt;&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt;&gt;&gt;&gt; (-CURRENT).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; +Doug for this patch.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The compiler itself seems to work fine (at least semantic analysis is<br>&gt;&gt;&gt;&gt;&gt; able to produce the correct result for toy examples).<br>&gt;&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % cat hello.swift<br>&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % ./swiftc hello.swift -o hello<br>&gt;&gt;&gt;&gt;&gt; hello.swift:2:1: error: &#39;println&#39; has been renamed to &#39;print&#39;<br>&gt;&gt;&gt;&gt;&gt; println(number)<br>&gt;&gt;&gt;&gt;&gt; ^~~~~~~<br>&gt;&gt;&gt;&gt;&gt; [...]<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The executables generated seem to have some problems, though.<br>&gt;&gt;&gt;&gt;&gt; This is what I see:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; % cat hello2.swift<br>&gt;&gt;&gt;&gt;&gt; let number = 4<br>&gt;&gt;&gt;&gt;&gt; print(number)<br>&gt;&gt;&gt;&gt;&gt; % ./swiftc hello2.swift -o hello2<br>&gt;&gt;&gt;&gt;&gt;  % ./hello2<br>&gt;&gt;&gt;&gt;&gt; Int(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(String(Stri<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The reason is that the program can&#39;t find the protocol conformance<br>&gt;&gt;&gt;&gt; tables.  On Linux, we are using a linker script to collect all<br>&gt;&gt;&gt;&gt; conformances into one section, and insert symbols at the beginning and<br>&gt;&gt;&gt;&gt; at the end, see stdlib/public/runtime/swift.ld.  The code that reads<br>&gt;&gt;&gt;&gt; these sections is in stdlib/public/runtime/Casting.cpp.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks Dmitri.<br>&gt;&gt;&gt; The linker script is actually executed on FreeBSD as well (with a<br>&gt;&gt;&gt; recent version of GNU ld, with the old ld shipped with FreeBSD or gold<br>&gt;&gt;&gt; the parsing of the linker script fails)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; and the section is created (as objdump -h witnesses):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  20 .dtors        00000010  0000000000603218  0000000000603218  00003218  2**3<br>&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;  21 .swift2_protocol_conformances 00000008  0000000000603228<br>&gt;&gt;&gt; 0000000000603228  00003228  2**0<br>&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;  22 .jcr          00000008  0000000000603230  0000000000603230  00003230  2**3<br>&gt;&gt;&gt;                   CONTENTS, ALLOC, LOAD, DATA<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; % objdump -t ./hello | grep conformances<br>&gt;&gt;&gt; 0000000000603228 l    d  .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000603228 g       .swift2_protocol_conformances<br>&gt;&gt;&gt; 0000000000000000              .swift2_protocol_conformances_start<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Although the section seems to be empty/corrupted:<br>&gt;&gt;<br>&gt;&gt; It should be empty in the binary (since this simple program does not<br>&gt;&gt; define any new conformances to protocols).  Could you try checking the<br>&gt;&gt; standard library, libswiftCore.so:<br>&gt;&gt;<br>&gt;<br>&gt;  % objdump -t ./lib/swift/freebsd/x86_64/libswiftCore.so | grep conformances<br>&gt; 0000000000833710 l    d  .swift2_protocol_conformances<br>&gt; 0000000000000000              .swift2_protocol_conformances<br>&gt; 0000000000833710 l     O .swift2_protocol_conformances<br>&gt; 0000000000002eb0              l_protocol_conformances<br>&gt; 00000000008365c0 g       .swift2_protocol_conformances<br>&gt; 0000000000000000              _edata<br>&gt;<br>&gt;  % objdump -s -j .swift2_protocol_conformances<br>&gt; ./lib/swift/freebsd/libswiftCore.so |head -n 10<br>&gt;<br>&gt; ./lib/swift/freebsd/libswiftCore.so:     file format elf64-x86-64-freebsd<br>&gt;<br>&gt; Contents of section .swift2_protocol_conformances:<br>&gt;  833710 00000000 00000000 00000000 04000000  ................<br>&gt;  833720 00000000 00000000 00000000 04000000  ................<br>&gt;  833730 00000000 00000000 00000000 04000000  ................<br>&gt;  833740 00000000 00000000 00000000 04000000  ................<br>&gt;  833750 00000000 00000000 00000000 04000000  ................<br>&gt;  833760 00000000 00000000 00000000 04000000  ................<br>&gt;<br></p><p>The main/only difference seem to be in the first 8 bytes of the section.<br>I&#39;ll check why the linker script does not honour this.<br></p><p>Contents of section .swift2_protocol_conformances:<br> 602b10 b02e0000 00000000 00000000 00000000  ................<br> 602b20 00000000 04000000 00000000 00000000  ................<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Porting swift to FreeBSD</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December 14, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 12, 2015, at 8:45 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sat, Dec 12, 2015 at 8:29 PM, Davide Italiano via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; Hi,<br>&gt;&gt; I&#39;m a FreeBSD developer who has been working on porting swift to FreeBSD.<br>&gt;&gt; I&#39;m at a point where with a local patch (<br>&gt;&gt; https://people.freebsd.org/~davide/swift/build_freebsd.diff ) to fix<br>&gt;&gt; build errors I&#39;m able to build the compiler itself on FreeBSD 11<br>&gt;&gt; (-CURRENT).<br>&gt; <br>&gt; +Doug for this patch.<br></p><p>Patch LGTM, but please delete the “#if 0” block.<br></p><p>	- Doug<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
