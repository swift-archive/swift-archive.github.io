<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 12, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July 12, 2016 at 08:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br></p><p>I probably never came across these Optional comparison operators in any Swift code I’ve been working with. The removal of these doesn’t hurt any of my codebase, so I’d appreciate less noise inside sdtlib.<br>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I’d say it is. As the proposal clearly stated, reintroducing these operators later would be purely additive.<br>Does this proposal fit well with the feel and direction of Swift?<br></p><p>I feel like it does, because right now these operators are more likely useless.<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>None that I can remember of.<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Carefully read the proposal on GitHub.<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 12. Juli 2016 um 20:26:34, Chris Lattner via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>Hello Swift community,<br></p><p>The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>* What is your evaluation of the proposal?<br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>* Does this proposal fit well with the feel and direction of Swift?<br>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/913ad28b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July 12, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. Fully support this change. ‚Optional&#39; comparison operators hide the fact that the value is boxes which can lead to confusing behavior and difficult to find bugs. Personally, I always unbox my optionals before doing any kind of comparisons. <br></p><p>In fact, I would go a step further and remove !=&lt;T, T?&gt; operator as well. It can’t distinguish between a situation when inequality holds because an optional is nil or inequality holds because optional contains a different value, which can also be surprising. IMO, the only non-surprising inequality comparison is to a nil value. But I also have to admit that I don’t have a practical example where this becomes an issue. <br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes and yes. <br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A glance. <br></p><p>—T<br></p><p>&gt; On 12 Jul 2016, at 20:26, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>July 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think this probably makes sense. However IMO it is critical that this not be expanded to also include ==/!= as I rely on that working when testing against optionals all of the time - but thankfully that is not included in this proposal.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I’ve never knowingly encountered this problem, so it’s hard to say without doing some more careful auditing.<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I believe so - it encourages “safe by default” logic and in this case I can totally see how the current design could yield surprising results.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I think the closest scenario I’m familiar with is Objective-C where if you call -compare: on a nil var, you’ll get back a 0 which is NSOrderedSame when you totally didn’t expect that! This proposal should avoid that sort of thing from flying under the radar in Swift.<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Not a lot, tbh.<br></p><p>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ebf471a3ae8df42a84f93a7efbbdbd0?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Ash Furrow</string> &lt;ash at ashfurrow.com&gt;<p>July 12, 2016 at 09:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1 from me. I particularly like how this adheres to the principle of least surprise. Keeping == and != is an important part of the proposal, as others have said.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I believe so. <br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Aye, pretty happy about its direction.<br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have: Objective-C! Converting the code from the proposal, we have:<br></p><p>NSArray *ps = [peeps filter:^BOOL(Person *lhs, Person *rhs) { <br>  return [[lhs pet] age] &lt; [[rhs pet] age]; <br>}];<br></p><p>I think that convention works in Objective-C, nil being capable of receiving messages is a cornerstone of the language. But Swift has discouraged the convention of calling functions directly on nil, through Optionals. I believe that removing the comparison operators for Optionals adheres to the same ideas that Optionals themselves are built from.<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the review thoroughly, asked on Twitter, let it sit in the back of my head for an hour. I also had to spend five minutes figuring out the Objective-C block syntax for a filter function.<br></p><p>-- <br>Ash Furrow<br>https://ashfurrow.com/<br></p><p>On July 12, 2016 at 2:26:55 PM, Chris Lattner via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>Hello Swift community,<br></p><p>The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>* What is your evaluation of the proposal?<br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>* Does this proposal fit well with the feel and direction of Swift?<br>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/8955488e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>July 12, 2016 at 10:00:00pm</p></header><div class="content"><p>+1<br></p><p>Conditional conformance cannot arrive soon enough.<br></p><p>On Tue, Jul 12, 2016 at 9:11 PM, Ash Furrow via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt; +1 from me. I particularly like how this adheres to the principle of least<br>&gt; surprise. Keeping == and != is an important part of the proposal, as others<br>&gt; have said.<br>&gt;<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt; I believe so.<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Aye, pretty happy about its direction.<br>&gt;<br>&gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br>&gt; I have: Objective-C! Converting the code from the proposal, we have:<br>&gt;<br>&gt; NSArray *ps = [peeps filter:^BOOL(Person *lhs, Person *rhs) {<br>&gt;   return [[lhs pet] age] &lt; [[rhs pet] age];<br>&gt; }];<br>&gt;<br>&gt; I think that convention works in Objective-C, nil being capable of<br>&gt; receiving messages is a cornerstone of the language. But Swift has<br>&gt; discouraged the convention of calling functions directly on nil, through<br>&gt; Optionals. I believe that removing the comparison operators for Optionals<br>&gt; adheres to the same ideas that Optionals themselves are built from.<br>&gt;<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; I read the review thoroughly, asked on Twitter, let it sit in the back of<br>&gt; my head for an hour. I also had to spend five minutes figuring out the Objective-C<br>&gt; block syntax for a filter function.<br>&gt;<br>&gt; --<br>&gt; Ash Furrow<br>&gt; https://ashfurrow.com/<br>&gt;<br>&gt; On July 12, 2016 at 2:26:55 PM, Chris Lattner via swift-evolution (<br>&gt; swift-evolution at swift.org) wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now<br>&gt; and runs through July 19. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/f48849db/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 12 Jul 2016, at 19:26, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>Strongly in favour.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, though it seems like a small change it removes an ambiguity that can be easy to trip up on. Indeed it&#39;s entirely possible there are people using optional comparison without realising it, so why there may some minor breakage, I think it&#39;s worth causing.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, now that we have the ?? operator there is no need for these comparisons as non-optional comparisons can be used instead with explicitly defined default values, eliminating any possible confusion.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read through, the change is pretty straightforward though.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>July 15, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>Very welcome change that should reduce unexpected behavior in some cases.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, as it could avoid programming mistakes.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Definitely, the more obvious the code reads the better.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>-<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I experienced Swifts behavior in this case since Swift 1.0, and it always felt wrong.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 15, 2016 at 09:00:00am</p></header><div class="content"><p>+1 from me.<br></p><p>I recently had to fix a bug stemming from this which was easy to fix, but not easy to spot.<br></p><p>These operators are quite special; they are plain yes/no assertions used to filter data at a particularly broad level of abstraction. It is usually super-important that you understand exactly what they do. They can’t afford to have hidden edge-cases with potentially surprising results.<br></p><p>Karl<br></p><p><br>&gt; On 12 Jul 2016, at 20:26, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 17, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>Another quick hit. The proposal says this:<br></p><p>&gt;&gt;&gt; Until generics are more mature, the issue of Optional being conditionally Comparable can&#39;t be fully discussed/implemented, so it makes the most sense to remove these questionably-useful operators for now (a breaking change for Swift 3), and add them back in the future if desired.<br></p><p>But I&#39;m not sure I agree with this logic. The feature is already there, and if we keep it, the current version is source-compatible with a conditional-conformance-based version. I&#39;m not convinced the right answer is to throw it away now and potentially reintroduce a completely compatible version later.<br></p><p>If we&#39;re *not* going to introduce a Comparable conformance for Optional, of course, by all means get rid of this today. But I&#39;m not convinced this is the sort of thing we should be afraid to get rid of in the future, and thus, I&#39;m not sure it&#39;s the kind of thing we should be afraid to keep for now until we make a final decision.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e4cf8c436da98736ad247681dc6c89a0?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Mike Sanderson</string> &lt;m at mikesand.com&gt;<p>July 18, 2016 at 02:00:00am</p></header><div class="content"><p>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>+1. Agree the comparison can be surprising, and it also confuses some<br>people trying to understand optionals, apparently; I once couldn&#39;t convince<br>someone how it worked until shortly afterwards for another issue @jckarter<br>phrased it &quot;Optional defines an ordering for itself with nil &lt; everything.&quot;<br>(https://twitter.com/jckarter/status/657266671703359488 ) That Optional<br>defines an ordering for itself also emphasizes that nil &lt; everything is<br>arbitrary.<br></p><p>I think the question of the proposal is exactly &quot;what remains is to decide<br>whether these semantics (that nil is &quot;less than&quot; any non-nil value) are<br>actually useful and worth keeping.&quot;<br></p><p>The Pet example shows how an asymmetry is caused: If someone wanted to<br>filter people who don&#39;t have pets under 6 (so nil would be grouped with the<br>higher numbers), the comparison operator is not useful without further<br>logic-- but not when checking for people who don&#39;t have pets over 6 (nil<br>grouped with the lower numbers).<br></p><p>In an another example, it&#39;s possible when ordering a list, all nil examples<br>should be considered greater than, so that for example in an alphabetized<br>list nil values should appear at the end of the list.<br></p><p>It&#39;s intuitive that nil is less than everything, but in plenty of scenarios<br>that isn&#39;t useful.<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>Yes. Often where these are currently used, as in the proposal examples, the<br>results can be surprising and not useful.<br></p><p>-MikeSand<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/7054c586/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>July 18, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 2016-07-12, at 20:26, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md&gt;<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>If SE-0123 is accepted, then I don’t mind keeping optional comparisons. But I also wouldn’t protest much against removing them until Optional can be made to conditionally conform to Comparable.<br></p><p>If SE-0123 is rejected, then definitely +1; I’ve been bitten several times by accidentally using these while handling the return value of Collection’s index(of:).<br></p><p>I don’t remember ever intentionally using these overloads, except ironically:<br></p><p>https://twitter.com/lorentey/status/657254631660236800 &lt;https://twitter.com/lorentey/status/657254631660236800&gt;<br></p><p>Note though that I often find myself wishing for Optional to implement Comparable. Writing comparison methods for little one-off Comparable structs that wrap Optionals gets tiring after a while. (As the proposal states, the existing overloads fall far short of achieving conditional conformance. I guess I could use these operators in the implementation of my wrapper structs, but I forget they exist.)<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>This depends on the outcome of SE-0123, which aims to eliminate the pitfall that makes these overloads dangerous. <br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think Optional should implement Comparable whenever the wrapped type does. The proposal is a distinct step back from this. On the other hand, if SE-0123 fails, I think it’s worth giving up on this goal in favor of removing a common pitfall.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Languages with implicit optionals do allow comparisons. E.g., &quot;NSNotFound &lt; 42&quot; produces no compiler diagnostic. <br></p><p>C++ has recently gained std::optional, which does provide &lt;/&lt;=/&gt;/&gt;= operators, with the same semantics as Swift, including support for comparing optionals with non-optionals. It also has implicit promotion of values to optionals.<br>http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3672.html#rationale.relops &lt;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3672.html#rationale.relops&gt;<br></p><p>Rust’s std::Option&lt;T&gt; enum implements the std::cmp::Ord trait when T does. So Rust’s optionals are (conditionally) comparable. I believe Rust provides no implicit coercion from T to std::Option&lt;T&gt;, but to be honest I’m not entirely sure.<br>https://doc.rust-lang.org/std/option/enum.Option.html#method.cmp &lt;https://doc.rust-lang.org/std/option/enum.Option.html#method.cmp&gt;<br></p><p>So the few languages I know that support explicit optionals also make them comparable.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading and minimal research.<br></p><p>-- <br>Karoly<br>@lorentey<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/1a1a3a8c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Review] SE-0121: Remove `Optional` Comparison Operators</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>July 18, 2016 at 06:00:00pm</p></header><div class="content"><p>On 12/07/2016 19:26, Chris Lattner via swift-evolution wrote:<br></p><p>&gt; The review of &quot;SE-0121: Remove `Optional` Comparison Operators&quot; begins now and runs through July 19. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt;<br></p><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I approve. I actually filed a (rdar://19366632) in Jan 2015 about this <br>behaviour.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. It can catch out the unwary in several ways and is objectively <br>surprising behaviour.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Well Swift is the main language with explicit optionals that I have used <br>but comparisions with nil/NULL vary in behaviour between languages. In <br>SQL for example NULL is taken as unknown and even an equality <br>comparision between NULL values fails. It could be worth going as far as <br>removing the equality between optionals for this reason (although we <br>could still keep the NilLiteralConvertible (or Swift 3 named version) <br>for equality checks (I would also be fine with reusing the `is` keyword <br>but haven&#39;t thought about that deeply. i.e. `if foo is nil {`<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br></p><p>Read proposal and review discussion so far but have also considered it <br>in the past and have warned about the behaviour in talks in the past.<br></p><p>Joseph<br></p><p>-- <br>Human Friendly Ltd.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
