<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Accepted] SE-0111: Remove type system	significance of function argument labels</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>July  8, 2016 at 09:00:00am</p></header><div class="content"><p>Am 07. Juli 2016 um 10:10 schrieb Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt;:<br></p><p><br>Hey Charlie,<br></p><p><br>The change you reference and this must work together, I have a hard time accepting that we will have a Swift 3 with this change in and no other change that balances it.<br></p><p><br>If this<br></p><p><br>function doItAndLetUsKnow(callback: (Int, Int, Bool) -&gt; ()) {<br></p><p><br>[...]<br></p><p><br>    callback(20,40, true)<br></p><p><br>}<br></p><p><br>is the style we have to use with callbacks from now on, it will be a major regression I would advise a proposal to stop right now.<br></p><p><br>That would indeed be a major regression :-(<br></p><p><br></p><p>-Thorsten<br></p><p><br></p><p><br></p><p> <br>The closure passed around and arriving as a callback there gives me NO clue how to send data to it. How is that for local reasoning?<br>This makes me believe/hope that I am getting it all wrong, so please correct me here :D.<br></p><p><br>If it is not true, then I am blowing things out of proportion and I apologise for this to everyone on the list.<br></p><p><br></p><p><br>Sent from my iPhone<br></p><p>On 7 Jul 2016, at 08:41, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br></p><p><br>There was a fair proposal by Brent (http://article.gmane.org/gmane.comp.lang.swift.evolution/22939) of adding the labels to the name of the variable rather than adding it to the type. And I agree with that since it simplifies the type system.<br></p><p><br>Unfortunately, since Swift 3 is making all the code-breaking changed and Brent&#39;s counterproposal is additive, it leaves at least a year-long period of not having the parameter labels in closures.<br></p><p><br>I agree with the change, I don&#39;t agree with the timing where it doesn&#39;t have a replacement yet.<br></p><p><br>On Jul 7, 2016, at 9:07 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>This feels like making the language a lot worse. Lots of time was recently spent bikeshedding methods names and argument labels and this proposal bans labels use in some cases and encourage people not to use them in others.<br></p><p><br>On 7 Jul 2016, at 05:21, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>func needsCallback(callback: (a: Int, b: Int) -&gt; Void) {<br>    callback(a: 1,b: 2)<br>}<br></p><p><br></p><p><br>func needsCallback(callback: (Int, Int) -&gt; Void) {<br>    callback(1, 2)<br>}<br></p><p><br>Is the first one will be forbidden?<br>So you&#39;d like to keep the second one?<br></p><p><br>I do not understand why someone would want the second example. A great point of both Objective-C and Swift was enforcing parameter labels use to make the code more readable. <br></p><p><br>What if that callback were to need width and height? How is that clear which parameter I need to pass in which order?<br></p><p><br>Considering Swift 3 is our last big chance to break code and fixing the effects of this proposal would break quite a bit of code again... this is a choice it would impact the language for a long time. <br></p><p><br></p><p><br>在 2016年7月7日，11:06，Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br></p><p><br>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br></p><p>The review of &quot;SE-0111: Remove type system significance of function argument labels &quot; ran from June 30 ... July 4, 2016. The proposal has been *accepted*:<br></p><p>The community and core team agree that this proposal will lead to a simplification and clarification of the type system, as well as a more clear user model for parameter labels.  In response to community feedback, the core team is accepting the proposal with a revision to allow “purely cosmetic” parameter labels in closure types for documentation (as outlined in the alternatives section).  The core team also wants to clarify that a call to a value of closure type would not allow use of any parameter labels, some interpretations thought that “arbitrary” parameter labels could be used.<br></p><p>Thank you to Austin Zheng for driving this discussion forward!  I filed SR-2009 to track implementation work on this.<br></p><p>-Chris Lattner<br>Review Manager<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160708/f15cd46c/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
