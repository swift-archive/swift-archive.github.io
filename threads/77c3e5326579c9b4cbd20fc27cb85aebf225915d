<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 28, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0017: Change Unmanaged to use UnsafePointer&quot; begins now and runs through May 3. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>April 28, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 28, 2016, at 11:10 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0017: Change Unmanaged to use UnsafePointer&quot; begins now and runs through May 3. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md<br>&gt; <br></p><p>This is a really unfortunate proposal title.  I would suggest &quot;Add conversions directly between Unmanaged and UnsafePointer&lt;Void&gt;&quot;.<br></p><p>John.<br></p><p>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 28, 2016 at 10:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?This sounds like a great move. I recently used the CFNotificationCenter APIs, where I needed an UnsafePointer from an Unmanaged and the process was a bit surprising. Good to know first off I was even doing it the correct way, and I think this change substantially improves it.<br>	* Is the problem being addressed significant enough to warrant a change to Swift?Yes, I imagine the use case of a pointer is the most wanted.<br>	* Does this proposal fit well with the feel and direction of Swift?Each part with Unmanaged and UnsafePointer seem well thought out and logical, and this change fits in well.<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?The only language I can think of is Objective-C, and I think this matches the flow of __bridge and const void * well.Â <br>Patrick<br></p><p>  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/5e3a4b44/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>April 28, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Apr 28, 2016, at 11:10 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0017: Change Unmanaged to use UnsafePointer&quot; begins now and runs through May 3. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md<br></p><p><br>I have some concerns, but let me just suggest a simple alternative and see what people think...<br></p><p>- Leave the existing from/toOpaque API until we can come up with a better plan for moving away from OpaquePointer.<br></p><p>- Add initializers to avoid boilerplate, but only for &quot;safe&quot; variants of the cast:<br></p><p>extension Unmanaged {<br>  @_transparent<br>  public init(_ from : UnsafePointer&lt;Instance&gt;)<br></p><p>  @_transparent<br>  public init?(_ from : UnsafePointer&lt;Instance&gt;?)<br>}<br></p><p>extension UnsafeMutablePointer where Pointee : AnyObject {<br>  @_transparent<br>  public init(_ from : Unmanaged&lt;Pointee&gt;)<br></p><p>  @_transparent<br>  public init?(_ from : Unmanaged&lt;Pointee&gt;?)<br>}<br></p><p>- This doesn&#39;t solve the stated problem of passing unmanaged pointers to &#39;void*&#39; imports. Is that really an issue? I believe the correct fix is to stop importing &#39;void*&#39; as UnsafePointer&lt;Void&gt;. We should have a nominally distinct &quot;opaque&quot; pointer type, &#39;void*&#39; should be imported as that type, and casting from any UnsafePointer to the opaque pointer type should be inferred and implicit for function arguments. I can send a proposal for eliminating UnsafePointer&lt;Void&gt; next week, but the scope of that proposal will be much broader.<br></p><p>-Andy<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 29, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Apr 28, 2016, at 17:22, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 28, 2016, at 11:10 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0017: Change Unmanaged to use UnsafePointer&quot; begins now and runs through May 3. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md<br>&gt; <br>&gt; <br>&gt; I have some concerns, but let me just suggest a simple alternative and see what people think...<br>&gt; <br>&gt; - Leave the existing from/toOpaque API until we can come up with a better plan for moving away from OpaquePointer.<br>&gt; <br>&gt; - Add initializers to avoid boilerplate, but only for &quot;safe&quot; variants of the cast:<br>&gt; <br>&gt; extension Unmanaged {<br>&gt;  @_transparent<br>&gt;  public init(_ from : UnsafePointer&lt;Instance&gt;)<br>&gt; <br>&gt;  @_transparent<br>&gt;  public init?(_ from : UnsafePointer&lt;Instance&gt;?)<br>&gt; }<br>&gt; <br>&gt; extension UnsafeMutablePointer where Pointee : AnyObject {<br>&gt;  @_transparent<br>&gt;  public init(_ from : Unmanaged&lt;Pointee&gt;)<br>&gt; <br>&gt;  @_transparent<br>&gt;  public init?(_ from : Unmanaged&lt;Pointee&gt;?)<br>&gt; }<br></p><p>This isnât correct; an UnsafeMutablePointer&lt;Foo&gt; is a pointer to a reference to Foo. Unmanaged&lt;Foo&gt; is a wrapper around âunowned Fooâ, i.e. itâs just the reference.<br></p><p><br>&gt; <br>&gt; - This doesn&#39;t solve the stated problem of passing unmanaged pointers to &#39;void*&#39; imports. Is that really an issue? I believe the correct fix is to stop importing &#39;void*&#39; as UnsafePointer&lt;Void&gt;. We should have a nominally distinct &quot;opaque&quot; pointer type, &#39;void*&#39; should be imported as that type, and casting from any UnsafePointer to the opaque pointer type should be inferred and implicit for function arguments. I can send a proposal for eliminating UnsafePointer&lt;Void&gt; next week, but the scope of that proposal will be much broader.<br></p><p>This is one of the few major use cases for Unmanaged: passing objects through C context pointers. If the type of a âvoid *â pointer changes, then this proposal should use that type.<br></p><p>(The other supported uses of Unmanaged are interacting with existing CF APIs that havenât been audited, and dealing with fields of structs with class type, neither of which use fromOpaque/toOpaque. That last actually isnât implemented correctly at the moment; weâre assuming those are all strong references, which they arenât.)<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160429/8d82c6bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>April 30, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Apr 29, 2016, at 5:10 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 28, 2016, at 17:22, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 28, 2016, at 11:10 AM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0017: Change Unmanaged to use UnsafePointer&quot; begins now and runs through May 3. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I have some concerns, but let me just suggest a simple alternative and see what people think...<br>&gt;&gt; <br>&gt;&gt; - Leave the existing from/toOpaque API until we can come up with a better plan for moving away from OpaquePointer.<br>&gt;&gt; <br>&gt;&gt; - Add initializers to avoid boilerplate, but only for &quot;safe&quot; variants of the cast:<br>&gt;&gt; <br>&gt;&gt; extension Unmanaged {<br>&gt;&gt;  @_transparent<br>&gt;&gt;  public init(_ from : UnsafePointer&lt;Instance&gt;)<br>&gt;&gt; <br>&gt;&gt;  @_transparent<br>&gt;&gt;  public init?(_ from : UnsafePointer&lt;Instance&gt;?)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension UnsafeMutablePointer where Pointee : AnyObject {<br>&gt;&gt;  @_transparent<br>&gt;&gt;  public init(_ from : Unmanaged&lt;Pointee&gt;)<br>&gt;&gt; <br>&gt;&gt;  @_transparent<br>&gt;&gt;  public init?(_ from : Unmanaged&lt;Pointee&gt;?)<br>&gt;&gt; }<br>&gt; <br>&gt; This isnât correct; an UnsafeMutablePointer&lt;Foo&gt; is a pointer to a reference to Foo. Unmanaged&lt;Foo&gt; is a wrapper around âunowned Fooâ, i.e. itâs just the reference.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; - This doesn&#39;t solve the stated problem of passing unmanaged pointers to &#39;void*&#39; imports. Is that really an issue? I believe the correct fix is to stop importing &#39;void*&#39; as UnsafePointer&lt;Void&gt;. We should have a nominally distinct &quot;opaque&quot; pointer type, &#39;void*&#39; should be imported as that type, and casting from any UnsafePointer to the opaque pointer type should be inferred and implicit for function arguments. I can send a proposal for eliminating UnsafePointer&lt;Void&gt; next week, but the scope of that proposal will be much broader.<br>&gt; <br>&gt; This is one of the few major use cases for Unmanaged: passing objects through C context pointers. If the type of a âvoid *â pointer changes, then this proposal should use that type.<br>&gt; <br>&gt; (The other supported uses of Unmanaged are interacting with existing CF APIs that havenât been audited, and dealing with fields of structs with class type, neither of which use fromOpaque/toOpaque. That last actually isnât implemented correctly at the moment; weâre assuming those are all strong references, which they arenât.)<br></p><p>Thanks. Now I understand the purpose of this proposal. My concern was that UnsafePointer&lt;Void&gt; is probably not the right type for opaque pointers. I didnât want users to begin rewriting COpaquePointer APIs with UnsafePointer&lt;Void&gt;, then force them to rewrite the same calls again back to some other opaque pointer type once we decide what that should be. I was hoping to sidestep my concerns and meet the goal of reduced syntax, but my suggestion was nonsense.<br></p><p>I can start a separate thread next week on replacing UnsafePointer&lt;Void&gt; and see where that goes. This proposal is probably fine as-is, but there might be less impact for users if we change the imported void* type first. <br></p><p>-Andy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160430/014a20e5/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 29, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 28 Apr 2016, at 19:10, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>Positive, while working with pointers should be avoided, when you have no choice itâs better for them to be as easy as possible to minimise errors, even if we canât eliminate them completely (since thatâs the risk with pointers).<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. While the conversion is trivial, itâs annoying, and essentially involves redundant types, so itâs better to eliminate them entirely.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. While Swift tries to avoid pointers, when they are needed they should be as simple and uncluttered as possible.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick skim, but itâs pretty self-explanatory.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0017: Change Unmanaged to use UnsafePointer</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May  2, 2016 at 11:00:00pm</p></header><div class="content"><p>On Thu, Apr 28, 2016, at 11:10 AM, Chris Lattner wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0017: Change Unmanaged to use UnsafePointer&quot; begins now and runs through May 3. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0017-convert-unmanaged-to-use-unsafepointer.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Going through COpaquePointer is quite annoying when dealing with Unmanaged and C context pointers.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading, and I&#39;ve hit this pain point in my own code before.<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
