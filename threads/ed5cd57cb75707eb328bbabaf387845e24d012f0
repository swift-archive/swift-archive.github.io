<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  5, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br></p><p>Reply text<br></p><p>Other replies<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	• What is your evaluation of the proposal?<br>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>	• Does this proposal fit well with the feel and direction of Swift?<br>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Joe<br>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160205/ed5c12f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February  5, 2016 at 07:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>I’ve known about the tuple splat feature but have never used it in my code or seen a real need for it. Therefore, if removing can simplify the language and the compiler, I’m all for it.<br></p><p>• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I believe so.<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br></p><p>It does fit well with a desire to start simplifying or removing features which are rarely used.<br></p><p>• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have used other functional languages which have that functionality, but I’ve always shed away from it because it made code harder to read.<br></p><p>• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal in detail and read the discussion in the mailing list, so a fairly serious study.<br></p><p>&gt; On 05 Feb 2016, at 19:12, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/1a2d2679/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>February  5, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 10:12, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>I vaguely remember that this feature exists, but have never used it, so I’m in favor of removing it.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes, I’d favor simplicity in the compiler, which could enable easier implementation of new features, than having tuple splats.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick reading.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  5, 2016 at 02:00:00pm</p></header><div class="content"><p>I am fine with this proposal, except for having to name the parameter. The argument should be known as $0, within the function. Explanation and example…<br></p><p>My single use case of where this feature might have worked, actually does not. See the double parentheses:<br></p><p>protocol Protocol {<br>   typealias Arguments<br>   func ƒ1(parameters: Arguments) -&gt; Arguments<br>   func ƒ2(parameters: Arguments)<br>}<br></p><p><br>struct Struct1: Protocol {<br>   typealias Arguments = (goodName: String, otherGoodName: String)<br>   func ƒ1(parameters: Arguments) -&gt; Arguments {<br>      return (goodName: &quot;&quot;, otherGoodName: &quot;&quot;)<br>   }<br>   func ƒ2(parameters: Arguments) {}<br>}<br></p><p>let struct1 = Struct1()<br></p><p>// Too many parentheses are needed, but whatever.<br>// Not a big deal.<br>let struct1Arguments = struct1.ƒ1((goodName: &quot;&quot;, otherGoodName: &quot;&quot;))<br></p><p>struct1.ƒ2(struct1Arguments)<br></p><p><br>Typealiases fall apart when I need a single parameter:<br></p><p>struct Struct2: Protocol {<br>   // Should be (goodName: String) but named 1-tuples don&#39;t work.<br>   typealias Arguments = String<br>   <br>   func ƒ1(parameters: Arguments) -&gt; Arguments {return &quot;&quot;}<br>   func ƒ2(parameters: Arguments) {}<br>}<br></p><p>let struct2 = Struct2()<br></p><p>// No extra parentheses are needed but I don&#39;t know what the argument is.<br>// This is a big deal.<br>let struct2Arguments = struct2.ƒ1(&quot;&quot;)<br></p><p>struct2.ƒ2(struct2Arguments)<br></p><p><br>We need to be able to name the element of a single-item tuple, and we need to stop enforcing internal parameter names:<br></p><p>protocol Protocol {<br>   typealias Arguments<br>   func ƒ1(Arguments) -&gt; Arguments<br>   func ƒ2(Arguments)<br>}<br></p><p>struct Struct: Protocol {<br>   typealias Arguments = (goodName: String)<br>   func ƒ1(Arguments) -&gt; Arguments {<br>      return (goodName: $0.goodName)<br>   }<br>   func ƒ2(Arguments) {}<br>}<br></p><p>let `struct` = Struct()<br>let structArguments = `struct`.ƒ1((goodName: &quot;&quot;))<br>`struct`.ƒ2(structArguments)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/01aec110/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February  6, 2016 at 08:00:00am</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>I never use the feature and therefore wouldn&#39;t miss it. More importantly it<br>is confusing to both human and compiler and therefore should be removed.<br></p><p>• Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Yes, it causes confusion and complicates the compiler.<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, it is a little used feature and part of the direction of Swift is to<br>focus on useful features and not be a collection of all possible ideas.<br></p><p>• If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p>No experience of using the feature in either Swift or other languages.<br></p><p>• How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>I have followed the thread on Swift Evolution.<br></p><p><br>On Saturday, 6 February 2016, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Remove implicit tuple splat behavior from function<br>&gt; applications” begins now and runs through February 9, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt; Review Manager<br>&gt;<br></p><p><br>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/8bc6363c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>February  5, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br></p><p>While I liked the idea the fact it can&#39;t be used to operate on a returned tuple directly means that it can&#39;t be used in the most interesting ways from the functional world (I raised a radar on that rdar://17356912). I also understand the danger of the implicit nature. <br></p><p>In most app development I haven&#39;t used the feature. <br></p><p>While I think a proper explicit splat operator would be nice it is definitely low priority and the specification would need some thought and the main use might be teaching functional fundamentals so I&#39;m not sure how much real use it would get.<br></p><p>Joseph<br></p><p>&gt; On 5 Feb 2016, at 18:12, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt; <br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/8ab1792e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  6, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Joe,<br></p><p>I&#39;m sorry to bring up the &quot;common point of confusion&quot;, but I&#39;d like a<br>little more clarification to help me review :). Your example of valid<br>syntax is this:<br></p><p>func f2&lt;T&gt;(a : T) -&gt; T { ... }let x = (1, 2)<br>f2(x)<br></p><p><br>It gets a little more complicated when generic closures are involved. I am<br>wondering which aspects of this (if any) will still valid:<br></p><p>func call&lt;T,U&gt;(value: T, apply: T-&gt;U) -&gt; U {<br></p><p>    return apply(value)<br></p><p>}<br></p><p>func call2&lt;T,U&gt;(apply: T-&gt;U) -&gt; (T -&gt; U) {<br></p><p>    return { apply($0) }<br></p><p>}<br></p><p>func test(a: Int, b: Int, c: Int) -&gt; (Int, Int) {<br></p><p>    return (a + b, b + c)<br></p><p>}<br></p><p>let a = call((1, 2, 3), apply: test)<br></p><p>let b = call2(test)(1, 2, 3)<br></p><p><br>By my interpretation apply uses &quot;pass an entire argument list as a single<br>value&quot;, so it would be invalid. However I don&#39;t think it has the same<br>syntactic ambiguity that you talked about in your proposal.<br></p><p>*If it is invalid:*<br></p><p>   - Should the compiler only allow (T-&gt;U) to be a function from a single<br>   value?<br>   - Should a change to closure type signatures be more explicit in the<br>   proposal?<br>   - You mention a foo(*x) style solution, this would probably also require<br>   T* equivalent. Is this something that you view as inevitable, do you<br>   think it will be considered within the Swift4 timeframe?<br></p><p>I don&#39;t believe a compiler fixit could resolve this without duplicating call<br> and call2 for different arities, that only works if they are in a module<br>under the user&#39;s control.<br></p><p>A more common example can be seen in:<br> /swift/stdlib/internal/SwiftExperimental/SwiftExperimental.swift<br></p><p>The function composition operator &quot;(f ∘ g)(1,2,3)&quot;.<br></p><p>*Preliminary review:*<br></p><p>In general I&#39;m in favour, it seems like a necessary fix. I can see it being<br>a potential for confusion in most cases. I think it&#39;s unclear how many<br>flow-on effects there may be, and perhaps the impact is underestimated.<br></p><p>However it would be a shame to lose useful function composition utilities,<br>I believe it is only potentially confusing for the few people writing those<br>utilities, not for the many people using them.<br></p><p>Thanks,<br>Andrew<br></p><p><br></p><p>On Sat, Feb 6, 2016 at 8:31 AM, Joseph Lord via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; While I liked the idea the fact it can&#39;t be used to operate on a returned<br>&gt; tuple directly means that it can&#39;t be used in the most interesting ways<br>&gt; from the functional world (I raised a radar on that rdar://17356912). I<br>&gt; also understand the danger of the implicit nature.<br>&gt;<br>&gt; In most app development I haven&#39;t used the feature.<br>&gt;<br>&gt; While I think a proper explicit splat operator would be nice it is<br>&gt; definitely low priority and the specification would need some thought and<br>&gt; the main use might be teaching functional fundamentals so I&#39;m not sure how<br>&gt; much real use it would get.<br>&gt;<br>&gt; Joseph<br>&gt;<br>&gt; On 5 Feb 2016, at 18:12, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Remove implicit tuple splat behavior from function<br>&gt; applications” begins now and runs through February 9, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/09e7ac29/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  8, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 3:54 PM, Andrew Bennett &lt;cacoyi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Joe,<br>&gt; <br>&gt; I&#39;m sorry to bring up the &quot;common point of confusion&quot;, but I&#39;d like a little more clarification to help me review :). Your example of valid syntax is this:<br>&gt; <br>&gt; func f2&lt;T&gt;(a : T) -&gt; T { ... }<br>&gt; let x = (1, 2)<br>&gt; f2(x)<br>&gt; <br>&gt; It gets a little more complicated when generic closures are involved. I am wondering which aspects of this (if any) will still valid:<br>&gt; <br>&gt; func call&lt;T,U&gt;(value: T, apply: T-&gt;U) -&gt; U {<br>&gt;     return apply(value)<br>&gt; }<br>&gt; func call2&lt;T,U&gt;(apply: T-&gt;U) -&gt; (T -&gt; U) {<br>&gt;     return { apply($0) }<br>&gt; }<br>&gt; func test(a: Int, b: Int, c: Int) -&gt; (Int, Int) {<br>&gt;     return (a + b, b + c)<br>&gt; }<br>&gt; <br>&gt; let a = call((1, 2, 3), apply: test)<br>&gt; let b = call2(test)(1, 2, 3)<br>&gt; <br>&gt; By my interpretation apply uses &quot;pass an entire argument list as a single value&quot;, so it would be invalid. However I don&#39;t think it has the same syntactic ambiguity that you talked about in your proposal.<br>&gt; <br>&gt; If it is invalid:<br>&gt; Should the compiler only allow (T-&gt;U) to be a function from a single value?<br>Yeah, AIUI.<br>&gt; Should a change to closure type signatures be more explicit in the proposal?<br>I think so. It&#39;d probably be a good idea to at least change the syntax to require parens around the argument list, (T) -&gt; U, to make this more apparent.<br>&gt; You mention a foo(*x) style solution, this would probably also require T* equivalent. Is this something that you view as inevitable, do you think it will be considered within the Swift4 timeframe?<br>We&#39;re definitely interested in designing a proper solution to this, so that useful generic utilities can still be written. When it lands depends on when we have bandwidth to design and implement it.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/38cc1d1d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  9, 2016 at 07:00:00pm</p></header><div class="content"><p>Thank you very much for your response Joe.<br></p><p>That pretty much clarifies everything I wanted, and I think your points are<br>good for your proposal to be consistent. However I agree with Brent, this<br>is a feature that I use often and I am unsure whether you&#39;re<br>underestimating its use.<br></p><p>I think I would be happy with your proposal if:<br></p><p>   - Brackets around generic parens lists differentiates single and<br>   multiple parameters (as you discussed with me).<br>   - A temporary function was introduced to provide backwards compatibility<br>   (in a generic setting), until a more thoroughly thought-out proposal is<br>   made.<br></p><p>Otherwise, I think that this is a great proposal, but I&#39;m afraid my<br>evaluation is as follows:<br></p><p> • What is your evaluation of the proposal?<br>-1<br></p><p>It&#39;s a necessary change, it removes ambiguity and a gotcha that exercises<br>functionality most users won&#39;t directly take advantage of. However, it does<br>not sufficiently cover the timeline or handling of lost functionality. I<br>feel like it breaks an entire class of existing clear, concise, and robust<br>functions. It also hinders and practical exploration of generic function<br>utilities in Swift.<br></p><p>  • Is the problem being addressed significant enough to warrant a change<br>to Swift?<br>Yes<br></p><p> • Does this proposal fit well with the feel and direction of Swift?<br>Yes and no, I think it fits well in that it reduces surprises and removes<br>ambiguity. However I think that it will put a stop to many Swift libraries,<br>current and future, that use splat to provide function utilities. I feel<br>like this should be a yes, but perhaps the proposal is incomplete in this<br>regard.<br></p><p> • If you have used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?<br>As with Brent, I&#39;ve used other languages with the functionality being<br>removed and I&#39;ve found it extremely useful. The lost functionality can<br>reduce a lot of boilerplate, in many cases making code much more clear,<br>concise, and robust. The lost functionality allows the complexity of<br>generalised functions to abstracted, a user need not know how it works, but<br>can benefit from the added clarity and utility.<br></p><p> • How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>An in-depth study.<br></p><p>I&#39;ve explored what could and could not work after this proposal, in code.<br>I&#39;m using the functionality this proposal removes in production code. I&#39;ve<br>experimented with a non-generic solution to splatting, and the limitations<br>it creates (in a generic context). I&#39;ve also extrapolated from how the<br>removed functionality could be expanded with well designed and thought out<br>language support, and created a proposal (I hope) to pave the way for that.<br></p><p>On Tue, Feb 9, 2016 at 3:01 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Feb 5, 2016, at 3:54 PM, Andrew Bennett &lt;cacoyi at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hi Joe,<br>&gt;<br>&gt; I&#39;m sorry to bring up the &quot;common point of confusion&quot;, but I&#39;d like a<br>&gt; little more clarification to help me review :). Your example of valid<br>&gt; syntax is this:<br>&gt;<br>&gt; func f2&lt;T&gt;(a : T) -&gt; T { ... }let x = (1, 2)<br>&gt; f2(x)<br>&gt;<br>&gt;<br>&gt; It gets a little more complicated when generic closures are involved. I am<br>&gt; wondering which aspects of this (if any) will still valid:<br>&gt;<br>&gt; func call&lt;T,U&gt;(value: T, apply: T-&gt;U) -&gt; U {<br>&gt;     return apply(value)<br>&gt; }<br>&gt; func call2&lt;T,U&gt;(apply: T-&gt;U) -&gt; (T -&gt; U) {<br>&gt;     return { apply($0) }<br>&gt; }<br>&gt; func test(a: Int, b: Int, c: Int) -&gt; (Int, Int) {<br>&gt;     return (a + b, b + c)<br>&gt; }<br>&gt; let a = call((1, 2, 3), apply: test)<br>&gt; let b = call2(test)(1, 2, 3)<br>&gt;<br>&gt;<br>&gt; By my interpretation apply uses &quot;pass an entire argument list as a single<br>&gt; value&quot;, so it would be invalid. However I don&#39;t think it has the same<br>&gt; syntactic ambiguity that you talked about in your proposal.<br>&gt;<br>&gt; *If it is invalid:*<br>&gt;<br>&gt;    - Should the compiler only allow (T-&gt;U) to be a function from a single<br>&gt;    value?<br>&gt;<br>&gt; Yeah, AIUI.<br>&gt;<br>&gt;<br>&gt;    - Should a change to closure type signatures be more explicit in the<br>&gt;    proposal?<br>&gt;<br>&gt; I think so. It&#39;d probably be a good idea to at least change the syntax to<br>&gt; require parens around the argument list, (T) -&gt; U, to make this more<br>&gt; apparent.<br>&gt;<br>&gt;<br>&gt;    - You mention a foo(*x) style solution, this would probably also<br>&gt;    require T* equivalent. Is this something that you view as inevitable,<br>&gt;    do you think it will be considered within the Swift4 timeframe?<br>&gt;<br>&gt; We&#39;re definitely interested in designing a proper solution to this, so<br>&gt; that useful generic utilities can still be written. When it lands depends<br>&gt; on when we have bandwidth to design and implement it.<br>&gt;<br>&gt; -Joe<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/9ad501df/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>February  6, 2016 at 08:00:00am</p></header><div class="content"><p>+1.<br></p><p>I’m in the camp of people who would want an explicit version of this to make an eventual return, ideally as part of a broader suite of &quot;tuple-manipulation operations”.<br></p><p>In such a proposal I’d hope to see, for example, splatting, but also compiler-assistance for things like:<br></p><p>- tuple-concatenation: (a,b)##(c,d) =&gt; (a,b,c,d)<br>- tuple-flattening: (a,(b,(c,d))#flatten =&gt; (a,b,c,d)<br>- tuple-rearrange: (a,b,c,d)#rearrange(($2,$1),($4,$3)) =&gt; ((b,a),(d,c))<br>- tuple-relabel: (a,b,c,d)#relabel(foo:,bar:,baz:,qux:) =&gt; (foo: a, bar: b, baz: c, qux: d)<br>- tuple-unlabel: (foo: a, bar: b, baz: c, qux: d)#unlabel =&gt; (a,b,c,d)<br></p><p>…with the above as examples of the kinds of operations, and not really the syntax; whatever’s chosen, it ought to be possible — although perhaps not *advisable* — to write e.g.:<br></p><p>// plz use a dedicated “zip4&quot; in real life:<br>for (a,b,c,d) in zip(zip(as,bs),zip(cs,ds)).lazy.map(#flatten) { … }<br></p><p>…but that’s enough about tuple operations for now, I just wanted to illustrate some of the operations that be supported. <br></p><p>Moving on, as I’m in favor of the proposal as it stands, I don’t have anything to contribute to the proposal itself.<br></p><p>That said, I *do* think it’s unwise to infer too much from low rates of use for implicit tuple splatting at this time; it seems a little unfair to treat  “this feature doesn’t work&quot; and &quot;no one seems to be using it” as *independent* variables, here.<br></p><p>As one such example, I implemented a large amount of a largely-declarative, combinator-ish “JSON parsing” library that would’ve made heavy use of tuple-splatting *if* it actually worked, but as splatting wound up seeming troublesome I gave up trying to use splatting. <br></p><p>FWIW not having splatting doesn’t change the size of the *library* code very much, but makes each site-of-use substantially-larger.<br></p><p>&gt; On Feb 5, 2016, at 12:12 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/c22b8d0d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February  6, 2016 at 09:00:00pm</p></header><div class="content"><p>I agree with you that tuples theoretically (not sure about practicality)  should be part of something broader (though I have not thought too deeply about it).  <br></p><p>A tuple is not much different than just a heterogeneous list of typed values (immutable).  <br></p><p>A label in a certain way could be seen as another type of some sort - a column header of sorts.  <br></p><p>The same things that you can do on lists should really be available at tuples.  You should be able to append values - which returns a new immutable heterogenous list of the similar types.  <br></p><p>Filter out values, flatten the list, map values from one list to another (including ability to transform labels).  <br></p><p>I do not see them as a function signature, but a collection type.  <br></p><p>&gt; On 2016-02-06, at 21:01:43, plx via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1.<br>&gt; <br>&gt; I’m in the camp of people who would want an explicit version of this to make an eventual return, ideally as part of a broader suite of &quot;tuple-manipulation operations”.<br>&gt; <br>&gt; In such a proposal I’d hope to see, for example, splatting, but also compiler-assistance for things like:<br>&gt; <br>&gt; - tuple-concatenation: (a,b)##(c,d) =&gt; (a,b,c,d)<br>&gt; - tuple-flattening: (a,(b,(c,d))#flatten =&gt; (a,b,c,d)<br>&gt; - tuple-rearrange: (a,b,c,d)#rearrange(($2,$1),($4,$3)) =&gt; ((b,a),(d,c))<br>&gt; - tuple-relabel: (a,b,c,d)#relabel(foo:,bar:,baz:,qux:) =&gt; (foo: a, bar: b, baz: c, qux: d)<br>&gt; - tuple-unlabel: (foo: a, bar: b, baz: c, qux: d)#unlabel =&gt; (a,b,c,d)<br>&gt; <br>&gt; …with the above as examples of the kinds of operations, and not really the syntax; whatever’s chosen, it ought to be possible — although perhaps not *advisable* — to write e.g.:<br>&gt; <br>&gt; // plz use a dedicated “zip4&quot; in real life:<br>&gt; for (a,b,c,d) in zip(zip(as,bs),zip(cs,ds)).lazy.map(#flatten) { … }<br>&gt; <br>&gt; …but that’s enough about tuple operations for now, I just wanted to illustrate some of the operations that be supported. <br>&gt; <br>&gt; Moving on, as I’m in favor of the proposal as it stands, I don’t have anything to contribute to the proposal itself.<br>&gt; <br>&gt; That said, I *do* think it’s unwise to infer too much from low rates of use for implicit tuple splatting at this time; it seems a little unfair to treat  “this feature doesn’t work&quot; and &quot;no one seems to be using it” as *independent* variables, here.<br>&gt; <br>&gt; As one such example, I implemented a large amount of a largely-declarative, combinator-ish “JSON parsing” library that would’ve made heavy use of tuple-splatting *if* it actually worked, but as splatting wound up seeming troublesome I gave up trying to use splatting. <br>&gt; <br>&gt; FWIW not having splatting doesn’t change the size of the *library* code very much, but makes each site-of-use substantially-larger.<br>&gt; <br>&gt;&gt; On Feb 5, 2016, at 12:12 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/83613a91/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  7, 2016 at 09:00:00am</p></header><div class="content"><p>Hi plx,<br></p><p>Please take a look at my proposal:<br>    http://comments.gmane.org/gmane.comp.lang.swift.evolution/5334<br></p><p>It introduces tuple operators capable of doing many of the things you<br>suggest.<br></p><p>In case you missed it, you can currently do unlabel/relabel like this:<br></p><p><br>    let m = (a: 1, b: 2) as (Int,Int) as (c: Int, d: Int)<br></p><p>It&#39;s just not as concise.<br></p><p><br></p><p><br>On Sun, Feb 7, 2016 at 1:01 AM, plx via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1.<br>&gt;<br>&gt; I’m in the camp of people who would want an explicit version of this to<br>&gt; make an eventual return, ideally as part of a broader suite of<br>&gt; &quot;tuple-manipulation operations”.<br>&gt;<br>&gt; In such a proposal I’d hope to see, for example, splatting, but also<br>&gt; compiler-assistance for things like:<br>&gt;<br>&gt; - tuple-concatenation: (a,b)##(c,d) =&gt; (a,b,c,d)<br>&gt; - tuple-flattening: (a,(b,(c,d))#flatten =&gt; (a,b,c,d)<br>&gt; - tuple-rearrange: (a,b,c,d)#rearrange(($2,$1),($4,$3)) =&gt; ((b,a),(d,c))<br>&gt; - tuple-relabel: (a,b,c,d)#relabel(foo:,bar:,baz:,qux:) =&gt; (foo: a, bar:<br>&gt; b, baz: c, qux: d)<br>&gt; - tuple-unlabel: (foo: a, bar: b, baz: c, qux: d)#unlabel =&gt; (a,b,c,d)<br>&gt;<br>&gt; …with the above as examples of the kinds of operations, and not really the<br>&gt; syntax; whatever’s chosen, it ought to be possible — although perhaps not<br>&gt; *advisable* — to write e.g.:<br>&gt;<br>&gt; // plz use a dedicated “zip4&quot; in real life:<br>&gt; for (a,b,c,d) in zip(zip(as,bs),zip(cs,ds)).lazy.map(#flatten) { … }<br>&gt;<br>&gt; …but that’s enough about tuple operations for now, I just wanted to<br>&gt; illustrate some of the operations that be supported.<br>&gt;<br>&gt; Moving on, as I’m in favor of the proposal as it stands, I don’t have<br>&gt; anything to contribute to the proposal itself.<br>&gt;<br>&gt; That said, I *do* think it’s unwise to infer too much from low rates of<br>&gt; use for implicit tuple splatting at this time; it seems a little unfair to<br>&gt; treat  “this feature doesn’t work&quot; and &quot;no one seems to be using it” as<br>&gt; *independent* variables, here.<br>&gt;<br>&gt; As one such example, I implemented a large amount of a<br>&gt; largely-declarative, combinator-ish “JSON parsing” library that would’ve<br>&gt; made heavy use of tuple-splatting *if* it actually worked, but as splatting<br>&gt; wound up seeming troublesome I gave up trying to use splatting.<br>&gt;<br>&gt; FWIW not having splatting doesn’t change the size of the *library* code<br>&gt; very much, but makes each site-of-use substantially-larger.<br>&gt;<br>&gt; On Feb 5, 2016, at 12:12 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Remove implicit tuple splat behavior from function<br>&gt; applications” begins now and runs through February 9, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/1084d635/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February  7, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>Strongly in favor of. In it&#39;s current form tuple splatting seems to be more trouble than it&#39;s worth.<br></p><p>Personally I&#39;ve never made much use of it beyond simple experiments and it could always be reintroduced in a more fully baked form if there are compelling use cases.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p><br>I&#39;ve read the review and followed the discussion here on the mailing list.<br></p><p>- Janosch<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>February  7, 2016 at 03:00:00pm</p></header><div class="content"><p>+1 for removing implicit tuple splat.<br></p><p>I think this is a rarely used feature and would fit well in the Swift 3 goal of cleaning up the type system. I believe this would also solve some ambiguities that, IMO, cannot be properly solved, e.g.<br></p><p>func f(x: Any) {<br>  print(&quot;Any&quot;)<br>}<br></p><p>func f(a: Int, _ b: Int) {<br>  print(&quot;Int, Int&quot;)<br>}<br></p><p><br>f(3,4) // Currently resolved as f(Int, Int)<br></p><p>let a = (3,4)<br>f(a) // Currently resolved as f(Int, Int)<br></p><p>f(a as Any) // Currently resolved as f(Any)<br></p><p>f((3,4)) // Currently ambigous expression<br></p><p>If tuple splatting is not remove, I think that there should be a consistent solution to resolving ambiguity in the example provided above (in particular I think that there shouldn’t be a difference between f(a) and f((3,4)). I already tried to solve this issue but am not going to put more effort into it until this proposal is decided.<br></p><p>- Alex<br></p><p>&gt; On 05 Feb 2016, at 19:12, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/ff661cb2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February  7, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 1:12 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>I do not use tuple splatting in Swift. Thus, if removing it will contribute to cleaning up the language and the compiler, then I support the change.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Sometimes we have to take a step backwards before taking two steps forward. We heard multiple proposals to better support the notion of tuple splatting during the debate following this proposal. However, it strikes me that none of these proposals can happen until the existing tuple splatting feature has been removed. Thus, I think it significant to progress.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, for reasons I have already stated.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have never seen or used tuple splatting in any language. However, I have used array splatting in Ruby, which I found very useful on occasion.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal and the debate following the proposal very carefully.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/9c98c874/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February  7, 2016 at 02:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br>+1<br>• Is the problem being addressed significant enough to warrant a change to<br>Swift?<br>Yes. Though I am in favor of thinking about functions as maps from tuple to<br>tuple, the current behavior has too many nuanced wrinkles.<br>• Does this proposal fit well with the feel and direction of Swift?<br>Yes<br>• If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br>errr… yes?<br>• How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>I have followed the discussion, commented previously, and have both used<br>and explained the behavior being changed.<br></p><p><br>On Sun, Feb 7, 2016 at 11:23 AM, Patrick Gili via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Feb 5, 2016, at 1:12 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Remove implicit tuple splat behavior from function<br>&gt; applications” begins now and runs through February 9, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt;<br>&gt;<br>&gt; I do not use tuple splatting in Swift. Thus, if removing it will<br>&gt; contribute to cleaning up the language and the compiler, then I support the<br>&gt; change.<br>&gt;<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt;<br>&gt; Sometimes we have to take a step backwards before taking two steps<br>&gt; forward. We heard multiple proposals to better support the notion of tuple<br>&gt; splatting during the debate following this proposal. However, it strikes me<br>&gt; that none of these proposals can happen until the existing tuple splatting<br>&gt; feature has been removed. Thus, I think it significant to progress.<br>&gt;<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; Yes, for reasons I have already stated.<br>&gt;<br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br>&gt;<br>&gt; I have never seen or used tuple splatting in any language. However, I have<br>&gt; used array splatting in Ruby, which I found very useful on occasion.<br>&gt;<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt;<br>&gt; I read the proposal and the debate following the proposal very carefully.<br>&gt;<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/4beb6087/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d1bff9080a4237cc9b79c5751afb6f7?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Jarod Long</string> &lt;swift at lng.la&gt;<p>February  7, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>+1. I don&#39;t quite agree that it&#39;s purely a sugar feature -- the use-case I brought up in the discussion thread involves the use of generics in combination with tuple splatting, and removing the feature would require abandoning type safety by using Any typing or writing lots and lots of duplicate code.<br></p><p>That said, I do think that this feature should be redesigned and replaced, and given that it&#39;s not practical to do so in time for Swift 3, and that we want to minimize backwards compatibility breaks after Swift 3, it&#39;s important to remove the existing feature now. My personal use case mentioned above is only used to facilitate testing, where type safety is less important, so dropping down to Any typing is fine as a temporary workaround.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, for the reasons described above.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don&#39;t have experience with tuple splatting outside of Swift.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the entire proposal and participated in the original discussion.<br></p><p>Jarod<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>-1.<br></p><p>As I said in the preliminary discussion, I use this feature reasonably often and I think my code is better for it. I won&#39;t repeat the details here, but suffice it to say, I could work around its absence if I had to but my code would be worse for it.<br></p><p>I do agree that the problems described in the proposal are real, but I think the feature&#39;s value is underestimated, and I think the proposed solution maximizes migration difficulties.<br></p><p>I don&#39;t agree with the proposal&#39;s blithe assertion that tuple splat &quot;is purely a sugar feature&quot;. Tuple splat allows you to write generic functions that work with a function of any arity; in fact, it allows *most* generic functions to work in this fashion, even built-in ones like `map` which are designed for unary functions. Even something so simple as a function composition operator is impossible to write without it. In short, you *can* work around its absence, but only by distorting your code and obscuring its purpose—and to a far greater extent than this proposal complains about tuple splat doing.<br></p><p>Finally—and perhaps most importantly, because we&#39;re setting a precedent here—the proposal seems very concerned with breaking code now rather than later. However, if the feature is removed without replacement, and then a replacement is added in a later version, that means people using this feature will have to change their code twice: once to remove implicit tuple splat, and again to adopt its eventual replacement. And if the fix-it essentially involves creating a closure to wrap the call, it seems unlikely that removing that closure can be fix-it guided, so the second change will have to be done manually.<br></p><p>Thus, for those using the feature, removing it in Swift 3 and re-adding it in a later version is *more* disruptive than replacing it in Swift 4 or some other future release cycle, while for those *not* using the feature, both strategies cause the same amount of disruption (none).<br></p><p>It&#39;s one thing to remove features we don&#39;t want to keep, like the `++` operator, or disable only-the-test-suite-will-notice corner cases due to implementation limits, like the curried super calls. It&#39;s another thing to remove features we think are a good idea, but want to redesign at some unspecified future date.<br></p><p>Like preemptive war, preemptive feature removal is not an action to be taken lightly. If we want to remove it and replace it, fine. If we want to remove it and *not* replace it, let&#39;s talk about that. But removing it and maybe replacing it eventually, but probably not in this release cycle, is essentially the most disruptive possible way this could be handled.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, but I don&#39;t think the change that should be made is to simply delete the feature and defer any decisions on its replacement.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>In the sense that we seem to be seeking a stronger separation between tuples and parameters, yes. In the sense that Swift attempts to make higher-order functions practical, no.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve used languages with a variety of parameter type arrangements, and I&#39;ve always found splatting very useful. I found it useful in Swift, too.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A full reading of the proposal, participation in the preliminary discussion thread, review of my codebases to look at where I had used it. I have not really looked at the implementation issues, but other than that, I think I have a pretty good understanding of this proposal.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/743ea9b8e49fa6a8390b2f4b3e1a588f?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Jerome ALVES</string> &lt;j.alves at me.com&gt;<p>February  9, 2016 at 10:00:00am</p></header><div class="content"><p>Hello,<br></p><p>I use this feature to make generic &quot;weak target actions&quot; like this :<br></p><p><br>func weakTarget&lt;T, S: AnyObject&gt;(target: S, action: S -&gt; (T -&gt; Void)) -&gt; (T -&gt; Void) {<br>    return { [weak target] (input: T) -&gt; Void in<br>        guard let target = target else { return }<br>        return action(target)(input)<br>    }<br>}<br></p><p>class Target {<br>    init() {}<br>    func printHello(firstName: String, lastName: String) {<br>        print(&quot;Hello \(firstName) \(lastName) !&quot;)<br>    }<br>}<br></p><p>class Receiver {<br>    init() {}<br>    var printSomething: ((String, String) -&gt; Void)? = nil<br>}<br></p><p>var aTarget: Target? = Target()<br>let aReceiver = Receiver()<br></p><p>aReceiver.printSomething = weakTarget(aTarget!, action: Target.sayHello)<br></p><p>aReceiver.printSomething?(&quot;Jérôme&quot;, &quot;Alves&quot;) // =&gt; &quot;Hello Jérôme Alves !&quot;<br></p><p>a = nil<br></p><p>aReceiver.printSomething?(&quot;Jérôme&quot;, &quot;Alves&quot;) // =&gt; aReceiver.printSomething still has a value, but it does nothing<br></p><p><br>As you can see, if you call weakFunc() with a func which has multiple arguments, the T generic will be a tuple and I guess this is thanks to this &quot;implicit tuple splat&quot; feature but I&#39;m not sure.<br>So can someone enlighten me ? Will this code continue to work if this proposal is approved ?<br></p><p><br>&gt; Le 5 févr. 2016 à 19:12, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Remove implicit tuple splat behavior from function applications” begins now and runs through February 9, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md &lt;http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md&gt;<br>&gt; <br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/425405d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Review] SE-0029 Remove implicit tuple splat behavior from function applications</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>February  9, 2016 at 11:00:00am</p></header><div class="content"><p>-0.5, I agree with Andrew Bennett and Brent Roayal-Gordon.<br></p><p>I use this functionality a lot, which means I&#39;ve had to experience and<br>navigate around the inconsistencies and bugs of the current implementation,<br>but removing this functionality all together would leave us with a<br>significantly less capable/expressive language.<br></p><p>IMHO this (albeit buggy) aspect of the language is what allows one of its<br>key must-have-features, namely being able to work with generic higher order<br>functions in an (almost) acceptable way.<br></p><p>Suddenly loosing the ability to write and use higher order generic<br>functions (eg generic function composition, generic function application,<br>without having to special-case for every arity etc) would severely bloat my<br>code and decrease my productivity.<br></p><p>I was delighted to see Swift resurfacing these simple yet powerful and,<br>really, basic tools of programming. Now I&#39;m not sure what to expect. I fear<br>that I will have to seriously consider moving back to using C++ templates :<br>( or perhaps resort to always use only a single tuple parameter, like eg<br>this:<br>func f(args: (T, T)) -&gt; T { ... }<br>instead of this:<br>func f(a: T, b: T) -&gt; T { ... }<br>How else would I be able to do simple stuff like composing them etc?<br></p><p>/Jens<br></p><p><br>On Tue, Feb 9, 2016 at 10:13 AM, Jerome ALVES via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I use this feature to make generic &quot;weak target actions&quot; like this :<br>&gt;<br>&gt;<br>&gt; func weakTarget&lt;T, S: AnyObject&gt;(target: S, action: S -&gt; (T -&gt; Void)) -&gt;<br>&gt; (T -&gt; Void) {<br>&gt;     return { [weak target] (input: T) -&gt; Void in<br>&gt;         guard let target = target else { return }<br>&gt;         return action(target)(input)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; class Target {<br>&gt;     init() {}<br>&gt;     func printHello(firstName: String, lastName: String) {<br>&gt;         print(&quot;Hello \(firstName) \(lastName) !&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; class Receiver {<br>&gt;     init() {}<br>&gt;     var printSomething: ((String, String) -&gt; Void)? = nil<br>&gt; }<br>&gt;<br>&gt; var aTarget: Target? = Target()<br>&gt; let aReceiver = Receiver()<br>&gt;<br>&gt; aReceiver.printSomething = weakTarget(aTarget!, action: Target.sayHello)<br>&gt;<br>&gt; aReceiver.printSomething?(&quot;Jérôme&quot;, &quot;Alves&quot;) // =&gt; &quot;Hello Jérôme Alves !&quot;<br>&gt;<br>&gt; a = nil<br>&gt;<br>&gt; aReceiver.printSomething?(&quot;Jérôme&quot;, &quot;Alves&quot;) //<br>&gt; =&gt; aReceiver.printSomething still has a value, but it does nothing<br>&gt;<br>&gt;<br>&gt; As you can see, if you call weakFunc() with a func which has multiple<br>&gt; arguments, the T generic will be a tuple and I guess this is thanks to this<br>&gt; &quot;implicit tuple splat&quot; feature but I&#39;m not sure.<br>&gt; So can someone enlighten me ? Will this code continue to work if this<br>&gt; proposal is approved ?<br>&gt;<br>&gt;<br>&gt; Le 5 févr. 2016 à 19:12, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Remove implicit tuple splat behavior from function<br>&gt; applications” begins now and runs through February 9, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; http://github.com/apple/swift-evolution/blob/master/proposals/0029-remove-implicit-tuple-splat.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt;<br>&gt; *What goes into a review?*<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Joe<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/cd47bd77/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
