<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Please allow me to introduce myself</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>February 17, 2016 at 07:00:00pm</p></header><div class="content"><p>as Brent Royal-Gordon correctly wrote to me in swift-dev,<br>my introduction was meant to be in swift-evolution,<br>not in swift-dev. By my mistake, it landed there a few days ago…<br></p><p>Swift-dev is for compiler magicians, which I deeply respect.<br>I know nearly nothing about making complies and linkers.<br></p><p>Anyway, here it is. after this I wil be more concise and<br>bring up single topics in separate emails. <br>Thanks<br>Ted <br></p><p><br>&gt; <br>&gt; <br>&gt; Hello. This is my first time here, so please allow me to introduce myself.. thank you.<br>&gt; Grab a chair. Coffee? <br>&gt; I&#39;ve worked with many programming languages since 1979. Interesting years.<br>&gt; Fortran, Cobol, PL/1 C, CSP, C++, Java, Microprocessor, Assembler, Rexx, Pascal, <br>&gt; Smalltalk, APL,  etc. Objective C, and also Swift since it became available. <br>&gt; OOD/OOP is my Holy Grail: the thing we found &quot;somehow-something-is-missing-but-dunno-what?”<br>&gt; before it came along :o)  My current creativity is RavelNotes, an ObjC/Swift hybrid iPad app <br>&gt; and under construction is a 3D game app with Swift/SceneKit for Apple TV. <br>&gt; I am 65: Now that I am retiring, app development will be the main thing for me to do <br>&gt; because it is fun and  also because I simply cannot stop making software… <br>&gt; and I have lots of time for it.. without any quality compromising deadlines...<br>&gt; <br>&gt; <br>&gt; I am quite happy with Swift! It connects really good with the stuff that is already inside <br>&gt; my head allowing me to transfer my ideas and creativity into the virtual world without<br>&gt; too much hassle in-between. Swift is still new, but right from the start it has everything <br>&gt; I need and could wish for!  There is really not that much missing, if any. <br>&gt; Thanks to Chris Lattner and team: you guys did a really amazing job!  <br>&gt; <br>&gt; Thanks for reading.. <br>&gt; still here? OK<br>&gt; --------------------------------------------------------------------------------<br>&gt; <br>&gt; 1. On removing (possibly) superfluous language elements<br>&gt; <br>&gt; IMHO it is nearly impossible to estimate whether or not a certain language element<br>&gt; will or will not useful now or in the future. It&#39;s like Lego. So don&#39;t remove bricks from the <br>&gt; box that you might think will not be used anymore, just because a quick scan in the <br>&gt; neighborhood in GitCity  reveals that at the moment no others are using this kinda bricks...<br>&gt; <br>&gt; So why not keep these things like i++ i--<br>&gt; and the C-style for loop? More important imho: do the best to maintain downward compatibility <br>&gt; e.g. save us from modifying 10000 source files written in 2016 in say 2021 when Swift 8.0 arrives..<br>&gt; <br>&gt; --------------------------------------------------------------------------------<br>&gt; <br>&gt; 2: Swift &quot;for&quot; statement: why not add this variants:<br>&gt;  (to get rid of reverse, strides, generators..and other indirect stuff)<br>&gt; <br>&gt; for i in 12 to 0 by -2 <br>&gt; <br>&gt; for v:Double in x1 to -2.8 by -0.1   <br>&gt; <br>&gt; Swift could handle that implicitly. Most languages have these loops.<br>&gt; --------------------------------------------------------------------------------<br>&gt; <br>&gt; 3 . I beg you! Please, please, please implement implicit conversion between Floats/CGFloats/Double..<br>&gt; Why does one need to convert floating point vars explicitly?<br>&gt; Yes, one can loose precision, but we know that, don&#39;t we? <br>&gt; --------------------------------------------------------------------------------<br>&gt; <br>&gt; 4 Tuples:  please take a look at this code:  <br>&gt; <br>&gt;  static var z: UInt8 = 0  // initalize tuple with 256 UInt8 values, bytes:<br>&gt;     <br>&gt;     // Silly: why not an array instead of this.. a tuple is needed.. length must be exact 256..<br>&gt;     // know of no other way to create a tuple with 256 elements...<br>&gt;     var midiDataTuple = (z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z,<br>&gt;  z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, <br>&gt; z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, <br>&gt; z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, <br>&gt; z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z,<br>&gt;  z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z, z)<br>&gt; <br>&gt;     <br>&gt;     func midiSend(status: Int, val1: Int, val2 :Int)<br>&gt;     {<br>&gt;         var midipacket = MIDIPacket()<br>&gt;         <br>&gt;         midipacket.timeStamp = 0<br>&gt;         midipacket.length    = 3<br>&gt;         midipacket.data      = midiDataTuple  //&lt;-=&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br>&gt;         <br>&gt;         midipacket.data.0 = UInt8(status)<br>&gt;         midipacket.data.1 = UInt8(val1  )<br>&gt;         midipacket.data.2 = UInt8(val2  )<br>&gt;         <br>&gt;         var midipacketlist = MIDIPacketList(numPackets: 1, packet: midipacket)<br>&gt;         <br>&gt;         MIDIReceived(midiSource, &amp;midipacketlist)<br>&gt;     }<br>&gt;     <br>&gt; I can&#39;t treat tuples as an array, which in this case would be handy to initialize all the tuple elements.<br>&gt; <br>&gt; IfTrue: Why are tuples the only data type to use for unmanaged byte arrays? <br>&gt; <br>&gt; --------------------------------------------------------------------------------<br>&gt; <br>&gt; Sideways: fun &amp; inspiration: take a look at APL.. [I&#39;ll wait here]  this language uses mostly symbols for operations. <br>&gt; E.g. it has an excellent set of chars for Set operations. To experiment with this,  replaced Xcode&#39;s source font with <br>&gt; an APLFont and then define operator extensions for some APL characters like e.g. Ro to get or alter the shape <br>&gt; of a multi dimensional array    or  +/   to sum a vector.<br>&gt; <br>&gt; <br>&gt; Regards<br>&gt; Ted<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/fdd8ee7a/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
