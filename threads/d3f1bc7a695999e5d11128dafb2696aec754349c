<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/80cc9ac2aefba975bdbf2881e3df8238?s=50"></div><header><strong>NSJSONSerialization and bridging</strong> from <string>Ian Partridge</string> &lt;ipartridge at gmail.com&gt;<p>March  4, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi, I&#39;ve been reviewing the current status of NSJSONSerialization.<br></p><p>There is an implementation of JSONObjectWithData() and some tests, but<br>dataWithJSONObject() is unimplemented.<br></p><p>One thing I noticed is that the signature of JSONObjectWithData() has<br>been modified so it returns Any instead of AnyObject.  I guess this is<br>to allow bridging to stdlib types like Dictionary and Array?<br></p><p>Should a future implementation of dataWithJSONObject() accept Any<br>instead of AnyObject to match?  What are the consequences for<br>compatibility with existing code that uses NSJSONSerialization?<br></p><p>Finally, is there any progress to report on the bridging issue?  The<br>lack of bridging between stdlib and Foundation types on Linux is a<br>pain point at the moment.<br></p><p>Thanks for your time!<br></p><p>-- <br>Ian Partridge<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>NSJSONSerialization and bridging</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>March  4, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Ian,<br></p><p>We haven’t really made any progress in this area, unfortunately.<br></p><p>It would be awesome if someone could take up the banner of getting bridging to work on non-ObjC platforms. That would make this performance problem on Linux significantly less burdensome.<br></p><p>- Tony<br></p><p>&gt; On Mar 4, 2016, at 9:24 AM, Ian Partridge via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, I&#39;ve been reviewing the current status of NSJSONSerialization.<br>&gt; <br>&gt; There is an implementation of JSONObjectWithData() and some tests, but<br>&gt; dataWithJSONObject() is unimplemented.<br>&gt; <br>&gt; One thing I noticed is that the signature of JSONObjectWithData() has<br>&gt; been modified so it returns Any instead of AnyObject.  I guess this is<br>&gt; to allow bridging to stdlib types like Dictionary and Array?<br>&gt; <br>&gt; Should a future implementation of dataWithJSONObject() accept Any<br>&gt; instead of AnyObject to match?  What are the consequences for<br>&gt; compatibility with existing code that uses NSJSONSerialization?<br>&gt; <br>&gt; Finally, is there any progress to report on the bridging issue?  The<br>&gt; lack of bridging between stdlib and Foundation types on Linux is a<br>&gt; pain point at the moment.<br>&gt; <br>&gt; Thanks for your time!<br>&gt; <br>&gt; -- <br>&gt; Ian Partridge<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>NSJSONSerialization and bridging</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>March  5, 2016 at 10:00:00am</p></header><div class="content"><p>swift-corelibs-dev-bounces at swift.org wrote on 03/04/2016 05:44:31 PM:<br>&gt;<br>&gt; We haven’t really made any progress in this area, unfortunately.<br>&gt;<br>&gt; It would be awesome if someone could take up the banner of getting<br>&gt; bridging to work on non-ObjC platforms.<br></p><p>Hi Tony,<br></p><p>	I&#39;d be happy to be some of the development &quot;muscle&quot; to help execute a<br>plan, but I don&#39;t yet have the overall grasp of the Swift implementation<br>needed to propose a plan.<br></p><p>	I think the libdispatch import/object model task I&#39;m working on now<br>is probably a useful warmup exercise, but even after that is done I expect<br>I&#39;ll need some pointers on how to tackle the bigger problem of bridging in<br>general.<br></p><p>	Is there are chance there is a design worked out for bridging<br>alternatives on Linux that could be shared?<br></p><p>thanks,<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160305/14bc0056/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
