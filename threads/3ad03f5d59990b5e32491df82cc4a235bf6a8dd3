<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June  8, 2016 at 06:00:00pm</p></header><div class="content"><p>The review of SE-0099 &quot;Restructuring Condition Clauses&quot; ran from January 13...18, 2016. The proposal has been accepted with revision for Swift 3. There was near unanimous agreement that the Swift 2 grammar was inconsistent and ambiguous and should be changed; most of the disagreement centered on how. Many alternatives were discussed, including the following:<br></p><p>- The proposal as written suggests using &#39;;&#39; or newline as a separator. To many people, this looked heavy, and it&#39;s also inconsistent with the rest of the language, which never otherwise used semicolon as an intra-statement separator (except in the defunct for;; loop).<br>- Introducing a keyword separator, such as using &#39;where&#39; everywhere or introducing a new &#39;and&#39; keyword, is also bulky and either reads poorly or requires stealing new keywords.<br>- Some commenters suggested using &#39;&amp;&amp;&#39; for consistency with simple boolean conditions. This isn&#39;t workable due to precedence issues.<br>- The ambiguities arise from the fact that there are comma-separated lists within comma-separated lists—within the list of conditions, each &#39;case&#39; or &#39;let&#39; condition can have multiple declarations. If we eliminated this feature, so that every &#39;case&#39; or &#39;let&#39; condition had to start with &#39;case&#39; or &#39;let&#39;, the ambiguity is resolved, and comma can remain the condition separator. This does break consistency with non-conditional &#39;let&#39; declarations and case clauses in &#39;switch&#39; but is otherwise workable.<br></p><p>Of these alternatives, the core team found the last one to be the best choice. &#39;case&#39; and &#39;let&#39; conditions should each specify a single declaration, comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer. Some code becomes more verbose, but in common formatting patterns, it aligns more nicely, as in:<br></p><p>	guard<br>	  let x = foo(),<br>	  let y = bar(),<br>	  let z = bas(),<br>	  x == y || y == z else {<br>	}<br></p><p>and though it breaks commonality between &#39;let&#39; conditions and &#39;let&#39; declarations, it&#39;s more important to preserve higher-level consistency throughout the language in how components of expressions and statements are separated. Thanks everyone for the discussion, and thanks Erica and Chris for the proposal! Since, aside from the approved syntax, the fundamental thrust of the proposal remains the same, Chris has volunteered to revise it to be in line with the approved decision.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160608/3ad08dd3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  8, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Of these alternatives, the core team found the last one to be the best choice. &#39;case&#39; and &#39;let&#39; conditions should each specify a single declaration, comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer. Some code becomes more verbose, but in common formatting patterns, it aligns more nicely, as in:<br>&gt; <br>&gt; 	guard<br>&gt; 	  let x = foo(),<br>&gt; 	  let y = bar(),<br>&gt; 	  let z = bas(),<br>&gt; 	  x == y || y == z else {<br>&gt; 	}<br>&gt; <br>&gt; and though it breaks commonality between &#39;let&#39; conditions and &#39;let&#39; declarations, it&#39;s more important to preserve higher-level consistency throughout the language in how components of expressions and statements are separated.<br></p><p>I think this is a pretty good way to split the baby, especially because it actually improves an issue which always led to awkward indentation problems.<br></p><p>Even with this change, I believe you&#39;ll be able to avoid redundant `case` keywords by using tuples:<br></p><p>	guard case (.none, .none, .none) = (foo(), bar(), bas()) else {<br></p><p>However, if-let does not permit the analogous construct:<br></p><p>	guard let (x, y, z) = (foo(), bar(), bas()) else {<br></p><p>Now that we&#39;re moving away from allowing compound if-lets, I think it might be a good idea to revisit that decision. Would this be better handled as a separate proposal?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June  8, 2016 at 09:00:00pm</p></header><div class="content"><p>On Jun 8, 2016, at 7:27 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; However, if-let does not permit the analogous construct:<br>&gt; <br>&gt; 	guard let (x, y, z) = (foo(), bar(), bas()) else {<br>&gt; <br>&gt; Now that we&#39;re moving away from allowing compound if-lets, I think it might be a good idea to revisit that decision. Would this be better handled as a separate proposal?<br></p><p>Yes, this should be a follow up pitch/proposal.  Thanks Brent,<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 12:00:00am</p></header><div class="content"><p>I am deeply saddened that a little part of character is lost in swift with the removal of where (imo). But I can be happy that ; is not being used I guess. <br></p><p>My question: what is/was the rationale for adding where to swift 2? We seem to just be removing it everywhere now (or at least the proposals will be incoming)<br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 8, 2016, at 9:47 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The review of SE-0099 &quot;Restructuring Condition Clauses&quot; ran from January 13...18, 2016. The proposal has been accepted with revision for Swift 3. There was near unanimous agreement that the Swift 2 grammar was inconsistent and ambiguous and should be changed; most of the disagreement centered on how. Many alternatives were discussed, including the following:<br>&gt; <br>&gt; - The proposal as written suggests using &#39;;&#39; or newline as a separator. To many people, this looked heavy, and it&#39;s also inconsistent with the rest of the language, which never otherwise used semicolon as an intra-statement separator (except in the defunct for;; loop).<br>&gt; - Introducing a keyword separator, such as using &#39;where&#39; everywhere or introducing a new &#39;and&#39; keyword, is also bulky and either reads poorly or requires stealing new keywords.<br>&gt; - Some commenters suggested using &#39;&amp;&amp;&#39; for consistency with simple boolean conditions. This isn&#39;t workable due to precedence issues.<br>&gt; - The ambiguities arise from the fact that there are comma-separated lists within comma-separated lists—within the list of conditions, each &#39;case&#39; or &#39;let&#39; condition can have multiple declarations. If we eliminated this feature, so that every &#39;case&#39; or &#39;let&#39; condition had to start with &#39;case&#39; or &#39;let&#39;, the ambiguity is resolved, and comma can remain the condition separator. This does break consistency with non-conditional &#39;let&#39; declarations and case clauses in &#39;switch&#39; but is otherwise workable.<br>&gt; <br>&gt; Of these alternatives, the core team found the last one to be the best choice. &#39;case&#39; and &#39;let&#39; conditions should each specify a single declaration, comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer. Some code becomes more verbose, but in common formatting patterns, it aligns more nicely, as in:<br>&gt; <br>&gt; 	guard<br>&gt; 	  let x = foo(),<br>&gt; 	  let y = bar(),<br>&gt; 	  let z = bas(),<br>&gt; 	  x == y || y == z else {<br>&gt; 	}<br>&gt; <br>&gt; and though it breaks commonality between &#39;let&#39; conditions and &#39;let&#39; declarations, it&#39;s more important to preserve higher-level consistency throughout the language in how components of expressions and statements are separated. Thanks everyone for the discussion, and thanks Erica and Chris for the proposal! Since, aside from the approved syntax, the fundamental thrust of the proposal remains the same, Chris has volunteered to revise it to be in line with the approved decision.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/56b4ad2b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  9, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br></p><p>Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br></p><p>	if let value = foo where foo &gt; 5 { … }<br>	if let value = foo, foo &gt; 5 { … }<br></p><p>The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/17678b57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>The clarification seems pretty clear to me, and they stated it:<br></p><p>&quot;to preserve higher-level consistency throughout the language in how components of expressions and statements are separated&quot;<br></p><p>&gt; On 09 Jun 2016, at 09:53, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt; <br>&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt; <br>&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt; <br>&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/a3efe2e1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 9:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt; <br>&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt; <br>&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt; 	if let value = foo, foo &gt; 5 { … }<br></p><p>FWIW huge amounts of complex golang code have managed to exist with the latter syntax. I had difficulties with it when I started (I&#39;m c,c++,java,c#,js,ts), but these days I would no longer question it.<br></p><p><br>&gt; <br>&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/6873ef4d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  9, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt; <br>&gt; 	if let value = foo where foo &gt; 5 { … }<br></p><p>I think there may be a case for keeping the `where` keyword—but before, not after, the equals sign.<br></p><p>	if case .cartesian(let x, let y) where x != y = point { ... }<br>	if let value where value &gt; 5 = foo { ... }<br></p><p>Why? Consistency with other `case` statements. I recently made the same point about `for` loops: `where` is part of the pattern-matching syntax, and it ought to be attached to the pattern it refines. Letting it float into other parts of the statement unmoors it from its meaning.<br></p><p>That will probably read strangely for some current uses of `where`—specifically, ones that have a condition unconnected to the preceding pattern—but that&#39;s when you should use a comma to introduce a separate Boolean condition clause instead. Personally, I think the `if let value` example above would probably be more appropriate as a Boolean condition clause, but tastes differ.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 9 Jun 2016, at 09:47, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt; <br>&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt; <br>&gt; I think there may be a case for keeping the `where` keyword—but before, not after, the equals sign.<br>&gt; <br>&gt; 	if case .cartesian(let x, let y) where x != y = point { ... }<br>&gt; 	if let value where value &gt; 5 = foo { … }<br></p><p>That looks pretty strange visually though thanks to the assignment (it kind of looks like x is being compared against y = point). It works better as you proposed in a for where in loop since the in keyword keeps it separated nicely. Even so, I prefer where coming after as it makes the condition secondary to what it is I want to do, e.g- I want to bind a condition, but only if the where clause succeeds.<br></p><p>While my reasons for liking where are mainly aesthetic once the need to use it to get around separator issues goes away, it’s still a nice tool for grouping statements visually, for example:<br></p><p>	if let foo = maybeFoo where foo &gt; 5, let bar = maybeBar where bar &lt; 100 { … }<br></p><p>Versus:<br></p><p>	if let foo = maybeFoo, foo &gt; 5, let bar = maybeBar, bar &lt; 100 { … }<br></p><p>Even splitting these across two lines I prefer how the where clauses look in terms of specifically indicating that the binding and condition are related/distinct from the other pair. While I get that in this case it doesn’t functionally do anything that the comma doesn’t, I’m not sure I agree that it should be dropped as I’m perfectly capable of choosing for myself which to use for my conditionals, and I prefer how the where looks visually in terms of implying a direct relationship.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/542ac81d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 9 Jun 2016, at 09:47, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt; <br>&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt; <br>&gt; 	if case .cartesian(let x, let y) where x != y = point { ... }<br>&gt; 	if let value where value &gt; 5 = foo { ... }<br></p><p>Sorry about the immediate followup, but I just recalled you mentioned multiple conditional binding, which would have brackets, so what about the following:<br></p><p>	if case .cartesian(let x, let y where x != y) = point { … }<br>	if let (value where value &gt; 5) = foo { … }<br>	if let (foo, bar where foo &gt; 5) = (maybeFoo, maybeBar) { … }<br></p><p>While it requires brackets for the single conditional binding (you could still drop them with no where clause though) it seems easier to read to me. For consistency this would probably apply to your for loop suggestion like:<br></p><p>	for (eachValue where eachValue &gt; 5) in theValues { … }<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/732c5e1a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>June  9, 2016 at 02:00:00pm</p></header><div class="content"><p>From the original thread:<br></p><p>&gt; Am 01.06.2016 um 03:47 schrieb Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; &lt;snip&gt;<br>&gt; <br>&gt; It does occur to me that there is one more option. I don&#39;t know that I like it, but it&#39;s an option no one has put forward before: recite the opening keyword when beginning a new boolean expression:<br>&gt; <br>&gt; `if let x = x where x &lt; 3 { ... }` becomes<br>&gt; `if let x = x if x &lt; 3 { ... }`<br>&gt; <br>&gt; `while let item = sequence.next() where item &gt; 0 { ... }` becomes<br>&gt; `while let item = sequence.next() while item &gt; 0 { ... }`<br>&gt; <br>&gt; etc.<br></p><p>I&#39;ve almost had the same idea... However I would not replace &quot;where&quot; rather than using if/while/guard as delimiters for new optional bindings/case-conditions:<br></p><p>// if ----------------------<br>if let x = y where x &lt; 4,<br>if case let .some(a) = b where a &gt; 42 {<br>   ...<br>}<br></p><p>// Is equivalent to:<br></p><p>if let x = y where x &lt; 4 {<br>   if case let .some(a) = b where a &gt; 42 {<br>       ...<br>   }<br>}<br></p><p><br>// guard ----------------------<br>guard let x = y where x &lt; 4,<br>guard case let .some(a) = b where a &gt; 42 else { ... }<br></p><p>// Is equivalent to:<br></p><p>guard let x = y where x &lt; 4 else { ... }<br>guard case let .some(a) = b where a &gt; 42 else { ... }<br></p><p><br></p><p>// while ----------------------<br></p><p>// &quot;guard&quot; or &quot;if&quot; should probably be used as delimiter instead of &quot;while&quot;<br>// since it is not a nested loop (imo I would go with &quot;if&quot;... discussable...)<br>while let x = y where x &lt; 4,<br>while case let .some(a) = b where a &gt; 42 {<br>  ...<br>}<br></p><p>// Is equivalent to:<br></p><p>while let x = y where x &lt; 4 {<br>   guard case let .some(a) = b where a &gt; 42 else {<br>       break<br>   }<br>   do { ... }<br>}<br></p><p>// or with if<br></p><p>while let x = y where x &lt; 4 {<br>   if case let .some(a) = b where a &gt; 42 {<br>       ...<br>   } else { break }<br>}<br></p><p><br></p><p>Note that all these statements have a nice symmetry to their &quot;long form&quot;. These statements can also be similarly written without introducing a new scope and code duplication in else branches:<br></p><p>if ...<br>if ... {<br>   ...<br>} else { ... }<br></p><p>vs<br></p><p>if ... {<br>   if ... {<br>       ...<br>   } else { ... }<br>} else { ... }<br></p><p><br>Best regards<br>Maximilian<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/cf443485/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>I have just one last thing to say on this topic as it is clear it is going into the language and no accepted proposal has been overturned that I am aware of.<br></p><p>I believe with this cycle, the swift evolution process didn&#39;t work.<br></p><p>And here is why I think this:<br>- This proposal began as a discussion on May 20th and lasted 4 days with minimal discussion outside of a few people<br>- The review period was then fast tracked and began 3 days after discussion ended (May 27th)<br>- The review period technically ended on June 3rd<br>- Approved with revision on June 8th<br></p><p>From May 20th to June 8th (and probably before because it was clear this was getting approved earlier) we have proposed, revised, and accepted a far reaching syntactic change. Presumably we will be stuck with this behavior for a long time or forever. This effects more than just the few that participated in the discussion: it effects every swift user.<br></p><p>I think this happened too fast. I do not believe we got an adequate pulse of the broader swift community. <br></p><p>What we got was very technical and proficient user feedback. When phrases like &quot;making the language more consistent&quot;, why wouldn&#39;t these developers want to approve it? This is the kind of stuff people deeply involved in the language care about. I am not sure that reflects the entire community.<br></p><p>What about the more common developer who isn&#39;t as technically skilled yet? This has huge changes for them too and I barely heard any of their voices...at least publicly. This has big usability changes for them.<br></p><p>On top of this, we have a new revised syntax that somewhat meets in the middle of both sides. However, does meeting in the middle make this all better just for the sake of consistency? Should we have an extended review period for this proposed change or do we just accept it?<br></p><p>My TLDR overview:<br>- Discussion and proposal moved extremely fast. We only heard feedback from the more proficient developers and not necessarily the &quot;common&quot; developer...which this arguably effects more. The technically skilled can always adapt and of course always prefers a more consistent language...but do most developers feel this way? They just want a usable and expressive language <br>- WWDC is in a few days. We will get a flood of people from all different backgrounds: newbies to the very skilled. My prediction: there will be backlash from this proposal once more people know about it. <br></p><p>I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know. Not everyone is on the mailing list...because frankly it can be daunting for us who aren&#39;t as skilled as the others on here.<br></p><p>Do I believe that the smartest people can design a great language on their own? No.<br></p><p>It is generally understood that most developers don&#39;t fully understand UX or the end users using their stuff. I feel this is what has happened with this proposal. It sounded good because it was all for the sake of &quot;consistency&quot;. However, I believe the end user will ultimately be disappointed with the loss of expressivity.<br></p><p>Maybe I am wrong. I hope I am wrong...but I feel we will not here the end of this after WWDC begins. <br></p><p>And because of that, this is why I feel the swift evolution process did not work properly in this case. (And really I have this same with other fast tracked proposals now).<br></p><p>Really TLDR: I believe these large syntax proposals need broader feedback from the community and not a small subset of the top swift developers. <br></p><p>How do we pull more people in for these discussions? I don&#39;t know, but more announcements on the blog and from Swift on Twitter <br></p><p>Sorry for the long post, but I just wanted to express my concerns for a language I was growing to really love!<br>Brandon<br></p><p><br>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 3:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt; <br>&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt; <br>&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt; <br>&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/1c1de7bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 04:00:00pm</p></header><div class="content"><p>I don&#39;t know what your professional experience in the software industry is, but mine is that design by conscensus rarely leads to the best outcome, especially in the presence of strong egos. Swift is advertised as Opinionated, but (fortunately) nowhere does it say your or my opinion. I would even go so far as to say that most people can&#39;t design a language to save their lives (me included). At some point, a small number of benevolent dictators have to make a decision they believe in. <br></p><p>IMO the job of the community is to shake ideas in front of these dictators with the hope that it will give perspectives they may not have already seen, or challenge their ideas in ways they might not have anticipated. But nowhere does it say (and I will immediately drop any further interest in Swift if someone tells me it should be that way) that their role is to dutifully record what the plebe wants and deliver it as best as they can. Taken together, some of the most individually popular suggestions would undoubtedly lead to some sort of franken-swift that not even the people pushing these ideas forward would end up using.<br></p><p>&gt; On Jun 9, 2016, at 4:34 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I have just one last thing to say on this topic as it is clear it is going into the language and no accepted proposal has been overturned that I am aware of.<br>&gt; <br>&gt; I believe with this cycle, the swift evolution process didn&#39;t work.<br>&gt; <br>&gt; And here is why I think this:<br>&gt; - This proposal began as a discussion on May 20th and lasted 4 days with minimal discussion outside of a few people<br>&gt; - The review period was then fast tracked and began 3 days after discussion ended (May 27th)<br>&gt; - The review period technically ended on June 3rd<br>&gt; - Approved with revision on June 8th<br>&gt; <br>&gt; From May 20th to June 8th (and probably before because it was clear this was getting approved earlier) we have proposed, revised, and accepted a far reaching syntactic change. Presumably we will be stuck with this behavior for a long time or forever. This effects more than just the few that participated in the discussion: it effects every swift user.<br>&gt; <br>&gt; I think this happened too fast. I do not believe we got an adequate pulse of the broader swift community. <br>&gt; <br>&gt; What we got was very technical and proficient user feedback. When phrases like &quot;making the language more consistent&quot;, why wouldn&#39;t these developers want to approve it? This is the kind of stuff people deeply involved in the language care about. I am not sure that reflects the entire community.<br>&gt; <br>&gt; What about the more common developer who isn&#39;t as technically skilled yet? This has huge changes for them too and I barely heard any of their voices...at least publicly. This has big usability changes for them.<br>&gt; <br>&gt; On top of this, we have a new revised syntax that somewhat meets in the middle of both sides. However, does meeting in the middle make this all better just for the sake of consistency? Should we have an extended review period for this proposed change or do we just accept it?<br>&gt; <br>&gt; My TLDR overview:<br>&gt; - Discussion and proposal moved extremely fast. We only heard feedback from the more proficient developers and not necessarily the &quot;common&quot; developer...which this arguably effects more. The technically skilled can always adapt and of course always prefers a more consistent language...but do most developers feel this way? They just want a usable and expressive language <br>&gt; - WWDC is in a few days. We will get a flood of people from all different backgrounds: newbies to the very skilled. My prediction: there will be backlash from this proposal once more people know about it. <br>&gt; <br>&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know. Not everyone is on the mailing list...because frankly it can be daunting for us who aren&#39;t as skilled as the others on here.<br>&gt; <br>&gt; Do I believe that the smartest people can design a great language on their own? No.<br>&gt; <br>&gt; It is generally understood that most developers don&#39;t fully understand UX or the end users using their stuff. I feel this is what has happened with this proposal. It sounded good because it was all for the sake of &quot;consistency&quot;. However, I believe the end user will ultimately be disappointed with the loss of expressivity.<br>&gt; <br>&gt; Maybe I am wrong. I hope I am wrong...but I feel we will not here the end of this after WWDC begins. <br>&gt; <br>&gt; And because of that, this is why I feel the swift evolution process did not work properly in this case. (And really I have this same with other fast tracked proposals now).<br>&gt; <br>&gt; Really TLDR: I believe these large syntax proposals need broader feedback from the community and not a small subset of the top swift developers. <br>&gt; <br>&gt; How do we pull more people in for these discussions? I don&#39;t know, but more announcements on the blog and from Swift on Twitter <br>&gt; <br>&gt; Sorry for the long post, but I just wanted to express my concerns for a language I was growing to really love!<br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 3:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt;&gt; <br>&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt; <br>&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt;&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt;&gt; <br>&gt;&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/eb863809/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>I never said design by consensus. What I said is that we did not have a broader representation during this review.<br></p><p>What we got was a few &quot;top&quot; developers sharing their opinion. To me this is not healthy. We needed more opinions from the top skilled developers to hobbyists.<br></p><p>Maybe this wouldn&#39;t have changed the outcome, but it could have guided the discussion more and perhaps differently.<br></p><p>The core team *is* taking feedback from the community. This feedback however is from a few very technically skilled developers and not necessarily representative of the more common developer (of which there is more).<br></p><p>The fact that this proposal and review went through so quickly makes me suspect whether all of the ramifications were thought through thoroughly.<br></p><p>The core team is wonderful, so I am sure they awesome discussions on this...but the fact that it happened so quickly is worrisome to me.<br></p><p>I hope developers like me have somewhat of an advocate on the core team as I am sure everyone on that team is in the very highly skilled category :P<br></p><p>Brandon<br></p><p><br></p><p><br>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 10:51 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t know what your professional experience in the software industry is, but mine is that design by conscensus rarely leads to the best outcome, especially in the presence of strong egos. Swift is advertised as Opinionated, but (fortunately) nowhere does it say your or my opinion. I would even go so far as to say that most people can&#39;t design a language to save their lives (me included). At some point, a small number of benevolent dictators have to make a decision they believe in. <br>&gt; <br>&gt; IMO the job of the community is to shake ideas in front of these dictators with the hope that it will give perspectives they may not have already seen, or challenge their ideas in ways they might not have anticipated. But nowhere does it say (and I will immediately drop any further interest in Swift if someone tells me it should be that way) that their role is to dutifully record what the plebe wants and deliver it as best as they can. Taken together, some of the most individually popular suggestions would undoubtedly lead to some sort of franken-swift that not even the people pushing these ideas forward would end up using.<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 4:34 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have just one last thing to say on this topic as it is clear it is going into the language and no accepted proposal has been overturned that I am aware of.<br>&gt;&gt; <br>&gt;&gt; I believe with this cycle, the swift evolution process didn&#39;t work.<br>&gt;&gt; <br>&gt;&gt; And here is why I think this:<br>&gt;&gt; - This proposal began as a discussion on May 20th and lasted 4 days with minimal discussion outside of a few people<br>&gt;&gt; - The review period was then fast tracked and began 3 days after discussion ended (May 27th)<br>&gt;&gt; - The review period technically ended on June 3rd<br>&gt;&gt; - Approved with revision on June 8th<br>&gt;&gt; <br>&gt;&gt; From May 20th to June 8th (and probably before because it was clear this was getting approved earlier) we have proposed, revised, and accepted a far reaching syntactic change. Presumably we will be stuck with this behavior for a long time or forever. This effects more than just the few that participated in the discussion: it effects every swift user.<br>&gt;&gt; <br>&gt;&gt; I think this happened too fast. I do not believe we got an adequate pulse of the broader swift community. <br>&gt;&gt; <br>&gt;&gt; What we got was very technical and proficient user feedback. When phrases like &quot;making the language more consistent&quot;, why wouldn&#39;t these developers want to approve it? This is the kind of stuff people deeply involved in the language care about. I am not sure that reflects the entire community.<br>&gt;&gt; <br>&gt;&gt; What about the more common developer who isn&#39;t as technically skilled yet? This has huge changes for them too and I barely heard any of their voices...at least publicly. This has big usability changes for them.<br>&gt;&gt; <br>&gt;&gt; On top of this, we have a new revised syntax that somewhat meets in the middle of both sides. However, does meeting in the middle make this all better just for the sake of consistency? Should we have an extended review period for this proposed change or do we just accept it?<br>&gt;&gt; <br>&gt;&gt; My TLDR overview:<br>&gt;&gt; - Discussion and proposal moved extremely fast. We only heard feedback from the more proficient developers and not necessarily the &quot;common&quot; developer...which this arguably effects more. The technically skilled can always adapt and of course always prefers a more consistent language...but do most developers feel this way? They just want a usable and expressive language <br>&gt;&gt; - WWDC is in a few days. We will get a flood of people from all different backgrounds: newbies to the very skilled. My prediction: there will be backlash from this proposal once more people know about it. <br>&gt;&gt; <br>&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know. Not everyone is on the mailing list...because frankly it can be daunting for us who aren&#39;t as skilled as the others on here.<br>&gt;&gt; <br>&gt;&gt; Do I believe that the smartest people can design a great language on their own? No.<br>&gt;&gt; <br>&gt;&gt; It is generally understood that most developers don&#39;t fully understand UX or the end users using their stuff. I feel this is what has happened with this proposal. It sounded good because it was all for the sake of &quot;consistency&quot;. However, I believe the end user will ultimately be disappointed with the loss of expressivity.<br>&gt;&gt; <br>&gt;&gt; Maybe I am wrong. I hope I am wrong...but I feel we will not here the end of this after WWDC begins. <br>&gt;&gt; <br>&gt;&gt; And because of that, this is why I feel the swift evolution process did not work properly in this case. (And really I have this same with other fast tracked proposals now).<br>&gt;&gt; <br>&gt;&gt; Really TLDR: I believe these large syntax proposals need broader feedback from the community and not a small subset of the top swift developers. <br>&gt;&gt; <br>&gt;&gt; How do we pull more people in for these discussions? I don&#39;t know, but more announcements on the blog and from Swift on Twitter <br>&gt;&gt; <br>&gt;&gt; Sorry for the long post, but I just wanted to express my concerns for a language I was growing to really love!<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 3:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt;&gt;&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/260e831f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 4:59 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; I never said design by consensus. What I said is that we did not have a broader representation during this review.<br>&gt; <br>&gt; What we got was a few &quot;top&quot; developers sharing their opinion. To me this is not healthy. We needed more opinions from the top skilled developers to hobbyists.<br>&gt; <br>&gt; Maybe this wouldn&#39;t have changed the outcome, but it could have guided the discussion more and perhaps differently.<br>&gt; <br>&gt; The core team *is* taking feedback from the community. This feedback however is from a few very technically skilled developers and not necessarily representative of the more common developer (of which there is more).<br>&gt; <br>&gt; The fact that this proposal and review went through so quickly makes me suspect whether all of the ramifications were thought through thoroughly.<br>&gt; <br>&gt; The core team is wonderful, so I am sure they awesome discussions on this...but the fact that it happened so quickly is worrisome to me.<br>&gt; <br>&gt; I hope developers like me have somewhat of an advocate on the core team as I am sure everyone on that team is in the very highly skilled category :P<br>&gt; <br>&gt; Brandon<br>&gt; <br></p><p>it took a single A. Einstein playing with nonexistent elevators to figure something as complicated as a workable approximation of Gravity (see I even leave room for the fact that like Newton’s work before, his may also just be an approximation of something else). I don’t think it takes a crowd of developers (me included) to SEE certain things. <br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Jun 9, 2016, at 10:51 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com &lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I don&#39;t know what your professional experience in the software industry is, but mine is that design by conscensus rarely leads to the best outcome, especially in the presence of strong egos. Swift is advertised as Opinionated, but (fortunately) nowhere does it say your or my opinion. I would even go so far as to say that most people can&#39;t design a language to save their lives (me included). At some point, a small number of benevolent dictators have to make a decision they believe in. <br>&gt;&gt; <br>&gt;&gt; IMO the job of the community is to shake ideas in front of these dictators with the hope that it will give perspectives they may not have already seen, or challenge their ideas in ways they might not have anticipated. But nowhere does it say (and I will immediately drop any further interest in Swift if someone tells me it should be that way) that their role is to dutifully record what the plebe wants and deliver it as best as they can. Taken together, some of the most individually popular suggestions would undoubtedly lead to some sort of franken-swift that not even the people pushing these ideas forward would end up using.<br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 4:34 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I have just one last thing to say on this topic as it is clear it is going into the language and no accepted proposal has been overturned that I am aware of.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe with this cycle, the swift evolution process didn&#39;t work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And here is why I think this:<br>&gt;&gt;&gt; - This proposal began as a discussion on May 20th and lasted 4 days with minimal discussion outside of a few people<br>&gt;&gt;&gt; - The review period was then fast tracked and began 3 days after discussion ended (May 27th)<br>&gt;&gt;&gt; - The review period technically ended on June 3rd<br>&gt;&gt;&gt; - Approved with revision on June 8th<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From May 20th to June 8th (and probably before because it was clear this was getting approved earlier) we have proposed, revised, and accepted a far reaching syntactic change. Presumably we will be stuck with this behavior for a long time or forever. This effects more than just the few that participated in the discussion: it effects every swift user.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this happened too fast. I do not believe we got an adequate pulse of the broader swift community. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What we got was very technical and proficient user feedback. When phrases like &quot;making the language more consistent&quot;, why wouldn&#39;t these developers want to approve it? This is the kind of stuff people deeply involved in the language care about. I am not sure that reflects the entire community.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What about the more common developer who isn&#39;t as technically skilled yet? This has huge changes for them too and I barely heard any of their voices...at least publicly. This has big usability changes for them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On top of this, we have a new revised syntax that somewhat meets in the middle of both sides. However, does meeting in the middle make this all better just for the sake of consistency? Should we have an extended review period for this proposed change or do we just accept it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My TLDR overview:<br>&gt;&gt;&gt; - Discussion and proposal moved extremely fast. We only heard feedback from the more proficient developers and not necessarily the &quot;common&quot; developer...which this arguably effects more. The technically skilled can always adapt and of course always prefers a more consistent language...but do most developers feel this way? They just want a usable and expressive language <br>&gt;&gt;&gt; - WWDC is in a few days. We will get a flood of people from all different backgrounds: newbies to the very skilled. My prediction: there will be backlash from this proposal once more people know about it. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know. Not everyone is on the mailing list...because frankly it can be daunting for us who aren&#39;t as skilled as the others on here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do I believe that the smartest people can design a great language on their own? No.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is generally understood that most developers don&#39;t fully understand UX or the end users using their stuff. I feel this is what has happened with this proposal. It sounded good because it was all for the sake of &quot;consistency&quot;. However, I believe the end user will ultimately be disappointed with the loss of expressivity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe I am wrong. I hope I am wrong...but I feel we will not here the end of this after WWDC begins. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And because of that, this is why I feel the swift evolution process did not work properly in this case. (And really I have this same with other fast tracked proposals now).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Really TLDR: I believe these large syntax proposals need broader feedback from the community and not a small subset of the top swift developers. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How do we pull more people in for these discussions? I don&#39;t know, but more announcements on the blog and from Swift on Twitter <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry for the long post, but I just wanted to express my concerns for a language I was growing to really love!<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 3:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt;&gt;&gt;&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/1bf3caed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>This kind of attitude is dangerous. Then why even have community reviews?<br></p><p>It&#39;s obviously to get feedback from the community...<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 11:07 AM, L Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 4:59 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I never said design by consensus. What I said is that we did not have a broader representation during this review.<br>&gt;&gt; <br>&gt;&gt; What we got was a few &quot;top&quot; developers sharing their opinion. To me this is not healthy. We needed more opinions from the top skilled developers to hobbyists.<br>&gt;&gt; <br>&gt;&gt; Maybe this wouldn&#39;t have changed the outcome, but it could have guided the discussion more and perhaps differently.<br>&gt;&gt; <br>&gt;&gt; The core team *is* taking feedback from the community. This feedback however is from a few very technically skilled developers and not necessarily representative of the more common developer (of which there is more).<br>&gt;&gt; <br>&gt;&gt; The fact that this proposal and review went through so quickly makes me suspect whether all of the ramifications were thought through thoroughly.<br>&gt;&gt; <br>&gt;&gt; The core team is wonderful, so I am sure they awesome discussions on this...but the fact that it happened so quickly is worrisome to me.<br>&gt;&gt; <br>&gt;&gt; I hope developers like me have somewhat of an advocate on the core team as I am sure everyone on that team is in the very highly skilled category :P<br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt; <br>&gt; it took a single A. Einstein playing with nonexistent elevators to figure something as complicated as a workable approximation of Gravity (see I even leave room for the fact that like Newton’s work before, his may also just be an approximation of something else). I don’t think it takes a crowd of developers (me included) to SEE certain things. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 10:51 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t know what your professional experience in the software industry is, but mine is that design by conscensus rarely leads to the best outcome, especially in the presence of strong egos. Swift is advertised as Opinionated, but (fortunately) nowhere does it say your or my opinion. I would even go so far as to say that most people can&#39;t design a language to save their lives (me included). At some point, a small number of benevolent dictators have to make a decision they believe in. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IMO the job of the community is to shake ideas in front of these dictators with the hope that it will give perspectives they may not have already seen, or challenge their ideas in ways they might not have anticipated. But nowhere does it say (and I will immediately drop any further interest in Swift if someone tells me it should be that way) that their role is to dutifully record what the plebe wants and deliver it as best as they can. Taken together, some of the most individually popular suggestions would undoubtedly lead to some sort of franken-swift that not even the people pushing these ideas forward would end up using.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 9, 2016, at 4:34 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have just one last thing to say on this topic as it is clear it is going into the language and no accepted proposal has been overturned that I am aware of.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe with this cycle, the swift evolution process didn&#39;t work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And here is why I think this:<br>&gt;&gt;&gt;&gt; - This proposal began as a discussion on May 20th and lasted 4 days with minimal discussion outside of a few people<br>&gt;&gt;&gt;&gt; - The review period was then fast tracked and began 3 days after discussion ended (May 27th)<br>&gt;&gt;&gt;&gt; - The review period technically ended on June 3rd<br>&gt;&gt;&gt;&gt; - Approved with revision on June 8th<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From May 20th to June 8th (and probably before because it was clear this was getting approved earlier) we have proposed, revised, and accepted a far reaching syntactic change. Presumably we will be stuck with this behavior for a long time or forever. This effects more than just the few that participated in the discussion: it effects every swift user.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this happened too fast. I do not believe we got an adequate pulse of the broader swift community. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What we got was very technical and proficient user feedback. When phrases like &quot;making the language more consistent&quot;, why wouldn&#39;t these developers want to approve it? This is the kind of stuff people deeply involved in the language care about. I am not sure that reflects the entire community.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about the more common developer who isn&#39;t as technically skilled yet? This has huge changes for them too and I barely heard any of their voices...at least publicly. This has big usability changes for them.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On top of this, we have a new revised syntax that somewhat meets in the middle of both sides. However, does meeting in the middle make this all better just for the sake of consistency? Should we have an extended review period for this proposed change or do we just accept it?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My TLDR overview:<br>&gt;&gt;&gt;&gt; - Discussion and proposal moved extremely fast. We only heard feedback from the more proficient developers and not necessarily the &quot;common&quot; developer...which this arguably effects more. The technically skilled can always adapt and of course always prefers a more consistent language...but do most developers feel this way? They just want a usable and expressive language <br>&gt;&gt;&gt;&gt; - WWDC is in a few days. We will get a flood of people from all different backgrounds: newbies to the very skilled. My prediction: there will be backlash from this proposal once more people know about it. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know. Not everyone is on the mailing list...because frankly it can be daunting for us who aren&#39;t as skilled as the others on here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Do I believe that the smartest people can design a great language on their own? No.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It is generally understood that most developers don&#39;t fully understand UX or the end users using their stuff. I feel this is what has happened with this proposal. It sounded good because it was all for the sake of &quot;consistency&quot;. However, I believe the end user will ultimately be disappointed with the loss of expressivity.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe I am wrong. I hope I am wrong...but I feel we will not here the end of this after WWDC begins. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And because of that, this is why I feel the swift evolution process did not work properly in this case. (And really I have this same with other fast tracked proposals now).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Really TLDR: I believe these large syntax proposals need broader feedback from the community and not a small subset of the top swift developers. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How do we pull more people in for these discussions? I don&#39;t know, but more announcements on the blog and from Swift on Twitter <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sorry for the long post, but I just wanted to express my concerns for a language I was growing to really love!<br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 9, 2016, at 3:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt;&gt;&gt;&gt;&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/26d8ba60/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>I share the concern of this being a weakness of the process, but I don’t know what the alternative is (besides shutting it down and sealing the sausage-making back inside of Apple where we can’t see it :P)<br></p><p>I do think, though, that perhaps in the future maybe there should be a moratorium on reviews 2 weeks or so prior and post WWDC - anyone at Apple is swamped during this time period and I suspect it doesn’t do anyone any good to dramatically change the language weeks before thousands of people tune in to learn what’s new only to find that after they start getting final Xcode builds in the fall, everything has changed again. :/<br></p><p>l8r<br>Sean<br></p><p><br></p><p>&gt; On Jun 9, 2016, at 9:59 AM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I never said design by consensus. What I said is that we did not have a broader representation during this review.<br>&gt; <br>&gt; What we got was a few &quot;top&quot; developers sharing their opinion. To me this is not healthy. We needed more opinions from the top skilled developers to hobbyists.<br>&gt; <br>&gt; Maybe this wouldn&#39;t have changed the outcome, but it could have guided the discussion more and perhaps differently.<br>&gt; <br>&gt; The core team *is* taking feedback from the community. This feedback however is from a few very technically skilled developers and not necessarily representative of the more common developer (of which there is more).<br>&gt; <br>&gt; The fact that this proposal and review went through so quickly makes me suspect whether all of the ramifications were thought through thoroughly.<br>&gt; <br>&gt; The core team is wonderful, so I am sure they awesome discussions on this...but the fact that it happened so quickly is worrisome to me.<br>&gt; <br>&gt; I hope developers like me have somewhat of an advocate on the core team as I am sure everyone on that team is in the very highly skilled category :P<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Jun 9, 2016, at 10:51 AM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; I don&#39;t know what your professional experience in the software industry is, but mine is that design by conscensus rarely leads to the best outcome, especially in the presence of strong egos. Swift is advertised as Opinionated, but (fortunately) nowhere does it say your or my opinion. I would even go so far as to say that most people can&#39;t design a language to save their lives (me included). At some point, a small number of benevolent dictators have to make a decision they believe in. <br>&gt;&gt; <br>&gt;&gt; IMO the job of the community is to shake ideas in front of these dictators with the hope that it will give perspectives they may not have already seen, or challenge their ideas in ways they might not have anticipated. But nowhere does it say (and I will immediately drop any further interest in Swift if someone tells me it should be that way) that their role is to dutifully record what the plebe wants and deliver it as best as they can. Taken together, some of the most individually popular suggestions would undoubtedly lead to some sort of franken-swift that not even the people pushing these ideas forward would end up using.<br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 4:34 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I have just one last thing to say on this topic as it is clear it is going into the language and no accepted proposal has been overturned that I am aware of.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe with this cycle, the swift evolution process didn&#39;t work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And here is why I think this:<br>&gt;&gt;&gt; - This proposal began as a discussion on May 20th and lasted 4 days with minimal discussion outside of a few people<br>&gt;&gt;&gt; - The review period was then fast tracked and began 3 days after discussion ended (May 27th)<br>&gt;&gt;&gt; - The review period technically ended on June 3rd<br>&gt;&gt;&gt; - Approved with revision on June 8th<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From May 20th to June 8th (and probably before because it was clear this was getting approved earlier) we have proposed, revised, and accepted a far reaching syntactic change. Presumably we will be stuck with this behavior for a long time or forever. This effects more than just the few that participated in the discussion: it effects every swift user.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this happened too fast. I do not believe we got an adequate pulse of the broader swift community. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What we got was very technical and proficient user feedback. When phrases like &quot;making the language more consistent&quot;, why wouldn&#39;t these developers want to approve it? This is the kind of stuff people deeply involved in the language care about. I am not sure that reflects the entire community.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What about the more common developer who isn&#39;t as technically skilled yet? This has huge changes for them too and I barely heard any of their voices...at least publicly. This has big usability changes for them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On top of this, we have a new revised syntax that somewhat meets in the middle of both sides. However, does meeting in the middle make this all better just for the sake of consistency? Should we have an extended review period for this proposed change or do we just accept it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My TLDR overview:<br>&gt;&gt;&gt; - Discussion and proposal moved extremely fast. We only heard feedback from the more proficient developers and not necessarily the &quot;common&quot; developer...which this arguably effects more. The technically skilled can always adapt and of course always prefers a more consistent language...but do most developers feel this way? They just want a usable and expressive language <br>&gt;&gt;&gt; - WWDC is in a few days. We will get a flood of people from all different backgrounds: newbies to the very skilled. My prediction: there will be backlash from this proposal once more people know about it. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know. Not everyone is on the mailing list...because frankly it can be daunting for us who aren&#39;t as skilled as the others on here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do I believe that the smartest people can design a great language on their own? No.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is generally understood that most developers don&#39;t fully understand UX or the end users using their stuff. I feel this is what has happened with this proposal. It sounded good because it was all for the sake of &quot;consistency&quot;. However, I believe the end user will ultimately be disappointed with the loss of expressivity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe I am wrong. I hope I am wrong...but I feel we will not here the end of this after WWDC begins. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And because of that, this is why I feel the swift evolution process did not work properly in this case. (And really I have this same with other fast tracked proposals now).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Really TLDR: I believe these large syntax proposals need broader feedback from the community and not a small subset of the top swift developers. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How do we pull more people in for these discussions? I don&#39;t know, but more announcements on the blog and from Swift on Twitter <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry for the long post, but I just wanted to express my concerns for a language I was growing to really love!<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 3:53 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt;&gt;&gt;&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  9, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br></p><p>No.<br></p><p>Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br></p><p>The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br></p><p>I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br></p><p>And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal. Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 06:00:00pm</p></header><div class="content"><p>Goodbye semi-column, goodbye multi-let.... i will mourne you. :( .... hello reasonable improvement <br></p><p>On Jun 9, 2016, at 5:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt; <br>&gt; No.<br>&gt; <br>&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt; <br>&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt; <br>&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt; <br>&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal. Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt; <br>&gt; No.<br></p><p>Grrrr<br></p><p>&gt; <br>&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br></p><p>I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br></p><p>Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br></p><p>Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br></p><p>Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br></p><p>&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br></p><p>Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br></p><p>Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br></p><p>&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br></p><p>I think you will be very surprised come WWDC when people learn of this change.<br></p><p>How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br></p><p>This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br></p><p>The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br></p><p>&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br></p><p>I don&#39;t think this was though through thoroughly enough. It just happened too fast<br></p><p>&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br></p><p>Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br></p><p>And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br></p><p>How can us simpletons argue against that?<br></p><p>Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br></p><p>Again, I hope I am wrong =/<br>Brandon<br></p><p><br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/0dd6058f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June  9, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 6:16 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt; <br>&gt;&gt; No.<br>&gt; <br>&gt; Grrrr<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt; <br>&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br></p><p>But if you followed the email trail you must have noticed that the final choice was not what brent supported. I would even say that it was not any of the solutions anyone proposed.. Proof that the process worked, the team made a change nobody anticipated, yet many people can (partially) identify with. <br></p><p>&gt; <br>&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt; <br>&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt; <br>&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt; <br>&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt; <br>&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt; <br>&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt; <br>&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt; <br>&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt; <br>&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt; <br>&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt; <br>&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt; <br>&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt; <br>&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt; <br>&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt; <br>&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt; <br>&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt; <br>&gt; How can us simpletons argue against that?<br>&gt; <br>&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt; <br>&gt; Again, I hope I am wrong =/<br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/c47ebfaf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04df463b5832dc11a114a117081d8e8c?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Ethan Eberle</string> &lt;ethandeberle at gmail.com&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Brandon –<br> <br>I’ll try to speak for one of those ‘newer’ developers (I’ve only got ~1 year of experience in dev work and it’s all part time as a hobby), although my views obviously only reflect my own.<br> <br>I also had a similar ‘gut’ reaction to the approval but after re-reading it several times the change is surprisingly minor.     At its core, the proposal just involves adding extra ‘lets’ and ‘cases’ to the syntax.  I think this is a great solution that avoids the need for semi-colons or some new delimiter (I first learned to code in Python and semicolons are anathema in my mind).  It also removes the arbitrary use of “where” (I didn’t even know this was possible).  I’d prefer we allow the use of “where” when the constraint applies only to the unwrapped item immediately preceding it, but such is life [1].  (Core Team – I’ll look forward to reading the revised accepted proposal, I’m still confused about a few of the details).<br> <br>In terms of the broader review process, it’s predicated upon users providing timely feedback during the official review period – which went on for the proscribed time.  The core team clearly put much thought into this since it took longer than usual, on balance, to announce their decision. I would add that the only time an accepted proposal should be ‘overturned’ is if the implementation turns out to be too complicated or if there were other downstream affects that weren’t previously discovered in the review process (we’ve already seen a bit of this).  If everything is continually revisited, then there will be next to no forward progress.<br> <br>That said, the one process improvement I have is that proposals should ideally only be “Accepted” by the core team as it is originally written (or with relatively minor changes) or completely “Rejected”.  The “Accepted with Revision” approach can result in new ideas being approved but not being fully vetted by the community.   This also eliminates needless &quot;surprises&quot;, which is always good. Proposal are either accepted or rejected, nothing in between. I actually think this approach is win-win for the core team and the community – although the ultimate decision to reject or approve a proposal must rest with the Core Team.  For this reason, I think in this case it *might* be tenable to “re-visit” this proposal (say, after WWDC) once Chris puts the accepted version&#39;s language on GitHub. It could also be evaluated within the broader context of removing (or retaining) &#39;where&#39; elsewhere in the language (see Erica&#39;s proposal), though for scoping purposes the proposals should remain separate.   If it is re-visited, I’m no compiler/language expert but it seems like you could unambiguously permit the use of ‘where’ in the specific cases I mentioned earlier. It’s purely syntactic sugar and “burns” a keyword but is a nice optional expressivity feature, and I remember seeing some Core Team members showing interest in it.   Maybe this approach is the best of both worlds?  :D<br> <br>“I just wanted to express my concerns for a language I was growing to really love!”<br>      -&gt; Hopefully you’ll continue to love it :)<br> <br>Just my two cents,<br>Ethan<br> <br>[1] Swift is indeed an opinionated language.<br></p><p><br>Sent from my iPhone.<br></p><p>&gt; On Jun 9, 2016, at 12:35 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 6:16 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt; Grrrr<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt;&gt; <br>&gt;&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt; <br>&gt; But if you followed the email trail you must have noticed that the final choice was not what brent supported. I would even say that it was not any of the solutions anyone proposed.. Proof that the process worked, the team made a change nobody anticipated, yet many people can (partially) identify with. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt;&gt; <br>&gt;&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt;&gt; <br>&gt;&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt;&gt; <br>&gt;&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt;&gt; <br>&gt;&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt;&gt; <br>&gt;&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt;&gt; <br>&gt;&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt;&gt; <br>&gt;&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt;&gt; <br>&gt;&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt;&gt; <br>&gt;&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt;&gt; <br>&gt;&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt;&gt; <br>&gt;&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt;&gt; <br>&gt;&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt;&gt; <br>&gt;&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt;&gt; <br>&gt;&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt;&gt; <br>&gt;&gt; How can us simpletons argue against that?<br>&gt;&gt; <br>&gt;&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt;&gt; <br>&gt;&gt; Again, I hope I am wrong =/<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/7fdd74ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June  9, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 09 Jun 2016, at 18:53, Ethan Eberle via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That said, the one process improvement I have is that proposals should ideally only be “Accepted” by the core team as it is originally written (or with relatively minor changes) or completely “Rejected”.  The “Accepted with Revision” approach can result in new ideas being approved but not being fully vetted by the community.   This also eliminates needless &quot;surprises&quot;, which is always good. Proposal are either accepted or rejected, nothing in between. I actually think this approach is win-win for the core team and the community – although the ultimate decision to reject or approve a proposal must rest with the Core Team. <br></p><p>I disagree, for practical reasons. There is only a  limited time that the Swift team can spend looking at proposals. We already have the situation where a lot of important features (like the full-feature generics) are being postponed from Swift 3. While it is true that your suggestion would result in a more transparent review process, it would also vastly increase the amount of time until the decision is reached. <br></p><p>The core team has shown over and over again that it is able to make very sane and reasonable decisions, which wouldn’t be made if the community reviews would be the only source of input. <br></p><p>Best, <br></p><p> Taras<br></p><p>&gt; <br>&gt; Sent from my iPhone.<br>&gt; <br>&gt; On Jun 9, 2016, at 12:35 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 6:16 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Grrrr<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt;&gt; <br>&gt;&gt; But if you followed the email trail you must have noticed that the final choice was not what brent supported. I would even say that it was not any of the solutions anyone proposed.. Proof that the process worked, the team made a change nobody anticipated, yet many people can (partially) identify with. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How can us simpletons argue against that?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Again, I hope I am wrong =/<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/18c4c39f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 01:00:00pm</p></header><div class="content"><p>Thanks for the thoughtful feedback :)<br></p><p>I partially agree with you on Accepted with Revision...however this could potentially slow down things significantly. I think syntax changes should work the way you describe however as they are more far reaching.<br></p><p>I still love Swift, I am just stung by the loss of some of its character for the sake of consistency. But it is not the end of the world. I just worry about the future if we don&#39;t get more varied feedback.<br></p><p>I would love for where to have a place with its expressivity, but I doubt it at this point. My concern has more to do with the little feedback we get from the community with some of these big changes<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 12:53 PM, Ethan Eberle &lt;ethandeberle at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Brandon –<br>&gt;  <br>&gt; I’ll try to speak for one of those ‘newer’ developers (I’ve only got ~1 year of experience in dev work and it’s all part time as a hobby), although my views obviously only reflect my own.<br>&gt;  <br>&gt; I also had a similar ‘gut’ reaction to the approval but after re-reading it several times the change is surprisingly minor.     At its core, the proposal just involves adding extra ‘lets’ and ‘cases’ to the syntax.  I think this is a great solution that avoids the need for semi-colons or some new delimiter (I first learned to code in Python and semicolons are anathema in my mind).  It also removes the arbitrary use of “where” (I didn’t even know this was possible).  I’d prefer we allow the use of “where” when the constraint applies only to the unwrapped item immediately preceding it, but such is life [1].  (Core Team – I’ll look forward to reading the revised accepted proposal, I’m still confused about a few of the details).<br>&gt;  <br>&gt; In terms of the broader review process, it’s predicated upon users providing timely feedback during the official review period – which went on for the proscribed time.  The core team clearly put much thought into this since it took longer than usual, on balance, to announce their decision. I would add that the only time an accepted proposal should be ‘overturned’ is if the implementation turns out to be too complicated or if there were other downstream affects that weren’t previously discovered in the review process (we’ve already seen a bit of this).  If everything is continually revisited, then there will be next to no forward progress.<br>&gt;  <br>&gt; That said, the one process improvement I have is that proposals should ideally only be “Accepted” by the core team as it is originally written (or with relatively minor changes) or completely “Rejected”.  The “Accepted with Revision” approach can result in new ideas being approved but not being fully vetted by the community.   This also eliminates needless &quot;surprises&quot;, which is always good. Proposal are either accepted or rejected, nothing in between. I actually think this approach is win-win for the core team and the community – although the ultimate decision to reject or approve a proposal must rest with the Core Team.  For this reason, I think in this case it *might* be tenable to “re-visit” this proposal (say, after WWDC) once Chris puts the accepted version&#39;s language on GitHub. It could also be evaluated within the broader context of removing (or retaining) &#39;where&#39; elsewhere in the language (see Erica&#39;s proposal), though for scoping purposes the proposals should remain separate.   If it is re-visited, I’m no compiler/language expert but it seems like you could unambiguously permit the use of ‘where’ in the specific cases I mentioned earlier. It’s purely syntactic sugar and “burns” a keyword but is a nice optional expressivity feature, and I remember seeing some Core Team members showing interest in it.   Maybe this approach is the best of both worlds?  :D<br>&gt;  <br>&gt; “I just wanted to express my concerns for a language I was growing to really love!”<br>&gt;       -&gt; Hopefully you’ll continue to love it :)<br>&gt;  <br>&gt; Just my two cents,<br>&gt; Ethan<br>&gt;  <br>&gt; [1] Swift is indeed an opinionated language.<br>&gt; <br>&gt; <br>&gt; Sent from my iPhone.<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 12:35 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 6:16 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Grrrr<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt;&gt; <br>&gt;&gt; But if you followed the email trail you must have noticed that the final choice was not what brent supported. I would even say that it was not any of the solutions anyone proposed.. Proof that the process worked, the team made a change nobody anticipated, yet many people can (partially) identify with. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How can us simpletons argue against that?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Again, I hope I am wrong =/<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/79790303/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 01:00:00pm</p></header><div class="content"><p>Proof? That remains to be seen as I have said.<br></p><p>Also, I followed the email thread very closely. What I am saying is that I am not surprised that Brent supports this ultimate proposal not that this is what Brent supported originally.<br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 9, 2016, at 12:35 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 6:16 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt; Grrrr<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt;&gt; <br>&gt;&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt; <br>&gt; But if you followed the email trail you must have noticed that the final choice was not what brent supported. I would even say that it was not any of the solutions anyone proposed.. Proof that the process worked, the team made a change nobody anticipated, yet many people can (partially) identify with. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt;&gt; <br>&gt;&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt;&gt; <br>&gt;&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt;&gt; <br>&gt;&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt;&gt; <br>&gt;&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt;&gt; <br>&gt;&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt;&gt; <br>&gt;&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt;&gt; <br>&gt;&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt;&gt; <br>&gt;&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt;&gt; <br>&gt;&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt;&gt; <br>&gt;&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt;&gt; <br>&gt;&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt;&gt; <br>&gt;&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt;&gt; <br>&gt;&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt;&gt; <br>&gt;&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt;&gt; <br>&gt;&gt; How can us simpletons argue against that?<br>&gt;&gt; <br>&gt;&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt;&gt; <br>&gt;&gt; Again, I hope I am wrong =/<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/52f4f900/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>While I preferred a different solution, here, I think that the current “do not design by committee” process is a good one, and the accepted solution is definite improvement. A consistent vision is critical to a project as complex as this. It is certainly in Apple’s DNA, and has served it, and the world, well.<br></p><p>This proposal is one step in achieving overarching goal: &quot;to preserve higher-level consistency throughout the language in how components of expressions and statements are separated” <br></p><p>Well, if you want consistency, why not work through all the cases before freezing on one point solution? Perhaps the process should be expanded to formalize the overarching goal and put proposals like this under it. The process could be something like:<br></p><p>1) Propose goal, and list of point solutions, e.g. “...condition clauses...&quot;<br>2) Review, refine and accept the goal<br>3) Work through tentative point solutions<br>4) Review the entire set of solutions.<br>5) Accept the solution set.<br></p><p>There is distinct possibility that working though other tasks can foster a deeper understanding and uncover better, more consistent solutions. Of course, another proposal can be created to revisit this topic, but that creates more churn. Formally reviewing overarching goals and all the aspects of achieving them could, in the long run, create a better product more efficiently and better involve and align the community.<br></p><p>This might slow down the rate of change in the language and libraries, but that is not necessarily a bad thing in something as complex as attempting to create a new language for a wide spectrum of applications.<br></p><p>This goal may be the exception, but the current process may not be optimal for complex multi-faceted problems that are on the horizon, like creating a metadata system, macros, kernel and driver software (?), ...<br></p><p><br>&gt; On Jun 9, 2016, at 10:16 AM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt; <br>&gt;&gt; No.<br>&gt; <br>&gt; Grrrr<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt; <br>&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt; <br>&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt; <br>&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt; <br>&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt; <br>&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt; <br>&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt; <br>&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt; <br>&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt; <br>&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt; <br>&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt; <br>&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt; <br>&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt; <br>&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt; <br>&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt; <br>&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt; <br>&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt; <br>&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt; <br>&gt; How can us simpletons argue against that?<br>&gt; <br>&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt; <br>&gt; Again, I hope I am wrong =/<br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/80cc8e91/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June  9, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 1:04 PM, Christopher Kornher &lt;ckornher at me.com&gt; wrote:<br>&gt; <br>&gt; While I preferred a different solution, here, I think that the current “do not design by committee” process is a good one, and the accepted solution is definite improvement. A consistent vision is critical to a project as complex as this. It is certainly in Apple’s DNA, and has served it, and the world, well.<br></p><p>I agree mostly…consistency is nice but a little character is also nice too:<br></p><p>new: <br>if let x = x, x &gt; 5 {<br></p><p>}<br></p><p>old:<br>if let x = x where  x &gt; 5 {<br></p><p>}<br></p><p>To me the old way has more character and expressivity than the new way. This is where I think being 100% consistent can lead to a stale language void of character if taken too far.<br></p><p>&gt; <br>&gt; This proposal is one step in achieving overarching goal: &quot;to preserve higher-level consistency throughout the language in how components of expressions and statements are separated” <br></p><p>This is the one argument to end it all in my opinion. However, with the removal of where from conditionals, we are still *not* consistent:<br>- where in case conditions<br>- where in for loops<br>- where in while loops<br>- where used in constraints <br></p><p>Will we now move from:<br>func allItemsMatch&lt;C1: Container, C2: Container where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;<br>    (someContainer: C1, _ anotherContainer: C2) -&gt; Bool<br></p><p>To:<br>func allItemsMatch&lt;C1: Container, C2: Container, C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;<br>    (someContainer: C1, _ anotherContainer: C2) -&gt; Bool<br></p><p>at some point? Or more accurately now:<br>func allItemsMatch&lt;C1: Container, C2: Container&gt;<br>    (someContainer: C1, _ anotherContainer: C2) -&gt; Bool, C1.ItemType == C2.ItemType, C1.ItemType: Equatable<br></p><p>Where has been used to make constraints more expressive, but now that we have removed it from some places, are we even consistent now? where works in some places and not other places. That seems inconsistent to me now.<br></p><p>&gt; <br>&gt; Well, if you want consistency, why not work through all the cases before freezing on one point solution? Perhaps the process should be expanded to formalize the overarching goal and put proposals like this under it. The process could be something like:<br>&gt; <br>&gt; 1) Propose goal, and list of point solutions, e.g. “...condition clauses...&quot;<br>&gt; 2) Review, refine and accept the goal<br>&gt; 3) Work through tentative point solutions<br>&gt; 4) Review the entire set of solutions.<br>&gt; 5) Accept the solution set.<br>&gt; <br>&gt; There is distinct possibility that working though other tasks can foster a deeper understanding and uncover better, more consistent solutions. Of course, another proposal can be created to revisit this topic, but that creates more churn. Formally reviewing overarching goals and all the aspects of achieving them could, in the long run, create a better product more efficiently and better involve and align the community.<br></p><p>I agree 100% and expresses some of my deep concern. Especially for syntax changes.<br></p><p>&gt; <br>&gt; This might slow down the rate of change in the language and libraries, but that is not necessarily a bad thing in something as complex as attempting to create a new language for a wide spectrum of applications.<br></p><p>Agreed. Moving too fast? Maybe. The core team is so smart, I just hope they aren’t juggling too much.<br></p><p>&gt; <br>&gt; This goal may be the exception, but the current process may not be optimal for complex multi-faceted problems that are on the horizon, like creating a metadata system, macros, kernel and driver software (?), …<br></p><p>It will sure be interesting what happens after Swift 3!<br></p><p>Brandon<br></p><p>&gt; <br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 10:16 AM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt; Grrrr<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt;&gt; <br>&gt;&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt;&gt; <br>&gt;&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt;&gt; <br>&gt;&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt;&gt; <br>&gt;&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt;&gt; <br>&gt;&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt;&gt; <br>&gt;&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt;&gt; <br>&gt;&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt;&gt; <br>&gt;&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt;&gt; <br>&gt;&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt;&gt; <br>&gt;&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt;&gt; <br>&gt;&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt;&gt; <br>&gt;&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt;&gt; <br>&gt;&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt;&gt; <br>&gt;&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt;&gt; <br>&gt;&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt;&gt; <br>&gt;&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt;&gt; <br>&gt;&gt; How can us simpletons argue against that?<br>&gt;&gt; <br>&gt;&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt;&gt; <br>&gt;&gt; Again, I hope I am wrong =/<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/5f550c53/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04df463b5832dc11a114a117081d8e8c?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Ethan Eberle</string> &lt;ethandeberle at gmail.com&gt;<p>June  9, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Brandon –<br> <br>I’ll try to speak for one of those ‘newer’ developers (I’ve only got ~1 year of experience in dev work and it’s all part time as a hobby), although my views obviously only reflect my own.<br> <br>I also had a similar ‘gut’ reaction to the approval but after re-reading it several times the change is surprisingly minor.     At its core, the proposal just involves adding extra ‘lets’ and ‘cases’ to the syntax.  I think this is a great solution that avoids the need for semi-colons or some new delimiter (I first learned to code in Python and semicolons are anathema in my mind).  It also removes the arbitrary use of “where” (I didn’t even know this was possible).  I’d prefer we allow the use of “where” when the constraint applies only to the unwrapped item immediately preceding it, but such is life [1].  (Core Team – I’ll look forward to reading the revised accepted proposal, I’m still confused about a few of the details).<br> <br>In terms of the broader review process, it’s predicated upon users providing timely feedback during the official review period – which went on for the proscribed time.  The core team clearly put much thought into this since it took longer than usual, on balance, to announce their decision. I would add that the only time an accepted proposal should be ‘overturned’ is if the implementation turns out to be too complicated or if there were other downstream affects that weren’t previously discovered in the review process (we’ve already seen a bit of this).  If everything is continually revisited, then there will be next to no forward progress.<br> <br>That said, the one process improvement I have is that proposals should ideally only be “Accepted” by the core team as it is originally written (or with relatively minor changes) or completely “Rejected”.  The “Accepted with Revision” approach can result in new ideas being approved but not being fully vetted by the community.   This also eliminates needless &quot;surprises&quot;, which is always good. Proposal are either accepted or rejected, nothing in between. I actually think this approach is win-win for the core team and the community – although the ultimate decision to reject or approve a proposal must rest with the Core Team.  <br></p><p>I&#39;m For this reason, I think in this case it *might* be tenable to “re-visit” this proposal (say, after WWDC) once Chris puts the accepted version&#39;s language on GitHub. It could also be evaluated within the broader context of removing (or retaining) &#39;where&#39; elsewhere in the language (see Erica&#39;s proposal), though for scoping purposes the proposals should remain separate.   If it is re-visited, I’m no compiler/language expert but it seems like you could unambiguously permit the use of ‘where’ in the specific cases I mentioned earlier. It’s purely syntactic sugar and “burns” a keyword but is a nice optional expressivity feature, and I remember seeing some Core Team members showing interest in it.   Maybe this approach is the best of both worlds?  :D<br> <br>“I just wanted to express my concerns for a language I was growing to really love!”<br>      -&gt; Hopefully you’ll continue to love it :)<br> <br>Just my two cents,<br>Ethan<br> <br>[1] Swift is indeed an opinionated language.<br></p><p><br>Sent from my iPhone.<br></p><p>&gt; On Jun 9, 2016, at 12:16 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Jun 9, 2016, at 11:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I believe large syntax changes should have more discussion from more developers and not a very small subset of them. The review announcement needs to be broader: the swift blog needs to announce it so more people know.<br>&gt;&gt; <br>&gt;&gt; No.<br>&gt; <br>&gt; Grrrr<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Firstly, for those who cannot follow the list—and I can&#39;t say I blame them—the -announce list already allows them to ignore everything except the beginnings of reviews. Anyone who wants to (and who speaks English) can be notified of any significant proposed change to the language and can submit their comments for the core team&#39;s consideration. That is enough.<br>&gt; <br>&gt; I think your perspective is flawed here. You are precisely one of the &quot;top developers&quot; I have been referring to. Am I surprised this is your opinion? Not one bit.<br>&gt; <br>&gt; Mailing lists are a rather old thing...and I think many will find them daunting or maybe somewhat annoying with all of the announcements. How many people are subscribed to announce? It does not seem like many because well...we don&#39;t always get a lot of feedback. We get feedback from the same people over and over. How is this enough? How is this enough variety?<br>&gt; <br>&gt; Just because &quot;announce&quot; is more palatable does not mean that it is being used in the way you are describing. <br>&gt; <br>&gt; Maybe there is another problem then: people afraid to share their opinions publicly. I wonder why this would be.<br>&gt; <br>&gt;&gt; The purpose of reviews is not to cast ballots for or against a feature. It is to submit arguments, for and against, for the core team to consider as they decide whether and how to address the problem the proposal&#39;s &quot;Motivation&quot; section describes. For that purpose, there is no need to collect hundreds or thousands of reviews, and if we did, the review manager would be swamped anyway. It is enough to get a reasonable variety of eyes, from a reasonable variety of perspectives, on the problem.<br>&gt; <br>&gt; Why do people keep saying I am asking for: &quot;hundreds or thousands&quot; of reviews? I am just asking for something like 20 - 25 unique people&#39;s feedback. We are not getting that. We get the same people over and over...which makes the feedback seem screwed to this small group&#39;s philosophies.<br>&gt; <br>&gt; Getting feedback from the same ~10 people is not a &quot;reasonable variety of eyes&quot; in my opinion. That is a very small sample. And that sample is usually those who are very technically skilled...who I would say do not always design the best interfaces.<br>&gt; <br>&gt;&gt; I think that has happened here. We have not heard from every perspective, but we have heard from enough of them that adding more will not help all that much. Feedback always has diminishing returns: going from one person to two is far more valuable than going from fifty-one to fifty-two.<br>&gt; <br>&gt; I think you will be very surprised come WWDC when people learn of this change.<br>&gt; <br>&gt; How is there value when the same people keep justifying changes for the sake of consistency? Is this in the user&#39;s best interest? Or is this in the swift engineer&#39;s best interest? <br>&gt; <br>&gt; This is precisely why I think more feedback is important. We need more than just the same people propping up proposals that gives an illusion that it is representative of everyone using swift.<br>&gt; <br>&gt; The bar should be high for changing syntax, so I don&#39;t buy the argument that 25 people sharing their feedback is somehow less valuable than 10 people sharing.<br>&gt; <br>&gt;&gt; And in particular, I *don&#39;t* think the beginner perspective is an especially worrisome one for this particular proposal.<br>&gt; <br>&gt; I don&#39;t think this was though through thoroughly enough. It just happened too fast<br>&gt; <br>&gt;&gt; Though some of the syntaxes we considered might have been confusing for beginners (*cough*semicolon*cough*), the one the core team settled in is actually one of the simplest, and certainly much simpler than the status quo. If anything, the people most disadvantaged by this solution are the power users who are used to the &quot;multiple if-let&quot; shorthand and will now have to add extra keywords to their code.<br>&gt; <br>&gt; Maybe you are right. Maybe I am vastly wrong. But I guess this will be clearer come WWDC.<br>&gt; <br>&gt; And I already know how the people complaining about this change will be silenced: it was done for the consistency of the language and the grammar.<br>&gt; <br>&gt; How can us simpletons argue against that?<br>&gt; <br>&gt; Also, I want to make clear that my concern is not just for this review but for future reviews also. How different could the language look with more varied feedback?<br>&gt; <br>&gt; Again, I hope I am wrong =/<br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/ba93cd0a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 12:53 AM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 9 Jun 2016, at 02:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer.<br>&gt; <br>&gt; Can we get some clarification as to why ‘where’ is being chosen to be retired here? I’m deeply disappointed by that decision as enabling the consistent use of comma as a separator does not preclude the use of where for simple cases that don’t require it. I’m all for having a more usable separator for complex conditionals, but I rarely need it, meanwhile in common, simple conditional bindings and patterns I find the ‘where’ keyword a lot more readable, i.e:<br>&gt; <br>&gt; 	if let value = foo where foo &gt; 5 { … }<br>&gt; 	if let value = foo, foo &gt; 5 { … }<br>&gt; <br>&gt; The latter just doesn’t read as cleanly to me, and these are the kinds of simple conditionals that I use a lot of. As such as I’d still prefer to have ‘where’ be usable in the simple case, and I feel it was a mistake for the SE-0099 to have it tied to changes to the separator as the two changes aren’t mutually exclusive.<br></p><p>Like the flounder and the human appendix, it was a vestige of incomplete evolution. Our current design emerged from an original design that attempted to unify &quot;switch&quot;-style pattern matching and &quot;let&quot;-style destructuring, the idea being that &#39;&lt;pattern&gt; = &lt;value&gt;&#39; should work for patterns that never fail to match, such as variable bindings and tuples, as a special case of &#39;switch &lt;value&gt; { case &lt;pattern&gt; where &lt;condition&gt;: }&#39; or &#39;if &lt;pattern&gt; = &lt;value&gt; where &lt;condition&gt;&#39;, which would allow for arbitrary conditional pattern matching. We ultimately didn&#39;t go in that direction after getting strong negative feedback from our internal adopters, who had grown accustomed to the &#39;if let&#39; sugar for optional binding.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Accepted with Revision] SE-0099 Restructuring Condition Clauses</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June  9, 2016 at 10:00:00am</p></header><div class="content"><p>A concern that I have with this is that comma seems to get inconsistent treatment in the language. In conditionals, commas clearly represent conjunctive clauses. However, the core team has also argued (review of SE-0095) that usage of comma implies disjunction and proposes that ‚&amp;‘ is used for specifying intersection (conjunction) of types. So which is it? If we want to be 100% consistent, we should either adopt commas as conjunction through the language, or, use &amp;/&amp;&amp; for conjunction. Personally, I have no problems accepting commas as conjunction.<br></p><p>— Taras<br></p><p><br>&gt; On 09 Jun 2016, at 03:47, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The review of SE-0099 &quot;Restructuring Condition Clauses&quot; ran from January 13...18, 2016. The proposal has been accepted with revision for Swift 3. There was near unanimous agreement that the Swift 2 grammar was inconsistent and ambiguous and should be changed; most of the disagreement centered on how. Many alternatives were discussed, including the following:<br>&gt; <br>&gt; - The proposal as written suggests using &#39;;&#39; or newline as a separator. To many people, this looked heavy, and it&#39;s also inconsistent with the rest of the language, which never otherwise used semicolon as an intra-statement separator (except in the defunct for;; loop).<br>&gt; - Introducing a keyword separator, such as using &#39;where&#39; everywhere or introducing a new &#39;and&#39; keyword, is also bulky and either reads poorly or requires stealing new keywords.<br>&gt; - Some commenters suggested using &#39;&amp;&amp;&#39; for consistency with simple boolean conditions. This isn&#39;t workable due to precedence issues.<br>&gt; - The ambiguities arise from the fact that there are comma-separated lists within comma-separated lists—within the list of conditions, each &#39;case&#39; or &#39;let&#39; condition can have multiple declarations. If we eliminated this feature, so that every &#39;case&#39; or &#39;let&#39; condition had to start with &#39;case&#39; or &#39;let&#39;, the ambiguity is resolved, and comma can remain the condition separator. This does break consistency with non-conditional &#39;let&#39; declarations and case clauses in &#39;switch&#39; but is otherwise workable.<br>&gt; <br>&gt; Of these alternatives, the core team found the last one to be the best choice. &#39;case&#39; and &#39;let&#39; conditions should each specify a single declaration, comma should remain the condition separator, and the &#39;where&#39; keyword can be retired from its purpose as a boolean condition introducer. Some code becomes more verbose, but in common formatting patterns, it aligns more nicely, as in:<br>&gt; <br>&gt; 	guard<br>&gt; 	  let x = foo(),<br>&gt; 	  let y = bar(),<br>&gt; 	  let z = bas(),<br>&gt; 	  x == y || y == z else {<br>&gt; 	}<br>&gt; <br>&gt; and though it breaks commonality between &#39;let&#39; conditions and &#39;let&#39; declarations, it&#39;s more important to preserve higher-level consistency throughout the language in how components of expressions and statements are separated. Thanks everyone for the discussion, and thanks Erica and Chris for the proposal! Since, aside from the approved syntax, the fundamental thrust of the proposal remains the same, Chris has volunteered to revise it to be in line with the approved decision.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/3dbfbfd6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
