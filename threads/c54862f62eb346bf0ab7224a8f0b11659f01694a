<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58198fee5117e461741cf98ff9a8a9e6?s=50"></div><header><strong>try? works on non-method-call?</strong> from <string>Sikhapol Saijit</string> &lt;sikhapol at gmail.com&gt;<p>July 21, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Swift Community,<br></p><p><br>Yesterday I tried this code:<br></p><p>```<br>func couldFailButWillNot() throws -&gt; Any {<br>  return 42<br>}<br></p><p>if let a = try? couldFailButWillNot() as? Int {<br>  print(a)<br>}<br>```<br></p><p>And was surprised that the output was &quot;Optional(42)” on both Swift 2.2 and Swift 3.<br>I always have the impression that when a variable is resolved with `if let` it will never be optional.<br></p><p>So, with a little investigation, I found out that it happens because `as?` has higher precedence than `try?` and is evaluated first.<br>And the whole expression `try? couldFailButWillNot() as? Int` evaluated as “Optional(Optional(42))”.<br></p><p>Also, I’m surprised that `try?` can be used with non-method-call.<br>This code: `print(try? 42)` will print “Optional(42)”.<br></p><p>So, the questions are:<br></p><p>1. Is it intentional that `try?` can be used with non-method-call and return an optional of the type that follows?<br></p><p>2. Should we design `try?` to have higher precedence than `as?`. <br>My intuition tells me that <br>`let a = try? couldFailButWillNot() as? Int`<br>and <br>`let a = (try? couldFailButWillNot()) as? Int` <br>should be equivalent.<br></p><p>3. Do you think that doubly-nested optional (or multi-level-nested optional) is confusing and should be removed from Swift? (Yes, I’ve seen this blog post [Optionals Case Study: valuesForKeys](https://developer.apple.com/swift/blog/?id=12 &lt;https://developer.apple.com/swift/blog/?id=12&gt;))<br>For me “Optional(nil)” (aka “Optional.Some(Optional.None))”) doesn’t make any sense at all. <br>Maybe, one of the solution is to always have optional of optional merged into a single level optional? Like Optional(Optional(Optional(42))) should be the merged to Optional(42).<br></p><p><br>Thank you<br>Sikhapol Saijit (Sam)<br>iOS Developer, Taskworld, Bangkok<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/c548694a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>try? works on non-method-call?</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 21, 2016 at 08:00:00am</p></header><div class="content"><p>I think that on error or warning like this is the right solution.<br></p><p>&gt; On 21 Jul 2016, at 08:13, Sikhapol Saijit via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; 1. Is it intentional that `try?` can be used with non-method-call and return an optional of the type that follows?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/afa08daa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eada20d8d86f9b78ef64f570acd29e9?s=50"></div><header><strong>try? works on non-method-call?</strong> from <string>Nicholas Outram</string> &lt;nicholas.outram at icloud.com&gt;<p>July 21, 2016 at 08:00:00am</p></header><div class="content"><p>The issue is related to the as? <br></p><p>Try this:<br></p><p>if let a = try? couldFailButWillNot()  {<br>   print(a)<br>}<br></p><p><br>Nick<br></p><p>&gt; On 21 Jul 2016, at 07:13, Sikhapol Saijit via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift Community,<br>&gt; <br>&gt; <br>&gt; Yesterday I tried this code:<br>&gt; <br>&gt; ```<br>&gt; func couldFailButWillNot() throws -&gt; Any {<br>&gt;   return 42<br>&gt; }<br>&gt; <br>&gt; if let a = try? couldFailButWillNot() as? Int {<br>&gt;   print(a)<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; And was surprised that the output was &quot;Optional(42)” on both Swift 2.2 and Swift 3.<br>&gt; I always have the impression that when a variable is resolved with `if let` it will never be optional.<br>&gt; <br>&gt; So, with a little investigation, I found out that it happens because `as?` has higher precedence than `try?` and is evaluated first.<br>&gt; And the whole expression `try? couldFailButWillNot() as? Int` evaluated as “Optional(Optional(42))”.<br>&gt; <br>&gt; Also, I’m surprised that `try?` can be used with non-method-call.<br>&gt; This code: `print(try? 42)` will print “Optional(42)”.<br>&gt; <br>&gt; So, the questions are:<br>&gt; <br>&gt; 1. Is it intentional that `try?` can be used with non-method-call and return an optional of the type that follows?<br>&gt; <br>&gt; 2. Should we design `try?` to have higher precedence than `as?`. <br>&gt; My intuition tells me that <br>&gt; `let a = try? couldFailButWillNot() as? Int`<br>&gt; and <br>&gt; `let a = (try? couldFailButWillNot()) as? Int` <br>&gt; should be equivalent.<br>&gt; <br>&gt; 3. Do you think that doubly-nested optional (or multi-level-nested optional) is confusing and should be removed from Swift? (Yes, I’ve seen this blog post [Optionals Case Study: valuesForKeys](https://developer.apple.com/swift/blog/?id=12 &lt;https://developer.apple.com/swift/blog/?id=12&gt;))<br>&gt; For me “Optional(nil)” (aka “Optional.Some(Optional.None))”) doesn’t make any sense at all. <br>&gt; Maybe, one of the solution is to always have optional of optional merged into a single level optional? Like Optional(Optional(Optional(42))) should be the merged to Optional(42).<br>&gt; <br>&gt; <br>&gt; Thank you<br>&gt; Sikhapol Saijit (Sam)<br>&gt; iOS Developer, Taskworld, Bangkok<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/3aebb915/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eada20d8d86f9b78ef64f570acd29e9?s=50"></div><header><strong>try? works on non-method-call?</strong> from <string>Nicholas Outram</string> &lt;nicholas.outram at icloud.com&gt;<p>July 21, 2016 at 09:00:00am</p></header><div class="content"><p>Are we saying this function <br></p><p>func couldFailButWillNot() throws -&gt; Any {<br>  return 42<br>}<br></p><p>has an implicit Int return type?<br></p><p>If so, there is actually no need for as? (which will result in an Optional - which I thought that was the behaviour in Swift 2 as well?)<br></p><p><br></p><p>&gt; On 21 Jul 2016, at 08:59, Nicholas Outram via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The issue is related to the as? <br>&gt; <br>&gt; Try this:<br>&gt; <br>&gt; if let a = try? couldFailButWillNot()  {<br>&gt;    print(a)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Nick<br>&gt; <br>&gt;&gt; On 21 Jul 2016, at 07:13, Sikhapol Saijit via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift Community,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Yesterday I tried this code:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; func couldFailButWillNot() throws -&gt; Any {<br>&gt;&gt;   return 42<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let a = try? couldFailButWillNot() as? Int {<br>&gt;&gt;   print(a)<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; And was surprised that the output was &quot;Optional(42)” on both Swift 2.2 and Swift 3.<br>&gt;&gt; I always have the impression that when a variable is resolved with `if let` it will never be optional.<br>&gt;&gt; <br>&gt;&gt; So, with a little investigation, I found out that it happens because `as?` has higher precedence than `try?` and is evaluated first.<br>&gt;&gt; And the whole expression `try? couldFailButWillNot() as? Int` evaluated as “Optional(Optional(42))”.<br>&gt;&gt; <br>&gt;&gt; Also, I’m surprised that `try?` can be used with non-method-call.<br>&gt;&gt; This code: `print(try? 42)` will print “Optional(42)”.<br>&gt;&gt; <br>&gt;&gt; So, the questions are:<br>&gt;&gt; <br>&gt;&gt; 1. Is it intentional that `try?` can be used with non-method-call and return an optional of the type that follows?<br>&gt;&gt; <br>&gt;&gt; 2. Should we design `try?` to have higher precedence than `as?`. <br>&gt;&gt; My intuition tells me that <br>&gt;&gt; `let a = try? couldFailButWillNot() as? Int`<br>&gt;&gt; and <br>&gt;&gt; `let a = (try? couldFailButWillNot()) as? Int` <br>&gt;&gt; should be equivalent.<br>&gt;&gt; <br>&gt;&gt; 3. Do you think that doubly-nested optional (or multi-level-nested optional) is confusing and should be removed from Swift? (Yes, I’ve seen this blog post [Optionals Case Study: valuesForKeys](https://developer.apple.com/swift/blog/?id=12 &lt;https://developer.apple.com/swift/blog/?id=12&gt;))<br>&gt;&gt; For me “Optional(nil)” (aka “Optional.Some(Optional.None))”) doesn’t make any sense at all. <br>&gt;&gt; Maybe, one of the solution is to always have optional of optional merged into a single level optional? Like Optional(Optional(Optional(42))) should be the merged to Optional(42).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thank you<br>&gt;&gt; Sikhapol Saijit (Sam)<br>&gt;&gt; iOS Developer, Taskworld, Bangkok<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/495a683a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58198fee5117e461741cf98ff9a8a9e6?s=50"></div><header><strong>try? works on non-method-call?</strong> from <string>Sikhapol Saijit</string> &lt;sikhapol at gmail.com&gt;<p>July 21, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Nick,<br></p><p>The code was simplified for demonstration.<br>You’re right that in a simple case like that I wouldn’t need to use `as?`.<br></p><p>In my actual case it was something like this:<br></p><p>func parse(JSON: Data) throws -&gt; Any {<br>    // …<br>}<br></p><p>if let dict = try? parse(JSON: json) as? [String: Any] {<br>    // assume dict is a valid [String: Any] dictionary<br>    // …<br>}<br></p><p>Sure, this could be written as:<br></p><p>if let jsonObject = try? parse(JSON: json), <br>let dict = jsonObject as? [String: Any] {<br>    // …<br>}<br></p><p>But I just wonder why the first case behave as it does and whether it should.<br></p><p>Sam<br></p><p>&gt; On Jul 21, 2016, at 3:03 PM, Nicholas Outram &lt;nicholas.outram at icloud.com&gt; wrote:<br>&gt; <br>&gt; Are we saying this function <br>&gt; <br>&gt; func couldFailButWillNot() throws -&gt; Any {<br>&gt;   return 42<br>&gt; }<br>&gt; <br>&gt; has an implicit Int return type?<br>&gt; <br>&gt; If so, there is actually no need for as? (which will result in an Optional - which I thought that was the behaviour in Swift 2 as well?)<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 21 Jul 2016, at 08:59, Nicholas Outram via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The issue is related to the as? <br>&gt;&gt; <br>&gt;&gt; Try this:<br>&gt;&gt; <br>&gt;&gt; if let a = try? couldFailButWillNot()  {<br>&gt;&gt;    print(a)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Nick<br>&gt;&gt; <br>&gt;&gt;&gt; On 21 Jul 2016, at 07:13, Sikhapol Saijit via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Swift Community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yesterday I tried this code:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; func couldFailButWillNot() throws -&gt; Any {<br>&gt;&gt;&gt;   return 42<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if let a = try? couldFailButWillNot() as? Int {<br>&gt;&gt;&gt;   print(a)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And was surprised that the output was &quot;Optional(42)” on both Swift 2.2 and Swift 3.<br>&gt;&gt;&gt; I always have the impression that when a variable is resolved with `if let` it will never be optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, with a little investigation, I found out that it happens because `as?` has higher precedence than `try?` and is evaluated first.<br>&gt;&gt;&gt; And the whole expression `try? couldFailButWillNot() as? Int` evaluated as “Optional(Optional(42))”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I’m surprised that `try?` can be used with non-method-call.<br>&gt;&gt;&gt; This code: `print(try? 42)` will print “Optional(42)”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, the questions are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Is it intentional that `try?` can be used with non-method-call and return an optional of the type that follows?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. Should we design `try?` to have higher precedence than `as?`. <br>&gt;&gt;&gt; My intuition tells me that <br>&gt;&gt;&gt; `let a = try? couldFailButWillNot() as? Int`<br>&gt;&gt;&gt; and <br>&gt;&gt;&gt; `let a = (try? couldFailButWillNot()) as? Int` <br>&gt;&gt;&gt; should be equivalent.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. Do you think that doubly-nested optional (or multi-level-nested optional) is confusing and should be removed from Swift? (Yes, I’ve seen this blog post [Optionals Case Study: valuesForKeys](https://developer.apple.com/swift/blog/?id=12 &lt;https://developer.apple.com/swift/blog/?id=12&gt;))<br>&gt;&gt;&gt; For me “Optional(nil)” (aka “Optional.Some(Optional.None))”) doesn’t make any sense at all. <br>&gt;&gt;&gt; Maybe, one of the solution is to always have optional of optional merged into a single level optional? Like Optional(Optional(Optional(42))) should be the merged to Optional(42).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you<br>&gt;&gt;&gt; Sikhapol Saijit (Sam)<br>&gt;&gt;&gt; iOS Developer, Taskworld, Bangkok<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/301fb8e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>try? works on non-method-call?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 21, 2016 at 04:00:00pm</p></header><div class="content"><p>I think the best way is<br></p><p>do {<br></p><p>    let a = try couldFailButWillNot()<br></p><p>    if let b = a as? Int {<br></p><p>        print(b)<br></p><p>    }<br></p><p>} catch let error {<br></p><p>    print(error)<br></p><p>}<br></p><p>It is longer, but much clearer.<br></p><p>Below code will work, but not as clear. You don&#39;t know whether it is a or b<br>causes the failure. It is not a good practice to use try? if that is not on<br>purpose.<br></p><p>if let a = try? couldFailButWillNot(), let b = a as? Int {<br></p><p>    print(b)<br></p><p>}<br>or<br></p><p>if let a = (try? couldFailButWillNot()) as? Int {<br></p><p>    print(a)<br></p><p>}<br></p><p>Zhaoxin<br></p><p>On Thu, Jul 21, 2016 at 4:25 PM, Sikhapol Saijit via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi Nick,<br>&gt;<br>&gt; The code was simplified for demonstration.<br>&gt; You’re right that in a simple case like that I wouldn’t need to use `as?`.<br>&gt;<br>&gt; In my actual case it was something like this:<br>&gt;<br>&gt; func parse(JSON: Data) throws -&gt; Any {<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; if let dict = try? parse(JSON: json) as? [String: Any] {<br>&gt;     // assume dict is a valid [String: Any] dictionary<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; Sure, this could be written as:<br>&gt;<br>&gt; if let jsonObject = try? parse(JSON: json),<br>&gt; let dict = jsonObject as? [String: Any] {<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; But I just wonder why the first case behave as it does and whether it<br>&gt; should.<br>&gt;<br>&gt; Sam<br>&gt;<br>&gt; On Jul 21, 2016, at 3:03 PM, Nicholas Outram &lt;nicholas.outram at icloud.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Are we saying this function<br>&gt;<br>&gt; func couldFailButWillNot() throws -&gt; Any {<br>&gt;   return 42<br>&gt; }<br>&gt;<br>&gt; has an implicit Int return type?<br>&gt;<br>&gt; If so, there is actually no need for as? (which will result in an Optional<br>&gt; - which I thought that was the behaviour in Swift 2 as well?)<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 21 Jul 2016, at 08:59, Nicholas Outram via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; The issue is related to the as?<br>&gt;<br>&gt; Try this:<br>&gt;<br>&gt; if let a = try? couldFailButWillNot()  {<br>&gt;    print(a)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Nick<br>&gt;<br>&gt; On 21 Jul 2016, at 07:13, Sikhapol Saijit via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi Swift Community,<br>&gt;<br>&gt;<br>&gt; Yesterday I tried this code:<br>&gt;<br>&gt; ```<br>&gt; func couldFailButWillNot() throws -&gt; Any {<br>&gt;   return 42<br>&gt; }<br>&gt;<br>&gt; if let a = try? couldFailButWillNot() as? Int {<br>&gt;   print(a)<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; And was surprised that the output was *&quot;Optional(42)”* on both Swift 2.2<br>&gt; and Swift 3.<br>&gt; I always have the impression that when a variable is resolved with `if<br>&gt; let` it will never be optional.<br>&gt;<br>&gt; So, with a little investigation, I found out that it happens because `as?`<br>&gt; has higher precedence than `try?` and is evaluated first.<br>&gt; And the whole expression `try? couldFailButWillNot() as? Int` evaluated<br>&gt; as *“Optional(Optional(42))”*.<br>&gt;<br>&gt; Also, I’m surprised that `try?` can be used with non-method-call.<br>&gt; This code: `print(try? 42)` will print *“Optional(42)”*.<br>&gt;<br>&gt; So, the questions are:<br>&gt;<br>&gt; 1. Is it intentional that `try?` can be used with non-method-call and<br>&gt; return an optional of the type that follows?<br>&gt;<br>&gt; 2. Should we design `try?` to have higher precedence than `as?`.<br>&gt; My intuition tells me that<br>&gt; `let a = try? couldFailButWillNot() as? Int`<br>&gt; and<br>&gt; `let a = (try? couldFailButWillNot()) as? Int`<br>&gt; should be equivalent.<br>&gt;<br>&gt; 3. Do you think that doubly-nested optional (or multi-level-nested<br>&gt; optional) is confusing and should be removed from Swift? (Yes, I’ve seen<br>&gt; this blog post [Optionals Case Study: valuesForKeys](<br>&gt; https://developer.apple.com/swift/blog/?id=12))<br>&gt; For me “Optional(nil)” (aka “Optional.Some(Optional.None))”) doesn’t make<br>&gt; any sense at all.<br>&gt; Maybe, one of the solution is to always have optional of optional merged<br>&gt; into a single level optional? Like Optional(Optional(Optional(42))) should<br>&gt; be the merged to Optional(42).<br>&gt;<br>&gt;<br>&gt; Thank you<br>&gt; Sikhapol Saijit (Sam)<br>&gt; iOS Developer, Taskworld, Bangkok<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/39ff0375/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
