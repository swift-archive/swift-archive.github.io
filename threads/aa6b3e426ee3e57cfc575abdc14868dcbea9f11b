<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>August  1, 2016 at 09:00:00pm</p></header><div class="content"><p>It was stated that 27th of July was the last date for proposal acceptance,<br>29th of July was the last day for implementation, and 1th of August should<br>be the starting day of Swift 3.1-related discussions.<br>Am I right? Should we begin?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/aa6bf11b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August  1, 2016 at 10:00:00pm</p></header><div class="content"><p>See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html&gt;<br></p><p>From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html&gt;<br></p><p>I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br></p><p><br>&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt; Am I right? Should we begin?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/1be46662/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68d21c811b4f037d9cbd43013319f9b4?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Muse M</string> &lt;james.lei65 at gmail.com&gt;<p>August  2, 2016 at 09:00:00am</p></header><div class="content"><p>Have always wonder why Maths in Swift is slower than C and Go, it should be<br>address with priority if Swift is to be adopt for engineering, financial<br>and science industry.<br></p><p>On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; See<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;<br>&gt; From what I understand, the discussion should stay focused on the main<br>&gt; topics for Swift 4 that Chris highlighted in<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;<br>&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing<br>&gt; the schedule...<br>&gt;<br>&gt;<br>&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; It was stated that 27th of July was the last date for proposal acceptance,<br>&gt; 29th of July was the last day for implementation, and 1th of August should<br>&gt; be the starting day of Swift 3.1-related discussions.<br>&gt; Am I right? Should we begin?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/b77d2920/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  1, 2016 at 06:00:00pm</p></header><div class="content"><p>Well, it depends on what kind of Math youâ€™re trying to do. The Accelerate framework is available if you need performance.<br>Saagar Jha<br></p><p><br></p><p>&gt; On Aug 1, 2016, at 18:01, Muse M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Have always wonder why Maths in Swift is slower than C and Go, it should be address with priority if Swift is to be adopt for engineering, financial and science industry.<br>&gt; <br>&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html&gt;<br>&gt; <br>&gt; From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html&gt;<br>&gt; <br>&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br>&gt; <br>&gt; <br>&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt; Am I right? Should we begin?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160801/885875ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  2, 2016 at 02:00:00pm</p></header><div class="content"><p>I&#39;d like to echo Muse&#39;s point. Accelerate is no solution: it&#39;s not<br>available on Linux (and cross-platform numerics is very much essential for<br>the sciences--I assume engineering and finance as well); moreover, it<br>doesn&#39;t solve the issue of, as you point out, other kinds of math.<br></p><p>The appeal to me of Swift was that it promised a memory-safe-by-default<br>systems programming language, a compiled language with performance that can<br>be in the same ballpark as C. So while specialized libraries like BLAS can<br>speed up matrix algebra considerably, IMO, the same kinds of math that are<br>done in C or Go or Rust without calling BLAS should perform roughly<br>equivalently when ported to Swift. That it doesn&#39;t should be a bug, and the<br>workaround shouldn&#39;t have to be dropping down to or calling out to<br>libraries written in C or Fortran.<br></p><p>Recently, I discovered that a straightforward numerics algorithm that only<br>adds, divides, multiplies, and compares floating point values slowed down<br>five to ten *times* between preview 3 and preview 4. This was stunning--and<br>if performance ever was comparable to C before (I didn&#39;t check for this<br>particular function), I know for sure that it isn&#39;t anymore! Although I&#39;m<br>confident that the underlying cause will be found, it does raise questions<br>as to the continued wisdom of writing even somewhat performance-sensitive<br>math in Swift.<br>On Mon, Aug 1, 2016 at 20:04 Saagar Jha via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Well, it depends on what kind of Math youâ€™re trying to do. The Accelerate<br>&gt; framework is available if you need performance.<br>&gt;<br>&gt; Saagar Jha<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Aug 1, 2016, at 18:01, Muse M via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Have always wonder why Maths in Swift is slower than C and Go, it should<br>&gt; be address with priority if Swift is to be adopt for engineering, financial<br>&gt; and science industry.<br>&gt;<br>&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; See<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;<br>&gt;&gt; From what I understand, the discussion should stay focused on the main<br>&gt;&gt; topics for Swift 4 that Chris highlighted in<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;<br>&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing<br>&gt;&gt; the schedule...<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It was stated that 27th of July was the last date for proposal<br>&gt;&gt; acceptance, 29th of July was the last day for implementation, and 1th of<br>&gt;&gt; August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt; Am I right? Should we begin?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/5853e887/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>August  2, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Aug 2, 2016, at 07:38, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to echo Muse&#39;s point. Accelerate is no solution: it&#39;s not available on Linux (and cross-platform numerics is very much essential for the sciences--I assume engineering and finance as well); moreover, it doesn&#39;t solve the issue of, as you point out, other kinds of math.<br>&gt; <br>&gt; The appeal to me of Swift was that it promised a memory-safe-by-default systems programming language, a compiled language with performance that can be in the same ballpark as C. So while specialized libraries like BLAS can speed up matrix algebra considerably, IMO, the same kinds of math that are done in C or Go or Rust without calling BLAS should perform roughly equivalently when ported to Swift. That it doesn&#39;t should be a bug, and the workaround shouldn&#39;t have to be dropping down to or calling out to libraries written in C or Fortran.<br>&gt; <br>&gt; Recently, I discovered that a straightforward numerics algorithm that only adds, divides, multiplies, and compares floating point values slowed down five to ten *times* between preview 3 and preview 4.<br></p><p>Can you open a bug at bugs.swift.org and include a test case that can be compiled and executed to demonstrate the issue?<br></p><p>Mark<br></p><p>&gt; This was stunning--and if performance ever was comparable to C before (I didn&#39;t check for this particular function), I know for sure that it isn&#39;t anymore! Although I&#39;m confident that the underlying cause will be found, it does raise questions as to the continued wisdom of writing even somewhat performance-sensitive math in Swift.<br>&gt;&gt; On Mon, Aug 1, 2016 at 20:04 Saagar Jha via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Well, it depends on what kind of Math youâ€™re trying to do. The Accelerate framework is available if you need performance.<br>&gt;&gt; <br>&gt;&gt; Saagar Jha<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 1, 2016, at 18:01, Muse M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should be address with priority if Swift is to be adopt for engineering, financial and science industry.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/948e7a3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Already filed as SR-2247, complete with XCode project and performance test<br>:)<br></p><p>Jordan Rose was kind enough to duplicate it into Radar as well.<br></p><p>On Tue, Aug 2, 2016 at 09:44 Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Aug 2, 2016, at 07:38, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;d like to echo Muse&#39;s point. Accelerate is no solution: it&#39;s not<br>&gt; available on Linux (and cross-platform numerics is very much essential for<br>&gt; the sciences--I assume engineering and finance as well); moreover, it<br>&gt; doesn&#39;t solve the issue of, as you point out, other kinds of math.<br>&gt;<br>&gt; The appeal to me of Swift was that it promised a memory-safe-by-default<br>&gt; systems programming language, a compiled language with performance that can<br>&gt; be in the same ballpark as C. So while specialized libraries like BLAS can<br>&gt; speed up matrix algebra considerably, IMO, the same kinds of math that are<br>&gt; done in C or Go or Rust without calling BLAS should perform roughly<br>&gt; equivalently when ported to Swift. That it doesn&#39;t should be a bug, and the<br>&gt; workaround shouldn&#39;t have to be dropping down to or calling out to<br>&gt; libraries written in C or Fortran.<br>&gt;<br>&gt; Recently, I discovered that a straightforward numerics algorithm that only<br>&gt; adds, divides, multiplies, and compares floating point values slowed down<br>&gt; five to ten *times* between preview 3 and preview 4.<br>&gt;<br>&gt;<br>&gt; Can you open a bug at bugs.swift.org and include a test case that can be<br>&gt; compiled and executed to demonstrate the issue?<br>&gt;<br>&gt; Mark<br>&gt;<br>&gt; This was stunning--and if performance ever was comparable to C before (I<br>&gt; didn&#39;t check for this particular function), I know for sure that it isn&#39;t<br>&gt; anymore! Although I&#39;m confident that the underlying cause will be found, it<br>&gt; does raise questions as to the continued wisdom of writing even somewhat<br>&gt; performance-sensitive math in Swift.<br>&gt; On Mon, Aug 1, 2016 at 20:04 Saagar Jha via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Well, it depends on what kind of Math youâ€™re trying to do. The Accelerate<br>&gt;&gt; framework is available if you need performance.<br>&gt;&gt;<br>&gt;&gt; Saagar Jha<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Aug 1, 2016, at 18:01, Muse M via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should<br>&gt;&gt; be address with priority if Swift is to be adopt for engineering, financial<br>&gt;&gt; and science industry.<br>&gt;&gt;<br>&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; See<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; From what I understand, the discussion should stay focused on the main<br>&gt;&gt;&gt; topics for Swift 4 that Chris highlighted in<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing<br>&gt;&gt;&gt; the schedule...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal<br>&gt;&gt;&gt; acceptance, 29th of July was the last day for implementation, and 1th of<br>&gt;&gt;&gt; August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/8daf8b8c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August  2, 2016 at 08:00:00pm</p></header><div class="content"><p>If you see such a drastic slowdown, then tat sounds like a critical regression that you found in the latest beta.  We would really appreciate a bug report (radar or jira) with a testcase!<br></p><p>-Chris<br></p><p>&gt; On Aug 2, 2016, at 7:38 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d like to echo Muse&#39;s point. Accelerate is no solution: it&#39;s not available on Linux (and cross-platform numerics is very much essential for the sciences--I assume engineering and finance as well); moreover, it doesn&#39;t solve the issue of, as you point out, other kinds of math.<br>&gt; <br>&gt; The appeal to me of Swift was that it promised a memory-safe-by-default systems programming language, a compiled language with performance that can be in the same ballpark as C. So while specialized libraries like BLAS can speed up matrix algebra considerably, IMO, the same kinds of math that are done in C or Go or Rust without calling BLAS should perform roughly equivalently when ported to Swift. That it doesn&#39;t should be a bug, and the workaround shouldn&#39;t have to be dropping down to or calling out to libraries written in C or Fortran.<br>&gt; <br>&gt; Recently, I discovered that a straightforward numerics algorithm that only adds, divides, multiplies, and compares floating point values slowed down five to ten *times* between preview 3 and preview 4. This was stunning--and if performance ever was comparable to C before (I didn&#39;t check for this particular function), I know for sure that it isn&#39;t anymore! Although I&#39;m confident that the underlying cause will be found, it does raise questions as to the continued wisdom of writing even somewhat performance-sensitive math in Swift.<br>&gt;&gt; On Mon, Aug 1, 2016 at 20:04 Saagar Jha via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Well, it depends on what kind of Math youâ€™re trying to do. The Accelerate framework is available if you need performance.<br>&gt;&gt; <br>&gt;&gt; Saagar Jha<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 1, 2016, at 18:01, Muse M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should be address with priority if Swift is to be adopt for engineering, financial and science industry.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/1e7e9f43/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  3, 2016 at 05:00:00am</p></header><div class="content"><p>Agreed! The bug has been filed, looked at by the wonderful people over at<br>your HQ, and resolved--all faster than I can get the new toolchain to<br>compile.<br></p><p>It looks like the operators &amp;&amp; and || were missing a transparent<br>annotation. I wonder if such issues are worth testing more systematically<br>for primitive numeric types, and if so, how that might be done.<br>On Tue, Aug 2, 2016 at 22:29 Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; If you see such a drastic slowdown, then tat sounds like a critical<br>&gt; regression that you found in the latest beta.  We would really appreciate a<br>&gt; bug report (radar or jira) with a testcase!<br>&gt;<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; On Aug 2, 2016, at 7:38 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;d like to echo Muse&#39;s point. Accelerate is no solution: it&#39;s not<br>&gt; available on Linux (and cross-platform numerics is very much essential for<br>&gt; the sciences--I assume engineering and finance as well); moreover, it<br>&gt; doesn&#39;t solve the issue of, as you point out, other kinds of math.<br>&gt;<br>&gt; The appeal to me of Swift was that it promised a memory-safe-by-default<br>&gt; systems programming language, a compiled language with performance that can<br>&gt; be in the same ballpark as C. So while specialized libraries like BLAS can<br>&gt; speed up matrix algebra considerably, IMO, the same kinds of math that are<br>&gt; done in C or Go or Rust without calling BLAS should perform roughly<br>&gt; equivalently when ported to Swift. That it doesn&#39;t should be a bug, and the<br>&gt; workaround shouldn&#39;t have to be dropping down to or calling out to<br>&gt; libraries written in C or Fortran.<br>&gt;<br>&gt; Recently, I discovered that a straightforward numerics algorithm that only<br>&gt; adds, divides, multiplies, and compares floating point values slowed down<br>&gt; five to ten *times* between preview 3 and preview 4. This was stunning--and<br>&gt; if performance ever was comparable to C before (I didn&#39;t check for this<br>&gt; particular function), I know for sure that it isn&#39;t anymore! Although I&#39;m<br>&gt; confident that the underlying cause will be found, it does raise questions<br>&gt; as to the continued wisdom of writing even somewhat performance-sensitive<br>&gt; math in Swift.<br>&gt; On Mon, Aug 1, 2016 at 20:04 Saagar Jha via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Well, it depends on what kind of Math youâ€™re trying to do. The Accelerate<br>&gt;&gt; framework is available if you need performance.<br>&gt;&gt;<br>&gt;&gt; Saagar Jha<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Aug 1, 2016, at 18:01, Muse M via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should<br>&gt;&gt; be address with priority if Swift is to be adopt for engineering, financial<br>&gt;&gt; and science industry.<br>&gt;&gt;<br>&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; See<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; From what I understand, the discussion should stay focused on the main<br>&gt;&gt;&gt; topics for Swift 4 that Chris highlighted in<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing<br>&gt;&gt;&gt; the schedule...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal<br>&gt;&gt;&gt; acceptance, 29th of July was the last day for implementation, and 1th of<br>&gt;&gt;&gt; August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/0594c815/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August  7, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 3 Aug 2016, at 05:29, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If you see such a drastic slowdown, then tat sounds like a critical regression that you found in the latest beta.  We would really appreciate a bug report (radar or jira) with a testcase!<br>&gt; <br>&gt; -Chris<br></p><p>Aside: is there some way to export radars for fixed issues to jira? <br></p><p>Sometimes I see a bug-fix and it looks interesting, and I want to see if the bug is related to something else that Iâ€™ve been looking at - but I canâ€™t because the commit just references a radar.<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August  7, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Aug 7, 2016, at 8:14 AM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Aug 2016, at 05:29, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If you see such a drastic slowdown, then tat sounds like a critical regression that you found in the latest beta.  We would really appreciate a bug report (radar or jira) with a testcase!<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; Aside: is there some way to export radars for fixed issues to jira? <br></p><p>Not in bulk.  Customers of all sorts upload data to Appleâ€™s radar system, and we canâ€™t just make their confidential information public.<br></p><p>&gt; Sometimes I see a bug-fix and it looks interesting, and I want to see if the bug is related to something else that Iâ€™ve been looking at - but I canâ€™t because the commit just references a radar.<br></p><p>We did make a pass at publishing important radars to jira, but donâ€™t have the bandwidth to do every single one.  If you have a specific question, feel free to ask about it on swift-dev.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August  2, 2016 at 05:00:00pm</p></header><div class="content"><p>Are you using the variants of operators without overflow check? I.e.<br></p><p>let num = a &amp;+ b // [1]<br></p><p>[1] https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html&gt;<br></p><p><br></p><p>&gt; On Aug 2, 2016, at 3:01 AM, Muse M &lt;james.lei65 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Have always wonder why Maths in Swift is slower than C and Go, it should be address with priority if Swift is to be adopt for engineering, financial and science industry.<br>&gt; <br>&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html&gt;<br>&gt; <br>&gt; From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html&gt;<br>&gt; <br>&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br>&gt; <br>&gt; <br>&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt; Am I right? Should we begin?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/3dd158cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  2, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;m going to guess, since Musa mentioned science and engineering, that a<br>good chunk of that work is floating point :)<br></p><p><br>On Tue, Aug 2, 2016 at 10:41 AM, Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Are you using the variants of operators without overflow check? I.e.<br>&gt;<br>&gt; let num = a &amp;+ b // [1]<br>&gt;<br>&gt; [1]<br>&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Aug 2, 2016, at 3:01 AM, Muse M &lt;james.lei65 at gmail.com&gt; wrote:<br>&gt;<br>&gt; Have always wonder why Maths in Swift is slower than C and Go, it should<br>&gt; be address with priority if Swift is to be adopt for engineering, financial<br>&gt; and science industry.<br>&gt;<br>&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; See<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;<br>&gt;&gt; From what I understand, the discussion should stay focused on the main<br>&gt;&gt; topics for Swift 4 that Chris highlighted in<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;<br>&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing<br>&gt;&gt; the schedule...<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It was stated that 27th of July was the last date for proposal<br>&gt;&gt; acceptance, 29th of July was the last day for implementation, and 1th of<br>&gt;&gt; August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt; Am I right? Should we begin?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/fd986e0d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August  2, 2016 at 06:00:00pm</p></header><div class="content"><p>That&#39;s a good point. :)<br></p><p>&gt; On Aug 2, 2016, at 5:55 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m going to guess, since Musa mentioned science and engineering, that a good chunk of that work is floating point :)<br>&gt; <br>&gt; <br>&gt; On Tue, Aug 2, 2016 at 10:41 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Are you using the variants of operators without overflow check? I.e.<br>&gt; <br>&gt; let num = a &amp;+ b // [1]<br>&gt; <br>&gt; [1] https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Aug 2, 2016, at 3:01 AM, Muse M &lt;james.lei65 at gmail.com &lt;mailto:james.lei65 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should be address with priority if Swift is to be adopt for engineering, financial and science industry.<br>&gt;&gt; <br>&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html&gt;<br>&gt;&gt; <br>&gt;&gt; From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html&gt;<br>&gt;&gt; <br>&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160802/888956ff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68d21c811b4f037d9cbd43013319f9b4?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Muse M</string> &lt;james.lei65 at gmail.com&gt;<p>August  3, 2016 at 12:00:00am</p></header><div class="content"><p>I&#39;m concern if simd could improve factorials code and faster timing.<br></p><p>import simd<br>func factorial(n: Int) -&gt; Int {<br>    return n &lt; 1 ? 1 : n * factorial(n: n - 1)<br>}<br>print(factorial(n: 40))<br></p><p>On Wed, Aug 3, 2016 at 12:00 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt; That&#39;s a good point. :)<br>&gt;<br>&gt; On Aug 2, 2016, at 5:55 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; I&#39;m going to guess, since Musa mentioned science and engineering, that a<br>&gt; good chunk of that work is floating point :)<br>&gt;<br>&gt;<br>&gt; On Tue, Aug 2, 2016 at 10:41 AM, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Are you using the variants of operators without overflow check? I.e.<br>&gt;&gt;<br>&gt;&gt; let num = a &amp;+ b // [1]<br>&gt;&gt;<br>&gt;&gt; [1]<br>&gt;&gt; https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Aug 2, 2016, at 3:01 AM, Muse M &lt;james.lei65 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should<br>&gt;&gt; be address with priority if Swift is to be adopt for engineering, financial<br>&gt;&gt; and science industry.<br>&gt;&gt;<br>&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; See<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; From what I understand, the discussion should stay focused on the main<br>&gt;&gt;&gt; topics for Swift 4 that Chris highlighted in<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing<br>&gt;&gt;&gt; the schedule...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal<br>&gt;&gt;&gt; acceptance, 29th of July was the last day for implementation, and 1th of<br>&gt;&gt;&gt; August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/a3f7a543/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>Swift 3.1 discussions, go?</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>August  3, 2016 at 12:00:00am</p></header><div class="content"><p>Haha ;)<br></p><p>1) Maybe converting the algorithm into a tail-recursive form should be the first optimization?<br></p><p>func factorial(_ n: Int, multipliedBy m: Int = 1) -&gt; Int {<br>    return n &lt;= 1 ? m : factorial(n-1, multipliedBy: m*n)<br>}<br></p><p>2) Using a non-recursive algorithm would improve performance even more, I guess.<br></p><p>3) The third is maybe to use precalculation or an efficient algorithm that doesn&#39;t call `factorial` that often. (Assuming that your use-case isn&#39;t just calculating factorial numbers for fun.) (E.g. if you try to calculate (52 over 3) by using the formula (52!/(49!*3!)) it will be inefficient, and btw it will crash, because 52! does not fit into an Int. The efficient way is 52*51/2*50/3 (&quot;*&quot;,&quot;/&quot;: same precedence, left-associative.)) On my 64-bit computer I cannot go beyond 20!, factorial(21) gives an EXC_BAD_INSTRUCTION a.k.a. integer overflow. There is no point in optimizing 20!, and there certainly is no point in optimizing 40!, at least with Int&#39;s.<br></p><p>There is really no point in optimizing that anymore beyond that. A silly SIMD-optimized algorithm is always worse than a well-designed algorithm compiled with -O0. If you do standard optimization techniques first, the advantage of SIMD-instructions for factorial become unmeasurable ;)<br></p><p>However, I agree that special optimizations for numeric computations (SIMD and other extension) would be cool..<br></p><p>-Michael<br></p><p>&gt; Am 02.08.2016 um 18:37 schrieb Muse M via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I&#39;m concern if simd could improve factorials code and faster timing.<br>&gt; <br>&gt; import simd<br>&gt; func factorial(n: Int) -&gt; Int {<br>&gt;     return n &lt; 1 ? 1 : n * factorial(n: n - 1)<br>&gt; }<br>&gt; print(factorial(n: 40))<br>&gt; <br>&gt; <br>&gt; On Wed, Aug 3, 2016 at 12:00 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; That&#39;s a good point. :)<br>&gt; <br>&gt;&gt; On Aug 2, 2016, at 5:55 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m going to guess, since Musa mentioned science and engineering, that a good chunk of that work is floating point :)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Aug 2, 2016 at 10:41 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Are you using the variants of operators without overflow check? I.e.<br>&gt;&gt; <br>&gt;&gt; let num = a &amp;+ b // [1]<br>&gt;&gt; <br>&gt;&gt; [1] https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 2, 2016, at 3:01 AM, Muse M &lt;james.lei65 at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Have always wonder why Maths in Swift is slower than C and Go, it should be address with priority if Swift is to be adopt for engineering, financial and science industry.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Aug 2, 2016 at 4:43 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; See https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025711.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From what I understand, the discussion should stay focused on the main topics for Swift 4 that Chris highlighted in https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160725/025676.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I had several ideas in mind, but am postponing them for Swift 5, seeing the schedule...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 1, 2016, at 8:48 PM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It was stated that 27th of July was the last date for proposal acceptance, 29th of July was the last day for implementation, and 1th of August should be the starting day of Swift 3.1-related discussions.<br>&gt;&gt;&gt;&gt; Am I right? Should we begin?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
