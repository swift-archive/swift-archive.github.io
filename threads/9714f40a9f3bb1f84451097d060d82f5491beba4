<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b38d2b59a2dfdd3d78493f206827917?s=50"></div><header><strong>Native Observer for Swift</strong> from <string>Mohamed Ebrahim Afifi</string> &lt;mohamede1945 at gmail.com&gt;<p>December 22, 2015 at 01:00:00pm</p></header><div class="content"><p>While willSet and didSet is a great property observers. They do work only<br>on the declaration of the property. But for other objects to observe this,<br>then they need to use KVO which is an Objective-C mechanism (We use String<br>to subscribe, it doesn&#39;t offer generic capabilities for change). Besides,<br>it&#39;s not portable.<br></p><p>// A native Swift class or struct<br>class Foo {<br></p><p>    // property with any type<br>    // We might have a keyword for declaring the property observable<br>    /*@obserable*/ var bar: Int = 0<br>}<br></p><p>let instance = Foo()<br></p><p>// anyone can subscribe to changes of the `bar` property.<br>instance.bar += { newValue in<br>    print(newValue)<br>}<br></p><p>// you can store the return value to unsubscribe later.<br>let observer = instance.bar += { newValue in<br>    print(newValue)<br>}<br></p><p>// unsubscribe<br>instance.bar -= observer<br></p><p>// Also we can have a protocol to be implemented by any class/struct to<br>give special events. For example Array would implement events for<br>Insertion, Deletion, etc. Same for Dictionary and developers can do the<br>same for their own classes.<br></p><p>You can have a look at implementation for a similar library here<br>https://github.com/slazyk/Observable-Swift<br>But as you can see there some issues like accessing the underlying value<br>needs an operator which I believe with a native observer we will not have<br>this issue.<br></p><p><br>Best Regards,<br>Mohamed Afifi<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151222/9714eba4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Native Observer for Swift</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 22, 2015 at 09:00:00am</p></header><div class="content"><p>You should check out my proposal for property observers. You should be able to implement observation as a behavior with that feature.<br></p><p>-Joe<br></p><p>&gt; On Dec 22, 2015, at 3:16 AM, Mohamed Ebrahim Afifi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While willSet and didSet is a great property observers. They do work only on the declaration of the property. But for other objects to observe this, then they need to use KVO which is an Objective-C mechanism (We use String to subscribe, it doesn&#39;t offer generic capabilities for change). Besides, it&#39;s not portable.<br>&gt; <br>&gt; // A native Swift class or struct<br>&gt; class Foo {<br>&gt; <br>&gt;     // property with any type<br>&gt;     // We might have a keyword for declaring the property observable<br>&gt;     /*@obserable*/ var bar: Int = 0<br>&gt; }<br>&gt; <br>&gt; let instance = Foo()<br>&gt; <br>&gt; // anyone can subscribe to changes of the `bar` property.<br>&gt; instance.bar += { newValue in<br>&gt;     print(newValue)<br>&gt; }<br>&gt; <br>&gt; // you can store the return value to unsubscribe later.<br>&gt; let observer = instance.bar += { newValue in<br>&gt;     print(newValue)<br>&gt; }<br>&gt; <br>&gt; // unsubscribe<br>&gt; instance.bar -= observer<br>&gt; <br>&gt; // Also we can have a protocol to be implemented by any class/struct to give special events. For example Array would implement events for Insertion, Deletion, etc. Same for Dictionary and developers can do the same for their own classes.<br>&gt; <br>&gt; You can have a look at implementation for a similar library here https://github.com/slazyk/Observable-Swift &lt;https://github.com/slazyk/Observable-Swift&gt;<br>&gt; But as you can see there some issues like accessing the underlying value needs an operator which I believe with a native observer we will not have this issue.<br>&gt; <br>&gt; <br>&gt; Best Regards,<br>&gt; Mohamed Afifi<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151222/d894a88f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
