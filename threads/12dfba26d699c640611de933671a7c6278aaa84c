<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54da6eaeec6b83e06a5661ce8c62980d?s=50"></div><header><strong>[Pitch] Set of AnyObject by reference</strong> from <string>Guoye Zhang</string> &lt;cc941201 at me.com&gt;<p>July 17, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;m building an document-based app, and I&#39;m having a problem regarding to Set.<br></p><p>What I hope to achieve is to have a Set of unique objects by their references. For example, I might put in two rectangles with the same height and width (which makes them equal, but they are still different instances). Currently, I have two solutions:<br></p><p><br>Option 1:<br> Inherit from NSObject<br></p><p> class Rectangle: NSObject {<br>   var height, width: Int<br>   func isEqualByValue(_ other: Rectangle) -&gt; Bool {<br>     return height == other.height &amp;&amp; width == other.width<br>   }<br> }<br></p><p> Set&lt;Rectangle&gt; meets my requirements, but it drags a lot of baggage from Objective-C, also makes comparing by value ugly.<br></p><p><br>Option 2:<br> Wrap them<br></p><p> struct RectangleReference: Hashable {<br>   let value: Rectangle<br>   var hashValue: Int {<br>     return unsafeAddress(of: value).hashValue  // This might be removed in Swift 3 (SR-1957)<br>   }<br> }<br> func ==(lhs: RectangleReference, rhs: RectangleReference) -&gt; Bool {<br>   return lhs.value === rhs.value<br> }<br></p><p> Set&lt;RectangleReference&gt; works fine, but it has unsafeAddress(of:) which is unsafe and might be removed in Swift 3.<br></p><p><br>What I&#39;d like to use is a ReferenceSet&lt;Element: AnyObject&gt; which compares objects by their references. Any reference typed instances can be put in it without confirming to Hashable protocol. ReferenceDictionary&lt;Key: AnyObject, Value&gt; is also welcomed.<br></p><p>Any opinions?<br></p><p><br>- Guoye Zhang<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Pitch] Set of AnyObject by reference</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July 17, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; What I hope to achieve is to have a Set of unique objects by their references. For example, I might put in two rectangles with the same height and width (which makes them equal, but they are still different instances). <br>I guess this is not the best place for such problems, but did you already look at ObjectIdentifier?<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54da6eaeec6b83e06a5661ce8c62980d?s=50"></div><header><strong>[Pitch] Set of AnyObject by reference</strong> from <string>Guoye Zhang</string> &lt;cc941201 at me.com&gt;<p>July 17, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; 在 2016年7月17日，17:44，Tino Heth &lt;2th at gmx.de&gt; 写道：<br>&gt; <br>&gt; <br>&gt;&gt; What I hope to achieve is to have a Set of unique objects by their references. For example, I might put in two rectangles with the same height and width (which makes them equal, but they are still different instances). <br>&gt; I guess this is not the best place for such problems, but did you already look at ObjectIdentifier?<br>&gt; <br>&gt; Tino<br>&gt; <br></p><p><br>The problem is the motivation for my proposal of adding ReferenceSet&lt;Element: AnyObject&gt; and ReferenceDictionary&lt;Key: AnyObject, Value&gt; to stdlib.<br></p><p>The original object cannot be retrieved from ObjectIdentifier, which makes it unsuitable for my use-case.<br></p><p>- Guoye Zhang<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Set of AnyObject by reference</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 17, 2016 at 11:00:00am</p></header><div class="content"><p>On Sun, Jul 17, 2016 at 2:00 AM, 张国晔 via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I&#39;m building an document-based app, and I&#39;m having a problem regarding to Set.<br>&gt;<br>&gt; What I hope to achieve is to have a Set of unique objects by their references.<br></p><p>Try this:<br></p><p>public final class ReferenceEqualityBox&lt;Wrapped : Equatable&gt; : Hashable {<br>  public var value: Wrapped<br>  public init(_ value: Wrapped) {<br>    self.value = value<br>  }<br>  public var hashValue: Int {<br>    return ObjectIdentifier(self).hashValue<br>  }<br>}<br>public func == &lt;Wrapped&gt; (<br>  lhs: ReferenceEqualityBox&lt;Wrapped&gt;,<br>  rhs: ReferenceEqualityBox&lt;Wrapped&gt;<br>) -&gt; Bool {<br>  return ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>}<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54da6eaeec6b83e06a5661ce8c62980d?s=50"></div><header><strong>[Pitch] Set of AnyObject by reference</strong> from <string>Guoye Zhang</string> &lt;cc941201 at me.com&gt;<p>July 18, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 在 2016年7月18日，02:08，Dmitri Gribenko &lt;gribozavr at gmail.com&gt; 写道：<br>&gt; <br>&gt; On Sun, Jul 17, 2016 at 2:00 AM, 张国晔 via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I&#39;m building an document-based app, and I&#39;m having a problem regarding to Set.<br>&gt;&gt; <br>&gt;&gt; What I hope to achieve is to have a Set of unique objects by their references.<br>&gt; <br>&gt; Try this:<br>&gt; <br>&gt; public final class ReferenceEqualityBox&lt;Wrapped : Equatable&gt; : Hashable {<br>&gt;  public var value: Wrapped<br>&gt;  public init(_ value: Wrapped) {<br>&gt;    self.value = value<br>&gt;  }<br>&gt;  public var hashValue: Int {<br>&gt;    return ObjectIdentifier(self).hashValue<br>&gt;  }<br>&gt; }<br>&gt; public func == &lt;Wrapped&gt; (<br>&gt;  lhs: ReferenceEqualityBox&lt;Wrapped&gt;,<br>&gt;  rhs: ReferenceEqualityBox&lt;Wrapped&gt;<br>&gt; ) -&gt; Bool {<br>&gt;  return ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt; }<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p>Thanks, I haven&#39;t thought of using ObjectIdentifier instead of unsafeAddress(of:). That&#39;s a lot better than my option 2.<br></p><p>- Guoye Zhang<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
