<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 10, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0083: Remove bridging conversion behavior from dynamic casts&quot; begins now and runs through May 16. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>May 10, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 10, 2016, at 11:53 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0083: Remove bridging conversion behavior from dynamic casts&quot; begins now and runs through May 16. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I am for it as long as I am still able to use ``as`` to go from an AnyObject to an NSObject Subclass. <br></p><p>func executeFetchRequest(request: NSFetchRequest &lt;x-quickhelp-usr:c:objc(cs)NSFetchRequest&gt;) throws -&gt; [AnyObject &lt;x-quickhelp-usr:s:Ps9AnyObject&gt;]….<br>class MyRecipeMO: NSManagedObject {….<br></p><p>….<br> let existing = try context.executeFetchRequest(fetch) as? [MyRecipeMO]<br>….<br></p><p>If am not able to do the above then this change would make it much harder to work with Core Data and JSON API<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>yes<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>yes<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>seems like casting in java<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>read the email thread.<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/4ccb4467/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 10, 2016 at 01:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>Strong support.<br></p><p>* Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Yes. Language-level support for bridging between a certain fixed set of<br>Objective-C and Swift types is surprising behavior, especially since no<br>other dynamic conversions between otherwise-unrelated types using the<br>casting keywords are supported by Swift.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Very much so. It removes language features that don&#39;t have a compelling<br>reason to exist and replaces them with library initializers that have the<br>same level of expressiveness. And it is a more sound engineering decision<br>than the other principled alternative - to open up the dynamic conversion<br>machinery to allow user-defined conversions.<br></p><p>* If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p>None. Swift&#39;s interoperability story with Objective-C is (to my knowledge)<br>unprecedented - it is far more involved than (e.g.) Scala interoperating<br>with Java. The core team has clearly been tracking what works and what<br>doesn&#39;t and making necessary changes as they present themselves, and this<br>is yet another along that path.<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br></p><p>Carefully read through the proposal. Considered usage of &#39;as&#39; and &#39;as?&#39; in<br>prior projects, especially in code requiring bridging to/from<br>NSDictionaries. Read through the related threads.<br></p><p>Best,<br>Austin<br></p><p><br>On Tue, May 10, 2016 at 11:53 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0083: Remove bridging conversion behavior from dynamic<br>&gt; casts&quot; begins now and runs through May 16. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160510/1ef821ad/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 13, 2016 at 06:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br></p><p>This is a welcome change, which also should open the door to rethink the ObjC `AnyObject` protocol and its confusing .Type `AnyClass`.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Without a doubt. It feels way better and more elegant to use initializers than worrying about what happens under the hood.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes it does. Swift should be a strong type save language, which will apply to remove strange sideeffects like the unwanted bridging in some specific cases. This also will be the next step after SE-0072.<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Not that I can think of.<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I carefully read the whole proposal and followed the mailing list. I&#39;ve been waiting for such a change since I faced the unwanted bridging behaviour in one of my projects amost a year ago. The only workaround for checking a type being a reference-type without bridging was `guard instance.dynamicType is AnyObject.Type else`, which is ugly.<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 10. Mai 2016 bei 20:53:15, Chris Lattner via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>Hello Swift community,<br></p><p>The review of &quot;SE-0083: Remove bridging conversion behavior from dynamic casts&quot; begins now and runs through May 16. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>* What is your evaluation of the proposal?<br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>* Does this proposal fit well with the feel and direction of Swift?<br>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/ef83dc5b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 19, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br></p><p>I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br></p><p>	myArray as! [NSView]<br>	myDictionary as! [String: NSView]<br></p><p>Are about to become something more like these:<br></p><p>	[NSView](forcedLazyBridging: myArray)<br>	[String: NSView](forcedLazyBridging: myDictionary)<br>	<br>Or these:<br></p><p>	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br></p><p>Either option is a significant regression in code readability compared to the status quo.<br></p><p>It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br></p><p>	myArray.of(NSView)				// returns [NSView]<br>	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br></p><p>On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br></p><p>	Array(forcedLazyBridging: myArray)<br>	Dictionary(forcedLazyBridging: myDictionary)<br></p><p>And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 23, 2016 at 05:00:00pm</p></header><div class="content"><p>I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br></p><p>let name = plist[“name”] as! String<br></p><p>becomes one of these:<br></p><p>let name = plist[“name”] as! NSString as String<br>let name = String(plist[“name”] as! NSString)<br>let name = String(forceBridging: plist[“name”]) // not in the proposal<br></p><p>none of which I’m particularly happy with. <br></p><p>Jordan<br></p><p><br>&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt; <br>&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt; <br>&gt; 	myArray as! [NSView]<br>&gt; 	myDictionary as! [String: NSView]<br>&gt; <br>&gt; Are about to become something more like these:<br>&gt; <br>&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt; 	<br>&gt; Or these:<br>&gt; <br>&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt; <br>&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt; <br>&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt; <br>&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt; <br>&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt; <br>&gt; 	Array(forcedLazyBridging: myArray)<br>&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt; <br>&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick reading.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/7e93c325/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/423beb7cfb5894f7b53623d6e515b01d?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Jed Lewison</string> &lt;jed.lewison at icloud.com&gt;<p>May 23, 2016 at 08:00:00pm</p></header><div class="content"><p>If we could have extensions on AnyObject, a simple .bridge() would do the trick, right? (Assuming bridge was generic.) I think something along those lines was mentioned in the proposal.<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 23, 2016, at 5:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br>&gt; <br>&gt; let name = plist[“name”] as! String<br>&gt; <br>&gt; becomes one of these:<br>&gt; <br>&gt; let name = plist[“name”] as! NSString as String<br>&gt; let name = String(plist[“name”] as! NSString)<br>&gt; let name = String(forceBridging: plist[“name”]) // not in the proposal<br>&gt; <br>&gt; none of which I’m particularly happy with. <br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt;&gt; <br>&gt;&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt;&gt; <br>&gt;&gt; 	myArray as! [NSView]<br>&gt;&gt; 	myDictionary as! [String: NSView]<br>&gt;&gt; <br>&gt;&gt; Are about to become something more like these:<br>&gt;&gt; <br>&gt;&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt;&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt;&gt; 	<br>&gt;&gt; Or these:<br>&gt;&gt; <br>&gt;&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt;&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt;&gt; <br>&gt;&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt;&gt; <br>&gt;&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt;&gt; <br>&gt;&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt;&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt;&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt;&gt; <br>&gt;&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt;&gt; <br>&gt;&gt; 	Array(forcedLazyBridging: myArray)<br>&gt;&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt;&gt; <br>&gt;&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Yes.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; Quick reading.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/66f939ab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 23, 2016 at 08:00:00pm</p></header><div class="content"><p>Let’s see…<br></p><p>let name = plist[“name”].bridge() as String<br></p><p>Not the worst, but definitely better than any of the alternatives below. Unfortunately, I think that “if” is out of the question, at least for Swift 3.<br></p><p>Jordan<br></p><p>&gt; On May 23, 2016, at 20:21, Jed Lewison &lt;jed.lewison at icloud.com&gt; wrote:<br>&gt; <br>&gt; If we could have extensions on AnyObject, a simple .bridge() would do the trick, right? (Assuming bridge was generic.) I think something along those lines was mentioned in the proposal.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On May 23, 2016, at 5:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br>&gt;&gt; <br>&gt;&gt; let name = plist[“name”] as! String<br>&gt;&gt; <br>&gt;&gt; becomes one of these:<br>&gt;&gt; <br>&gt;&gt; let name = plist[“name”] as! NSString as String<br>&gt;&gt; let name = String(plist[“name”] as! NSString)<br>&gt;&gt; let name = String(forceBridging: plist[“name”]) // not in the proposal<br>&gt;&gt; <br>&gt;&gt; none of which I’m particularly happy with. <br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	myArray as! [NSView]<br>&gt;&gt;&gt; 	myDictionary as! [String: NSView]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are about to become something more like these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt; Or these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt;&gt;&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt;&gt;&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Array(forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Quick reading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/b1abb76c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/423beb7cfb5894f7b53623d6e515b01d?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Jed Lewison</string> &lt;jed.lewison at icloud.com&gt;<p>May 23, 2016 at 09:00:00pm</p></header><div class="content"><p>The proposal also suggests:<br></p><p>extension _ObjectiveCBridgeable {<br>    init?(bridging object: AnyObject)<br>}<br></p><p>Which would yield:<br></p><p>let foo: AnyObject = NSString(string: &quot;String&quot;)<br>let bar = String(bridging: foo) // “String&quot;<br></p><p>let foo2: AnyObject = NSArray(array: [])<br>let bar2 = String(bridging: foo) // nil<br></p><p>The code in the proposal works OOB in Swift 2.2 for String/Double/Float, but not Array and Dictionary. Not sure if it already would work in Swift 3.0 for that, or there would need to be a little more work done.<br></p><p>&gt; On May 23, 2016, at 8:22 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Let’s see…<br>&gt; <br>&gt; let name = plist[“name”].bridge() as String<br>&gt; <br>&gt; Not the worst, but definitely better than any of the alternatives below. Unfortunately, I think that “if” is out of the question, at least for Swift 3.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On May 23, 2016, at 20:21, Jed Lewison &lt;jed.lewison at icloud.com &lt;mailto:jed.lewison at icloud.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If we could have extensions on AnyObject, a simple .bridge() would do the trick, right? (Assuming bridge was generic.) I think something along those lines was mentioned in the proposal.<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On May 23, 2016, at 5:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let name = plist[“name”] as! String<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; becomes one of these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let name = plist[“name”] as! NSString as String<br>&gt;&gt;&gt; let name = String(plist[“name”] as! NSString)<br>&gt;&gt;&gt; let name = String(forceBridging: plist[“name”]) // not in the proposal<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; none of which I’m particularly happy with. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	myArray as! [NSView]<br>&gt;&gt;&gt;&gt; 	myDictionary as! [String: NSView]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Are about to become something more like these:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt;&gt;&gt;&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt;&gt; 	<br>&gt;&gt;&gt;&gt; Or these:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt;&gt;&gt;&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt;&gt;&gt;&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt;&gt;&gt;&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	Array(forcedLazyBridging: myArray)<br>&gt;&gt;&gt;&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Quick reading.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/f6eb9beb/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>May 24, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 23, 2016, at 5:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br>&gt; <br>&gt; let name = plist[“name”] as! String<br>&gt; <br>&gt; becomes one of these:<br>&gt; <br>&gt; let name = plist[“name”] as! NSString as String<br>&gt; let name = String(plist[“name”] as! NSString)<br>&gt; let name = String(forceBridging: plist[“name”]) // not in the proposal<br>&gt; <br>&gt; none of which I’m particularly happy with. <br></p><p>I am also way, way late, here, but this ties into a philosophical concern I have. The bridging that we have in place was designed to put Swift’s value types front-and-center in the Swift experience, even when interoperating with Objective-C APIs using reference-semantic types. It was a specific goal that one should not have to juggle between Swift.Array and NSArray—NSArray is bridged away in imported APIs, Swift arrays implicitly convert to AnyObject when working an AnyObject-based API, dynamic bridging conversions would pass through NSArray to get to Swift arrays, etc. So while one can certainly reach for NS(Mutable)Array in Swift, one should not *have* to do so in Swift.<br></p><p>This proposal and SE-0072 are chipping away at that bridging story, making the explicit use of NSArray/NSString/etc. required for interoperability with Objective-C APIs. While it does make the language more explicit and predictable (and dynamic casting more efficient!), it makes the use of these bridged reference-semantic more prevalent, which may lead to more overall confusion about which set of types to use. There might even be a portability argument: the current scheme lets you gloss over Any vs. AnyObject (which is a current difference we see in ObjC Foundation vs. corelibs Foundation).<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt;&gt; <br>&gt;&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt;&gt; <br>&gt;&gt; 	myArray as! [NSView]<br>&gt;&gt; 	myDictionary as! [String: NSView]<br>&gt;&gt; <br>&gt;&gt; Are about to become something more like these:<br>&gt;&gt; <br>&gt;&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt;&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt;&gt; 	<br>&gt;&gt; Or these:<br>&gt;&gt; <br>&gt;&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt;&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt;&gt; <br>&gt;&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt;&gt; <br>&gt;&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt;&gt; <br>&gt;&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt;&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt;&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt;&gt; <br>&gt;&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt;&gt; <br>&gt;&gt; 	Array(forcedLazyBridging: myArray)<br>&gt;&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt;&gt; <br>&gt;&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Yes.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt;&gt; <br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; Quick reading.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/2cc41b05/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 25, 2016 at 07:00:00am</p></header><div class="content"><p>Ditto. It&#39;s way too early to be doing this. This is something to be done when most major APIs are converted to Swift. This would make Swift hard to use for any interaction with JSON if you use NSJSONSerialization and pretty much with any NSDictionary...<br></p><p><br>&gt; On May 25, 2016, at 6:49 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 23, 2016, at 5:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br>&gt;&gt; <br>&gt;&gt; let name = plist[“name”] as! String<br>&gt;&gt; <br>&gt;&gt; becomes one of these:<br>&gt;&gt; <br>&gt;&gt; let name = plist[“name”] as! NSString as String<br>&gt;&gt; let name = String(plist[“name”] as! NSString)<br>&gt;&gt; let name = String(forceBridging: plist[“name”]) // not in the proposal<br>&gt;&gt; <br>&gt;&gt; none of which I’m particularly happy with. <br>&gt; <br>&gt; I am also way, way late, here, but this ties into a philosophical concern I have. The bridging that we have in place was designed to put Swift’s value types front-and-center in the Swift experience, even when interoperating with Objective-C APIs using reference-semantic types. It was a specific goal that one should not have to juggle between Swift.Array and NSArray—NSArray is bridged away in imported APIs, Swift arrays implicitly convert to AnyObject when working an AnyObject-based API, dynamic bridging conversions would pass through NSArray to get to Swift arrays, etc. So while one can certainly reach for NS(Mutable)Array in Swift, one should not *have* to do so in Swift.<br>&gt; <br>&gt; This proposal and SE-0072 are chipping away at that bridging story, making the explicit use of NSArray/NSString/etc. required for interoperability with Objective-C APIs. While it does make the language more explicit and predictable (and dynamic casting more efficient!), it makes the use of these bridged reference-semantic more prevalent, which may lead to more overall confusion about which set of types to use. There might even be a portability argument: the current scheme lets you gloss over Any vs. AnyObject (which is a current difference we see in ObjC Foundation vs. corelibs Foundation).<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	myArray as! [NSView]<br>&gt;&gt;&gt; 	myDictionary as! [String: NSView]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are about to become something more like these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt; Or these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt;&gt;&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt;&gt;&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Array(forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Quick reading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/6f2f9c87/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0083: Remove bridging conversion behavior from dynamic casts</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>May 26, 2016 at 12:00:00am</p></header><div class="content"><p>Yes, I have to say Doug seems to be on the money with the concerns I hold with the current proposals about stripping out the &quot;Objective-C Magic&quot; in the bridge between Swift and Objective C.<br></p><p>There seems to be a strong push recently to rip out these APIs with clearly well meaning intent, but lack of consideration for the many APIs that this will make rather uncomfortable to use.<br></p><p>I think this request tends to gloss over the fact that a vast majority of Swift code is still written for iOS and OS X and utilizes the Objective-C APIs extensively. As Doug points out, we are chipping away very fast at the bridging simplicity that made Swift brilliant to use on Apple Platforms, and I don&#39;t think the gains begin to approach the losses from these changes.<br></p><p>While I agree strongly with the concept of wiping such bridges out where possible in concept, I am pragmatic that perhaps doing so is not in the best interests of Swift&#39;s usability in the short term at least. I think because we haven&#39;t experienced writing an Objective-C based app in Swift, we might be getting lost in the &quot;concept&quot; of stripping bridging, while missing the real world implications of such actions.<br></p><p>- Rod<br></p><p>&gt; On 25 May 2016, at 2:49 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 23, 2016, at 5:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I am way late, but I share Brent’s concerns. I don’t think this addresses the very common case of “getting a String out of a heterogeneous dictionary”.<br>&gt;&gt; <br>&gt;&gt; let name = plist[“name”] as! String<br>&gt;&gt; <br>&gt;&gt; becomes one of these:<br>&gt;&gt; <br>&gt;&gt; let name = plist[“name”] as! NSString as String<br>&gt;&gt; let name = String(plist[“name”] as! NSString)<br>&gt;&gt; let name = String(forceBridging: plist[“name”]) // not in the proposal<br>&gt;&gt; <br>&gt;&gt; none of which I’m particularly happy with. <br>&gt; <br>&gt; I am also way, way late, here, but this ties into a philosophical concern I have. The bridging that we have in place was designed to put Swift’s value types front-and-center in the Swift experience, even when interoperating with Objective-C APIs using reference-semantic types. It was a specific goal that one should not have to juggle between Swift.Array and NSArray—NSArray is bridged away in imported APIs, Swift arrays implicitly convert to AnyObject when working an AnyObject-based API, dynamic bridging conversions would pass through NSArray to get to Swift arrays, etc. So while one can certainly reach for NS(Mutable)Array in Swift, one should not *have* to do so in Swift.<br>&gt; <br>&gt; This proposal and SE-0072 are chipping away at that bridging story, making the explicit use of NSArray/NSString/etc. required for interoperability with Objective-C APIs. While it does make the language more explicit and predictable (and dynamic casting more efficient!), it makes the use of these bridged reference-semantic more prevalent, which may lead to more overall confusion about which set of types to use. There might even be a portability argument: the current scheme lets you gloss over Any vs. AnyObject (which is a current difference we see in ObjC Foundation vs. corelibs Foundation).<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 19, 2016, at 02:31, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review is technically over, but I don&#39;t believe a decision has been announced yet, so...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am generally in favor, but I have a serious concern about the readability of certain conversions with this change. To wit, conversions like these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	myArray as! [NSView]<br>&gt;&gt;&gt; 	myDictionary as! [String: NSView]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are about to become something more like these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	[NSView](forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	[String: NSView](forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt; Or these:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Array&lt;NSView&gt;(forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	Dictionary&lt;String, NSView&gt;(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Either option is a significant regression in code readability compared to the status quo.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s enough to make me wonder if we shouldn&#39;t have special-cased conversion methods for NSArray, NSDictionary, and NSSet:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	myArray.of(NSView)				// returns [NSView]<br>&gt;&gt;&gt; 	myDictionary.of(NSView, for: String) 	// returns [String: NSView]<br>&gt;&gt;&gt; 	mySet.of(NSView)					// returns Set&lt;NSView&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On the other hand, if you *don&#39;t* have to specify an element type, these aren&#39;t so bad:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	Array(forcedLazyBridging: myArray)<br>&gt;&gt;&gt; 	Dictionary(forcedLazyBridging: myDictionary)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And it gets even better if you use something a little saner than `forcedLazyBridging` for the label.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes. Conversions are a mess, and it&#39;ll be nice to clean them up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most languages I&#39;ve used have had much simpler cast systems with nothing particularly close to Swift&#39;s bridging casts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Quick reading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/968e1a9e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
