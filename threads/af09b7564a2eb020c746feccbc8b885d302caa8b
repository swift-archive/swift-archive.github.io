<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Missing dependency in testing</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  1, 2016 at 09:00:00am</p></header><div class="content"><p>Hi, swift-build-dev. I recently hit this failure &lt;https://ci.swift.org/job/swift-PR-Linux-smoke-test/2159/&gt; on a pull request test that did nothing but change Swift’s test/lit.cfg—i.e. a test-configuration-only change in the compiler repo. <br></p><p>&gt; /home/buildnode/jenkins/workspace/swift-PR-Linux-smoke-test at 2/branch-master/swiftpm/Sources/swift-test/main.swift:11:8: error: module file was created by an older version of the compiler; rebuild &#39;Commands&#39; and try again: /home/buildnode/jenkins/workspace/swift-PR-Linux-smoke-test at 2/branch-master/buildbot_linux/swiftpm-linux-x86_64/debug/Commands.swiftmodule<br>&gt; <br>&gt; import Commands<br>&gt;        ^<br></p><p>(and so on for Basic and TestSupport. Note that this was in the self-host stage of the CI build.)<br></p><p>This kind of failure implies that the compiler and standard library were rebuilt but the support modules of SwiftPM were not, which in turn seems like a missing dependency to me. Yes, a clean build will fix this, and yes, I’m not sure it matters to end users (who aren’t replacing their compiler and standard library arbitrarily), but it seems like there’s an easy answer here: add Swift.swiftmodule as a build dependency for this build. (Since it builds pretty quickly, maybe that’s just used to clean the build folder.) That way, you’ll always be up-to-date on the module format and the contents of the standard library.<br></p><p>There’s still a dependency trap here: if the only thing that changed was the Darwin or Glibc overlay, SwiftPM might not think it needs to rebuild. The actual correct answer is that your build depends on all swiftmodules you use. (And if static linking, all static archives as well, which may not always change in sync with the swiftmodule.)<br></p><p>What do you want to do here, SwiftPM folks?<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20161101/af09aa8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Missing dependency in testing</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>November  1, 2016 at 09:00:00am</p></header><div class="content"><p>We currently have a built-in dependency edge on the Swift compiler which is supposed to catch this (we don&#39;t have one on just the standard libraries, but it doesn&#39;t seem like that was getting hit here?).<br></p><p>It looks like that didn&#39;t work here? Can you file a bug with as much info as you have?<br></p><p>I don&#39;t remember the details, but shouldn&#39;t we be getting all the .swiftmodules as dependencies reported by the compiler?<br></p><p> - Daniel<br></p><p>&gt; On Nov 1, 2016, at 9:40 AM, Jordan Rose via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, swift-build-dev. I recently hit this failure &lt;https://ci.swift.org/job/swift-PR-Linux-smoke-test/2159/&gt; on a pull request test that did nothing but change Swift’s test/lit.cfg—i.e. a test-configuration-only change in the compiler repo. <br>&gt; <br>&gt;&gt; /home/buildnode/jenkins/workspace/swift-PR-Linux-smoke-test at 2/branch-master/swiftpm/Sources/swift-test/main.swift:11:8: error: module file was created by an older version of the compiler; rebuild &#39;Commands&#39; and try again: /home/buildnode/jenkins/workspace/swift-PR-Linux-smoke-test at 2/branch-master/buildbot_linux/swiftpm-linux-x86_64/debug/Commands.swiftmodule<br>&gt;&gt; <br>&gt;&gt; import Commands<br>&gt;&gt;        ^<br>&gt; <br>&gt; (and so on for Basic and TestSupport. Note that this was in the self-host stage of the CI build.)<br>&gt; <br>&gt; This kind of failure implies that the compiler and standard library were rebuilt but the support modules of SwiftPM were not, which in turn seems like a missing dependency to me. Yes, a clean build will fix this, and yes, I’m not sure it matters to end users (who aren’t replacing their compiler and standard library arbitrarily), but it seems like there’s an easy answer here: add Swift.swiftmodule as a build dependency for this build. (Since it builds pretty quickly, maybe that’s just used to clean the build folder.) That way, you’ll always be up-to-date on the module format and the contents of the standard library.<br>&gt; <br>&gt; There’s still a dependency trap here: if the only thing that changed was the Darwin or Glibc overlay, SwiftPM might not think it needs to rebuild. The actual correct answer is that your build depends on all swiftmodules you use. (And if static linking, all static archives as well, which may not always change in sync with the swiftmodule.)<br>&gt; <br>&gt; What do you want to do here, SwiftPM folks?<br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20161101/4602e236/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Missing dependency in testing</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  1, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;m sorry, I filed https://bugs.swift.org/browse/SR-3107 &lt;https://bugs.swift.org/browse/SR-3107&gt; with the full build log, but I don&#39;t really have any more information. Yes, the compiler should be including dependencies on the swiftmodules it uses in the .d file—there&#39;s a test for it (test/Frontend/dependencies.swift).<br></p><p>Jordan<br></p><p><br>&gt; On Nov 1, 2016, at 9:53, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; We currently have a built-in dependency edge on the Swift compiler which is supposed to catch this (we don&#39;t have one on just the standard libraries, but it doesn&#39;t seem like that was getting hit here?).<br>&gt; <br>&gt; It looks like that didn&#39;t work here? Can you file a bug with as much info as you have?<br>&gt; <br>&gt; I don&#39;t remember the details, but shouldn&#39;t we be getting all the .swiftmodules as dependencies reported by the compiler?<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; On Nov 1, 2016, at 9:40 AM, Jordan Rose via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi, swift-build-dev. I recently hit this failure &lt;https://ci.swift.org/job/swift-PR-Linux-smoke-test/2159/&gt; on a pull request test that did nothing but change Swift’s test/lit.cfg—i.e. a test-configuration-only change in the compiler repo. <br>&gt;&gt; <br>&gt;&gt;&gt; /home/buildnode/jenkins/workspace/swift-PR-Linux-smoke-test at 2/branch-master/swiftpm/Sources/swift-test/main.swift:11:8: error: module file was created by an older version of the compiler; rebuild &#39;Commands&#39; and try again: /home/buildnode/jenkins/workspace/swift-PR-Linux-smoke-test at 2/branch-master/buildbot_linux/swiftpm-linux-x86_64/debug/Commands.swiftmodule<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import Commands<br>&gt;&gt;&gt;        ^<br>&gt;&gt; <br>&gt;&gt; (and so on for Basic and TestSupport. Note that this was in the self-host stage of the CI build.)<br>&gt;&gt; <br>&gt;&gt; This kind of failure implies that the compiler and standard library were rebuilt but the support modules of SwiftPM were not, which in turn seems like a missing dependency to me. Yes, a clean build will fix this, and yes, I’m not sure it matters to end users (who aren’t replacing their compiler and standard library arbitrarily), but it seems like there’s an easy answer here: add Swift.swiftmodule as a build dependency for this build. (Since it builds pretty quickly, maybe that’s just used to clean the build folder.) That way, you’ll always be up-to-date on the module format and the contents of the standard library.<br>&gt;&gt; <br>&gt;&gt; There’s still a dependency trap here: if the only thing that changed was the Darwin or Glibc overlay, SwiftPM might not think it needs to rebuild. The actual correct answer is that your build depends on all swiftmodules you use. (And if static linking, all static archives as well, which may not always change in sync with the swiftmodule.)<br>&gt;&gt; <br>&gt;&gt; What do you want to do here, SwiftPM folks?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20161101/a404ac8c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
