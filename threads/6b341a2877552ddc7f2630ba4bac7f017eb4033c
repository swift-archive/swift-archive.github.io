<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>`once` keyword for use with loops</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>May 17, 2016 at 03:00:00pm</p></header><div class="content"><p>​Hello Swift Evolution,<br></p><p>Its not uncommon to have to do a piece of work only once or on the first<br>iteration of<br>a loop.<br>Take for example producing a comma separated string from an Array:<br></p><p>    var result = &quot;&quot;<br></p><p>    let values = [1, 2, 3, 4, 5]<br></p><p>    var gen = values.generate()<br></p><p><br>    if let first = gen.next() {<br></p><p>        result += &quot;\(first)&quot;<br></p><p>        while let value = gen.next() {<br></p><p>            result += &quot;, &quot;<br></p><p>            result += &quot;\(value)&quot;<br></p><p>        }<br></p><p>    }<br></p><p><br>Since on the first iteration we want to skip putting a comma in front we<br>use an `if let` to grab the first element and then embed a `while let`<br>inside the `if let` to handle the rest.<br></p><p><br>Another way to do this could be using a bool to keep track of the first<br>iteration:<br></p><p><br>    var first = true<br></p><p>    while let value = gen.next() {<br></p><p>        if first {<br></p><p>            result += &quot;\(value)&quot;<br></p><p>            first = false<br></p><p>            continue<br></p><p>        } else {<br></p><p>            result += &quot;, &quot;<br></p><p>            result += &quot;\(value)&quot;<br></p><p>        }<br></p><p>    }<br></p><p><br>These approaches work, but I think there may be a way to do this with less<br>noise.<br></p><p>If there was a keyword to execute a block of code only on the first<br>iteration of a loop I think that would make code like this more concise.<br></p><p>If there was a keyword like `once` then the same thing could be achieved<br>with something like:<br></p><p><br>    while let value = gen.next() {<br></p><p>        once {<br></p><p>            result += &quot;\(value)&quot;<br></p><p>            continue<br></p><p>        }<br></p><p>        result += &quot;, &quot;<br></p><p>        result += &quot;\(value)&quot;<br></p><p>    }<br></p><p><br>How does it sound?<br></p><p><br>- Nick<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/6b34033c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>`once` keyword for use with loops</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May 17, 2016 at 12:00:00am</p></header><div class="content"><p>Not to doubt the usefulness of this proposal in general, but your example is subsumed by simply declaring <br></p><p>var result = &quot;\(gen.next()!)&quot;<br></p><p>and proceeding with the rest of the example sans `once`.  I think you&#39;ll also have to address how this is any different from dispatch_once or a DSL over the same.<br></p><p>Cheers,<br></p><p>~Robert Widmann<br></p><p>2016/05/17 0:03、Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Hello Swift Evolution,<br>&gt; <br>&gt; Its not uncommon to have to do a piece of work only once or on the first iteration of <br>&gt; a loop.<br>&gt; Take for example producing a comma separated string from an Array:<br>&gt; <br>&gt;     var result = &quot;&quot;<br>&gt; <br>&gt;     let values = [1, 2, 3, 4, 5]<br>&gt; <br>&gt;     var gen = values.generate()<br>&gt; <br>&gt; <br>&gt; <br>&gt;     if let first = gen.next() {<br>&gt; <br>&gt;         result += &quot;\(first)&quot;<br>&gt; <br>&gt;         while let value = gen.next() {<br>&gt; <br>&gt; <br>&gt;             result += &quot;, &quot;<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Since on the first iteration we want to skip putting a comma in front we use an `if let` to grab the first element and then embed a `while let` inside the `if let` to handle the rest.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Another way to do this could be using a bool to keep track of the first iteration:<br>&gt; <br>&gt; <br>&gt; <br>&gt;     var first = true<br>&gt; <br>&gt;     while let value = gen.next() {<br>&gt; <br>&gt;         if first {<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;             first = false<br>&gt; <br>&gt;             continue<br>&gt; <br>&gt;         } else {<br>&gt; <br>&gt;             result += &quot;, &quot;<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; These approaches work, but I think there may be a way to do this with less noise.<br>&gt; <br>&gt; If there was a keyword to execute a block of code only on the first iteration of a loop I think that would make code like this more concise.<br>&gt; <br>&gt; If there was a keyword like `once` then the same thing could be achieved with something like:<br>&gt; <br>&gt; <br>&gt; <br>&gt;     while let value = gen.next() {<br>&gt; <br>&gt;         once {<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;             continue<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;         result += &quot;, &quot;<br>&gt; <br>&gt;         result += &quot;\(value)&quot;<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; How does it sound?<br>&gt; <br>&gt; <br>&gt; <br>&gt; - Nick<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/abb37fa8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>`once` keyword for use with loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 17, 2016 at 04:00:00pm</p></header><div class="content"><p>This only works with the example exactly as-is, I think a fairer re-write would be something like the following:<br></p><p>func toCSV(values:[CustomStringConvertible]) -&gt; String {<br>    var gen = values.generate()<br></p><p>    var result = gen.next()?.description ?? &quot;&quot;<br>    while let value = gen.next() { result += &quot;, \(value)&quot; }<br>    return result<br>}<br></p><p>toCSV([1, 2, 3, 4, 5])<br></p><p>For brevity I opted to use nil-coalescing and a default value to handle the first (potentially nil) element cleanly.<br></p><p>I’m undecided about whether I want the feature or not; as shown the example can actually be handled very neatly already, so it doesn’t really highlight a need for the feature. One thing I like about it though is the ability to possibly eliminate the need for a generator and use a for in loop instead, like so:<br></p><p>func toCSV(values:[CustomStringConvertible]) -&gt; String {<br>    var result = &quot;&quot;<br>    for value in values {<br>        once { result += &quot;\(value)&quot;; continue }<br>        result += &quot;, \(value)&quot;<br>    }<br>    return result<br>}<br></p><p>But this isn’t really much of a saving. I can’t think of a real-world example offhand that can better demonstrate a use for this; ideally you’d want to use several once {} blocks, or do something in the loop that requires other statements in the loop, i.e- you use the once to avoid duplicating statements in the loop while processing the first element.<br></p><p>&gt; On 17 May 2016, at 07:13, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Not to doubt the usefulness of this proposal in general, but your example is subsumed by simply declaring <br>&gt; <br>&gt; var result = &quot;\(gen.next()!)&quot;<br>&gt; <br>&gt; and proceeding with the rest of the example sans `once`.  I think you&#39;ll also have to address how this is any different from dispatch_once or a DSL over the same.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/05/17 0:03、Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt; <br>&gt;&gt; ​Hello Swift Evolution,<br>&gt;&gt; <br>&gt;&gt; Its not uncommon to have to do a piece of work only once or on the first iteration of <br>&gt;&gt; a loop.<br>&gt;&gt; Take for example producing a comma separated string from an Array:<br>&gt;&gt; <br>&gt;&gt;     var result = &quot;&quot;<br>&gt;&gt; <br>&gt;&gt;     let values = [1, 2, 3, 4, 5]<br>&gt;&gt; <br>&gt;&gt;     var gen = values.generate()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     if let first = gen.next() {<br>&gt;&gt; <br>&gt;&gt;         result += &quot;\(first)&quot;<br>&gt;&gt; <br>&gt;&gt;         while let value = gen.next() {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;             result += &quot;, &quot;<br>&gt;&gt; <br>&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt; <br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Since on the first iteration we want to skip putting a comma in front we use an `if let` to grab the first element and then embed a `while let` inside the `if let` to handle the rest.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Another way to do this could be using a bool to keep track of the first iteration:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     var first = true<br>&gt;&gt; <br>&gt;&gt;     while let value = gen.next() {<br>&gt;&gt; <br>&gt;&gt;         if first {<br>&gt;&gt; <br>&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt; <br>&gt;&gt;             first = false<br>&gt;&gt; <br>&gt;&gt;             continue<br>&gt;&gt; <br>&gt;&gt;         } else {<br>&gt;&gt; <br>&gt;&gt;             result += &quot;, &quot;<br>&gt;&gt; <br>&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt; <br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; These approaches work, but I think there may be a way to do this with less noise.<br>&gt;&gt; <br>&gt;&gt; If there was a keyword to execute a block of code only on the first iteration of a loop I think that would make code like this more concise.<br>&gt;&gt; <br>&gt;&gt; If there was a keyword like `once` then the same thing could be achieved with something like:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     while let value = gen.next() {<br>&gt;&gt; <br>&gt;&gt;         once {<br>&gt;&gt; <br>&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt; <br>&gt;&gt;             continue<br>&gt;&gt; <br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         result += &quot;, &quot;<br>&gt;&gt; <br>&gt;&gt;         result += &quot;\(value)&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; How does it sound?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; - Nick<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/1fdd4df9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b3b33f77a1215e7338bfea30585045c?s=50"></div><header><strong>`once` keyword for use with loops</strong> from <string>Daryle Walker</string> &lt;darylew at mac.com&gt;<p>June 17, 2016 at 12:00:00pm</p></header><div class="content"><p>Aren’t there already methods that stick elements between others (and only between, neither before the first nor after the last)?<br></p><p>//=====<br>fun toCSV2(values: [CustomStringConvertible]) -&gt; String {<br>    return values.map { $0.description }.joinWithSeparator(“, “)<br>}<br>//=====<br></p><p>— <br>Daryle Walker<br>Mac, Internet, and Video Game Junkie<br>darylew AT mac DOT com <br></p><p>&gt; On May 17, 2016, at 11:49 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This only works with the example exactly as-is, I think a fairer re-write would be something like the following:<br>&gt; <br>&gt; func toCSV(values:[CustomStringConvertible]) -&gt; String {<br>&gt;     var gen = values.generate()<br>&gt; <br>&gt;     var result = gen.next()?.description ?? &quot;&quot;<br>&gt;     while let value = gen.next() { result += &quot;, \(value)&quot; }<br>&gt;     return result<br>&gt; }<br>&gt; <br>&gt; toCSV([1, 2, 3, 4, 5])<br>&gt; <br>&gt; For brevity I opted to use nil-coalescing and a default value to handle the first (potentially nil) element cleanly.<br>&gt; <br>&gt; I’m undecided about whether I want the feature or not; as shown the example can actually be handled very neatly already, so it doesn’t really highlight a need for the feature. One thing I like about it though is the ability to possibly eliminate the need for a generator and use a for in loop instead, like so:<br>&gt; <br>&gt; func toCSV(values:[CustomStringConvertible]) -&gt; String {<br>&gt;     var result = &quot;&quot;<br>&gt;     for value in values {<br>&gt;         once { result += &quot;\(value)&quot;; continue }<br>&gt;         result += &quot;, \(value)&quot;<br>&gt;     }<br>&gt;     return result<br>&gt; }<br>&gt; <br>&gt; But this isn’t really much of a saving. I can’t think of a real-world example offhand that can better demonstrate a use for this; ideally you’d want to use several once {} blocks, or do something in the loop that requires other statements in the loop, i.e- you use the once to avoid duplicating statements in the loop while processing the first element.<br>&gt; <br>&gt;&gt; On 17 May 2016, at 07:13, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Not to doubt the usefulness of this proposal in general, but your example is subsumed by simply declaring <br>&gt;&gt; <br>&gt;&gt; var result = &quot;\(gen.next()!)&quot;<br>&gt;&gt; <br>&gt;&gt; and proceeding with the rest of the example sans `once`.  I think you&#39;ll also have to address how this is any different from dispatch_once or a DSL over the same.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt; 2016/05/17 0:03、Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt;&gt; <br>&gt;&gt;&gt; ​Hello Swift Evolution,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Its not uncommon to have to do a piece of work only once or on the first iteration of <br>&gt;&gt;&gt; a loop.<br>&gt;&gt;&gt; Take for example producing a comma separated string from an Array:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     var result = &quot;&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     let values = [1, 2, 3, 4, 5]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     var gen = values.generate()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     if let first = gen.next() {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         result += &quot;\(first)&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         while let value = gen.next() {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             result += &quot;, &quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Since on the first iteration we want to skip putting a comma in front we use an `if let` to grab the first element and then embed a `while let` inside the `if let` to handle the rest.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Another way to do this could be using a bool to keep track of the first iteration:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     var first = true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     while let value = gen.next() {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         if first {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             first = false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             continue<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         } else {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             result += &quot;, &quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; These approaches work, but I think there may be a way to do this with less noise.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If there was a keyword to execute a block of code only on the first iteration of a loop I think that would make code like this more concise.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If there was a keyword like `once` then the same thing could be achieved with something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     while let value = gen.next() {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         once {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             result += &quot;\(value)&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;             continue<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         result += &quot;, &quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         result += &quot;\(value)&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How does it sound?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Nick<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160617/1fefa004/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>`once` keyword for use with loops</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 17, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On May 16, 2016, at 11:03 PM, Nicholas Maccharoli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ​Hello Swift Evolution,<br>&gt; <br>&gt; Its not uncommon to have to do a piece of work only once or on the first iteration of <br>&gt; a loop.<br>&gt; Take for example producing a comma separated string from an Array:<br>&gt; <br>&gt;     var result = &quot;&quot;<br>&gt; <br>&gt;     let values = [1, 2, 3, 4, 5]<br>&gt; <br>&gt;     var gen = values.generate()<br>&gt; <br>&gt; <br>&gt; <br>&gt;     if let first = gen.next() {<br>&gt; <br>&gt;         result += &quot;\(first)&quot;<br>&gt; <br>&gt;         while let value = gen.next() {<br>&gt; <br>&gt; <br>&gt;             result += &quot;, &quot;<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Since on the first iteration we want to skip putting a comma in front we use an `if let` to grab the first element and then embed a `while let` inside the `if let` to handle the rest.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Another way to do this could be using a bool to keep track of the first iteration:<br>&gt; <br>&gt; <br>&gt; <br>&gt;     var first = true<br>&gt; <br>&gt;     while let value = gen.next() {<br>&gt; <br>&gt;         if first {<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;             first = false<br>&gt; <br>&gt;             continue<br>&gt; <br>&gt;         } else {<br>&gt; <br>&gt;             result += &quot;, &quot;<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;         }<br>&gt; <br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; These approaches work, but I think there may be a way to do this with less noise.<br>&gt; <br>&gt; If there was a keyword to execute a block of code only on the first iteration of a loop I think that would make code like this more concise.<br>&gt; <br>&gt; If there was a keyword like `once` then the same thing could be achieved with something like:<br>&gt; <br>&gt; <br>&gt; <br>&gt;     while let value = gen.next() {<br>&gt; <br>&gt;         once {<br>&gt; <br>&gt;             result += &quot;\(value)&quot;<br>&gt; <br>&gt;             continue<br>&gt; <br>&gt;         }<br>&gt; <br>&gt;         result += &quot;, &quot;<br>&gt; <br>&gt;         result += &quot;\(value)&quot;<br>&gt; <br>&gt; <br>&gt;     }<br>&gt; <br>&gt; <br>&gt; <br>&gt; How does it sound?<br></p><p>IMO, a better approach would be to write an &#39;interleave&#39; combinator, like this:<br></p><p>func interleave&lt;S: Sequence&gt;(_ x: S, between: () -&gt; (), each: S.GeneratorType.Element -&gt; ()) {<br>  var generator = x.generate()<br>  if let first = generator.next() {<br>    each(first)<br>    while let rest = generator.next() {<br>      between()<br>      each(rest)<br>    }<br>  }<br>}<br></p><p>-Joe<br></p><p>&gt; <br>&gt; <br>&gt; <br>&gt; - Nick<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
