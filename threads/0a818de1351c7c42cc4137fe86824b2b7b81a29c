<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 25, 2016 at 11:00:00pm</p></header><div class="content"><p>Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br></p><p>Remove associated type inference<br></p><p>Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br></p><p>This proposal seeks to remove the inference of associated types in types conforming to protocols.<br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br></p><p>Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br></p><p>associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br></p><p>The proposal would remove associated type inference and make code which relied on it invalid:<br></p><p>protocol IteratorProtocol {<br>  associatedtype Element<br>  mutating func next() -&gt; Element?<br>}<br></p><p>struct IntIterator : IteratorProtocol {<br>  mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>}<br>The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br></p><p>struct IntIterator : IteratorProtocol {<br>    typealias Element = Int<br>    mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>}<br> &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br></p><p>This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br></p><p> &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;Alternatives Considered<br></p><p>The only alternative is to keep the inference with the known consequences on the compiler.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/0a81a29c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 25, 2016 at 02:00:00pm</p></header><div class="content"><p>On Wed, May 25, 2016 at 2:43 PM, David Hart via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Impact on Existing Code<br>&gt;<br>&gt; This is a breaking change that will require conforming types which relied on<br>&gt; the inference, including in the Standard Library, to explicitly declare<br>&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt; removed from the compiler.<br></p><p>Please show an example -- for example, what a smallest collection type<br>will look like.<br></p><p>&gt; Alternatives Considered<br>&gt;<br>&gt; The only alternative is to keep the inference with the known consequences on<br>&gt; the compiler.<br></p><p>Sorry, that&#39;s not fair :)  There is a middle ground -- limited<br>inference.  For example, in Collection, we don&#39;t need Index to be<br>inferrable from every declaration that mentions it.  We can add a<br>feature to declare that the type of &#39;var startIndex&#39; infers<br>&#39;associatedtype Index&#39; (via an appropriate attribute).  It is true<br>that this approach would not remove global inference as such, but it<br>will make it a much easier problem I believe.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 25, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 25 May 2016, at 23:47, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, May 25, 2016 at 2:43 PM, David Hart via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; This is a breaking change that will require conforming types which relied on<br>&gt;&gt; the inference, including in the Standard Library, to explicitly declare<br>&gt;&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt;&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt;&gt; removed from the compiler.<br>&gt; <br>&gt; Please show an example -- for example, what a smallest collection type<br>&gt; will look like.<br></p><p>Isn’t that the example in the Detailed Design section? What other example were you thinking of?<br></p><p>&gt;&gt; Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; The only alternative is to keep the inference with the known consequences on<br>&gt;&gt; the compiler.<br>&gt; <br>&gt; Sorry, that&#39;s not fair :)  There is a middle ground -- limited<br>&gt; inference.  For example, in Collection, we don&#39;t need Index to be<br>&gt; inferrable from every declaration that mentions it.  We can add a<br>&gt; feature to declare that the type of &#39;var startIndex&#39; infers<br>&gt; &#39;associatedtype Index&#39; (via an appropriate attribute).  It is true<br>&gt; that this approach would not remove global inference as such, but it<br>&gt; will make it a much easier problem I believe.<br></p><p>This sounds like a more complicated solution: it does not remove global inference and complicates the language with an additional attribute only to help the compiler. I don’t see many advantages to this solution.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 25, 2016 at 03:00:00pm</p></header><div class="content"><p>On Wed, May 25, 2016 at 2:52 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;<br>&gt;&gt; On 25 May 2016, at 23:47, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Wed, May 25, 2016 at 2:43 PM, David Hart via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on<br>&gt;&gt;&gt; the inference, including in the Standard Library, to explicitly declare<br>&gt;&gt;&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt;&gt;&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt;&gt;&gt; removed from the compiler.<br>&gt;&gt;<br>&gt;&gt; Please show an example -- for example, what a smallest collection type<br>&gt;&gt; will look like.<br>&gt;<br>&gt; Isn’t that the example in the Detailed Design section? What other example were you thinking of?<br></p><p>You are showing an iterator.  Try doing a collection, it has many more<br>associated types most of which are defaulted.<br></p><p>&gt;&gt;&gt; Alternatives Considered<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The only alternative is to keep the inference with the known consequences on<br>&gt;&gt;&gt; the compiler.<br>&gt;&gt;<br>&gt;&gt; Sorry, that&#39;s not fair :)  There is a middle ground -- limited<br>&gt;&gt; inference.  For example, in Collection, we don&#39;t need Index to be<br>&gt;&gt; inferrable from every declaration that mentions it.  We can add a<br>&gt;&gt; feature to declare that the type of &#39;var startIndex&#39; infers<br>&gt;&gt; &#39;associatedtype Index&#39; (via an appropriate attribute).  It is true<br>&gt;&gt; that this approach would not remove global inference as such, but it<br>&gt;&gt; will make it a much easier problem I believe.<br>&gt;<br>&gt; This sounds like a more complicated solution: it does not remove global inference and complicates the language with an additional attribute only to help the compiler. I don’t see many advantages to this solution.<br></p><p>The advantage is that we can keep the boilerplate down, and make the<br>problem easier in the compiler.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 25, 2016 at 07:00:00pm</p></header><div class="content"><p>On Wednesday, 25 May 2016, Dmitri Gribenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Wed, May 25, 2016 at 2:52 PM, David Hart &lt;david at hartbit.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On 25 May 2016, at 23:47, Dmitri Gribenko &lt;gribozavr at gmail.com<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Wed, May 25, 2016 at 2:43 PM, David Hart via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; Impact on Existing Code<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; This is a breaking change that will require conforming types which<br>&gt; relied on<br>&gt; &gt;&gt;&gt; the inference, including in the Standard Library, to explicitly declare<br>&gt; &gt;&gt;&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt; &gt;&gt;&gt; leave the type to be filled in. That way, all the type inference could<br>&gt; be<br>&gt; &gt;&gt;&gt; removed from the compiler.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Please show an example -- for example, what a smallest collection type<br>&gt; &gt;&gt; will look like.<br>&gt; &gt;<br>&gt; &gt; Isn’t that the example in the Detailed Design section? What other<br>&gt; example were you thinking of?<br>&gt;<br>&gt; You are showing an iterator.  Try doing a collection, it has many more<br>&gt; associated types most of which are defaulted.<br>&gt;<br>&gt; &gt;&gt;&gt; Alternatives Considered<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The only alternative is to keep the inference with the known<br>&gt; consequences on<br>&gt; &gt;&gt;&gt; the compiler.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Sorry, that&#39;s not fair :)  There is a middle ground -- limited<br>&gt; &gt;&gt; inference.  For example, in Collection, we don&#39;t need Index to be<br>&gt; &gt;&gt; inferrable from every declaration that mentions it.  We can add a<br>&gt; &gt;&gt; feature to declare that the type of &#39;var startIndex&#39; infers<br>&gt; &gt;&gt; &#39;associatedtype Index&#39; (via an appropriate attribute).  It is true<br>&gt; &gt;&gt; that this approach would not remove global inference as such, but it<br>&gt; &gt;&gt; will make it a much easier problem I believe.<br>&gt; &gt;<br>&gt; &gt; This sounds like a more complicated solution: it does not remove global<br>&gt; inference and complicates the language with an additional attribute only to<br>&gt; help the compiler. I don’t see many advantages to this solution.<br>&gt;<br>&gt; The advantage is that we can keep the boilerplate down, and make the<br>&gt; problem easier in the compiler.<br></p><p><br>If the issue is easing the work of the compiler, are you suggesting<br>dropping the entire type inference? I don&#39;t really think removing it here<br>will &quot;solve&quot; anything.<br></p><p><br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com<br>&gt; &lt;javascript:;&gt;&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>--<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/9d597542/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 25, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, May 25, 2016 at 3:42 PM, Leonardo Pessoa &lt;me at lmpessoa.com&gt; wrote:<br></p><p>&gt; On Wednesday, 25 May 2016, Dmitri Gribenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Wed, May 25, 2016 at 2:52 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 25 May 2016, at 23:47, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Wed, May 25, 2016 at 2:43 PM, David Hart via swift-evolution<br>&gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; This is a breaking change that will require conforming types which<br>&gt;&gt; relied on<br>&gt;&gt; &gt;&gt;&gt; the inference, including in the Standard Library, to explicitly<br>&gt;&gt; declare<br>&gt;&gt; &gt;&gt;&gt; associated types. A Fix-It could be introduced to add the typealias<br>&gt;&gt; and<br>&gt;&gt; &gt;&gt;&gt; leave the type to be filled in. That way, all the type inference<br>&gt;&gt; could be<br>&gt;&gt; &gt;&gt;&gt; removed from the compiler.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Please show an example -- for example, what a smallest collection type<br>&gt;&gt; &gt;&gt; will look like.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Isn’t that the example in the Detailed Design section? What other<br>&gt;&gt; example were you thinking of?<br>&gt;&gt;<br>&gt;&gt; You are showing an iterator.  Try doing a collection, it has many more<br>&gt;&gt; associated types most of which are defaulted.<br>&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Alternatives Considered<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; The only alternative is to keep the inference with the known<br>&gt;&gt; consequences on<br>&gt;&gt; &gt;&gt;&gt; the compiler.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Sorry, that&#39;s not fair :)  There is a middle ground -- limited<br>&gt;&gt; &gt;&gt; inference.  For example, in Collection, we don&#39;t need Index to be<br>&gt;&gt; &gt;&gt; inferrable from every declaration that mentions it.  We can add a<br>&gt;&gt; &gt;&gt; feature to declare that the type of &#39;var startIndex&#39; infers<br>&gt;&gt; &gt;&gt; &#39;associatedtype Index&#39; (via an appropriate attribute).  It is true<br>&gt;&gt; &gt;&gt; that this approach would not remove global inference as such, but it<br>&gt;&gt; &gt;&gt; will make it a much easier problem I believe.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This sounds like a more complicated solution: it does not remove global<br>&gt;&gt; inference and complicates the language with an additional attribute only to<br>&gt;&gt; help the compiler. I don’t see many advantages to this solution.<br>&gt;&gt;<br>&gt;&gt; The advantage is that we can keep the boilerplate down, and make the<br>&gt;&gt; problem easier in the compiler.<br>&gt;<br>&gt;<br>&gt; If the issue is easing the work of the compiler, are you suggesting<br>&gt; dropping the entire type inference? I don&#39;t really think removing it here<br>&gt; will &quot;solve&quot; anything.<br>&gt;<br></p><p>No, I&#39;m suggesting to limit the scope.<br></p><p>protocol Collection {<br>  typealias Index<br>  @infers(Index)<br>  var startIndex: Index { get }<br>  var endIndex: Index { get }<br>  subscript(i: Index) -&gt; Iterator.Element<br>}<br></p><p>Here, only &#39;var startIndex&#39; in a conforming type would be causing &#39;Index&#39;<br>to be inferred.  &#39;endIndex&#39; and subscript won&#39;t have any effect on the<br>inference.  My suggestion is that we will only allow one such declaration<br>to exist.  This is a much simpler problem, I think, than solving a<br>constraint system that involves all declarations that mention Index (as it<br>is now).<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/481b68ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 25, 2016 at 06:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 25, 2016, at 6:11 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Wed, May 25, 2016 at 3:42 PM, Leonardo Pessoa &lt;me at lmpessoa.com&gt; wrote:<br>&gt;&gt;&gt; On Wednesday, 25 May 2016, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On Wed, May 25, 2016 at 2:52 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On 25 May 2016, at 23:47, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; On Wed, May 25, 2016 at 2:43 PM, David Hart via swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; This is a breaking change that will require conforming types which relied on<br>&gt;&gt;&gt; &gt;&gt;&gt; the inference, including in the Standard Library, to explicitly declare<br>&gt;&gt;&gt; &gt;&gt;&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt;&gt;&gt; &gt;&gt;&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt;&gt;&gt; &gt;&gt;&gt; removed from the compiler.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Please show an example -- for example, what a smallest collection type<br>&gt;&gt;&gt; &gt;&gt; will look like.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Isn’t that the example in the Detailed Design section? What other example were you thinking of?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You are showing an iterator.  Try doing a collection, it has many more<br>&gt;&gt;&gt; associated types most of which are defaulted.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;&gt;&gt; Alternatives Considered<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; The only alternative is to keep the inference with the known consequences on<br>&gt;&gt;&gt; &gt;&gt;&gt; the compiler.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Sorry, that&#39;s not fair :)  There is a middle ground -- limited<br>&gt;&gt;&gt; &gt;&gt; inference.  For example, in Collection, we don&#39;t need Index to be<br>&gt;&gt;&gt; &gt;&gt; inferrable from every declaration that mentions it.  We can add a<br>&gt;&gt;&gt; &gt;&gt; feature to declare that the type of &#39;var startIndex&#39; infers<br>&gt;&gt;&gt; &gt;&gt; &#39;associatedtype Index&#39; (via an appropriate attribute).  It is true<br>&gt;&gt;&gt; &gt;&gt; that this approach would not remove global inference as such, but it<br>&gt;&gt;&gt; &gt;&gt; will make it a much easier problem I believe.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; This sounds like a more complicated solution: it does not remove global inference and complicates the language with an additional attribute only to help the compiler. I don’t see many advantages to this solution.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The advantage is that we can keep the boilerplate down, and make the<br>&gt;&gt;&gt; problem easier in the compiler.<br>&gt;&gt; <br>&gt;&gt; If the issue is easing the work of the compiler, are you suggesting dropping the entire type inference? I don&#39;t really think removing it here will &quot;solve&quot; anything.<br>&gt; <br>&gt; <br>&gt; No, I&#39;m suggesting to limit the scope.<br>&gt; <br>&gt; protocol Collection {<br>&gt;   typealias Index<br>&gt;   @infers(Index)<br>&gt;   var startIndex: Index { get }<br>&gt;   var endIndex: Index { get }<br>&gt;   subscript(i: Index) -&gt; Iterator.Element<br>&gt; }<br>&gt; <br>&gt; Here, only &#39;var startIndex&#39; in a conforming type would be causing &#39;Index&#39; to be inferred.  &#39;endIndex&#39; and subscript won&#39;t have any effect on the inference.  My suggestion is that we will only allow one such declaration to exist.  This is a much simpler problem, I think, than solving a constraint system that involves all declarations that mention Index (as it is now).<br></p><p>And IMO it&#39;s much more acceptable to do something like this that only impacts protocol declarations than to remove associated type inference altogether and place a burden on every conformance.<br></p><p>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/7ed9982b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 26, 2016 at 01:00:00am</p></header><div class="content"><p>I&#39;m not quite sure I follow you. I am suggesting only removing it for associated type inference, where we fairly rarely benefit from it compared to general type inference.<br></p><p>&gt; On 26 May 2016, at 00:42, Leonardo Pessoa &lt;me at lmpessoa.com&gt; wrote:<br>&gt; <br>&gt; If the issue is easing the work of the compiler, are you suggesting dropping the entire type inference? I don&#39;t really think removing it here will &quot;solve&quot; anything.<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 25, 2016 at 05:00:00pm</p></header><div class="content"><p>I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br></p><p>Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br></p><p><br>&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt; <br>&gt; Remove associated type inference<br>&gt; <br>&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt; <br>&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt; <br>&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt; <br>&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt; <br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/39fb1d71/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 25, 2016 at 07:00:00pm</p></header><div class="content"><p>-1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br></p><p><br></p><p>-----Original Message-----<br>From: &quot;Matthew Johnson via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;<br>Sent: ‎25/‎05/‎2016 07:06 PM<br>To: &quot;David Hart&quot; &lt;david at hartbit.com&gt;<br>Cc: &quot;Swift-evolution&quot; &lt;swift-evolution at swift.org&gt;<br>Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br></p><p>I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br></p><p><br>Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br></p><p><br></p><p><br>On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br></p><p><br>Remove associated type inference<br>Proposal: SE-XXXX<br>Author: David Hart, Douglas Gregor<br>Status: TBD<br>Review manager: TBD<br>Introduction<br>This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>Motivation<br>Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>Detailed Design<br>The proposal would remove associated type inference and make code which relied on it invalid:<br>protocol IteratorProtocol {<br>  associatedtype Element<br>  mutating func next() -&gt; Element?<br>}<br></p><p>struct IntIterator : IteratorProtocol {<br>  mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>}The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>struct IntIterator : IteratorProtocol {<br>    typealias Element = Int<br>    mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>}Impact on Existing Code<br>This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&lt;path d=&quot;M4 9h1v1h-1c-1.5 0-3-1.69-3-3.5s1.55-3.5 3-3.5h4c1.45 0 3 1.69 3 3.5 0 1.41-0.91 2.72-2 3.25v-1.16c0.58-0.45 1-1.27 1-2.09 0-1.28-1.02-2.5-2-2.5H4c-0.98 0-2 1.22-2 2.5s1 2.5 2 2.5z m9-3h-1v1h1c1 0 2 1.22 2 2.5s-1.02 2.5-2 2.5H9c-0.98 0-2-1.22-2-2.5 0-0.83 0.42-1.64 1-2.09v-1.16c-1.09 0.53-2 1.84-2 3.25 0 1.81 1.55 3.5 3 3.5h4c1.45 0 3-1.69 3-3.5s-1.5-3.5-3-3.5z&quot;<br></p><p>[The entire original message is not included.]<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/aed30fd5/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>May 25, 2016 at 07:00:00pm</p></header><div class="content"><p>This is how I feel as well - I don&#39;t understand why we&#39;d want to make the programmer do more work. Shouldn&#39;t the goal for the compiler and language be to make the end user programmer do *less* work while still getting solid results? I would like to see more and smarter magic like inference/context awareness in the language - not less!<br></p><p>l8r<br>Sean<br></p><p>Sent from my iPad<br></p><p>&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt; <br>&gt; From: Matthew Johnson via swift-evolution<br>&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt; To: David Hart<br>&gt; Cc: Swift-evolution<br>&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt; <br>&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt; <br>&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt; <br>&gt; <br>&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt; <br>&gt;&gt; Remove associated type inference<br>&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt; <br>&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt; <br>&gt;&gt; Detailed Design<br>&gt;&gt; <br>&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt; <br>&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;   associatedtype Element<br>&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;     typealias Element = Int<br>&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; [The entire original message is not included.]<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/c60e577f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 25, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 for the proposal.<br></p><p>Another quirk of associated types is that they cannot be overloaded as far<br>as I can tell. Requiring explicit declaration could move us toward allowing<br>multiple types to serve. Does anyone else see this as a useful feature to<br>pursue?<br>TJ<br></p><p>On Wed, May 25, 2016 at 6:33 PM, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the<br>&gt; programmer do more work. Shouldn&#39;t the goal for the compiler and language<br>&gt; be to make the end user programmer do *less* work while still getting solid<br>&gt; results? I would like to see more and smarter magic like inference/context<br>&gt; awareness in the language - not less!<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change.<br>&gt; To me this is one of the best features of the language and I want more of<br>&gt; it (I&#39;ve been through some situations it was totally obvious the expected<br>&gt; type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;<br>&gt; ------------------------------<br>&gt; From: Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt; To: David Hart &lt;david at hartbit.com&gt;<br>&gt; Cc: Swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;<br>&gt; I agree that if we’re going to do it we should probably do it in Swift 3.<br>&gt; But it is a very convenient and useful feature that significantly lowers<br>&gt; the bar of conforming to protocols with associated types (in many cases you<br>&gt; can just implement the required members without thinking about the<br>&gt; associated types).  I think we should have a more detailed and compelling<br>&gt; story about why we’re considering this change than I see in this proposal.<br>&gt;<br>&gt; Are there any benefits users might receive from this change (assuming type<br>&gt; checker architecture and bugs could eventually be ironed out)?  Is it<br>&gt; actively blocking desirable new features?  If so what are they and in what<br>&gt; way are they blocked?<br>&gt;<br>&gt;<br>&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Here’s a pitch for removing associated type inference as per the Generics<br>&gt; Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;<br>&gt; Remove associated type inference<br>&gt;<br>&gt;    - Proposal: SE-XXXX<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt;    - Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor<br>&gt;    &lt;https://github.com/DougGregor&gt;<br>&gt;    - Status: TBD<br>&gt;    - Review manager: TBD<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;<br>&gt; Introduction<br>&gt;<br>&gt; This proposal seeks to remove the inference of associated types in types<br>&gt; conforming to protocols.<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;<br>&gt; Motivation<br>&gt;<br>&gt; Even if associated types inference in a useful feature, it is also a big<br>&gt; source of bugs in the compiler. This proposal argues that the usefulness<br>&gt; does not outweight its architectural complexity. As per the Generics<br>&gt; Manifesto<br>&gt; &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt;<br>&gt; associated type inference is the only place in Swift where we have a<br>&gt; global type inference problem: it has historically been a major source of<br>&gt; bugs, and implementing it fully and correctly requires a drastically<br>&gt; different architecture to the type checker.<br>&gt;<br>&gt; Because this is a breaking change, it would be beneficial to implement it<br>&gt; for Swift 3.<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed<br>&gt; Design<br>&gt;<br>&gt; The proposal would remove associated type inference and make code which<br>&gt; relied on it invalid:<br>&gt;<br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt;<br>&gt; The compiler would generate an error message stating: error: IntIterator<br>&gt; is missing its Element associated type declaration. The code would have<br>&gt; to be modified as follows to fix the error:<br>&gt;<br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact<br>&gt; on Existing Code<br>&gt;<br>&gt; This is a breaking change that will require conforming types which relied<br>&gt; on the inference, including in the Standard Library, to explicitly declare<br>&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt; removed from the compiler.<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;<br>&gt;<br>&gt;<br>&gt; [The entire original message is not included.]<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/a13da071/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 25, 2016 at 08:00:00pm</p></header><div class="content"><p>Do you mean allowing a type to conform to a protocol multiple times with a different set of types each time? That&#39;s an interesting idea; the generics manifesto describes the same feature but implemented using generics: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt; (&quot;Generic Protocols&quot;).<br></p><p>&gt; On May 25, 2016, at 8:43 PM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for the proposal.<br>&gt; <br>&gt; Another quirk of associated types is that they cannot be overloaded as far as I can tell. Requiring explicit declaration could move us toward allowing multiple types to serve. Does anyone else see this as a useful feature to pursue?<br>&gt; TJ<br>&gt; <br>&gt; On Wed, May 25, 2016 at 6:33 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the programmer do more work. Shouldn&#39;t the goal for the compiler and language be to make the end user programmer do *less* work while still getting solid results? I would like to see more and smarter magic like inference/context awareness in the language - not less!<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;&gt; <br>&gt;&gt; From: Matthew Johnson via swift-evolution &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt;&gt; To: David Hart &lt;mailto:david at hartbit.com&gt;<br>&gt;&gt; Cc: Swift-evolution &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;&gt; <br>&gt;&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt;&gt; <br>&gt;&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Remove associated type inference<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt;&gt;&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;&gt;   associatedtype Element<br>&gt;&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;     typealias Element = Int<br>&gt;&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;<br>&gt;&gt; [The entire original message is not included.]<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/f41d8d03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 25, 2016 at 09:00:00pm</p></header><div class="content"><p>Yes, that is what I mean. I forgot that generic protocols were there<br>(probably because they are listed under &#39;unlikely&#39;). I have bumped into<br>this a couple times now so I would very much like to make a type conform<br>multiple times.<br></p><p><br>On Wed, May 25, 2016 at 9:46 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>&gt; Do you mean allowing a type to conform to a protocol multiple times with a<br>&gt; different set of types each time? That&#39;s an interesting idea; the generics<br>&gt; manifesto describes the same feature but implemented using generics:<br>&gt; https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md (&quot;Generic<br>&gt; Protocols&quot;).<br>&gt;<br>&gt; On May 25, 2016, at 8:43 PM, T.J. Usiyan via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1 for the proposal.<br>&gt;<br>&gt; Another quirk of associated types is that they cannot be overloaded as far<br>&gt; as I can tell. Requiring explicit declaration could move us toward allowing<br>&gt; multiple types to serve. Does anyone else see this as a useful feature to<br>&gt; pursue?<br>&gt; TJ<br>&gt;<br>&gt; On Wed, May 25, 2016 at 6:33 PM, Sean Heber via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the<br>&gt;&gt; programmer do more work. Shouldn&#39;t the goal for the compiler and language<br>&gt;&gt; be to make the end user programmer do *less* work while still getting solid<br>&gt;&gt; results? I would like to see more and smarter magic like inference/context<br>&gt;&gt; awareness in the language - not less!<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change.<br>&gt;&gt; To me this is one of the best features of the language and I want more of<br>&gt;&gt; it (I&#39;ve been through some situations it was totally obvious the expected<br>&gt;&gt; type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;&gt;<br>&gt;&gt; ------------------------------<br>&gt;&gt; From: Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt;&gt; To: David Hart &lt;david at hartbit.com&gt;<br>&gt;&gt; Cc: Swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;&gt;<br>&gt;&gt; I agree that if we’re going to do it we should probably do it in Swift<br>&gt;&gt; 3.  But it is a very convenient and useful feature that significantly<br>&gt;&gt; lowers the bar of conforming to protocols with associated types (in many<br>&gt;&gt; cases you can just implement the required members without thinking about<br>&gt;&gt; the associated types).  I think we should have a more detailed and<br>&gt;&gt; compelling story about why we’re considering this change than I see in this<br>&gt;&gt; proposal.<br>&gt;&gt;<br>&gt;&gt; Are there any benefits users might receive from this change (assuming<br>&gt;&gt; type checker architecture and bugs could eventually be ironed out)?  Is it<br>&gt;&gt; actively blocking desirable new features?  If so what are they and in what<br>&gt;&gt; way are they blocked?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics<br>&gt;&gt; Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;<br>&gt;&gt; Remove associated type inference<br>&gt;&gt;<br>&gt;&gt;    - Proposal: SE-XXXX<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt;&gt;    - Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor<br>&gt;&gt;    &lt;https://github.com/DougGregor&gt;<br>&gt;&gt;    - Status: TBD<br>&gt;&gt;    - Review manager: TBD<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;<br>&gt;&gt; Introduction<br>&gt;&gt;<br>&gt;&gt; This proposal seeks to remove the inference of associated types in types<br>&gt;&gt; conforming to protocols.<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;<br>&gt;&gt; Motivation<br>&gt;&gt;<br>&gt;&gt; Even if associated types inference in a useful feature, it is also a big<br>&gt;&gt; source of bugs in the compiler. This proposal argues that the usefulness<br>&gt;&gt; does not outweight its architectural complexity. As per the Generics<br>&gt;&gt; Manifesto<br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt;&gt;<br>&gt;&gt; associated type inference is the only place in Swift where we have a<br>&gt;&gt; global type inference problem: it has historically been a major source of<br>&gt;&gt; bugs, and implementing it fully and correctly requires a drastically<br>&gt;&gt; different architecture to the type checker.<br>&gt;&gt;<br>&gt;&gt; Because this is a breaking change, it would be beneficial to implement it<br>&gt;&gt; for Swift 3.<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed<br>&gt;&gt; Design<br>&gt;&gt;<br>&gt;&gt; The proposal would remove associated type inference and make code which<br>&gt;&gt; relied on it invalid:<br>&gt;&gt;<br>&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;   associatedtype Element<br>&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt; }<br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; The compiler would generate an error message stating: error: IntIterator<br>&gt;&gt; is missing its Element associated type declaration. The code would have<br>&gt;&gt; to be modified as follows to fix the error:<br>&gt;&gt;<br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;     typealias Element = Int<br>&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact<br>&gt;&gt; on Existing Code<br>&gt;&gt;<br>&gt;&gt; This is a breaking change that will require conforming types which relied<br>&gt;&gt; on the inference, including in the Standard Library, to explicitly declare<br>&gt;&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt;&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt;&gt; removed from the compiler.<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; [The entire original message is not included.]<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/78686462/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 25, 2016 at 08:00:00pm</p></header><div class="content"><p>I think a good proposal in this space would allow protocols to specify whether they could be implemented only once or multiple times, which would address the issues the manifesto raised regarding (e.g.) multiple impls of Sequence breaking everything.<br></p><p>Austin<br></p><p>&gt; On May 25, 2016, at 8:49 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; Yes, that is what I mean. I forgot that generic protocols were there (probably because they are listed under &#39;unlikely&#39;). I have bumped into this a couple times now so I would very much like to make a type conform multiple times.<br>&gt; <br>&gt; <br>&gt; On Wed, May 25, 2016 at 9:46 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt; Do you mean allowing a type to conform to a protocol multiple times with a different set of types each time? That&#39;s an interesting idea; the generics manifesto describes the same feature but implemented using generics: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt; (&quot;Generic Protocols&quot;).<br>&gt; <br>&gt;&gt; On May 25, 2016, at 8:43 PM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 for the proposal.<br>&gt;&gt; <br>&gt;&gt; Another quirk of associated types is that they cannot be overloaded as far as I can tell. Requiring explicit declaration could move us toward allowing multiple types to serve. Does anyone else see this as a useful feature to pursue?<br>&gt;&gt; TJ<br>&gt;&gt; <br>&gt;&gt; On Wed, May 25, 2016 at 6:33 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the programmer do more work. Shouldn&#39;t the goal for the compiler and language be to make the end user programmer do *less* work while still getting solid results? I would like to see more and smarter magic like inference/context awareness in the language - not less!<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From: Matthew Johnson via swift-evolution &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt;&gt;&gt; To: David Hart &lt;mailto:david at hartbit.com&gt;<br>&gt;&gt;&gt; Cc: Swift-evolution &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Remove associated type inference<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt;&gt;&gt;&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt;&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt;&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;&gt;&gt;   associatedtype Element<br>&gt;&gt;&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;&gt;     typealias Element = Int<br>&gt;&gt;&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;<br>&gt;&gt;&gt; [The entire original message is not included.]<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/65df3e73/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 25, 2016 at 10:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 25, 2016, at 10:51 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think a good proposal in this space would allow protocols to specify whether they could be implemented only once or multiple times, which would address the issues the manifesto raised regarding (e.g.) multiple impls of Sequence breaking everything.<br></p><p>I&#39;m pretty sure the core team is strongly against allowing multiple implementations of the same protocol by the same type.  This isn&#39;t the first time it has been discussed.  It tends to come up in conjunction with generic protocols, but I believe all the same issues are relevant here as well.<br></p><p>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On May 25, 2016, at 8:49 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes, that is what I mean. I forgot that generic protocols were there (probably because they are listed under &#39;unlikely&#39;). I have bumped into this a couple times now so I would very much like to make a type conform multiple times.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Wed, May 25, 2016 at 9:46 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Do you mean allowing a type to conform to a protocol multiple times with a different set of types each time? That&#39;s an interesting idea; the generics manifesto describes the same feature but implemented using generics: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md (&quot;Generic Protocols&quot;).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 8:43 PM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 for the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Another quirk of associated types is that they cannot be overloaded as far as I can tell. Requiring explicit declaration could move us toward allowing multiple types to serve. Does anyone else see this as a useful feature to pursue?<br>&gt;&gt;&gt;&gt; TJ<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, May 25, 2016 at 6:33 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the programmer do more work. Shouldn&#39;t the goal for the compiler and language be to make the end user programmer do *less* work while still getting solid results? I would like to see more and smarter magic like inference/context awareness in the language - not less!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; From: Matthew Johnson via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt;&gt;&gt;&gt;&gt;&gt; To: David Hart<br>&gt;&gt;&gt;&gt;&gt;&gt; Cc: Swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Remove associated type inference<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Detailed Design<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;   associatedtype Element<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     typealias Element = Int<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; [The entire original message is not included.]<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/6318b2ee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 25, 2016 at 09:00:00pm</p></header><div class="content"><p>That was my impression as well, but if there&#39;s a good argument otherwise I would welcome someone eventually taking it to the proposal stage (probably after Swift 3). Even a formal discussion period followed by a rejection would help us understand if/where the type system is deficient, and perhaps figure out alternative ways to address those areas.<br></p><p>Austin<br></p><p>&gt; On May 25, 2016, at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 25, 2016, at 10:51 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I think a good proposal in this space would allow protocols to specify whether they could be implemented only once or multiple times, which would address the issues the manifesto raised regarding (e.g.) multiple impls of Sequence breaking everything.<br>&gt; <br>&gt; I&#39;m pretty sure the core team is strongly against allowing multiple implementations of the same protocol by the same type.  This isn&#39;t the first time it has been discussed.  It tends to come up in conjunction with generic protocols, but I believe all the same issues are relevant here as well.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 8:49 PM, T.J. Usiyan &lt;griotspeak at gmail.com &lt;mailto:griotspeak at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, that is what I mean. I forgot that generic protocols were there (probably because they are listed under &#39;unlikely&#39;). I have bumped into this a couple times now so I would very much like to make a type conform multiple times.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, May 25, 2016 at 9:46 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Do you mean allowing a type to conform to a protocol multiple times with a different set of types each time? That&#39;s an interesting idea; the generics manifesto describes the same feature but implemented using generics: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt; (&quot;Generic Protocols&quot;).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 8:43 PM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 for the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Another quirk of associated types is that they cannot be overloaded as far as I can tell. Requiring explicit declaration could move us toward allowing multiple types to serve. Does anyone else see this as a useful feature to pursue?<br>&gt;&gt;&gt;&gt; TJ<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, May 25, 2016 at 6:33 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the programmer do more work. Shouldn&#39;t the goal for the compiler and language be to make the end user programmer do *less* work while still getting solid results? I would like to see more and smarter magic like inference/context awareness in the language - not less!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; l8r<br>&gt;&gt;&gt;&gt; Sean<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; From: Matthew Johnson via swift-evolution &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt;&gt;&gt;&gt;&gt; To: David Hart &lt;mailto:david at hartbit.com&gt;<br>&gt;&gt;&gt;&gt;&gt; Cc: Swift-evolution &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Remove associated type inference<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt;&gt;&gt;&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;&gt;&gt;&gt;&gt;   associatedtype Element<br>&gt;&gt;&gt;&gt;&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;&gt;&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;&gt;&gt;&gt;     typealias Element = Int<br>&gt;&gt;&gt;&gt;&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;<br>&gt;&gt;&gt;&gt;&gt; [The entire original message is not included.]<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/02bf9a49/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 26, 2016 at 08:00:00am</p></header><div class="content"><p>I believe it also helps readability. Associated type are part of the declaration and I think it&#39;s worth pursuing better readability than programmer friendliness at the declaration. When reading a type declaration that conforms to a protocol with associated types, I find it refreshing not having to hunt down the function declaration to figure out what type was inferred as the associated type. I prefer it when programmers are explicit in this situation.<br></p><p>&gt; On 26 May 2016, at 02:33, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; This is how I feel as well - I don&#39;t understand why we&#39;d want to make the programmer do more work. Shouldn&#39;t the goal for the compiler and language be to make the end user programmer do *less* work while still getting solid results? I would like to see more and smarter magic like inference/context awareness in the language - not less!<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On May 25, 2016, at 5:37 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt;&gt; <br>&gt;&gt; From: Matthew Johnson via swift-evolution<br>&gt;&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt;&gt; To: David Hart<br>&gt;&gt; Cc: Swift-evolution<br>&gt;&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt;&gt; <br>&gt;&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt;&gt; <br>&gt;&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Remove associated type inference<br>&gt;&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Detailed Design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;&gt;   associatedtype Element<br>&gt;&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;     typealias Element = Int<br>&gt;&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; [The entire original message is not included.]<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/599c6904/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>May 26, 2016 at 12:00:00pm</p></header><div class="content"><p>On Thu, May 26, 2016, at 02:26 AM, David Hart via swift-evolution wrote:<br>&gt; I believe it also helps readability. Associated type are part of the<br>&gt; declaration and I think it&#39;s worth pursuing better readability than<br>&gt; programmer friendliness at the declaration. When reading a type<br>&gt; declaration that conforms to a protocol with associated types, I find<br>&gt; it refreshing not having to hunt down the function declaration to<br>&gt; figure out what type was inferred as the associated type. I prefer it<br>&gt; when programmers are explicit in this situation.<br> <br>Agree. The self documenting nature of this is definitely welcome.<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/36edec56/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>May 26, 2016 at 07:00:00am</p></header><div class="content"><p>Operator overloading and type inference are powerful, but very very easy to abuse tools especially in a professional environment with opinionated programmers working on a medium to large codebase. It makes the code written depend greatly from context which may be located far away from when it is used and in some cases in a non obvious way. The result is code less clearer to read, review, and to debug if things go wrong. I think we should always keep in mind the time when people will need to debug our code and make that job easy.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 25 May 2016, at 23:37, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt; <br>&gt; From: Matthew Johnson via swift-evolution<br>&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt; To: David Hart<br>&gt; Cc: Swift-evolution<br>&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt; <br>&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt; <br>&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt; <br>&gt; <br>&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt; <br>&gt;&gt; Remove associated type inference<br>&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt; <br>&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt; <br>&gt;&gt; Detailed Design<br>&gt;&gt; <br>&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt; <br>&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;   associatedtype Element<br>&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;     typealias Element = Int<br>&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt; <br>&gt; <br>&gt; [The entire original message is not included.]<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/28b919c9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 26, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 26, 2016, at 12:37 AM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1. I don&#39;t really see how this is a bad thing and why it has to change. To me this is one of the best features of the language and I want more of it (I&#39;ve been through some situations it was totally obvious the expected type of a variable and the compiler couldn&#39;t infer it) not less.<br>&gt; <br></p><p>You are referring to general inference. The proposal for for associated types being inferred from conforming methods inside protocol implementations... a very narro part of the language. And considering the new type aliasing capabilities, one that we may need even less than before.<br></p><p><br>&gt; From: Matthew Johnson via swift-evolution<br>&gt; Sent: ‎25/‎05/‎2016 07:06 PM<br>&gt; To: David Hart<br>&gt; Cc: Swift-evolution<br>&gt; Subject: Re: [swift-evolution] [Pitch] Remove associated type inference<br>&gt; <br>&gt; I agree that if we’re going to do it we should probably do it in Swift 3.  But it is a very convenient and useful feature that significantly lowers the bar of conforming to protocols with associated types (in many cases you can just implement the required members without thinking about the associated types).  I think we should have a more detailed and compelling story about why we’re considering this change than I see in this proposal.<br>&gt; <br>&gt; Are there any benefits users might receive from this change (assuming type checker architecture and bugs could eventually be ironed out)?  Is it actively blocking desirable new features?  If so what are they and in what way are they blocked?<br>&gt; <br>&gt; <br>&gt;&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt; <br>&gt;&gt; Remove associated type inference<br>&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt; <br>&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt; <br>&gt;&gt; Detailed Design<br>&gt;&gt; <br>&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt; <br>&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;   associatedtype Element<br>&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;     typealias Element = Int<br>&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; [The entire original message is not included.]<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/60f32d1a/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>May 25, 2016 at 11:00:00pm</p></header><div class="content"><p>I’m in favour if it simplifies the type checker, and also I kind of prefer this as I’d rather overriding/implementing methods consistently used associated types. As long as the warning is clear it shouldn’t introduce many problems, and Swift 3 is going to be a transition for most as it is anyway so getting this into Swift 3 shouldn’t represent any major additional burden to anyone.<br></p><p>I know it’s a little bit of an annoyance to declare the associated type for a generator or sequence, but perhaps we could find another way to simplify it again? Declaring basic protocol generics is something that could do with being simplified further anyway as I’d still like to see the ability to declare stuff like this some day:<br></p><p>	protocol FooType&lt;Element&gt; { … }<br>	struct Foo : FooType&lt;String&gt; { … }<br></p><p>Which I think would serve much the same purpose when it comes to eliminating associatedtype declarations. Anyway that’s a bit off topic, my point is that while it may require the extra line for now, there ought to be ways to solve that in future that don’t require such complex inference.<br></p><p>&gt; On 25 May 2016, at 22:43, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt; <br>&gt; Remove associated type inference<br>&gt; <br>&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt; <br>&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt; <br>&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt; <br>&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt; <br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/ba2757ac/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 26, 2016 at 02:00:00pm</p></header><div class="content"><p>While this has been a handy feature, I don’t mind making things more explicit, as I think it helps communication. Sometimes clarity that helps the compiler will also help the reader. It’s only really convenient when writing.<br></p><p>I would be happy with this change as long as the issue with same named generics were changed. Currently in Swift 2.2 I can’t do this:<br></p><p>struct SomeGenericGenerator&lt;Element&gt; : GeneratorType {<br>  typealias Element = Element // Error: Type alias ‘Element’ circularly references itself<br>}<br></p><p>It’s a real pain, as now I have to think up some alternate name for the generic parameter ‘Element’.<br></p><p>Whereas, with automatic inference, I can do this without the compiler complaining:<br></p><p>struct SomeGenericGenerator&lt;Element&gt; : GeneratorType {<br>  mutating func next() -&gt; Element? {<br>    return nil<br>  }<br>}<br></p><p>So I’d like to see the above `typealias Element = Element` allowed if possible.<br></p><p><br>&gt; On 26 May 2016, at 7:43 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt; <br>&gt; Remove associated type inference<br>&gt; <br>&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt; <br>&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt; <br>&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt; <br>&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt; <br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/4c7acc5d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 26, 2016 at 08:00:00am</p></header><div class="content"><p>We could have the generic type parameter always shadow the associated type.<br></p><p>&gt; On 26 May 2016, at 06:08, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt; <br>&gt; While this has been a handy feature, I don’t mind making things more explicit, as I think it helps communication. Sometimes clarity that helps the compiler will also help the reader. It’s only really convenient when writing.<br>&gt; <br>&gt; I would be happy with this change as long as the issue with same named generics were changed. Currently in Swift 2.2 I can’t do this:<br>&gt; <br>&gt; struct SomeGenericGenerator&lt;Element&gt; : GeneratorType {<br>&gt;   typealias Element = Element // Error: Type alias ‘Element’ circularly references itself<br>&gt; }<br>&gt; <br>&gt; It’s a real pain, as now I have to think up some alternate name for the generic parameter ‘Element’.<br>&gt; <br>&gt; Whereas, with automatic inference, I can do this without the compiler complaining:<br>&gt; <br>&gt; struct SomeGenericGenerator&lt;Element&gt; : GeneratorType {<br>&gt;   mutating func next() -&gt; Element? {<br>&gt;     return nil<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; So I’d like to see the above `typealias Element = Element` allowed if possible.<br>&gt; <br>&gt; <br>&gt;&gt; On 26 May 2016, at 7:43 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt; <br>&gt;&gt; Remove associated type inference<br>&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt; <br>&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt; <br>&gt;&gt; Detailed Design<br>&gt;&gt; <br>&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt; <br>&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;   associatedtype Element<br>&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt; <br>&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;     typealias Element = Int<br>&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt; }<br>&gt;&gt; Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt; <br>&gt;&gt; Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/d6df8679/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 26, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 26, 2016, at 1:21 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We could have the generic type parameter always shadow the associated type.<br></p><p>I believe there has been talk of automatically introducing an associated type corresponding to generic parameters.  I&#39;m not sure where that stands but IIRC it was someone from the core team that was considering it.<br></p><p>&gt; <br>&gt;&gt; On 26 May 2016, at 06:08, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While this has been a handy feature, I don’t mind making things more explicit, as I think it helps communication. Sometimes clarity that helps the compiler will also help the reader. It’s only really convenient when writing.<br>&gt;&gt; <br>&gt;&gt; I would be happy with this change as long as the issue with same named generics were changed. Currently in Swift 2.2 I can’t do this:<br>&gt;&gt; <br>&gt;&gt; struct SomeGenericGenerator&lt;Element&gt; : GeneratorType {<br>&gt;&gt;   typealias Element = Element // Error: Type alias ‘Element’ circularly references itself<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It’s a real pain, as now I have to think up some alternate name for the generic parameter ‘Element’.<br>&gt;&gt; <br>&gt;&gt; Whereas, with automatic inference, I can do this without the compiler complaining:<br>&gt;&gt; <br>&gt;&gt; struct SomeGenericGenerator&lt;Element&gt; : GeneratorType {<br>&gt;&gt;   mutating func next() -&gt; Element? {<br>&gt;&gt;     return nil<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; So I’d like to see the above `typealias Element = Element` allowed if possible.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 26 May 2016, at 7:43 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Remove associated type inference<br>&gt;&gt;&gt; Proposal: SE-XXXX<br>&gt;&gt;&gt; Author: David Hart, Douglas Gregor<br>&gt;&gt;&gt; Status: TBD<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt;&gt;&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Detailed Design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol IteratorProtocol {<br>&gt;&gt;&gt;   associatedtype Element<br>&gt;&gt;&gt;   mutating func next() -&gt; Element?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct IntIterator : IteratorProtocol {<br>&gt;&gt;&gt;     typealias Element = Int<br>&gt;&gt;&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; Impact on Existing Code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternatives Considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/c3e46a40/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 26, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On May 25, 2016, at 11:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt; <br>&gt; Remove associated type inference<br>&gt; Proposal: SE-XXXX<br>&gt; Author: David Hart, Douglas Gregor<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto:<br>&gt; <br>&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt; <br>&gt; Detailed Design<br>&gt; <br>&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt; <br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt; <br></p><p>From a purely english syntax viewpoint, i would prefer the error to be along the lines of<br></p><p>&gt; IntIterator is missing a declaration for the Element associated type<br>&gt; <br>Or <br></p><p>&gt; IntIterator is missing a declaration for its Element associated type<br>&gt; <br></p><p>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt; Impact on Existing Code<br>&gt; <br>&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt; <br>&gt; Alternatives Considered<br>&gt; <br>&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/6baa64cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 26, 2016 at 01:00:00pm</p></header><div class="content"><p>On Thu, May 26, 2016 at 12:47 PM, L. Mihalkovic via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On May 25, 2016, at 11:43 PM, David Hart via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Here’s a pitch for removing associated type inference as per the Generics<br>&gt; Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt;<br>&gt; Remove associated type inference<br>&gt;<br>&gt;    - Proposal: SE-XXXX<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt;    - Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor<br>&gt;    &lt;https://github.com/DougGregor&gt;<br>&gt;    - Status: TBD<br>&gt;    - Review manager: TBD<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;<br>&gt; Introduction<br>&gt;<br>&gt; This proposal seeks to remove the inference of associated types in types<br>&gt; conforming to protocols.<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;<br>&gt; Motivation<br>&gt;<br>&gt; Even if associated types inference in a useful feature, it is also a big<br>&gt; source of bugs in the compiler. This proposal argues that the usefulness<br>&gt; does not outweight its architectural complexity. As per the Generics<br>&gt; Manifesto<br>&gt; &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt;<br>&gt; associated type inference is the only place in Swift where we have a<br>&gt; global type inference problem: it has historically been a major source of<br>&gt; bugs, and implementing it fully and correctly requires a drastically<br>&gt; different architecture to the type checker.<br>&gt;<br>&gt; Because this is a breaking change, it would be beneficial to implement it<br>&gt; for Swift 3.<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed<br>&gt; Design<br>&gt;<br>&gt; The proposal would remove associated type inference and make code which<br>&gt; relied on it invalid:<br>&gt;<br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt;<br>&gt; The compiler would generate an error message stating: error: IntIterator<br>&gt; is missing its Element associated type declaration. The code would have<br>&gt; to be modified as follows to fix the error:<br>&gt;<br>&gt;<br>&gt; From a purely english syntax viewpoint, i would prefer the error to be<br>&gt; along the lines of<br>&gt;<br>&gt; IntIterator is missing a declaration for the Element associated type<br>&gt;<br>&gt; Or<br>&gt;<br>&gt; IntIterator is missing a declaration for its Element associated type<br>&gt;<br>&gt; Clearer still:<br>&quot;IntIterator is missing a declaration for its associated type Element&quot;<br></p><p><br>&gt;<br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact<br>&gt; on Existing Code<br>&gt;<br>&gt; This is a breaking change that will require conforming types which relied<br>&gt; on the inference, including in the Standard Library, to explicitly declare<br>&gt; associated types. A Fix-It could be introduced to add the typealias and<br>&gt; leave the type to be filled in. That way, all the type inference could be<br>&gt; removed from the compiler.<br>&gt;<br>&gt; &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;Alternatives<br>&gt; Considered<br>&gt; The only alternative is to keep the inference with the known consequences<br>&gt; on the compiler.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/f0fd7740/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch] Remove associated type inference</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 26, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m inclined to say -1, for reasons that’ve already been mentioned, but can anyone elaborate on “a drastically different architecture to the type checker”?<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 25, 2016, at 4:43 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a pitch for removing associated type inference as per the Generics Manifesto. If we want to do it, we’d better do it before Swift 3:<br>&gt; <br>&gt; Remove associated type inference<br>&gt; <br>&gt; Proposal: SE-XXXX &lt;https://github.com/apple/swift-evolution/blob/master/proposals/XXXX-remove-associated-type-inference.md&gt;<br>&gt; Author: David Hart &lt;https://github.com/hartbit&gt;, Douglas Gregor &lt;https://github.com/DougGregor&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal seeks to remove the inference of associated types in types conforming to protocols.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#motivation&gt;Motivation<br>&gt; <br>&gt; Even if associated types inference in a useful feature, it is also a big source of bugs in the compiler. This proposal argues that the usefulness does not outweight its architectural complexity. As per the Generics Manifesto &lt;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md&gt;:<br>&gt; <br>&gt; associated type inference is the only place in Swift where we have a global type inference problem: it has historically been a major source of bugs, and implementing it fully and correctly requires a drastically different architecture to the type checker.<br>&gt; Because this is a breaking change, it would be beneficial to implement it for Swift 3. <br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#detailed-design&gt;Detailed Design<br>&gt; <br>&gt; The proposal would remove associated type inference and make code which relied on it invalid:<br>&gt; <br>&gt; protocol IteratorProtocol {<br>&gt;   associatedtype Element<br>&gt;   mutating func next() -&gt; Element?<br>&gt; }<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;   mutating func next() -&gt; Int? { ... }  // used to infer Element = Int<br>&gt; }<br>&gt; The compiler would generate an error message stating: error: IntIterator is missing its Element associated type declaration. The code would have to be modified as follows to fix the error:<br>&gt; <br>&gt; struct IntIterator : IteratorProtocol {<br>&gt;     typealias Element = Int<br>&gt;     mutating func next() -&gt; Int? { return nil }  // used to infer Element = Int<br>&gt; }<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; This is a breaking change that will require conforming types which relied on the inference, including in the Standard Library, to explicitly declare associated types. A Fix-It could be introduced to add the typealias and leave the type to be filled in. That way, all the type inference could be removed from the compiler.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/blob/remove-associated-type-inference/proposals/XXXX-remove-associated-type-inference.md#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; The only alternative is to keep the inference with the known consequences on the compiler.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/bf426c04/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
