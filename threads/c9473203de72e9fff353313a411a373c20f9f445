<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  8, 2016 at 08:00:00pm</p></header><div class="content"><p>This is a really strong argument in my opinion. If we don’t add a `while` to for loops, then in some situations we will have to rewrite a `where` clause to something potentially less elegant, given that we don’t want to give up performance.<br></p><p>&gt; IMO `.prefix` is just not the equal alternative for as proposed `while` :<br>&gt; in case of &#39;while&#39; expression `number&lt;4_000_000` will be calculated<br>&gt; *only* for those who `number % 2 == 0`. In case of `prefix` - the<br>&gt; expression will be processed for each `number` and only after this filtered<br>&gt; by `number % 2`. Let&#39;s assume we need to check for some<br>&gt; veryExpensiveTest(number):<br>&gt; <br>&gt; for number in fibonacci where number % 2 == 0 while<br>&gt; veryExpensiveTest(number) {}<br>&gt; <br>&gt; let numbers = fibonacci.prefix { veryExpensiveTest($0) }<br>&gt; for number in numbers where number % 2 == 0 {}<br>&gt; <br>&gt; So, `while` for `for` loops just can&#39;t be always replaced with `prefix`<br>&gt; <br>&gt; On 08.06.2016 2:02, Xiaodi Wu via swift-evolution wrote:<br>&gt; &gt; On Tue, Jun 7, 2016 at 5:11 PM, Tim Vermeulen&lt;tvermeulen at me.com<br>&gt; &gt; &lt;mailto:tvermeulen at me.com&gt;&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; I’ve been thinking about this for a bit now, and I think it would make<br>&gt; &gt; most sense to evaluate these clauses from left to right. However, cases<br>&gt; &gt; where the order matters are very uncommon, and I would rather have the<br>&gt; &gt; power to choose which clause is evaluated first than to have a forced<br>&gt; &gt; default order. Either way I don’t see this as a reason not to allow<br>&gt; &gt; combining the two clauses because IMO it can lead to some very clean<br>&gt; &gt; code. For instance, say we want to loop through all even fibonacci<br>&gt; &gt; numbers below 4 million (see problem #2 from project euler), we could<br>&gt; &gt; do this:<br>&gt; &gt; <br>&gt; &gt; `for number in fibonacci where number % 2 == 0 while number&lt;4_000_000<br>&gt; &gt; { }`<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; This statement looks like spaghetti to me. I would not at all support<br>&gt; &gt; extending the language to permit it. Do you really think it&#39;s more readable<br>&gt; &gt; than going step-by-step?<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; &gt; for number in numbers where number % 2 == 0 {<br>&gt; &gt; // ...<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; or just:<br>&gt; &gt; <br>&gt; &gt; ```<br>&gt; &gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; &gt; let evens = numbers.filter { $0 % 2 == 0 }<br>&gt; &gt; for number in evens {<br>&gt; &gt; // ...<br>&gt; &gt; }<br>&gt; &gt; ```<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; I could have ordered the two clauses in any way I want. If combining<br>&gt; &gt; the clauses weren’t allowed, I’d have to put (at least) one of them<br>&gt; &gt; inside the block, which would be a (minor) pain.<br>&gt; &gt; <br>&gt; &gt; I don’t currently have a very strong opinion about the order of<br>&gt; &gt; evaluation, so I might be convinced otherwise. But combining the two<br>&gt; &gt; clauses is so powerful that I don’t think it’s worth to get rid of just<br>&gt; &gt; because of an edge case.<br>&gt; &gt; <br>&gt; &gt; &gt; It may be workable if you can have only one or the other, but mixing and matching them as proposed above would be a world of hurt:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; for foo in bar where condition1 while condition2 { ... }<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; If condition1 and condition2 both evaluate to true, then whether you continue or break would depend on the relative order of where and while; for generality, you would want to allow both `for...in...where...while` and `for...in...while...where`, and likely `for...in...while...where...while`, etc. There is nothing in the meaning of those words that would suggest that `while...where` behaves differently from `where...while`, etc. This is why words like &quot;break&quot; and &quot;continue&quot; are IMO far superior.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun&lt;erica at ericasadun.com<br>&gt; &gt; &lt;mailto:erica at ericasadun.com&gt;(mailto:erica at ericasadun.com<br>&gt; &gt; &lt;mailto:erica at ericasadun.com&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org<br>&gt; &gt; &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; &gt; The meaning of the proposed while is not at all a pair for where, since where clauses in while loops would do the same thing as while clauses in for loops. That&#39;s crazy.<br>&gt; &gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; &gt; It sounds crazy, but it’s the nature of the while loop. A where clause in a while loop also has a different result than a where clause in a for loop.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; The where_clause appears in the for in statement<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression where_clause? code_block<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; It&#39;s syntactic sugar because the expression can be already be limited through functional chaining of some sort or another. At the same time, it&#39;s nice and pleasant to have `where` and I&#39;m not itching to throw it out. The same courtesy could be easily extend to `when` (because I don&#39;t really want to use the `while` keyword here, but I could easily be convinced otherwise because I don&#39;t have a strong stance either way):<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression (where_clause | when_clause)? code_block<br>&gt; &gt; &gt; &gt; when_clause : &#39;when&#39; expression<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; and again it could be nice and pleasant to have, although not necessary. The question comes down to how much does the language benefit by this sugar.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; I&#39;d say that in both cases, combining chaining and statements is<br>&gt; &gt; marginallyless goodthan either using standalone chaining or statements<br>&gt; &gt; without chaining. But as I say this, I know as a fact, I fully intend<br>&gt; &gt; to use `sequence(_:, next:).take(while:)` with for0in statements, so<br>&gt; &gt; I&#39;m starting from a hypocritical vantage point.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; -- E<br>&gt; &gt; &gt; &gt; p.s. Sorry, wux<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  8, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Jun 8, 2016 at 1:35 PM, Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is a really strong argument in my opinion. If we don’t add a `while`<br>&gt; to for loops, then in some situations we will have to rewrite a `where`<br>&gt; clause to something potentially less elegant, given that we don’t want to<br>&gt; give up performance.<br>&gt;<br></p><p>I disagree. I argue that what you call &quot;less elegant&quot;, namely if (or guard)<br>inside the loop, is the most elegant solution.<br></p><p><br>&gt;<br>&gt; &gt; IMO `.prefix` is just not the equal alternative for as proposed `while` :<br>&gt; &gt; in case of &#39;while&#39; expression `number&lt;4_000_000` will be calculated<br>&gt; &gt; *only* for those who `number % 2 == 0`. In case of `prefix` - the<br>&gt; &gt; expression will be processed for each `number` and only after this<br>&gt; filtered<br>&gt; &gt; by `number % 2`. Let&#39;s assume we need to check for some<br>&gt; &gt; veryExpensiveTest(number):<br>&gt; &gt;<br>&gt; &gt; for number in fibonacci where number % 2 == 0 while<br>&gt; &gt; veryExpensiveTest(number) {}<br>&gt; &gt;<br>&gt; &gt; let numbers = fibonacci.prefix { veryExpensiveTest($0) }<br>&gt; &gt; for number in numbers where number % 2 == 0 {}<br>&gt; &gt;<br>&gt; &gt; So, `while` for `for` loops just can&#39;t be always replaced with `prefix`<br>&gt; &gt;<br>&gt; &gt; On 08.06.2016 2:02, Xiaodi Wu via swift-evolution wrote:<br>&gt; &gt; &gt; On Tue, Jun 7, 2016 at 5:11 PM, Tim Vermeulen&lt;tvermeulen at me.com<br>&gt; &gt; &gt; &lt;mailto:tvermeulen at me.com&gt;&gt;wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I’ve been thinking about this for a bit now, and I think it would make<br>&gt; &gt; &gt; most sense to evaluate these clauses from left to right. However, cases<br>&gt; &gt; &gt; where the order matters are very uncommon, and I would rather have the<br>&gt; &gt; &gt; power to choose which clause is evaluated first than to have a forced<br>&gt; &gt; &gt; default order. Either way I don’t see this as a reason not to allow<br>&gt; &gt; &gt; combining the two clauses because IMO it can lead to some very clean<br>&gt; &gt; &gt; code. For instance, say we want to loop through all even fibonacci<br>&gt; &gt; &gt; numbers below 4 million (see problem #2 from project euler), we could<br>&gt; &gt; &gt; do this:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; `for number in fibonacci where number % 2 == 0 while number&lt;4_000_000<br>&gt; &gt; &gt; { }`<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; This statement looks like spaghetti to me. I would not at all support<br>&gt; &gt; &gt; extending the language to permit it. Do you really think it&#39;s more<br>&gt; readable<br>&gt; &gt; &gt; than going step-by-step?<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; &gt; &gt; for number in numbers where number % 2 == 0 {<br>&gt; &gt; &gt; // ...<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; or just:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt; let numbers = fibonacci.prefix { $0&lt;4_000_000 }<br>&gt; &gt; &gt; let evens = numbers.filter { $0 % 2 == 0 }<br>&gt; &gt; &gt; for number in evens {<br>&gt; &gt; &gt; // ...<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; ```<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I could have ordered the two clauses in any way I want. If combining<br>&gt; &gt; &gt; the clauses weren’t allowed, I’d have to put (at least) one of them<br>&gt; &gt; &gt; inside the block, which would be a (minor) pain.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I don’t currently have a very strong opinion about the order of<br>&gt; &gt; &gt; evaluation, so I might be convinced otherwise. But combining the two<br>&gt; &gt; &gt; clauses is so powerful that I don’t think it’s worth to get rid of just<br>&gt; &gt; &gt; because of an edge case.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; It may be workable if you can have only one or the other, but mixing<br>&gt; and matching them as proposed above would be a world of hurt:<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; ```<br>&gt; &gt; &gt; &gt; for foo in bar where condition1 while condition2 { ... }<br>&gt; &gt; &gt; &gt; ```<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; If condition1 and condition2 both evaluate to true, then whether you<br>&gt; continue or break would depend on the relative order of where and while;<br>&gt; for generality, you would want to allow both `for...in...where...while` and<br>&gt; `for...in...while...where`, and likely `for...in...while...where...while`,<br>&gt; etc. There is nothing in the meaning of those words that would suggest that<br>&gt; `while...where` behaves differently from `where...while`, etc. This is why<br>&gt; words like &quot;break&quot; and &quot;continue&quot; are IMO far superior.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun&lt;erica at ericasadun.com<br>&gt; &gt; &gt; &lt;mailto:erica at ericasadun.com&gt;(mailto:erica at ericasadun.com<br>&gt; &gt; &gt; &lt;mailto:erica at ericasadun.com&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; &gt; On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org<br>&gt; &gt; &gt; &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; The meaning of the proposed while is not at all a pair for<br>&gt; where, since where clauses in while loops would do the same thing as while<br>&gt; clauses in for loops. That&#39;s crazy.<br>&gt; &gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; &gt; It sounds crazy, but it’s the nature of the while loop. A where<br>&gt; clause in a while loop also has a different result than a where clause in a<br>&gt; for loop.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; The where_clause appears in the for in statement<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression<br>&gt; where_clause? code_block<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; It&#39;s syntactic sugar because the expression can be already be<br>&gt; limited through functional chaining of some sort or another. At the same<br>&gt; time, it&#39;s nice and pleasant to have `where` and I&#39;m not itching to throw<br>&gt; it out. The same courtesy could be easily extend to `when` (because I don&#39;t<br>&gt; really want to use the `while` keyword here, but I could easily be<br>&gt; convinced otherwise because I don&#39;t have a strong stance either way):<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression<br>&gt; (where_clause | when_clause)? code_block<br>&gt; &gt; &gt; &gt; &gt; when_clause : &#39;when&#39; expression<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; and again it could be nice and pleasant to have, although not<br>&gt; necessary. The question comes down to how much does the language benefit by<br>&gt; this sugar.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; I&#39;d say that in both cases, combining chaining and statements is<br>&gt; &gt; &gt; marginallyless goodthan either using standalone chaining or statements<br>&gt; &gt; &gt; without chaining. But as I say this, I know as a fact, I fully intend<br>&gt; &gt; &gt; to use `sequence(_:, next:).take(while:)` with for0in statements, so<br>&gt; &gt; &gt; I&#39;m starting from a hypocritical vantage point.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; -- E<br>&gt; &gt; &gt; &gt; &gt; p.s. Sorry, wux<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/b9714da6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
