<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 28, 2016 at 11:00:00pm</p></header><div class="content"><p>on Tue Jun 28 2016, Hooman Mehr &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; How about we get rid of dynamicType by adding instance level properties as well:<br>&gt;<br>&gt; public struct MemoryLayout&lt;T&gt; {<br>&gt;<br>&gt;     public static var size: Int { return sizeof(T) }<br>&gt;     public static var interval: Int { return strideof(T) }<br>&gt;     public static var alignment: Int { return alignof(T) }<br>&gt;<br>&gt;     public var size: Int { return sizeof(T) }<br>&gt;     public var interval: Int { return strideof(T) }<br>&gt;     public var alignment: Int { return alignof(T) }<br>&gt;<br>&gt;     init(_ : @autoclosure () -&gt; T) {}<br>&gt; }<br>&gt;<br>&gt; print(MemoryLayout&lt;Int&gt;.size) // 8<br>&gt; print(MemoryLayout&lt;Int&gt;.interval) // 8<br>&gt; print(MemoryLayout&lt;Int&gt;.alignment) // 8<br>&gt;<br>&gt; let x = 8<br>&gt;<br>&gt; print(MemoryLayout(x).size) // 8<br>&gt; print(MemoryLayout(x).interval) // 8<br>&gt; print(MemoryLayout(x).alignment) // 8<br></p><p>My worry is that people will write <br></p><p>  MemoryLayout(Int.self).size <br></p><p>when they mean<br></p><p>  MemoryLayout&lt;Int&gt;.size <br>     <br>(often because for some reason they don&#39;t like angle brackets).<br></p><p>I prefer to make the uncommon case much harder to write.<br></p><p>&gt;<br>&gt;&gt; On Jun 28, 2016, at 5:08 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Jun 28 2016, Brandon Knope &lt;bknope-AT-me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Isn&#39;t dynamicType possibly changing soon to a method?<br>&gt;&gt; <br>&gt;&gt; A free function, I think.<br>&gt;&gt; <br>&gt;&gt;&gt; This could look much different<br>&gt;&gt; <br>&gt;&gt; Yes, It will be uglier.  But this very uncommon case is not important to<br>&gt;&gt; optimize for beauty.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 05:00:00am</p></header><div class="content"><p>Would adding a &quot;init(_: T.self) {...}&quot; solve that issue?<br></p><p>- Dave Sweeris<br></p><p>Sent from my iPhone<br></p><p>&gt; On Jun 29, 2016, at 01:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My worry is that people will write <br>&gt; <br>&gt;  MemoryLayout(Int.self).size <br>&gt; <br>&gt; when they mean<br>&gt; <br>&gt;  MemoryLayout&lt;Int&gt;.size <br>&gt; <br>&gt; (often because for some reason they don&#39;t like angle brackets).<br>&gt; <br>&gt; I prefer to make the uncommon case much harder to write.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 29, 2016 at 10:00:00am</p></header><div class="content"><p>on Wed Jun 29 2016, David Sweeris &lt;davesweeris-AT-mac.com&gt; wrote:<br></p><p>&gt; Would adding a &quot;init(_: T.self) {...}&quot; solve that issue?<br>&gt;<br></p><p>? I don&#39;t see how.<br></p><p>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt;&gt; On Jun 29, 2016, at 01:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; My worry is that people will write <br>&gt;&gt; <br>&gt;&gt;  MemoryLayout(Int.self).size <br>&gt;&gt; <br>&gt;&gt; when they mean<br>&gt;&gt; <br>&gt;&gt;  MemoryLayout&lt;Int&gt;.size <br>&gt;&gt; <br>&gt;&gt; (often because for some reason they don&#39;t like angle brackets).<br>&gt;&gt; <br>&gt;&gt; I prefer to make the uncommon case much harder to write.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 04:00:00pm</p></header><div class="content"><p>(While I was typing this up, I realized that the exact usage you’re worried about, “MemoryLayout(Int.self).size” won’t compile, since `MemoryLayout` currently doesn’t have instance properties. If you’re worried about someone incorrectly typing out “MemoryLayout(Int.self).dynamicType.size”, though…)<br></p><p>I made a rather critical typo in my earlier reply. It should’ve been “init(_: T.Type)”, instead of “init(_: T.self)”, which is to say this:<br>extension MemoryLayout { // assuming `MemoryLayout&lt;T&gt;` is already defined as proposed<br>    public init(_ : T.Type) {} // makes it so that `MemoryLayout(T.self)` still has the correct type for `T`<br>}<br></p><p>Here are the results of some quick playgrounding in the WWDC Xcode 8 beta:<br>// without `init(_ : T.Type)` defined<br>MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>MemoryLayout(Int8.self).dynamicType.size      // 8, almost certainly wrong<br>//MemoryLayout(Int8).dynamicType.size           // error<br>MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly worded<br>//MemoryLayout(Int8.Type).dynamicType.size      // error<br></p><p>// with `init(_ : T.Type)` defined<br>MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>MemoryLayout(Int8.self).dynamicType.size      // 1, almost certainly correct<br>MemoryLayout(Int8).dynamicType.size           // 1, almost certainly correct<br>MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly worded<br>MemoryLayout(Int8.Type).dynamicType.size      // 8, correct<br></p><p>The only value that changes (aside from the errors) is the one “typo” that you were worried about.<br></p><p>Do this change your mind? <br></p><p><br></p><p>On Jun 29, 2016, at 12:34 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Jun 29 2016, David Sweeris &lt;davesweeris-AT-mac.com&gt; wrote:<br>&gt; <br>&gt;&gt; Would adding a &quot;init(_: T.self) {...}&quot; solve that issue?<br>&gt;&gt; <br>&gt; <br>&gt; ? I don&#39;t see how.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 29, 2016, at 01:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My worry is that people will write <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; MemoryLayout(Int.self).size <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; when they mean<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (often because for some reason they don&#39;t like angle brackets).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I prefer to make the uncommon case much harder to write.<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p><br>- Dave Sweeris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/fda000f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 29, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, Jun 29, 2016 at 4:29 PM, David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; (While I was typing this up, I realized that the exact usage you’re<br>&gt; worried about, “MemoryLayout(Int.self).size” won’t compile, since<br>&gt; `MemoryLayout` currently doesn’t have instance properties. If you’re<br>&gt; worried about someone incorrectly typing out<br>&gt; “MemoryLayout(Int.self).dynamicType.size”, though…)<br>&gt;<br>&gt; I made a rather critical typo in my earlier reply. It should’ve been<br>&gt; “init(_: T.Type)”, instead of “init(_: T.self)”, which is to say this:<br>&gt; extension MemoryLayout { // assuming `MemoryLayout&lt;T&gt;` is already defined<br>&gt; as proposed<br>&gt;     public init(_ : T.Type) {} // makes it so that `MemoryLayout(T.self)`<br>&gt; still has the correct type for `T`<br>&gt; }<br>&gt;<br>&gt; Here are the results of some quick playgrounding in the WWDC Xcode 8 beta:<br>&gt; // without `init(_ : T.Type)` defined<br>&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt; MemoryLayout(Int8.self).dynamicType.size      // 8, almost certainly wrong<br>&gt; //MemoryLayout(Int8).dynamicType.size           // error<br>&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly<br>&gt; worded<br>&gt; //MemoryLayout(Int8.Type).dynamicType.size      // error<br>&gt;<br>&gt; // with `init(_ : T.Type)` defined<br>&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt; MemoryLayout(Int8.self).dynamicType.size      // 1, almost certainly<br>&gt; correct<br>&gt; MemoryLayout(Int8).dynamicType.size           // 1, almost certainly<br>&gt; correct<br>&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly<br>&gt; worded<br>&gt; MemoryLayout(Int8.Type).dynamicType.size      // 8, correct<br>&gt;<br>&gt; The only value that changes (aside from the errors) is the one “typo” that<br>&gt; you were worried about.<br>&gt;<br>&gt; Do this change your mind?<br>&gt;<br></p><p>These examples make no sense to me. Why are we asking for the size of the<br>dynamicType of MemoryLayout?<br></p><p><br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 29, 2016, at 12:34 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; on Wed Jun 29 2016, David Sweeris &lt;davesweeris-AT-mac.com<br>&gt; &lt;http://davesweeris-at-mac.com&gt;&gt; wrote:<br>&gt;<br>&gt; Would adding a &quot;init(_: T.self) {...}&quot; solve that issue?<br>&gt;<br>&gt;<br>&gt; ? I don&#39;t see how.<br>&gt;<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Jun 29, 2016, at 01:54, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; My worry is that people will write<br>&gt;<br>&gt; MemoryLayout(Int.self).size<br>&gt;<br>&gt; when they mean<br>&gt;<br>&gt; MemoryLayout&lt;Int&gt;.size<br>&gt;<br>&gt; (often because for some reason they don&#39;t like angle brackets).<br>&gt;<br>&gt; I prefer to make the uncommon case much harder to write.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/358badba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 04:00:00pm</p></header><div class="content"><p>That’s the “as proposed” usage for getting the size of a value (from https://gist.github.com/erica/57a64163870486468180b8bab8a6294e) <br>// Types<br>MemoryLayout&lt;Int&gt;.size // 8 <br>MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>MemoryLayout&lt;Int&gt;.alignment // 8<br></p><p>// Value<br>let x: UInt8 = 5<br>MemoryLayout(x).dynamicType.size // 1<br>MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>MemoryLayout(29.2).dynamicType.alignment // 8<br></p><p><br>At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jun 29, 2016, at 4:36 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wed, Jun 29, 2016 at 4:29 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; (While I was typing this up, I realized that the exact usage you’re worried about, “MemoryLayout(Int.self).size” won’t compile, since `MemoryLayout` currently doesn’t have instance properties. If you’re worried about someone incorrectly typing out “MemoryLayout(Int.self).dynamicType.size”, though…)<br>&gt; <br>&gt; I made a rather critical typo in my earlier reply. It should’ve been “init(_: T.Type)”, instead of “init(_: T.self)”, which is to say this:<br>&gt; extension MemoryLayout { // assuming `MemoryLayout&lt;T&gt;` is already defined as proposed<br>&gt;     public init(_ : T.Type) {} // makes it so that `MemoryLayout(T.self)` still has the correct type for `T`<br>&gt; }<br>&gt; <br>&gt; Here are the results of some quick playgrounding in the WWDC Xcode 8 beta:<br>&gt; // without `init(_ : T.Type)` defined<br>&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt; MemoryLayout(Int8.self).dynamicType.size      // 8, almost certainly wrong<br>&gt; //MemoryLayout(Int8).dynamicType.size           // error<br>&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly worded<br>&gt; //MemoryLayout(Int8.Type).dynamicType.size      // error<br>&gt; <br>&gt; // with `init(_ : T.Type)` defined<br>&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt; MemoryLayout(Int8.self).dynamicType.size      // 1, almost certainly correct<br>&gt; MemoryLayout(Int8).dynamicType.size           // 1, almost certainly correct<br>&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly worded<br>&gt; MemoryLayout(Int8.Type).dynamicType.size      // 8, correct<br>&gt; <br>&gt; The only value that changes (aside from the errors) is the one “typo” that you were worried about.<br>&gt; <br>&gt; Do this change your mind? <br>&gt; <br>&gt; These examples make no sense to me. Why are we asking for the size of the dynamicType of MemoryLayout?<br>&gt;  <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Jun 29, 2016, at 12:34 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Jun 29 2016, David Sweeris &lt;davesweeris-AT-mac.com &lt;http://davesweeris-at-mac.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Would adding a &quot;init(_: T.self) {...}&quot; solve that issue?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ? I don&#39;t see how.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 29, 2016, at 01:54, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My worry is that people will write <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; MemoryLayout(Int.self).size <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; when they mean<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (often because for some reason they don&#39;t like angle brackets).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I prefer to make the uncommon case much harder to write.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt; <br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/1568c742/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 29, 2016 at 04:00:00pm</p></header><div class="content"><p>On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e)<br>&gt;<br>&gt; // Types<br>&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt; // Valuelet x: UInt8 = 5<br>&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;<br>&gt;<br>&gt;<br>&gt; At least, I *thought* that was the latest version of the proposal. Maybe<br>&gt; I’ve gotten confused.<br>&gt;<br></p><p>There must be a typo in these examples. `MemoryLayout(x.dynamicType).size`<br>perhaps?<br></p><p><br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt;<br>&gt; On Jun 29, 2016, at 4:36 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 29, 2016 at 4:29 PM, David Sweeris via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; (While I was typing this up, I realized that the exact usage you’re<br>&gt;&gt; worried about, “MemoryLayout(Int.self).size” won’t compile, since<br>&gt;&gt; `MemoryLayout` currently doesn’t have instance properties. If you’re<br>&gt;&gt; worried about someone incorrectly typing out<br>&gt;&gt; “MemoryLayout(Int.self).dynamicType.size”, though…)<br>&gt;&gt;<br>&gt;&gt; I made a rather critical typo in my earlier reply. It should’ve been<br>&gt;&gt; “init(_: T.Type)”, instead of “init(_: T.self)”, which is to say this:<br>&gt;&gt; extension MemoryLayout { // assuming `MemoryLayout&lt;T&gt;` is already<br>&gt;&gt; defined as proposed<br>&gt;&gt;     public init(_ : T.Type) {} // makes it so that<br>&gt;&gt; `MemoryLayout(T.self)` still has the correct type for `T`<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Here are the results of some quick playgrounding in the WWDC Xcode 8 beta:<br>&gt;&gt; // without `init(_ : T.Type)` defined<br>&gt;&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt;&gt; MemoryLayout(Int8.self).dynamicType.size      // 8, almost certainly<br>&gt;&gt; wrong<br>&gt;&gt; //MemoryLayout(Int8).dynamicType.size           // error<br>&gt;&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt;&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt;&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is<br>&gt;&gt; oddly worded<br>&gt;&gt; //MemoryLayout(Int8.Type).dynamicType.size      // error<br>&gt;&gt;<br>&gt;&gt; // with `init(_ : T.Type)` defined<br>&gt;&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt;&gt; MemoryLayout(Int8.self).dynamicType.size      // 1, almost certainly<br>&gt;&gt; correct<br>&gt;&gt; MemoryLayout(Int8).dynamicType.size           // 1, almost certainly<br>&gt;&gt; correct<br>&gt;&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt;&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt;&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is<br>&gt;&gt; oddly worded<br>&gt;&gt; MemoryLayout(Int8.Type).dynamicType.size      // 8, correct<br>&gt;&gt;<br>&gt;&gt; The only value that changes (aside from the errors) is the one “typo”<br>&gt;&gt; that you were worried about.<br>&gt;&gt;<br>&gt;&gt; Do this change your mind?<br>&gt;&gt;<br>&gt;<br>&gt; These examples make no sense to me. Why are we asking for the size of the<br>&gt; dynamicType of MemoryLayout?<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 29, 2016, at 12:34 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; on Wed Jun 29 2016, David Sweeris &lt;davesweeris-AT-mac.com<br>&gt;&gt; &lt;http://davesweeris-at-mac.com/&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Would adding a &quot;init(_: T.self) {...}&quot; solve that issue?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ? I don&#39;t see how.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On Jun 29, 2016, at 01:54, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; My worry is that people will write<br>&gt;&gt;<br>&gt;&gt; MemoryLayout(Int.self).size<br>&gt;&gt;<br>&gt;&gt; when they mean<br>&gt;&gt;<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size<br>&gt;&gt;<br>&gt;&gt; (often because for some reason they don&#39;t like angle brackets).<br>&gt;&gt;<br>&gt;&gt; I prefer to make the uncommon case much harder to write.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - Dave Sweeris<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/0dd9bf52/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 29, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 29, 2016, at 4:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br></p><p>Dunno if it’s intentional or not. Hooman Mehr already suggested we add instance properties:<br>&gt; On Jun 28, 2016, at 8:27 PM, Hooman Mehr via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How about we get rid of dynamicType by adding instance level properties as well:<br>&gt; <br>&gt; public struct MemoryLayout&lt;T&gt; {<br>&gt;     <br>&gt;     public static var size: Int { return sizeof(T) }<br>&gt;     public static var interval: Int { return strideof(T) }<br>&gt;     public static var alignment: Int { return alignof(T) }<br>&gt;     <br>&gt;     public var size: Int { return sizeof(T) }<br>&gt;     public var interval: Int { return strideof(T) }<br>&gt;     public var alignment: Int { return alignof(T) }<br>&gt;     <br>&gt;     init(_ : @autoclosure () -&gt; T) {}<br>&gt; }<br>&gt; <br>&gt; print(MemoryLayout&lt;Int&gt;.size) // 8<br>&gt; print(MemoryLayout&lt;Int&gt;.interval) // 8<br>&gt; print(MemoryLayout&lt;Int&gt;.alignment) // 8<br>&gt; <br>&gt; let x = 8<br>&gt; <br>&gt; print(MemoryLayout(x).size) // 8<br>&gt; print(MemoryLayout(x).interval) // 8<br>&gt; print(MemoryLayout(x).alignment) // 8<br></p><p><br>Doing that makes that list look like this:<br>MemoryLayout&lt;Int8&gt;.size           // 1, correct<br>MemoryLayout(Int8.self).size      // 1, almost certainly correct<br>MemoryLayout(Int8).size           // 1, almost certainly correct<br>MemoryLayout(0 as Int8).size      // 1, correct<br>MemoryLayout&lt;Int8.Type&gt;.size      // 8, correct<br>MemoryLayout(Int8.Type.self).size // 8, correct, but is oddly worded<br>MemoryLayout(Int8.Type).size      // 8, correct<br></p><p>I thought of something else… if we had a way to intentionally trigger a compile-time error in code that’s otherwise correct, we could define the `init(_: T.self)` function like this:<br>extension MemoryLayout {<br>    public init(_ : T.Type) { #throwErrorIfReached(&quot;Incorrect Usage... NOCOMPILINGFORYOU!!!&quot;) }<br>}<br></p><p>Then the list of statements which compile would be much simpler:<br>let x: Int8 = 0<br>MemoryLayout&lt;Int8&gt;.size      // 1, correct and unambiguous<br>MemoryLayout(x).size         // 1, correct and unambiguous (assuming the instance properties are added)<br>MemoryLayout&lt;Int8.Type&gt;.size // 8, correct and unambiguous<br></p><p>But that’s its own proposal, and one I’m not sure is worth making.<br></p><p>- Dave Sweeris<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/f5af2586/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 29, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt; That’s the “as proposed” usage for getting the size of a value (from https://gist.github.com/erica/57a64163870486468180b8bab8a6294e &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;) <br>&gt; // Types<br>&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt; <br>&gt; // Value<br>&gt; let x: UInt8 = 5<br>&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt; <br>&gt; <br>&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt; <br>&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br></p><p>I have listened. I have updated.<br></p><p>https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br></p><p>// Types<br>MemoryLayout&lt;Int&gt;.size // 8<br>MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>MemoryLayout&lt;Int&gt;.alignment // 8<br></p><p>// Value<br>let x: UInt8 = 5<br>MemoryLayout.of(x).size // 1<br>MemoryLayout.of(1).size // 8<br>MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>MemoryLayout.of(29.2).alignment // 8<br></p><p><br>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/79da23f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June 29, 2016 at 08:00:00pm</p></header><div class="content"><p>I&#39;m not sure this bikeshed is the right color yet.<br></p><p>How does the user remember the distinction between MemoryLayout&lt;Int&gt; and<br>MemoryLayout.of(Int) ? To keep it clear, how about ofValue() rather than<br>of() ?<br></p><p>Also, could the implementation be simply<br></p><p>    static func ofValue(_ value: @autoclosure () -&gt; T) -&gt;<br>MemoryLayout&lt;T&gt;.Type {<br>        return self<br>    }<br></p><p>?<br></p><p>Jacob<br></p><p>On Wed, Jun 29, 2016 at 7:36 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e)<br>&gt;&gt;<br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; // Valuelet x: UInt8 = 5<br>&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; At least, I *thought* that was the latest version of the proposal. Maybe<br>&gt;&gt; I’ve gotten confused.<br>&gt;&gt;<br>&gt;<br>&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size`<br>&gt; perhaps?<br>&gt;<br>&gt;<br>&gt; I have listened. I have updated.<br>&gt;<br>&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;<br>&gt; // Types<br>&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;<br>&gt; // Value<br>&gt; let x: UInt8 = 5<br>&gt; MemoryLayout.of(x).size // 1<br>&gt; MemoryLayout.of(1).size // 8<br>&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/297a6661/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 30, 2016 at 12:00:00pm</p></header><div class="content"><p>Agreed. Also, if we’re supposed to say `MemoryLayout.of()` now, does MemoryLayout still need a public init? Half of the proposal’s problems revolve around the likely-unexpected behavior caused by passing T.self to the init function (although, argument labels would also solve the issue).<br></p><p>- Dave Sweeris<br></p><p>On Jun 29, 2016, at 10:05 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m not sure this bikeshed is the right color yet.<br>&gt; <br>&gt; How does the user remember the distinction between MemoryLayout&lt;Int&gt; and MemoryLayout.of(Int) ? To keep it clear, how about ofValue() rather than of() ?<br>&gt; <br>&gt; Also, could the implementation be simply<br>&gt; <br>&gt;     static func ofValue(_ value: @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;         return self<br>&gt;     }<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Wed, Jun 29, 2016 at 7:36 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from https://gist.github.com/erica/57a64163870486468180b8bab8a6294e &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;) <br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; <br>&gt;&gt; // Value<br>&gt;&gt; let x: UInt8 = 5<br>&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt;&gt; <br>&gt;&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt; <br>&gt; I have listened. I have updated.<br>&gt; <br>&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;<br>&gt; <br>&gt; // Types<br>&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt; <br>&gt; // Value<br>&gt; let x: UInt8 = 5<br>&gt; MemoryLayout.of(x).size // 1<br>&gt; MemoryLayout.of(1).size // 8<br>&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt; <br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/5d686938/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 30, 2016 at 06:00:00pm</p></header><div class="content"><p>As a meta-issue, it&#39;s been hard to make meaningful commentary during this<br>review process because the latest proposal has been so rapidly shifting<br>throughout. What, exactly, is the version we are reviewing at the moment?<br>Can we have a few days to mull over that version specifically?<br>On Thu, Jun 30, 2016 at 12:24 David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Agreed. Also, if we’re supposed to say `MemoryLayout.of()` now, does<br>&gt; MemoryLayout still need a public init? Half of the proposal’s problems<br>&gt; revolve around the likely-unexpected behavior caused by passing T.self to<br>&gt; the init function (although, argument labels would also solve the issue).<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Jun 29, 2016, at 10:05 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I&#39;m not sure this bikeshed is the right color yet.<br>&gt;<br>&gt; How does the user remember the distinction between MemoryLayout&lt;Int&gt; and<br>&gt; MemoryLayout.of(Int) ? To keep it clear, how about ofValue() rather than<br>&gt; of() ?<br>&gt;<br>&gt; Also, could the implementation be simply<br>&gt;<br>&gt;     static func ofValue(_ value: @autoclosure () -&gt; T) -&gt;<br>&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;         return self<br>&gt;     }<br>&gt;<br>&gt; ?<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Wed, Jun 29, 2016 at 7:36 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Types<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt; // Valuelet x: UInt8 = 5<br>&gt;&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; At least, I *thought* that was the latest version of the proposal.<br>&gt;&gt;&gt; Maybe I’ve gotten confused.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There must be a typo in these examples.<br>&gt;&gt; `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I have listened. I have updated.<br>&gt;&gt;<br>&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt;<br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;<br>&gt;&gt; // Value<br>&gt;&gt; let x: UInt8 = 5<br>&gt;&gt; MemoryLayout.of(x).size // 1<br>&gt;&gt; MemoryLayout.of(1).size // 8<br>&gt;&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/6fd3e09b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 30, 2016 at 12:00:00pm</p></header><div class="content"><p>The only proposal that&#39;s in review is the one on github at Swift Evolution.<br></p><p>I have been putting together another version as a courtesy for Dave A, to flesh out how the alternative approach would look if the alternative was the primary proposal. That one is a personal gist.<br></p><p>-- E<br></p><p><br>&gt; On Jun 30, 2016, at 12:00 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As a meta-issue, it&#39;s been hard to make meaningful commentary during this review process because the latest proposal has been so rapidly shifting throughout. What, exactly, is the version we are reviewing at the moment? Can we have a few days to mull over that version specifically?<br>&gt; On Thu, Jun 30, 2016 at 12:24 David Sweeris via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Agreed. Also, if we’re supposed to say `MemoryLayout.of()` now, does MemoryLayout still need a public init? Half of the proposal’s problems revolve around the likely-unexpected behavior caused by passing T.self to the init function (although, argument labels would also solve the issue).<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; On Jun 29, 2016, at 10:05 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure this bikeshed is the right color yet.<br>&gt;&gt; <br>&gt;&gt; How does the user remember the distinction between MemoryLayout&lt;Int&gt; and MemoryLayout.of(Int) ? To keep it clear, how about ofValue() rather than of() ?<br>&gt;&gt; <br>&gt;&gt; Also, could the implementation be simply<br>&gt;&gt; <br>&gt;&gt;     static func ofValue(_ value: @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;&gt;         return self<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Wed, Jun 29, 2016 at 7:36 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from https://gist.github.com/erica/57a64163870486468180b8bab8a6294e &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;) <br>&gt;&gt;&gt; // Types<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Value<br>&gt;&gt;&gt; let x: UInt8 = 5<br>&gt;&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt; <br>&gt;&gt; I have listened. I have updated.<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;<br>&gt;&gt; <br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; <br>&gt;&gt; // Value<br>&gt;&gt; let x: UInt8 = 5<br>&gt;&gt; MemoryLayout.of(x).size // 1<br>&gt;&gt; MemoryLayout.of(1).size // 8<br>&gt;&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/3e0708f9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June 30, 2016 at 11:00:00am</p></header><div class="content"><p>Good point; ideally, there would be no initializers at all.<br></p><p>On Thu, Jun 30, 2016 at 10:24 AM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; Agreed. Also, if we’re supposed to say `MemoryLayout.of()` now, does<br>&gt; MemoryLayout still need a public init? Half of the proposal’s problems<br>&gt; revolve around the likely-unexpected behavior caused by passing T.self to<br>&gt; the init function (although, argument labels would also solve the issue).<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Jun 29, 2016, at 10:05 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I&#39;m not sure this bikeshed is the right color yet.<br>&gt;<br>&gt; How does the user remember the distinction between MemoryLayout&lt;Int&gt; and<br>&gt; MemoryLayout.of(Int) ? To keep it clear, how about ofValue() rather than<br>&gt; of() ?<br>&gt;<br>&gt; Also, could the implementation be simply<br>&gt;<br>&gt;     static func ofValue(_ value: @autoclosure () -&gt; T) -&gt;<br>&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;         return self<br>&gt;     }<br>&gt;<br>&gt; ?<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Wed, Jun 29, 2016 at 7:36 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Types<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt; // Valuelet x: UInt8 = 5<br>&gt;&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; At least, I *thought* that was the latest version of the proposal.<br>&gt;&gt;&gt; Maybe I’ve gotten confused.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There must be a typo in these examples.<br>&gt;&gt; `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I have listened. I have updated.<br>&gt;&gt;<br>&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt;<br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;<br>&gt;&gt; // Value<br>&gt;&gt; let x: UInt8 = 5<br>&gt;&gt; MemoryLayout.of(x).size // 1<br>&gt;&gt; MemoryLayout.of(1).size // 8<br>&gt;&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/1cce32d7/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed Jun 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;<br>&gt;&gt; &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;)<br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; <br>&gt;&gt; // Value<br>&gt;&gt; let x: UInt8 = 5<br>&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt;&gt; <br>&gt;&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;<br>&gt; I have listened. I have updated.<br>&gt;<br>&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;<br>&gt; // Types<br>&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;<br>&gt; // Value<br>&gt; let x: UInt8 = 5<br>&gt; MemoryLayout.of(x).size // 1<br>&gt; MemoryLayout.of(1).size // 8<br>&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt; MemoryLayout.of(29.2).alignment // 8<br></p><p>I am still very skeptical that anyone needs the “Value” version, and as<br>long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>people complain.  You can still always write it yourself.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 30, 2016 at 02:00:00pm</p></header><div class="content"><p>On Thu, Jun 30, 2016 at 2:30 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Jun 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com<br>&gt; &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt; &gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt; &gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt; &gt;<br>&gt; &gt;&gt; &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;)<br>&gt; &gt;&gt; // Types<br>&gt; &gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt; &gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; &gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; // Value<br>&gt; &gt;&gt; let x: UInt8 = 5<br>&gt; &gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt; &gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt; &gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; At least, I thought that was the latest version of the proposal. Maybe<br>&gt; I’ve gotten confused.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There must be a typo in these examples.<br>&gt; `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt; &gt;<br>&gt; &gt; I have listened. I have updated.<br>&gt; &gt;<br>&gt; &gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt; &gt;<br>&gt; &gt; // Types<br>&gt; &gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt; &gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt; &gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt; &gt;<br>&gt; &gt; // Value<br>&gt; &gt; let x: UInt8 = 5<br>&gt; &gt; MemoryLayout.of(x).size // 1<br>&gt; &gt; MemoryLayout.of(1).size // 8<br>&gt; &gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt; &gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;<br>&gt; I am still very skeptical that anyone needs the “Value” version, and as<br>&gt; long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>&gt; people complain.  You can still always write it yourself.<br>&gt;<br></p><p>So long as the issue regarding querying an existential value&#39;s dynamic type<br>is addressed, yes?<br></p><p>I mentioned this in a comment on the gist already, but I&#39;m really not<br>digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>waters by mentioning a specific type (Array) in a context where you&#39;re<br>querying the memory layout properties of another type.<br></p><p><br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/6e71152f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 03:00:00pm</p></header><div class="content"><p>on Thu Jun 30 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Thu, Jun 30, 2016 at 2:30 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Wed Jun 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com<br>&gt;&gt; &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt; &gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;)<br>&gt;&gt; &gt;&gt; // Types<br>&gt;&gt; &gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; &gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; &gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; // Value<br>&gt;&gt; &gt;&gt; let x: UInt8 = 5<br>&gt;&gt; &gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt; &gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt; &gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; At least, I thought that was the latest version of the proposal. Maybe<br>&gt;&gt; I’ve gotten confused.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; There must be a typo in these examples.<br>&gt;&gt; `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I have listened. I have updated.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; // Types<br>&gt;&gt; &gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; &gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; &gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; // Value<br>&gt;&gt; &gt; let x: UInt8 = 5<br>&gt;&gt; &gt; MemoryLayout.of(x).size // 1<br>&gt;&gt; &gt; MemoryLayout.of(1).size // 8<br>&gt;&gt; &gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt; &gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;&gt;<br>&gt;&gt; I am still very skeptical that anyone needs the “Value” version, and as<br>&gt;&gt; long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>&gt;&gt; people complain.  You can still always write it yourself.<br>&gt;&gt;<br>&gt;<br>&gt; So long as the issue regarding querying an existential value&#39;s dynamic type<br>&gt; is addressed, yes?<br></p><p>Oh, I guess that&#39;s right.<br></p><p>&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt; querying the memory layout properties of another type.<br></p><p>OK, I agree with that.  If we have “alignment” rather than<br>“defaultAlignment,” I suppose we can have plain “spacing.”<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 30, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt; querying the memory layout properties of another type.<br>&gt; <br>&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br></p><p>No way to last-second sell you on interval rather than spacing?<br></p><p>// Returns the least possible interval between distinct instances of<br>/// `T` in memory.  The result is always positive.<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 04:00:00pm</p></header><div class="content"><p>on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt; <br>&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;<br>&gt; No way to last-second sell you on interval rather than spacing?<br></p><p>If you can explain why it&#39;s better.<br></p><p>&gt; // Returns the least possible interval between distinct instances of<br>&gt; /// `T` in memory.  The result is always positive.<br></p><p>For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>about physical distances and locations.  There are all kinds of<br>“intervals,” e.g. time intervals.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 5:05 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt; <br>&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt; <br>&gt; If you can explain why it&#39;s better.<br>&gt; <br>&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt; <br>&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt; about physical distances and locations.  There are all kinds of<br>&gt; “intervals,” e.g. time intervals.<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p>Pull requests:<br></p><p>SE-0101 Reconfiguring sizeof and related functions &lt;https://github.com/apple/swift-evolution/pull/401&gt;<br></p><p>and<br></p><p>Updating Buffer Value Names to Header Names &lt;https://github.com/apple/swift-evolution/pull/402&gt;<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/c1bf282c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>June 30, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt; <br>&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt; <br>&gt; If you can explain why it&#39;s better.<br>&gt; <br>&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt; <br>&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt; about physical distances and locations.  There are all kinds of<br>&gt; “intervals,” e.g. time intervals.<br></p><p>Hmm. Sounds like stride to me. stride or byteStride?<br></p><p>James<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>June 30, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 4:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt; <br>&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt; <br>&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt; <br>&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt; “intervals,” e.g. time intervals.<br>&gt; <br>&gt; Hmm. Sounds like stride to me. stride or byteStride?<br></p><p>The trouble with spacing is that spaces are usually “between” things. “interval” just seems like a a poor approximation for “stride” which really is the term of art here and what people/I would expect.<br></p><p>James<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt; <br>&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt; <br>&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt; <br>&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt; “intervals,” e.g. time intervals.<br>&gt; <br>&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt; <br>&gt; James<br></p><p>FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>returns the memory stride?&quot;<br></p><p>ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>this proposal changes the name to spacing, providing a simple but correct name that<br>works well enough in its intended use. Measuring memory is sufficiently esoteric<br>that we prefer to reserve `stride` for a more common use case.&quot;<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/1f4fb3e0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>June 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 4:59 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com &lt;mailto:jberry at rogueorbit.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt; <br>&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt; <br>&gt;&gt; James<br>&gt; <br>&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt; returns the memory stride?&quot;<br>&gt; <br>&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt; that we prefer to reserve `stride` for a more common use case.”<br></p><p><br>Heh. Guess I missed that FAQ. Ok, so I guess I don’t agree with the answer. Yes, stride gets used as a verb in the library, but it seems more confusing to work around its meaning as a noun. Would I look like a duck if you asked me to duck?  ;)   “stride” is the appropriate term of the art here, and anything else just obscures the truth.<br></p><p>James<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/8a9b993e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 30, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt; <br>&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt; <br>&gt;&gt; James<br>&gt; <br>&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt; returns the memory stride?&quot;<br>&gt; <br>&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br></p><p>Counter: some words have more than one well established meaning when used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be best IMO.  As James mentioned, spacing implies empty space *between* items whereas stride matches the meaning of this property *exactly* (which is why it is the term of art).<br></p><p>If a programmer can&#39;t distinguish between a &#39;stride&#39; property on MemoryLayout and the &#39;stride&#39; function they probably have no business doing anything which requires use of MemoryLayout in the first place.<br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/d6a82ed9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 06:00:00pm</p></header><div class="content"><p>on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br></p><p>&gt; Sent from my iPad<br>&gt;<br>&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; James<br>&gt;&gt; <br>&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt; <br>&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;<br>&gt; Counter: some words have more than one well established meaning when<br>&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt; (which is why it is the term of art).<br>&gt;<br>&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt; doing anything which requires use of MemoryLayout in the first place.<br></p><p>I don&#39;t believe that “stride” *is* the accepted term of art for this<br>meaning.  I never heard of the idea of types having an intrinsic<br>“stride” until I arrived on the Swift project.  That usage came from<br>“strideof.”  <br></p><p>If you all swear up and down that you&#39;ve been talking about “the stride<br>of a type” for more than 2 years, I won&#39;t fight you on this.<br>Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>forever be plagued by doubts about the name.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 30, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt; <br>&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt; (which is why it is the term of art).<br>&gt;&gt; <br>&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt; <br>&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; “strideof.”  <br>&gt; <br>&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; forever be plagued by doubts about the name.<br></p><p>I was just throwing in my 2 cents and planned to leave it at that.  The primary reason I chimed in is because I didn’t find the rationale in the “answer” compelling.  This isn’t something I feel like bike shedding any further over either.  <br></p><p>https://en.wikipedia.org/wiki/Stride_of_an_array  <br></p><p>Maybe stride isn’t as common as I thought it was (if it was I’m sure you would have heard of it before Swift) but it certainly predates Swift in usage.<br></p><p>-Matthew<br></p><p>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/1c383070/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 30, 2016 at 08:00:00pm</p></header><div class="content"><p>On Thu, Jun 30, 2016 at 8:21 PM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com<br>&gt; &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com<br>&gt; &lt;http://erica-at-ericasadun.com&gt;&gt; wrote:<br>&gt;<br>&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt; querying the memory layout properties of another type.<br>&gt;<br>&gt;<br>&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;<br>&gt;<br>&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;<br>&gt;<br>&gt; If you can explain why it&#39;s better.<br>&gt;<br>&gt; // Returns the least possible interval between distinct instances of<br>&gt; /// `T` in memory.  The result is always positive.<br>&gt;<br>&gt;<br>&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt; about physical distances and locations.  There are all kinds of<br>&gt; “intervals,” e.g. time intervals.<br>&gt;<br>&gt;<br>&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;<br>&gt; James<br>&gt;<br>&gt;<br>&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that<br>&gt; clearly<br>&gt; returns the memory stride?&quot;<br>&gt;<br>&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard<br>&gt; library,<br>&gt; this proposal changes the name to spacing, providing a simple but correct<br>&gt; name that<br>&gt; works well enough in its intended use. Measuring memory is sufficiently<br>&gt; esoteric<br>&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;<br>&gt;<br>&gt; Counter: some words have more than one well established meaning when<br>&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt; (which is why it is the term of art).<br>&gt;<br>&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;<br>&gt;<br>&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; “strideof.”<br>&gt;<br>&gt;<br>&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; forever be plagued by doubts about the name.<br>&gt;<br>&gt;<br>&gt; I was just throwing in my 2 cents and planned to leave it at that.  The<br>&gt; primary reason I chimed in is because I didn’t find the rationale in the<br>&gt; “answer” compelling.  This isn’t something I feel like bike shedding any<br>&gt; further over either.<br>&gt;<br>&gt; https://en.wikipedia.org/wiki/Stride_of_an_array<br>&gt;<br>&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure you<br>&gt; would have heard of it before Swift) but it certainly predates Swift in<br>&gt; usage.<br>&gt;<br></p><p>This does make the case for stride more strongly. At this point I too could<br>go either way.<br></p><p><br>&gt;<br>&gt; -Matthew<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/04a480fd/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 10:00:00pm</p></header><div class="content"><p>on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt; “strideof.”  <br>&gt;&gt; <br>&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt; forever be plagued by doubts about the name.<br>&gt;<br>&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt; shedding any further over either.<br>&gt;<br>&gt; https://en.wikipedia.org/wiki/Stride_of_an_array  <br>&gt;<br>&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt; you would have heard of it before Swift) but it certainly predates<br>&gt; Swift in usage.<br></p><p>But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>type T can have different strides.  They&#39;re talking about taking a view<br>onto an underlying series of contiguous Ts that (potentially) skips over<br>elements.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>June 30, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 10:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt;&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt;&gt; “strideof.”  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt;&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt;&gt; forever be plagued by doubts about the name.<br>&gt;&gt; <br>&gt;&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt;&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt;&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt;&gt; shedding any further over either.<br>&gt;&gt; <br>&gt;&gt; https://en.wikipedia.org/wiki/Stride_of_an_array  <br>&gt;&gt; <br>&gt;&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt;&gt; you would have heard of it before Swift) but it certainly predates<br>&gt;&gt; Swift in usage.<br>&gt; <br>&gt; But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>&gt; type T can have different strides.  They&#39;re talking about taking a view<br>&gt; onto an underlying series of contiguous Ts that (potentially) skips over<br>&gt; elements.<br></p><p>Maybe I come from an esoteric part of the universe. While I’ve never heard of stride applied to a type, in particular, the concept of stride as I know it applies to any item as laid out in memory, and seems to me to apply equally well to any “object” in the loosest form of the word. I believe my first experience with it, some 30 years ago, dealt with the row stride in a frame buffer or bitmap. This meaning is similar to the array reference as above. I disagree that they’re not in that article above talking primarily about the same thing that we are: their very first example, under the “Padding” headline, seems to exactly match our intent. Their additional examples are just hacks/extensions of this concept.<br></p><p>If we were talking about waveforms we’d be talking about period. Stride indicates the same thing with regard to items in memory: how long a step do you need to take to get from the start of one item to the start of the next. So we could use “period”, or “interval”, or “step”, or something. I’m just arguing that the most recognizable word to describe this concept, as applied to any sort of item in memory, is stride. But again, maybe that’s just based on my own experience.<br></p><p>Ultimately, I’m sure it’s not a big deal. I agree with Mathew that people using MemoryLayout aren’t likely to confuse the two uses within swift. It’s just that if I had to describe the concept we’re describing in MemoryLayout, stride would be my first choice, as it seems most apt. Short of that, I’m sure that I could read comments and ultimately figure out that “interval,” or “spacing,” or whatever, really means “stride” ;)<br></p><p>James<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June 30, 2016 at 10:00:00pm</p></header><div class="content"><p>There seems to be agreement that &quot;stride&quot; is sensical term for the distance<br>between values in memory, but it seems like what MemoryLayout wants to<br>expose is the *minimum* possible stride for a particular type. How do folks<br>feel about &quot;*minimumStride*&quot;?<br></p><p>On Thu, Jun 30, 2016 at 10:46 PM, James Berry via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 30, 2016, at 10:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;<br>&gt; http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Sent from my iPad<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m<br>&gt; really not<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from<br>&gt; top-level<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity.<br>&gt; I&#39;m<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it<br>&gt; muddies the<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where<br>&gt; you&#39;re<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances<br>&gt; of<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which<br>&gt; are all<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; James<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something<br>&gt; that clearly<br>&gt; &gt;&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the<br>&gt; standard library,<br>&gt; &gt;&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but<br>&gt; correct name that<br>&gt; &gt;&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is<br>&gt; sufficiently esoteric<br>&gt; &gt;&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt; &gt;&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt; &gt;&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt; &gt;&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt; &gt;&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt; &gt;&gt;&gt;&gt; (which is why it is the term of art).<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt; &gt;&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt; &gt;&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; &gt;&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; &gt;&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; &gt;&gt;&gt; “strideof.”<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; &gt;&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; &gt;&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; &gt;&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; &gt;&gt;&gt; forever be plagued by doubts about the name.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt; &gt;&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt; &gt;&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt; &gt;&gt; shedding any further over either.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; https://en.wikipedia.org/wiki/Stride_of_an_array<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt; &gt;&gt; you would have heard of it before Swift) but it certainly predates<br>&gt; &gt;&gt; Swift in usage.<br>&gt; &gt;<br>&gt; &gt; But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>&gt; &gt; type T can have different strides.  They&#39;re talking about taking a view<br>&gt; &gt; onto an underlying series of contiguous Ts that (potentially) skips over<br>&gt; &gt; elements.<br>&gt;<br>&gt; Maybe I come from an esoteric part of the universe. While I’ve never heard<br>&gt; of stride applied to a type, in particular, the concept of stride as I know<br>&gt; it applies to any item as laid out in memory, and seems to me to apply<br>&gt; equally well to any “object” in the loosest form of the word. I believe my<br>&gt; first experience with it, some 30 years ago, dealt with the row stride in a<br>&gt; frame buffer or bitmap. This meaning is similar to the array reference as<br>&gt; above. I disagree that they’re not in that article above talking primarily<br>&gt; about the same thing that we are: their very first example, under the<br>&gt; “Padding” headline, seems to exactly match our intent. Their additional<br>&gt; examples are just hacks/extensions of this concept.<br>&gt;<br>&gt; If we were talking about waveforms we’d be talking about period. Stride<br>&gt; indicates the same thing with regard to items in memory: how long a step do<br>&gt; you need to take to get from the start of one item to the start of the<br>&gt; next. So we could use “period”, or “interval”, or “step”, or something. I’m<br>&gt; just arguing that the most recognizable word to describe this concept, as<br>&gt; applied to any sort of item in memory, is stride. But again, maybe that’s<br>&gt; just based on my own experience.<br>&gt;<br>&gt; Ultimately, I’m sure it’s not a big deal. I agree with Mathew that people<br>&gt; using MemoryLayout aren’t likely to confuse the two uses within swift. It’s<br>&gt; just that if I had to describe the concept we’re describing in<br>&gt; MemoryLayout, stride would be my first choice, as it seems most apt. Short<br>&gt; of that, I’m sure that I could read comments and ultimately figure out that<br>&gt; “interval,” or “spacing,” or whatever, really means “stride” ;)<br>&gt;<br>&gt; James<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/b06e431e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 06:00:00am</p></header><div class="content"><p>I don&#39;t think it needs qualifying. It cannot be anything other than the<br>minimum, just like we have `alignment` instead of `minimumAlignment`.<br>On Fri, Jul 1, 2016 at 00:50 Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; There seems to be agreement that &quot;stride&quot; is sensical term for the<br>&gt; distance between values in memory, but it seems like what MemoryLayout<br>&gt; wants to expose is the *minimum* possible stride for a particular type. How<br>&gt; do folks feel about &quot;*minimumStride*&quot;?<br>&gt;<br>&gt; On Thu, Jun 30, 2016 at 10:46 PM, James Berry via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jun 30, 2016, at 10:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;<br>&gt;&gt; http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m<br>&gt;&gt; really not<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved<br>&gt;&gt; from top-level<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of<br>&gt;&gt; clarity. I&#39;m<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it<br>&gt;&gt; muddies the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context<br>&gt;&gt; where you&#39;re<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct<br>&gt;&gt; instances of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which<br>&gt;&gt; are all<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for<br>&gt;&gt; something that clearly<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the<br>&gt;&gt; standard library,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but<br>&gt;&gt; correct name that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is<br>&gt;&gt; sufficiently esoteric<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt; &gt;&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much<br>&gt;&gt; better<br>&gt;&gt; &gt;&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would<br>&gt;&gt; be<br>&gt;&gt; &gt;&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt; &gt;&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt; &gt;&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt; &gt;&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt; &gt;&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt; &gt;&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt; &gt;&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt; &gt;&gt;&gt; “strideof.”<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the<br>&gt;&gt; stride<br>&gt;&gt; &gt;&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt; &gt;&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt; &gt;&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt; &gt;&gt;&gt; forever be plagued by doubts about the name.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt;&gt; &gt;&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt;&gt; &gt;&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt;&gt; &gt;&gt; shedding any further over either.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://en.wikipedia.org/wiki/Stride_of_an_array<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt;&gt; &gt;&gt; you would have heard of it before Swift) but it certainly predates<br>&gt;&gt; &gt;&gt; Swift in usage.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>&gt;&gt; &gt; type T can have different strides.  They&#39;re talking about taking a view<br>&gt;&gt; &gt; onto an underlying series of contiguous Ts that (potentially) skips over<br>&gt;&gt; &gt; elements.<br>&gt;&gt;<br>&gt;&gt; Maybe I come from an esoteric part of the universe. While I’ve never<br>&gt;&gt; heard of stride applied to a type, in particular, the concept of stride as<br>&gt;&gt; I know it applies to any item as laid out in memory, and seems to me to<br>&gt;&gt; apply equally well to any “object” in the loosest form of the word. I<br>&gt;&gt; believe my first experience with it, some 30 years ago, dealt with the row<br>&gt;&gt; stride in a frame buffer or bitmap. This meaning is similar to the array<br>&gt;&gt; reference as above. I disagree that they’re not in that article above<br>&gt;&gt; talking primarily about the same thing that we are: their very first<br>&gt;&gt; example, under the “Padding” headline, seems to exactly match our intent.<br>&gt;&gt; Their additional examples are just hacks/extensions of this concept.<br>&gt;&gt;<br>&gt;&gt; If we were talking about waveforms we’d be talking about period. Stride<br>&gt;&gt; indicates the same thing with regard to items in memory: how long a step do<br>&gt;&gt; you need to take to get from the start of one item to the start of the<br>&gt;&gt; next. So we could use “period”, or “interval”, or “step”, or something. I’m<br>&gt;&gt; just arguing that the most recognizable word to describe this concept, as<br>&gt;&gt; applied to any sort of item in memory, is stride. But again, maybe that’s<br>&gt;&gt; just based on my own experience.<br>&gt;&gt;<br>&gt;&gt; Ultimately, I’m sure it’s not a big deal. I agree with Mathew that people<br>&gt;&gt; using MemoryLayout aren’t likely to confuse the two uses within swift. It’s<br>&gt;&gt; just that if I had to describe the concept we’re describing in<br>&gt;&gt; MemoryLayout, stride would be my first choice, as it seems most apt. Short<br>&gt;&gt; of that, I’m sure that I could read comments and ultimately figure out that<br>&gt;&gt; “interval,” or “spacing,” or whatever, really means “stride” ;)<br>&gt;&gt;<br>&gt;&gt; James<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/eb084d19/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  1, 2016 at 12:00:00am</p></header><div class="content"><p>No, actually both can be something other than the minimum.  These are usually going to be the minimum-without-performance-degradation. <br></p><p>Sent from my illudium Q-36 explosive space modulator<br></p><p>&gt; On Jun 30, 2016, at 11:29 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t think it needs qualifying. It cannot be anything other than the minimum, just like we have `alignment` instead of `minimumAlignment`.<br>&gt;&gt; On Fri, Jul 1, 2016 at 00:50 Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; There seems to be agreement that &quot;stride&quot; is sensical term for the distance between values in memory, but it seems like what MemoryLayout wants to expose is the *minimum* possible stride for a particular type. How do folks feel about &quot;minimumStride&quot;?<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, Jun 30, 2016 at 10:46 PM, James Berry via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jun 30, 2016, at 10:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt;&gt; &gt;&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt;&gt; &gt;&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt;&gt; &gt;&gt;&gt; “strideof.”<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt;&gt;&gt; &gt;&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt;&gt; &gt;&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt;&gt; &gt;&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt;&gt; &gt;&gt;&gt; forever be plagued by doubts about the name.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt;&gt;&gt; &gt;&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt;&gt;&gt; &gt;&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt;&gt;&gt; &gt;&gt; shedding any further over either.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; https://en.wikipedia.org/wiki/Stride_of_an_array<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt;&gt;&gt; &gt;&gt; you would have heard of it before Swift) but it certainly predates<br>&gt;&gt;&gt; &gt;&gt; Swift in usage.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>&gt;&gt;&gt; &gt; type T can have different strides.  They&#39;re talking about taking a view<br>&gt;&gt;&gt; &gt; onto an underlying series of contiguous Ts that (potentially) skips over<br>&gt;&gt;&gt; &gt; elements.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe I come from an esoteric part of the universe. While I’ve never heard of stride applied to a type, in particular, the concept of stride as I know it applies to any item as laid out in memory, and seems to me to apply equally well to any “object” in the loosest form of the word. I believe my first experience with it, some 30 years ago, dealt with the row stride in a frame buffer or bitmap. This meaning is similar to the array reference as above. I disagree that they’re not in that article above talking primarily about the same thing that we are: their very first example, under the “Padding” headline, seems to exactly match our intent. Their additional examples are just hacks/extensions of this concept.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we were talking about waveforms we’d be talking about period. Stride indicates the same thing with regard to items in memory: how long a step do you need to take to get from the start of one item to the start of the next. So we could use “period”, or “interval”, or “step”, or something. I’m just arguing that the most recognizable word to describe this concept, as applied to any sort of item in memory, is stride. But again, maybe that’s just based on my own experience.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ultimately, I’m sure it’s not a big deal. I agree with Mathew that people using MemoryLayout aren’t likely to confuse the two uses within swift. It’s just that if I had to describe the concept we’re describing in MemoryLayout, stride would be my first choice, as it seems most apt. Short of that, I’m sure that I could read comments and ultimately figure out that “interval,” or “spacing,” or whatever, really means “stride” ;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; James<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/fa0d131f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 07:00:00am</p></header><div class="content"><p>Bah, of course. No point in trying to qualify the word; let&#39;s just call it<br>the memory layout stride and be done with it.<br></p><p><br>On Fri, Jul 1, 2016 at 02:05 Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt; No, actually both can be something other than the minimum.  These are<br>&gt; usually going to be the minimum-without-performance-degradation.<br>&gt;<br>&gt;<br>&gt; Sent from my illudium Q-36 explosive space modulator<br>&gt;<br>&gt; On Jun 30, 2016, at 11:29 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; I don&#39;t think it needs qualifying. It cannot be anything other than the<br>&gt; minimum, just like we have `alignment` instead of `minimumAlignment`.<br>&gt; On Fri, Jul 1, 2016 at 00:50 Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; There seems to be agreement that &quot;stride&quot; is sensical term for the<br>&gt;&gt; distance between values in memory, but it seems like what MemoryLayout<br>&gt;&gt; wants to expose is the *minimum* possible stride for a particular type. How<br>&gt;&gt; do folks feel about &quot;*minimumStride*&quot;?<br>&gt;&gt;<br>&gt;&gt; On Thu, Jun 30, 2016 at 10:46 PM, James Berry via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jun 30, 2016, at 10:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com<br>&gt;&gt;&gt; &lt;http://matthew-at-anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com<br>&gt;&gt;&gt; &lt;http://matthew-at-anandabits.com&gt; &lt;http://matthew-at-anandabits.com/&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com<br>&gt;&gt;&gt; &lt;http://erica-at-ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;<br>&gt;&gt;&gt; dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m<br>&gt;&gt;&gt; really not<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved<br>&gt;&gt;&gt; from top-level<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of<br>&gt;&gt;&gt; clarity. I&#39;m<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it<br>&gt;&gt;&gt; muddies the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context<br>&gt;&gt;&gt; where you&#39;re<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct<br>&gt;&gt;&gt; instances of<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which<br>&gt;&gt;&gt; are all<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for<br>&gt;&gt;&gt; something that clearly<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the<br>&gt;&gt;&gt; standard library,<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but<br>&gt;&gt;&gt; correct name that<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is<br>&gt;&gt;&gt; sufficiently esoteric<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much<br>&gt;&gt;&gt; better<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would<br>&gt;&gt;&gt; be<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no<br>&gt;&gt;&gt; business<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first<br>&gt;&gt;&gt; place.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt;&gt; &gt;&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt;&gt; &gt;&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt;&gt; &gt;&gt;&gt; “strideof.”<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the<br>&gt;&gt;&gt; stride<br>&gt;&gt;&gt; &gt;&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt;&gt; &gt;&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt;&gt; &gt;&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt;&gt; &gt;&gt;&gt; forever be plagued by doubts about the name.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt;&gt;&gt; &gt;&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt;&gt;&gt; &gt;&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt;&gt;&gt; &gt;&gt; shedding any further over either.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; https://en.wikipedia.org/wiki/Stride_of_an_array<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt;&gt;&gt; &gt;&gt; you would have heard of it before Swift) but it certainly predates<br>&gt;&gt;&gt; &gt;&gt; Swift in usage.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>&gt;&gt;&gt; &gt; type T can have different strides.  They&#39;re talking about taking a view<br>&gt;&gt;&gt; &gt; onto an underlying series of contiguous Ts that (potentially) skips<br>&gt;&gt;&gt; over<br>&gt;&gt;&gt; &gt; elements.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Maybe I come from an esoteric part of the universe. While I’ve never<br>&gt;&gt;&gt; heard of stride applied to a type, in particular, the concept of stride as<br>&gt;&gt;&gt; I know it applies to any item as laid out in memory, and seems to me to<br>&gt;&gt;&gt; apply equally well to any “object” in the loosest form of the word. I<br>&gt;&gt;&gt; believe my first experience with it, some 30 years ago, dealt with the row<br>&gt;&gt;&gt; stride in a frame buffer or bitmap. This meaning is similar to the array<br>&gt;&gt;&gt; reference as above. I disagree that they’re not in that article above<br>&gt;&gt;&gt; talking primarily about the same thing that we are: their very first<br>&gt;&gt;&gt; example, under the “Padding” headline, seems to exactly match our intent.<br>&gt;&gt;&gt; Their additional examples are just hacks/extensions of this concept.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If we were talking about waveforms we’d be talking about period. Stride<br>&gt;&gt;&gt; indicates the same thing with regard to items in memory: how long a step do<br>&gt;&gt;&gt; you need to take to get from the start of one item to the start of the<br>&gt;&gt;&gt; next. So we could use “period”, or “interval”, or “step”, or something. I’m<br>&gt;&gt;&gt; just arguing that the most recognizable word to describe this concept, as<br>&gt;&gt;&gt; applied to any sort of item in memory, is stride. But again, maybe that’s<br>&gt;&gt;&gt; just based on my own experience.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ultimately, I’m sure it’s not a big deal. I agree with Mathew that<br>&gt;&gt;&gt; people using MemoryLayout aren’t likely to confuse the two uses within<br>&gt;&gt;&gt; swift. It’s just that if I had to describe the concept we’re describing in<br>&gt;&gt;&gt; MemoryLayout, stride would be my first choice, as it seems most apt. Short<br>&gt;&gt;&gt; of that, I’m sure that I could read comments and ultimately figure out that<br>&gt;&gt;&gt; “interval,” or “spacing,” or whatever, really means “stride” ;)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; James<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/a3facba5/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  1, 2016 at 12:00:00am</p></header><div class="content"><p>It&#39;s not the minimum though. Just go with stride already  😏<br></p><p>Sent from my illudium Q-36 explosive space modulator<br></p><p>&gt; On Jun 30, 2016, at 10:49 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; There seems to be agreement that &quot;stride&quot; is sensical term for the distance between values in memory, but it seems like what MemoryLayout wants to expose is the *minimum* possible stride for a particular type. How do folks feel about &quot;minimumStride&quot;?<br>&gt; <br>&gt;&gt; On Thu, Jun 30, 2016 at 10:46 PM, James Berry via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jun 30, 2016, at 10:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt; On Jun 30, 2016, at 8:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt; &gt;&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt; &gt;&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt; &gt;&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt; &gt;&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt; &gt;&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt; &gt;&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt; &gt;&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt; &gt;&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt; &gt;&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt; &gt;&gt;&gt; “strideof.”<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt;&gt; &gt;&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt; &gt;&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt; &gt;&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt; &gt;&gt;&gt; forever be plagued by doubts about the name.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I was just throwing in my 2 cents and planned to leave it at that.<br>&gt;&gt; &gt;&gt; The primary reason I chimed in is because I didn’t find the rationale<br>&gt;&gt; &gt;&gt; in the “answer” compelling.  This isn’t something I feel like bike<br>&gt;&gt; &gt;&gt; shedding any further over either.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; https://en.wikipedia.org/wiki/Stride_of_an_array<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Maybe stride isn’t as common as I thought it was (if it was I’m sure<br>&gt;&gt; &gt;&gt; you would have heard of it before Swift) but it certainly predates<br>&gt;&gt; &gt;&gt; Swift in usage.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; But that&#39;s actually a different meaning altogether.  Two “arrays” of<br>&gt;&gt; &gt; type T can have different strides.  They&#39;re talking about taking a view<br>&gt;&gt; &gt; onto an underlying series of contiguous Ts that (potentially) skips over<br>&gt;&gt; &gt; elements.<br>&gt;&gt; <br>&gt;&gt; Maybe I come from an esoteric part of the universe. While I’ve never heard of stride applied to a type, in particular, the concept of stride as I know it applies to any item as laid out in memory, and seems to me to apply equally well to any “object” in the loosest form of the word. I believe my first experience with it, some 30 years ago, dealt with the row stride in a frame buffer or bitmap. This meaning is similar to the array reference as above. I disagree that they’re not in that article above talking primarily about the same thing that we are: their very first example, under the “Padding” headline, seems to exactly match our intent. Their additional examples are just hacks/extensions of this concept.<br>&gt;&gt; <br>&gt;&gt; If we were talking about waveforms we’d be talking about period. Stride indicates the same thing with regard to items in memory: how long a step do you need to take to get from the start of one item to the start of the next. So we could use “period”, or “interval”, or “step”, or something. I’m just arguing that the most recognizable word to describe this concept, as applied to any sort of item in memory, is stride. But again, maybe that’s just based on my own experience.<br>&gt;&gt; <br>&gt;&gt; Ultimately, I’m sure it’s not a big deal. I agree with Mathew that people using MemoryLayout aren’t likely to confuse the two uses within swift. It’s just that if I had to describe the concept we’re describing in MemoryLayout, stride would be my first choice, as it seems most apt. Short of that, I’m sure that I could read comments and ultimately figure out that “interval,” or “spacing,” or whatever, really means “stride” ;)<br>&gt;&gt; <br>&gt;&gt; James<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/6d594352/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  1, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 1:03 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s not the minimum though. Just go with stride already  😏<br>&gt; <br></p><p>Changing to stride.<br></p><p>&gt; Sent from my illudium Q-36 explosive space modulator<br></p><p><br>-- Sent from the HQ of the Ravenous Bugblatter Beast of Traal<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 30, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 6:12 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt; <br>&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt; (which is why it is the term of art).<br>&gt;&gt; <br>&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt; <br>&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; “strideof.”  <br>&gt; <br>&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; forever be plagued by doubts about the name.<br></p><p>As the person who originally picked &quot;stride&quot; here, I agree that I&#39;ve never<br>heard of people talking about the &quot;stride&quot; of a type; people talk about striding<br>over an array, and they talk about the size of one&#39;s stride, and that size<br>can be measured in bytes.  That&#39;s all I was thinking.<br></p><p>However, I was just picking a name for an internal implementation concept;<br>I did not expect it to be used in the standard library.<br></p><p>I don&#39;t really like &quot;spacing&quot;; it sounds too much like a synonym for &quot;padding&quot;,<br>i.e. the amount of empty space between elements rather than the total amount<br>of space for each element.  But I don&#39;t mean to re-open wounds; if people<br>have settled on &quot;spacing&quot;, have at it.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/e79bcafb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 10:00:00pm</p></header><div class="content"><p>on Thu Jun 30 2016, John McCall &lt;rjmccall-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 30, 2016, at 6:12 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly <br>&gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt; “strideof.”  <br>&gt;&gt; <br>&gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt; forever be plagued by doubts about the name.<br>&gt;<br>&gt; As the person who originally picked &quot;stride&quot; here, I agree that I&#39;ve never<br>&gt; heard of people talking about the &quot;stride&quot; of a type; people talk about striding<br>&gt; over an array, and they talk about the size of one&#39;s stride, and that size<br>&gt; can be measured in bytes.  That&#39;s all I was thinking.<br>&gt;<br>&gt; However, I was just picking a name for an internal implementation concept;<br>&gt; I did not expect it to be used in the standard library.<br>&gt;<br>&gt; I don&#39;t really like &quot;spacing&quot;; it sounds too much like a synonym for &quot;padding&quot;,<br>&gt; i.e. the amount of empty space between elements rather than the total amount<br>&gt; of space for each element.  But I don&#39;t mean to re-open wounds; if people<br>&gt; have settled on &quot;spacing&quot;, have at it.<br></p><p>Better names are always welcome if you can come up with one.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 12:00:00am</p></header><div class="content"><p>On Fri, Jul 1, 2016 at 12:03 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Jun 30 2016, John McCall &lt;rjmccall-AT-apple.com&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Jun 30, 2016, at 6:12 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;<br>&gt; http://matthew-at-anandabits.com/&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Sent from my iPad<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m<br>&gt; really not<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from<br>&gt; top-level<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity.<br>&gt; I&#39;m<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it<br>&gt; muddies the<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where<br>&gt; you&#39;re<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances<br>&gt; of<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which<br>&gt; are all<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; James<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something<br>&gt; that clearly<br>&gt; &gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the<br>&gt; standard library,<br>&gt; &gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but<br>&gt; correct name that<br>&gt; &gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is<br>&gt; sufficiently esoteric<br>&gt; &gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt; &gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt; &gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt; &gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt; &gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt; &gt;&gt;&gt; (which is why it is the term of art).<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt; &gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt; &gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; &gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; &gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; &gt;&gt; “strideof.”<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; &gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; &gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; &gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; &gt;&gt; forever be plagued by doubts about the name.<br>&gt; &gt;<br>&gt; &gt; As the person who originally picked &quot;stride&quot; here, I agree that I&#39;ve<br>&gt; never<br>&gt; &gt; heard of people talking about the &quot;stride&quot; of a type; people talk about<br>&gt; striding<br>&gt; &gt; over an array, and they talk about the size of one&#39;s stride, and that<br>&gt; size<br>&gt; &gt; can be measured in bytes.  That&#39;s all I was thinking.<br>&gt; &gt;<br>&gt; &gt; However, I was just picking a name for an internal implementation<br>&gt; concept;<br>&gt; &gt; I did not expect it to be used in the standard library.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t really like &quot;spacing&quot;; it sounds too much like a synonym for<br>&gt; &quot;padding&quot;,<br>&gt; &gt; i.e. the amount of empty space between elements rather than the total<br>&gt; amount<br>&gt; &gt; of space for each element.  But I don&#39;t mean to re-open wounds; if people<br>&gt; &gt; have settled on &quot;spacing&quot;, have at it.<br>&gt;<br>&gt; Better names are always welcome if you can come up with one.<br>&gt;<br></p><p>FWIW, courtesy of the thesaurus, curated to eliminate clearly unsuitable<br>words:<br>breadth, dimension, expanse, interval, period, space, span, stretch, width<br></p><p>Of these, span might be the most OK.<br></p><p><br>&gt; --<br>&gt; Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/7418da1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July  1, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 10:41 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; On Fri, Jul 1, 2016 at 12:03 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; on Thu Jun 30 2016, John McCall &lt;rjmccall-AT-apple.com&gt; wrote:<br>&gt; <br>&gt; &gt;&gt; On Jun 30, 2016, at 6:12 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/ &lt;http://matthew-at-anandabits.com/&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Sent from my iPad<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com &lt;mailto:jberry at rogueorbit.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; James<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly<br>&gt; &gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt; &gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt; &gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt; &gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt; &gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt; &gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt; &gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt; &gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt; &gt;&gt;&gt; (which is why it is the term of art).<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt; &gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt; &gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; &gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; &gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; &gt;&gt; “strideof.”<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; &gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; &gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; &gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; &gt;&gt; forever be plagued by doubts about the name.<br>&gt; &gt;<br>&gt; &gt; As the person who originally picked &quot;stride&quot; here, I agree that I&#39;ve never<br>&gt; &gt; heard of people talking about the &quot;stride&quot; of a type; people talk about striding<br>&gt; &gt; over an array, and they talk about the size of one&#39;s stride, and that size<br>&gt; &gt; can be measured in bytes.  That&#39;s all I was thinking.<br>&gt; &gt;<br>&gt; &gt; However, I was just picking a name for an internal implementation concept;<br>&gt; &gt; I did not expect it to be used in the standard library.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t really like &quot;spacing&quot;; it sounds too much like a synonym for &quot;padding&quot;,<br>&gt; &gt; i.e. the amount of empty space between elements rather than the total amount<br>&gt; &gt; of space for each element.  But I don&#39;t mean to re-open wounds; if people<br>&gt; &gt; have settled on &quot;spacing&quot;, have at it.<br>&gt; <br>&gt; Better names are always welcome if you can come up with one.<br>&gt; <br>&gt; FWIW, courtesy of the thesaurus, curated to eliminate clearly unsuitable words:<br>&gt; breadth, dimension, expanse, interval, period, space, span, stretch, width<br>&gt; <br>&gt; Of these, span might be the most OK.<br></p><p>Another thought is &quot;arrayElementSize&quot;, or &quot;sizeAsArrayElement&quot;, or &quot;sizeInArray&quot;.  Somewhat verbose, though.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/13b9cae7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July  1, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 8:57 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Jun 30, 2016, at 10:41 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; On Fri, Jul 1, 2016 at 12:03 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Thu Jun 30 2016, John McCall &lt;rjmccall-AT-apple.com &lt;http://rjmccall-at-apple.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;&gt; On Jun 30, 2016, at 6:12 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; on Thu Jun 30 2016, Matthew Johnson &lt;matthew-AT-anandabits.com &lt;http://matthew-at-anandabits.com/&gt; &lt;http://matthew-at-anandabits.com/ &lt;http://matthew-at-anandabits.com/&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Sent from my iPad<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Jun 30, 2016, at 6:59 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 5:47 PM, James Berry &lt;jberry at rogueorbit.com &lt;mailto:jberry at rogueorbit.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:05 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Thu Jun 30 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 30, 2016, at 4:41 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I mentioned this in a comment on the gist already, but I&#39;m really not<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; digging the &quot;array&quot; in `arraySpacing`. We&#39;ve already moved from top-level<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;stride&quot; to &quot;memory layout spacing,&quot; gaining plenty of clarity. I&#39;m<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; skeptical that the &quot;array&quot; adds anything more. Moreover, it muddies the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; waters by mentioning a specific type (Array) in a context where you&#39;re<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; querying the memory layout properties of another type.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; OK, I agree with that.  If we have “alignment” rather than<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “defaultAlignment,” I suppose we can have plain “spacing.”<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; No way to last-second sell you on interval rather than spacing?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; If you can explain why it&#39;s better.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; // Returns the least possible interval between distinct instances of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `T` in memory.  The result is always positive.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; For me, “interval” doesn&#39;t go with “size” and “alignment,” which are all<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; about physical distances and locations.  There are all kinds of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; “intervals,” e.g. time intervals.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Hmm. Sounds like stride to me. stride or byteStride?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; James<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; FAQ: &quot;Why aren&#39;t you using the obvious phrase `stride` for something that clearly<br>&gt;&gt; &gt;&gt;&gt;&gt; returns the memory stride?&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; ANSWER: &quot;As stride already has a well-established meaning in the standard library,<br>&gt;&gt; &gt;&gt;&gt;&gt; this proposal changes the name to spacing, providing a simple but correct name that<br>&gt;&gt; &gt;&gt;&gt;&gt; works well enough in its intended use. Measuring memory is sufficiently esoteric<br>&gt;&gt; &gt;&gt;&gt;&gt; that we prefer to reserve `stride` for a more common use case.&quot;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Counter: some words have more than one well established meaning when<br>&gt;&gt; &gt;&gt;&gt; used in different contexts.  &#39;spacing&#39; isn&#39;t too bad here (much better<br>&gt;&gt; &gt;&gt;&gt; than &#39;arraySpacing&#39;) but sticking to the term of art &#39;stride&#39; would be<br>&gt;&gt; &gt;&gt;&gt; best IMO.  As James mentioned, spacing implies empty space *between*<br>&gt;&gt; &gt;&gt;&gt; items whereas stride matches the meaning of this property *exactly*<br>&gt;&gt; &gt;&gt;&gt; (which is why it is the term of art).<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; If a programmer can&#39;t distinguish between a &#39;stride&#39; property on<br>&gt;&gt; &gt;&gt;&gt; MemoryLayout and the &#39;stride&#39; function they probably have no business<br>&gt;&gt; &gt;&gt;&gt; doing anything which requires use of MemoryLayout in the first place.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt;&gt; &gt;&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt;&gt; &gt;&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt;&gt; &gt;&gt; “strideof.”<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt;&gt; &gt;&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt;&gt; &gt;&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt;&gt; &gt;&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt;&gt; &gt;&gt; forever be plagued by doubts about the name.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; As the person who originally picked &quot;stride&quot; here, I agree that I&#39;ve never<br>&gt;&gt; &gt; heard of people talking about the &quot;stride&quot; of a type; people talk about striding<br>&gt;&gt; &gt; over an array, and they talk about the size of one&#39;s stride, and that size<br>&gt;&gt; &gt; can be measured in bytes.  That&#39;s all I was thinking.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; However, I was just picking a name for an internal implementation concept;<br>&gt;&gt; &gt; I did not expect it to be used in the standard library.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I don&#39;t really like &quot;spacing&quot;; it sounds too much like a synonym for &quot;padding&quot;,<br>&gt;&gt; &gt; i.e. the amount of empty space between elements rather than the total amount<br>&gt;&gt; &gt; of space for each element.  But I don&#39;t mean to re-open wounds; if people<br>&gt;&gt; &gt; have settled on &quot;spacing&quot;, have at it.<br>&gt;&gt; <br>&gt;&gt; Better names are always welcome if you can come up with one.<br>&gt;&gt; <br>&gt;&gt; FWIW, courtesy of the thesaurus, curated to eliminate clearly unsuitable words:<br>&gt;&gt; breadth, dimension, expanse, interval, period, space, span, stretch, width<br>&gt;&gt; <br>&gt;&gt; Of these, span might be the most OK.<br>&gt; <br>&gt; Another thought is &quot;arrayElementSize&quot;, or &quot;sizeAsArrayElement&quot;, or &quot;sizeInArray&quot;.  Somewhat verbose, though.<br></p><p>Ignore me; I should stop responding to things sent to my inbox before I read the rest of the thread.  &#39;stride&#39; sounds good to me.<br></p><p>John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/5468fb61/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 08:00:00am</p></header><div class="content"><p>On Jun 30, 2016, at 9:12 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I don&#39;t believe that “stride” *is* the accepted term of art for this<br>&gt; meaning.  I never heard of the idea of types having an intrinsic<br>&gt; “stride” until I arrived on the Swift project.  That usage came from<br>&gt; “strideof.”  <br>&gt; <br>&gt; If you all swear up and down that you&#39;ve been talking about “the stride<br>&gt; of a type” for more than 2 years, I won&#39;t fight you on this.<br>&gt; Otherwise... well, I still won&#39;t fight; I&#39;m being crushed by an<br>&gt; avalanche of bikesheds and I can&#39;t muster the energy ;-&gt;... but I&#39;ll<br>&gt; forever be plagued by doubts about the name.<br></p><p>FWIW, speaking as someone with zero inside-baseball knowledge of Swift but a lot of low-level experience when I first encountered `strideof`, I thought its purpose was immediately obvious, and that it was (and is) a good name.<br></p><p>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/1ef0d683/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>June 30, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 12:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am still very skeptical that anyone needs the “Value” version, and as<br>&gt; long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>&gt; people complain.  You can still always write it yourself.<br>&gt; <br></p><p>I agree and being able to ask about the size of an instance implies things that aren’t true. Sticking “value” labels on everything doesn’t change the fact that sizeOf(swift_array) is not going to give you the size of the underlying buffer no matter how you slice it.<br></p><p>IMHO Sizes are for types, just drop the instance stuff. There is no point in keeping it.<br></p><p><br>Russ<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 12, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 12:30, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Jun 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt; <br>&gt;&gt;&gt; &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;)<br>&gt;&gt;&gt; // Types<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Value<br>&gt;&gt;&gt; let x: UInt8 = 5<br>&gt;&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt; <br>&gt;&gt; I have listened. I have updated.<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt; <br>&gt;&gt; // Types<br>&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt; <br>&gt;&gt; // Value<br>&gt;&gt; let x: UInt8 = 5<br>&gt;&gt; MemoryLayout.of(x).size // 1<br>&gt;&gt; MemoryLayout.of(1).size // 8<br>&gt;&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt; <br>&gt; I am still very skeptical that anyone needs the “Value” version, and as<br>&gt; long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>&gt; people complain.  You can still always write it yourself.<br></p><p>Sorry to only come across this now. The proposed implementation does not work.<br></p><p>public static func of(_ candidate : @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>  return MemoryLayout.init(candidate).dynamicType<br>}<br></p><p>let value: Any = 2 // dynamicType is Int<br>let layout = MemoryLayout(value).dynamicType // inlined from above<br>let arrayType = [value].dynamicType<br></p><p>‘layout’ here is still &#39;MemoryLayout&lt;Any&gt;&#39;, not &#39;MemoryLayout&lt;Int&gt;&#39;, for the same reason that ‘arrayType’ is ‘Array&lt;Any&gt;’ rather than ‘Array&lt;Int&gt;’.<br></p><p>If we want to support sizeofValue et al, we’d need to make these instance properties rather than static properties, and may then want to give up on the struct being generic.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/0e309e66/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 12, 2016 at 05:00:00pm</p></header><div class="content"><p>on Tue Jul 12 2016, Jordan Rose &lt;jordan_rose-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 30, 2016, at 12:30, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Jun 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;)<br>&gt;&gt;&gt;&gt; // Types<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Value<br>&gt;&gt;&gt;&gt; let x: UInt8 = 5<br>&gt;&gt;&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt;&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt;&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have listened. I have updated.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Types<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Value<br>&gt;&gt;&gt; let x: UInt8 = 5<br>&gt;&gt;&gt; MemoryLayout.of(x).size // 1<br>&gt;&gt;&gt; MemoryLayout.of(1).size // 8<br>&gt;&gt;&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt;&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;&gt; <br>&gt;&gt; I am still very skeptical that anyone needs the “Value” version, and as<br>&gt;&gt; long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>&gt;&gt; people complain.  You can still always write it yourself.<br>&gt;<br>&gt; Sorry to only come across this now. The proposed implementation does not work.<br>&gt;<br>&gt; public static func of(_ candidate : @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;   return MemoryLayout.init(candidate).dynamicType<br>&gt; }<br>&gt;<br>&gt; let value: Any = 2 // dynamicType is Int<br>&gt; let layout = MemoryLayout(value).dynamicType // inlined from above<br>&gt; let arrayType = [value].dynamicType<br>&gt;<br>&gt; ‘layout’ here is still &#39;MemoryLayout&lt;Any&gt;&#39;, not &#39;MemoryLayout&lt;Int&gt;&#39;,<br>&gt; for the same reason that ‘arrayType’ is ‘Array&lt;Any&gt;’ rather than<br>&gt; ‘Array&lt;Int&gt;’.<br></p><p>That is the right answer.  If you want to store an array of things with<br>the same type as “value” (== Any) you need that MemoryLayout.<br></p><p>&gt; If we want to support sizeofValue et al, we’d need to make these<br>&gt; instance properties rather than static properties, and may then want<br>&gt; to give up on the struct being generic.<br></p><p>That wouldn&#39;t change anything.  Nothing can possibly unwrap the Any and<br>find out the size of the thing.  The current sizeofValue() doesn&#39;t work<br>that way either:<br></p><p>  print(sizeofValue(1 as Int8 as Any))<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 12, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jul 12, 2016, at 17:03, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jul 12 2016, Jordan Rose &lt;jordan_rose-AT-apple.com &lt;http://at-apple.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 30, 2016, at 12:30, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Jun 29 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 29, 2016, at 3:59 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 29, 2016 at 4:50 PM, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; That’s the “as proposed” usage for getting the size of a value (from<br>&gt;&gt;&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &lt;https://gist.github.com/erica/57a64163870486468180b8bab8a6294e&gt;)<br>&gt;&gt;&gt;&gt;&gt; // Types<br>&gt;&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8 <br>&gt;&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Value<br>&gt;&gt;&gt;&gt;&gt; let x: UInt8 = 5<br>&gt;&gt;&gt;&gt;&gt; MemoryLayout(x).dynamicType.size // 1<br>&gt;&gt;&gt;&gt;&gt; MemoryLayout(&quot;hello&quot;).dynamicType.arraySpacing // 24<br>&gt;&gt;&gt;&gt;&gt; MemoryLayout(29.2).dynamicType.alignment // 8<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; At least, I thought that was the latest version of the proposal. Maybe I’ve gotten confused.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There must be a typo in these examples. `MemoryLayout(x.dynamicType).size` perhaps?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have listened. I have updated.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://gist.github.com/erica/57a64163870486468180b8bab8a6294e<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Types<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.size // 8<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.arraySpacing // 8<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;Int&gt;.alignment // 8<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Value<br>&gt;&gt;&gt;&gt; let x: UInt8 = 5<br>&gt;&gt;&gt;&gt; MemoryLayout.of(x).size // 1<br>&gt;&gt;&gt;&gt; MemoryLayout.of(1).size // 8<br>&gt;&gt;&gt;&gt; MemoryLayout.of(&quot;hello&quot;).arraySpacing // 24<br>&gt;&gt;&gt;&gt; MemoryLayout.of(29.2).alignment // 8<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am still very skeptical that anyone needs the “Value” version, and as<br>&gt;&gt;&gt; long as we&#39;re resyntaxing I am inclined to take it away and see how many<br>&gt;&gt;&gt; people complain.  You can still always write it yourself.<br>&gt;&gt; <br>&gt;&gt; Sorry to only come across this now. The proposed implementation does not work.<br>&gt;&gt; <br>&gt;&gt; public static func of(_ candidate : @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;&gt;  return MemoryLayout.init(candidate).dynamicType<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let value: Any = 2 // dynamicType is Int<br>&gt;&gt; let layout = MemoryLayout(value).dynamicType // inlined from above<br>&gt;&gt; let arrayType = [value].dynamicType<br>&gt;&gt; <br>&gt;&gt; ‘layout’ here is still &#39;MemoryLayout&lt;Any&gt;&#39;, not &#39;MemoryLayout&lt;Int&gt;&#39;,<br>&gt;&gt; for the same reason that ‘arrayType’ is ‘Array&lt;Any&gt;’ rather than<br>&gt;&gt; ‘Array&lt;Int&gt;’.<br>&gt; <br>&gt; That is the right answer.  If you want to store an array of things with<br>&gt; the same type as “value” (== Any) you need that MemoryLayout.<br>&gt; <br>&gt;&gt; If we want to support sizeofValue et al, we’d need to make these<br>&gt;&gt; instance properties rather than static properties, and may then want<br>&gt;&gt; to give up on the struct being generic.<br>&gt; <br>&gt; That wouldn&#39;t change anything.  Nothing can possibly unwrap the Any and<br>&gt; find out the size of the thing.  The current sizeofValue() doesn&#39;t work<br>&gt; that way either:<br>&gt; <br>&gt;  print(sizeofValue(1 as Int8 as Any))<br></p><p>Okay, I didn’t realize it was still looking for a static type. In that case there’s an even simpler implementation:<br></p><p>public static func of(_ candidate : @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>  return MemoryLayout&lt;T&gt;.self<br>}<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/ee79f07e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 12, 2016 at 02:00:00pm</p></header><div class="content"><p>We removed &quot;of&quot; from the final version:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br></p><p>And moved it to &quot;If for some reason, the core team decides that there&#39;s a compelling reason to include value calls, an implementation might look something like this&quot; instead.<br></p><p>Dave expressed that this should be something that operates on types not values.<br></p><p>-- E<br></p><p><br>&gt; On Jul 12, 2016, at 2:43 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Sorry to only come across this now. The proposed implementation does not work.<br>&gt; <br>&gt; public static func of(_ candidate : @autoclosure () -&gt; T) -&gt; MemoryLayout&lt;T&gt;.Type {<br>&gt;   return MemoryLayout.init(candidate).dynamicType<br>&gt; }<br>&gt; <br>&gt; let value: Any = 2 // dynamicType is Int<br>&gt; let layout = MemoryLayout(value).dynamicType // inlined from above<br>&gt; let arrayType = [value].dynamicType<br>&gt; <br>&gt; ‘layout’ here is still &#39;MemoryLayout&lt;Any&gt;&#39;, not &#39;MemoryLayout&lt;Int&gt;&#39;, for the same reason that ‘arrayType’ is ‘Array&lt;Any&gt;’ rather than ‘Array&lt;Int&gt;’.<br>&gt; <br>&gt; If we want to support sizeofValue et al, we’d need to make these instance properties rather than static properties, and may then want to give up on the struct being generic.<br>&gt; <br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/9f9b76a8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 30, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed Jun 29 2016, David Sweeris &lt;davesweeris-AT-mac.com&gt; wrote:<br></p><p>&gt; (While I was typing this up, I realized that the exact usage you’re<br>&gt; worried about, “MemoryLayout(Int.self).size” won’t compile, since<br>&gt; `MemoryLayout` currently doesn’t have instance properties. If you’re<br>&gt; worried about someone incorrectly typing out<br>&gt; “MemoryLayout(Int.self).dynamicType.size”, though…)<br>&gt;<br>&gt; I made a rather critical typo in my earlier reply. It should’ve been<br>&gt; “init(_: T.Type)”, instead of “init(_: T.self)”, which is to say this:<br>&gt; extension MemoryLayout { // assuming `MemoryLayout&lt;T&gt;` is already defined as proposed<br>&gt;     public init(_ : T.Type) {} // makes it so that `MemoryLayout(T.self)` still has the correct type for `T`<br>&gt; }<br>&gt;<br>&gt; Here are the results of some quick playgrounding in the WWDC Xcode 8 beta:<br>&gt; // without `init(_ : T.Type)` defined<br>&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt; MemoryLayout(Int8.self).dynamicType.size      // 8, almost certainly wrong<br>&gt; //MemoryLayout(Int8).dynamicType.size           // error<br>&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly worded<br>&gt; //MemoryLayout(Int8.Type).dynamicType.size      // error<br>&gt;<br>&gt; // with `init(_ : T.Type)` defined<br>&gt; MemoryLayout&lt;Int8&gt;.size                       // 1, correct<br>&gt; MemoryLayout(Int8.self).dynamicType.size      // 1, almost certainly correct<br>&gt; MemoryLayout(Int8).dynamicType.size           // 1, almost certainly correct<br>&gt; MemoryLayout(0 as Int8).dynamicType.size      // 1, correct<br>&gt; MemoryLayout&lt;Int8.Type&gt;.size                  // 8, correct<br>&gt; MemoryLayout(Int8.Type.self).dynamicType.size // 8, correct, but is oddly worded<br>&gt; MemoryLayout(Int8.Type).dynamicType.size      // 8, correct<br>&gt;<br>&gt; The only value that changes (aside from the errors) is the one “typo” that you were worried about.<br>&gt;<br>&gt; Do this change your mind? <br></p><p>No; it&#39;s too tricky. In your design MemoryLayout(x) now has two<br>different meanings depending on the type of x.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
