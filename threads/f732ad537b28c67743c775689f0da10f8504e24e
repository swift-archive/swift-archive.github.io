<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 08:00:00am</p></header><div class="content"><p>on Fri Jan 29 2016, Patrick Gili &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; My evaluation is inline below...<br></p><p>Thanks for your review, Patrick!<br></p><p>&gt;&gt; On Jan 22, 2016, at 4:02 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0023&quot;API Design Guidelines&quot; begins now and runs<br>&gt;&gt; through January 31, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager. When replying, please try to keep the proposal link<br>&gt;&gt; at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt; review through constructive criticism and, eventually, determine the<br>&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; Overall, I like the proposal. It provides sound guidance that can lead<br>&gt; to consistent code in practice. However, there are some issues and<br>&gt; concerns I have:<br>&gt;<br>&gt; - Under &quot;Fundamentals&quot;, there is a bullet called &quot;Write a<br>&gt; documentation comment...&quot;. Under this bullet, this is another bullet<br>&gt; called &quot;Use a single sentence fragment...&quot;. Why? <br></p><p>Because it leads to a concise, readable summary that works well with<br>tools and often fully describes the API.  It is also easy to do.  It&#39;s<br>crucial that the most important part of the documentation is also easy<br>to produce, or people won&#39;t do it.<br></p><p>&gt; I find sentence fragments often detract from clarity and concise<br>&gt; nature, which can lead to confusion.<br></p><p>We have lots of examples that follow this style in the Swift standard<br>library.  Can you point at some that are confusing, unclear, or not<br>concise because they use sentence fragments?<br></p><p>&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;Omit Needless Words&quot;. This<br>&gt; bullet states, &quot;Occasionally, repeating information is necessary to<br>&gt; avoid ambiguity...&quot; It would be useful to provide an example that the<br>&gt; reader can use to disambiguate this use case.<br></p><p>Point taken.<br></p><p>&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;Compensate for Weak Type<br>&gt; Information...&quot;. The example provided is confusing. First, it<br>&gt; contradicts the guidance relating to omitting needless words. It<br>&gt; suggests that<br>&gt;<br>&gt; func add(observer: NSObject, for keyPath: String)<br>&gt;<br>&gt; becomes<br>&gt;<br>&gt; func addObserver(_ observer: NSObject, forKeyPath: String)<br>&gt;<br>&gt; This results in &quot;Observer&quot; followed by &quot;observer&quot;. Why is this more<br>&gt; clear?<br></p><p>Because it&#39;s not the declaration site that matters; it&#39;s the use site.<br></p><p>Just to take the first use-site I could find with GitHub search, imagine<br>the code at<br>https://github.com/phileggel/Hangman/blob/c14fbbfd06e58527832c0634785aee45cb9e5e13/SwiftHangman/View%20Controllers/HMViewController.swift#L11<br>said &quot;add&quot; instead of &quot;addObserver&quot;.  Would it make sense?<br></p><p>&gt; In addition, I don&#39;t understand why it collapsed &quot;for keyPath&quot; to<br>&gt; &quot;forKeyPath&quot;. Perhaps an explanation would clarify?<br></p><p>Again, because it&#39;s the use-site that matters.  With &quot;for keyPath&quot;, at<br>the use-site, you&#39;d only see &quot;for&quot;.<br></p><p>&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;Uses of non-mutating<br>&gt; methods should read as noun phrases...&quot;. This bullet provides an<br>&gt; example of an exception. Why would calling this method firstAndLast()<br>&gt; have less clarity than split()? <br></p><p>Because, among other things, &quot;firstAndLast&quot; incorrectly implies you only<br>get two parts back.<br></p><p>&gt; Perhaps a better example is in order.<br></p><p>Suggestions welcomed.<br></p><p>&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;When a mutating method is<br>&gt; described by a very, name its non-mutating counterpart...&quot;. On the<br>&gt; surface this appears to provide good guidance, I think in practice it<br>&gt; becomes difficult and doesn&#39;t necessarily provide the desired<br>&gt; result. I think Ruby provides a better example of how the desired<br>&gt; result is very clear. In Ruby, the name of a mutating method is<br>&gt; designated by an exclamation point at the end of the name. <br></p><p>Yes, but we don&#39;t have the necessary language features<br>(e.g. https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst)<br>to do something like that today, so we need to use a naming convention<br>instead.<br></p><p>&gt; For example, myString.reverse() returns the value of the reversed<br>&gt; string, while myString.reverse!() mutates myString with the reversed<br>&gt; value. I&#39;m not necessarily proposing that Swift use the exclamation<br>&gt; point for this purpose (as Swift already uses this force unwrapping),<br>&gt; so much as I&#39;m proposing that you investigate how other languages<br>&gt; clearly disambiguate non-mutating and mutating methods.<br>&gt;<br>&gt; - Under &quot;Conventions&quot;, there is a bullet called &quot;Methods can share a<br>&gt; base name when they share the same basic meaning...&quot;. There are some<br>&gt; examples when this convention does not apply. <br></p><p>Example, please?  I have no idea what you might be referring to.<br></p><p>&gt; I think it would be helpful to illustrate to the reader how to address<br>&gt; these exceptions (i.e., do this, instead of that).<br>&gt;<br>&gt; - Under &quot;Conventions&quot;, there is a bullet called &quot;Prefer to follow the<br>&gt; language&#39;s defaults for the presence of argument labels&quot;. Be aware<br>&gt; that the current compiler issues the warning when the first argument<br>&gt; label is &quot;_&quot;, &quot;Extraneous &#39;_&#39; in parameter: &lt;parameter&gt; has no keyword<br>&gt; argument name&quot;. I would either like the compiler to not issue a<br>&gt; warning for this use case, or at least give the developer the means to<br>&gt; disable this warning.<br></p><p>I understand.  I don&#39;t think your request will get the traction you&#39;d<br>like if you don&#39;t expose it somewhere other than in this thread.  We&#39;re<br>not considering new language rules here.<br></p><p>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; I think publishing a clear set of guidelines is absolutely necessary.<br>&gt;<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Absolutely. Great job!<br>&gt;<br>&gt;&gt; If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt; I think all serious languages have a document that specifies a set of<br>&gt; guidelines with the intent of bringing consistency in the use of the<br>&gt; language. Languages that do not drive a set of best practices tend to<br>&gt; suffer, at least form a readability perspective. For as much as I like<br>&gt; Ruby, it lacks such a set of guidelines, which has resulted in the<br>&gt; community writing code that lacks the consistency that makes it easy<br>&gt; to read others&#39; code.<br>&gt;<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; As always, I read the proposal multiple times, which included reading<br>&gt; through the guidelines multiple times, sleeping on it, pondering it,<br>&gt; and finally writing my evaluation.<br>&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>January 29, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt;&gt; - Under &quot;Fundamentals&quot;, there is a bullet called &quot;Write a<br>&gt;&gt; documentation comment...&quot;. Under this bullet, this is another bullet<br>&gt;&gt; called &quot;Use a single sentence fragment...&quot;. Why? <br>&gt; <br>&gt; Because it leads to a concise, readable summary that works well with<br>&gt; tools and often fully describes the API.  It is also easy to do.  It&#39;s<br>&gt; crucial that the most important part of the documentation is also easy<br>&gt; to produce, or people won&#39;t do it.<br>&gt; <br>&gt;&gt; I find sentence fragments often detract from clarity and concise<br>&gt;&gt; nature, which can lead to confusion.<br>&gt; <br>&gt; We have lots of examples that follow this style in the Swift standard<br>&gt; library.  Can you point at some that are confusing, unclear, or not<br>&gt; concise because they use sentence fragments?<br>&gt; <br></p><p>In a previous email, Erica explained well the intent of the guideline by expanding on it, providing a good example and a good &quot;anti-example&quot;. I also spent some quality time with the standard library source and think I understand the intent: eliminating redundancy in the interest of maintaining focus.<br></p><p>&gt;&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;Compensate for Weak Type<br>&gt;&gt; Information...&quot;. The example provided is confusing. First, it<br>&gt;&gt; contradicts the guidance relating to omitting needless words. It<br>&gt;&gt; suggests that<br>&gt;&gt; <br>&gt;&gt; func add(observer: NSObject, for keyPath: String)<br>&gt;&gt; <br>&gt;&gt; becomes<br>&gt;&gt; <br>&gt;&gt; func addObserver(_ observer: NSObject, forKeyPath: String)<br>&gt;&gt; <br>&gt;&gt; This results in &quot;Observer&quot; followed by &quot;observer&quot;. Why is this more<br>&gt;&gt; clear?<br>&gt; <br>&gt; Because it&#39;s not the declaration site that matters; it&#39;s the use site.<br>&gt; <br>&gt; Just to take the first use-site I could find with GitHub search, imagine<br>&gt; the code at<br>&gt; https://github.com/phileggel/Hangman/blob/c14fbbfd06e58527832c0634785aee45cb9e5e13/SwiftHangman/View%20Controllers/HMViewController.swift#L11 &lt;https://github.com/phileggel/Hangman/blob/c14fbbfd06e58527832c0634785aee45cb9e5e13/SwiftHangman/View%20Controllers/HMViewController.swift#L11&gt;<br>&gt; said &quot;add&quot; instead of &quot;addObserver&quot;.  Would it make sense?<br></p><p>These terms, &quot;declaration site&quot; and &quot;use site&quot; are new to me. Could you please provide a brief explanation?<br></p><p>Nevertheless, the code that you have reference clarifies the point.<br></p><p>&gt;&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;Uses of non-mutating<br>&gt;&gt; methods should read as noun phrases...&quot;. This bullet provides an<br>&gt;&gt; example of an exception. Why would calling this method firstAndLast()<br>&gt;&gt; have less clarity than split()? <br>&gt; <br>&gt; Because, among other things, &quot;firstAndLast&quot; incorrectly implies you only<br>&gt; get two parts back.<br></p><p>My misunderstanding. I now see you were referring to String.split().<br></p><p>&gt; <br>&gt;&gt; Perhaps a better example is in order.<br>&gt; <br>&gt; Suggestions welcomed.<br></p><p>The example is fine, but confusing because it taken out-of-context. Maybe expand the example to read more like this:<br></p><p>let fullName = &quot;Johnny Appleseed&quot;<br>let firstAndLast = fullName.split()<br></p><p>&gt;&gt; - Under &quot;Naming&quot;, there is a bullet called &quot;When a mutating method is<br>&gt;&gt; described by a very, name its non-mutating counterpart...&quot;. On the<br>&gt;&gt; surface this appears to provide good guidance, I think in practice it<br>&gt;&gt; becomes difficult and doesn&#39;t necessarily provide the desired<br>&gt;&gt; result. I think Ruby provides a better example of how the desired<br>&gt;&gt; result is very clear. In Ruby, the name of a mutating method is<br>&gt;&gt; designated by an exclamation point at the end of the name. <br>&gt; <br>&gt; Yes, but we don&#39;t have the necessary language features<br>&gt; (e.g. https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;)<br>&gt; to do something like that today, so we need to use a naming convention<br>&gt; instead.<br></p><p>I like this proposal. However, it sounds like this is something that won&#39;t be in Swift 3?<br></p><p>&gt;&gt; For example, myString.reverse() returns the value of the reversed<br>&gt;&gt; string, while myString.reverse!() mutates myString with the reversed<br>&gt;&gt; value. I&#39;m not necessarily proposing that Swift use the exclamation<br>&gt;&gt; point for this purpose (as Swift already uses this force unwrapping),<br>&gt;&gt; so much as I&#39;m proposing that you investigate how other languages<br>&gt;&gt; clearly disambiguate non-mutating and mutating methods.<br>&gt;&gt; <br>&gt;&gt; - Under &quot;Conventions&quot;, there is a bullet called &quot;Methods can share a<br>&gt;&gt; base name when they share the same basic meaning...&quot;. There are some<br>&gt;&gt; examples when this convention does not apply. <br>&gt; <br>&gt; Example, please?  I have no idea what you might be referring to.<br>&gt; <br>&gt;&gt; I think it would be helpful to illustrate to the reader how to address<br>&gt;&gt; these exceptions (i.e., do this, instead of that).<br></p><p>My apologies, my thought was poorly expressed. Let me try again. The guideline provides some examples of when methods should not share a base name. For example,<br>extension Database {<br>  /// Rebuilds the database&#39;s search index<br>  func index() { ... }<br></p><p>  /// Returns the `n`th row in the given table.<br>  func index(n: Int, inTable: TableID) -&gt; TableRow { ... }<br>}<br>A beginner is going to ask, &quot;If this isn&#39;t what I&#39;m supposed to do, then what is acceptable?&quot; It might be useful to expand the guideline to help the beginner. This last example was somewhat obvious, but the next example is necessarily so obvious:<br>extension Box {<br>  /// Returns the `Int` stored in `self`, if any, and<br>  /// `nil` otherwise.<br>  func value() -&gt; Int? { ... }<br></p><p>  /// Returns the `String` stored in `self`, if any, and<br>  /// `nil` otherwise.<br>  func value() -&gt; String? { ... }<br>}<br>&gt;&gt; <br>&gt;&gt; - Under &quot;Conventions&quot;, there is a bullet called &quot;Prefer to follow the<br>&gt;&gt; language&#39;s defaults for the presence of argument labels&quot;. Be aware<br>&gt;&gt; that the current compiler issues the warning when the first argument<br>&gt;&gt; label is &quot;_&quot;, &quot;Extraneous &#39;_&#39; in parameter: &lt;parameter&gt; has no keyword<br>&gt;&gt; argument name&quot;. I would either like the compiler to not issue a<br>&gt;&gt; warning for this use case, or at least give the developer the means to<br>&gt;&gt; disable this warning.<br>&gt; <br>&gt; I understand.  I don&#39;t think your request will get the traction you&#39;d<br>&gt; like if you don&#39;t expose it somewhere other than in this thread.  We&#39;re<br>&gt; not considering new language rules here.<br></p><p>Point taken.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/a31e6523/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
