<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 10, 2016 at 08:00:00pm</p></header><div class="content"><p>I have built the Feb 8th snapshot into /usr/local on Linux 64.  I have enabled libdispatch, and it&#39;s installed to /usr/local as well.  Additionally, I cherry-picked the PR https://github.com/apple/swift/pull/1212 &lt;https://github.com/apple/swift/pull/1212&gt;.  It compiles, installs, everything&#39;s fine.<br></p><p>My /usr/local/include/dispatch directory has<br></p><p># ls /usr/local/include/dispatch/<br>Dispatch.swiftdoc     base.h   data.h	   group.h	    io.h	object.h  queue.h      source.h<br>Dispatch.swiftmodule  block.h  dispatch.h  introspection.h  module.map	once.h	  semaphore.h  time.h<br></p><p>Now I attempt to use Dispatch via<br></p><p>swift -Xcc -fblocks -L/usr/local/lib -I /usr/local/include/dispatch -lBlocksRuntime -L/usr/lib/x86_64-linux-gnu<br></p><p>This is because:<br></p><p>-Xcc -fblocks to pick up blocks support<br>-I /usr/local/include/dispatch to pick up /usr/local/include/dispatch/Dispatch.swiftmodule (as well as module.modulemap etc.)<br>-lBlocksRuntime -L/usr/lib/x86_64-linux-gnu to pick up blocks runtime<br></p><p>Okay.  So now I import Dispatch:<br></p><p>Welcome to Swift version 3.0-dev (LLVM a7663bb722, Clang 4ca3c7fa28, Swift 319a912638). Type :help for assistance.<br>  1&gt; import Dispatch<br></p><p>What I find is about half the time, this works just fine.  The other half the time, I hit an import error:<br></p><p>&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt; #include &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt;          ^<br>&gt; /usr/local/include/dispatch/dispatch.h:34:10: note: in file included from /usr/local/include/dispatch/dispatch.h:34:<br>&gt; #include &lt;fcntl.h&gt;<br>&gt;          ^<br>&gt; /usr/include/fcntl.h:67:11: note: in file included from /usr/include/fcntl.h:67:<br>&gt; # include &lt;time.h&gt;<br>&gt;           ^<br>&gt; /usr/local/include/dispatch/time.h:25:2: error: &quot;Please #include &lt;dispatch/dispatch.h&gt; instead of this file directly.&quot;<br>&gt; #error &quot;Please #include &lt;dispatch/dispatch.h&gt; instead of this file directly.&quot;<br>&gt;  ^<br></p><p>What seems to be happening here is that we interpret /usr/include/fcntl.h&#39;s #include &lt;time.h&gt; to be /usr/local/include/dispatch/time.h instead of /usr/include/time.h.<br></p><p>This behavior is puzzling to me.<br></p><p>I don&#39;t understand why the behavior is nondeterministic.  Shouldn&#39;t an import failure be deterministic behavior?  Or are we just trying imports in random order?  That seems like a bad implementation.<br>I don&#39;t understand how to make sure fcntl&#39;s `time.h` goes to the right time.h without also losing Dispatch.swiftmodule and module.modulemap in the exchange.<br></p><p>Thanks in advance.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160210/1703e59f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>February 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Feb 10, 2016, at 6:05 PM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I have built the Feb 8th snapshot into /usr/local on Linux 64.  I have enabled libdispatch, and it&#39;s installed to /usr/local as well.  Additionally, I cherry-picked the PR https://github.com/apple/swift/pull/1212 &lt;https://github.com/apple/swift/pull/1212&gt;.  It compiles, installs, everything&#39;s fine.<br>&gt; <br>&gt; My /usr/local/include/dispatch directory has<br>&gt; <br>&gt; # ls /usr/local/include/dispatch/<br>&gt; Dispatch.swiftdoc     base.h   data.h	   group.h	    io.h	object.h  queue.h      source.h<br>&gt; Dispatch.swiftmodule  block.h  dispatch.h  introspection.h  module.map	once.h	  semaphore.h  time.h<br>&gt; <br>&gt; Now I attempt to use Dispatch via<br>&gt; <br>&gt; swift -Xcc -fblocks -L/usr/local/lib -I /usr/local/include/dispatch -lBlocksRuntime -L/usr/lib/x86_64-linux-gnu<br>&gt; <br>&gt; This is because:<br>&gt; <br>&gt; -Xcc -fblocks to pick up blocks support<br>&gt; -I /usr/local/include/dispatch to pick up /usr/local/include/dispatch/Dispatch.swiftmodule (as well as module.modulemap etc.)<br>&gt; -lBlocksRuntime -L/usr/lib/x86_64-linux-gnu to pick up blocks runtime<br>&gt; <br>&gt; Okay.  So now I import Dispatch:<br>&gt; <br>&gt; Welcome to Swift version 3.0-dev (LLVM a7663bb722, Clang 4ca3c7fa28, Swift 319a912638). Type :help for assistance.<br>&gt;   1&gt; import Dispatch<br>&gt; <br>&gt; What I find is about half the time, this works just fine.  The other half the time, I hit an import error:<br>&gt; <br>&gt;&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt;&gt; #include &quot;/usr/local/include/dispatch/dispatch.h&quot;<br>&gt;&gt;          ^<br>&gt;&gt; /usr/local/include/dispatch/dispatch.h:34:10: note: in file included from /usr/local/include/dispatch/dispatch.h:34:<br>&gt;&gt; #include &lt;fcntl.h&gt;<br>&gt;&gt;          ^<br>&gt;&gt; /usr/include/fcntl.h:67:11: note: in file included from /usr/include/fcntl.h:67:<br>&gt;&gt; # include &lt;time.h&gt;<br>&gt;&gt;           ^<br>&gt;&gt; /usr/local/include/dispatch/time.h:25:2: error: &quot;Please #include &lt;dispatch/dispatch.h&gt; instead of this file directly.&quot;<br>&gt;&gt; #error &quot;Please #include &lt;dispatch/dispatch.h&gt; instead of this file directly.&quot;<br>&gt;&gt;  ^<br>&gt; <br>&gt; What seems to be happening here is that we interpret /usr/include/fcntl.h&#39;s #include &lt;time.h&gt; to be /usr/local/include/dispatch/time.h instead of /usr/include/time.h.<br>&gt; <br>&gt; This behavior is puzzling to me.<br>&gt; <br>&gt; I don&#39;t understand why the behavior is nondeterministic.  Shouldn&#39;t an import failure be deterministic behavior?  Or are we just trying imports in random order?  That seems like a bad implementation.<br>&gt; I don&#39;t understand how to make sure fcntl&#39;s `time.h` goes to the right time.h without also losing Dispatch.swiftmodule and module.modulemap in the exchange.<br></p><p>The -I/usr/local/include/dispatch probably sees time.h in there and thinks that is part of a system root header? Just a speculation.<br></p><p>&gt; <br>&gt; Thanks in advance.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160210/8c30a997/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 10, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 10, 2016, at 8:08 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; The -I/usr/local/include/dispatch probably sees time.h in there and thinks that is part of a system root header? Just a speculation.<br></p><p>I agree 100%, but I don&#39;t know how to fix it.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160210/62066b49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fd76948bee17f4c4065776a13f74e35?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Daniel A. Steffen</string> &lt;dsteffen at apple.com&gt;<p>February 10, 2016 at 08:00:00pm</p></header><div class="content"><p>having -I /usr/local/include/dispatch doesn’t seem right to me, the C header include convention is all &lt;dispatch/*.h&gt; so the dispatch/ directory itself should not be part of the search path. <br></p><p>maybe that means that something different needs to happen to pick up the module files (AFAIK on Darwin this works differently by having a toplevel modulefile in /usr/include that references the submodules, I don’t know how modules are intended to work on other platforms)<br></p><p>Daniel<br></p><p>&gt; On Feb 10, 2016, at 18:09, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 10, 2016, at 8:08 PM, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The -I/usr/local/include/dispatch probably sees time.h in there and thinks that is part of a system root header? Just a speculation.<br>&gt; <br>&gt; I agree 100%, but I don&#39;t know how to fix it.<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160210/19b567cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>February 10, 2016 at 08:00:00pm</p></header><div class="content"><p>I don&#39;t have the full context here, but...<br></p><p>For C and regular header include style, it works roughly the same on linux, except that we don&#39;t have all the modules declared in one level. However:<br></p><p>  #include &lt;dispatch/dispatch.h&gt;<br></p><p>will cause the compiler to look inside the dispatch subdirectory, at which point it should seem the module map file and then load dispatch as a module.<br></p><p>However, this doesn&#39;t work for Swift because Swift doesn&#39;t go through the header search path, it goes through the &quot;module search&quot; path (like @import foo in Obj-C). For that to work, Clang will need to know to preload the module map file in order to understand how to map dispatch. Clang has `-fmodule-map-file=&lt;path&gt;` to cause Clang to scan (not necessarily load) a module map in advance.<br></p><p> - Daniel<br></p><p>&gt; On Feb 10, 2016, at 8:31 PM, Daniel A. Steffen via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; having -I /usr/local/include/dispatch doesn’t seem right to me, the C header include convention is all &lt;dispatch/*.h&gt; so the dispatch/ directory itself should not be part of the search path. <br>&gt; <br>&gt; maybe that means that something different needs to happen to pick up the module files (AFAIK on Darwin this works differently by having a toplevel modulefile in /usr/include that references the submodules, I don’t know how modules are intended to work on other platforms)<br>&gt; <br>&gt; Daniel<br>&gt; <br>&gt;&gt; On Feb 10, 2016, at 18:09, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 10, 2016, at 8:08 PM, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The -I/usr/local/include/dispatch probably sees time.h in there and thinks that is part of a system root header? Just a speculation.<br>&gt;&gt; <br>&gt;&gt; I agree 100%, but I don&#39;t know how to fix it.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160210/b4fa8458/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>February 11, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On Feb 10, 2016, at 10:31 PM, Daniel A. Steffen &lt;dsteffen at apple.com&gt; wrote:<br>&gt; <br>&gt; having -I /usr/local/include/dispatch doesn’t seem right to me, the C header include convention is all &lt;dispatch/*.h&gt; so the dispatch/ directory itself should not be part of the search path. <br>&gt; <br></p><p>The problem is that to pick up a modulemap / swiftmodule file right now in Swift, we need &quot;-I /path/to&quot; where /path/to contains &quot;module.modulemap&quot; / &quot;foo.swiftmodule&quot;<br></p><p>Meanwhile passing &quot;-I /path/to&quot; also will pick up all header files in that directory, which here includes &quot;time.h&quot;.<br></p><p>I personally think that behavior (the Swift compiler behavior) is wrong to couple these two ideas.  But arguing the compiler is wrong is probably above my pay grade.<br></p><p>Anyway, as long as this is the compiler behavior, we can&#39;t have &quot;time.h&quot; in the same directory as the modulemap.  So either<br></p><p>we put swiftmodule / modulemap in /usr/local/include/dispatch and headers into /usr/local/include/dispatch/headers<br>we put headers in /usr/local/include/dispatch and swiftmodule/modulemap into /usr/local/include/dispatch/module<br></p><p>I don&#39;t know which one to do, and I&#39;m bad at wrestling autotools, so I&#39;m not sure I can PR.<br></p><p>I&#39;m working around by arbitrarily picking one of these resolutions and shell scripting it as part of my install.<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/ae46b534/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>February 11, 2016 at 07:00:00am</p></header><div class="content"><p>swift-corelibs-dev-bounces at swift.org wrote on 02/11/2016 06:18:58 AM:<br></p><p>&gt; From: Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt;<br>&gt; To: &quot;Daniel A. Steffen&quot; &lt;dsteffen at apple.com&gt;<br>&gt; Cc: swift-corelibs-dev at swift.org<br>&gt; Date: 02/11/2016 06:19 AM<br>&gt; Subject: Re: [swift-corelibs-dev] libdispatch import order /<br>nondeterminism<br>&gt; Sent by: swift-corelibs-dev-bounces at swift.org<br>&gt;<br>&gt; On Feb 10, 2016, at 10:31 PM, Daniel A. Steffen &lt;dsteffen at apple.com&gt;<br>wrote:<br>&gt;<br>&gt; having -I /usr/local/include/dispatch doesn’t seem right to me, the<br>&gt; C header include convention is all &lt;dispatch/*.h&gt; so the dispatch/<br>&gt; directory itself should not be part of the search path.<br>&gt;<br>&gt; The problem is that to pick up a modulemap / swiftmodule file right<br>&gt; now in Swift, we need &quot;-I /path/to&quot; where /path/to contains<br>&gt; &quot;module.modulemap&quot; / &quot;foo.swiftmodule&quot;<br>&gt;<br>&gt; Meanwhile passing &quot;-I /path/to&quot; also will pick up all header files<br>&gt; in that directory, which here includes &quot;time.h&quot;.<br>&gt;<br>&gt; I personally think that behavior (the Swift compiler behavior) is<br>&gt; wrong to couple these two ideas.  But arguing the compiler is wrong<br>&gt; is probably above my pay grade.<br>&gt;<br>&gt; Anyway, as long as this is the compiler behavior, we can&#39;t have<br>&gt; &quot;time.h&quot; in the same directory as the modulemap.  So either<br>&gt;<br>&gt; we put swiftmodule / modulemap in /usr/local/include/dispatch and<br>&gt; headers into /usr/local/include/dispatch/headers<br>&gt; we put headers in /usr/local/include/dispatch and swiftmodule/<br>&gt; modulemap into /usr/local/include/dispatch/module<br>&gt;<br>&gt; I don&#39;t know which one to do, and I&#39;m bad at wrestling autotools, so<br>&gt; I&#39;m not sure I can PR.<br>&gt;<br>&gt; I&#39;m working around by arbitrarily picking one of these resolutions<br>&gt; and shell scripting it as part of my install.<br>&gt;<br></p><p>I&#39;m working on changes so that when built with swift/utils/build-script the<br>pieces of libdispatch get properly placed in the installable Swift package<br>that is being built.   I think this is actually where we want to get to,<br>and it avoids needing to pass the -I arguments to swiftc.  When the bits<br>are placed properly in the Swift install, swiftc is finding them without<br>help.<br></p><p>I think I&#39;m on track to submit a PR later today.  So far, changes are<br>confined to in the autotools setup in libdispatch.<br></p><p><br>--dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/b8dc5564/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;ve done some exploring this morning (see branch [1]).  It improves<br>things, but I&#39;m hoping we can do better, which is why there isn&#39;t a PR yet.<br></p><p>The branch does two things:<br>	(a) Add a configure option to cause &quot;make install&quot; to install into a<br>directory structure that matches the one used for a Swift installable<br>package instead of its default structure.<br>	(b) Some cleanup of how module.map is generated and where it is<br>installed normally based on this email chain.<br></p><p>Part (a) seems to be working fine.  I want to do one more test-build of<br>Swift from scratch to make sure, but yesterday I was getting a Swift build<br>where the resulting swiftc could successfully fully import Dispatch without<br>any extra command line arguments.<br></p><p>Part (b) isn&#39;t any worse and maybe is marginally better, but is not really<br>doing what we want.  In particular, with no extra command line arguments,<br>swiftc seems to be finding the module.map file and importing the C header<br>files, but it isn&#39;t finding Dispatch.swiftmodule.  As a result,<br>dispatch_group_async (for example) is available to the Swift program, but<br>DISPATCH_QUEUE_CONCURRENT is not.<br></p><p>If I give swiftc -I/usr/local/include/dispatch  then it finds<br>Dispatch.swiftmodule and DISPATCH_QUEUE_CONCURRENT is available.<br></p><p>Giving -Xcc -fmodule-module-map=&lt;file&gt; does not help;<br>DISPATCH_QUEUE_CONCURRENT is not available.<br></p><p>In a &quot;normal&quot; install we get in PREFIX (/usr/local by default).<br>	include/dispatch/<br>		*.h from dispatch directory<br>		module.map<br>		Dispatch.swiftmodule<br>		Dispatch.swiftdoc<br>	include/os<br>		*.h from os directory<br>	lib<br>		libdispatch.so<br></p><p><br>I&#39;ve tried putting Dispatch.swiftmodule in a variety of places in<br>the /usr/include tree (lib, lib/x86_64), but none of them seem to help.<br></p><p>Any thoughts on other things to try before submitting a PR?<br></p><p>thanks,<br></p><p>--dave<br></p><p>[1]<br>https://github.com/dgrove-oss/swift-corelibs-libdispatch/tree/swift-overlay-cp2<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/6ef19997/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fd76948bee17f4c4065776a13f74e35?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Daniel A. Steffen</string> &lt;dsteffen at apple.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 3:18, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 10, 2016, at 10:31 PM, Daniel A. Steffen &lt;dsteffen at apple.com &lt;mailto:dsteffen at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; having -I /usr/local/include/dispatch doesn’t seem right to me, the C header include convention is all &lt;dispatch/*.h&gt; so the dispatch/ directory itself should not be part of the search path. <br>&gt;&gt; <br>&gt; <br>&gt; The problem is that to pick up a modulemap / swiftmodule file right now in Swift, we need &quot;-I /path/to&quot; where /path/to contains &quot;module.modulemap&quot; / &quot;foo.swiftmodule&quot;<br>&gt; <br>&gt; Meanwhile passing &quot;-I /path/to&quot; also will pick up all header files in that directory, which here includes &quot;time.h&quot;.<br>&gt; <br>&gt; I personally think that behavior (the Swift compiler behavior) is wrong to couple these two ideas.  But arguing the compiler is wrong is probably above my pay grade.<br>&gt; <br>&gt; Anyway, as long as this is the compiler behavior, we can&#39;t have &quot;time.h&quot; in the same directory as the modulemap.  So either<br>&gt; <br>&gt; we put swiftmodule / modulemap in /usr/local/include/dispatch and headers into /usr/local/include/dispatch/headers<br></p><p>I doubt that is a very feasible option, we need to keep the installed library compatible with C clients (the CF pieces in corelibs-foundation for one) and we’d like to diverge from the Darwin install layout as little as possible<br></p><p>&gt; we put headers in /usr/local/include/dispatch and swiftmodule/modulemap into /usr/local/include/dispatch/module<br>&gt; <br>&gt; I don&#39;t know which one to do, and I&#39;m bad at wrestling autotools, so I&#39;m not sure I can PR.<br>&gt; <br>&gt; I&#39;m working around by arbitrarily picking one of these resolutions and shell scripting it as part of my install.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/be6a07ee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>I missed that a swift module was also being installed here. +Jordan, who probably has an opinion on how this should be done.<br></p><p>My guess is that we want a story where this all works when installed as part of a swift toolchain, and where it would be bundle inside the compiler like an overlay.<br></p><p>I don&#39;t think we have a real story for installing .swiftmodule files, because that usually isn&#39;t safe (they are tied to the compiler version).<br></p><p> - Daniel<br></p><p>&gt; On Feb 11, 2016, at 11:00 AM, Daniel A. Steffen via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 11, 2016, at 3:18, Drew Crawford &lt;drew at sealedabstract.com &lt;mailto:drew at sealedabstract.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 10, 2016, at 10:31 PM, Daniel A. Steffen &lt;dsteffen at apple.com &lt;mailto:dsteffen at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; having -I /usr/local/include/dispatch doesn’t seem right to me, the C header include convention is all &lt;dispatch/*.h&gt; so the dispatch/ directory itself should not be part of the search path. <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The problem is that to pick up a modulemap / swiftmodule file right now in Swift, we need &quot;-I /path/to&quot; where /path/to contains &quot;module.modulemap&quot; / &quot;foo.swiftmodule&quot;<br>&gt;&gt; <br>&gt;&gt; Meanwhile passing &quot;-I /path/to&quot; also will pick up all header files in that directory, which here includes &quot;time.h&quot;.<br>&gt;&gt; <br>&gt;&gt; I personally think that behavior (the Swift compiler behavior) is wrong to couple these two ideas.  But arguing the compiler is wrong is probably above my pay grade.<br>&gt;&gt; <br>&gt;&gt; Anyway, as long as this is the compiler behavior, we can&#39;t have &quot;time.h&quot; in the same directory as the modulemap.  So either<br>&gt;&gt; <br>&gt;&gt; we put swiftmodule / modulemap in /usr/local/include/dispatch and headers into /usr/local/include/dispatch/headers<br>&gt; <br>&gt; I doubt that is a very feasible option, we need to keep the installed library compatible with C clients (the CF pieces in corelibs-foundation for one) and we’d like to diverge from the Darwin install layout as little as possible<br>&gt; <br>&gt;&gt; we put headers in /usr/local/include/dispatch and swiftmodule/modulemap into /usr/local/include/dispatch/module<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know which one to do, and I&#39;m bad at wrestling autotools, so I&#39;m not sure I can PR.<br>&gt;&gt; <br>&gt;&gt; I&#39;m working around by arbitrarily picking one of these resolutions and shell scripting it as part of my install.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/e57733b2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch import order / nondeterminism</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>February 11, 2016 at 02:00:00pm</p></header><div class="content"><p>It certainly is easier to only support the scenario when libdispatch with<br>embedded Swift overlay is being built/installed as part of a complete Swift<br>toolchain.   If that is all that can be robustly supported<br>(because .swiftmodule is tied to the compiler version), then it will be<br>easy to adapt what I&#39;ve done to only support that scenario.   Is that what<br>I should do?<br></p><p>--dave<br></p><p><br></p><p>From:	Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>To:	&quot;Daniel A. Steffen&quot; &lt;dsteffen at apple.com&gt;, Jordan Rose<br>            &lt;jordan_rose at apple.com&gt;, David P Grove/Watson/IBM at IBMUS<br>Cc:	Drew Crawford &lt;drew at sealedabstract.com&gt;,<br>            swift-corelibs-dev at swift.org<br>Date:	02/11/2016 02:04 PM<br>Subject:	Re: [swift-corelibs-dev] libdispatch import order /<br>            nondeterminism<br>Sent by:	daniel_dunbar at apple.com<br></p><p><br></p><p>I missed that a swift module was also being installed here. +Jordan, who<br>probably has an opinion on how this should be done.<br></p><p>My guess is that we want a story where this all works when installed as<br>part of a swift toolchain, and where it would be bundle inside the compiler<br>like an overlay.<br></p><p>I don&#39;t think we have a real story for installing .swiftmodule files,<br>because that usually isn&#39;t safe (they are tied to the compiler version).<br></p><p> - Daniel<br></p><p>      On Feb 11, 2016, at 11:00 AM, Daniel A. Steffen via<br>      swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br></p><p><br>            On Feb 11, 2016, at 3:18, Drew Crawford &lt;<br>            drew at sealedabstract.com&gt; wrote:<br></p><p><br>                  On Feb 10, 2016, at 10:31 PM, Daniel A. Steffen &lt;<br>                  dsteffen at apple.com&gt; wrote:<br></p><p>                  having -I /usr/local/include/dispatch doesn’t seem right<br>                  to me, the C header include convention is all<br>                  &lt;dispatch/*.h&gt; so the dispatch/ directory itself should<br>                  not be part of the search path.<br></p><p><br>            The problem is that to pick up a modulemap / swiftmodule file<br>            right now in Swift, we need &quot;-I /path/to&quot; where /path/to<br>            contains &quot;module.modulemap&quot; / &quot;foo.swiftmodule&quot;<br></p><p>            Meanwhile passing &quot;-I /path/to&quot; also will pick up all header<br>            files in that directory, which here includes &quot;time.h&quot;.<br></p><p>            I personally think that behavior (the Swift compiler behavior)<br>            is wrong to couple these two ideas.  But arguing the compiler<br>            is wrong is probably above my pay grade.<br></p><p>            Anyway, as long as this is the compiler behavior, we can&#39;t have<br>            &quot;time.h&quot; in the same directory as the modulemap.  So either<br></p><p>                  we put swiftmodule / modulemap<br>                  in /usr/local/include/dispatch and headers<br>                  into /usr/local/include/dispatch/headers<br></p><p>      I doubt that is a very feasible option, we need to keep the installed<br>      library compatible with C clients (the CF pieces in<br>      corelibs-foundation for one) and we’d like to diverge from the Darwin<br>      install layout as little as possible<br></p><p>                  we put headers in /usr/local/include/dispatch and<br>                  swiftmodule/modulemap<br>                  into /usr/local/include/dispatch/module<br></p><p>            I don&#39;t know which one to do, and I&#39;m bad at wrestling<br>            autotools, so I&#39;m not sure I can PR.<br></p><p>            I&#39;m working around by arbitrarily picking one of these<br>            resolutions and shell scripting it as part of my install.<br></p><p><br></p><p><br></p><p>      _______________________________________________<br>      swift-corelibs-dev mailing list<br>      swift-corelibs-dev at swift.org<br>      https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/8739ed2a/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: graycol.gif<br>Type: image/gif<br>Size: 105 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160211/8739ed2a/attachment.gif&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
