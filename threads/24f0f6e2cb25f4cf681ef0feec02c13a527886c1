<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0055 Make unsafe pointer nullability explicit using Optional</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 31, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Mar 30 2016, Jeremy Pereira &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 25 Mar 2016, at 23:00, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; In the low level world, there is no such thing as an invalid<br>&gt;&gt;&gt; address; both 0x0 and ~0x0 are perfectly valid byte pointers. So<br>&gt;&gt;&gt; using something else than 0x0 for Swift invalid pointer just<br>&gt;&gt;&gt; shuffle the problem around.<br>&gt;&gt; <br>&gt;&gt; Let me state it this way: You cannot write a fully-conforming C<br>&gt;&gt; compiler for a platform which does not have some way to represent an<br>&gt;&gt; invalid pointer.<br>&gt;<br>&gt; This is not true.<br>&gt;<br>&gt; In both C99 and C11, the result of dereferencing an invalid pointer<br>&gt; (of which the null pointer is one example) <br></p><p>The null pointer is valid, it&#39;s just not dereferenceable.  Invalid<br>pointers can&#39;t even be compared with one another.<br></p><p>&gt; is undefined behaviour. This means it is perfectly fine for the null<br>&gt; pointer to be represented by a bit pattern that is also a valid<br>&gt; address and for the compiler not to bother generating a check that the<br>&gt; pointer is not null.<br>&gt;<br>&gt;&gt; However C does it, Swift can do the same thing.<br>&gt;<br>&gt; C does it by sweeping the problem under the carpet of undefined behaviour.<br>&gt;<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
