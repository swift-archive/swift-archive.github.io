<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 12, 2016 at 11:00:00pm</p></header><div class="content"><p>on Wed Oct 12 2016, Nate Cook &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Oct 12, 2016, at 9:32 AM, plx via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The issue addressed is real; I’m not sure this is the best approach. <br>&gt;&gt; <br>&gt;&gt; In particular, unless I’m missing something obvious, the ownership strategy here would have to be:<br>&gt;&gt; <br>&gt;&gt; - `DictionaryKeys` and `DictionaryValues` would each induce the expected +1 retain on the<br>&gt; underlying storage<br>&gt;&gt; - `DictionaryValues`’s mutations avoid triggering COW on the underlying storage by skipping the<br>&gt; usual ownership check<br>&gt;&gt; <br>&gt;&gt; …as otherwise it’s unclear how you’d do those in-place mutations<br>&gt;&gt; (and this seems to be how the implementation works...is that<br>&gt;&gt; correct?).<br>&gt;<br>&gt; That&#39;s not quite right—when you access these views through the<br>&gt; dictionary, they do not increment the storage retain count. This is<br>&gt; the way slicing and views currently work on other mutable types. For<br>&gt; example, when you reverse a slice of an array in-place, the slice<br>&gt; doesn&#39;t get its own duplicate storage:<br>&gt;<br>&gt; var a = Array(1...10)<br>&gt; a[0..&lt;5].reverse()<br>&gt; a == [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]<br></p><p>Oh, yes it certainly does.  This is currently inefficient because<br>pinning is tied to addressors and addressors can only return pointers to<br>things that actually exist in memory somewhere.  The slice doesn&#39;t.<br></p><p><br>&gt; However, if you create a new variable out of the slice and reverse that, the slice does get its own<br>&gt; storage:<br>&gt;<br>&gt; var b = Array(1...10)<br>&gt; var bSlice = b[0..&lt;5]<br>&gt; bSlice.reverse()<br>&gt; bSlice == [5, 4, 3, 2, 1]<br>&gt; b == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br></p><p>This doesn&#39;t demonstrate anything; you&#39;re just showing the effects of<br>value semantics.  If you go<br></p><p> b[0..&lt;5] = bSlice<br></p><p>you&#39;ll then have<br></p><p> b == [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]<br></p><p>And that is exactly what happens in the first example.<br></p><p>This is a major flaw that prevents Swift&#39;s collection model from being<br>fully general and efficient.  I think we will be fixing it, by fixing<br>the way inout works, as a consequence of the work on ownership, for<br>Swift 4.  But as noted elsewhere, that&#39;s a wild-ass guess at the moment.<br></p><p>&gt; Strings and their views work the same way:<br>&gt;<br>&gt; var s = &quot;abcdefg&quot;<br>&gt; s.characters.append(&quot;H&quot;)   // storage updated in place<br>&gt; s == &quot;abcdefgH&quot;<br>&gt;<br>&gt; var sChars = s.characters  // no copy yet<br>&gt; sChars.removeLast()     // sChars gets its own copy before the mutation<br>&gt; s == &quot;abcdefgH&quot;<br>&gt; String(sChars) == &quot;abcdefg&quot;<br>&gt;<br>&gt; var t = s   // no copy yet<br>&gt; t.characters.removeLast()  // t gets a new copy here<br>&gt; s == &quot;abcdefgH&quot;<br>&gt; t == &quot;abcdefg&quot;<br>&gt;<br>&gt; I don&#39;t know the name of the compiler feature that enables this, but<br>&gt; it&#39;s a critical part of the way views and slices work.<br></p><p>I wish :-)<br></p><p>&gt;&gt; With that design, it seems like you’d wind up allowing things like the below:<br>&gt;&gt; <br>&gt;&gt;   // example A<br>&gt;&gt;   let foo = [ “abc”: [1,2,3], “efg”: [4,5,6] ]<br>&gt;&gt;   let bar = foo // shared storage, no COW<br>&gt;&gt;   foo.values[foo.index(of: “abc”)!].append(789) // update shared storage, no COW<br>&gt;&gt; <br>&gt;&gt;   // shared storage mutated,<br>&gt;&gt;   // despite (a) both being `let` and (b) only foo.values getting touched<br>&gt;&gt;   foo[“abc”] // [1, 2, 3, 789]<br>&gt;&gt;   bar[“abc”] // [1, 2, 3, 789]<br>&gt;<br>&gt; Example A isn&#39;t allowed—if foo and bar are both immutable, both of<br>&gt; their `values` collections are also immutable, so there&#39;s no way to<br>&gt; modify their shared storage.<br>&gt;<br>&gt;&gt;   // example B<br>&gt;&gt;   var foo = [ “abc”: [1,2,3], “efg”: [4,5,6] ]<br>&gt;&gt;   var bar = foo // shared storage, no COW<br>&gt;&gt;   foo.values[foo.index(of: “abc”)!].append(789)<br>&gt;&gt; <br>&gt;&gt;   // shared storage mutated only foo.values getting touched<br>&gt;&gt;   foo[“abc”] // [1, 2, 3, 789]<br>&gt;&gt;   bar[“abc”] // [1, 2, 3, 789]<br>&gt;<br>&gt; Example B is incorrect—the mutation at `foo.values[...].append(789)`<br>&gt; triggers a copy of the entire dictionary&#39;s underlying storage before<br>&gt; allowing the mutation, since it knows that storage isn&#39;t uniquely<br>&gt; referenced.<br>&gt;<br>&gt;&gt;   // example C<br>&gt;&gt;   var foo = [ “abc”: [1,2,3], “efg”: [4,5,6] ]<br>&gt;&gt;   var bar = foo <br>&gt;&gt;   bar[“abc”] = [1, 2, 3, 4] // COW triggered here, no shared storage<br>&gt;&gt;   foo.values[foo.index(of: “abc”)!].append(789)<br>&gt;&gt; <br>&gt;&gt;   // only `foo`’s storage mutated, b/c change to `bar` triggered COW<br>&gt;&gt;   foo[“abc”] // [1, 2, 3, 789]<br>&gt;&gt;   bar[“abc”] // [1, 2, 3, 4]<br>&gt;<br>&gt; This is the current behavior and would remain the same after the proposed the changes.<br>&gt;<br>&gt;&gt; …where both A (by itself) and the B/C contrast seem very unwelcome.<br>&gt;&gt; <br>&gt;&gt; Also, even if we assume we only ever make *responsible* use, having<br>&gt;&gt; the stdlib include such directly-mutating views would seem likely to<br>&gt;&gt; complicate any future concurrency plans.<br>&gt;&gt; <br>&gt;&gt; To reiterate, I think the issue being addressed here is extremely<br>&gt;&gt; important…I just don’t think I can get behind this type of solution<br>&gt;&gt; (unless I’m grossly misunderstanding its mechanics).<br>&gt;<br>&gt; Nate<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>October 14, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 1:28 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Wed Oct 12 2016, Nate Cook &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Oct 12, 2016, at 9:32 AM, plx via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The issue addressed is real; I’m not sure this is the best approach. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In particular, unless I’m missing something obvious, the ownership strategy here would have to be:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - `DictionaryKeys` and `DictionaryValues` would each induce the expected +1 retain on the<br>&gt;&gt; underlying storage<br>&gt;&gt;&gt; - `DictionaryValues`’s mutations avoid triggering COW on the underlying storage by skipping the<br>&gt;&gt; usual ownership check<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …as otherwise it’s unclear how you’d do those in-place mutations<br>&gt;&gt;&gt; (and this seems to be how the implementation works...is that<br>&gt;&gt;&gt; correct?).<br>&gt;&gt; <br>&gt;&gt; That&#39;s not quite right—when you access these views through the<br>&gt;&gt; dictionary, they do not increment the storage retain count. This is<br>&gt;&gt; the way slicing and views currently work on other mutable types. For<br>&gt;&gt; example, when you reverse a slice of an array in-place, the slice<br>&gt;&gt; doesn&#39;t get its own duplicate storage:<br>&gt;&gt; <br>&gt;&gt; var a = Array(1...10)<br>&gt;&gt; a[0..&lt;5].reverse()<br>&gt;&gt; a == [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]<br>&gt; <br>&gt; Oh, yes it certainly does.  This is currently inefficient because<br>&gt; pinning is tied to addressors and addressors can only return pointers to<br>&gt; things that actually exist in memory somewhere.  The slice doesn&#39;t.<br></p><p>Ack, sorry everyone! Listen to Dave. <br></p><p>I got carried away with examples that went further than my proposal. As far as I can tell from my testing, the examples in the proposal are still accurate.<br></p><p>&gt;&gt; However, if you create a new variable out of the slice and reverse that, the slice does get its own<br>&gt;&gt; storage:<br>&gt;&gt; <br>&gt;&gt; var b = Array(1...10)<br>&gt;&gt; var bSlice = b[0..&lt;5]<br>&gt;&gt; bSlice.reverse()<br>&gt;&gt; bSlice == [5, 4, 3, 2, 1]<br>&gt;&gt; b == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>&gt; <br>&gt; This doesn&#39;t demonstrate anything; you&#39;re just showing the effects of<br>&gt; value semantics.  If you go<br>&gt; <br>&gt; b[0..&lt;5] = bSlice<br>&gt; <br>&gt; you&#39;ll then have<br>&gt; <br>&gt; b == [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]<br>&gt; <br>&gt; And that is exactly what happens in the first example.<br>&gt; <br>&gt; This is a major flaw that prevents Swift&#39;s collection model from being<br>&gt; fully general and efficient.  I think we will be fixing it, by fixing<br>&gt; the way inout works, as a consequence of the work on ownership, for<br>&gt; Swift 4.  But as noted elsewhere, that&#39;s a wild-ass guess at the moment.<br>&gt; <br>&gt;&gt; Strings and their views work the same way:<br>&gt;&gt; <br>&gt;&gt; var s = &quot;abcdefg&quot;<br>&gt;&gt; s.characters.append(&quot;H&quot;)   // storage updated in place<br>&gt;&gt; s == &quot;abcdefgH&quot;<br>&gt;&gt; <br>&gt;&gt; var sChars = s.characters  // no copy yet<br>&gt;&gt; sChars.removeLast()     // sChars gets its own copy before the mutation<br>&gt;&gt; s == &quot;abcdefgH&quot;<br>&gt;&gt; String(sChars) == &quot;abcdefg&quot;<br>&gt;&gt; <br>&gt;&gt; var t = s   // no copy yet<br>&gt;&gt; t.characters.removeLast()  // t gets a new copy here<br>&gt;&gt; s == &quot;abcdefgH&quot;<br>&gt;&gt; t == &quot;abcdefg&quot;<br>&gt;&gt; <br>&gt;&gt; I don&#39;t know the name of the compiler feature that enables this, but<br>&gt;&gt; it&#39;s a critical part of the way views and slices work.<br>&gt; <br>&gt; I wish :-)<br></p><p>😳<br></p><p>&gt;&gt;&gt; With that design, it seems like you’d wind up allowing things like the below:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  // example A<br>&gt;&gt;&gt;  let foo = [ “abc”: [1,2,3], “efg”: [4,5,6] ]<br>&gt;&gt;&gt;  let bar = foo // shared storage, no COW<br>&gt;&gt;&gt;  foo.values[foo.index(of: “abc”)!].append(789) // update shared storage, no COW<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  // shared storage mutated,<br>&gt;&gt;&gt;  // despite (a) both being `let` and (b) only foo.values getting touched<br>&gt;&gt;&gt;  foo[“abc”] // [1, 2, 3, 789]<br>&gt;&gt;&gt;  bar[“abc”] // [1, 2, 3, 789]<br>&gt;&gt; <br>&gt;&gt; Example A isn&#39;t allowed—if foo and bar are both immutable, both of<br>&gt;&gt; their `values` collections are also immutable, so there&#39;s no way to<br>&gt;&gt; modify their shared storage.<br>&gt;&gt; <br>&gt;&gt;&gt;  // example B<br>&gt;&gt;&gt;  var foo = [ “abc”: [1,2,3], “efg”: [4,5,6] ]<br>&gt;&gt;&gt;  var bar = foo // shared storage, no COW<br>&gt;&gt;&gt;  foo.values[foo.index(of: “abc”)!].append(789)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  // shared storage mutated only foo.values getting touched<br>&gt;&gt;&gt;  foo[“abc”] // [1, 2, 3, 789]<br>&gt;&gt;&gt;  bar[“abc”] // [1, 2, 3, 789]<br>&gt;&gt; <br>&gt;&gt; Example B is incorrect—the mutation at `foo.values[...].append(789)`<br>&gt;&gt; triggers a copy of the entire dictionary&#39;s underlying storage before<br>&gt;&gt; allowing the mutation, since it knows that storage isn&#39;t uniquely<br>&gt;&gt; referenced.<br>&gt;&gt; <br>&gt;&gt;&gt;  // example C<br>&gt;&gt;&gt;  var foo = [ “abc”: [1,2,3], “efg”: [4,5,6] ]<br>&gt;&gt;&gt;  var bar = foo <br>&gt;&gt;&gt;  bar[“abc”] = [1, 2, 3, 4] // COW triggered here, no shared storage<br>&gt;&gt;&gt;  foo.values[foo.index(of: “abc”)!].append(789)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  // only `foo`’s storage mutated, b/c change to `bar` triggered COW<br>&gt;&gt;&gt;  foo[“abc”] // [1, 2, 3, 789]<br>&gt;&gt;&gt;  bar[“abc”] // [1, 2, 3, 4]<br>&gt;&gt; <br>&gt;&gt; This is the current behavior and would remain the same after the proposed the changes.<br>&gt;&gt; <br>&gt;&gt;&gt; …where both A (by itself) and the B/C contrast seem very unwelcome.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, even if we assume we only ever make *responsible* use, having<br>&gt;&gt;&gt; the stdlib include such directly-mutating views would seem likely to<br>&gt;&gt;&gt; complicate any future concurrency plans.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To reiterate, I think the issue being addressed here is extremely<br>&gt;&gt;&gt; important…I just don’t think I can get behind this type of solution<br>&gt;&gt;&gt; (unless I’m grossly misunderstanding its mechanics).<br>&gt;&gt; <br>&gt;&gt; Nate<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161014/dc62b1d8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
