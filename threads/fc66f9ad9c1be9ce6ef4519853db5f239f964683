<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February 25, 2016 at 01:00:00am</p></header><div class="content"><p>As was discussed in a previous thread, here is my proposal for allowing the new #selector syntax to support referencing property getter and setters. Does anybody have any comments before I push the proposal forward?<br></p><p>David.<br></p><p>Referencing the Objective-C selector of property getters and setters<br></p><p>Proposal: TBD<br>Author(s): David Hart &lt;https://github.com/hartbit&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#introduction&gt;Introduction<br></p><p>Proposal SE-0022 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt; to reference Objective-C selectors for methods was accepted and implemented. Unfortunately, it does not allow referencing the getter and setter methods of properties. This proposal seeks to provide a design to reference those methods for the Swift 3.0 timeframe.<br></p><p>The idea for this proposal was originally discussed on the following Swift-evolution thread: here &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7614&gt;<br> &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#motivation&gt;Motivation<br></p><p>The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br></p><p> &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#proposed-solution&gt;Proposed solution<br></p><p>Introduce two new overrides to the #selector expression that allows building a selector which points to the getter or the setter of a property.<br></p><p>class Person: NSObject {<br>  dynamic var firstName: String<br>  dynamic let lastName: String<br>  dynamic var fullName: String {<br>      return &quot;\(firstName) \(lastName)&quot;<br>  }<br></p><p>  init(firstName: String, lastName: String) {<br>    self.firstName = firstName<br>    self.lastName = lastName<br>  }<br>}<br></p><p>let firstNameGetter = #selector(getter: Person.firstName)<br>let firstNameSetter = #selector(setter: Person.firstName)<br>Both overrides expect a property and the setter requires a variable property. For example, the following line of code would produce an error because the lastName property is defined with let.<br></p><p>let lastNameSetter = #selector(setter: Person.lastName)<br>// Argument of #selector(setter:) must refer to a variable property<br> &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#impact-on-existing-code&gt;Impact on existing code<br></p><p>The introduction of the new #selector overrides has no impact on existing code and could improve the string-literal-as-selector to #selector migrator.<br></p><p> &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#alternatives-considered&gt;Alternatives considered<br></p><p>A long term alternive could arrise from the design of lenses in Swift. But as this is purely hypothetical and out of scope for Swift 3, this proposal fixes the need for referencing property selectors in a type-safe way straight-away.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/fc664683/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 24, 2016 at 08:00:00pm</p></header><div class="content"><p>On Feb 24, 2016, at 4:21 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As was discussed in a previous thread, here is my proposal for allowing the new #selector syntax to support referencing property getter and setters. Does anybody have any comments before I push the proposal forward?<br></p><p>+1, proposal LGTM.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; David.<br>&gt; <br>&gt; Referencing the Objective-C selector of property getters and setters<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author(s): David Hart &lt;https://github.com/hartbit&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#introduction&gt;Introduction<br>&gt; <br>&gt; Proposal SE-0022 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&gt; to reference Objective-C selectors for methods was accepted and implemented. Unfortunately, it does not allow referencing the getter and setter methods of properties. This proposal seeks to provide a design to reference those methods for the Swift 3.0 timeframe.<br>&gt; <br>&gt; The idea for this proposal was originally discussed on the following Swift-evolution thread: here &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/7614&gt;<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#motivation&gt;Motivation<br>&gt; <br>&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; Introduce two new overrides to the #selector expression that allows building a selector which points to the getter or the setter of a property.<br>&gt; <br>&gt; class Person: NSObject {<br>&gt;   dynamic var firstName: String<br>&gt;   dynamic let lastName: String<br>&gt;   dynamic var fullName: String {<br>&gt;       return &quot;\(firstName) \(lastName)&quot;<br>&gt;   }<br>&gt; <br>&gt;   init(firstName: String, lastName: String) {<br>&gt;     self.firstName = firstName<br>&gt;     self.lastName = lastName<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let firstNameGetter = #selector(getter: Person.firstName)<br>&gt; let firstNameSetter = #selector(setter: Person.firstName)<br>&gt; Both overrides expect a property and the setter requires a variable property. For example, the following line of code would produce an error because the lastName property is defined with let.<br>&gt; <br>&gt; let lastNameSetter = #selector(setter: Person.lastName)<br>&gt; // Argument of #selector(setter:) must refer to a variable property<br>&gt;  &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; The introduction of the new #selector overrides has no impact on existing code and could improve the string-literal-as-selector to #selector migrator.<br>&gt; <br>&gt;  &lt;https://github.com/hartbit/swift-evolution/tree/objc-property-selectors#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt; A long term alternive could arrise from the design of lenses in Swift. But as this is purely hypothetical and out of scope for Swift 3, this proposal fixes the need for referencing property selectors in a type-safe way straight-away.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160224/91550793/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 24, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Motivation<br>&gt; <br>&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br></p><p>What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February 25, 2016 at 08:00:00am</p></header><div class="content"><p>In the original thread, my use case was the ability to get type-safety for key-value coding:<br></p><p>david.setValue(30, forKey: String(#selector(getter: Person.age)))<br></p><p>On 25 Feb 2016, at 06:50, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt; <br>&gt; What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February 25, 2016 at 08:00:00am</p></header><div class="content"><p>Now that I’m thinking about it, wouldn’t my need be better served by a different proposal for:<br></p><p>#key(Person.firstName) // returns the string “firstName”<br>#keyPath(Person.mother.firstName) // returns the string “mother.firstName”<br></p><p>How doable is the keyPath version?<br></p><p>&gt; On 25 Feb 2016, at 08:10, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In the original thread, my use case was the ability to get type-safety for key-value coding:<br>&gt; <br>&gt; david.setValue(30, forKey: String(#selector(getter: Person.age)))<br>&gt; <br>&gt; On 25 Feb 2016, at 06:50, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt;&gt; <br>&gt;&gt; What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March  4, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;m +1 on this as well.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 25.02.2016, o godz. 08:38:<br>&gt; <br>&gt; Now that I’m thinking about it, wouldn’t my need be better served by a different proposal for:<br>&gt; <br>&gt; #key(Person.firstName) // returns the string “firstName”<br>&gt; #keyPath(Person.mother.firstName) // returns the string “mother.firstName”<br>&gt; <br>&gt; How doable is the keyPath version?<br>&gt; <br>&gt;&gt; On 25 Feb 2016, at 08:10, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In the original thread, my use case was the ability to get type-safety for key-value coding:<br>&gt;&gt; <br>&gt;&gt; david.setValue(30, forKey: String(#selector(getter: Person.age)))<br>&gt;&gt; <br>&gt;&gt; On 25 Feb 2016, at 06:50, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160304/b4f44e8e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ab7ae85b84ebb323fab427b11500742?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>Keith Smiley</string> &lt;keithbsmiley at gmail.com&gt;<p>March 14, 2016 at 10:00:00pm</p></header><div class="content"><p>Another reasonable use case for this is with `UILocalizedIndexedCollation`. For example with Swift 2.1:<br></p><p>```<br>let collation = UILocalizedIndexedCollation.currentCollation()<br>collation.sectionForObject(&quot;something&quot;, collationStringSelector: &quot;lowercaseString&quot;) // NSString.lowercaseString<br>```<br></p><p>Currently the Xcode quickfix is:<br></p><p>```<br>collation.sectionForObject(&quot;something&quot;, collationStringSelector: Selector(&quot;lowercaseString&quot;))<br>```<br></p><p>But I guess ideally this would work something like:<br></p><p>```<br>collation.sectionForObject(&quot;something&quot;, collationStringSelector: #selector(NSString.lowercaseString))<br></p><p>--<br>Keith Smiley<br></p><p>On 02/24, Brent Royal-Gordon via swift-evolution wrote:<br>&gt; &gt; Motivation<br>&gt; &gt;<br>&gt; &gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt;<br>&gt; What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>March 15, 2016 at 08:00:00am</p></header><div class="content"><p>Wouldn&#39;t it be:<br></p><p>#selector(getter: NSString.lowercaseString))<br></p><p>To allow us to disambiguate getters and setters?<br></p><p>&gt; On 15 Mar 2016, at 06:09, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt; <br>&gt; Another reasonable use case for this is with `UILocalizedIndexedCollation`. For example with Swift 2.1:<br>&gt; <br>&gt; ```<br>&gt; let collation = UILocalizedIndexedCollation.currentCollation()<br>&gt; collation.sectionForObject(&quot;something&quot;, collationStringSelector: &quot;lowercaseString&quot;) // NSString.lowercaseString<br>&gt; ```<br>&gt; <br>&gt; Currently the Xcode quickfix is:<br>&gt; <br>&gt; ```<br>&gt; collation.sectionForObject(&quot;something&quot;, collationStringSelector: Selector(&quot;lowercaseString&quot;))<br>&gt; ```<br>&gt; <br>&gt; But I guess ideally this would work something like:<br>&gt; <br>&gt; ```<br>&gt; collation.sectionForObject(&quot;something&quot;, collationStringSelector: #selector(NSString.lowercaseString))<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br>&gt; <br>&gt; On 02/24, Brent Royal-Gordon via swift-evolution wrote:<br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt;&gt; <br>&gt;&gt; What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/4cac9d87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ab7ae85b84ebb323fab427b11500742?s=50"></div><header><strong>[Discussion] Referencing the Objective-C selector of property getters and setters</strong> from <string>Keith Smiley</string> &lt;keithbsmiley at gmail.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>Maybe it would be nice if we preferred getters instead? Since I (making a<br>totally unfounded assumption) assume that would be used more. But either way, I<br>just wanted to show a quick example of the problem, I&#39;m personally less worried<br>about the exact syntax.<br></p><p>--<br>Keith Smiley<br></p><p>On 03/15, David Hart wrote:<br>&gt; Wouldn&#39;t it be:<br>&gt;<br>&gt; #selector(getter: NSString.lowercaseString))<br>&gt;<br>&gt; To allow us to disambiguate getters and setters?<br>&gt;<br>&gt; &gt; On 15 Mar 2016, at 06:09, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Another reasonable use case for this is with `UILocalizedIndexedCollation`. For example with Swift 2.1:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; let collation = UILocalizedIndexedCollation.currentCollation()<br>&gt; &gt; collation.sectionForObject(&quot;something&quot;, collationStringSelector: &quot;lowercaseString&quot;) // NSString.lowercaseString<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; Currently the Xcode quickfix is:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; collation.sectionForObject(&quot;something&quot;, collationStringSelector: Selector(&quot;lowercaseString&quot;))<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; But I guess ideally this would work something like:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; collation.sectionForObject(&quot;something&quot;, collationStringSelector: #selector(NSString.lowercaseString))<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Keith Smiley<br>&gt; &gt;<br>&gt; &gt; On 02/24, Brent Royal-Gordon via swift-evolution wrote:<br>&gt; &gt;&gt;&gt; Motivation<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The #selector feature is very useful but does not yet cover all cases. Accessing poperty getter and setters requires to drop down to the string syntax and forgo type-safety. This proposal supports this special case without introducing new syntax, but by introducing new overloads to the #selector compiler expression.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; What I don&#39;t understand is, what&#39;s the use case? When you want to access properties dynamically in Objective-C, you usually use key-value coding, not selectors. Can you point to APIs it would be helpful to use this with, or write some realistic code which uses this feature? Or is this basically just completeness for the sake of completeness?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Brent Royal-Gordon<br>&gt; &gt;&gt; Architechies<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
