<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c9c44262e8b58b758a3876b9d29c095?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>Georgios Moschovitis</string> &lt;george.moschovitis at icloud.com&gt;<p>July 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; I *think* it&#39;d be better to add C++ interoperability to Swift.<br></p><p>Wouldn’t it be better to have unified syntax across the board? e.g.,<br></p><p>int x; -vs- x: Int, etc?<br></p><p>Using the same language/syntax would eliminate the taxing mental context-switch.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 10, 2016 at 08:00:00am</p></header><div class="content"><p>I disagree. While it sounds nice to have a unified syntax working on C++ compatibility/interaction is  still quite key because of the mountains of legacy and new code still written everyday in it. Also, I think that the right language for the right domain and being able to glue them together is quite key in the modern computing world and using a single language in every computing domain is a chimera that can bring more pain than good.<br></p><p>Still, if we work out how to import C++ code well, you are probably going to get something very close to that you are wishing anyways :).<br></p><p>Sent from my iPhone<br></p><p>On 10 Jul 2016, at 07:17, Georgios Moschovitis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I *think* it&#39;d be better to add C++ interoperability to Swift.<br>&gt; <br>&gt; Wouldn’t it be better to have unified syntax across the board? e.g.,<br>&gt; <br>&gt; int x; -vs- x: Int, etc?<br>&gt; <br>&gt; Using the same language/syntax would eliminate the taxing mental context-switch.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c9c44262e8b58b758a3876b9d29c095?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>Georgios Moschovitis</string> &lt;george.moschovitis at icloud.com&gt;<p>July 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; working on C++ compatibility/interaction is  still quite key because of the mountains of legacy and new code still written everyday in it.<br></p><p>Totally agree, but C++ interoperability is orthogonal to my original request. Would love to have both!<br></p><p>&gt; Also, I think that the right language for the right domain and being able to glue them together is quite key in the modern computing world and using a single language in every computing domain is a chimera that can bring more pain than good.<br></p><p>I disagree. IMO, the ‘babel’ of programming languages is one of the most annoying problems in our industry. Besides, I don’t see how C++ is any more suitable than Swift for GPU/heterogenous stuff (without peculiar extensions like CUDA). Swift is starting from a clean-slate, and could definitely become a ‘right’ language for this domain.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/48c07815c569b4c035e813e2f7247c37?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>Kristóf Liliom</string> &lt;kristof.liliom at mattakis.com&gt;<p>July 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; I disagree. IMO, the ‘babel’ of programming languages is one of the most annoying problems in our industry. Besides, I don’t see how C++ is any more suitable than Swift for GPU/heterogenous stuff (without peculiar extensions like CUDA). Swift is starting from a clean-slate, and could definitely become a ‘right’ language for this domain.<br></p><p>It is more suitable because it is not pure C++. Don&#39;t forget that the Metal Shading Language is &quot;only&quot; based on C++11 and modified to be able to express GPU compute attributes.<br>For more info: https://developer.apple.com/library/ios/documentation/Metal/Reference/MetalShadingLanguageGuide/cplusplus/cplusplus.html#//apple_ref/doc/uid/TP40014364-CH8-SW1 &lt;https://developer.apple.com/library/ios/documentation/Metal/Reference/MetalShadingLanguageGuide/cplusplus/cplusplus.html#//apple_ref/doc/uid/TP40014364-CH8-SW1&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/d0a3b0ec/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 10, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>On 10 Jul 2016, at 08:50, Georgios Moschovitis &lt;george.moschovitis at icloud.com&gt; wrote:<br></p><p>&gt;&gt; working on C++ compatibility/interaction is  still quite key because of the mountains of legacy and new code still written everyday in it.<br>&gt; <br>&gt; Totally agree, but C++ interoperability is orthogonal to my original request. Would love to have both!<br>&gt; <br>&gt;&gt; Also, I think that the right language for the right domain and being able to glue them together is quite key in the modern computing world and using a single language in every computing domain is a chimera that can bring more pain than good.<br>&gt; <br>&gt; I disagree. IMO, the ‘babel’ of programming languages is one of the most annoying problems in our industry. Besides, I don’t see how C++ is any more suitable than Swift for GPU/heterogenous stuff (without peculiar extensions like CUDA). Swift is starting from a clean-slate, and could definitely become a ‘right’ language for this domain.<br></p><p>DSL&#39;s sometimes emerge to esse programming challenges, but often arise out of need to dominate the complexity of a domain by catering exclusively to it instead of a jack of all trades - master of none approach. In some cases, the ability to easily approach problems in a deterministic low level way, as well as the wealth of existing code dealing with those problems, is how C and C++ are still very very relevant. The rest is increasingly dominated by JavaScript and Node where performance at a very low power is not critical.<br></p><p>C++ gives you rope to hang yourself with, but in capable hands it gives you all the knobs and levers you need to extract high performance with a very high degree of determinism. <br>Garbage collection, automatic reference counting, pass by copy value types with or without copy on write semantics, etc... there are several areas where other languages keep you abstracted from the hardware in a way that does not make performance predictable.<br>Memory fragmentation, control of allocations of stack and heap memory (preferably away from hot game loops), no extra performance hit when passing memory reference around or iterate on collections (yes people can destroy performance in not very obvious ways too).<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 10, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>On 10 Jul 2016, at 08:50, Georgios Moschovitis &lt;george.moschovitis at icloud.com&gt; wrote:<br></p><p>&gt;&gt; working on C++ compatibility/interaction is  still quite key because of the mountains of legacy and new code still written everyday in it.<br>&gt; <br>&gt; Totally agree, but C++ interoperability is orthogonal to my original request. Would love to have both!<br>&gt; <br>&gt;&gt; Also, I think that the right language for the right domain and being able to glue them together is quite key in the modern computing world and using a single language in every computing domain is a chimera that can bring more pain than good.<br>&gt; <br>&gt; I disagree. IMO, the ‘babel’ of programming languages is one of the most annoying problems in our industry. Besides, I don’t see how C++ is any more suitable than Swift for GPU/heterogenous stuff (without peculiar extensions like CUDA). Swift is starting from a clean-slate, and could definitely become a ‘right’ language for this domain.<br></p><p>Also, call me when we get a port of either OpenCL or CUDA bindings in Swift. Hint: it is more likely for Swift to have working C++ integration first than to wait for those to happen.<br></p><p>We can talk about Swift, Rust, Kotlin, Eiffel, Scala, etc... but they are still relatively niche and before any of those gets anywhere near the strong worldwide cross platform following that JavaScript (with the explosion of Node.JS too), Ruby, C/C++, Java, and C#/.NET still have, we will need to keep nurturing and strengthening this language and tools for a while longer.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 10, 2016 at 02:00:00am</p></header><div class="content"><p>I feel like there are two totally different discussions happening here.  One is whether Swift needs better interoperability with C++, which it does.  Let’s just assume that that will happen.<br></p><p>The other discussion, which I think was the intended topic of this thread, is whether the benefits of parallel computing can be brought closer to Swift, which I believe they can.<br></p><p>In most applications, if we can get 80% of the benefit of new hardware with minimal code rewrites, most developers would take that in a heartbeat and focus the specialized talent and careful efforts necessary to craft, profile and maintain truly optimized code on only the most critical kernels.  Maybe that critical code will be written in C++, or some other language better suited to the task.<br></p><p>Is there a good reason why Swift can’t be made as suitable— or more suitable— than C++ for the 80% kinds of tasks?  It seems to me that Swift would be well suited for it.<br></p><p><br></p><p><br>&gt; On Jul 10, 2016, at 01:41 , Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 10 Jul 2016, at 08:50, Georgios Moschovitis &lt;george.moschovitis at icloud.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; working on C++ compatibility/interaction is  still quite key because of the mountains of legacy and new code still written everyday in it.<br>&gt;&gt; <br>&gt;&gt; Totally agree, but C++ interoperability is orthogonal to my original request. Would love to have both!<br>&gt;&gt; <br>&gt;&gt;&gt; Also, I think that the right language for the right domain and being able to glue them together is quite key in the modern computing world and using a single language in every computing domain is a chimera that can bring more pain than good.<br>&gt;&gt; <br>&gt;&gt; I disagree. IMO, the ‘babel’ of programming languages is one of the most annoying problems in our industry. Besides, I don’t see how C++ is any more suitable than Swift for GPU/heterogenous stuff (without peculiar extensions like CUDA). Swift is starting from a clean-slate, and could definitely become a ‘right’ language for this domain.<br>&gt; <br>&gt; Also, call me when we get a port of either OpenCL or CUDA bindings in Swift. Hint: it is more likely for Swift to have working C++ integration first than to wait for those to happen.<br>&gt; <br>&gt; We can talk about Swift, Rust, Kotlin, Eiffel, Scala, etc... but they are still relatively niche and before any of those gets anywhere near the strong worldwide cross platform following that JavaScript (with the explosion of Node.JS too), Ruby, C/C++, Java, and C#/.NET still have, we will need to keep nurturing and strengthening this language and tools for a while longer.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 10, 2016 at 12:00:00pm</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On Jul 10, 2016, at 11:25 AM, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I feel like there are two totally different discussions happening here.  One is whether Swift needs better interoperability with C++, which it does.  Let’s just assume that that will happen.<br></p><p>One of the side effects of a good swift/c++ interop would eliminate the core objections to rewritting swiftc in swift, which IMH would propel forward some of the gaps that exist in the language to be able to do that cleanly. As long as swift remains an app language, completing the generics system or dealing with the question of module/submodule/namespace can be lower priorities with more time to complete.<br></p><p><br>&gt; The other discussion, which I think was the intended topic of this thread, is whether the benefits of parallel computing can be brought closer to Swift, which I believe they can.<br>&gt; <br>&gt; In most applications, if we can get 80% of the benefit of new hardware with minimal code rewrites, most developers would take that in a heartbeat and focus the specialized talent and careful efforts necessary to craft, profile and maintain truly optimized code on only the most critical kernels.  Maybe that critical code will be written in C++, or some other language better suited to the task.<br>&gt; <br>&gt; Is there a good reason why Swift can’t be made as suitable— or more suitable— than C++ for the 80% kinds of tasks?  It seems to me that Swift would be well suited for it.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 10, 2016, at 01:41 , Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 10 Jul 2016, at 08:50, Georgios Moschovitis &lt;george.moschovitis at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; working on C++ compatibility/interaction is  still quite key because of the mountains of legacy and new code still written everyday in it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Totally agree, but C++ interoperability is orthogonal to my original request. Would love to have both!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I think that the right language for the right domain and being able to glue them together is quite key in the modern computing world and using a single language in every computing domain is a chimera that can bring more pain than good.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I disagree. IMO, the ‘babel’ of programming languages is one of the most annoying problems in our industry. Besides, I don’t see how C++ is any more suitable than Swift for GPU/heterogenous stuff (without peculiar extensions like CUDA). Swift is starting from a clean-slate, and could definitely become a ‘right’ language for this domain.<br>&gt;&gt; <br>&gt;&gt; Also, call me when we get a port of either OpenCL or CUDA bindings in Swift. Hint: it is more likely for Swift to have working C++ integration first than to wait for those to happen.<br>&gt;&gt; <br>&gt;&gt; We can talk about Swift, Rust, Kotlin, Eiffel, Scala, etc... but they are still relatively niche and before any of those gets anywhere near the strong worldwide cross platform following that JavaScript (with the explosion of Node.JS too), Ruby, C/C++, Java, and C#/.NET still have, we will need to keep nurturing and strengthening this language and tools for a while longer.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Swift-based Metal Shading Language</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July 10, 2016 at 10:00:00am</p></header><div class="content"><p>On Jul 10, 2016, at 01:17, Georgios Moschovitis &lt;george.moschovitis at icloud.com&gt; wrote:<br></p><p>&gt;&gt; I *think* it&#39;d be better to add C++ interoperability to Swift.<br>&gt; <br>&gt; Wouldn’t it be better to have unified syntax across the board? e.g.,<br>&gt; <br>&gt; int x; -vs- x: Int, etc?<br>&gt; <br>&gt; Using the same language/syntax would eliminate the taxing mental context-switch.<br>I don&#39;t understand. That&#39;s the point of C++ interop... You call the C++ APIs from your Swift code.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
