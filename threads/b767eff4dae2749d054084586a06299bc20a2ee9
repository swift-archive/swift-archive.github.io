<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>What about garbage collection?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  8, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Feb 08 2016, Félix Cloutier &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Has there been a garbage collection thread so far? I understand that<br>&gt; reference counting vs. garbage collection can be a heated debate, but<br>&gt; it might be relevant to have it.<br>&gt;<br>&gt; It seems to me that the two principal upsides of reference counting<br>&gt; are that destruction is (essentially) deterministic and performance is<br>&gt; more easily predicted. However, it comes with many downsides:<br>&gt;<br>&gt; object references are expensive to update<br>&gt; object references cannot be atomically updated<br>&gt; heap fragmentation<br>&gt; the closure capture syntax uses up an unreasonable amount of mindshare<br>&gt; just because of [weak self]<br>&gt;<br>&gt; Since Swift doesn&#39;t expose memory management operations outside of<br>&gt; `autoreleasepool`, it seems to me that you could just drop in a<br>&gt; garbage collector instead of reference counting and it would work (for<br>&gt; most purposes).<br>&gt;<br>&gt; Has a GC been considered at all?<br></p><p>Yes.  Among other problems, you can&#39;t do copy-on-write efficiently with<br>a GC, because you can&#39;t detect a unique reference.  And without<br>efficient copy-on-write, most interesting value types (Array) are out<br>the window.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30ea8887f16ee8e189bc651adfcb8896?s=50"></div><header><strong>What about garbage collection?</strong> from <string>Frank Ecsedy</string> &lt;fecsedy at gmail.com&gt;<p>February  8, 2016 at 01:00:00pm</p></header><div class="content"><p>In fact, Java is looking to introduce value types and will have to wrestle<br>with how to do it in a pure GC environment. For Swift a GC is lots of pain<br>for minimal gain or even a net loss.<br></p><p>On Monday, February 8, 2016, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Feb 08 2016, Félix Cloutier &lt;swift-evolution at swift.org<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt;<br>&gt; &gt; Has there been a garbage collection thread so far? I understand that<br>&gt; &gt; reference counting vs. garbage collection can be a heated debate, but<br>&gt; &gt; it might be relevant to have it.<br>&gt; &gt;<br>&gt; &gt; It seems to me that the two principal upsides of reference counting<br>&gt; &gt; are that destruction is (essentially) deterministic and performance is<br>&gt; &gt; more easily predicted. However, it comes with many downsides:<br>&gt; &gt;<br>&gt; &gt; object references are expensive to update<br>&gt; &gt; object references cannot be atomically updated<br>&gt; &gt; heap fragmentation<br>&gt; &gt; the closure capture syntax uses up an unreasonable amount of mindshare<br>&gt; &gt; just because of [weak self]<br>&gt; &gt;<br>&gt; &gt; Since Swift doesn&#39;t expose memory management operations outside of<br>&gt; &gt; `autoreleasepool`, it seems to me that you could just drop in a<br>&gt; &gt; garbage collector instead of reference counting and it would work (for<br>&gt; &gt; most purposes).<br>&gt; &gt;<br>&gt; &gt; Has a GC been considered at all?<br>&gt;<br>&gt; Yes.  Among other problems, you can&#39;t do copy-on-write efficiently with<br>&gt; a GC, because you can&#39;t detect a unique reference.  And without<br>&gt; efficient copy-on-write, most interesting value types (Array) are out<br>&gt; the window.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/3a4135c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>What about garbage collection?</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>On a similar note though, I think if we are taking the point of view that simplifying the memory model and making it safer is worth lots of complexity trade offs I would go all the way in that direction and look real hard at the outcome of MS&#39;s project Midori rather than stopping at a GC, but it is kind of getting very off topic so I will cut this short.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 8 Feb 2016, at 21:04, Frank Ecsedy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In fact, Java is looking to introduce value types and will have to wrestle with how to do it in a pure GC environment. For Swift a GC is lots of pain for minimal gain or even a net loss.<br>&gt; <br>&gt;&gt; On Monday, February 8, 2016, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Mon Feb 08 2016, Félix Cloutier &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; Has there been a garbage collection thread so far? I understand that<br>&gt;&gt; &gt; reference counting vs. garbage collection can be a heated debate, but<br>&gt;&gt; &gt; it might be relevant to have it.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It seems to me that the two principal upsides of reference counting<br>&gt;&gt; &gt; are that destruction is (essentially) deterministic and performance is<br>&gt;&gt; &gt; more easily predicted. However, it comes with many downsides:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; object references are expensive to update<br>&gt;&gt; &gt; object references cannot be atomically updated<br>&gt;&gt; &gt; heap fragmentation<br>&gt;&gt; &gt; the closure capture syntax uses up an unreasonable amount of mindshare<br>&gt;&gt; &gt; just because of [weak self]<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Since Swift doesn&#39;t expose memory management operations outside of<br>&gt;&gt; &gt; `autoreleasepool`, it seems to me that you could just drop in a<br>&gt;&gt; &gt; garbage collector instead of reference counting and it would work (for<br>&gt;&gt; &gt; most purposes).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Has a GC been considered at all?<br>&gt;&gt; <br>&gt;&gt; Yes.  Among other problems, you can&#39;t do copy-on-write efficiently with<br>&gt;&gt; a GC, because you can&#39;t detect a unique reference.  And without<br>&gt;&gt; efficient copy-on-write, most interesting value types (Array) are out<br>&gt;&gt; the window.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/e5a752aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>What about garbage collection?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  8, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 1:16 PM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On a similar note though, I think if we are taking the point of view that simplifying the memory model and making it safer is worth lots of complexity trade offs I would go all the way in that direction and look real hard at the outcome of MS&#39;s project Midori rather than stopping at a GC, but it is kind of getting very off topic so I will cut this short.<br></p><p>A key difference between Swift/ObjC ARC and Microsoft&#39;s experiments is that Apple has been introducing these improvements incrementally on top of an established platform. You can successfully develop and ship an app using ARC or Swift today.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>What about garbage collection?</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Sorry Joe, was not meant to cause a stir or to inflame the discussion. I found it an experiment with exciting potential not because it had a particular vendor attached. I do applaud Apple for pushing innovation to the market very often :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 8 Feb 2016, at 21:49, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 8, 2016, at 1:16 PM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On a similar note though, I think if we are taking the point of view that simplifying the memory model and making it safer is worth lots of complexity trade offs I would go all the way in that direction and look real hard at the outcome of MS&#39;s project Midori rather than stopping at a GC, but it is kind of getting very off topic so I will cut this short.<br>&gt; <br>&gt; A key difference between Swift/ObjC ARC and Microsoft&#39;s experiments is that Apple has been introducing these improvements incrementally on top of an established platform. You can successfully develop and ship an app using ARC or Swift today.<br>&gt; <br>&gt; -Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
