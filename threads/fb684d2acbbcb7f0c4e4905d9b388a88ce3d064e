<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br></p><p>func foo(inout x: Int)<br></p><p>as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/fb68064e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 18, 2015 at 07:00:00pm</p></header><div class="content"><p>+1.  Can you provide an example showing where you would place it though?<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 18, 2015, at 7:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt; <br>&gt; func foo(inout x: Int)<br>&gt; <br>&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/1039a4d2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:27 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; +1.  Can you provide an example showing where you would place it though?<br></p><p>Good question. Three options I see:<br></p><p>- Before the label and binding names, where inout appears today, and where other argument modifiers like `@autoclosure` go: func foo(&amp;label x: Int)<br></p><p>which is the minimal change.<br></p><p>- Before the binding name: func foo(label &amp;x: Int)<br></p><p>which is problematic for implicitly-labeled arguments.<br></p><p>- Before the type name: func foo(label x: &amp;Int)<br></p><p>This is the most definition-follows-use-y, but would be inconsistent with other argument modifiers.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:30 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 5:27 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1.  Can you provide an example showing where you would place it though?<br>&gt; <br>&gt; Good question. Three options I see:<br>&gt; <br>&gt; - Before the label and binding names, where inout appears today, and where other argument modifiers like `@autoclosure` go: func foo(&amp;label x: Int)<br>&gt; <br>&gt; which is the minimal change.<br>&gt; <br>&gt; - Before the binding name: func foo(label &amp;x: Int)<br>&gt; <br>&gt; which is problematic for implicitly-labeled arguments.<br>&gt; <br>&gt; - Before the type name: func foo(label x: &amp;Int)<br>&gt; <br>&gt; This is the most definition-follows-use-y, but would be inconsistent with other argument modifiers.<br></p><p>What is your suggested term for these kinds of parameters once we retire “inout”?<br></p><p>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:33 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 5:30 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 5:27 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1.  Can you provide an example showing where you would place it though?<br>&gt;&gt; <br>&gt;&gt; Good question. Three options I see:<br>&gt;&gt; <br>&gt;&gt; - Before the label and binding names, where inout appears today, and where other argument modifiers like `@autoclosure` go: func foo(&amp;label x: Int)<br>&gt;&gt; <br>&gt;&gt; which is the minimal change.<br>&gt;&gt; <br>&gt;&gt; - Before the binding name: func foo(label &amp;x: Int)<br>&gt;&gt; <br>&gt;&gt; which is problematic for implicitly-labeled arguments.<br>&gt;&gt; <br>&gt;&gt; - Before the type name: func foo(label x: &amp;Int)<br>&gt;&gt; <br>&gt;&gt; This is the most definition-follows-use-y, but would be inconsistent with other argument modifiers.<br>&gt; <br>&gt; What is your suggested term for these kinds of parameters once we retire “inout”?<br></p><p>I&#39;d still call them &#39;inout&#39;, but I agree it&#39;s unfortunate that that wouldn&#39;t be spelled out anywhere in source.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/9a6efc97/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:30 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 5:27 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1.  Can you provide an example showing where you would place it though?<br>&gt; <br>&gt; Good question. Three options I see:<br>&gt; <br>&gt; - Before the label and binding names, where inout appears today, and where other argument modifiers like `@autoclosure` go: func foo(&amp;label x: Int)<br>&gt; <br>&gt; which is the minimal change.<br>&gt; <br>&gt; - Before the binding name: func foo(label &amp;x: Int)<br>&gt; <br>&gt; which is problematic for implicitly-labeled arguments.<br>&gt; <br>&gt; - Before the type name: func foo(label x: &amp;Int)<br>&gt; <br>&gt; This is the most definition-follows-use-y, but would be inconsistent with other argument modifiers.<br></p><p>It seems the latter is the only one of the three that would also make sense for function types. We still need to be able to write down a function type containing an inout parameter right?<br></p><p>Also your ideas for lenses involved inout return types — how would these fit in?<br></p><p>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt; <br>&gt; func foo(inout x: Int)<br>&gt; <br>&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br></p><p>-1<br></p><p>“inout” is intended to communicate (or at least hint at) the copy-in / copy-out behavior of the argument.  It is also there to enable other parameter modifiers, which can enable other more advanced parameters models in the future (e.g. rust-style borrowing).<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/035bf77b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 19, 2015 at 05:00:00pm</p></header><div class="content"><p>What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br></p><p>func foo(x: inout Int)<br>func foo(x: @inout(Int))<br>func foo(x: @inout Int)<br></p><p>Is there an underlying reason that parameter modification should live on the name side rather than the type side of the colon? They aren&#39;t really modifying the name<br></p><p>-- Erica, inexperienced with Rust<br></p><p><br>&gt; On Dec 18, 2015, at 7:07 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt;&gt; <br>&gt;&gt; func foo(inout x: Int)<br>&gt;&gt; <br>&gt;&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; “inout” is intended to communicate (or at least hint at) the copy-in / copy-out behavior of the argument.  It is also there to enable other parameter modifiers, which can enable other more advanced parameters models in the future (e.g. rust-style borrowing).<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/d5e7dcb7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>-1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean anything as is. (I was originally on the side of using &#39;inout&#39; at the call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too verbose.)<br></p><p>I don&#39;t like it as an attribute because attributes generally don&#39;t affect the syntax of how something is used; they&#39;re mostly just implementation detail. Obviously they can have important semantics (like &quot;@objc(…)&quot; controlling the selector, or &#39;@convention(c)&#39; for C-compatible function pointers), but for the most part they don&#39;t change what the declaration is, whereas &#39;inout&#39; definitely does.<br></p><p>Given that we already use this syntax for function types when the parameter is unnamed, &#39;(inout Int, inout named: Int) -&gt; Void&#39;, I think Erica&#39;s first suggestion is my favorite so far.<br></p><p>Jordan<br></p><p><br>&gt; On Dec 19, 2015, at 16:10 , Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt; <br>&gt; func foo(x: inout Int)<br>&gt; func foo(x: @inout(Int))<br>&gt; func foo(x: @inout Int)<br>&gt; <br>&gt; Is there an underlying reason that parameter modification should live on the name side rather than the type side of the colon? They aren&#39;t really modifying the name<br>&gt; <br>&gt; -- Erica, inexperienced with Rust<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 7:07 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(inout x: Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt; “inout” is intended to communicate (or at least hint at) the copy-in / copy-out behavior of the argument.  It is also there to enable other parameter modifiers, which can enable other more advanced parameters models in the future (e.g. rust-style borrowing).<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/b3b62ce2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 19, 2015 at 07:00:00pm</p></header><div class="content"><p>On Sat, Dec 19, 2015 at 7:06 PM, Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean<br>&gt; anything as is. (I was originally on the side of using &#39;inout&#39; at the call<br>&gt; site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too<br>&gt; verbose.)<br>&gt;<br></p><p>I&#39;d actually suggest that we reconsider this.  &#39;&amp;&#39; at the callsite has deep<br>associations with C semantics, and I have too frequently seen buggy code<br>using &#39;&amp;x&#39; combined with one of the C interop implicit conversions to &quot;get<br>a pointer&quot; that the code stores in a variable somewhere.  It is also hard<br>to explain to people that &#39;&amp;x&#39; does not do what they want in that case, &quot;&amp;<br>means address-of, and it returns a pointer here, what do you mean I can&#39;t<br>use it?&quot;<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/92c95d72/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 19, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:12 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 7:06 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean anything as is. (I was originally on the side of using &#39;inout&#39; at the call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too verbose.)<br>&gt; <br>&gt; I&#39;d actually suggest that we reconsider this.  &#39;&amp;&#39; at the callsite has deep associations with C semantics, and I have too frequently seen buggy code using &#39;&amp;x&#39; combined with one of the C interop implicit conversions to &quot;get a pointer&quot; that the code stores in a variable somewhere.  It is also hard to explain to people that &#39;&amp;x&#39; does not do what they want in that case, &quot;&amp; means address-of, and it returns a pointer here, what do you mean I can&#39;t use it?&quot;<br></p><p>I have always thought &quot;&amp;&quot; was problematic for that reason.  The question is whether it&#39;s problematic enough to change.<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151219/fb83b033/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 7:12 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sat, Dec 19, 2015 at 7:06 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean anything as is. (I was originally on the side of using &#39;inout&#39; at the call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too verbose.)<br>&gt; <br>&gt; I&#39;d actually suggest that we reconsider this.  &#39;&amp;&#39; at the callsite has deep associations with C semantics, and I have too frequently seen buggy code using &#39;&amp;x&#39; combined with one of the C interop implicit conversions to &quot;get a pointer&quot; that the code stores in a variable somewhere.  It is also hard to explain to people that &#39;&amp;x&#39; does not do what they want in that case, &quot;&amp; means address-of, and it returns a pointer here, what do you mean I can&#39;t use it?&quot;<br></p><p>Using `inout` at the call site seems reasonable to me. I&#39;d bet the vast majority of `inout` parameters are really the implicit `self` of mutating methods, which already get a pass, so aside from `swap` I wonder how often `&amp;` is in practice.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/092c606e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 10:27 , Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 7:12 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sat, Dec 19, 2015 at 7:06 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean anything as is. (I was originally on the side of using &#39;inout&#39; at the call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too verbose.)<br>&gt;&gt; <br>&gt;&gt; I&#39;d actually suggest that we reconsider this.  &#39;&amp;&#39; at the callsite has deep associations with C semantics, and I have too frequently seen buggy code using &#39;&amp;x&#39; combined with one of the C interop implicit conversions to &quot;get a pointer&quot; that the code stores in a variable somewhere.  It is also hard to explain to people that &#39;&amp;x&#39; does not do what they want in that case, &quot;&amp; means address-of, and it returns a pointer here, what do you mean I can&#39;t use it?&quot;<br>&gt; <br>&gt; Using `inout` at the call site seems reasonable to me. I&#39;d bet the vast majority of `inout` parameters are really the implicit `self` of mutating methods, which already get a pass, so aside from `swap` I wonder how often `&amp;` is in practice.<br></p><p>One downside is that we do use &#39;&amp;&#39; for things other than inout: pointers. If/when we do have a notion of &quot;pass the stable address of this thing&quot;, &#39;inout&#39; is not necessarily the most appropriate way to mark it.<br></p><p>Then again, if something has a stable address, you&#39;re not limited to getting its address using a call.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/d54a270f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December 21, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 11:19 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Dec 21, 2015, at 10:27 , Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 19, 2015, at 7:12 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sat, Dec 19, 2015 at 7:06 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean anything as is. (I was originally on the side of using &#39;inout&#39; at the call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too verbose.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d actually suggest that we reconsider this.  &#39;&amp;&#39; at the callsite has deep associations with C semantics, and I have too frequently seen buggy code using &#39;&amp;x&#39; combined with one of the C interop implicit conversions to &quot;get a pointer&quot; that the code stores in a variable somewhere.  It is also hard to explain to people that &#39;&amp;x&#39; does not do what they want in that case, &quot;&amp; means address-of, and it returns a pointer here, what do you mean I can&#39;t use it?&quot;<br>&gt;&gt; <br>&gt;&gt; Using `inout` at the call site seems reasonable to me. I&#39;d bet the vast majority of `inout` parameters are really the implicit `self` of mutating methods, which already get a pass, so aside from `swap` I wonder how often `&amp;` is in practice.<br>&gt; <br>&gt; One downside is that we do use &#39;&amp;&#39; for things other than inout: pointers. If/when we do have a notion of &quot;pass the stable address of this thing&quot;, &#39;inout&#39; is not necessarily the most appropriate way to mark it.<br></p><p>This is the only concern I have with the current consensus.  We could just re-introduce &amp; as an ordinary unary “assignment” operator, maybe.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/9464d856/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>I agree 100% with everything Jordan said.<br></p><p>-Kevin Ballard<br></p><p>On Sat, Dec 19, 2015, at 07:06 PM, Jordan Rose via swift-evolution wrote:<br>&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean<br>&gt; anything as is. (I was originally on the side of using &#39;inout&#39; at the<br>&gt; call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was<br>&gt; considered too verbose.)<br>&gt;<br>&gt; I don&#39;t like it as an attribute because attributes generally don&#39;t<br>&gt; affect the *syntax* of how something is used; they&#39;re mostly just<br>&gt; implementation detail. Obviously they can have important semantics<br>&gt; (like &quot;@objc(…)&quot; controlling the selector, or &#39;@convention(c)&#39; for C-<br>&gt; compatible function pointers), but for the most part they don&#39;t change<br>&gt; what the declaration is, whereas &#39;inout&#39; *definitely* does.<br>&gt;<br>&gt; Given that we already use this syntax for function types when the<br>&gt; parameter is unnamed, &#39;(inout Int, inout named: Int) -&gt; Void&#39;, I think<br>&gt; Erica&#39;s first suggestion is my favorite so far.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt;&gt; On Dec 19, 2015, at 16:10 , Erica Sadun via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; What would the ramifications of the following be? Each addresses the<br>&gt;&gt; &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt;&gt;<br>&gt;&gt; func foo(x: inout Int) func foo(x: @inout(Int)) func foo(x:<br>&gt;&gt; @inout Int)<br>&gt;&gt;<br>&gt;&gt; Is there an underlying reason that parameter modification should live<br>&gt;&gt; on the name side rather than the type side of the colon? They aren&#39;t<br>&gt;&gt; really modifying the name<br>&gt;&gt;<br>&gt;&gt; -- Erica, inexperienced with Rust<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Dec 18, 2015, at 7:07 PM, Chris Lattner via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in<br>&gt;&gt;&gt;&gt; functions, and we&#39;re also making it so that language keywords are<br>&gt;&gt;&gt;&gt; valid argument labels. With both of these changes pending, I have a<br>&gt;&gt;&gt;&gt; hard time not reading:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; func foo(inout x: Int)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; as an argument labeled `inout` instead of an unlabeled argument<br>&gt;&gt;&gt;&gt; bound to `x`. Once `var` is phased out, `inout` would also be the<br>&gt;&gt;&gt;&gt; only remaining case where quoting is necessary to use a name as an<br>&gt;&gt;&gt;&gt; argument label. The `inout` keyword has always struck me as weird,<br>&gt;&gt;&gt;&gt; since it violates definition-follows-use—maybe we should replace it<br>&gt;&gt;&gt;&gt; with the `&amp;` sigil, mirroring its usage in call sites.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; “inout” is intended to communicate (or at least hint at) the copy-in<br>&gt;&gt;&gt; / copy-out behavior of the argument.  It is also there to enable<br>&gt;&gt;&gt; other parameter modifiers, which can enable other more advanced<br>&gt;&gt;&gt; parameters models in the future (e.g. rust-style borrowing).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/63b34c97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>Me too.<br></p><p>-Chris<br></p><p>&gt; On Dec 21, 2015, at 10:44 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree 100% with everything Jordan said.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Sat, Dec 19, 2015, at 07:06 PM, Jordan Rose via swift-evolution wrote:<br>&gt;&gt; -1 to using &#39;&amp;&#39; in the declaration; it&#39;s a sigil that doesn&#39;t mean anything as is. (I was originally on the side of using &#39;inout&#39; at the call site as well, i.e. &quot;swap(inout x, inout y)&quot;, but it was considered too verbose.)<br>&gt;&gt;  <br>&gt;&gt; I don&#39;t like it as an attribute because attributes generally don&#39;t affect the syntax of how something is used; they&#39;re mostly just implementation detail. Obviously they can have important semantics (like &quot;@objc(…)&quot; controlling the selector, or &#39;@convention(c)&#39; for C-compatible function pointers), but for the most part they don&#39;t change what the declaration is, whereas &#39;inout&#39; definitely does.<br>&gt;&gt;  <br>&gt;&gt; Given that we already use this syntax for function types when the parameter is unnamed, &#39;(inout Int, inout named: Int) -&gt; Void&#39;, I think Erica&#39;s first suggestion is my favorite so far.<br>&gt;&gt;  <br>&gt;&gt; Jordan<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On Dec 19, 2015, at 16:10 , Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; func foo(x: inout Int)<br>&gt;&gt;&gt; func foo(x: @inout(Int))<br>&gt;&gt;&gt; func foo(x: @inout Int)<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Is there an underlying reason that parameter modification should live on the name side rather than the type side of the colon? They aren&#39;t really modifying the name<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; -- Erica, inexperienced with Rust<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 7:07 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; func foo(inout x: Int)<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -1<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; “inout” is intended to communicate (or at least hint at) the copy-in / copy-out behavior of the argument.  It is also there to enable other parameter modifiers, which can enable other more advanced parameters models in the future (e.g. rust-style borrowing).<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/f6e8008a/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 4:10 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt; <br>&gt; func foo(x: inout Int)<br>&gt; func foo(x: @inout(Int))<br>&gt; func foo(x: @inout Int)<br>&gt; <br>&gt; Is there an underlying reason that parameter modification should live on the name side rather than the type side of the colon? They aren&#39;t really modifying the name<br>&gt; <br>&gt; -- Erica, inexperienced with Rust<br></p><p>Putting `inout` after the colon feels good to me. Like Jordan said, it meshes better with the type syntax, (inout Int) -&gt; (), too.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/7871ac63/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 21, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 12:25 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 4:10 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt;&gt; <br>&gt;&gt; func foo(x: inout Int)<br>&gt;&gt; func foo(x: @inout(Int))<br>&gt;&gt; func foo(x: @inout Int)<br>&gt;&gt; <br>&gt;&gt; Is there an underlying reason that parameter modification should live on the name side rather than the type side of the colon? They aren&#39;t really modifying the name<br>&gt;&gt; <br>&gt;&gt; -- Erica, inexperienced with Rust<br>&gt; <br>&gt; Putting `inout` after the colon feels good to me. Like Jordan said, it meshes better with the type syntax, (inout Int) -&gt; (), too.<br>&gt; <br></p><p>+1.  I like it.<br></p><p>&gt; -Joe<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/5332bc01/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>December 21, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 19, 2015, at 4:10 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt; <br>&gt; func foo(x: inout Int)<br>&gt; ...<br></p><p>I think I like this one better than all the others. <br>I have not analyzed all the implications of having it there but it feels right. <br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/ef0a8e58/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/61cd572a9774e87a610a8cd3b3b2e041?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Tahoma Toelkes</string> &lt;toelkes at apple.com&gt;<p>January  6, 2016 at 07:00:00am</p></header><div class="content"><p>+1<br></p><p>My sentiments exactly.  As I was catching up on this thread, this was almost exactly the syntax I was already considering mentioning when I encountered Erica&#39;s reply.<br></p><p>I don&#39;t know whether it will meet all requirements; however, from a readability perspective in both declarations and function type signatures, this syntax is the first of the suggestions that feels clear to me.<br></p><p>-- Tahoma<br></p><p>&gt; On Dec 21, 2015, at 11:20 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 19, 2015, at 4:10 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What would the ramifications of the following be? Each addresses the &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt;&gt; <br>&gt;&gt; func foo(x: inout Int)<br>&gt;&gt; ...<br>&gt; <br>&gt; I think I like this one better than all the others. <br>&gt; I have not analyzed all the implications of having it there but it feels right. <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/0dc0c0b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>+1<br></p><p>Chris Lattner mentioned that he wants to have a version of Rust&#39;s borrowing<br>syntax eventually. With this change, if we get that, then we keep a very<br>symmetric syntax:<br>func foo(x: inout T) called as foo(inout myT)<br>func foo(x: &amp;T) called as foo(&amp;myT)<br>func foo(x: &amp;mut T) called as foo(&amp;mut myT)<br></p><p>On Wed, Jan 6, 2016 at 10:42 AM, Tahoma Toelkes via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; My sentiments exactly.  As I was catching up on this thread, this was<br>&gt; almost exactly the syntax I was already considering mentioning when I<br>&gt; encountered Erica&#39;s reply.<br>&gt;<br>&gt; I don&#39;t know whether it will meet all requirements; however, from a<br>&gt; readability perspective in both declarations and function type signatures,<br>&gt; this syntax is the first of the suggestions that feels clear to me.<br>&gt;<br>&gt; -- Tahoma<br>&gt;<br>&gt; On Dec 21, 2015, at 11:20 AM, Ricardo Parada via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 19, 2015, at 4:10 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; What would the ramifications of the following be? Each addresses the<br>&gt; &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt;<br>&gt; func foo(x: inout Int)<br>&gt;<br>&gt; ...<br>&gt;<br>&gt;<br>&gt; I think I like this one better than all the others.<br>&gt; I have not analyzed all the implications of having it there but it feels<br>&gt; right.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/e1a0ed1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January  7, 2016 at 11:00:00am</p></header><div class="content"><p>+1 for having to mark calls to `inout` parameters with `inout` rather than<br>`&amp;`, `&amp;` is well entrenched in its C usage.<br></p><p>For repurposing of `&amp;`; if you had library functions:<br></p><p>    class Reference&lt;T&gt; {<br>        let value: T<br>        init(value: T) { self.value = value }<br>    }<br></p><p>    class MutableReference&lt;T&gt; {<br>        var value: T<br>        init(value: T) { self.value = value }<br>    }<br></p><p>Then when you obtained something from a C library you wrapped it:<br></p><p>    let rect = MutableReference(CGRectMake(0,0,0,0))<br></p><p>Wouldn&#39;t that cover most use cases and be simpler than implementing a new<br>`&amp;`?<br></p><p>The above classes would also have general purpose usage reference<br>semantics rather than `inout` semantics, e.g.:<br></p><p>    let array = [MutableArray(1), MutableArray(2)]<br></p><p>`array` can be passed to threads, used in closures, etc. without the copy<br>in and copy out semantics being surprising and unpredictable.<br></p><p>On Thursday, 7 January 2016, Trent Nadeau via swift-evolution &lt;<br>swift-evolution at swift.org<br>&lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; Chris Lattner mentioned that he wants to have a version of Rust&#39;s<br>&gt; borrowing syntax eventually. With this change, if we get that, then we keep<br>&gt; a very symmetric syntax:<br>&gt; func foo(x: inout T) called as foo(inout myT)<br>&gt; func foo(x: &amp;T) called as foo(&amp;myT)<br>&gt; func foo(x: &amp;mut T) called as foo(&amp;mut myT)<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 10:42 AM, Tahoma Toelkes via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1<br>&gt;&gt;<br>&gt;&gt; My sentiments exactly.  As I was catching up on this thread, this was<br>&gt;&gt; almost exactly the syntax I was already considering mentioning when I<br>&gt;&gt; encountered Erica&#39;s reply.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t know whether it will meet all requirements; however, from a<br>&gt;&gt; readability perspective in both declarations and function type signatures,<br>&gt;&gt; this syntax is the first of the suggestions that feels clear to me.<br>&gt;&gt;<br>&gt;&gt; -- Tahoma<br>&gt;&gt;<br>&gt;&gt; On Dec 21, 2015, at 11:20 AM, Ricardo Parada via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 19, 2015, at 4:10 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; What would the ramifications of the following be? Each addresses the<br>&gt;&gt; &quot;confusable with labeling&quot; issue but preserve the inout keyword.<br>&gt;&gt;<br>&gt;&gt; func foo(x: inout Int)<br>&gt;&gt;<br>&gt;&gt; ...<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I think I like this one better than all the others.<br>&gt;&gt; I have not analyzed all the implications of having it there but it feels<br>&gt;&gt; right.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Trent Nadeau<br>&gt;<br></p><p><br>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/4608bbae/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 6:07 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt;&gt; <br>&gt;&gt; func foo(inout x: Int)<br>&gt;&gt; <br>&gt;&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; “inout” is intended to communicate (or at least hint at) the copy-in / copy-out behavior of the argument.  It is also there to enable other parameter modifiers, which can enable other more advanced parameters models in the future (e.g. rust-style borrowing).<br></p><p>If we added those kinds of knobs, they&#39;d almost certainly be @attributes IMO. A borrow model isn&#39;t really a core interface change the way `inout` is; it&#39;s a set of additional restrictions on use that let the compiler avoid unwanted retaining and copying.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/9f932214/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 10:52 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt; “inout” is intended to communicate (or at least hint at) the copy-in / copy-out behavior of the argument.  It is also there to enable other parameter modifiers, which can enable other more advanced parameters models in the future (e.g. rust-style borrowing).<br>&gt; <br>&gt; If we added those kinds of knobs, they&#39;d almost certainly be @attributes IMO. A borrow model isn&#39;t really a core interface change the way `inout` is; it&#39;s a set of additional restrictions on use that let the compiler avoid unwanted retaining and copying.<br></p><p>It depends on the details of the design.  If something is currently borrowed “mut” then it can’t be used by anyone else. I’d want that “borrowing” action to be explicit in the code.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/4041b8e5/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>On Fri, Dec 18, 2015 at 5:23 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions,<br>&gt; and we&#39;re also making it so that language keywords are valid argument<br>&gt; labels. With both of these changes pending, I have a hard time not reading:<br>&gt;<br>&gt; func foo(inout x: Int)<br>&gt;<br>&gt;<br>I don&#39;t think this would be a problem in practice since it is hard for me<br>to imagine an API that would use &#39;inout&#39; as a label -- at least they would<br>spell it &#39;inOut&#39; according to our API guidelines (but I really think they<br>should call it something else).<br></p><p>There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>for &#39;out&#39;.<br></p><p>So, overall, I don&#39;t support this.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/a8c839d2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt; <br>&gt; func foo(inout x: Int)<br>&gt; <br>&gt; <br>&gt; I don&#39;t think this would be a problem in practice since it is hard for me to imagine an API that would use &#39;inout&#39; as a label -- at least they would spell it &#39;inOut&#39; according to our API guidelines (but I really think they should call it something else).<br></p><p>My main concern is readability of the declaration. &#39;func foo(inout x: Int)&#39; and &#39;func foo(label x: Int)&#39; look very similar at a glance, but have totally different meanings. Going back to &#39;@inout&#39; like Slava suggested would be another possible improvement.<br></p><p>&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil for &#39;out&#39;.<br></p><p>We have multiple returns. Why would we ever add out parameters?<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d7034004/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 18, 2015 at 08:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Dec 18, 2015, at 8:21 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 18, 2015 at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(inout x: Int)<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this would be a problem in practice since it is hard for me to imagine an API that would use &#39;inout&#39; as a label -- at least they would spell it &#39;inOut&#39; according to our API guidelines (but I really think they should call it something else).<br>&gt; <br>&gt; My main concern is readability of the declaration. &#39;func foo(inout x: Int)&#39; and &#39;func foo(label x: Int)&#39; look very similar at a glance, but have totally different meanings. Going back to &#39;@inout&#39; like Slava suggested would be another possible improvement.<br></p><p>I wasn&#39;t thinking about the future with my initial vote.  I definitely want to see a Rust-like ownership system someday and am excited to know that Chris is really interested in doing that eventually.  It&#39;s probably best to do something that will fit into that world well. So maybe @inout is a better option.  <br></p><p><br>&gt; <br>&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil for &#39;out&#39;.<br>&gt; <br>&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/e45516b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>December 19, 2015 at 03:00:00am</p></header><div class="content"><p>I&#39;d prefer `@inout` over `&amp;x`.<br>It more clearly communicates its function and annotations already exist on parameters so it reuses that concept and has a clear location.<br></p><p>When using  `@inout` I&#39;m in favor of this change.<br></p><p>Although I&#39;d like to point out that with syntax highlighting `inout` the keyword is clearly distinguishable from a parameter name.<br>But I don&#39;t mind typing an additional @ which is helpful for those situations without syntax highlighting and with the removal of `var` using an annotation seems more consistent.<br></p><p><br>- Janosch<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt; for &#39;out&#39;.<br>&gt;<br>&gt; We have multiple returns. Why would we ever add out parameters?<br></p><p>I don&#39;t want to turn this thread into a discussion about out<br>parameters, but one reason would be to replace<br>AutoreleasingUnsafeMutablePointer.  Another one is to add labels to<br>the output parameters:<br></p><p>let (day, month, year) = parseDate()<br>let (year, day, month) = parseDate() // bug?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 19, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 8:52 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt; for &#39;out&#39;.<br>&gt;&gt; <br>&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt; <br>&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt; parameters, but one reason would be to replace<br>&gt; AutoreleasingUnsafeMutablePointer.  Another one is to add labels to<br>&gt; the output parameters:<br>&gt; <br>&gt; let (day, month, year) = parseDate()<br>&gt; let (year, day, month) = parseDate() // bug?<br>&gt; <br></p><p>I haven&#39;t had a need for multiple returns yet although I&#39;m really glad they are in the language.  They are much nicer than out parameters.  <br></p><p>I&#39;m really surprised if it isn&#39;t possible to use labeled tuples for multiple returns.  It seems like that should be possible either now or in the future.  (If I was at a computer right now I would try it)<br></p><p>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 6:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt; for &#39;out&#39;.<br>&gt;&gt; <br>&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt; <br>&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt; parameters, but one reason would be to replace<br>&gt; AutoreleasingUnsafeMutablePointer.<br></p><p>IMO we should eventually import out params from C as multiple returns.<br></p><p>&gt;  Another one is to add labels to<br>&gt; the output parameters:<br>&gt; <br>&gt; let (day, month, year) = parseDate()<br>&gt; let (year, day, month) = parseDate() // bug?<br></p><p>Labeled tuples seem like they could help with that, with compiler QoI to catch cases like this where you obviously permuted the return names.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>On Mon, Dec 21, 2015 at 10:34 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 18, 2015, at 6:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt;&gt; for &#39;out&#39;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt;&gt;<br>&gt;&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt;&gt; parameters, but one reason would be to replace<br>&gt;&gt; AutoreleasingUnsafeMutablePointer.<br>&gt;<br>&gt; IMO we should eventually import out params from C as multiple returns.<br>&gt;<br>&gt;&gt;  Another one is to add labels to<br>&gt;&gt; the output parameters:<br>&gt;&gt;<br>&gt;&gt; let (day, month, year) = parseDate()<br>&gt;&gt; let (year, day, month) = parseDate() // bug?<br>&gt;<br>&gt; Labeled tuples seem like they could help with that, with compiler QoI to catch cases like this where you obviously permuted the return names.<br></p><p>Currently they don&#39;t help:<br></p><p>(swift) func parseDate() -&gt; (day: Int, month: Int, year: Int) { return (0,0,0) }<br>(swift) let (year, month, day) = parseDate()<br>// (year, month, day) : (Int, Int, Int) = (0, 0, 0)<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 21, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 12:36 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Dec 21, 2015 at 10:34 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 6:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt;&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt;&gt;&gt; for &#39;out&#39;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt;&gt;&gt; parameters, but one reason would be to replace<br>&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer.<br>&gt;&gt; <br>&gt;&gt; IMO we should eventually import out params from C as multiple returns.<br>&gt;&gt; <br>&gt;&gt;&gt; Another one is to add labels to<br>&gt;&gt;&gt; the output parameters:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let (day, month, year) = parseDate()<br>&gt;&gt;&gt; let (year, day, month) = parseDate() // bug?<br>&gt;&gt; <br>&gt;&gt; Labeled tuples seem like they could help with that, with compiler QoI to catch cases like this where you obviously permuted the return names.<br>&gt; <br>&gt; Currently they don&#39;t help:<br>&gt; <br>&gt; (swift) func parseDate() -&gt; (day: Int, month: Int, year: Int) { return (0,0,0) }<br>&gt; (swift) let (year, month, day) = parseDate()<br>&gt; // (year, month, day) : (Int, Int, Int) = (0, 0, 0)<br></p><p><br>Looks like they help to me:<br></p><p>func labeledMultiReturn() -&gt; (string: String, int: Int) {<br>    return (string: &quot;hello&quot;, int: 42)<br>}<br></p><p>let (string: boundString, int: boundInt) = labeledMultiReturn()<br></p><p>print(boundString)<br>print(boundInt)<br></p><p>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 21, 2015 at 10:00:00am</p></header><div class="content"><p>On Mon, Dec 21, 2015 at 10:40 AM, Matthew Johnson<br>&lt;matthew at anandabits.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 21, 2015, at 12:36 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Mon, Dec 21, 2015 at 10:34 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt;&gt;&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt;&gt;&gt;&gt; for &#39;out&#39;.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt;&gt;&gt;&gt; parameters, but one reason would be to replace<br>&gt;&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; IMO we should eventually import out params from C as multiple returns.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Another one is to add labels to<br>&gt;&gt;&gt;&gt; the output parameters:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; let (day, month, year) = parseDate()<br>&gt;&gt;&gt;&gt; let (year, day, month) = parseDate() // bug?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Labeled tuples seem like they could help with that, with compiler QoI to catch cases like this where you obviously permuted the return names.<br>&gt;&gt;<br>&gt;&gt; Currently they don&#39;t help:<br>&gt;&gt;<br>&gt;&gt; (swift) func parseDate() -&gt; (day: Int, month: Int, year: Int) { return (0,0,0) }<br>&gt;&gt; (swift) let (year, month, day) = parseDate()<br>&gt;&gt; // (year, month, day) : (Int, Int, Int) = (0, 0, 0)<br>&gt;<br>&gt;<br>&gt; Looks like they help to me:<br>&gt;<br>&gt; func labeledMultiReturn() -&gt; (string: String, int: Int) {<br>&gt;     return (string: &quot;hello&quot;, int: 42)<br>&gt; }<br>&gt;<br>&gt; let (string: boundString, int: boundInt) = labeledMultiReturn()<br>&gt;<br>&gt; print(boundString)<br>&gt; print(boundInt)<br></p><p>Well, they don&#39;t *force* you to use labels at the use site,<br>allowing bugs to happen even if the API author went out of their way<br>and used labels.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 21, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 12:43 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Dec 21, 2015 at 10:40 AM, Matthew Johnson<br>&gt; &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 21, 2015, at 12:36 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 21, 2015 at 10:34 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt;&gt;&gt;&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt;&gt;&gt;&gt;&gt; for &#39;out&#39;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt;&gt;&gt;&gt;&gt; parameters, but one reason would be to replace<br>&gt;&gt;&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; IMO we should eventually import out params from C as multiple returns.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Another one is to add labels to<br>&gt;&gt;&gt;&gt;&gt; the output parameters:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let (day, month, year) = parseDate()<br>&gt;&gt;&gt;&gt;&gt; let (year, day, month) = parseDate() // bug?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Labeled tuples seem like they could help with that, with compiler QoI to catch cases like this where you obviously permuted the return names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently they don&#39;t help:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (swift) func parseDate() -&gt; (day: Int, month: Int, year: Int) { return (0,0,0) }<br>&gt;&gt;&gt; (swift) let (year, month, day) = parseDate()<br>&gt;&gt;&gt; // (year, month, day) : (Int, Int, Int) = (0, 0, 0)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Looks like they help to me:<br>&gt;&gt; <br>&gt;&gt; func labeledMultiReturn() -&gt; (string: String, int: Int) {<br>&gt;&gt;    return (string: &quot;hello&quot;, int: 42)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let (string: boundString, int: boundInt) = labeledMultiReturn()<br>&gt;&gt; <br>&gt;&gt; print(boundString)<br>&gt;&gt; print(boundInt)<br>&gt; <br>&gt; Well, they don&#39;t *force* you to use labels at the use site,<br>&gt; allowing bugs to happen even if the API author went out of their way<br>&gt; and used labels.<br></p><p>Got it.  Objection understood.  That said, wouldn’t it be a relatively small change to require their use at the call site when the API author includes them in the return type, at least when the result is directly bound to variables?<br></p><p>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 21, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 11:07 AM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 12:43 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 21, 2015 at 10:40 AM, Matthew Johnson<br>&gt;&gt; &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 21, 2015, at 12:36 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Dec 21, 2015 at 10:34 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:52 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Dec 18, 2015 at 6:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 6:08 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; There&#39;s also a possibility that we add &#39;out&#39; parameters in the future, and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; if &#39;inout&#39; would be spelled &#39;&amp;&#39;, then we would need to find another sigil<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; for &#39;out&#39;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We have multiple returns. Why would we ever add out parameters?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t want to turn this thread into a discussion about out<br>&gt;&gt;&gt;&gt;&gt;&gt; parameters, but one reason would be to replace<br>&gt;&gt;&gt;&gt;&gt;&gt; AutoreleasingUnsafeMutablePointer.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; IMO we should eventually import out params from C as multiple returns.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Another one is to add labels to<br>&gt;&gt;&gt;&gt;&gt;&gt; the output parameters:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let (day, month, year) = parseDate()<br>&gt;&gt;&gt;&gt;&gt;&gt; let (year, day, month) = parseDate() // bug?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Labeled tuples seem like they could help with that, with compiler QoI to catch cases like this where you obviously permuted the return names.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently they don&#39;t help:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (swift) func parseDate() -&gt; (day: Int, month: Int, year: Int) { return (0,0,0) }<br>&gt;&gt;&gt;&gt; (swift) let (year, month, day) = parseDate()<br>&gt;&gt;&gt;&gt; // (year, month, day) : (Int, Int, Int) = (0, 0, 0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Looks like they help to me:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func labeledMultiReturn() -&gt; (string: String, int: Int) {<br>&gt;&gt;&gt;   return (string: &quot;hello&quot;, int: 42)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let (string: boundString, int: boundInt) = labeledMultiReturn()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(boundString)<br>&gt;&gt;&gt; print(boundInt)<br>&gt;&gt; <br>&gt;&gt; Well, they don&#39;t *force* you to use labels at the use site,<br>&gt;&gt; allowing bugs to happen even if the API author went out of their way<br>&gt;&gt; and used labels.<br>&gt; <br>&gt; Got it.  Objection understood.  That said, wouldn’t it be a relatively small change to require their use at the call site when the API author includes them in the return type, at least when the result is directly bound to variables?<br></p><p>That, or require either the label be explicit or that the binding name match the label. &#39;let (foo: foo, bar: bar)&#39; would be a bit unfortunate.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>December 18, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 18, 2015, at 5:23 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; For Swift 3, we&#39;re planning to phase out &#39;var&#39; parameters in functions, and we&#39;re also making it so that language keywords are valid argument labels. With both of these changes pending, I have a hard time not reading:<br>&gt; <br>&gt; func foo(inout x: Int)<br>&gt; <br>&gt; as an argument labeled `inout` instead of an unlabeled argument bound to `x`. Once `var` is phased out, `inout` would also be the only remaining case where quoting is necessary to use a name as an argument label. The `inout` keyword has always struck me as weird, since it violates definition-follows-use—maybe we should replace it with the `&amp;` sigil, mirroring its usage in call sites.<br></p><p>&lt;bikeshed&gt;what about @inout?&lt;/bikeshed&gt;<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/507da6af/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
