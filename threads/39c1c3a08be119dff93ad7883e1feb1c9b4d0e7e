<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December  9, 2015 at 11:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>First of all, sorry for not being able to formulate these presumably basic<br>questions in a  better/shorter way.<br></p><p>Background: We&#39;re working on an app that will benefit greatly from Swift&#39;s<br>ability to generate optimized code from relatively high level abstractions.<br></p><p>I&#39;ve successfully compiled Swift from sources and observed some significant<br>improvements in the optimizer (for details see the following forum thread,<br>especially edit1 and edit2 of this post:<br>https://forums.developer.apple.com/thread/27204#93327<br>).<br></p><p>Now I&#39;d like to be able to use Swift built from sources from within Xcode<br>(or at least have some way of using it with code completion and probably<br>swiftpm), but I haven&#39;t been able to find information on how to do that.<br></p><p>Here&#39;s my journey so far:<br></p><p>1. Read the main swift repos readme.<br></p><p>2. Cloned the 9 repositories listed there (for read-only access).<br></p><p>3. Built using:<br>    swift/utils/build-script -R --no-assertions --no-swift-stdlib-assertions<br>    (Found out about the no-assert-flags through Twitter. Without them, the<br>resulting compiler compiled binaries that were very slow.)<br></p><p>3. Compiled my &quot;performance critical&quot; test code like this:<br>    xcrun /blabla/build/Ninja-Release/swift-macosx-x86_64/bin/swift<br>-Ounchecked -gnone -whole-module-optimization main.swift<br>    (My first try was without xcrun, but then it would complain about &quot;no<br>such module&quot;. So I asked Twitter and got the info about using xcrun.)<br></p><p>4. Noted significant improvements in what the optimizer was able to do with<br>my test code (compared to when compiling it with Xcode 7.2. The<br>compiled-from-sources-compiler produced 340 times faster code. See details<br>in the above forum thread.)<br></p><p>5. Feeling happy. Can&#39;t wait until this gets into an Xcode GM.<br></p><p>6. Wish I knew more about how to build Swift from sources, so I could make<br>my workflow more convenient, ie switching between compiling with<br>Swift-built-from-sources, Xcode and Xcode-beta. Eg:<br></p><p>- Is there a way to use the built-from-sources-version of Swift from within<br>Xcode (can I build a toolchain or something)?<br></p><p>- How do I build and use the package manager (swiftpm)? It doesn&#39;t seem to<br>get built when I build everything(?) using the build-script as described<br>above.<br></p><p>- Can I use any of the build-presets for this, and if so will it use the<br>--no-assertions and --no-swift-stdlib-assertions options?<br></p><p>My goal is to be able to have a convenient way of being able to write and<br>compile my (performance critical) code using, switching between and<br>comparing, the three different Swift versions in current<br>Xcode (GM),<br>Xcode-beta and<br>built-from-source.<br></p><p>Are the answers to these (and similar) questions plain to see in some<br>documentation somewhere or do I have to dig around in various scripts etc<br>and try to figure things out?<br></p><p>Thanks,<br>/Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151209/39c10e7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  9, 2015 at 05:00:00pm</p></header><div class="content"><p>Looks like Mish Awadah has an answer on a later thread:<br></p><p>&gt; Here’s what I’ve done in the past to build a toolchain using the build script. <br>&gt; <br>&gt; function build_osx_package() {<br>&gt; <br>&gt;    YEAR=$(date +&quot;%Y&quot;)<br>&gt;    MONTH=$(date +&quot;%m&quot;)<br>&gt;    DAY=$(date +&quot;%d&quot;)<br>&gt;    TOOLCHAIN_VERSION=&quot;swift-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt;    ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt;    ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt;    SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt;    BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt;    DISPLAY_NAME=&quot;Swift Development Snapshot&quot;<br>&gt;    TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; <br>&gt;    SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt;    SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt;    SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt;    SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt;    SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt;    SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt;    SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt; <br>&gt;    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; }<br></p><p>I&#39;m not sure if this is the easiest way, but it will give you a toolchain. Hope that helps.<br></p><p>Jordan<br></p><p>P.S. I (still) don&#39;t know anything about this myself, but I&#39;ve CCed Mish for further toolchain questions.<br></p><p><br></p><p>&gt; On Dec 9, 2015, at 14:22, Jens Persson via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; First of all, sorry for not being able to formulate these presumably basic questions in a  better/shorter way.<br>&gt;  <br>&gt; Background: We&#39;re working on an app that will benefit greatly from Swift&#39;s ability to generate optimized code from relatively high level abstractions.<br>&gt; <br>&gt; I&#39;ve successfully compiled Swift from sources and observed some significant improvements in the optimizer (for details see the following forum thread, especially edit1 and edit2 of this post:<br>&gt; https://forums.developer.apple.com/thread/27204#93327 &lt;https://forums.developer.apple.com/thread/27204#93327&gt;<br>&gt; ).<br>&gt; <br>&gt; Now I&#39;d like to be able to use Swift built from sources from within Xcode (or at least have some way of using it with code completion and probably swiftpm), but I haven&#39;t been able to find information on how to do that.<br>&gt; <br>&gt; Here&#39;s my journey so far:<br>&gt; <br>&gt; 1. Read the main swift repos readme.<br>&gt; <br>&gt; 2. Cloned the 9 repositories listed there (for read-only access).<br>&gt; <br>&gt; 3. Built using:<br>&gt;     swift/utils/build-script -R --no-assertions --no-swift-stdlib-assertions<br>&gt;     (Found out about the no-assert-flags through Twitter. Without them, the resulting compiler compiled binaries that were very slow.)<br>&gt; <br>&gt; 3. Compiled my &quot;performance critical&quot; test code like this:<br>&gt;     xcrun /blabla/build/Ninja-Release/swift-macosx-x86_64/bin/swift -Ounchecked -gnone -whole-module-optimization main.swift<br>&gt;     (My first try was without xcrun, but then it would complain about &quot;no such module&quot;. So I asked Twitter and got the info about using xcrun.) <br>&gt; <br>&gt; 4. Noted significant improvements in what the optimizer was able to do with my test code (compared to when compiling it with Xcode 7.2. The compiled-from-sources-compiler produced 340 times faster code. See details in the above forum thread.)<br>&gt; <br>&gt; 5. Feeling happy. Can&#39;t wait until this gets into an Xcode GM.<br>&gt; <br>&gt; 6. Wish I knew more about how to build Swift from sources, so I could make my workflow more convenient, ie switching between compiling with Swift-built-from-sources, Xcode and Xcode-beta. Eg:<br>&gt; <br>&gt; - Is there a way to use the built-from-sources-version of Swift from within Xcode (can I build a toolchain or something)?<br>&gt; <br>&gt; - How do I build and use the package manager (swiftpm)? It doesn&#39;t seem to get built when I build everything(?) using the build-script as described above.<br>&gt; <br>&gt; - Can I use any of the build-presets for this, and if so will it use the --no-assertions and --no-swift-stdlib-assertions options?<br>&gt; <br>&gt; My goal is to be able to have a convenient way of being able to write and compile my (performance critical) code using, switching between and comparing, the three different Swift versions in current<br>&gt; Xcode (GM),<br>&gt; Xcode-beta and<br>&gt; built-from-source.<br>&gt; <br>&gt; Are the answers to these (and similar) questions plain to see in some documentation somewhere or do I have to dig around in various scripts etc and try to figure things out? <br>&gt; <br>&gt; Thanks,<br>&gt; /Jens<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151209/94f7d306/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  9, 2015 at 06:00:00pm</p></header><div class="content"><p>On Wed, Dec 9, 2015 at 5:54 PM, Jordan Rose via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Looks like Mish Awadah has an answer on a later thread:<br>&gt;<br>&gt;    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot;<br>&gt; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot;<br>&gt; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot;<br>&gt; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot;<br>&gt; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot;<br>&gt; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot;<br>&gt; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot;<br>&gt; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot;<br>&gt; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot;<br>&gt; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt; }<br>&gt;<br>&gt; Thanks, Jordan!<br></p><p>Just wanted to emphasize that the package presets is the only way you<br>should be building Swift for any production use (either on Linux or OS X).<br></p><p>If you are trying to port Swift to some platform where existing presets<br>don&#39;t work, feel free to ask us on swift.org mailing lists.  If you want to<br>make a preset for production use from scratch, I strongly recommend reading<br>existing packaging presets and understanding what each flag does (not just<br>the description).<br></p><p>What happened in your build is that the standard library was built with<br>assertions.  This is the right thing for development, but wrong for<br>production.  Since production build process will be complex no matter what,<br>we decided to optimize build-script interface for local development.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151209/1af02a7b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>Thanks!<br>I tried the above to compile with the buildbot_osx_package preset. It kind<br>of worked, but it failed while performing the tests.<br>(TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39; FAILED)<br>So, I got a working swiftc etc but no package or toolchain or anything (at<br>least as far as I could see).<br></p><p>However, trying out the resulting swiftc shows that it is slow, ie the<br>buildbot_osx_package preset did not imply --no-assertions<br>--no-swift-stdlib-assertions.<br></p><p>Since I am interesting in observing the latest improvements in the<br>optimizer, I wonder if any of the existing presets will build the std lib<br>without assertions, and produce an installable package (which will give me<br>toolchain)?<br></p><p>As previously stated, my goal is simply(?) to be able to use / try out<br>these in parallell:<br>1. Xcode.app<br>2. Xcode-beta.app<br>3. built-from-sources<br></p><p>/Jens<br></p><p><br>On Thu, Dec 10, 2015 at 3:31 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Wed, Dec 9, 2015 at 5:54 PM, Jordan Rose via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Looks like Mish Awadah has an answer on a later thread:<br>&gt;&gt;<br>&gt;&gt;    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot;<br>&gt;&gt; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot;<br>&gt;&gt; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot;<br>&gt;&gt; install_toolchain_dir=&quot;${SWIFT_TOOLCHAIN_DIR}&quot;<br>&gt;&gt; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot;<br>&gt;&gt; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot;<br>&gt;&gt; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot;<br>&gt;&gt; darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot;<br>&gt;&gt; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot;<br>&gt;&gt; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Thanks, Jordan!<br>&gt;<br>&gt; Just wanted to emphasize that the package presets is the only way you<br>&gt; should be building Swift for any production use (either on Linux or OS X).<br>&gt;<br>&gt; If you are trying to port Swift to some platform where existing presets<br>&gt; don&#39;t work, feel free to ask us on swift.org mailing lists.  If you want<br>&gt; to make a preset for production use from scratch, I strongly recommend<br>&gt; reading existing packaging presets and understanding what each flag does<br>&gt; (not just the description).<br>&gt;<br>&gt; What happened in your build is that the standard library was built with<br>&gt; assertions.  This is the right thing for development, but wrong for<br>&gt; production.  Since production build process will be complex no matter what,<br>&gt; we decided to optimize build-script interface for local development.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151210/6e221979/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 10, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 7:41 , Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; <br>&gt; I tried the above to compile with the buildbot_osx_package preset. It kind of worked, but it failed while performing the tests.<br>&gt; (TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39; FAILED)<br>&gt; <br></p><p>*sigh* I&#39;m not sure what&#39;s up with this test. Someone already filed an SR about it, SR-31 &lt;https://bugs.swift.org/browse/SR-31&gt;. It should be safe to disable it locally by adding a line like this:<br></p><p>// REQUIRES: disabled<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151210/f550d5ef/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 10, 2015 at 09:00:00am</p></header><div class="content"><p>On Thu, Dec 10, 2015 at 7:41 AM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; Thanks!<br>&gt; I tried the above to compile with the buildbot_osx_package preset. It kind<br>&gt; of worked, but it failed while performing the tests.<br>&gt; (TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39; FAILED)<br>&gt; So, I got a working swiftc etc but no package or toolchain or anything (at<br>&gt; least as far as I could see).<br>&gt;<br>&gt; However, trying out the resulting swiftc shows that it is slow, ie the<br>&gt; buildbot_osx_package preset did not imply --no-assertions<br>&gt; --no-swift-stdlib-assertions.<br></p><p>Jens,<br></p><p>I think you found an issue in our presets.  I filed<br>https://bugs.swift.org/browse/SR-180  Here, we have an incorrect<br>workaround that causes this issue:<br></p><p>[preset: mixin_lightweight_assertions]<br>assertions<br></p><p># FIXME: This should be:<br># no-assertions<br># swift-assertions<br># ... but our tests are expecting assertions to be either on or off everywhere.<br></p><p>I think this hacky patch should get you unblocked (untested!):<br></p><p>-------------------------------------------------------------------------------------<br>diff --git a/utils/build-presets.ini b/utils/build-presets.ini<br>index 6dc6d24..1ab441f 100644<br>--- a/utils/build-presets.ini<br>+++ b/utils/build-presets.ini<br>@@ -462,12 +462,8 @@ swift-runtime-enable-leak-checker=1<br> # A mixin that enables &#39;lightweight&#39; assertions that don&#39;t slow down the<br> # compiler significantly.<br> [preset: mixin_lightweight_assertions]<br>-assertions<br>-<br>-# FIXME: This should be:<br>-# no-assertions<br>-# swift-assertions<br>-# ... but our tests are expecting assertions to be either on or off everywhere.<br>+no-assertions<br>+swift-assertions<br></p><p> dash-dash<br></p><p>@@ -592,8 +588,6 @@ build-subdir=buildbot_osx<br> ios<br> tvos<br> watchos<br>-test<br>-validation-test<br></p><p> dash-dash<br>-------------------------------------------------------------------------------------<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 11, 2015 at 06:00:00am</p></header><div class="content"><p>Thanks again,<br>I pulled the latest Swift repos which included the fix of the failing test<br>and modified the build preset locally according to Dmitri&#39;s advice and the<br>build completes without problems.<br></p><p>But now I wonder if there is a way to switch between the command line tools<br>of Xcode, Xcode-beta and the Swift I&#39;ve just built from sources?<br></p><p>I mean, when I want to switch between the command line tools of Xcode and<br>Xcode-beta I can simply do:<br>sudo xcode-select -s /Applications/Xcode[-beta].app<br></p><p>Is there something similar that I can do in order to switch to the command<br>line tools from the one I built from sources?<br></p><p>These instructions: https://swift.org/download/<br>just says &quot;add the Swift toolchain to your path&quot; (using export) but I&#39;m<br>hesitant to do that since I don&#39;t know whether that will work when I<br>already have Xcode and Xcode-beta installed (and thus /usr/bin/swiftc etc)?<br></p><p>/Jens<br></p><p><br>On Thu, Dec 10, 2015 at 6:11 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Thu, Dec 10, 2015 at 7:41 AM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; &gt; Thanks!<br>&gt; &gt; I tried the above to compile with the buildbot_osx_package preset. It<br>&gt; kind<br>&gt; &gt; of worked, but it failed while performing the tests.<br>&gt; &gt; (TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39; FAILED)<br>&gt; &gt; So, I got a working swiftc etc but no package or toolchain or anything<br>&gt; (at<br>&gt; &gt; least as far as I could see).<br>&gt; &gt;<br>&gt; &gt; However, trying out the resulting swiftc shows that it is slow, ie the<br>&gt; &gt; buildbot_osx_package preset did not imply --no-assertions<br>&gt; &gt; --no-swift-stdlib-assertions.<br>&gt;<br>&gt; Jens,<br>&gt;<br>&gt; I think you found an issue in our presets.  I filed<br>&gt; https://bugs.swift.org/browse/SR-180  Here, we have an incorrect<br>&gt; workaround that causes this issue:<br>&gt;<br>&gt; [preset: mixin_lightweight_assertions]<br>&gt; assertions<br>&gt;<br>&gt; # FIXME: This should be:<br>&gt; # no-assertions<br>&gt; # swift-assertions<br>&gt; # ... but our tests are expecting assertions to be either on or off<br>&gt; everywhere.<br>&gt;<br>&gt; I think this hacky patch should get you unblocked (untested!):<br>&gt;<br>&gt;<br>&gt; -------------------------------------------------------------------------------------<br>&gt; diff --git a/utils/build-presets.ini b/utils/build-presets.ini<br>&gt; index 6dc6d24..1ab441f 100644<br>&gt; --- a/utils/build-presets.ini<br>&gt; +++ b/utils/build-presets.ini<br>&gt; @@ -462,12 +462,8 @@ swift-runtime-enable-leak-checker=1<br>&gt;  # A mixin that enables &#39;lightweight&#39; assertions that don&#39;t slow down the<br>&gt;  # compiler significantly.<br>&gt;  [preset: mixin_lightweight_assertions]<br>&gt; -assertions<br>&gt; -<br>&gt; -# FIXME: This should be:<br>&gt; -# no-assertions<br>&gt; -# swift-assertions<br>&gt; -# ... but our tests are expecting assertions to be either on or off<br>&gt; everywhere.<br>&gt; +no-assertions<br>&gt; +swift-assertions<br>&gt;<br>&gt;  dash-dash<br>&gt;<br>&gt; @@ -592,8 +588,6 @@ build-subdir=buildbot_osx<br>&gt;  ios<br>&gt;  tvos<br>&gt;  watchos<br>&gt; -test<br>&gt; -validation-test<br>&gt;<br>&gt;  dash-dash<br>&gt;<br>&gt; -------------------------------------------------------------------------------------<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/997570fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>Mish Awadah probably knows about setting up a custom toolchain in Xcode.<br></p><p>Dmitri<br></p><p>On Thu, Dec 10, 2015 at 9:44 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; Thanks again,<br>&gt; I pulled the latest Swift repos which included the fix of the failing test<br>&gt; and modified the build preset locally according to Dmitri&#39;s advice and the<br>&gt; build completes without problems.<br>&gt;<br>&gt; But now I wonder if there is a way to switch between the command line tools<br>&gt; of Xcode, Xcode-beta and the Swift I&#39;ve just built from sources?<br>&gt;<br>&gt; I mean, when I want to switch between the command line tools of Xcode and<br>&gt; Xcode-beta I can simply do:<br>&gt; sudo xcode-select -s /Applications/Xcode[-beta].app<br>&gt;<br>&gt; Is there something similar that I can do in order to switch to the command<br>&gt; line tools from the one I built from sources?<br>&gt;<br>&gt; These instructions: https://swift.org/download/<br>&gt; just says &quot;add the Swift toolchain to your path&quot; (using export) but I&#39;m<br>&gt; hesitant to do that since I don&#39;t know whether that will work when I already<br>&gt; have Xcode and Xcode-beta installed (and thus /usr/bin/swiftc etc)?<br>&gt;<br>&gt; /Jens<br>&gt;<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 6:11 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 10, 2015 at 7:41 AM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt;&gt; &gt; Thanks!<br>&gt;&gt; &gt; I tried the above to compile with the buildbot_osx_package preset. It<br>&gt;&gt; &gt; kind<br>&gt;&gt; &gt; of worked, but it failed while performing the tests.<br>&gt;&gt; &gt; (TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39; FAILED)<br>&gt;&gt; &gt; So, I got a working swiftc etc but no package or toolchain or anything<br>&gt;&gt; &gt; (at<br>&gt;&gt; &gt; least as far as I could see).<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; However, trying out the resulting swiftc shows that it is slow, ie the<br>&gt;&gt; &gt; buildbot_osx_package preset did not imply --no-assertions<br>&gt;&gt; &gt; --no-swift-stdlib-assertions.<br>&gt;&gt;<br>&gt;&gt; Jens,<br>&gt;&gt;<br>&gt;&gt; I think you found an issue in our presets.  I filed<br>&gt;&gt; https://bugs.swift.org/browse/SR-180  Here, we have an incorrect<br>&gt;&gt; workaround that causes this issue:<br>&gt;&gt;<br>&gt;&gt; [preset: mixin_lightweight_assertions]<br>&gt;&gt; assertions<br>&gt;&gt;<br>&gt;&gt; # FIXME: This should be:<br>&gt;&gt; # no-assertions<br>&gt;&gt; # swift-assertions<br>&gt;&gt; # ... but our tests are expecting assertions to be either on or off<br>&gt;&gt; everywhere.<br>&gt;&gt;<br>&gt;&gt; I think this hacky patch should get you unblocked (untested!):<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -------------------------------------------------------------------------------------<br>&gt;&gt; diff --git a/utils/build-presets.ini b/utils/build-presets.ini<br>&gt;&gt; index 6dc6d24..1ab441f 100644<br>&gt;&gt; --- a/utils/build-presets.ini<br>&gt;&gt; +++ b/utils/build-presets.ini<br>&gt;&gt; @@ -462,12 +462,8 @@ swift-runtime-enable-leak-checker=1<br>&gt;&gt;  # A mixin that enables &#39;lightweight&#39; assertions that don&#39;t slow down the<br>&gt;&gt;  # compiler significantly.<br>&gt;&gt;  [preset: mixin_lightweight_assertions]<br>&gt;&gt; -assertions<br>&gt;&gt; -<br>&gt;&gt; -# FIXME: This should be:<br>&gt;&gt; -# no-assertions<br>&gt;&gt; -# swift-assertions<br>&gt;&gt; -# ... but our tests are expecting assertions to be either on or off<br>&gt;&gt; everywhere.<br>&gt;&gt; +no-assertions<br>&gt;&gt; +swift-assertions<br>&gt;&gt;<br>&gt;&gt;  dash-dash<br>&gt;&gt;<br>&gt;&gt; @@ -592,8 +588,6 @@ build-subdir=buildbot_osx<br>&gt;&gt;  ios<br>&gt;&gt;  tvos<br>&gt;&gt;  watchos<br>&gt;&gt; -test<br>&gt;&gt; -validation-test<br>&gt;&gt;<br>&gt;&gt;  dash-dash<br>&gt;&gt;<br>&gt;&gt; -------------------------------------------------------------------------------------<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; http://www.bitcycle.com/<br>&gt; Phone: +46-73-753 24 62<br>&gt; E-mail: jens at bitcycle.com<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 11, 2015 at 07:00:00am</p></header><div class="content"><p>Just to clarify (not sure if it&#39;s needed): Note that I can run Xcode with<br>my custom toolchain, eg:<br>xcrun launch-with-toolchain ./swift-SNAPSHOT-2015-12-11-a.xctoolchain<br></p><p>What I want to know is the part about switching between the command line<br>tools, not only between my Xcode and Xcode-beta (which I can do using<br>xcode-select) but also between those and my custom built Swift.<br></p><p>/Jens<br></p><p><br>On Fri, Dec 11, 2015 at 6:47 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; Mish Awadah probably knows about setting up a custom toolchain in Xcode.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 9:44 PM, Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; &gt; Thanks again,<br>&gt; &gt; I pulled the latest Swift repos which included the fix of the failing<br>&gt; test<br>&gt; &gt; and modified the build preset locally according to Dmitri&#39;s advice and<br>&gt; the<br>&gt; &gt; build completes without problems.<br>&gt; &gt;<br>&gt; &gt; But now I wonder if there is a way to switch between the command line<br>&gt; tools<br>&gt; &gt; of Xcode, Xcode-beta and the Swift I&#39;ve just built from sources?<br>&gt; &gt;<br>&gt; &gt; I mean, when I want to switch between the command line tools of Xcode and<br>&gt; &gt; Xcode-beta I can simply do:<br>&gt; &gt; sudo xcode-select -s /Applications/Xcode[-beta].app<br>&gt; &gt;<br>&gt; &gt; Is there something similar that I can do in order to switch to the<br>&gt; command<br>&gt; &gt; line tools from the one I built from sources?<br>&gt; &gt;<br>&gt; &gt; These instructions: https://swift.org/download/<br>&gt; &gt; just says &quot;add the Swift toolchain to your path&quot; (using export) but I&#39;m<br>&gt; &gt; hesitant to do that since I don&#39;t know whether that will work when I<br>&gt; already<br>&gt; &gt; have Xcode and Xcode-beta installed (and thus /usr/bin/swiftc etc)?<br>&gt; &gt;<br>&gt; &gt; /Jens<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Dec 10, 2015 at 6:11 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Thu, Dec 10, 2015 at 7:41 AM, Jens Persson &lt;jens at bitcycle.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt; &gt; Thanks!<br>&gt; &gt;&gt; &gt; I tried the above to compile with the buildbot_osx_package preset. It<br>&gt; &gt;&gt; &gt; kind<br>&gt; &gt;&gt; &gt; of worked, but it failed while performing the tests.<br>&gt; &gt;&gt; &gt; (TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39;<br>&gt; FAILED)<br>&gt; &gt;&gt; &gt; So, I got a working swiftc etc but no package or toolchain or anything<br>&gt; &gt;&gt; &gt; (at<br>&gt; &gt;&gt; &gt; least as far as I could see).<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; However, trying out the resulting swiftc shows that it is slow, ie the<br>&gt; &gt;&gt; &gt; buildbot_osx_package preset did not imply --no-assertions<br>&gt; &gt;&gt; &gt; --no-swift-stdlib-assertions.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Jens,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think you found an issue in our presets.  I filed<br>&gt; &gt;&gt; https://bugs.swift.org/browse/SR-180  Here, we have an incorrect<br>&gt; &gt;&gt; workaround that causes this issue:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; [preset: mixin_lightweight_assertions]<br>&gt; &gt;&gt; assertions<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; # FIXME: This should be:<br>&gt; &gt;&gt; # no-assertions<br>&gt; &gt;&gt; # swift-assertions<br>&gt; &gt;&gt; # ... but our tests are expecting assertions to be either on or off<br>&gt; &gt;&gt; everywhere.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think this hacky patch should get you unblocked (untested!):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; -------------------------------------------------------------------------------------<br>&gt; &gt;&gt; diff --git a/utils/build-presets.ini b/utils/build-presets.ini<br>&gt; &gt;&gt; index 6dc6d24..1ab441f 100644<br>&gt; &gt;&gt; --- a/utils/build-presets.ini<br>&gt; &gt;&gt; +++ b/utils/build-presets.ini<br>&gt; &gt;&gt; @@ -462,12 +462,8 @@ swift-runtime-enable-leak-checker=1<br>&gt; &gt;&gt;  # A mixin that enables &#39;lightweight&#39; assertions that don&#39;t slow down<br>&gt; the<br>&gt; &gt;&gt;  # compiler significantly.<br>&gt; &gt;&gt;  [preset: mixin_lightweight_assertions]<br>&gt; &gt;&gt; -assertions<br>&gt; &gt;&gt; -<br>&gt; &gt;&gt; -# FIXME: This should be:<br>&gt; &gt;&gt; -# no-assertions<br>&gt; &gt;&gt; -# swift-assertions<br>&gt; &gt;&gt; -# ... but our tests are expecting assertions to be either on or off<br>&gt; &gt;&gt; everywhere.<br>&gt; &gt;&gt; +no-assertions<br>&gt; &gt;&gt; +swift-assertions<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;  dash-dash<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; @@ -592,8 +588,6 @@ build-subdir=buildbot_osx<br>&gt; &gt;&gt;  ios<br>&gt; &gt;&gt;  tvos<br>&gt; &gt;&gt;  watchos<br>&gt; &gt;&gt; -test<br>&gt; &gt;&gt; -validation-test<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;  dash-dash<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; -------------------------------------------------------------------------------------<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; &gt; http://www.bitcycle.com/<br>&gt; &gt; Phone: +46-73-753 24 62<br>&gt; &gt; E-mail: jens at bitcycle.com<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/167757b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 11, 2015 at 08:00:00am</p></header><div class="content"><p>Ah! No, launch-with-toolchain&#39;s all that&#39;s supported. But it&#39;s an interesting direction to go. It&#39;d be an Xcode feature more than a Swift feature, though, so bugs.swift.org isn&#39;t an appropriate place for the request.<br></p><p>Glad everything&#39;s working manually now.<br></p><p>Jordan<br></p><p>&gt; On Dec 10, 2015, at 22:09 , Jens Persson &lt;jens at bitcycle.com&gt; wrote:<br>&gt; <br>&gt; Just to clarify (not sure if it&#39;s needed): Note that I can run Xcode with my custom toolchain, eg:<br>&gt; xcrun launch-with-toolchain ./swift-SNAPSHOT-2015-12-11-a.xctoolchain<br>&gt; <br>&gt; What I want to know is the part about switching between the command line tools, not only between my Xcode and Xcode-beta (which I can do using xcode-select) but also between those and my custom built Swift.<br>&gt; <br>&gt; /Jens<br>&gt; <br>&gt; <br>&gt; On Fri, Dec 11, 2015 at 6:47 AM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt; Mish Awadah probably knows about setting up a custom toolchain in Xcode.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 9:44 PM, Jens Persson &lt;jens at bitcycle.com &lt;mailto:jens at bitcycle.com&gt;&gt; wrote:<br>&gt; &gt; Thanks again,<br>&gt; &gt; I pulled the latest Swift repos which included the fix of the failing test<br>&gt; &gt; and modified the build preset locally according to Dmitri&#39;s advice and the<br>&gt; &gt; build completes without problems.<br>&gt; &gt;<br>&gt; &gt; But now I wonder if there is a way to switch between the command line tools<br>&gt; &gt; of Xcode, Xcode-beta and the Swift I&#39;ve just built from sources?<br>&gt; &gt;<br>&gt; &gt; I mean, when I want to switch between the command line tools of Xcode and<br>&gt; &gt; Xcode-beta I can simply do:<br>&gt; &gt; sudo xcode-select -s /Applications/Xcode[-beta].app<br>&gt; &gt;<br>&gt; &gt; Is there something similar that I can do in order to switch to the command<br>&gt; &gt; line tools from the one I built from sources?<br>&gt; &gt;<br>&gt; &gt; These instructions: https://swift.org/download/ &lt;https://swift.org/download/&gt;<br>&gt; &gt; just says &quot;add the Swift toolchain to your path&quot; (using export) but I&#39;m<br>&gt; &gt; hesitant to do that since I don&#39;t know whether that will work when I already<br>&gt; &gt; have Xcode and Xcode-beta installed (and thus /usr/bin/swiftc etc)?<br>&gt; &gt;<br>&gt; &gt; /Jens<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Dec 10, 2015 at 6:11 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Thu, Dec 10, 2015 at 7:41 AM, Jens Persson &lt;jens at bitcycle.com &lt;mailto:jens at bitcycle.com&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt; Thanks!<br>&gt; &gt;&gt; &gt; I tried the above to compile with the buildbot_osx_package preset. It<br>&gt; &gt;&gt; &gt; kind<br>&gt; &gt;&gt; &gt; of worked, but it failed while performing the tests.<br>&gt; &gt;&gt; &gt; (TEST &#39;Swift :: Driver/Dependencies/bindings-build-record.swift&#39; FAILED)<br>&gt; &gt;&gt; &gt; So, I got a working swiftc etc but no package or toolchain or anything<br>&gt; &gt;&gt; &gt; (at<br>&gt; &gt;&gt; &gt; least as far as I could see).<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; However, trying out the resulting swiftc shows that it is slow, ie the<br>&gt; &gt;&gt; &gt; buildbot_osx_package preset did not imply --no-assertions<br>&gt; &gt;&gt; &gt; --no-swift-stdlib-assertions.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Jens,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think you found an issue in our presets.  I filed<br>&gt; &gt;&gt; https://bugs.swift.org/browse/SR-180 &lt;https://bugs.swift.org/browse/SR-180&gt;  Here, we have an incorrect<br>&gt; &gt;&gt; workaround that causes this issue:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; [preset: mixin_lightweight_assertions]<br>&gt; &gt;&gt; assertions<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; # FIXME: This should be:<br>&gt; &gt;&gt; # no-assertions<br>&gt; &gt;&gt; # swift-assertions<br>&gt; &gt;&gt; # ... but our tests are expecting assertions to be either on or off<br>&gt; &gt;&gt; everywhere.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think this hacky patch should get you unblocked (untested!):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -------------------------------------------------------------------------------------<br>&gt; &gt;&gt; diff --git a/utils/build-presets.ini b/utils/build-presets.ini<br>&gt; &gt;&gt; index 6dc6d24..1ab441f 100644<br>&gt; &gt;&gt; --- a/utils/build-presets.ini<br>&gt; &gt;&gt; +++ b/utils/build-presets.ini<br>&gt; &gt;&gt; @@ -462,12 +462,8 @@ swift-runtime-enable-leak-checker=1<br>&gt; &gt;&gt;  # A mixin that enables &#39;lightweight&#39; assertions that don&#39;t slow down the<br>&gt; &gt;&gt;  # compiler significantly.<br>&gt; &gt;&gt;  [preset: mixin_lightweight_assertions]<br>&gt; &gt;&gt; -assertions<br>&gt; &gt;&gt; -<br>&gt; &gt;&gt; -# FIXME: This should be:<br>&gt; &gt;&gt; -# no-assertions<br>&gt; &gt;&gt; -# swift-assertions<br>&gt; &gt;&gt; -# ... but our tests are expecting assertions to be either on or off<br>&gt; &gt;&gt; everywhere.<br>&gt; &gt;&gt; +no-assertions<br>&gt; &gt;&gt; +swift-assertions<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;  dash-dash<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; @@ -592,8 +588,6 @@ build-subdir=buildbot_osx<br>&gt; &gt;&gt;  ios<br>&gt; &gt;&gt;  tvos<br>&gt; &gt;&gt;  watchos<br>&gt; &gt;&gt; -test<br>&gt; &gt;&gt; -validation-test<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;  dash-dash<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -------------------------------------------------------------------------------------<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Dmitri<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; &gt; http://www.bitcycle.com/ &lt;http://www.bitcycle.com/&gt;<br>&gt; &gt; Phone: +46-73-753 24 62<br>&gt; &gt; E-mail: jens at bitcycle.com &lt;mailto:jens at bitcycle.com&gt;<br>&gt; &gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; http://www.bitcycle.com/ &lt;http://www.bitcycle.com/&gt;<br>&gt; Phone: +46-73-753 24 62<br>&gt; E-mail: jens at bitcycle.com &lt;mailto:jens at bitcycle.com&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151211/54782c94/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09d425d65431edfdb8ce3bbb2f2e2bf0?s=50"></div><header><strong>Beginner&#39;s questions about building Swift from source etc.</strong> from <string>Adrian Prantl</string> &lt;aprantl at apple.com&gt;<p>December 10, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 2:22 PM, Jens Persson via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; First of all, sorry for not being able to formulate these presumably basic questions in a  better/shorter way.<br>&gt;  <br>&gt; Background: We&#39;re working on an app that will benefit greatly from Swift&#39;s ability to generate optimized code from relatively high level abstractions.<br>&gt; <br>&gt; I&#39;ve successfully compiled Swift from sources and observed some significant improvements in the optimizer (for details see the following forum thread, especially edit1 and edit2 of this post:<br>&gt; https://forums.developer.apple.com/thread/27204#93327 &lt;https://forums.developer.apple.com/thread/27204#93327&gt;<br>&gt; ).<br>&gt; <br>&gt; Now I&#39;d like to be able to use Swift built from sources from within Xcode (or at least have some way of using it with code completion and probably swiftpm), but I haven&#39;t been able to find information on how to do that.<br>&gt; <br>&gt; Here&#39;s my journey so far:<br>&gt; <br>&gt; 1. Read the main swift repos readme.<br>&gt; <br>&gt; 2. Cloned the 9 repositories listed there (for read-only access).<br>&gt; <br>&gt; 3. Built using:<br>&gt;     swift/utils/build-script -R --no-assertions --no-swift-stdlib-assertions<br>&gt;     (Found out about the no-assert-flags through Twitter. Without them, the resulting compiler compiled binaries that were very slow.)<br>&gt; <br>&gt; 3. Compiled my &quot;performance critical&quot; test code like this:<br>&gt;     xcrun /blabla/build/Ninja-Release/swift-macosx-x86_64/bin/swift -Ounchecked -gnone -whole-module-optimization main.swift<br></p><p>Note that none of the options starting with “-g&quot; have any effect on the generated code and thus won’t affect the performance of the resulting executable.<br></p><p>-- adrian<br></p><p>&gt;     (My first try was without xcrun, but then it would complain about &quot;no such module&quot;. So I asked Twitter and got the info about using xcrun.) <br>&gt; <br>&gt; 4. Noted significant improvements in what the optimizer was able to do with my test code (compared to when compiling it with Xcode 7.2. The compiled-from-sources-compiler produced 340 times faster code. See details in the above forum thread.)<br>&gt; <br>&gt; 5. Feeling happy. Can&#39;t wait until this gets into an Xcode GM.<br>&gt; <br>&gt; 6. Wish I knew more about how to build Swift from sources, so I could make my workflow more convenient, ie switching between compiling with Swift-built-from-sources, Xcode and Xcode-beta. Eg:<br>&gt; <br>&gt; - Is there a way to use the built-from-sources-version of Swift from within Xcode (can I build a toolchain or something)?<br>&gt; <br>&gt; - How do I build and use the package manager (swiftpm)? It doesn&#39;t seem to get built when I build everything(?) using the build-script as described above.<br>&gt; <br>&gt; - Can I use any of the build-presets for this, and if so will it use the --no-assertions and --no-swift-stdlib-assertions options?<br>&gt; <br>&gt; My goal is to be able to have a convenient way of being able to write and compile my (performance critical) code using, switching between and comparing, the three different Swift versions in current<br>&gt; Xcode (GM),<br>&gt; Xcode-beta and<br>&gt; built-from-source.<br>&gt; <br>&gt; Are the answers to these (and similar) questions plain to see in some documentation somewhere or do I have to dig around in various scripts etc and try to figure things out? <br>&gt; <br>&gt; Thanks,<br>&gt; /Jens<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151210/2d22ec8d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
