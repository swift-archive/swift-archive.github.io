<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 01:00:00am</p></header><div class="content"><p>Hi everyone :)<br></p><p>I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br></p><p>Conceptually, I had something like this:<br></p><p>protocol ProtA {<br>   typealias Container : SequenceType<br>}<br>protocol ProtB {<br>   typealias AnOtherAssocType : ProtA<br>   func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>}<br></p><p>The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br></p><p>protocol ProtB {<br>   typealias A : ProtA<br>   typealias Element = A.Container.Generator.Element<br>   func foo(x: Element, y: Element) -&gt; Element<br>}<br></p><p>But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br></p><p>So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br></p><p>Ideally, I would write<br></p><p>protocol ProtB {<br>   associated_type AnOtherAssocType : ProtA<br>   typealias Element = AnOtherAssocType.Container.Generator.Element<br>   func foo(x: Element, y: Element) -&gt; Element<br>}<br></p><p>and it would be exactly the same as<br></p><p>protocol ProtB {<br>   associated_type AnOtherAssocType : ProtA<br>   func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>}<br></p><p>There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br></p><p>Thanks,<br></p><p>Loïc<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December  5, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hi everyone :)<br>&gt; <br>&gt; I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt; I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>&gt; One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>&gt; Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br>&gt; <br>&gt; Conceptually, I had something like this:<br>&gt; <br>&gt; protocol ProtA {<br>&gt;   typealias Container : SequenceType<br>&gt; }<br>&gt; protocol ProtB {<br>&gt;   typealias AnOtherAssocType : ProtA<br>&gt;   func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>&gt; }<br>&gt; <br>&gt; The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br>&gt; <br>&gt; protocol ProtB {<br>&gt;   typealias A : ProtA<br>&gt;   typealias Element = A.Container.Generator.Element<br>&gt;   func foo(x: Element, y: Element) -&gt; Element<br>&gt; }<br>&gt; <br>&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>&gt; Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt; <br>&gt; So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br></p><p>I think this is a great idea; re-using typealias for associated types was a mistake.<br></p><p>John.<br></p><p>&gt; <br>&gt; Ideally, I would write<br>&gt; <br>&gt; protocol ProtB {<br>&gt;   associated_type AnOtherAssocType : ProtA<br>&gt;   typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt;   func foo(x: Element, y: Element) -&gt; Element<br>&gt; }<br>&gt; <br>&gt; and it would be exactly the same as<br>&gt; <br>&gt; protocol ProtB {<br>&gt;   associated_type AnOtherAssocType : ProtA<br>&gt;   func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt; }<br>&gt; <br>&gt; There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Loïc<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>Is it possible to do away with associated types and just use plain generic type declarations instead? This is one thing that kind of confuses me about the generics system. Coming from Java and c#, interfaces there are generic in the same way that classes (and structs in c#) are, and there are a lot of nice things we could get along with that if protocols were generic as part of their type declaration. Is there a compelling (technical or otherwise) reason to keep associated types as they are (to the exclusion of generic parameters) today that I&#39;m missing?<br></p><p>If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>--<br>Kevin Lundberg<br></p><p>On Dec 5, 2015, at 7:48 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hi everyone :)<br>&gt;&gt; <br>&gt;&gt; I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt;&gt; I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>&gt;&gt; One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>&gt;&gt; Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br>&gt;&gt; <br>&gt;&gt; Conceptually, I had something like this:<br>&gt;&gt; <br>&gt;&gt; protocol ProtA {<br>&gt;&gt;  typealias Container : SequenceType<br>&gt;&gt; }<br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  typealias AnOtherAssocType : ProtA<br>&gt;&gt;  func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  typealias A : ProtA<br>&gt;&gt;  typealias Element = A.Container.Generator.Element<br>&gt;&gt;  func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>&gt;&gt; Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt;&gt; <br>&gt;&gt; So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br>&gt; <br>&gt; I think this is a great idea; re-using typealias for associated types was a mistake.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Ideally, I would write<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  associated_type AnOtherAssocType : ProtA<br>&gt;&gt;  typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt;&gt;  func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; and it would be exactly the same as<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  associated_type AnOtherAssocType : ProtA<br>&gt;&gt;  func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Loïc<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br></p><p>Or merely &quot;associated&quot;.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December  5, 2015 at 05:00:00pm</p></header><div class="content"><p>I like &quot;associated&quot;. Or maybe &quot;withtype&quot;. Anything clear and without underscore.<br></p><p>protocol Foo {<br>   associated T<br>}<br></p><p>protocol Foo {<br>  withtype T<br>}<br></p><p>&gt; On Dec 5, 2015, at 5:43 PM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt; <br>&gt; Or merely &quot;associated&quot;.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  5, 2015 at 08:00:00pm</p></header><div class="content"><p>I like the proposal in general, but the snake case feels decidedly un-Swifty (although I like snake case personally it isn&#39;t the Swift convention and I do like strong conventions).<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 5, 2015, at 7:46 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I like &quot;associated&quot;. Or maybe &quot;withtype&quot;. Anything clear and without underscore.<br>&gt; <br>&gt; protocol Foo {<br>&gt;   associated T<br>&gt; }<br>&gt; <br>&gt; protocol Foo {<br>&gt;  withtype T<br>&gt; }<br>&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 5:43 PM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt;&gt; <br>&gt;&gt; Or merely &quot;associated&quot;.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 03:00:00am</p></header><div class="content"><p>Right. I proposed associated_type simply because that&#39;s what SIL calls them, but it is a bad name for Swift. I like associated and withtype though. <br></p><p>Loïc<br></p><p>&gt; On Dec 6, 2015, at 3:08 AM, Anandabits &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; I like the proposal in general, but the snake case feels decidedly un-Swifty (although I like snake case personally it isn&#39;t the Swift convention and I do like strong conventions).<br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 7:46 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I like &quot;associated&quot;. Or maybe &quot;withtype&quot;. Anything clear and without underscore.<br>&gt;&gt; <br>&gt;&gt; protocol Foo {<br>&gt;&gt;  associated T<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; protocol Foo {<br>&gt;&gt; withtype T<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 5:43 PM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or merely &quot;associated&quot;.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d933552ea7fda10a4488a74223c00988?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Thorsten Seitz</string> &lt;thorsten.seitz at web.de&gt;<p>December  6, 2015 at 02:00:00pm</p></header><div class="content"><p>Why not just „type“?<br></p><p>protocol Foo {<br>    type T<br>}<br></p><p>-Thorsten<br></p><p><br></p><p>&gt; Am 06.12.2015 um 02:46 schrieb Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I like &quot;associated&quot;. Or maybe &quot;withtype&quot;. Anything clear and without underscore.<br>&gt; <br>&gt; protocol Foo {<br>&gt;   associated T<br>&gt; }<br>&gt; <br>&gt; protocol Foo {<br>&gt;  withtype T<br>&gt; }<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 5:43 PM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt;&gt; <br>&gt;&gt; Or merely &quot;associated&quot;.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>“type” feels more ambiguous to me with the existence of Foo.Type.<br></p><p>Stephen<br></p><p>&gt; On Dec 6, 2015, at 8:51 AM, Thorsten Seitz &lt;thorsten.seitz at web.de&gt; wrote:<br>&gt; <br>&gt; Why not just „type“?<br>&gt; <br>&gt; protocol Foo {<br>&gt;    type T<br>&gt; }<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Am 06.12.2015 um 02:46 schrieb Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; I like &quot;associated&quot;. Or maybe &quot;withtype&quot;. Anything clear and without underscore.<br>&gt;&gt; <br>&gt;&gt; protocol Foo {<br>&gt;&gt;  associated T<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; protocol Foo {<br>&gt;&gt; withtype T<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 5:43 PM, Stephen Celis via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or merely &quot;associated&quot;.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  5, 2015 at 06:00:00pm</p></header><div class="content"><p>On Sat, Dec 5, 2015 at 5:43 PM, Stephen Celis via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt;<br>&gt; Or merely &quot;associated&quot;.<br></p><p>+1 to the proposal, emphasizing the distinction is important; and I<br>like &quot;associated&quot; as the keyword for this purpose, too.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 03:00:00am</p></header><div class="content"><p>Great :)<br></p><p>Also, this hasn&#39;t been explicitly discussed yet. But do you all agree about adding &quot;real&quot; typealias declarations (with the typealias keyword) inside protocols? <br></p><p>Loïc<br></p><p>&gt; On Dec 6, 2015, at 3:20 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sat, Dec 5, 2015 at 5:43 PM, Stephen Celis via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On Dec 5, 2015, at 8:11 PM, Kevin Lundberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we must keep this concept, I would prefer something without an underscore for the keyword, like &quot;associatedtype&quot; or perhaps &quot;typeassociation&quot;<br>&gt;&gt; <br>&gt;&gt; Or merely &quot;associated&quot;.<br>&gt; <br>&gt; +1 to the proposal, emphasizing the distinction is important; and I<br>&gt; like &quot;associated&quot; as the keyword for this purpose, too.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  5, 2015 at 06:00:00pm</p></header><div class="content"><p>On Sat, Dec 5, 2015 at 6:27 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt; Great :)<br>&gt;<br>&gt; Also, this hasn&#39;t been explicitly discussed yet. But do you all agree about adding &quot;real&quot; typealias declarations (with the typealias keyword) inside protocols?<br></p><p>Concrete typealieases are not requirements, so they shouldn&#39;t be<br>defined inside of a protocol.  Instead, they should be defined in the<br>protocol extension.  In fact, this has been a plan of record for some<br>time, but it wasn&#39;t implemented.<br></p><p>extension SequenceType {<br>  typealias Element = Generator.Element<br>}<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 03:00:00am</p></header><div class="content"><p>This makes sense. Thanks for the quick reply. <br></p><p>Loïc<br></p><p>&gt; On Dec 6, 2015, at 3:29 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Sat, Dec 5, 2015 at 6:27 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt;&gt; Great :)<br>&gt;&gt; <br>&gt;&gt; Also, this hasn&#39;t been explicitly discussed yet. But do you all agree about adding &quot;real&quot; typealias declarations (with the typealias keyword) inside protocols?<br>&gt; <br>&gt; Concrete typealieases are not requirements, so they shouldn&#39;t be<br>&gt; defined inside of a protocol.  Instead, they should be defined in the<br>&gt; protocol extension.  In fact, this has been a plan of record for some<br>&gt; time, but it wasn&#39;t implemented.<br>&gt; <br>&gt; extension SequenceType {<br>&gt;  typealias Element = Generator.Element<br>&gt; }<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>However, if a protocol wished to use type aliases not as part of a contract but for clarity, this would still need to be defined within the protocol in order for the associated types to be used in the typealias declarations.<br></p><p>-DW<br></p><p>&gt; On Dec 5, 2015, at 7:29 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sat, Dec 5, 2015 at 6:27 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt;&gt; Great :)<br>&gt;&gt; <br>&gt;&gt; Also, this hasn&#39;t been explicitly discussed yet. But do you all agree about adding &quot;real&quot; typealias declarations (with the typealias keyword) inside protocols?<br>&gt; <br>&gt; Concrete typealieases are not requirements, so they shouldn&#39;t be<br>&gt; defined inside of a protocol.  Instead, they should be defined in the<br>&gt; protocol extension.  In fact, this has been a plan of record for some<br>&gt; time, but it wasn&#39;t implemented.<br>&gt; <br>&gt; extension SequenceType {<br>&gt;  typealias Element = Generator.Element<br>&gt; }<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/c16cedd6/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>December  6, 2015 at 03:00:00am</p></header><div class="content"><p>+1 for using a distinct keyword for associated types<br></p><p>On Sat, Dec 5, 2015 at 9:49 PM David Waite via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; However, if a protocol wished to use type aliases not as part of a<br>&gt; contract but for clarity, this would still need to be defined within the<br>&gt; protocol in order for the associated types to be used in the typealias<br>&gt; declarations.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; &gt; On Dec 5, 2015, at 7:29 PM, Dmitri Gribenko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Sat, Dec 5, 2015 at 6:27 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt; Great :)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Also, this hasn&#39;t been explicitly discussed yet. But do you all agree<br>&gt; about adding &quot;real&quot; typealias declarations (with the typealias keyword)<br>&gt; inside protocols?<br>&gt; &gt;<br>&gt; &gt; Concrete typealieases are not requirements, so they shouldn&#39;t be<br>&gt; &gt; defined inside of a protocol.  Instead, they should be defined in the<br>&gt; &gt; protocol extension.  In fact, this has been a plan of record for some<br>&gt; &gt; time, but it wasn&#39;t implemented.<br>&gt; &gt;<br>&gt; &gt; extension SequenceType {<br>&gt; &gt;  typealias Element = Generator.Element<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Dmitri<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/34fa5eff/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 05:00:00pm</p></header><div class="content"><p>On Dec 5, 2015, at 4:48 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hi everyone :)<br>&gt;&gt; <br>&gt;&gt; I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt;&gt; I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>&gt;&gt; One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>&gt;&gt; Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br>&gt;&gt; <br>&gt;&gt; Conceptually, I had something like this:<br>&gt;&gt; <br>&gt;&gt; protocol ProtA {<br>&gt;&gt;  typealias Container : SequenceType<br>&gt;&gt; }<br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  typealias AnOtherAssocType : ProtA<br>&gt;&gt;  func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  typealias A : ProtA<br>&gt;&gt;  typealias Element = A.Container.Generator.Element<br>&gt;&gt;  func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>&gt;&gt; Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt;&gt; <br>&gt;&gt; So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br>&gt; <br>&gt; I think this is a great idea; re-using typealias for associated types was a mistake.<br></p><p>Agreed.<br></p><p>-Chris<br></p><p><br></p><p><br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Ideally, I would write<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  associated_type AnOtherAssocType : ProtA<br>&gt;&gt;  typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt;&gt;  func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; and it would be exactly the same as<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  associated_type AnOtherAssocType : ProtA<br>&gt;&gt;  func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Loïc<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>I have drafted a formal proposal here: https://gist.github.com/loiclec/22459d230a21dbcb81fc<br>Would love to receive feedback from the community on it, I am particularly worried about the correctness of the terms I used.<br>Should I make a pull request to swift-evolution now, or should we continue the conversation here?<br></p><p>Thanks, <br></p><p>Loïc<br></p><p>(and sorry about emailing you on Sunday 😇 ) <br></p><p>&gt; On Dec 6, 2015, at 1:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hi everyone :)<br>&gt;&gt; <br>&gt;&gt; I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt;&gt; I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>&gt;&gt; One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>&gt;&gt; Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br>&gt;&gt; <br>&gt;&gt; Conceptually, I had something like this:<br>&gt;&gt; <br>&gt;&gt; protocol ProtA {<br>&gt;&gt;  typealias Container : SequenceType<br>&gt;&gt; }<br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  typealias AnOtherAssocType : ProtA<br>&gt;&gt;  func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  typealias A : ProtA<br>&gt;&gt;  typealias Element = A.Container.Generator.Element<br>&gt;&gt;  func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>&gt;&gt; Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt;&gt; <br>&gt;&gt; So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br>&gt; <br>&gt; I think this is a great idea; re-using typealias for associated types was a mistake.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Ideally, I would write<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  associated_type AnOtherAssocType : ProtA<br>&gt;&gt;  typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt;&gt;  func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; and it would be exactly the same as<br>&gt;&gt; <br>&gt;&gt; protocol ProtB {<br>&gt;&gt;  associated_type AnOtherAssocType : ProtA<br>&gt;&gt;  func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; Loïc<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>Well, I went ahead and created a pull request :)<br></p><p>I also included a “proposed approach” section, where I propose to deprecate <br>the `typealias` keyword for Swift 2.2, and replace it entirely for Swift 3.0.<br></p><p>Does anyone have any thought on that? This is a bit aggressive, but I think it’s worth it.<br>It is actually the same approach Erica proposed for removing C for-loops.<br></p><p>Loïc<br></p><p>&gt; On Dec 6, 2015, at 1:12 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt; wrote:<br>&gt; <br>&gt; I have drafted a formal proposal here: https://gist.github.com/loiclec/22459d230a21dbcb81fc<br>&gt; Would love to receive feedback from the community on it, I am particularly worried about the correctness of the terms I used.<br>&gt; Should I make a pull request to swift-evolution now, or should we continue the conversation here?<br>&gt; <br>&gt; Thanks, <br>&gt; <br>&gt; Loïc<br>&gt; <br>&gt; (and sorry about emailing you on Sunday 😇 ) <br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 1:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Hi everyone :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt;&gt;&gt; I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>&gt;&gt;&gt; One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>&gt;&gt;&gt; Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Conceptually, I had something like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol ProtA {<br>&gt;&gt;&gt; typealias Container : SequenceType<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; protocol ProtB {<br>&gt;&gt;&gt; typealias AnOtherAssocType : ProtA<br>&gt;&gt;&gt; func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol ProtB {<br>&gt;&gt;&gt; typealias A : ProtA<br>&gt;&gt;&gt; typealias Element = A.Container.Generator.Element<br>&gt;&gt;&gt; func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>&gt;&gt;&gt; Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br>&gt;&gt; <br>&gt;&gt; I think this is a great idea; re-using typealias for associated types was a mistake.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ideally, I would write<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol ProtB {<br>&gt;&gt;&gt; associated_type AnOtherAssocType : ProtA<br>&gt;&gt;&gt; typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt;&gt;&gt; func foo(x: Element, y: Element) -&gt; Element<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and it would be exactly the same as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol ProtB {<br>&gt;&gt;&gt; associated_type AnOtherAssocType : ProtA<br>&gt;&gt;&gt; func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Loïc<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  6, 2015 at 01:00:00pm</p></header><div class="content"><p>Commented on the proposal but realize that it might be better to reply<br>here.<br></p><p>For clarification: when you say &quot;deprecate typealias&quot; do you mean only in<br>the context of associated types or in the language as a whole?<br></p><p>I also thought it might make sense to add to the proposal a disabling of<br>the &quot;default&quot; behavior that is currently allowed for type aliases in<br>protocols:<br></p><p>protocol Prot {<br>    associated Container: SequenceType<br>    associated Element = Container.Generator.Element // should be illegal<br>}<br></p><p>Instead, if you actually want the semantics of an additional associated<br>type with a default (but overridable) value, you should use a protocol<br>extension. (Which means that associated ____ = ____ would be allowed in<br>protocol extensions, but not associated ____ : _____  or associated ____ :<br>____ = _____.) Does that sound right?<br></p><p><br>On Sun, Dec 6, 2015 at 10:32 AM, Loïc Lecrenier &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; Well, I went ahead and created a pull request :)<br>&gt;<br>&gt; I also included a “proposed approach” section, where I propose to deprecate<br>&gt; the `typealias` keyword for Swift 2.2, and replace it entirely for Swift<br>&gt; 3.0.<br>&gt;<br>&gt; Does anyone have any thought on that? This is a bit aggressive, but I<br>&gt; think it’s worth it.<br>&gt; It is actually the same approach Erica proposed for removing C for-loops.<br>&gt;<br>&gt; Loïc<br>&gt;<br>&gt; &gt; On Dec 6, 2015, at 1:12 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I have drafted a formal proposal here:<br>&gt; https://gist.github.com/loiclec/22459d230a21dbcb81fc<br>&gt; &gt; Would love to receive feedback from the community on it, I am<br>&gt; particularly worried about the correctness of the terms I used.<br>&gt; &gt; Should I make a pull request to swift-evolution now, or should we<br>&gt; continue the conversation here?<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt;<br>&gt; &gt; Loïc<br>&gt; &gt;<br>&gt; &gt; (and sorry about emailing you on Sunday 😇 )<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 6, 2015, at 1:48 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; Hi everyone :)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I propose introducing a new &quot;associated_type&quot; keyword that will<br>&gt; replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt; &gt;&gt;&gt; I remember being confused by associated types when I started using<br>&gt; Swift, and I think one reason why was the use of the typealias keyword to<br>&gt; define them.<br>&gt; &gt;&gt;&gt; One reason was that I thought I knew what typealias did, and so I<br>&gt; didn&#39;t stop to learn what it did inside a protocol. An other reason was the<br>&gt; difficulty of finding help when searching for &quot;typealias&quot; instead of<br>&gt; &quot;associated types&quot;.<br>&gt; &gt;&gt;&gt; Then, when I thought I understood it, I started building an<br>&gt; excessively protocol-oriented program as an exercise. And I still lost a<br>&gt; lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of<br>&gt; protocols.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Conceptually, I had something like this:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtA {<br>&gt; &gt;&gt;&gt; typealias Container : SequenceType<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; typealias AnOtherAssocType : ProtA<br>&gt; &gt;&gt;&gt; func foo(x: AnOtherAssocType.Container.Generator.Element, y:<br>&gt; AnOtherAssocType.Container.Generator.Element) -&gt;<br>&gt; AnOtherAssocType.Container.Generator.Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The function foo is very difficult to read, so I wanted to use a<br>&gt; shortcut to Element by doing this:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; typealias A : ProtA<br>&gt; &gt;&gt;&gt; typealias Element = A.Container.Generator.Element<br>&gt; &gt;&gt;&gt; func foo(x: Element, y: Element) -&gt; Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an<br>&gt; associated type with a default value of Element. (right?)<br>&gt; &gt;&gt;&gt; Then I tried to write extensions to ProtB where Element conforms to,<br>&gt; say, Equatable, and couldn&#39;t make it work because<br>&gt; A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; So, that was a rather long explanation of the reasons I think we<br>&gt; should replace the typealias keyword by associated_type, and allow &quot;real&quot;<br>&gt; typealias-es inside protocols.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think this is a great idea; re-using typealias for associated types<br>&gt; was a mistake.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; John.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Ideally, I would write<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; associated_type AnOtherAssocType : ProtA<br>&gt; &gt;&gt;&gt; typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt; &gt;&gt;&gt; func foo(x: Element, y: Element) -&gt; Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; and it would be exactly the same as<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; associated_type AnOtherAssocType : ProtA<br>&gt; &gt;&gt;&gt; func foo(x: A.Container.Generator.Element, y:<br>&gt; A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; There are probably some problems created by this proposal, but right<br>&gt; now I can&#39;t see any :/<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Loïc<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/33c3a364/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Introduce &quot;associated_type&quot; keyword</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>December  6, 2015 at 08:00:00pm</p></header><div class="content"><p>Yes, I mean “deprecate typealias” only in the context of associated types. Will clarify, thanks :)<br></p><p>As for forbidding the default behavior, I don’t think I’m qualified enough to answer that. <br>At first glance, it seems to make sense.<br></p><p>However, I feel like this deserves to be an other proposal, after this one is (hopefully!) accepted.<br>Because currently the proposal is extremely simple: it is about replacing one keyword <br>with another one, in order to improve the clarity of the grammar. Moreover, the transition <br>from the previous grammar to the proposed one is immediate.<br> <br>Changes to the places where (associated types / type aliases) are allowed will involve more <br>technical discussions, may be more controversial, and may complicate the review of the proposal.<br></p><p>So, unless someone familiar with the inner workings of Swift tells me that allowing <br>“associated ___ = ___” in protocol extensions is an obvious consequence of adding the <br>`associated` keyword, I would rather not include it in the proposal. <br></p><p>Happy to hear any counter-argument, though :)<br></p><p>Loïc <br></p><p>&gt; On Dec 6, 2015, at 7:34 PM, Alex Lew &lt;alexl.mail+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; Commented on the proposal but realize that it might be better to reply here. <br>&gt; <br>&gt; For clarification: when you say &quot;deprecate typealias&quot; do you mean only in the context of associated types or in the language as a whole?<br>&gt;  <br>&gt; I also thought it might make sense to add to the proposal a disabling of the &quot;default&quot; behavior that is currently allowed for type aliases in protocols:<br>&gt; <br>&gt; protocol Prot {<br>&gt;     associated Container: SequenceType<br>&gt;     associated Element = Container.Generator.Element // should be illegal<br>&gt; }<br>&gt; <br>&gt; Instead, if you actually want the semantics of an additional associated type with a default (but overridable) value, you should use a protocol extension. (Which means that associated ____ = ____ would be allowed in protocol extensions, but not associated ____ : _____  or associated ____ : ____ = _____.) Does that sound right?<br>&gt; <br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 10:32 AM, Loïc Lecrenier &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Well, I went ahead and created a pull request :)<br>&gt; <br>&gt; I also included a “proposed approach” section, where I propose to deprecate<br>&gt; the `typealias` keyword for Swift 2.2, and replace it entirely for Swift 3.0.<br>&gt; <br>&gt; Does anyone have any thought on that? This is a bit aggressive, but I think it’s worth it.<br>&gt; It is actually the same approach Erica proposed for removing C for-loops.<br>&gt; <br>&gt; Loïc<br>&gt; <br>&gt; &gt; On Dec 6, 2015, at 1:12 PM, Loïc Lecrenier &lt;loiclecrenier at icloud.com &lt;mailto:loiclecrenier at icloud.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I have drafted a formal proposal here: https://gist.github.com/loiclec/22459d230a21dbcb81fc &lt;https://gist.github.com/loiclec/22459d230a21dbcb81fc&gt;<br>&gt; &gt; Would love to receive feedback from the community on it, I am particularly worried about the correctness of the terms I used.<br>&gt; &gt; Should I make a pull request to swift-evolution now, or should we continue the conversation here?<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt;<br>&gt; &gt; Loïc<br>&gt; &gt;<br>&gt; &gt; (and sorry about emailing you on Sunday 😇 )<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 6, 2015, at 1:48 AM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Dec 5, 2015, at 4:35 PM, Loïc Lecrenier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; Hi everyone :)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I propose introducing a new &quot;associated_type&quot; keyword that will replace &quot;typealias&quot; for declaring associated types in protocols.<br>&gt; &gt;&gt;&gt; I remember being confused by associated types when I started using Swift, and I think one reason why was the use of the typealias keyword to define them.<br>&gt; &gt;&gt;&gt; One reason was that I thought I knew what typealias did, and so I didn&#39;t stop to learn what it did inside a protocol. An other reason was the difficulty of finding help when searching for &quot;typealias&quot; instead of &quot;associated types&quot;.<br>&gt; &gt;&gt;&gt; Then, when I thought I understood it, I started building an excessively protocol-oriented program as an exercise. And I still lost a lot of time fighting Swift by trying to use &quot;real&quot; typealias-es inside of protocols.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Conceptually, I had something like this:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtA {<br>&gt; &gt;&gt;&gt; typealias Container : SequenceType<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; typealias AnOtherAssocType : ProtA<br>&gt; &gt;&gt;&gt; func foo(x: AnOtherAssocType.Container.Generator.Element, y: AnOtherAssocType.Container.Generator.Element) -&gt; AnOtherAssocType.Container.Generator.Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The function foo is very difficult to read, so I wanted to use a shortcut to Element by doing this:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; typealias A : ProtA<br>&gt; &gt;&gt;&gt; typealias Element = A.Container.Generator.Element<br>&gt; &gt;&gt;&gt; func foo(x: Element, y: Element) -&gt; Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; But by doing so, I didn&#39;t create a shortcut to Element, but an associated type with a default value of Element. (right?)<br>&gt; &gt;&gt;&gt; Then I tried to write extensions to ProtB where Element conforms to, say, Equatable, and couldn&#39;t make it work because A.Container.Generator.Element didn&#39;t conform to Equatable.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; So, that was a rather long explanation of the reasons I think we should replace the typealias keyword by associated_type, and allow &quot;real&quot; typealias-es inside protocols.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think this is a great idea; re-using typealias for associated types was a mistake.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; John.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Ideally, I would write<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; associated_type AnOtherAssocType : ProtA<br>&gt; &gt;&gt;&gt; typealias Element = AnOtherAssocType.Container.Generator.Element<br>&gt; &gt;&gt;&gt; func foo(x: Element, y: Element) -&gt; Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; and it would be exactly the same as<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; protocol ProtB {<br>&gt; &gt;&gt;&gt; associated_type AnOtherAssocType : ProtA<br>&gt; &gt;&gt;&gt; func foo(x: A.Container.Generator.Element, y: A.Container.Generator.Element) -&gt; A.Container.Generator.Element<br>&gt; &gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; There are probably some problems created by this proposal, but right now I can&#39;t see any :/<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Loïc<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
