<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f46669a21939310a6abc8926026de34e?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>David Liu</string> &lt;david.yang.liu at gmail.com&gt;<p>August 25, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi all,  can any one here give me some pointers on debugging the standard<br>library?<br>I may be compiling the toolchain incorrectly when i step through the code<br>variables on the stack frame are not available.<br>I think its due to this message when i start the REPL<br>`libswiftCore.dylib was compiled with optimization - stepping may behave<br>oddly; variables may not be available.`<br>I am using the /utils/build-toolchain command and did not touch the<br>presets.ini file.<br>Any help is appreciated!<br></p><p>Thanks in advance<br></p><p>Dave<br></p><p>Process 13833 stopped<br></p><p>* thread #1: tid = 0x3a6ffe, 0x00000001000c3603<br>libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass :<br>AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt;<br>[inlined] Swift._roundUp (Swift.Int, toAlignment : Swift.Int) -&gt; Swift.Int<br>at Builtin.swift:72, queue = &#39;com.apple.main-thread&#39;, stop reason = step in<br></p><p>    frame #0: 0x00000001000c3603<br>libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass :<br>AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt;<br>[inlined] Swift._roundUp (Swift.Int, toAlignment : Swift.Int) -&gt; Swift.Int<br>at Builtin.swift:72 [opt]<br></p><p>   69  @_versioned<br></p><p>   70  internal func _roundUp(_ offset: Int, toAlignment alignment: Int) -&gt;<br>Int {<br></p><p>   71    _sanityCheck(offset &gt;= 0)<br></p><p>-&gt; 72    return Int(_roundUpImpl(UInt(bitPattern: offset), toAlignment:<br>alignment))<br></p><p>   73  }<br></p><p>   74<br></p><p>   75  // This function takes a raw pointer and returns a typed pointer. It<br>implicitly<br></p><p>(lldb) fr v<br></p><p>(lldb) po offset<br></p><p>error: &lt;EXPR&gt;:3:1: error: use of unresolved identifier &#39;offset&#39;<br></p><p>offset<br></p><p>^~~~~~<br></p><p>(lldb) fr v offset<br></p><p>error: no variable named &#39;offset&#39; found in this frame<br></p><p>(lldb) s<br></p><p>Process 13833 stopped<br></p><p>* thread #1: tid = 0x3a6ffe, 0x00000001000c3603<br>libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass :<br>AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt;<br>[inlined] Swift._roundUpImpl (Swift.UInt, toAlignment : Swift.Int) -&gt;<br>Swift.UInt at Builtin.swift:58, queue = &#39;com.apple.main-thread&#39;, stop<br>reason = step in<br></p><p>    frame #0: 0x00000001000c3603<br>libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass :<br>AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt;<br>[inlined] Swift._roundUpImpl (Swift.UInt, toAlignment : Swift.Int) -&gt;<br>Swift.UInt at Builtin.swift:58 [opt]<br></p><p>   55    _sanityCheck(_isPowerOf2(alignment))<br></p><p>   56    // Note, given that offset is &gt;= 0, and alignment &gt; 0, we don&#39;t<br></p><p>   57    // need to underflow check the -1, as it can never underflow.<br></p><p>-&gt; 58    let x = offset + UInt(bitPattern: alignment) &amp;- 1<br></p><p>   59    // Note, as alignment is a power of 2, we&#39;ll use masking to<br>efficiently<br></p><p>   60    // get the aligned value<br></p><p>   61    return x &amp; ~(UInt(bitPattern: alignment) &amp;- 1)<br></p><p>(lldb) fr v<br></p><p>(lldb) fr v -R<br></p><p>(lldb) fr v aligment<br></p><p>error: no variable named &#39;aligment&#39; found in this frame<br></p><p>(lldb) fr v alignment<br></p><p>error: no variable named &#39;alignment&#39; found in this frame<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160825/45906215/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>August 26, 2016 at 02:00:00am</p></header><div class="content"><p>If you are using the build-toolchain command, the stdlib will be built with optimizations enabled [as one would hope when you compile a toolchain = )].<br></p><p>If you want to have a debug stdlib, you need to make sure that the cmake flag -DSWIFT_STDLIB_BUILD_TYPE=Debug is set. (And probably you also want) -DSWIFT_STDLIB_ASSERTIONS=true.<br></p><p>Now you are not going to be able to get that from build-toolchain without modification. A few thoughts:<br></p><p>1. I would file a bug on bugs.swift.org saying that you want the ability to tell build-toolchain to build a debug standard library. I think that is a reasonable request. Please respond to this thread with the URL.<br>2. Notice that the build-toolchain script has a build-script invocation inside of it. There is an option to build-script called something along the lines of --expand-build-script-command-line perhaps? Look for expand in the --help. You can add that to the script to grab the internal build-script invocation. Then add to the end of that invocation the option: --debug-swift-stdlib --swift-stdlib-assertions. Keep in mind that this is just from memory so you may need to munge it a little bit.<br></p><p>Michael<br></p><p>&gt; On Aug 26, 2016, at 12:36 AM, David Liu via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,  can any one here give me some pointers on debugging the standard library?<br>&gt; I may be compiling the toolchain incorrectly when i step through the code variables on the stack frame are not available. <br>&gt; I think its due to this message when i start the REPL<br>&gt; `libswiftCore.dylib was compiled with optimization - stepping may behave oddly; variables may not be available.`<br>&gt; I am using the /utils/build-toolchain command and did not touch the presets.ini file.<br>&gt; Any help is appreciated!<br>&gt; <br>&gt; Thanks in advance<br>&gt; <br>&gt; Dave<br>&gt; <br>&gt; Process 13833 stopped<br>&gt; * thread #1: tid = 0x3a6ffe, 0x00000001000c3603 libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined] Swift._roundUp (Swift.Int, toAlignment : Swift.Int) -&gt; Swift.Int at Builtin.swift:72, queue = &#39;com.apple.main-thread&#39;, stop reason = step in<br>&gt;     frame #0: 0x00000001000c3603 libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined] Swift._roundUp (Swift.Int, toAlignment : Swift.Int) -&gt; Swift.Int at Builtin.swift:72 [opt]<br>&gt;    69  	@_versioned<br>&gt;    70  	internal func _roundUp(_ offset: Int, toAlignment alignment: Int) -&gt; Int {<br>&gt;    71  	  _sanityCheck(offset &gt;= 0)<br>&gt; -&gt; 72  	  return Int(_roundUpImpl(UInt(bitPattern: offset), toAlignment: alignment))<br>&gt;    73  	}<br>&gt;    74  	<br>&gt;    75  	// This function takes a raw pointer and returns a typed pointer. It implicitly<br>&gt; (lldb) fr v<br>&gt; (lldb) po offset<br>&gt; error: &lt;EXPR&gt;:3:1: error: use of unresolved identifier &#39;offset&#39;<br>&gt; offset<br>&gt; ^~~~~~<br>&gt; (lldb) fr v offset<br>&gt; error: no variable named &#39;offset&#39; found in this frame<br>&gt; (lldb) s<br>&gt; Process 13833 stopped<br>&gt; * thread #1: tid = 0x3a6ffe, 0x00000001000c3603 libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined] Swift._roundUpImpl (Swift.UInt, toAlignment : Swift.Int) -&gt; Swift.UInt at Builtin.swift:58, queue = &#39;com.apple.main-thread&#39;, stop reason = step in<br>&gt;     frame #0: 0x00000001000c3603 libswiftCore.dylib`ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type, minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined] Swift._roundUpImpl (Swift.UInt, toAlignment : Swift.Int) -&gt; Swift.UInt at Builtin.swift:58 [opt]<br>&gt;    55  	  _sanityCheck(_isPowerOf2(alignment))<br>&gt;    56  	  // Note, given that offset is &gt;= 0, and alignment &gt; 0, we don&#39;t<br>&gt;    57  	  // need to underflow check the -1, as it can never underflow.<br>&gt; -&gt; 58  	  let x = offset + UInt(bitPattern: alignment) &amp;- 1<br>&gt;    59  	  // Note, as alignment is a power of 2, we&#39;ll use masking to efficiently<br>&gt;    60  	  // get the aligned value<br>&gt;    61  	  return x &amp; ~(UInt(bitPattern: alignment) &amp;- 1)<br>&gt; (lldb) fr v<br>&gt; (lldb) fr v -R<br>&gt; (lldb) fr v aligment<br>&gt; error: no variable named &#39;aligment&#39; found in this frame<br>&gt; (lldb) fr v alignment<br>&gt; error: no variable named &#39;alignment&#39; found in this frame<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160826/cc6b22da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f46669a21939310a6abc8926026de34e?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>David Liu</string> &lt;david.yang.liu at gmail.com&gt;<p>August 26, 2016 at 12:00:00pm</p></header><div class="content"><p>Thank you Michael this really helps a lot, i really appreciate your help.<br>Here is the bug i filed. https://bugs.swift.org/browse/SR-2494 .<br>Also as a side question, this is my current method of trying to debug the<br>Standard Library,  was wondering is there a better way to debug other than<br>build toolchain and debug through command line?<br></p><p>Cheers<br></p><p>Dave<br></p><p><br>On Thu, Aug 25, 2016 at 11:31 PM, Michael Gottesman &lt;mgottesman at apple.com&gt;<br>wrote:<br></p><p>&gt; If you are using the build-toolchain command, the stdlib will be built<br>&gt; with optimizations enabled [as one would hope when you compile a toolchain<br>&gt; = )].<br>&gt;<br>&gt; If you want to have a debug stdlib, you need to make sure that the cmake<br>&gt; flag -DSWIFT_STDLIB_BUILD_TYPE=Debug is set. (And probably you also want)<br>&gt; -DSWIFT_STDLIB_ASSERTIONS=true.<br>&gt;<br>&gt; Now you are not going to be able to get that from build-toolchain without<br>&gt; modification. A few thoughts:<br>&gt;<br>&gt; 1. I would file a bug on bugs.swift.org saying that you want the ability<br>&gt; to tell build-toolchain to build a debug standard library. I think that is<br>&gt; a reasonable request. Please respond to this thread with the URL.<br>&gt; 2. Notice that the build-toolchain script has a build-script invocation<br>&gt; inside of it. There is an option to build-script called something along the<br>&gt; lines of --expand-build-script-command-line perhaps? Look for expand in<br>&gt; the --help. You can add that to the script to grab the internal<br>&gt; build-script invocation. Then add to the end of that invocation the option:<br>&gt; --debug-swift-stdlib --swift-stdlib-assertions. Keep in mind that this is<br>&gt; just from memory so you may need to munge it a little bit.<br>&gt;<br>&gt; Michael<br>&gt;<br>&gt; On Aug 26, 2016, at 12:36 AM, David Liu via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,  can any one here give me some pointers on debugging the standard<br>&gt; library?<br>&gt; I may be compiling the toolchain incorrectly when i step through the code<br>&gt; variables on the stack frame are not available.<br>&gt; I think its due to this message when i start the REPL<br>&gt; `libswiftCore.dylib was compiled with optimization - stepping may behave<br>&gt; oddly; variables may not be available.`<br>&gt; I am using the /utils/build-toolchain command and did not touch the<br>&gt; presets.ini file.<br>&gt; Any help is appreciated!<br>&gt;<br>&gt; Thanks in advance<br>&gt;<br>&gt; Dave<br>&gt;<br>&gt; Process 13833 stopped<br>&gt; * thread #1: tid = 0x3a6ffe, 0x00000001000c3603 libswiftCore.dylib`<br>&gt; ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type,<br>&gt; minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined]<br>&gt; Swift._roundUp (Swift.Int, toAlignment : Swift.Int) -&gt; Swift.Int at<br>&gt; Builtin.swift:72, queue = &#39;com.apple.main-thread&#39;, stop reason = step in<br>&gt;     frame #0: 0x00000001000c3603 libswiftCore.dylib`<br>&gt; ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type,<br>&gt; minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined]<br>&gt; Swift._roundUp (Swift.Int, toAlignment : Swift.Int) -&gt; Swift.Int at<br>&gt; Builtin.swift:72 [opt]<br>&gt;    69  @_versioned<br>&gt;    70  internal func _roundUp(_ offset: Int, toAlignment alignment: Int)<br>&gt; -&gt; Int {<br>&gt;    71    _sanityCheck(offset &gt;= 0)<br>&gt; -&gt; 72    return Int(_roundUpImpl(UInt(bitPattern: offset), toAlignment:<br>&gt; alignment))<br>&gt;    73  }<br>&gt;    74<br>&gt;    75  // This function takes a raw pointer and returns a typed pointer.<br>&gt; It implicitly<br>&gt; (lldb) fr v<br>&gt; (lldb) po offset<br>&gt; error: &lt;EXPR&gt;:3:1: error: use of unresolved identifier &#39;offset&#39;<br>&gt; offset<br>&gt; ^~~~~~<br>&gt; (lldb) fr v offset<br>&gt; error: no variable named &#39;offset&#39; found in this frame<br>&gt; (lldb) s<br>&gt; Process 13833 stopped<br>&gt; * thread #1: tid = 0x3a6ffe, 0x00000001000c3603 libswiftCore.dylib`<br>&gt; ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type,<br>&gt; minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined]<br>&gt; Swift._roundUpImpl (Swift.UInt, toAlignment : Swift.Int) -&gt; Swift.UInt at<br>&gt; Builtin.swift:58, queue = &#39;com.apple.main-thread&#39;, stop reason = step in<br>&gt;     frame #0: 0x00000001000c3603 libswiftCore.dylib`<br>&gt; ManagedBufferPointer.init(_uncheckedBufferClass : AnyObject.Type,<br>&gt; minimumCapacity : Int) -&gt; ManagedBufferPointer&lt;A, B&gt; [inlined]<br>&gt; Swift._roundUpImpl (Swift.UInt, toAlignment : Swift.Int) -&gt; Swift.UInt at<br>&gt; Builtin.swift:58 [opt]<br>&gt;    55    _sanityCheck(_isPowerOf2(alignment))<br>&gt;    56    // Note, given that offset is &gt;= 0, and alignment &gt; 0, we don&#39;t<br>&gt;    57    // need to underflow check the -1, as it can never underflow.<br>&gt; -&gt; 58    let x = offset + UInt(bitPattern: alignment) &amp;- 1<br>&gt;    59    // Note, as alignment is a power of 2, we&#39;ll use masking to<br>&gt; efficiently<br>&gt;    60    // get the aligned value<br>&gt;    61    return x &amp; ~(UInt(bitPattern: alignment) &amp;- 1)<br>&gt; (lldb) fr v<br>&gt; (lldb) fr v -R<br>&gt; (lldb) fr v aligment<br>&gt; error: no variable named &#39;aligment&#39; found in this frame<br>&gt; (lldb) fr v alignment<br>&gt; error: no variable named &#39;alignment&#39; found in this frame<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160826/b92b72e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>August 26, 2016 at 10:00:00pm</p></header><div class="content"><p>On Fri, Aug 26, 2016 at 10:14 PM, David Liu via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; Thank you Michael this really helps a lot, i really appreciate your help.<br>&gt; Here is the bug i filed. https://bugs.swift.org/browse/SR-2494 .<br>&gt; Also as a side question, this is my current method of trying to debug the<br>&gt; Standard Library,  was wondering is there a better way to debug other than<br>&gt; build toolchain and debug through command line?<br></p><p>If you don&#39;t need the whole toolchain, just run:<br></p><p>./utils/build-script -R --debug-swift-stdlib<br></p><p>This will build the compiler, the standard library, and SDK overlays.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f46669a21939310a6abc8926026de34e?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>David Liu</string> &lt;david.yang.liu at gmail.com&gt;<p>August 27, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Dimitri<br></p><p>Thanks for the tip really appreciate the help.<br></p><p>Dave<br></p><p><br>On Fri, Aug 26, 2016 at 12:50 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Fri, Aug 26, 2016 at 10:14 PM, David Liu via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; Thank you Michael this really helps a lot, i really appreciate your help.<br>&gt; &gt; Here is the bug i filed. https://bugs.swift.org/browse/SR-2494 .<br>&gt; &gt; Also as a side question, this is my current method of trying to debug the<br>&gt; &gt; Standard Library,  was wondering is there a better way to debug other<br>&gt; than<br>&gt; &gt; build toolchain and debug through command line?<br>&gt;<br>&gt; If you don&#39;t need the whole toolchain, just run:<br>&gt;<br>&gt; ./utils/build-script -R --debug-swift-stdlib<br>&gt;<br>&gt; This will build the compiler, the standard library, and SDK overlays.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160827/de6fbb9d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f46669a21939310a6abc8926026de34e?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>David Liu</string> &lt;david.yang.liu at gmail.com&gt;<p>August 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Dimitri,<br></p><p>So i have built using ./utils/build-script -R --debug-swift-stdlib how ever<br>the REPL no longer has line numbers and i can not set a breakpoint via `:b`<br> and am unable to get to lldb to set breakpoints.<br>Thanks again for your help.<br></p><p>Cheers<br></p><p>Dave<br></p><p><br>davids-Mac-Pro:swift dyl$<br>/Users/dyl/Documents/Apple/build/Ninja-ReleaseAssert+stdlib-DebugAssert/swift-macosx-x86_64/bin/swift<br></p><p>***  You are running Swift&#39;s integrated REPL,  ***<br></p><p>***  intended for compiler and stdlib          ***<br></p><p>***  development and testing purposes only.    ***<br></p><p>***  The full REPL is built as part of LLDB.   ***<br></p><p>***  Type &#39;:help&#39; for assistance.              ***<br></p><p>(swift) :LLDB<br></p><p>Unknown interpreter escape; try :help<br></p><p>(swift) :help<br></p><p>Available commands:<br></p><p>  :quit - quit the interpreter (you can also use :exit or Control+D or<br>exit(0))<br></p><p>  :autoindent (on|off) - turn on/off automatic indentation of bracketed<br>lines<br></p><p>  :constraints debug (on|off) - turn on/off the debug output for the<br>constraint-based type checker<br></p><p>  :dump_ir - dump the LLVM IR generated by the REPL<br></p><p>  :dump_ast - dump the AST representation of the REPL input<br></p><p>  :dump_decl &lt;name&gt; - dump the AST representation of the named declarations<br></p><p>  :dump_source - dump the user input (ignoring lines with errors)<br></p><p>  :print_decl &lt;name&gt; - print the AST representation of the named<br>declarations<br></p><p>  :print_module &lt;name&gt; - print the decls in the given module, but not<br>submodules<br></p><p>API documentation etc. will be here eventually.<br></p><p>(swift) func OME(){<br></p><p>          let testData = &quot;some string&quot;<br></p><p>          print(testData)<br></p><p>        }<br></p><p>(swift) :b 1 &lt;&lt; this does not work<br></p><p>(swift) breakpoint set --file Range.swift --line 1435 &lt;&lt; don&#39;t work neither<br>since not lldb<br></p><p><br></p><p>On Sat, Aug 27, 2016 at 12:26 PM, David Liu &lt;david.yang.liu at gmail.com&gt;<br>wrote:<br></p><p>&gt; Hi Dimitri<br>&gt;<br>&gt; Thanks for the tip really appreciate the help.<br>&gt;<br>&gt; Dave<br>&gt;<br>&gt;<br>&gt; On Fri, Aug 26, 2016 at 12:50 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Aug 26, 2016 at 10:14 PM, David Liu via swift-users<br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt; Thank you Michael this really helps a lot, i really appreciate your<br>&gt;&gt; help.<br>&gt;&gt; &gt; Here is the bug i filed. https://bugs.swift.org/browse/SR-2494 .<br>&gt;&gt; &gt; Also as a side question, this is my current method of trying to debug<br>&gt;&gt; the<br>&gt;&gt; &gt; Standard Library,  was wondering is there a better way to debug other<br>&gt;&gt; than<br>&gt;&gt; &gt; build toolchain and debug through command line?<br>&gt;&gt;<br>&gt;&gt; If you don&#39;t need the whole toolchain, just run:<br>&gt;&gt;<br>&gt;&gt; ./utils/build-script -R --debug-swift-stdlib<br>&gt;&gt;<br>&gt;&gt; This will build the compiler, the standard library, and SDK overlays.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160827/38336de6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>August 27, 2016 at 02:00:00pm</p></header><div class="content"><p>On Sat, Aug 27, 2016 at 2:12 PM, David Liu &lt;david.yang.liu at gmail.com&gt; wrote:<br>&gt; Hi Dimitri,<br>&gt;<br>&gt; So i have built using ./utils/build-script -R --debug-swift-stdlib how ever<br>&gt; the REPL no longer has line numbers and i can not set a breakpoint via `:b`<br>&gt; and am unable to get to lldb to set breakpoints.<br>&gt; Thanks again for your help.<br></p><p>This build does not include LLDB, only the components that I mentioned:<br></p><p>&gt; This will build the compiler, the standard library, and SDK overlays.<br></p><p>Add &#39;--lldb&#39; if you need the debugger.  (Note that you&#39;d need to start<br>the REPL from the LLDB build dir, or install everything.  Running<br>&#39;swift&#39; from the build directory will always run the integrated REPL<br>without LLDB.)<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f46669a21939310a6abc8926026de34e?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>David Liu</string> &lt;david.yang.liu at gmail.com&gt;<p>August 27, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Dimitri,<br></p><p>Thanks again for the help but unfortunately i am still stuck.<br>I added the --lldb flag and built it and ran in to some errors with this<br>command./utils/build-script -R --debug-swift-stdlib --lldb<br>So i decided to start clean and re clone everything and start on fresh<br>slate and try it with just the -l option  ./utils/build-script -l<br>I got the same error both times, it looks like both of the scripts have to<br>do with code signing. I did not see any code sign  related entry in the<br>README.md<br></p><p>Cheers<br></p><p>Dave<br></p><p><br>PBXCp<br>/Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_64/CustomSwift-Debug/repl_swift<br>/Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_64/CustomSwift-Debug/LLDB.framework/Resources/repl_swift<br></p><p>    cd /Users/dyl/Documents/swift-source/lldb<br></p><p>    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude<br>.git -exclude .hg -resolve-src-symlinks<br>/Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_64/CustomSwift-Debug/repl_swift<br>/Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_64/CustomSwift-Debug/LLDB.framework/Resources<br></p><p><br>** BUILD FAILED **<br></p><p><br></p><p>The following build commands failed:<br></p><p>PhaseScriptExecution Run\ Script<br>/Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_64/lldb.build/CustomSwift-Debug/lldb-server.build/Script-4C3326CA18B2A2B800EB5DD7.sh<br></p><p>PhaseScriptExecution Run\ Script<br>/Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_64/debugserver.build/CustomSwift-Debug/debugserver.build/Script-4C3326CB18B2A2F600EB5DD7.sh<br></p><p>(2 failures)<br></p><p>./swift/utils/build-script: fatal error: command terminated with a non-zero<br>exit status 65, aborting<br></p><p>davids-Mac-Pro:swift-source dyl$ ./swift/utils/build-script -l<br></p><p><br>#!/bin/sh -x<br></p><p>if [ &quot;${CONFIGURATION}&quot; != BuildAndIntegration ]<br></p><p>then<br></p><p>    if [ -n &quot;${DEBUGSERVER_USE_FROM_SYSTEM}&quot; ]<br></p><p>    then<br></p><p>ditto<br>&quot;${DEVELOPER_DIR}/../SharedFrameworks/LLDB.framework/Resources/debugserver&quot;<br>&quot;${TARGET_BUILD_DIR}/${TARGET_NAME}&quot;<br></p><p>    elif [ &quot;${DEBUGSERVER_DISABLE_CODESIGN}&quot; == &quot;&quot; ]<br></p><p>    then<br></p><p>        codesign -f -s lldb_codesign &quot;${TARGET_BUILD_DIR}/${TARGET_NAME}&quot;<br></p><p>    fi<br></p><p>fi<br></p><p>if [ &quot;${CONFIGURATION}&quot; != BuildAndIntegration ]<br></p><p>then<br></p><p>    if [ &quot;${DEBUGSERVER_USE_FROM_SYSTEM}&quot; == &quot;&quot; ]<br></p><p>    then<br></p><p>        if [ &quot;${DEBUGSERVER_DISABLE_CODESIGN}&quot; == &quot;&quot; ]<br></p><p>        then<br></p><p>            codesign -f -s lldb_codesign<br>&quot;${TARGET_BUILD_DIR}/${TARGET_NAME}&quot;<br></p><p>        fi<br></p><p>    fi<br></p><p>fi<br></p><p><br></p><p>On Sat, Aug 27, 2016 at 2:17 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>wrote:<br></p><p>&gt; On Sat, Aug 27, 2016 at 2:12 PM, David Liu &lt;david.yang.liu at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt; Hi Dimitri,<br>&gt; &gt;<br>&gt; &gt; So i have built using ./utils/build-script -R --debug-swift-stdlib how<br>&gt; ever<br>&gt; &gt; the REPL no longer has line numbers and i can not set a breakpoint via<br>&gt; `:b`<br>&gt; &gt; and am unable to get to lldb to set breakpoints.<br>&gt; &gt; Thanks again for your help.<br>&gt;<br>&gt; This build does not include LLDB, only the components that I mentioned:<br>&gt;<br>&gt; &gt; This will build the compiler, the standard library, and SDK overlays.<br>&gt;<br>&gt; Add &#39;--lldb&#39; if you need the debugger.  (Note that you&#39;d need to start<br>&gt; the REPL from the LLDB build dir, or install everything.  Running<br>&gt; &#39;swift&#39; from the build directory will always run the integrated REPL<br>&gt; without LLDB.)<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160827/0981151e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f46669a21939310a6abc8926026de34e?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>David Liu</string> &lt;david.yang.liu at gmail.com&gt;<p>August 28, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Dimitri<br></p><p>Update, hardcoding the following in the build-script-impl and building<br>tool-chain<br>-DSWIFT_STDLIB_BUILD_TYPE=&quot;Debug&quot;<br>-DSWIFT_STDLIB_ASSERTIONS=true<br>is working for me.<br>But any attempt to build lldb with -l or -lldb fails with the above error.<br>I think this unblocks me for now. Will keep investigating<br></p><p>On Sat, Aug 27, 2016 at 6:09 PM, David Liu &lt;david.yang.liu at gmail.com&gt; wrote:<br></p><p>&gt; Hi Dimitri,<br>&gt;<br>&gt; Thanks again for the help but unfortunately i am still stuck.<br>&gt; I added the --lldb flag and built it and ran in to some errors with this<br>&gt; command./utils/build-script -R --debug-swift-stdlib --lldb<br>&gt; So i decided to start clean and re clone everything and start on fresh<br>&gt; slate and try it with just the -l option  ./utils/build-script -l<br>&gt; I got the same error both times, it looks like both of the scripts have to<br>&gt; do with code signing. I did not see any code sign  related entry in the<br>&gt; README.md<br>&gt;<br>&gt; Cheers<br>&gt;<br>&gt; Dave<br>&gt;<br>&gt;<br>&gt; PBXCp /Users/dyl/Documents/swift-source/build/Ninja-<br>&gt; DebugAssert/lldb-macosx-x86_64/CustomSwift-Debug/repl_swift<br>&gt; /Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_<br>&gt; 64/CustomSwift-Debug/LLDB.framework/Resources/repl_swift<br>&gt;<br>&gt;     cd /Users/dyl/Documents/swift-source/lldb<br>&gt;<br>&gt;     builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude<br>&gt; .git -exclude .hg -resolve-src-symlinks /Users/dyl/Documents/swift-<br>&gt; source/build/Ninja-DebugAssert/lldb-macosx-x86_64/CustomSwift-Debug/repl_swift<br>&gt; /Users/dyl/Documents/swift-source/build/Ninja-DebugAssert/lldb-macosx-x86_<br>&gt; 64/CustomSwift-Debug/LLDB.framework/Resources<br>&gt;<br>&gt;<br>&gt; ** BUILD FAILED **<br>&gt;<br>&gt;<br>&gt;<br>&gt; The following build commands failed:<br>&gt;<br>&gt; PhaseScriptExecution Run\ Script /Users/dyl/Documents/swift-<br>&gt; source/build/Ninja-DebugAssert/lldb-macosx-x86_64/lldb.build/CustomSwift-<br>&gt; Debug/lldb-server.build/Script-4C3326CA18B2A2B800EB5DD7.sh<br>&gt;<br>&gt; PhaseScriptExecution Run\ Script /Users/dyl/Documents/swift-<br>&gt; source/build/Ninja-DebugAssert/lldb-macosx-x86_64/debugserver.build/<br>&gt; CustomSwift-Debug/debugserver.build/Script-4C3326CB18B2A2F600EB5DD7.sh<br>&gt;<br>&gt; (2 failures)<br>&gt;<br>&gt; ./swift/utils/build-script: fatal error: command terminated with a<br>&gt; non-zero exit status 65, aborting<br>&gt;<br>&gt; davids-Mac-Pro:swift-source dyl$ ./swift/utils/build-script -l<br>&gt;<br>&gt;<br>&gt; #!/bin/sh -x<br>&gt;<br>&gt; if [ &quot;${CONFIGURATION}&quot; != BuildAndIntegration ]<br>&gt;<br>&gt; then<br>&gt;<br>&gt;     if [ -n &quot;${DEBUGSERVER_USE_FROM_SYSTEM}&quot; ]<br>&gt;<br>&gt;     then<br>&gt;<br>&gt; ditto &quot;${DEVELOPER_DIR}/../SharedFrameworks/LLDB.framework/Resources/debugserver&quot;<br>&gt; &quot;${TARGET_BUILD_DIR}/${TARGET_NAME}&quot;<br>&gt;<br>&gt;     elif [ &quot;${DEBUGSERVER_DISABLE_CODESIGN}&quot; == &quot;&quot; ]<br>&gt;<br>&gt;     then<br>&gt;<br>&gt;         codesign -f -s lldb_codesign &quot;${TARGET_BUILD_DIR}/${TARGET_NAME}&quot;<br>&gt;<br>&gt;     fi<br>&gt;<br>&gt; fi<br>&gt;<br>&gt; if [ &quot;${CONFIGURATION}&quot; != BuildAndIntegration ]<br>&gt;<br>&gt; then<br>&gt;<br>&gt;     if [ &quot;${DEBUGSERVER_USE_FROM_SYSTEM}&quot; == &quot;&quot; ]<br>&gt;<br>&gt;     then<br>&gt;<br>&gt;         if [ &quot;${DEBUGSERVER_DISABLE_CODESIGN}&quot; == &quot;&quot; ]<br>&gt;<br>&gt;         then<br>&gt;<br>&gt;             codesign -f -s lldb_codesign &quot;${TARGET_BUILD_DIR}/${TARGET_<br>&gt; NAME}&quot;<br>&gt;<br>&gt;         fi<br>&gt;<br>&gt;     fi<br>&gt;<br>&gt; fi<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sat, Aug 27, 2016 at 2:17 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On Sat, Aug 27, 2016 at 2:12 PM, David Liu &lt;david.yang.liu at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt; Hi Dimitri,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; So i have built using ./utils/build-script -R --debug-swift-stdlib how<br>&gt;&gt; ever<br>&gt;&gt; &gt; the REPL no longer has line numbers and i can not set a breakpoint via<br>&gt;&gt; `:b`<br>&gt;&gt; &gt; and am unable to get to lldb to set breakpoints.<br>&gt;&gt; &gt; Thanks again for your help.<br>&gt;&gt;<br>&gt;&gt; This build does not include LLDB, only the components that I mentioned:<br>&gt;&gt;<br>&gt;&gt; &gt; This will build the compiler, the standard library, and SDK overlays.<br>&gt;&gt;<br>&gt;&gt; Add &#39;--lldb&#39; if you need the debugger.  (Note that you&#39;d need to start<br>&gt;&gt; the REPL from the LLDB build dir, or install everything.  Running<br>&gt;&gt; &#39;swift&#39; from the build directory will always run the integrated REPL<br>&gt;&gt; without LLDB.)<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160828/11e494f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>libswiftCore.dylib was compiled with optimization - stepping may behave oddly;</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>August 28, 2016 at 04:00:00am</p></header><div class="content"><p>On Sun, Aug 28, 2016 at 12:51 AM, David Liu &lt;david.yang.liu at gmail.com&gt; wrote:<br>&gt; Hi Dimitri<br>&gt;<br>&gt; Update, hardcoding the following in the build-script-impl and building<br>&gt; tool-chain<br>&gt; -DSWIFT_STDLIB_BUILD_TYPE=&quot;Debug&quot;<br>&gt; -DSWIFT_STDLIB_ASSERTIONS=true<br>&gt; is working for me.<br></p><p>These two options is what --debug-swift-stdlib expands to.<br></p><p>&gt; But any attempt to build lldb with -l or -lldb fails with the above error. I<br>&gt; think this unblocks me for now.<br></p><p>+ Sean for LLDB build issues.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
