<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d89e1da750afc5b531c06311b8a75d4?s=50"></div><header><strong>Alternate proposal for multi-line string literial</strong> from <string>Steve K. Chiu</string> &lt;steve.k.chiu at gmail.com&gt;<p>March 23, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I am new to swift-evolution list, here is my draft proposal for the<br>multi-line string literal problem.<br>The idea had been discussed in the list before, but it seems there are no<br>real solution to many of the string literal problem.<br>Let&#39;s first define what are the problem with string literal:<br></p><p>1. should be able to disable escape char<br></p><p>2. or better, able to replace escape char with user defined char<br></p><p>3. should be able to write multi-line string literal, and is copy-paste<br>friendly<br></p><p>4. for multi-line string, should be  able to remove first and last newline<br>char, so user can write string in block<br></p><p>5. for multi-line string, should be  able to remove leading indent, or<br>remove all indent<br></p><p>6. for multi-line string, should be  able to replace newline with user<br>defined string (&quot;\r\n&quot;, &quot;\r&quot;, &quot;\r&quot;, or simply &quot; &quot;)<br></p><p>7. should be able to add feature over time, without breaking existing code<br></p><p>My proposal to the above problem is to introduce new &#39;process instruction&#39;<br>(not sure how to call it), in the following form:<br></p><p>#string(options) &quot;text&quot;<br></p><p>for example:<br></p><p>#string(escape: nil) &quot;^\d+&quot;<br></p><p>#string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;) &quot;<br>   $(username),<br>   Is it 1358 yet?<br>&lt;EOF&gt;&quot;<br></p><p>It is possible to add many options list above, and you can add more options<br>over time without breaking code.<br></p><p>#string(<br>    escape: Character? = &quot;\\&quot;,<br>    end: String? = nil,<br>    skipEnclosureNewline: Bool = true,<br>    skipLeadingIndent: Bool = true,<br>    skipAllIndent: Bool = false,<br>    newline: String? = nil<br>)<br></p><p>for 1. &amp; 2., escape option to replace escape char, pass nil will disable<br>escape.<br></p><p>for 3., end option for end-of-string mark, pass nil will disable multi-line<br>processing.<br></p><p>for 4., skipEnclosureNewline will skip newline if it is the first or last<br>char of the string.<br></p><p>for 5., skipLeadingIndent will skip leading indent, leading indent is the<br>leading white-spaces of first line of multi-line string.<br></p><p>for 5., skipAllIndent will skip all indent, this will override<br>skipLeadingIndent.<br></p><p>for 6., newline option to replace newline char in multi-line string, pass<br>nil will disable the replacement (as-is in the source).<br></p><p>But there are one problem remain, as you can see, the #string with options<br>will become very long; I don&#39;t think it is a pleasure to use such<br>expression except for one time literal. To fix the problem, I propose yet<br>another process instruction:<br></p><p>#let #rex = #string(escape: nil)<br>#let #mail = #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;)<br></p><p>Now you can write the string as:<br></p><p>#rex &quot;^\d+&quot;<br></p><p>#mail &quot;<br>   $(username),<br>   Is it 1358 yet?<br>&lt;EOF&gt;&quot;<br></p><p>#let should be able to be used with other # process instruction as well,<br>for example, #available, among other things.<br></p><p>What do you think?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/10dc7336/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Alternate proposal for multi-line string literial</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 24, 2016 at 03:00:00am</p></header><div class="content"><p>Feels wrong to me. It&#39;s ugly (looks like line noise) and unnecessary (this much flexibility isn&#39;t required in practice). Making features more powerful doesn&#39;t always make them better.<br></p><p>Some of the use cases you have in mind are probably better handled by macros, whenever they make it into Swift. Macros provide a general and elegant way to handle customizable special cases without introducing an unusual complicated syntax for each of them.<br></p><p>So, nope, sorry, let&#39;s stick to making tripe-quote multiline strings as awesome as possible, but not awesomer. :D<br></p><p>A.<br></p><p><br></p><p><br>&gt; On Mar 23, 2016, at 10:49 AM, Steve K. Chiu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I am new to swift-evolution list, here is my draft proposal for the multi-line string literal problem.<br>&gt; The idea had been discussed in the list before, but it seems there are no real solution to many of the string literal problem.<br>&gt; Let&#39;s first define what are the problem with string literal:<br>&gt; <br>&gt; 1. should be able to disable escape char<br>&gt; <br>&gt; 2. or better, able to replace escape char with user defined char<br>&gt; <br>&gt; 3. should be able to write multi-line string literal, and is copy-paste friendly<br>&gt; <br>&gt; 4. for multi-line string, should be  able to remove first and last newline char, so user can write string in block<br>&gt; <br>&gt; 5. for multi-line string, should be  able to remove leading indent, or remove all indent<br>&gt; <br>&gt; 6. for multi-line string, should be  able to replace newline with user defined string (&quot;\r\n&quot;, &quot;\r&quot;, &quot;\r&quot;, or simply &quot; &quot;)<br>&gt; <br>&gt; 7. should be able to add feature over time, without breaking existing code<br>&gt; <br>&gt; My proposal to the above problem is to introduce new &#39;process instruction&#39; (not sure how to call it), in the following form:<br>&gt; <br>&gt; #string(options) &quot;text&quot;<br>&gt; <br>&gt; for example:<br>&gt; <br>&gt; #string(escape: nil) &quot;^\d+&quot;<br>&gt; <br>&gt; #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;) &quot;<br>&gt;    $(username),<br>&gt;    Is it 1358 yet?<br>&gt; &lt;EOF&gt;&quot;<br>&gt; <br>&gt; It is possible to add many options list above, and you can add more options over time without breaking code.<br>&gt; <br>&gt; #string(<br>&gt;     escape: Character? = &quot;\\&quot;,    <br>&gt;     end: String? = nil,   <br>&gt;     skipEnclosureNewline: Bool = true,    <br>&gt;     skipLeadingIndent: Bool = true, <br>&gt;     skipAllIndent: Bool = false,<br>&gt;     newline: String? = nil<br>&gt; )<br>&gt; <br>&gt; for 1. &amp; 2., escape option to replace escape char, pass nil will disable escape.<br>&gt; <br>&gt; for 3., end option for end-of-string mark, pass nil will disable multi-line processing.<br>&gt; <br>&gt; for 4., skipEnclosureNewline will skip newline if it is the first or last char of the string.<br>&gt; <br>&gt; for 5., skipLeadingIndent will skip leading indent, leading indent is the leading white-spaces of first line of multi-line string.<br>&gt; <br>&gt; for 5., skipAllIndent will skip all indent, this will override skipLeadingIndent.<br>&gt; <br>&gt; for 6., newline option to replace newline char in multi-line string, pass nil will disable the replacement (as-is in the source).<br>&gt; <br>&gt; But there are one problem remain, as you can see, the #string with options will become very long; I don&#39;t think it is a pleasure to use such expression except for one time literal. To fix the problem, I propose yet another process instruction:<br>&gt; <br>&gt; #let #rex = #string(escape: nil)<br>&gt; #let #mail = #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;)<br>&gt; <br>&gt; Now you can write the string as:<br>&gt; <br>&gt; #rex &quot;^\d+&quot;<br>&gt; <br>&gt; #mail &quot;<br>&gt;    $(username),<br>&gt;    Is it 1358 yet?<br>&gt; &lt;EOF&gt;&quot;<br>&gt; <br>&gt; #let should be able to be used with other # process instruction as well, for example, #available, among other things.<br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>Alternate proposal for multi-line string literial</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 24, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;m more in favor of Perl6 stye string literals, in general.<br></p><p>-Patrick<br></p><p>&gt; On Mar 23, 2016, at 12:49 AM, Steve K. Chiu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I am new to swift-evolution list, here is my draft proposal for the multi-line string literal problem.<br>&gt; The idea had been discussed in the list before, but it seems there are no real solution to many of the string literal problem.<br>&gt; Let&#39;s first define what are the problem with string literal:<br>&gt; <br>&gt; 1. should be able to disable escape char<br>&gt; <br>&gt; 2. or better, able to replace escape char with user defined char<br>&gt; <br>&gt; 3. should be able to write multi-line string literal, and is copy-paste friendly<br>&gt; <br>&gt; 4. for multi-line string, should be  able to remove first and last newline char, so user can write string in block<br>&gt; <br>&gt; 5. for multi-line string, should be  able to remove leading indent, or remove all indent<br>&gt; <br>&gt; 6. for multi-line string, should be  able to replace newline with user defined string (&quot;\r\n&quot;, &quot;\r&quot;, &quot;\r&quot;, or simply &quot; &quot;)<br>&gt; <br>&gt; 7. should be able to add feature over time, without breaking existing code<br>&gt; <br>&gt; My proposal to the above problem is to introduce new &#39;process instruction&#39; (not sure how to call it), in the following form:<br>&gt; <br>&gt; #string(options) &quot;text&quot;<br>&gt; <br>&gt; for example:<br>&gt; <br>&gt; #string(escape: nil) &quot;^\d+&quot;<br>&gt; <br>&gt; #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;) &quot;<br>&gt;    $(username),<br>&gt;    Is it 1358 yet?<br>&gt; &lt;EOF&gt;&quot;<br>&gt; <br>&gt; It is possible to add many options list above, and you can add more options over time without breaking code.<br>&gt; <br>&gt; #string(<br>&gt;     escape: Character? = &quot;\\&quot;,    <br>&gt;     end: String? = nil,   <br>&gt;     skipEnclosureNewline: Bool = true,    <br>&gt;     skipLeadingIndent: Bool = true, <br>&gt;     skipAllIndent: Bool = false,<br>&gt;     newline: String? = nil<br>&gt; )<br>&gt; <br>&gt; for 1. &amp; 2., escape option to replace escape char, pass nil will disable escape.<br>&gt; <br>&gt; for 3., end option for end-of-string mark, pass nil will disable multi-line processing.<br>&gt; <br>&gt; for 4., skipEnclosureNewline will skip newline if it is the first or last char of the string.<br>&gt; <br>&gt; for 5., skipLeadingIndent will skip leading indent, leading indent is the leading white-spaces of first line of multi-line string.<br>&gt; <br>&gt; for 5., skipAllIndent will skip all indent, this will override skipLeadingIndent.<br>&gt; <br>&gt; for 6., newline option to replace newline char in multi-line string, pass nil will disable the replacement (as-is in the source).<br>&gt; <br>&gt; But there are one problem remain, as you can see, the #string with options will become very long; I don&#39;t think it is a pleasure to use such expression except for one time literal. To fix the problem, I propose yet another process instruction:<br>&gt; <br>&gt; #let #rex = #string(escape: nil)<br>&gt; #let #mail = #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;)<br>&gt; <br>&gt; Now you can write the string as:<br>&gt; <br>&gt; #rex &quot;^\d+&quot;<br>&gt; <br>&gt; #mail &quot;<br>&gt;    $(username),<br>&gt;    Is it 1358 yet?<br>&gt; &lt;EOF&gt;&quot;<br>&gt; <br>&gt; #let should be able to be used with other # process instruction as well, for example, #available, among other things.<br>&gt; <br>&gt; What do you think?<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>Alternate proposal for multi-line string literial</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 24, 2016 at 10:00:00am</p></header><div class="content"><p>https://doc.perl6.org/language/quoting<br></p><p>&gt; On Mar 24, 2016, at 9:23 AM, Patrick Gili &lt;gili.patrick.r at gili-labs.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m more in favor of Perl6 stye string literals, in general.<br>&gt; <br>&gt; -Patrick<br>&gt; <br>&gt;&gt; On Mar 23, 2016, at 12:49 AM, Steve K. Chiu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I am new to swift-evolution list, here is my draft proposal for the multi-line string literal problem.<br>&gt;&gt; The idea had been discussed in the list before, but it seems there are no real solution to many of the string literal problem.<br>&gt;&gt; Let&#39;s first define what are the problem with string literal:<br>&gt;&gt; <br>&gt;&gt; 1. should be able to disable escape char<br>&gt;&gt; <br>&gt;&gt; 2. or better, able to replace escape char with user defined char<br>&gt;&gt; <br>&gt;&gt; 3. should be able to write multi-line string literal, and is copy-paste friendly<br>&gt;&gt; <br>&gt;&gt; 4. for multi-line string, should be  able to remove first and last newline char, so user can write string in block<br>&gt;&gt; <br>&gt;&gt; 5. for multi-line string, should be  able to remove leading indent, or remove all indent<br>&gt;&gt; <br>&gt;&gt; 6. for multi-line string, should be  able to replace newline with user defined string (&quot;\r\n&quot;, &quot;\r&quot;, &quot;\r&quot;, or simply &quot; &quot;)<br>&gt;&gt; <br>&gt;&gt; 7. should be able to add feature over time, without breaking existing code<br>&gt;&gt; <br>&gt;&gt; My proposal to the above problem is to introduce new &#39;process instruction&#39; (not sure how to call it), in the following form:<br>&gt;&gt; <br>&gt;&gt; #string(options) &quot;text&quot;<br>&gt;&gt; <br>&gt;&gt; for example:<br>&gt;&gt; <br>&gt;&gt; #string(escape: nil) &quot;^\d+&quot;<br>&gt;&gt; <br>&gt;&gt; #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;) &quot;<br>&gt;&gt;   $(username),<br>&gt;&gt;   Is it 1358 yet?<br>&gt;&gt; &lt;EOF&gt;&quot;<br>&gt;&gt; <br>&gt;&gt; It is possible to add many options list above, and you can add more options over time without breaking code.<br>&gt;&gt; <br>&gt;&gt; #string(<br>&gt;&gt;    escape: Character? = &quot;\\&quot;,    <br>&gt;&gt;    end: String? = nil,   <br>&gt;&gt;    skipEnclosureNewline: Bool = true,    <br>&gt;&gt;    skipLeadingIndent: Bool = true, <br>&gt;&gt;    skipAllIndent: Bool = false,<br>&gt;&gt;    newline: String? = nil<br>&gt;&gt; )<br>&gt;&gt; <br>&gt;&gt; for 1. &amp; 2., escape option to replace escape char, pass nil will disable escape.<br>&gt;&gt; <br>&gt;&gt; for 3., end option for end-of-string mark, pass nil will disable multi-line processing.<br>&gt;&gt; <br>&gt;&gt; for 4., skipEnclosureNewline will skip newline if it is the first or last char of the string.<br>&gt;&gt; <br>&gt;&gt; for 5., skipLeadingIndent will skip leading indent, leading indent is the leading white-spaces of first line of multi-line string.<br>&gt;&gt; <br>&gt;&gt; for 5., skipAllIndent will skip all indent, this will override skipLeadingIndent.<br>&gt;&gt; <br>&gt;&gt; for 6., newline option to replace newline char in multi-line string, pass nil will disable the replacement (as-is in the source).<br>&gt;&gt; <br>&gt;&gt; But there are one problem remain, as you can see, the #string with options will become very long; I don&#39;t think it is a pleasure to use such expression except for one time literal. To fix the problem, I propose yet another process instruction:<br>&gt;&gt; <br>&gt;&gt; #let #rex = #string(escape: nil)<br>&gt;&gt; #let #mail = #string(escape: &quot;$&quot;, end: &quot;&lt;EOF&gt;&quot;)<br>&gt;&gt; <br>&gt;&gt; Now you can write the string as:<br>&gt;&gt; <br>&gt;&gt; #rex &quot;^\d+&quot;<br>&gt;&gt; <br>&gt;&gt; #mail &quot;<br>&gt;&gt;   $(username),<br>&gt;&gt;   Is it 1358 yet?<br>&gt;&gt; &lt;EOF&gt;&quot;<br>&gt;&gt; <br>&gt;&gt; #let should be able to be used with other # process instruction as well, for example, #available, among other things.<br>&gt;&gt; <br>&gt;&gt; What do you think?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
