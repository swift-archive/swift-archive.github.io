<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1ca49cd3335ea901615e52fc87e71372?s=50"></div><header><strong>Import Conditionals</strong> from <string>Sean Alling</string> &lt;allings at icloud.com&gt;<p>October 17, 2016 at 06:00:00pm</p></header><div class="content"><p>Description<br></p><p>In an effort to both (1) reduce boilerplate code, and (2) promote cross-platform reusability I propose that we implement the following Import Conditional Operators: <br></p><p>`||` and `&amp;&amp;`<br></p><p>Currently, import conditionals must be implemented like so:<br></p><p>```<br>#if os(Linux) || os(FreeBSD)<br>	import Glibc<br>#else<br>	import Darwin<br>#endif<br>```<br></p><p>With import conditional operators this would be condensed to:<br></p><p>```<br>import Glibc || Darwin<br>```<br></p><p>The first library/framework (Glibc) would be imported if found and the the second (Darwin) only in the event the first should fail.<br></p><p>Other Caveats:<br></p><p>(A) —  we could limit this to one conditional operator per import line OR we could implement order of operations. Obviously, there are tradeoffs of both that we should discuss.<br></p><p>(B) — if-conditional statements currently explicitly show the import conditions (i.e., os(Linux) || os(FreeBSD)) this would be a detriment to this new feature. I would argue that the reduction of boilerplate code would in itself be worth this abstraction.<br></p><p><br>--<br>Sean Alling<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/eff59bca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>Import Conditionals</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>October 17, 2016 at 11:00:00pm</p></header><div class="content"><p>I believe there was a draft to merge all the &quot;Libc&quot; modules; let me see if<br>I can find that.<br></p><p>On Mon, Oct 17, 2016 at 3:06 PM Sean Alling via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; *Description*<br>&gt;<br>&gt; In an effort to both (1) reduce boilerplate code, and (2) promote<br>&gt; cross-platform reusability I propose that we implement the following *Import<br>&gt; Conditional Operators*:<br>&gt;<br>&gt; *`||` *and `*&amp;&amp;`*<br>&gt;<br>&gt; Currently, import conditionals must be implemented like so:<br>&gt;<br>&gt; ```<br>&gt; #if os(Linux) || os(FreeBSD)<br>&gt; import Glibc<br>&gt; #else<br>&gt; import Darwin<br>&gt; #endif<br>&gt; ```<br>&gt;<br>&gt; With *import conditional operators* this would be condensed to:<br>&gt;<br>&gt; ```<br>&gt; import Glibc || Darwin<br>&gt; ```<br>&gt;<br>&gt; The first library/framework (Glibc) would be imported if found and the the<br>&gt; second (Darwin) only in the event the first should fail.<br>&gt;<br>&gt; *Other Caveats:*<br>&gt;<br>&gt; *(A) —  *we could limit this to one conditional operator per import line<br>&gt; OR we could implement order of operations. Obviously, there are tradeoffs<br>&gt; of both that we should discuss.<br>&gt;<br>&gt; *(B) —* if-conditional statements currently explicitly show the import<br>&gt; conditions (i.e., os(Linux) || os(FreeBSD)) this would be a detriment to<br>&gt; this new feature. I would argue that the reduction of boilerplate code<br>&gt; would in itself be worth this abstraction.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Sean Alling<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/d35009fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1ca49cd3335ea901615e52fc87e71372?s=50"></div><header><strong>Import Conditionals</strong> from <string>Sean Alling</string> &lt;allings at icloud.com&gt;<p>October 17, 2016 at 07:00:00pm</p></header><div class="content"><p>Yeah I saw that thread. I think (a) this is a better solution and (b) this is applicable for use cases other than specifically Glibc/Darwin.<br></p><p>-Sean<br></p><p>Sent from my iPhone<br></p><p>&gt; On Oct 17, 2016, at 19:01, Saagar Jha &lt;saagar at saagarjha.com&gt; wrote:<br>&gt; <br>&gt; I believe there was a draft to merge all the &quot;Libc&quot; modules; let me see if I can find that.<br>&gt; <br>&gt;&gt; On Mon, Oct 17, 2016 at 3:06 PM Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Description<br>&gt;&gt; <br>&gt;&gt; In an effort to both (1) reduce boilerplate code, and (2) promote cross-platform reusability I propose that we implement the following Import Conditional Operators: <br>&gt;&gt; <br>&gt;&gt; `||` and `&amp;&amp;`<br>&gt;&gt; <br>&gt;&gt; Currently, import conditionals must be implemented like so:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; #if os(Linux) || os(FreeBSD)<br>&gt;&gt; 	import Glibc<br>&gt;&gt; #else<br>&gt;&gt; 	import Darwin<br>&gt;&gt; #endif<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; With import conditional operators this would be condensed to:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; import Glibc || Darwin<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; The first library/framework (Glibc) would be imported if found and the the second (Darwin) only in the event the first should fail.<br>&gt;&gt; <br>&gt;&gt; Other Caveats:<br>&gt;&gt; <br>&gt;&gt; (A) —  we could limit this to one conditional operator per import line OR we could implement order of operations. Obviously, there are tradeoffs of both that we should discuss.<br>&gt;&gt; <br>&gt;&gt; (B) — if-conditional statements currently explicitly show the import conditions (i.e., os(Linux) || os(FreeBSD)) this would be a detriment to this new feature. I would argue that the reduction of boilerplate code would in itself be worth this abstraction.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Sean Alling<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/25a26a74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Import Conditionals</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>October 18, 2016 at 01:00:00am</p></header><div class="content"><p>I disagree. What about when you need to disambiguate?<br></p><p>Currently you’d need to use ‘Darwin.connect(...)’ or ‘Glibc.connect(…)’. Merging them both in to one ‘Libc’ module would make that much easier.<br></p><p>&gt; On 18 Oct 2016, at 01:07, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yeah I saw that thread. I think (a) this is a better solution and (b) this is applicable for use cases other than specifically Glibc/Darwin.<br>&gt; <br>&gt; -Sean<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Oct 17, 2016, at 19:01, Saagar Jha &lt;saagar at saagarjha.com &lt;mailto:saagar at saagarjha.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I believe there was a draft to merge all the &quot;Libc&quot; modules; let me see if I can find that.<br>&gt;&gt; <br>&gt;&gt; On Mon, Oct 17, 2016 at 3:06 PM Sean Alling via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Description<br>&gt;&gt; <br>&gt;&gt; In an effort to both (1) reduce boilerplate code, and (2) promote cross-platform reusability I propose that we implement the following Import Conditional Operators: <br>&gt;&gt; <br>&gt;&gt; `||` and `&amp;&amp;`<br>&gt;&gt; <br>&gt;&gt; Currently, import conditionals must be implemented like so:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; #if os(Linux) || os(FreeBSD)<br>&gt;&gt; 	import Glibc<br>&gt;&gt; #else<br>&gt;&gt; 	import Darwin<br>&gt;&gt; #endif<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; With import conditional operators this would be condensed to:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; import Glibc || Darwin<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; The first library/framework (Glibc) would be imported if found and the the second (Darwin) only in the event the first should fail.<br>&gt;&gt; <br>&gt;&gt; Other Caveats:<br>&gt;&gt; <br>&gt;&gt; (A) —  we could limit this to one conditional operator per import line OR we could implement order of operations. Obviously, there are tradeoffs of both that we should discuss.<br>&gt;&gt; <br>&gt;&gt; (B) — if-conditional statements currently explicitly show the import conditions (i.e., os(Linux) || os(FreeBSD)) this would be a detriment to this new feature. I would argue that the reduction of boilerplate code would in itself be worth this abstraction.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Sean Alling<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/ce409b75/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c198ffcf0853e6011f58fdcdd32a111?s=50"></div><header><strong>Import Conditionals</strong> from <string>Benjamin Spratling</string> &lt;bspratling at mac.com&gt;<p>October 18, 2016 at 01:00:00am</p></header><div class="content"><p>Howdy,<br></p><p>There is already an accepted but not implemented proposal to determine whether a module can be imported and conditionally compile accordingly.<br>https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md<br></p><p>While the accepted change is certainly not as compact as your notation, it has the advantage that it supports more functionality.  I could, for example, include code in a file for UIKit, Cocoa, WatchKit and ostensibly some Linux UI framework depending on my target platform.  If my functionality is intended around adding a single consistent feature to a Type in each module, then this is how I want to organize my code.<br></p><p>Besides, “||” is so JavaScript.  In Swift it would be “??”, and it would potentially need to chain because there are more than 2 supported platforms.<br></p><p>Finally, I don’t see how you handle failure to import a module.  Does compile fail, or do you provide your own implementation of the desired functionality?  When Apple adds a module on one platform but not on another, then I might need to write my own implementation for platforms on which it is missing, but depend on system integrated performance on the platforms they provide it for.  “canimport” provides for either using other existing # patterns, but your proposal does not.<br></p><p>So I recommend checking out the already-accepted proposal.  But if you still need the syntax to get smaller, at least move to “??” so it looks like Swift instead of some other language.<br></p><p>-Ben<br></p><p><br>&gt; On Oct 17, 2016, at 5:05 PM, Sean Alling via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Description<br>&gt; <br>&gt; In an effort to both (1) reduce boilerplate code, and (2) promote cross-platform reusability I propose that we implement the following Import Conditional Operators: <br>&gt; <br>&gt; `||` and `&amp;&amp;`<br>&gt; <br>&gt; Currently, import conditionals must be implemented like so:<br>&gt; <br>&gt; ```<br>&gt; #if os(Linux) || os(FreeBSD)<br>&gt; 	import Glibc<br>&gt; #else<br>&gt; 	import Darwin<br>&gt; #endif<br>&gt; ```<br>&gt; <br>&gt; With import conditional operators this would be condensed to:<br>&gt; <br>&gt; ```<br>&gt; import Glibc || Darwin<br>&gt; ```<br>&gt; <br>&gt; The first library/framework (Glibc) would be imported if found and the the second (Darwin) only in the event the first should fail.<br>&gt; <br>&gt; Other Caveats:<br>&gt; <br>&gt; (A) —  we could limit this to one conditional operator per import line OR we could implement order of operations. Obviously, there are tradeoffs of both that we should discuss.<br>&gt; <br>&gt; (B) — if-conditional statements currently explicitly show the import conditions (i.e., os(Linux) || os(FreeBSD)) this would be a detriment to this new feature. I would argue that the reduction of boilerplate code would in itself be worth this abstraction.<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Sean Alling<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/0c902cff/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
