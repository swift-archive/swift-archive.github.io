<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June  1, 2016 at 09:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br></p><p>Hello Swift Community,<br></p><p>The review of SE-0095: &quot;Replace protocol&lt;P1,P2&gt; syntax with Any&lt;P1,P2&gt;&quot; ran from May 24…30, 2016. The proposal is returned with revision requested - ideally the revised proposal will be included in Swift 3.<br></p><p>There was an incredible amount of feedback from the community, continuing even today.  The principle problem identified by community about the proposal is that &quot;Any&lt;T1, T2&gt;” implies very strongly an “any of T1 OR T2” relationship (aka disjunction) and not “any type conforming to T1 AND T2” relationship (aka conjunction).  There was also some related discussion as to how the “Any&lt;&gt;” syntax aligns with future generalized existential syntax, much discussion as to whether it should be spelled Any&lt;&gt; or any&lt;&gt;, and some discussion about &quot;angle bracket blindness&quot;.<br></p><p>The core team extensively discussed the feedback and considered many different possible paths forward.  The conclusion of this is that it recommends that SE-0095 be revised into a fairly different proposal, one that introduces a new infix “&amp;” type operator for representing protocol and other type compositions.  Instead of:<br></p><p>	func f(a : protocol&lt;A, B&gt;) {}<br>	func g&lt;T : A&gt;(x : T) where T : B {}    or   func g&lt;T : protocol&lt;A, B&gt;&gt;(x : T) {}<br></p><p>You would instead write:<br></p><p>	func f(a : A &amp; B) {}<br>	func g&lt;T : A &amp; B&gt;(x : T) {}<br></p><p>The degenerate case of protocol&lt;&gt; needs an answer, but only for the definition of the Any typealias in the standard library, so it can be left out of the proposal.<br></p><p>The core team feels that this is an elegant solution for Swift 3 that conveys exactly the right intent.  When generalized existentials are introduced, an elaborated syntax can be introduced to generalize this, e.g. &quot;Any&lt;A &amp; B where … &gt;” or “(T : A &amp; B where …)” or whatever else makes sense in context of its design.<br></p><p>The principle concern with this is that having an “&amp;&quot; operator for generic constraints leads the question of whether the language should introduce an &quot;|&quot; operator to represent disjunctions in type constraints (something that the type system cannot and should not support).  This is a topic that the C++ committee grappled with in its discussions of C++ concepts.  That said, the core team feels that “&amp;” directly expresses the relationship that we want, that “|” can be addressed in the “commonly rejected proposals&quot; list, and that other proposals for an infix operator (like +) skirt this issue but are strictly worse at communicating intent in code.<br></p><p>Many thanks to Adrian Zubarev, Austin Zheng for driving this discussion!<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  1, 2016 at 09:00:00pm</p></header><div class="content"><p>This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br></p><p>One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br></p><p>Austin<br></p><p>&gt; On Jun 1, 2016, at 9:47 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; Hello Swift Community,<br>&gt; <br>&gt; The review of SE-0095: &quot;Replace protocol&lt;P1,P2&gt; syntax with Any&lt;P1,P2&gt;&quot; ran from May 24…30, 2016. The proposal is returned with revision requested - ideally the revised proposal will be included in Swift 3.<br>&gt; <br>&gt; There was an incredible amount of feedback from the community, continuing even today.  The principle problem identified by community about the proposal is that &quot;Any&lt;T1, T2&gt;” implies very strongly an “any of T1 OR T2” relationship (aka disjunction) and not “any type conforming to T1 AND T2” relationship (aka conjunction).  There was also some related discussion as to how the “Any&lt;&gt;” syntax aligns with future generalized existential syntax, much discussion as to whether it should be spelled Any&lt;&gt; or any&lt;&gt;, and some discussion about &quot;angle bracket blindness&quot;.<br>&gt; <br>&gt; The core team extensively discussed the feedback and considered many different possible paths forward.  The conclusion of this is that it recommends that SE-0095 be revised into a fairly different proposal, one that introduces a new infix “&amp;” type operator for representing protocol and other type compositions.  Instead of:<br>&gt; <br>&gt; 	func f(a : protocol&lt;A, B&gt;) {}<br>&gt; 	func g&lt;T : A&gt;(x : T) where T : B {}    or   func g&lt;T : protocol&lt;A, B&gt;&gt;(x : T) {}<br>&gt; <br>&gt; You would instead write:<br>&gt; <br>&gt; 	func f(a : A &amp; B) {}<br>&gt; 	func g&lt;T : A &amp; B&gt;(x : T) {}<br>&gt; <br>&gt; The degenerate case of protocol&lt;&gt; needs an answer, but only for the definition of the Any typealias in the standard library, so it can be left out of the proposal.<br>&gt; <br>&gt; The core team feels that this is an elegant solution for Swift 3 that conveys exactly the right intent.  When generalized existentials are introduced, an elaborated syntax can be introduced to generalize this, e.g. &quot;Any&lt;A &amp; B where … &gt;” or “(T : A &amp; B where …)” or whatever else makes sense in context of its design.<br>&gt; <br>&gt; The principle concern with this is that having an “&amp;&quot; operator for generic constraints leads the question of whether the language should introduce an &quot;|&quot; operator to represent disjunctions in type constraints (something that the type system cannot and should not support).  This is a topic that the C++ committee grappled with in its discussions of C++ concepts.  That said, the core team feels that “&amp;” directly expresses the relationship that we want, that “|” can be addressed in the “commonly rejected proposals&quot; list, and that other proposals for an infix operator (like +) skirt this issue but are strictly worse at communicating intent in code.<br>&gt; <br>&gt; Many thanks to Adrian Zubarev, Austin Zheng for driving this discussion!<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June  1, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt; <br>&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt; <br>&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br></p><p>Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  1, 2016 at 10:00:00pm</p></header><div class="content"><p>Excellent.<br></p><p>I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md&gt;<br></p><p>Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br></p><p>My reasons:<br></p><p>- Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br></p><p>- I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br></p><p>- I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br></p><p>Best,<br>Austin<br></p><p>&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt; <br>&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt; <br>&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/31b1eb60/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  2, 2016 at 01:00:00am</p></header><div class="content"><p>On Thu, Jun 2, 2016 at 12:42 AM, Austin Zheng via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Excellent.<br>&gt;<br>&gt; I put together a PR with a revised proposal containing the core team&#39;s<br>&gt; recommended approach. If anyone is curious they can see it here:<br>&gt; https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt;<br>&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with<br>&gt; my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39;<br>&gt; separators in lieu of commas are a good idea, but I would still prefer the<br>&gt; types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt;<br>&gt; My reasons:<br>&gt;<br>&gt; - Jordan Rose brought up a good point in one of the discussion threads<br>&gt; today: a resilience goal is to allow a library to add an associated type to<br>&gt; a protocol that had none and not have it break user code. If this is true<br>&gt; whatever syntax is used for existentials in Swift 3 should be a valid<br>&gt; subset of the generalized existential syntax used to describe protocol<br>&gt; compositions with no associated types.<br>&gt;<br>&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential<br>&gt; types eventually than have it only be used for (e.g.) existential types<br>&gt; with `where` constraints, or allowing two different representations of the<br>&gt; same existential type (one with Any, and one without).<br>&gt;<br>&gt; - I think any generalized existential syntax without delimiting markers<br>&gt; (like angle braces) is harder to read than syntax with such markers, so I<br>&gt; would prefer a design with those markers.<br>&gt;<br></p><p>Agree with your reasons, but I&#39;m still uncomfortable that things inside the<br>angle brackets would behave differently here than elsewhere. Would it help<br>to make a keyword out of `any` for existentials? Then you could have this:<br></p><p>```<br>func foo(value: any X &amp; Y)<br>```<br></p><p>Best,<br>&gt; Austin<br>&gt;<br>&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;<br>&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2<br>&gt; proposal with this feedback taken into account so we can continue moving<br>&gt; things along.<br>&gt;<br>&gt; One quick question - is making whatever syntax is chosen for Swift 3<br>&gt; &quot;forward-compatible&quot; with a future generalized existential feature a<br>&gt; concern?<br>&gt;<br>&gt;<br>&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be<br>&gt; accepted going forward, as sugar for the more general feature that is yet<br>&gt; to be designed.<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/1526c48b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  1, 2016 at 11:00:00pm</p></header><div class="content"><p>I definitely agree with your concern about angle brackets being used outside a generic context. However, I think I&#39;d prefer the core team syntax (unadorned &quot;P1 &amp; P2&quot;) if delimiters are out of the question for now.<br></p><p>One option might be to use parentheses: Any(X &amp; Y &amp; Z), or square brackets: Any[X &amp; Y &amp; Z]. The former might look too much like a function call, although if we&#39;re going to call &#39;&amp;&#39; a type infix operator we might as well stretch the analogy as far as it&#39;ll go. I actually like the second approach: you can&#39;t define static subscripts (and you wouldn&#39;t be able to define them on `Any` even if you could), so it wouldn&#39;t occupy an already-extant syntactic slot. Either would give existential types their own characteristic syntax, avoiding the angle brackets issue you brought up.<br></p><p>Austin<br></p><p>&gt; On Jun 1, 2016, at 11:39 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Thu, Jun 2, 2016 at 12:42 AM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Excellent.<br>&gt; <br>&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md&gt;<br>&gt; <br>&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt; <br>&gt; My reasons:<br>&gt; <br>&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br>&gt; <br>&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br>&gt; <br>&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br>&gt; <br>&gt; Agree with your reasons, but I&#39;m still uncomfortable that things inside the angle brackets would behave differently here than elsewhere. Would it help to make a keyword out of `any` for existentials? Then you could have this:<br>&gt; <br>&gt; ```<br>&gt; func foo(value: any X &amp; Y)<br>&gt; ```<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt; <br>&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/c34c9e5c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June  2, 2016 at 01:00:00pm</p></header><div class="content"><p>I never had any problems with commas, as I always read them as conjunctive clauses, but I understand that an explicit conjunction may be less confusing. Personally, I’d prefer if there was no special syntax (aka Any&lt;&gt;) for existential types, whether generalised or not. I fail to see a principal difference between an existential type vardecl and a non-existential type vardecl: both can be described as sets of factual types, with non-existential declarations trivially being sets of cardinality one. Under this perspective, adopting different syntax for these cases feels like an idiosyncratic decision to me. I also disagree that Any&lt;&gt; makes existential types more readable, on contrary, they introduce visual clutter. A considerably complex existential definition could always be hidden behind a typealias.<br></p><p>Ideally, I’d like ALL type references in variable declarations be treated as existentials: the variable is declared as belonging to a certain set of factual types (in most cases this will trivially be a single factual type). IMO, this would result in a simple and concise system. It would also make type-erased wrappers unnecessary, simplifying the language. <br></p><p>Best, <br></p><p> Taras<br></p><p><br>&gt; On 02 Jun 2016, at 07:42, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Excellent.<br>&gt; <br>&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md&gt;<br>&gt; <br>&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt; <br>&gt; My reasons:<br>&gt; <br>&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br>&gt; <br>&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br>&gt; <br>&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt; <br>&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/02768edf/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June  2, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 2, 2016, at 12:42 AM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Excellent.<br>&gt; <br>&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br></p><p>Thanks for writing up the revision Austin, especially since it does not reflect your own opinion.<br></p><p>My opinion is that we should view these as type expressions.  We don&#39;t require any kind of delimiters around value expressions, allowing optional parentheses for clarification and as a matter of style.  I don&#39;t see any reason to treat type expressions any different than that syntactically.  <br></p><p>&gt; <br>&gt; My reasons:<br>&gt; <br>&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br>&gt; <br>&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br>&gt; <br>&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt; <br>&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/03547119/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Am 02.06.2016 um 07:42 schrieb Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Excellent.<br>&gt; <br>&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br></p><p>I&#39;m very happy with using `&amp;` as I find this very readable.<br>I would prefer not having to wrap them into `Any&lt;&gt;`. While I can image `Any&lt;&gt;`, or rather `any&lt;&gt;`, for existentials with `where` clauses, I would absolutely hate having to wrap all existentials into that which would introduce a lot of noise. <br></p><p>&gt; <br>&gt; My reasons:<br>&gt; <br>&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br></p><p>If `P` is an existential there is no problem either, isn&#39;t it? No need to require `Any&lt;P&gt;`. <br></p><p><br></p><p>&gt; <br>&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br></p><p>Far too much noise!<br></p><p><br>&gt; <br>&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br></p><p>I think markers are only needed if a `where` clause is present and probably not even then.<br></p><p>-Thorsten <br></p><p><br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt; <br>&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/a38cdb99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 2, 2016, at 10:14 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Am 02.06.2016 um 07:42 schrieb Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; Excellent.<br>&gt;&gt; <br>&gt;&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md&gt;<br>&gt;&gt; <br>&gt;&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt; <br>&gt; I&#39;m very happy with using `&amp;` as I find this very readable.<br>&gt; I would prefer not having to wrap them into `Any&lt;&gt;`. While I can image `Any&lt;&gt;`, or rather `any&lt;&gt;`, for existentials with `where` clauses, I would absolutely hate having to wrap all existentials into that which would introduce a lot of noise. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; My reasons:<br>&gt;&gt; <br>&gt;&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br>&gt; <br>&gt; If `P` is an existential there is no problem either, isn&#39;t it? No need to require `Any&lt;P&gt;`. <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br>&gt; <br>&gt; Far too much noise!<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br>&gt; <br>&gt; I think markers are only needed if a `where` clause is present and probably not even then.<br></p><p>The only reason to require them generally is if they are required for disambiguation in specific syntactic positions and it would be too confusing to remember where parentheses are required.  If that isn’t the case they should not be required.  It would be interesting to hear from someone closer to the grammar about whether an enclosing syntactic context would ever be required for disambiguation or not.<br></p><p>If we don’t require them, parentheses can still be used for clarity when desired.<br></p><p>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/bc1b49d8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  2, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;m sure the list is getting sick of me making this point over and<br>over again :), so I&#39;ll only do it one more time: I find the lack of<br>delimiters far worse in terms of readability for type expressions of<br>any appreciable complexity than any number of `Any&lt;&gt;` tokens. In fact,<br>I&#39;m a bit surprised the core team decided to go in this direction,<br>given their stance on parentheses for function types, and replacing<br>operators like &quot;&amp;&amp;&quot; or &quot;||&quot; with &quot;and&quot; or &quot;or&quot;. I respect their<br>decision, though.<br></p><p>On 6/2/16, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;&gt; Am 02.06.2016 um 07:42 schrieb Austin Zheng via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; Excellent.<br>&gt;&gt;<br>&gt;&gt; I put together a PR with a revised proposal containing the core team&#39;s<br>&gt;&gt; recommended approach. If anyone is curious they can see it here:<br>&gt;&gt; https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt;&gt;<br>&gt;&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with<br>&gt;&gt; my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39;<br>&gt;&gt; separators in lieu of commas are a good idea, but I would still prefer the<br>&gt;&gt; types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt;<br>&gt; I&#39;m very happy with using `&amp;` as I find this very readable.<br>&gt; I would prefer not having to wrap them into `Any&lt;&gt;`. While I can image<br>&gt; `Any&lt;&gt;`, or rather `any&lt;&gt;`, for existentials with `where` clauses, I would<br>&gt; absolutely hate having to wrap all existentials into that which would<br>&gt; introduce a lot of noise.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; My reasons:<br>&gt;&gt;<br>&gt;&gt; - Jordan Rose brought up a good point in one of the discussion threads<br>&gt;&gt; today: a resilience goal is to allow a library to add an associated type<br>&gt;&gt; to a protocol that had none and not have it break user code. If this is<br>&gt;&gt; true whatever syntax is used for existentials in Swift 3 should be a valid<br>&gt;&gt; subset of the generalized existential syntax used to describe protocol<br>&gt;&gt; compositions with no associated types.<br>&gt;<br>&gt; If `P` is an existential there is no problem either, isn&#39;t it? No need to<br>&gt; require `Any&lt;P&gt;`.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential<br>&gt;&gt; types eventually than have it only be used for (e.g.) existential types<br>&gt;&gt; with `where` constraints, or allowing two different representations of the<br>&gt;&gt; same existential type (one with Any, and one without).<br>&gt;<br>&gt; Far too much noise!<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; - I think any generalized existential syntax without delimiting markers<br>&gt;&gt; (like angle braces) is harder to read than syntax with such markers, so I<br>&gt;&gt; would prefer a design with those markers.<br>&gt;<br>&gt; I think markers are only needed if a `where` clause is present and probably<br>&gt; not even then.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a<br>&gt;&gt;&gt;&gt; v2 proposal with this feedback taken into account so we can continue<br>&gt;&gt;&gt;&gt; moving things along.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3<br>&gt;&gt;&gt;&gt; &quot;forward-compatible&quot; with a future generalized existential feature a<br>&gt;&gt;&gt;&gt; concern?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be<br>&gt;&gt;&gt; accepted going forward, as sugar for the more general feature that is yet<br>&gt;&gt;&gt; to be designed.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June  4, 2016 at 09:00:00am</p></header><div class="content"><p>I like the decision of the core team to replace protocol&lt;…&gt; with something like &amp; instead. This gives us room to rethink Any&lt;…&gt; or come up with even better mechanism for existentials. :)<br></p><p>There are still a few things to consider:<br></p><p>AnyObject and AnyClass:<br>I’d prefer to drop the current AnyClass and rename AnyObject to AnyClass, where the current AnyClass would be used as AnyClass.Type.<br>AnyClass &amp; SomeProtocol looks better to me than AnyObject &amp; SomeProtocol.<br>What do you think?<br>Would nesting for class-requirement work the same as we described before?<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 2. Juni 2016 um 17:25:54, Austin Zheng via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>I&#39;m sure the list is getting sick of me making this point over and<br>over again :), so I&#39;ll only do it one more time: I find the lack of<br>delimiters far worse in terms of readability for type expressions of<br>any appreciable complexity than any number of `Any&lt;&gt;` tokens. In fact,<br>I&#39;m a bit surprised the core team decided to go in this direction,<br>given their stance on parentheses for function types, and replacing<br>operators like &quot;&amp;&amp;&quot; or &quot;||&quot; with &quot;and&quot; or &quot;or&quot;. I respect their<br>decision, though.<br></p><p>On 6/2/16, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;&gt; Am 02.06.2016 um 07:42 schrieb Austin Zheng via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; Excellent.<br>&gt;&gt;<br>&gt;&gt; I put together a PR with a revised proposal containing the core team&#39;s<br>&gt;&gt; recommended approach. If anyone is curious they can see it here:<br>&gt;&gt; https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt;&gt;<br>&gt;&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with<br>&gt;&gt; my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39;<br>&gt;&gt; separators in lieu of commas are a good idea, but I would still prefer the<br>&gt;&gt; types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt;<br>&gt; I&#39;m very happy with using `&amp;` as I find this very readable.<br>&gt; I would prefer not having to wrap them into `Any&lt;&gt;`. While I can image<br>&gt; `Any&lt;&gt;`, or rather `any&lt;&gt;`, for existentials with `where` clauses, I would<br>&gt; absolutely hate having to wrap all existentials into that which would<br>&gt; introduce a lot of noise.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; My reasons:<br>&gt;&gt;<br>&gt;&gt; - Jordan Rose brought up a good point in one of the discussion threads<br>&gt;&gt; today: a resilience goal is to allow a library to add an associated type<br>&gt;&gt; to a protocol that had none and not have it break user code. If this is<br>&gt;&gt; true whatever syntax is used for existentials in Swift 3 should be a valid<br>&gt;&gt; subset of the generalized existential syntax used to describe protocol<br>&gt;&gt; compositions with no associated types.<br>&gt;<br>&gt; If `P` is an existential there is no problem either, isn&#39;t it? No need to<br>&gt; require `Any&lt;P&gt;`.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential<br>&gt;&gt; types eventually than have it only be used for (e.g.) existential types<br>&gt;&gt; with `where` constraints, or allowing two different representations of the<br>&gt;&gt; same existential type (one with Any, and one without).<br>&gt;<br>&gt; Far too much noise!<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; - I think any generalized existential syntax without delimiting markers<br>&gt;&gt; (like angle braces) is harder to read than syntax with such markers, so I<br>&gt;&gt; would prefer a design with those markers.<br>&gt;<br>&gt; I think markers are only needed if a `where` clause is present and probably<br>&gt; not even then.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a<br>&gt;&gt;&gt;&gt; v2 proposal with this feedback taken into account so we can continue<br>&gt;&gt;&gt;&gt; moving things along.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3<br>&gt;&gt;&gt;&gt; &quot;forward-compatible&quot; with a future generalized existential feature a<br>&gt;&gt;&gt;&gt; concern?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be<br>&gt;&gt;&gt; accepted going forward, as sugar for the more general feature that is yet<br>&gt;&gt;&gt; to be designed.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160604/fda797dd/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  7, 2016 at 05:00:00pm</p></header><div class="content"><p>Yep. I also remain against this syntax, primarily for reasons of learnability.<br></p><p>&gt; On Jun 2, 2016, at 08:25, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m sure the list is getting sick of me making this point over and<br>&gt; over again :), so I&#39;ll only do it one more time: I find the lack of<br>&gt; delimiters far worse in terms of readability for type expressions of<br>&gt; any appreciable complexity than any number of `Any&lt;&gt;` tokens. In fact,<br>&gt; I&#39;m a bit surprised the core team decided to go in this direction,<br>&gt; given their stance on parentheses for function types, and replacing<br>&gt; operators like &quot;&amp;&amp;&quot; or &quot;||&quot; with &quot;and&quot; or &quot;or&quot;. I respect their<br>&gt; decision, though.<br>&gt; <br>&gt; On 6/2/16, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 02.06.2016 um 07:42 schrieb Austin Zheng via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Excellent.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I put together a PR with a revised proposal containing the core team&#39;s<br>&gt;&gt;&gt; recommended approach. If anyone is curious they can see it here:<br>&gt;&gt;&gt; https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with<br>&gt;&gt;&gt; my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39;<br>&gt;&gt;&gt; separators in lieu of commas are a good idea, but I would still prefer the<br>&gt;&gt;&gt; types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt;&gt; <br>&gt;&gt; I&#39;m very happy with using `&amp;` as I find this very readable.<br>&gt;&gt; I would prefer not having to wrap them into `Any&lt;&gt;`. While I can image<br>&gt;&gt; `Any&lt;&gt;`, or rather `any&lt;&gt;`, for existentials with `where` clauses, I would<br>&gt;&gt; absolutely hate having to wrap all existentials into that which would<br>&gt;&gt; introduce a lot of noise.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My reasons:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Jordan Rose brought up a good point in one of the discussion threads<br>&gt;&gt;&gt; today: a resilience goal is to allow a library to add an associated type<br>&gt;&gt;&gt; to a protocol that had none and not have it break user code. If this is<br>&gt;&gt;&gt; true whatever syntax is used for existentials in Swift 3 should be a valid<br>&gt;&gt;&gt; subset of the generalized existential syntax used to describe protocol<br>&gt;&gt;&gt; compositions with no associated types.<br>&gt;&gt; <br>&gt;&gt; If `P` is an existential there is no problem either, isn&#39;t it? No need to<br>&gt;&gt; require `Any&lt;P&gt;`.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential<br>&gt;&gt;&gt; types eventually than have it only be used for (e.g.) existential types<br>&gt;&gt;&gt; with `where` constraints, or allowing two different representations of the<br>&gt;&gt;&gt; same existential type (one with Any, and one without).<br>&gt;&gt; <br>&gt;&gt; Far too much noise!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - I think any generalized existential syntax without delimiting markers<br>&gt;&gt;&gt; (like angle braces) is harder to read than syntax with such markers, so I<br>&gt;&gt;&gt; would prefer a design with those markers.<br>&gt;&gt; <br>&gt;&gt; I think markers are only needed if a `where` clause is present and probably<br>&gt;&gt; not even then.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a<br>&gt;&gt;&gt;&gt;&gt; v2 proposal with this feedback taken into account so we can continue<br>&gt;&gt;&gt;&gt;&gt; moving things along.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3<br>&gt;&gt;&gt;&gt;&gt; &quot;forward-compatible&quot; with a future generalized existential feature a<br>&gt;&gt;&gt;&gt;&gt; concern?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be<br>&gt;&gt;&gt;&gt; accepted going forward, as sugar for the more general feature that is yet<br>&gt;&gt;&gt;&gt; to be designed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 04:00:00pm</p></header><div class="content"><p>I noticed that the &quot;impacted&quot; section was not updated to the new syntax. Additionally it might be useful to show the impact on the grammar.<br>Regards<br>(From mobile)<br>&gt; On Jun 2, 2016, at 7:42 AM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Excellent.<br>&gt; <br>&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt; <br>&gt; My reasons:<br>&gt; <br>&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br>&gt; <br>&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br>&gt; <br>&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt; <br>&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/c2427642/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 10, 2016, at 4:20 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; I noticed that the &quot;impacted&quot; section was not updated to the new syntax.<br></p><p>apologies, I was looking at the last reference to Any, and it is indeed correct as it is. <br></p><p><br>as for the grammar, I guess it is just a matter of removing the reference to protocol&lt;&gt; and swapping in the new &amp; operator in composition types:<br>GRAMMAR OF A PROTOCOL COMPOSITION TYPE<br></p><p> &lt;&gt;protocol-composition-type → protocol­&lt;­protocol-identifier-list &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier-list&gt;­opt­&gt;­<br> &lt;&gt;protocol-identifier-list → protocol-identifier &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier&gt;­  protocol-identifier &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier&gt;­,­protocol-identifier-list &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier-list&gt;­<br> &lt;&gt;protocol-identifier → type-identifier &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type-identifier&gt;­<br>GRAMMAR OF A PROTOCOL COMPOSITION TYPE<br></p><p> &lt;&gt;protocol-composition-type → protocol-identifier-list &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier-list&gt;­<br> &lt;&gt;protocol-identifier-list → protocol-identifier &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier&gt;­  protocol-identifier &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier&gt;­&amp;­protocol-identifier-list &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/protocol-identifier-list&gt;­<br> &lt;&gt;protocol-identifier → type-identifier &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type-identifier&gt;­<br>In this form there is the problem of the degenerate case where protocol-identifier-list is empty which is required for Any.  The syntax I have been playing with for generalized existential would degenerate fine for covering this gap.<br></p><p>https://gist.github.com/lmihalkovic/8aa66542f5cc4592e967bade260477ef<br></p><p><br>&gt; Additionally it might be useful to show the impact on the grammar.<br>&gt; Regards<br>&gt; (From mobile)<br>&gt; On Jun 2, 2016, at 7:42 AM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Excellent.<br>&gt;&gt; <br>&gt;&gt; I put together a PR with a revised proposal containing the core team&#39;s recommended approach. If anyone is curious they can see it here: https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md &lt;https://github.com/austinzheng/swift-evolution/blob/ef6adbe0fe09bff6c44c6aa9d73ee407629235ce/proposals/0095-any-as-existential.md&gt;<br>&gt;&gt; <br>&gt;&gt; Since this is the de-facto second round discussion thread, I&#39;ll start with my personal opinion (which is *not* reflected in the PR): the &#39;&amp;&#39; separators in lieu of commas are a good idea, but I would still prefer the types to be wrapped in &quot;Any&lt;&gt;&quot;, at least when being used as existentials.<br>&gt;&gt; <br>&gt;&gt; My reasons:<br>&gt;&gt; <br>&gt;&gt; - Jordan Rose brought up a good point in one of the discussion threads today: a resilience goal is to allow a library to add an associated type to a protocol that had none and not have it break user code. If this is true whatever syntax is used for existentials in Swift 3 should be a valid subset of the generalized existential syntax used to describe protocol compositions with no associated types.<br>&gt;&gt; <br>&gt;&gt; - I would rather have &quot;Any&lt;&gt;&quot; be used consistently across all existential types eventually than have it only be used for (e.g.) existential types with `where` constraints, or allowing two different representations of the same existential type (one with Any, and one without).<br>&gt;&gt; <br>&gt;&gt; - I think any generalized existential syntax without delimiting markers (like angle braces) is harder to read than syntax with such markers, so I would prefer a design with those markers.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 1, 2016, at 10:17 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 1, 2016, at 9:53 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This was indeed a very thorough review by the core team. I&#39;ll prepare a v2 proposal with this feedback taken into account so we can continue moving things along.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; One quick question - is making whatever syntax is chosen for Swift 3 &quot;forward-compatible&quot; with a future generalized existential feature a concern?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes it is a concern, but we assume that the “X &amp; Y” syntax will always be accepted going forward, as sugar for the more general feature that is yet to be designed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160610/ebfa44a3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Returned for Revision] SE-0095: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 10, 2016 at 01:00:00pm</p></header><div class="content"><p>starting from this change, I tried to see how it could shape a possible generalized existential syntax. The grammar is not complete, but close enough to get a sense. It is also influenced by some recent changes regarding the status of ‘;’ versus ‘&amp;’ versus ‘,’  <br></p><p>https://gist.github.com/lmihalkovic/8aa66542f5cc4592e967bade260477ef<br></p><p><br>&gt; On Jun 2, 2016, at 6:47 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md<br>&gt; <br>&gt; Hello Swift Community,<br>&gt; <br>&gt; The review of SE-0095: &quot;Replace protocol&lt;P1,P2&gt; syntax with Any&lt;P1,P2&gt;&quot; ran from May 24…30, 2016. The proposal is returned with revision requested - ideally the revised proposal will be included in Swift 3.<br>&gt; <br>&gt; There was an incredible amount of feedback from the community, continuing even today.  The principle problem identified by community about the proposal is that &quot;Any&lt;T1, T2&gt;” implies very strongly an “any of T1 OR T2” relationship (aka disjunction) and not “any type conforming to T1 AND T2” relationship (aka conjunction).  There was also some related discussion as to how the “Any&lt;&gt;” syntax aligns with future generalized existential syntax, much discussion as to whether it should be spelled Any&lt;&gt; or any&lt;&gt;, and some discussion about &quot;angle bracket blindness&quot;.<br>&gt; <br>&gt; The core team extensively discussed the feedback and considered many different possible paths forward.  The conclusion of this is that it recommends that SE-0095 be revised into a fairly different proposal, one that introduces a new infix “&amp;” type operator for representing protocol and other type compositions.  Instead of:<br>&gt; <br>&gt; 	func f(a : protocol&lt;A, B&gt;) {}<br>&gt; 	func g&lt;T : A&gt;(x : T) where T : B {}    or   func g&lt;T : protocol&lt;A, B&gt;&gt;(x : T) {}<br>&gt; <br>&gt; You would instead write:<br>&gt; <br>&gt; 	func f(a : A &amp; B) {}<br>&gt; 	func g&lt;T : A &amp; B&gt;(x : T) {}<br>&gt; <br>&gt; The degenerate case of protocol&lt;&gt; needs an answer, but only for the definition of the Any typealias in the standard library, so it can be left out of the proposal.<br>&gt; <br>&gt; The core team feels that this is an elegant solution for Swift 3 that conveys exactly the right intent.  When generalized existentials are introduced, an elaborated syntax can be introduced to generalize this, e.g. &quot;Any&lt;A &amp; B where … &gt;” or “(T : A &amp; B where …)” or whatever else makes sense in context of its design.<br>&gt; <br>&gt; The principle concern with this is that having an “&amp;&quot; operator for generic constraints leads the question of whether the language should introduce an &quot;|&quot; operator to represent disjunctions in type constraints (something that the type system cannot and should not support).  This is a topic that the C++ committee grappled with in its discussions of C++ concepts.  That said, the core team feels that “&amp;” directly expresses the relationship that we want, that “|” can be addressed in the “commonly rejected proposals&quot; list, and that other proposals for an infix operator (like +) skirt this issue but are strictly worse at communicating intent in code.<br>&gt; <br>&gt; Many thanks to Adrian Zubarev, Austin Zheng for driving this discussion!<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
