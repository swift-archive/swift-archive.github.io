<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8743f8794fdfad2ccd7097ad4bc10337?s=50"></div><header><strong>Building swift-llvm fails when using build-script to cross compile due to multiple -isysroot arguments being in CFLAGS</strong> from <string>Andrew Hyatt</string> &lt;andythehyatt at gmail.com&gt;<p>March 19, 2016 at 09:00:00am</p></header><div class="content"><p>Building swift-llvm fails when using build-script to cross compile because build-script wrongly gives duplicate -isysroot arguments.<br></p><p>The full arguments that are given to clang by build-script while building LLVM are here: https://gist.github.com/ahyattdev/8ecc5d3808b9ee543a60<br></p><p>The command I use to build the compiler, using the latest sources from GitHub<br></p><p>utils/build-script -R -i -- --cross-compile-tools-deployment-targets &quot;iphoneos-arm64 iphoneos-armv7 iphoneos-armv7s&quot; --user-config-args=&quot;-DLLVM_ENABLE_BACKTRACES=Off&quot;<br></p><p>This error occurs after the phase of building llvm for the host machine, and occurs during the cross compilation phase.<br></p><p>Andrew Hyatt<br>andythehyatt at gmail.com<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160319/d1523ec4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c2605dc1239d9ef4ac4d01f056edcd9f?s=50"></div><header><strong>Building swift-llvm fails when using build-script to cross compile due to multiple -isysroot arguments being in CFLAGS</strong> from <string>Andrew Hyatt</string> &lt;ahyattdev at icloud.com&gt;<p>March 19, 2016 at 10:00:00am</p></header><div class="content"><p>(From /u/thegreatbeanz on reddit.com/r/swift &lt;http://reddit.com/r/swift&gt;)<br></p><p>So the problem here is actually that something has gone horribly wrong when configuring compiler- rt.<br>You&#39;ll notice in the clang commands that it is building in this directory:<br>clang_rt.builtins_armv7_10.4.dir<br>What that means is it is building the clang_rt.10.4 archive which provides back ported library functions to OS X 10.4. Obviously 10.4 didn&#39;t support armv7 as an architecture, something has gone really wrong here.<br>If you&#39;re on the latest swift it is probably a regression caused by 53f48f8. You need to email swift-dev to get support from Dmitri Gribenko and Vedant Kumar.<br>Source: I wrote most of the compiler-rt builtin build system for Darwin.<br></p><p>Andrew Hyatt<br>ahyattdev at icloud.com<br></p><p>&gt; On Mar 19, 2016, at 9:26 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Building swift-llvm fails when using build-script to cross compile because build-script wrongly gives duplicate -isysroot arguments.<br>&gt; <br>&gt; The full arguments that are given to clang by build-script while building LLVM are here: https://gist.github.com/ahyattdev/8ecc5d3808b9ee543a60 &lt;https://gist.github.com/ahyattdev/8ecc5d3808b9ee543a60&gt;<br>&gt; <br>&gt; The command I use to build the compiler, using the latest sources from GitHub<br>&gt; <br>&gt; utils/build-script -R -i -- --cross-compile-tools-deployment-targets &quot;iphoneos-arm64 iphoneos-armv7 iphoneos-armv7s&quot; --user-config-args=&quot;-DLLVM_ENABLE_BACKTRACES=Off&quot;<br>&gt; <br>&gt; This error occurs after the phase of building llvm for the host machine, and occurs during the cross compilation phase.<br>&gt; <br>&gt; Andrew Hyatt<br>&gt; andythehyatt at gmail.com &lt;mailto:andythehyatt at gmail.com&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160319/cc580425/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1a92780aeb1a248560d222575689c59?s=50"></div><header><strong>Building swift-llvm fails when using build-script to cross compile due to multiple -isysroot arguments being in CFLAGS</strong> from <string>ChrisBieneman</string> &lt;beanz at apple.com&gt;<p>March 19, 2016 at 12:00:00pm</p></header><div class="content"><p>[Adding Vedant directly]<br></p><p>I&#39;m not super familiar with the swift build scripts, but I have a theory of what is going wrong. I think the problem is that compiler-rt is being built during the cross build, and it really shouldn&#39;t be.<br></p><p>The compiler-rt build system has some significant flaws, and it is being reworked to resolve them. The problem causing this is that we have a hacked up CMake build process that generates multiple cross-targeted binaries from a single build configuration. I believe that compiler-rt&#39;s built-in hacky cross-targeting is tripping over however swift is supporting cross-targeting, and it is falling over.<br></p><p>With the current state of compiler-rt the right way to build it for Darwin is to treat it as host content, and it will build the Darwin-cross libraries too. Then you can pull the cross-libraries out and put them into the device build.<br></p><p>Vedant, if you have questions feel free to swing by my office on Monday.<br></p><p>-Chris<br></p><p>&gt; On Mar 19, 2016, at 10:11 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; (From /u/thegreatbeanz on reddit.com/r/swift)<br>&gt; <br>&gt; So the problem here is actually that something has gone horribly wrong when configuring compiler- rt.<br>&gt; You&#39;ll notice in the clang commands that it is building in this directory:<br>&gt; clang_rt.builtins_armv7_10.4.dir<br>&gt; What that means is it is building the clang_rt.10.4 archive which provides back ported library functions to OS X 10.4. Obviously 10.4 didn&#39;t support armv7 as an architecture, something has gone really wrong here.<br>&gt; If you&#39;re on the latest swift it is probably a regression caused by 53f48f8. You need to email swift-dev to get support from Dmitri Gribenko and Vedant Kumar.<br>&gt; Source: I wrote most of the compiler-rt builtin build system for Darwin.<br>&gt; <br>&gt; Andrew Hyatt<br>&gt; ahyattdev at icloud.com<br>&gt; <br>&gt;&gt; On Mar 19, 2016, at 9:26 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Building swift-llvm fails when using build-script to cross compile because build-script wrongly gives duplicate -isysroot arguments.<br>&gt;&gt; <br>&gt;&gt; The full arguments that are given to clang by build-script while building LLVM are here: https://gist.github.com/ahyattdev/8ecc5d3808b9ee543a60<br>&gt;&gt; <br>&gt;&gt; The command I use to build the compiler, using the latest sources from GitHub<br>&gt;&gt; <br>&gt;&gt; utils/build-script -R -i -- --cross-compile-tools-deployment-targets &quot;iphoneos-arm64 iphoneos-armv7 iphoneos-armv7s&quot; --user-config-args=&quot;-DLLVM_ENABLE_BACKTRACES=Off&quot;<br>&gt;&gt; <br>&gt;&gt; This error occurs after the phase of building llvm for the host machine, and occurs during the cross compilation phase.<br>&gt;&gt; <br>&gt;&gt; Andrew Hyatt<br>&gt;&gt; andythehyatt at gmail.com<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160319/4f049f50/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1abe86b70e18c7e3f4025a3062d7671?s=50"></div><header><strong>Building swift-llvm fails when using build-script to cross compile due to multiple -isysroot arguments being in CFLAGS</strong> from <string>Vedant Kumar</string> &lt;vsk at apple.com&gt;<p>March 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Mar 19, 2016, at 12:05 PM, ChrisBieneman &lt;beanz at apple.com&gt; wrote:<br>&gt; <br>&gt; [Adding Vedant directly]<br>&gt; <br>&gt; I&#39;m not super familiar with the swift build scripts, but I have a theory of what is going wrong. I think the problem is that compiler-rt is being built during the cross build, and it really shouldn&#39;t be.<br>&gt; <br>&gt; The compiler-rt build system has some significant flaws, and it is being reworked to resolve them. The problem causing this is that we have a hacked up CMake build process that generates multiple cross-targeted binaries from a single build configuration. I believe that compiler-rt&#39;s built-in hacky cross-targeting is tripping over however swift is supporting cross-targeting, and it is falling over.<br>&gt; <br>&gt; With the current state of compiler-rt the right way to build it for Darwin is to treat it as host content, and it will build the Darwin-cross libraries too. Then you can pull the cross-libraries out and put them into the device build.<br></p><p>Could you elaborate on what it means to treat it as host content? <br></p><p>Is setting COMPILER_RT_HOST_TRIPLE and disabling COMPILER_RT_ENABLE_{I,TV,WATCH}OS the right thing to do?<br></p><p><br>&gt; Vedant, if you have questions feel free to swing by my office on Monday.<br></p><p>Will do.<br></p><p><br>thanks,<br>vedant<br></p><p>&gt; -Chris<br>&gt; <br>&gt; On Mar 19, 2016, at 10:11 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; (From /u/thegreatbeanz on reddit.com/r/swift)<br>&gt;&gt; <br>&gt;&gt; So the problem here is actually that something has gone horribly wrong when configuring compiler- rt.<br>&gt;&gt; You&#39;ll notice in the clang commands that it is building in this directory:<br>&gt;&gt; clang_rt.builtins_armv7_10.4.dir<br>&gt;&gt; What that means is it is building the clang_rt.10.4 archive which provides back ported library functions to OS X 10.4. Obviously 10.4 didn&#39;t support armv7 as an architecture, something has gone really wrong here.<br>&gt;&gt; If you&#39;re on the latest swift it is probably a regression caused by 53f48f8. You need to email swift-dev to get support from Dmitri Gribenko and Vedant Kumar.<br>&gt;&gt; Source: I wrote most of the compiler-rt builtin build system for Darwin.<br>&gt;&gt; <br>&gt;&gt; Andrew Hyatt<br>&gt;&gt; ahyattdev at icloud.com<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 19, 2016, at 9:26 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Building swift-llvm fails when using build-script to cross compile because build-script wrongly gives duplicate -isysroot arguments.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The full arguments that are given to clang by build-script while building LLVM are here: https://gist.github.com/ahyattdev/8ecc5d3808b9ee543a60<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The command I use to build the compiler, using the latest sources from GitHub<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; utils/build-script -R -i -- --cross-compile-tools-deployment-targets &quot;iphoneos-arm64 iphoneos-armv7 iphoneos-armv7s&quot; --user-config-args=&quot;-DLLVM_ENABLE_BACKTRACES=Off&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This error occurs after the phase of building llvm for the host machine, and occurs during the cross compilation phase.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Andrew Hyatt<br>&gt;&gt;&gt; andythehyatt at gmail.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1a92780aeb1a248560d222575689c59?s=50"></div><header><strong>Building swift-llvm fails when using build-script to cross compile due to multiple -isysroot arguments being in CFLAGS</strong> from <string>ChrisBieneman</string> &lt;beanz at apple.com&gt;<p>March 19, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Mar 19, 2016, at 4:30 PM, Vedant Kumar &lt;vsk at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 19, 2016, at 12:05 PM, ChrisBieneman &lt;beanz at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; [Adding Vedant directly]<br>&gt;&gt; <br>&gt;&gt; I&#39;m not super familiar with the swift build scripts, but I have a theory of what is going wrong. I think the problem is that compiler-rt is being built during the cross build, and it really shouldn&#39;t be.<br>&gt;&gt; <br>&gt;&gt; The compiler-rt build system has some significant flaws, and it is being reworked to resolve them. The problem causing this is that we have a hacked up CMake build process that generates multiple cross-targeted binaries from a single build configuration. I believe that compiler-rt&#39;s built-in hacky cross-targeting is tripping over however swift is supporting cross-targeting, and it is falling over.<br>&gt;&gt; <br>&gt;&gt; With the current state of compiler-rt the right way to build it for Darwin is to treat it as host content, and it will build the Darwin-cross libraries too. Then you can pull the cross-libraries out and put them into the device build.<br>&gt; <br>&gt; Could you elaborate on what it means to treat it as host content? <br></p><p>I don&#39;t know the exact details of how swift&#39;s build scripts work, but I assume it isn&#39;t that different from how you generally would cross-compile a compiler and runtimes.<br></p><p>For example, if I wanted to build clang for iOS, the first thing I would do is build a host-capable clang that could target iOS. That clang is then be used to build the cross-targeted clang and corresponding runtimes. I assume swift does something similar to solve version incompatibilities between the host compiler and the target.<br></p><p>Compiler-RT&#39;s build system is really screwy for a lot of reasons. On Darwin when you configure compiler-rt it tries to generate a single build tree that can target every Darwin-based platform. The logic around that gets really tripped up if you start trying to treat it as a cross-compile (even though it really is). This is something I&#39;m working to fix.<br></p><p>The correct way to build compiler-rt on Darwin is to build it in-tree as part of the host LLVM. If you&#39;re building a full host clang you can use the LLVM_BUILD_EXTERNAL_COMPILER_RT option to enable using the just-built clang. You can set COMPILER_RT_ENABLE_{platform} and it should be fine.<br></p><p>When you build the cross-targeted tools and libraries, you&#39;ll want to disable building compiler-rt by setting LLVM_TOOL_COMPILER_RT_BUILD=Off. After the cross-build completes you&#39;ll need to pull the clang_rt libraries out of the host build directory into the target compiler&#39;s build directory.<br></p><p>Hopefully I&#39;ll have this all re-worked in LLVM sometime in the next couple months, then it will all change all over again :-).<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Is setting COMPILER_RT_HOST_TRIPLE and disabling COMPILER_RT_ENABLE_{I,TV,WATCH}OS the right thing to do?<br>&gt; <br>&gt; <br>&gt;&gt; Vedant, if you have questions feel free to swing by my office on Monday.<br>&gt; <br>&gt; Will do.<br>&gt; <br>&gt; <br>&gt; thanks,<br>&gt; vedant<br>&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 19, 2016, at 10:11 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (From /u/thegreatbeanz on reddit.com/r/swift)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So the problem here is actually that something has gone horribly wrong when configuring compiler- rt.<br>&gt;&gt;&gt; You&#39;ll notice in the clang commands that it is building in this directory:<br>&gt;&gt;&gt; clang_rt.builtins_armv7_10.4.dir<br>&gt;&gt;&gt; What that means is it is building the clang_rt.10.4 archive which provides back ported library functions to OS X 10.4. Obviously 10.4 didn&#39;t support armv7 as an architecture, something has gone really wrong here.<br>&gt;&gt;&gt; If you&#39;re on the latest swift it is probably a regression caused by 53f48f8. You need to email swift-dev to get support from Dmitri Gribenko and Vedant Kumar.<br>&gt;&gt;&gt; Source: I wrote most of the compiler-rt builtin build system for Darwin.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Andrew Hyatt<br>&gt;&gt;&gt; ahyattdev at icloud.com<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 19, 2016, at 9:26 AM, Andrew Hyatt via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Building swift-llvm fails when using build-script to cross compile because build-script wrongly gives duplicate -isysroot arguments.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The full arguments that are given to clang by build-script while building LLVM are here: https://gist.github.com/ahyattdev/8ecc5d3808b9ee543a60<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The command I use to build the compiler, using the latest sources from GitHub<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; utils/build-script -R -i -- --cross-compile-tools-deployment-targets &quot;iphoneos-arm64 iphoneos-armv7 iphoneos-armv7s&quot; --user-config-args=&quot;-DLLVM_ENABLE_BACKTRACES=Off&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This error occurs after the phase of building llvm for the host machine, and occurs during the cross compilation phase.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Andrew Hyatt<br>&gt;&gt;&gt;&gt; andythehyatt at gmail.com<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
