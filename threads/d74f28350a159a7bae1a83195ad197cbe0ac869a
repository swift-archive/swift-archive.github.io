<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/69c86850e4d8c6ad47a576ca4b977f4f?s=50"></div><header><strong>Equality of optional arrays</strong> from <string>Jake Heiser</string> &lt;jakeheiser1 at gmail.com&gt;<p>December 11, 2015 at 02:00:00am</p></header><div class="content"><p>Hi all!<br></p><p>Currently in Swift, checking the equality of two optional arrays is much<br>messier than it should be:<br></p><p>switch (optionalArray1, optionalArray2) {<br>    case (.Some(let a1), .Some(let a2)) where a1 == a2: return true<br>    case (.None, .None): return true<br>    default: return false<br>}<br></p><p>This is a result of the lack of a built-in overload of == for optional<br>arrays (and optional array slices for that matter). Overloads exist for<br>optional equatable objects and for non-optional arrays with equatable<br>elements, but not for optional arrays with equatable elements. The standard<br>library currently has these overloads (among others):<br></p><p>public func ==&lt;T : Equatable&gt;(lhs: T?, rhs: T?) -&gt; Bool<br>public func ==&lt;Element : Equatable&gt;(lhs: ArraySlice&lt;Element&gt;, rhs:<br>ArraySlice&lt;Element&gt;) -&gt; Bool<br>public func ==&lt;Element : Equatable&gt;(lhs: [Element], rhs: [Element]) -&gt; Bool<br></p><p>To correct the issue, I propose two functions be added to the standard<br>library:<br></p><p>public func ==&lt;Element : Equatable&gt;(lhs: ArraySlice&lt;Element&gt;?, rhs:<br>ArraySlice&lt;Element&gt;?) -&gt; Bool<br>public func ==&lt;Element : Equatable&gt;(lhs: [Element]?, rhs: [Element]?) -&gt;<br>Bool<br></p><p>This change would allow optional arrays to be checked for equality just as<br>other objects are:<br></p><p>optionalString1 == optionalString2 // Already possible<br>requiredArray1 == requiredArray2 // Already possible<br>optionalArray1 == optionalArray2 // Would be possible with these changes<br></p><p>Thanks for your consideration -<br>Jake Heiser<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/d74f869a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Equality of optional arrays</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>December 11, 2015 at 02:00:00am</p></header><div class="content"><p>Yeah, this is definitely cumbersome today. Fortunately I think this falls<br>under the plans to improve Generics on the 3.0 milestone. Namely, the<br>ability to make Array conform to Equatable when Array.Element is itself<br>Equatable. This should make things a lot nicer :)<br>On Thu, Dec 10, 2015 at 6:00 PM Jake Heiser via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all!<br>&gt;<br>&gt; Currently in Swift, checking the equality of two optional arrays is much<br>&gt; messier than it should be:<br>&gt;<br>&gt; switch (optionalArray1, optionalArray2) {<br>&gt;     case (.Some(let a1), .Some(let a2)) where a1 == a2: return true<br>&gt;     case (.None, .None): return true<br>&gt;     default: return false<br>&gt; }<br>&gt;<br>&gt; This is a result of the lack of a built-in overload of == for optional<br>&gt; arrays (and optional array slices for that matter). Overloads exist for<br>&gt; optional equatable objects and for non-optional arrays with equatable<br>&gt; elements, but not for optional arrays with equatable elements. The standard<br>&gt; library currently has these overloads (among others):<br>&gt;<br>&gt; public func ==&lt;T : Equatable&gt;(lhs: T?, rhs: T?) -&gt; Bool<br>&gt; public func ==&lt;Element : Equatable&gt;(lhs: ArraySlice&lt;Element&gt;, rhs:<br>&gt; ArraySlice&lt;Element&gt;) -&gt; Bool<br>&gt; public func ==&lt;Element : Equatable&gt;(lhs: [Element], rhs: [Element]) -&gt; Bool<br>&gt;<br>&gt; To correct the issue, I propose two functions be added to the standard<br>&gt; library:<br>&gt;<br>&gt; public func ==&lt;Element : Equatable&gt;(lhs: ArraySlice&lt;Element&gt;?, rhs:<br>&gt; ArraySlice&lt;Element&gt;?) -&gt; Bool<br>&gt; public func ==&lt;Element : Equatable&gt;(lhs: [Element]?, rhs: [Element]?) -&gt;<br>&gt; Bool<br>&gt;<br>&gt; This change would allow optional arrays to be checked for equality just as<br>&gt; other objects are:<br>&gt;<br>&gt; optionalString1 == optionalString2 // Already possible<br>&gt; requiredArray1 == requiredArray2 // Already possible<br>&gt; optionalArray1 == optionalArray2 // Would be possible with these changes<br>&gt;<br>&gt; Thanks for your consideration -<br>&gt; Jake Heiser<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/61d8d9d8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
