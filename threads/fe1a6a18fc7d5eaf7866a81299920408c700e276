<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44fe7c93c07e30efe1de26f850cf9669?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Bruno Berisso</string> &lt;gojan.wan at gmail.com&gt;<p>December 15, 2015 at 02:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I&#39;m really used to negate logical expressions with this operator but it<br>never feels confortable to me. If I need to negate some complex expression<br>sometimes I prefer to write a temporal variable and then negate that with<br>*!* because I fear than others, or myself, could overlook it and cause<br>confusion.<br></p><p>Now that Swift use the same operator to force the unwrap of optional values<br>it becomes even worse.<br></p><p>Consider this examples:<br></p><p>if someOptionalValue != nil {<br>    ...<br>    if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>        ...<br>    }<br>}<br></p><p>Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br></p><p>//Best case<br>if let value = optionalBool where !value {<br>    ...<br>}<br></p><p>//Worse case<br>if !optionalBool! {<br>    ...<br>}<br></p><p>Now what happen with this examples if we instead use a *not* operator:<br></p><p>if someOptionalValue != nil {<br>    ...<br>    if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>        ...<br>    }<br>}<br></p><p>if let value = optionalBool where not value {<br>    ...<br>}<br></p><p>if not optionalBool! {<br>    ...<br>}<br></p><p>I&#39;m not sure if *not* is the right path here but I really want to improve<br>the *!* to something more clear at a glance and that doesn&#39;t have different<br>behaviour depending where it appears in an expression.<br></p><p>Thanks,<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/fe1ae276/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>I&#39;m uncertain but it&#39;s definitely worth considering.<br></p><p>I also think that it&#39;s weird at the moment since in most cases the<br>exclamation mark is now something dangerous.<br>I also had a couple of bugs in my code because the operator is too easy to<br>miss and the negation was not or no longer intended.<br></p><p>On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I&#39;m really used to negate logical expressions with this operator but it<br>&gt; never feels confortable to me. If I need to negate some complex expression<br>&gt; sometimes I prefer to write a temporal variable and then negate that with<br>&gt; *!* because I fear than others, or myself, could overlook it and cause<br>&gt; confusion.<br>&gt;<br>&gt; Now that Swift use the same operator to force the unwrap of optional<br>&gt; values it becomes even worse.<br>&gt;<br>&gt; Consider this examples:<br>&gt;<br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;<br>&gt; //Best case<br>&gt; if let value = optionalBool where !value {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; //Worse case<br>&gt; if !optionalBool! {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; Now what happen with this examples if we instead use a *not* operator:<br>&gt;<br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; if let value = optionalBool where not value {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; if not optionalBool! {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; I&#39;m not sure if *not* is the right path here but I really want to improve<br>&gt; the *!* to something more clear at a glance and that doesn&#39;t have<br>&gt; different behaviour depending where it appears in an expression.<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/7407651b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f98dc2a5a610100f8528eeeb2ff3c282?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Andrew Brown</string> &lt;a.br at me.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>I&#39;m interested to hear what the opinions are for this.<br>When I first read the idea I was a definite NO! (See what I did there :) )<br>But after thinking about it I&#39;m interested to hear how people feel about this.<br>The obvious issue is what do we do with &#39;!=&#39; ?<br>Most languages which do not use ! for negation use &#39;&lt;&gt;&#39; for &#39;!=&#39; and I&#39;m no sure how popular that would be.<br></p><p>ABR.<br></p><p>&gt; On 15 Dec 2015, at 15:01, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt; <br>&gt; I also think that it&#39;s weird at the moment since in most cases the exclamation mark is now something dangerous.<br>&gt; I also had a couple of bugs in my code because the operator is too easy to miss and the negation was not or no longer intended.<br>&gt; <br>&gt;&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it never feels confortable to me. If I need to negate some complex expression sometimes I prefer to write a temporal variable and then negate that with ! because I fear than others, or myself, could overlook it and cause confusion.<br>&gt;&gt; <br>&gt;&gt; Now that Swift use the same operator to force the unwrap of optional values it becomes even worse.<br>&gt;&gt; <br>&gt;&gt; Consider this examples:<br>&gt;&gt; <br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt; <br>&gt;&gt; //Best case<br>&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //Worse case<br>&gt;&gt; if !optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Now what happen with this examples if we instead use a not operator:<br>&gt;&gt; <br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if not optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure if not is the right path here but I really want to improve the ! to something more clear at a glance and that doesn&#39;t have different behaviour depending where it appears in an expression.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/26d06885/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>Good point!<br>The negating equality and identity operators != and !== both wouldn&#39;t fit<br>anymore.<br></p><p>On Tue, Dec 15, 2015 at 4:19 PM, Andrew Brown &lt;a.br at me.com&gt; wrote:<br></p><p>&gt; I&#39;m interested to hear what the opinions are for this.<br>&gt; When I first read the idea I was a definite NO! (See what I did there :) )<br>&gt; But after thinking about it I&#39;m interested to hear how people feel about<br>&gt; this.<br>&gt; The obvious issue is what do we do with &#39;!=&#39; ?<br>&gt; Most languages which do not use ! for negation use &#39;&lt;&gt;&#39; for &#39;!=&#39; and I&#39;m<br>&gt; no sure how popular that would be.<br>&gt;<br>&gt; ABR.<br>&gt;<br>&gt; On 15 Dec 2015, at 15:01, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt;<br>&gt; I also think that it&#39;s weird at the moment since in most cases the<br>&gt; exclamation mark is now something dangerous.<br>&gt; I also had a couple of bugs in my code because the operator is too easy to<br>&gt; miss and the negation was not or no longer intended.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello,<br>&gt;&gt;<br>&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it<br>&gt;&gt; never feels confortable to me. If I need to negate some complex expression<br>&gt;&gt; sometimes I prefer to write a temporal variable and then negate that with<br>&gt;&gt; *!* because I fear than others, or myself, could overlook it and cause<br>&gt;&gt; confusion.<br>&gt;&gt;<br>&gt;&gt; Now that Swift use the same operator to force the unwrap of optional<br>&gt;&gt; values it becomes even worse.<br>&gt;&gt;<br>&gt;&gt; Consider this examples:<br>&gt;&gt;<br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt;<br>&gt;&gt; //Best case<br>&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; //Worse case<br>&gt;&gt; if !optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Now what happen with this examples if we instead use a *not* operator:<br>&gt;&gt;<br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; if not optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I&#39;m not sure if *not* is the right path here but I really want to<br>&gt;&gt; improve the *!* to something more clear at a glance and that doesn&#39;t<br>&gt;&gt; have different behaviour depending where it appears in an expression.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/b69262ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a7aae865d8b141e427b2f5eae718128?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Bee</string> &lt;bee.ography at gmail.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>I&#39;m a fan of wordy over cryptic operators. It&#39;s easier to the eyes.<br>However, the design of Swift seems to be unable to accept word as operator.<br>So, we have to accept cryptic operators.<br></p><p>I&#39;m agree that as ! is used in optionals, it wouldn&#39;t fit to be used as<br>&quot;not&quot; anymore.<br></p><p>So, I vote for &lt;&gt; for &quot;not equal&quot;. :)<br></p><p>Regards,<br></p><p>-Bee<br></p><p><br>On Tue, Dec 15, 2015 at 10:57 PM, Marc Knaup via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Good point!<br>&gt; The negating equality and identity operators != and !== both wouldn&#39;t fit<br>&gt; anymore.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 4:19 PM, Andrew Brown &lt;a.br at me.com&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;m interested to hear what the opinions are for this.<br>&gt;&gt; When I first read the idea I was a definite NO! (See what I did there :) )<br>&gt;&gt; But after thinking about it I&#39;m interested to hear how people feel about<br>&gt;&gt; this.<br>&gt;&gt; The obvious issue is what do we do with &#39;!=&#39; ?<br>&gt;&gt; Most languages which do not use ! for negation use &#39;&lt;&gt;&#39; for &#39;!=&#39; and I&#39;m<br>&gt;&gt; no sure how popular that would be.<br>&gt;&gt;<br>&gt;&gt; ABR.<br>&gt;&gt;<br>&gt;&gt; On 15 Dec 2015, at 15:01, Marc Knaup via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt;&gt;<br>&gt;&gt; I also think that it&#39;s weird at the moment since in most cases the<br>&gt;&gt; exclamation mark is now something dangerous.<br>&gt;&gt; I also had a couple of bugs in my code because the operator is too easy<br>&gt;&gt; to miss and the negation was not or no longer intended.<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it<br>&gt;&gt;&gt; never feels confortable to me. If I need to negate some complex expression<br>&gt;&gt;&gt; sometimes I prefer to write a temporal variable and then negate that with<br>&gt;&gt;&gt; *!* because I fear than others, or myself, could overlook it and cause<br>&gt;&gt;&gt; confusion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Now that Swift use the same operator to force the unwrap of optional<br>&gt;&gt;&gt; values it becomes even worse.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Consider this examples:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;&gt;         ...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; //Best case<br>&gt;&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; //Worse case<br>&gt;&gt;&gt; if !optionalBool! {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Now what happen with this examples if we instead use a *not* operator:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;&gt;         ...<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; if not optionalBool! {<br>&gt;&gt;&gt;     ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m not sure if *not* is the right path here but I really want to<br>&gt;&gt;&gt; improve the *!* to something more clear at a glance and that doesn&#39;t<br>&gt;&gt;&gt; have different behaviour depending where it appears in an expression.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/eba2bcdf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 15, 2015 at 05:00:00pm</p></header><div class="content"><p>What would be the replacement for &quot;not identical&quot; then?<br>&lt;=&gt; ?<br></p><p>&lt;&gt; is a bit weird and could potentially conflict/be confused with generics.<br></p><p>On Tue, Dec 15, 2015 at 5:09 PM, Bee &lt;bee.ography at gmail.com&gt; wrote:<br></p><p>&gt; I&#39;m a fan of wordy over cryptic operators. It&#39;s easier to the eyes.<br>&gt; However, the design of Swift seems to be unable to accept word as operator.<br>&gt; So, we have to accept cryptic operators.<br>&gt;<br>&gt; I&#39;m agree that as ! is used in optionals, it wouldn&#39;t fit to be used as<br>&gt; &quot;not&quot; anymore.<br>&gt;<br>&gt; So, I vote for &lt;&gt; for &quot;not equal&quot;. :)<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; -Bee<br>&gt;<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 10:57 PM, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Good point!<br>&gt;&gt; The negating equality and identity operators != and !== both wouldn&#39;t fit<br>&gt;&gt; anymore.<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 4:19 PM, Andrew Brown &lt;a.br at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I&#39;m interested to hear what the opinions are for this.<br>&gt;&gt;&gt; When I first read the idea I was a definite NO! (See what I did there :)<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt; But after thinking about it I&#39;m interested to hear how people feel about<br>&gt;&gt;&gt; this.<br>&gt;&gt;&gt; The obvious issue is what do we do with &#39;!=&#39; ?<br>&gt;&gt;&gt; Most languages which do not use ! for negation use &#39;&lt;&gt;&#39; for &#39;!=&#39; and I&#39;m<br>&gt;&gt;&gt; no sure how popular that would be.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ABR.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 15 Dec 2015, at 15:01, Marc Knaup via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I also think that it&#39;s weird at the moment since in most cases the<br>&gt;&gt;&gt; exclamation mark is now something dangerous.<br>&gt;&gt;&gt; I also had a couple of bugs in my code because the operator is too easy<br>&gt;&gt;&gt; to miss and the negation was not or no longer intended.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it<br>&gt;&gt;&gt;&gt; never feels confortable to me. If I need to negate some complex expression<br>&gt;&gt;&gt;&gt; sometimes I prefer to write a temporal variable and then negate that with<br>&gt;&gt;&gt;&gt; *!* because I fear than others, or myself, could overlook it and cause<br>&gt;&gt;&gt;&gt; confusion.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Now that Swift use the same operator to force the unwrap of optional<br>&gt;&gt;&gt;&gt; values it becomes even worse.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Consider this examples:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;&gt;&gt;         ...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; //Best case<br>&gt;&gt;&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; //Worse case<br>&gt;&gt;&gt;&gt; if !optionalBool! {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Now what happen with this examples if we instead use a *not* operator:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;&gt;&gt;         ...<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; if not optionalBool! {<br>&gt;&gt;&gt;&gt;     ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;m not sure if *not* is the right path here but I really want to<br>&gt;&gt;&gt;&gt; improve the *!* to something more clear at a glance and that doesn&#39;t<br>&gt;&gt;&gt;&gt; have different behaviour depending where it appears in an expression.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/9676e362/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 15, 2015 at 09:00:00am</p></header><div class="content"><p>There&#39;s always ≠ but then it&#39;s just a hop, skip, and a jump to APL. <br>https://en.wikipedia.org/wiki/Relational_operator#Standard_relational_operators<br></p><p>-- E<br>p.s. I like != for inequality and ! for Boolean negation<br></p><p><br>&gt; On Dec 15, 2015, at 9:11 AM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What would be the replacement for &quot;not identical&quot; then?<br>&gt; &lt;=&gt; ?<br>&gt; <br>&gt; &lt;&gt; is a bit weird and could potentially conflict/be confused with generics.<br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 5:09 PM, Bee &lt;bee.ography at gmail.com &lt;mailto:bee.ography at gmail.com&gt;&gt; wrote:<br>&gt; I&#39;m a fan of wordy over cryptic operators. It&#39;s easier to the eyes. However, the design of Swift seems to be unable to accept word as operator. So, we have to accept cryptic operators.<br>&gt; <br>&gt; I&#39;m agree that as ! is used in optionals, it wouldn&#39;t fit to be used as &quot;not&quot; anymore.<br>&gt; <br>&gt; So, I vote for &lt;&gt; for &quot;not equal&quot;. :)<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -Bee<br>&gt; <br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 10:57 PM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Good point!<br>&gt; The negating equality and identity operators != and !== both wouldn&#39;t fit anymore. <br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 4:19 PM, Andrew Brown &lt;a.br at me.com &lt;mailto:a.br at me.com&gt;&gt; wrote:<br>&gt; I&#39;m interested to hear what the opinions are for this.<br>&gt; When I first read the idea I was a definite NO! (See what I did there :) )<br>&gt; But after thinking about it I&#39;m interested to hear how people feel about this.<br>&gt; The obvious issue is what do we do with &#39;!=&#39; ?<br>&gt; Most languages which do not use ! for negation use &#39;&lt;&gt;&#39; for &#39;!=&#39; and I&#39;m no sure how popular that would be.<br>&gt; <br>&gt; ABR.<br>&gt; <br>&gt; On 15 Dec 2015, at 15:01, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt;&gt; <br>&gt;&gt; I also think that it&#39;s weird at the moment since in most cases the exclamation mark is now something dangerous.<br>&gt;&gt; I also had a couple of bugs in my code because the operator is too easy to miss and the negation was not or no longer intended.<br>&gt;&gt; <br>&gt;&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it never feels confortable to me. If I need to negate some complex expression sometimes I prefer to write a temporal variable and then negate that with ! because I fear than others, or myself, could overlook it and cause confusion.<br>&gt;&gt; <br>&gt;&gt; Now that Swift use the same operator to force the unwrap of optional values it becomes even worse.<br>&gt;&gt; <br>&gt;&gt; Consider this examples:<br>&gt;&gt; <br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt; <br>&gt;&gt; //Best case<br>&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //Worse case<br>&gt;&gt; if !optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Now what happen with this examples if we instead use a not operator:<br>&gt;&gt; <br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if not optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure if not is the right path here but I really want to improve the ! to something more clear at a glance and that doesn&#39;t have different behaviour depending where it appears in an expression.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/cf60be07/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>Andrew, we could theoretically implement `not`-negation and continue to use<br>!= until a better solution is found. Baby steps and all that.<br></p><p>Not that I necessarily think this proposal is a good idea. The given<br>examples reek of being against unwrapping for some reason.<br></p><p>Why not use `if let aBool = aBool where !aBool`? And `if let someValue =<br>someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br></p><p>On Tue, Dec 15, 2015 at 10:19 AM Andrew Brown via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m interested to hear what the opinions are for this.<br>&gt; When I first read the idea I was a definite NO! (See what I did there :) )<br>&gt; But after thinking about it I&#39;m interested to hear how people feel about<br>&gt; this.<br>&gt; The obvious issue is what do we do with &#39;!=&#39; ?<br>&gt; Most languages which do not use ! for negation use &#39;&lt;&gt;&#39; for &#39;!=&#39; and I&#39;m<br>&gt; no sure how popular that would be.<br>&gt;<br>&gt; ABR.<br>&gt;<br>&gt; On 15 Dec 2015, at 15:01, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt;<br>&gt; I also think that it&#39;s weird at the moment since in most cases the<br>&gt; exclamation mark is now something dangerous.<br>&gt; I also had a couple of bugs in my code because the operator is too easy to<br>&gt; miss and the negation was not or no longer intended.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello,<br>&gt;&gt;<br>&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it<br>&gt;&gt; never feels confortable to me. If I need to negate some complex expression<br>&gt;&gt; sometimes I prefer to write a temporal variable and then negate that with<br>&gt;&gt; *!* because I fear than others, or myself, could overlook it and cause<br>&gt;&gt; confusion.<br>&gt;&gt;<br>&gt;&gt; Now that Swift use the same operator to force the unwrap of optional<br>&gt;&gt; values it becomes even worse.<br>&gt;&gt;<br>&gt;&gt; Consider this examples:<br>&gt;&gt;<br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt;<br>&gt;&gt; //Best case<br>&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; //Worse case<br>&gt;&gt; if !optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Now what happen with this examples if we instead use a *not* operator:<br>&gt;&gt;<br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; if not optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I&#39;m not sure if *not* is the right path here but I really want to<br>&gt;&gt; improve the *!* to something more clear at a glance and that doesn&#39;t<br>&gt;&gt; have different behaviour depending where it appears in an expression.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/9995d28f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44fe7c93c07e30efe1de26f850cf9669?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Bruno Berisso</string> &lt;gojan.wan at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>I also hit the *!=* vs *&lt;&gt;* dilema and conclude that we could continue<br>using the *!=* as &quot;not equal&quot;.<br></p><p>It&#39;s true that it will not be as consistent as before but I think it&#39;s a<br>reasonable price to pay taking into account the issues with *!* as &#39;not&#39;.<br></p><p><br>&gt; Not that I necessarily think this proposal is a good idea. The given<br>&gt; examples reek of being against unwrapping for some reason.<br>&gt;<br>&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue =<br>&gt; someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;<br></p><p>I think the issue is the complete different meanings of a symbol depending<br>only in where it appears in an expression. Adding that *!* character is<br>really easy to miss in an expression make it at last uncomfortable.<br></p><p>I agree that we are all really used to find *!* in logical expressions and<br>our brain is trained to translate it to NOT automatically but that doesn&#39;t<br>mean that it&#39;s good idea to keep it there.<br></p><p>For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we<br>know that `aBool` optional it&#39;s not empty before this check. How would you<br>write it? `!aBool!` or with the `if let...` ?<br></p><p>I think that clearly *!* is not good choice for negation but my mind is so<br>used to it that I can&#39;t totally affirm that *not* is *the* alternative to<br>it. Do we have another alternatives?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/55b39120/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 15, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we<br>know that `aBool` optional it&#39;s not empty before this check. How would you<br>write it? `!aBool!` or with the `if let...` ?<br></p><p>if aBool == false {} covers this nicely.<br></p><p>As for the whole topic of words vs cryptic symbols for Boolean operators<br>I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g.<br>either all words, or all math symbols or all the same as in C (current<br>state of things).<br></p><p>You can always rewrite !x as (x==false) if x is a Bool and forced<br>unwrapping is undesirable anyway so the confusion can be minimized in<br>practice.<br></p><p>Ilya.<br></p><p>On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I also hit the *!=* vs *&lt;&gt;* dilema and conclude that we could continue<br>&gt; using the *!=* as &quot;not equal&quot;.<br>&gt;<br>&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a<br>&gt; reasonable price to pay taking into account the issues with *!* as &#39;not&#39;.<br>&gt;<br>&gt;<br>&gt;&gt; Not that I necessarily think this proposal is a good idea. The given<br>&gt;&gt; examples reek of being against unwrapping for some reason.<br>&gt;&gt;<br>&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue =<br>&gt;&gt; someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt;<br>&gt;<br>&gt; I think the issue is the complete different meanings of a symbol depending<br>&gt; only in where it appears in an expression. Adding that *!* character is<br>&gt; really easy to miss in an expression make it at last uncomfortable.<br>&gt;<br>&gt; I agree that we are all really used to find *!* in logical expressions<br>&gt; and our brain is trained to translate it to NOT automatically but that<br>&gt; doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;<br>&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we<br>&gt; know that `aBool` optional it&#39;s not empty before this check. How would you<br>&gt; write it? `!aBool!` or with the `if let...` ?<br>&gt;<br>&gt; I think that clearly *!* is not good choice for negation but my mind is<br>&gt; so used to it that I can&#39;t totally affirm that *not* is *the* alternative<br>&gt; to it. Do we have another alternatives?<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/b3a0074a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44fe7c93c07e30efe1de26f850cf9669?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Bruno Berisso</string> &lt;gojan.wan at gmail.com&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt;<br>&gt;<br>&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that<br>&gt; we know that `aBool` optional it&#39;s not empty before this check. How would<br>&gt; you write it? `!aBool!` or with the `if let...` ?<br>&gt;<br>&gt; if aBool == false {} covers this nicely.<br>&gt;<br></p><p>I think it will be `if aBool! == false {} ` to match the case in my<br>previous example (not the *!*) (and note that I need to note the *!* :) )<br></p><p>I have the feeling that the Swift dev team had to follow this path when<br>they choose to use *!* to unwrap the optional values, it will be great to<br>have they insight.<br></p><p>As for the whole topic of words vs cryptic symbols for Boolean operators<br>&gt; I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g.<br>&gt; either all words, or all math symbols or all the same as in C (current<br>&gt; state of things).<br>&gt;<br></p><p>Agree. We could / should then use the ~ ?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/44e17577/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 18:14, Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt; <br>&gt; if aBool == false {} covers this nicely. <br>&gt; <br>&gt; I think it will be `if aBool! == false {} ` to match the case in my previous example (not the !) (and note that I need to note the ! :) )<br></p><p>Don’t forget it’s perfectly fine to compare an Optional to a non-optional value with ==, the ! isn’t required and is potentially explosive.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/0c12c723/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 15, 2015 at 10:00:00am</p></header><div class="content"><p>-1. In terms of C features that people complain about, prefix &#39;!&#39; for<br>negation doesn&#39;t seem to be high on the list, and it&#39;s never something that<br>has caused me or any other developer I know a problem (although these are<br>all anecdotes, take them as you will). A linter/style checker can always be<br>used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or<br>project.<br></p><p>&#39;~&#39; is already used for bitwise negation.<br></p><p>More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am<br>strongly against the former and for the latter. The symbols are &#39;cryptic&#39;<br>for the few minutes it takes to figure out what they mean, after which the<br>developer is good for a lifetime of coding in many different languages. The<br>words are nicely self-descriptive for a bit, then increase verbosity and<br>destroy your ability to visually delineate arguments via symbols forever.<br></p><p>Best,<br>Austin<br></p><p><br>On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that<br>&gt; we know that `aBool` optional it&#39;s not empty before this check. How would<br>&gt; you write it? `!aBool!` or with the `if let...` ?<br>&gt;<br>&gt; if aBool == false {} covers this nicely.<br>&gt;<br>&gt; As for the whole topic of words vs cryptic symbols for Boolean operators<br>&gt; I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g.<br>&gt; either all words, or all math symbols or all the same as in C (current<br>&gt; state of things).<br>&gt;<br>&gt; You can always rewrite !x as (x==false) if x is a Bool and forced<br>&gt; unwrapping is undesirable anyway so the confusion can be minimized in<br>&gt; practice.<br>&gt;<br>&gt; Ilya.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I also hit the *!=* vs *&lt;&gt;* dilema and conclude that we could continue<br>&gt;&gt; using the *!=* as &quot;not equal&quot;.<br>&gt;&gt;<br>&gt;&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a<br>&gt;&gt; reasonable price to pay taking into account the issues with *!* as<br>&gt;&gt; &#39;not&#39;.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; Not that I necessarily think this proposal is a good idea. The given<br>&gt;&gt;&gt; examples reek of being against unwrapping for some reason.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue =<br>&gt;&gt;&gt; someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I think the issue is the complete different meanings of a symbol<br>&gt;&gt; depending only in where it appears in an expression. Adding that *!*<br>&gt;&gt; character is really easy to miss in an expression make it at last<br>&gt;&gt; uncomfortable.<br>&gt;&gt;<br>&gt;&gt; I agree that we are all really used to find *!* in logical expressions<br>&gt;&gt; and our brain is trained to translate it to NOT automatically but that<br>&gt;&gt; doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;&gt;<br>&gt;&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we<br>&gt;&gt; know that `aBool` optional it&#39;s not empty before this check. How would you<br>&gt;&gt; write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;<br>&gt;&gt; I think that clearly *!* is not good choice for negation but my mind is<br>&gt;&gt; so used to it that I can&#39;t totally affirm that *not* is *the* alternative<br>&gt;&gt; to it. Do we have another alternatives?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/6664ae20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>December 16, 2015 at 01:00:00am</p></header><div class="content"><p>-1 as well. <br></p><p>I cannot think of a language where I don’t have ! as negate (which I read as not).<br></p><p>What would it be replaced by a keyword of “not”?  <br></p><p><br></p><p><br>&gt; On 2015-12-16, at 1:18:14, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1. In terms of C features that people complain about, prefix &#39;!&#39; for negation doesn&#39;t seem to be high on the list, and it&#39;s never something that has caused me or any other developer I know a problem (although these are all anecdotes, take them as you will). A linter/style checker can always be used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or project.<br>&gt; <br>&gt; &#39;~&#39; is already used for bitwise negation.<br>&gt; <br>&gt; More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am strongly against the former and for the latter. The symbols are &#39;cryptic&#39; for the few minutes it takes to figure out what they mean, after which the developer is good for a lifetime of coding in many different languages. The words are nicely self-descriptive for a bit, then increase verbosity and destroy your ability to visually delineate arguments via symbols forever.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt; <br>&gt; if aBool == false {} covers this nicely. <br>&gt; <br>&gt; As for the whole topic of words vs cryptic symbols for Boolean operators I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g. either all words, or all math symbols or all the same as in C (current state of things). <br>&gt; <br>&gt; You can always rewrite !x as (x==false) if x is a Bool and forced unwrapping is undesirable anyway so the confusion can be minimized in practice. <br>&gt; <br>&gt; Ilya. <br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I also hit the != vs &lt;&gt; dilema and conclude that we could continue using the != as &quot;not equal&quot;.<br>&gt; <br>&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a reasonable price to pay taking into account the issues with ! as &#39;not&#39;. <br>&gt;  <br>&gt; Not that I necessarily think this proposal is a good idea. The given examples reek of being against unwrapping for some reason.<br>&gt; <br>&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue = someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt; <br>&gt; I think the issue is the complete different meanings of a symbol depending only in where it appears in an expression. Adding that !character is really easy to miss in an expression make it at last uncomfortable.<br>&gt; <br>&gt; I agree that we are all really used to find ! in logical expressions and our brain is trained to translate it to NOT automatically but that doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt; <br>&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt; <br>&gt; I think that clearly ! is not good choice for negation but my mind is so used to it that I can&#39;t totally affirm that not is the alternative to it. Do we have another alternatives?<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/a015d077/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; I cannot think of a language where I don’t have ! as negate (which I read as not).<br></p><p>There’s Haskell, a language well endowed with cryptic operators, but not prefix !, it uses a ‘not’ function instead.<br></p><p>You could do the same in Swift, should you wish:<br></p><p>func not(bool: Bool) -&gt; Bool { return !bool }<br></p><p>And because in Swift, ‘if’ doesn’t require braces around the predicate, it doesn’t look too bad.<br>if not(x) { …<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/40deda8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 16, 2015 at 07:00:00am</p></header><div class="content"><p>It just occurred to me that there is one problem with replacing &quot;!&quot; with &quot;not&quot;:<br>&quot;not&quot; would be the first operator being a word, which would lead down a slippery slope that I&#39;d rather not tread: would we allow user defined unary operators being words?<br>I&#39;d rather not as this makes expressions unreadable IMHO. That is a problem I have with Scala: there they often use words as operators which I find difficult to read.<br>Haskell does not have this problem as &quot;not&quot; is just a unary function there.<br></p><p>So, I&#39;d like to keep the ! even though I&#39;m no friend of it.<br></p><p>-Thorsten <br></p><p>&gt; Am 15.12.2015 um 19:39 schrieb Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; I cannot think of a language where I don’t have ! as negate (which I read as not).<br>&gt; <br>&gt; There’s Haskell, a language well endowed with cryptic operators, but not prefix !, it uses a ‘not’ function instead.<br>&gt; <br>&gt; You could do the same in Swift, should you wish:<br>&gt; <br>&gt; func not(bool: Bool) -&gt; Bool { return !bool }<br>&gt; <br>&gt; And because in Swift, ‘if’ doesn’t require braces around the predicate, it doesn’t look too bad.<br>&gt; if not(x) { …<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/4b1b8cc9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 15, 2015 at 12:00:00pm</p></header><div class="content"><p>Though the “! means negation” operators are too widely used and too elegant for me to get behind this change, I would say a word in favor of Swift’s loose convention of “! means danger:”<br></p><p>	!  (force unwrap)<br>	!  (IUO)<br>	as!<br>	try!<br></p><p>…all mean “potential crash here.” That’s a nice convention.<br></p><p>However, because not all potential crash points are marked with ! (array subscripting, assert / precondition / fatalError, and of course any function that contains one of the above crashing constructs), we can’t say “danger implies !”. It thus doesn’t seem worth the pain of removing the !, != and !== operators to make the “! implies danger” association strong.<br></p><p>Still, I’d be in favor of anything that helps me audit code for potential crash points — if not changing the negation operators, then perhaps something AST based, perhaps even library annotations. At the very least, I’d appreciate it if SourceKit / Xcode could apply different syntax coloring to the negation bang and the danger bang.<br></p><p>Cheers,<br></p><p>Paul<br></p><p><br>&gt; On Dec 15, 2015, at 12:26 PM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 as well. <br>&gt; <br>&gt; I cannot think of a language where I don’t have ! as negate (which I read as not).<br>&gt; <br>&gt; What would it be replaced by a keyword of “not”?  <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-16, at 1:18:14, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1. In terms of C features that people complain about, prefix &#39;!&#39; for negation doesn&#39;t seem to be high on the list, and it&#39;s never something that has caused me or any other developer I know a problem (although these are all anecdotes, take them as you will). A linter/style checker can always be used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or project.<br>&gt;&gt; <br>&gt;&gt; &#39;~&#39; is already used for bitwise negation.<br>&gt;&gt; <br>&gt;&gt; More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am strongly against the former and for the latter. The symbols are &#39;cryptic&#39; for the few minutes it takes to figure out what they mean, after which the developer is good for a lifetime of coding in many different languages. The words are nicely self-descriptive for a bit, then increase verbosity and destroy your ability to visually delineate arguments via symbols forever.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt; <br>&gt;&gt; if aBool == false {} covers this nicely. <br>&gt;&gt; <br>&gt;&gt; As for the whole topic of words vs cryptic symbols for Boolean operators I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g. either all words, or all math symbols or all the same as in C (current state of things). <br>&gt;&gt; <br>&gt;&gt; You can always rewrite !x as (x==false) if x is a Bool and forced unwrapping is undesirable anyway so the confusion can be minimized in practice. <br>&gt;&gt; <br>&gt;&gt; Ilya. <br>&gt;&gt; <br>&gt;&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I also hit the != vs &lt;&gt; dilema and conclude that we could continue using the != as &quot;not equal&quot;.<br>&gt;&gt; <br>&gt;&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a reasonable price to pay taking into account the issues with ! as &#39;not&#39;. <br>&gt;&gt;  <br>&gt;&gt; Not that I necessarily think this proposal is a good idea. The given examples reek of being against unwrapping for some reason.<br>&gt;&gt; <br>&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue = someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt; <br>&gt;&gt; I think the issue is the complete different meanings of a symbol depending only in where it appears in an expression. Adding that !character is really easy to miss in an expression make it at last uncomfortable.<br>&gt;&gt; <br>&gt;&gt; I agree that we are all really used to find ! in logical expressions and our brain is trained to translate it to NOT automatically but that doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;&gt; <br>&gt;&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt; <br>&gt;&gt; I think that clearly ! is not good choice for negation but my mind is so used to it that I can&#39;t totally affirm that not is the alternative to it. Do we have another alternatives?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/df7ee1cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 15, 2015 at 07:00:00pm</p></header><div class="content"><p>Lua is also quite popular and doesn&#39;t support the &quot;!&quot; operator but the<br>&quot;not&quot; keyword instead.<br>Adapting to that wasn&#39;t all that difficult for me when writing Lua for a<br>while. You rarely have to think about what a negation looks like because<br>&quot;not&quot; just comes to mind naturally. It&#39;s like you&#39;re writing regular text<br>in that moment.<br></p><p>In any case such a decision should not depend primarily on whether a<br>specific operator or keyword is common in other languages but whether it<br>helps expressing and understanding the code&#39;s intent. &quot;not&quot; achieves that,<br>esp. for newbies and people getting someone else&#39;s code.<br></p><p>On Tue, Dec 15, 2015 at 7:45 PM, Paul Cantrell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Though the “! means negation” operators are too widely used and too<br>&gt; elegant for me to get behind this change, I would say a word in favor of<br>&gt; Swift’s loose convention of “! means danger:”<br>&gt;<br>&gt; !  (force unwrap)<br>&gt; !  (IUO)<br>&gt; as!<br>&gt; try!<br>&gt;<br>&gt; …all mean “potential crash here.” That’s a nice convention.<br>&gt;<br>&gt; However, because not all potential crash points are marked with ! (array<br>&gt; subscripting, assert / precondition / fatalError, and of course any<br>&gt; function that contains one of the above crashing constructs), we can’t say<br>&gt; “danger implies !”. It thus doesn’t seem worth the pain of removing the !,<br>&gt; != and !== operators to make the “! implies danger” association strong.<br>&gt;<br>&gt; Still, I’d be in favor of anything that helps me audit code for potential<br>&gt; crash points — if not changing the negation operators, then perhaps<br>&gt; something AST based, perhaps even library annotations. At the very least,<br>&gt; I’d appreciate it if SourceKit / Xcode could apply different syntax<br>&gt; coloring to the negation bang and the danger bang.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; Paul<br>&gt;<br>&gt;<br>&gt; On Dec 15, 2015, at 12:26 PM, Craig Cruden via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; -1 as well.<br>&gt;<br>&gt; I cannot think of a language where I don’t have ! as negate (which I read<br>&gt; as not).<br>&gt;<br>&gt; What would it be replaced by a keyword of “not”?<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 2015-12-16, at 1:18:14, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; -1. In terms of C features that people complain about, prefix &#39;!&#39; for<br>&gt; negation doesn&#39;t seem to be high on the list, and it&#39;s never something that<br>&gt; has caused me or any other developer I know a problem (although these are<br>&gt; all anecdotes, take them as you will). A linter/style checker can always be<br>&gt; used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or<br>&gt; project.<br>&gt;<br>&gt; &#39;~&#39; is already used for bitwise negation.<br>&gt;<br>&gt; More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am<br>&gt; strongly against the former and for the latter. The symbols are &#39;cryptic&#39;<br>&gt; for the few minutes it takes to figure out what they mean, after which the<br>&gt; developer is good for a lifetime of coding in many different languages. The<br>&gt; words are nicely self-descriptive for a bit, then increase verbosity and<br>&gt; destroy your ability to visually delineate arguments via symbols forever.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that<br>&gt;&gt; we know that `aBool` optional it&#39;s not empty before this check. How would<br>&gt;&gt; you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;<br>&gt;&gt; if aBool == false {} covers this nicely.<br>&gt;&gt;<br>&gt;&gt; As for the whole topic of words vs cryptic symbols for Boolean operators<br>&gt;&gt; I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g.<br>&gt;&gt; either all words, or all math symbols or all the same as in C (current<br>&gt;&gt; state of things).<br>&gt;&gt;<br>&gt;&gt; You can always rewrite !x as (x==false) if x is a Bool and forced<br>&gt;&gt; unwrapping is undesirable anyway so the confusion can be minimized in<br>&gt;&gt; practice.<br>&gt;&gt;<br>&gt;&gt; Ilya.<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I also hit the *!=* vs *&lt;&gt;* dilema and conclude that we could continue<br>&gt;&gt;&gt; using the *!=* as &quot;not equal&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a<br>&gt;&gt;&gt; reasonable price to pay taking into account the issues with *!* as<br>&gt;&gt;&gt; &#39;not&#39;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Not that I necessarily think this proposal is a good idea. The given<br>&gt;&gt;&gt;&gt; examples reek of being against unwrapping for some reason.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue<br>&gt;&gt;&gt;&gt; = someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think the issue is the complete different meanings of a symbol<br>&gt;&gt;&gt; depending only in where it appears in an expression. Adding that *!*character<br>&gt;&gt;&gt; is really easy to miss in an expression make it at last uncomfortable.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I agree that we are all really used to find *!* in logical expressions<br>&gt;&gt;&gt; and our brain is trained to translate it to NOT automatically but that<br>&gt;&gt;&gt; doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that<br>&gt;&gt;&gt; we know that `aBool` optional it&#39;s not empty before this check. How would<br>&gt;&gt;&gt; you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think that clearly *!* is not good choice for negation but my mind is<br>&gt;&gt;&gt; so used to it that I can&#39;t totally affirm that *not* is *the* alternative<br>&gt;&gt;&gt; to it. Do we have another alternatives?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/27e8fd91/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>December 15, 2015 at 01:00:00pm</p></header><div class="content"><p>Personally I really don’t mind ! for negation, but if it were to be removed the natural replacement would be ~.  Boolean negation *is* bitwise negation, after all.  != would be spelled ~= a la Lua and MATLAB.<br></p><p>– Steve<br></p><p>&gt; On Dec 15, 2015, at 1:45 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Though the “! means negation” operators are too widely used and too elegant for me to get behind this change, I would say a word in favor of Swift’s loose convention of “! means danger:”<br>&gt; <br>&gt; 	!  (force unwrap)<br>&gt; 	!  (IUO)<br>&gt; 	as!<br>&gt; 	try!<br>&gt; <br>&gt; …all mean “potential crash here.” That’s a nice convention.<br>&gt; <br>&gt; However, because not all potential crash points are marked with ! (array subscripting, assert / precondition / fatalError, and of course any function that contains one of the above crashing constructs), we can’t say “danger implies !”. It thus doesn’t seem worth the pain of removing the !, != and !== operators to make the “! implies danger” association strong.<br>&gt; <br>&gt; Still, I’d be in favor of anything that helps me audit code for potential crash points — if not changing the negation operators, then perhaps something AST based, perhaps even library annotations. At the very least, I’d appreciate it if SourceKit / Xcode could apply different syntax coloring to the negation bang and the danger bang.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Paul<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 15, 2015, at 12:26 PM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 as well. <br>&gt;&gt; <br>&gt;&gt; I cannot think of a language where I don’t have ! as negate (which I read as not).<br>&gt;&gt; <br>&gt;&gt; What would it be replaced by a keyword of “not”?  <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2015-12-16, at 1:18:14, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1. In terms of C features that people complain about, prefix &#39;!&#39; for negation doesn&#39;t seem to be high on the list, and it&#39;s never something that has caused me or any other developer I know a problem (although these are all anecdotes, take them as you will). A linter/style checker can always be used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or project.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &#39;~&#39; is already used for bitwise negation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am strongly against the former and for the latter. The symbols are &#39;cryptic&#39; for the few minutes it takes to figure out what they mean, after which the developer is good for a lifetime of coding in many different languages. The words are nicely self-descriptive for a bit, then increase verbosity and destroy your ability to visually delineate arguments via symbols forever.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if aBool == false {} covers this nicely. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for the whole topic of words vs cryptic symbols for Boolean operators I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g. either all words, or all math symbols or all the same as in C (current state of things). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can always rewrite !x as (x==false) if x is a Bool and forced unwrapping is undesirable anyway so the confusion can be minimized in practice. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ilya. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I also hit the != vs &lt;&gt; dilema and conclude that we could continue using the != as &quot;not equal&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a reasonable price to pay taking into account the issues with ! as &#39;not&#39;. <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Not that I necessarily think this proposal is a good idea. The given examples reek of being against unwrapping for some reason.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue = someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the issue is the complete different meanings of a symbol depending only in where it appears in an expression. Adding that !character is really easy to miss in an expression make it at last uncomfortable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that we are all really used to find ! in logical expressions and our brain is trained to translate it to NOT automatically but that doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think that clearly ! is not good choice for negation but my mind is so used to it that I can&#39;t totally affirm that not is the alternative to it. Do we have another alternatives?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/e5449f15/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>December 15, 2015 at 10:00:00am</p></header><div class="content"><p>Why stop at not? How about? “and or xor. I think C++ allows this optionally <br></p><p>if someOptionalValue != nil {<br>    ...<br>    if not (otherBoolValue and someOptionalValue! &gt; 0) {<br>        ...<br>    }<br>}<br>if otherBoolValue and someOptionalValue or yetAnotherOptionalValue {<br>	if otherBoolValue xor yetAnotherOptionalValue {<br>	}<br>}<br></p><p>&gt; <br>&gt; On Dec 15, 2015, at 10:51 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Personally I really don’t mind ! for negation, but if it were to be removed the natural replacement would be ~.  Boolean negation *is* bitwise negation, after all.  != would be spelled ~= a la Lua and MATLAB.<br>&gt; <br>&gt; – Steve<br>&gt; <br>&gt;&gt; On Dec 15, 2015, at 1:45 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Though the “! means negation” operators are too widely used and too elegant for me to get behind this change, I would say a word in favor of Swift’s loose convention of “! means danger:”<br>&gt;&gt; <br>&gt;&gt; 	!  (force unwrap)<br>&gt;&gt; 	!  (IUO)<br>&gt;&gt; 	as!<br>&gt;&gt; 	try!<br>&gt;&gt; <br>&gt;&gt; …all mean “potential crash here.” That’s a nice convention.<br>&gt;&gt; <br>&gt;&gt; However, because not all potential crash points are marked with ! (array subscripting, assert / precondition / fatalError, and of course any function that contains one of the above crashing constructs), we can’t say “danger implies !”. It thus doesn’t seem worth the pain of removing the !, != and !== operators to make the “! implies danger” association strong.<br>&gt;&gt; <br>&gt;&gt; Still, I’d be in favor of anything that helps me audit code for potential crash points — if not changing the negation operators, then perhaps something AST based, perhaps even library annotations. At the very least, I’d appreciate it if SourceKit / Xcode could apply different syntax coloring to the negation bang and the danger bang.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 15, 2015, at 12:26 PM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 as well. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I cannot think of a language where I don’t have ! as negate (which I read as not).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What would it be replaced by a keyword of “not”?  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 2015-12-16, at 1:18:14, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1. In terms of C features that people complain about, prefix &#39;!&#39; for negation doesn&#39;t seem to be high on the list, and it&#39;s never something that has caused me or any other developer I know a problem (although these are all anecdotes, take them as you will). A linter/style checker can always be used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or project.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &#39;~&#39; is already used for bitwise negation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am strongly against the former and for the latter. The symbols are &#39;cryptic&#39; for the few minutes it takes to figure out what they mean, after which the developer is good for a lifetime of coding in many different languages. The words are nicely self-descriptive for a bit, then increase verbosity and destroy your ability to visually delineate arguments via symbols forever.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if aBool == false {} covers this nicely. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As for the whole topic of words vs cryptic symbols for Boolean operators I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g. either all words, or all math symbols or all the same as in C (current state of things). <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You can always rewrite !x as (x==false) if x is a Bool and forced unwrapping is undesirable anyway so the confusion can be minimized in practice. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ilya. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I also hit the != vs &lt;&gt; dilema and conclude that we could continue using the != as &quot;not equal&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a reasonable price to pay taking into account the issues with ! as &#39;not&#39;. <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Not that I necessarily think this proposal is a good idea. The given examples reek of being against unwrapping for some reason.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue = someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think the issue is the complete different meanings of a symbol depending only in where it appears in an expression. Adding that !character is really easy to miss in an expression make it at last uncomfortable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree that we are all really used to find ! in logical expressions and our brain is trained to translate it to NOT automatically but that doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that clearly ! is not good choice for negation but my mind is so used to it that I can&#39;t totally affirm that not is the alternative to it. Do we have another alternatives?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/22e40aaf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December 15, 2015 at 01:00:00pm</p></header><div class="content"><p>This has come up before:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/2015-December/000032.html<br></p><p>l8r<br>Sean<br></p><p><br></p><p>&gt; On Dec 15, 2015, at 12:59 PM, Paul Ossenbruggen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why stop at not? How about? “and or xor. I think C++ allows this optionally <br>&gt; <br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if not (otherBoolValue and someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt; if otherBoolValue and someOptionalValue or yetAnotherOptionalValue {<br>&gt; 	if otherBoolValue xor yetAnotherOptionalValue {<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 15, 2015, at 10:51 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Personally I really don’t mind ! for negation, but if it were to be removed the natural replacement would be ~.  Boolean negation *is* bitwise negation, after all.  != would be spelled ~= a la Lua and MATLAB.<br>&gt;&gt; <br>&gt;&gt; – Steve<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 15, 2015, at 1:45 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Though the “! means negation” operators are too widely used and too elegant for me to get behind this change, I would say a word in favor of Swift’s loose convention of “! means danger:”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	!  (force unwrap)<br>&gt;&gt;&gt; 	!  (IUO)<br>&gt;&gt;&gt; 	as!<br>&gt;&gt;&gt; 	try!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …all mean “potential crash here.” That’s a nice convention.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, because not all potential crash points are marked with ! (array subscripting, assert / precondition / fatalError, and of course any function that contains one of the above crashing constructs), we can’t say “danger implies !”. It thus doesn’t seem worth the pain of removing the !, != and !== operators to make the “! implies danger” association strong.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Still, I’d be in favor of anything that helps me audit code for potential crash points — if not changing the negation operators, then perhaps something AST based, perhaps even library annotations. At the very least, I’d appreciate it if SourceKit / Xcode could apply different syntax coloring to the negation bang and the danger bang.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Paul<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 15, 2015, at 12:26 PM, Craig Cruden via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1 as well. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I cannot think of a language where I don’t have ! as negate (which I read as not).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What would it be replaced by a keyword of “not”?  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 2015-12-16, at 1:18:14, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1. In terms of C features that people complain about, prefix &#39;!&#39; for negation doesn&#39;t seem to be high on the list, and it&#39;s never something that has caused me or any other developer I know a problem (although these are all anecdotes, take them as you will). A linter/style checker can always be used if you really want to enforce &#39;x == false&#39; over &#39;!x&#39; for your team or project.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &#39;~&#39; is already used for bitwise negation.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; More broadly, in terms of &quot;words&quot; vs &quot;cryptic symbols&quot; as operators, I am strongly against the former and for the latter. The symbols are &#39;cryptic&#39; for the few minutes it takes to figure out what they mean, after which the developer is good for a lifetime of coding in many different languages. The words are nicely self-descriptive for a bit, then increase verbosity and destroy your ability to visually delineate arguments via symbols forever.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 9:59 AM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if aBool == false {} covers this nicely. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As for the whole topic of words vs cryptic symbols for Boolean operators I&#39;m agnostic on what&#39;s best but imho we need to have consistency. E.g. either all words, or all math symbols or all the same as in C (current state of things). <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You can always rewrite !x as (x==false) if x is a Bool and forced unwrapping is undesirable anyway so the confusion can be minimized in practice. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ilya. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 19:56 Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I also hit the != vs &lt;&gt; dilema and conclude that we could continue using the != as &quot;not equal&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It&#39;s true that it will not be as consistent as before but I think it&#39;s a reasonable price to pay taking into account the issues with ! as &#39;not&#39;. <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Not that I necessarily think this proposal is a good idea. The given examples reek of being against unwrapping for some reason.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Why not use `if let aBool = aBool where !aBool`? And `if let someValue = someValue where !(otherBoolValue &amp;&amp; someValue &gt; 0)`?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think the issue is the complete different meanings of a symbol depending only in where it appears in an expression. Adding that !character is really easy to miss in an expression make it at last uncomfortable.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree that we are all really used to find ! in logical expressions and our brain is trained to translate it to NOT automatically but that doesn&#39;t mean that it&#39;s good idea to keep it there.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example in `if let aBool = aBool where !aBool`, let&#39;s suppose that we know that `aBool` optional it&#39;s not empty before this check. How would you write it? `!aBool!` or with the `if let...` ?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think that clearly ! is not good choice for negation but my mind is so used to it that I can&#39;t totally affirm that not is the alternative to it. Do we have another alternatives?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 17, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; I also hit the != vs &lt;&gt; dilema and conclude that we could continue using the != as &quot;not equal&quot;.<br></p><p>While I agree with this, I want to point out that there&#39;s a precedent of /= in Ada. It makes the most sense, if you think about it, because that&#39;s how ≠ looks like.<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/6ec3ea1f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>December 15, 2015 at 10:00:00pm</p></header><div class="content"><p>I never liked &quot;!&quot; because it can so easily be overlooked, so I&#39;m fine with &quot;not&quot;<br></p><p>-Thorsten<br></p><p>&gt; Am 15.12.2015 um 16:01 schrieb Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I&#39;m uncertain but it&#39;s definitely worth considering.<br>&gt; <br>&gt; I also think that it&#39;s weird at the moment since in most cases the exclamation mark is now something dangerous.<br>&gt; I also had a couple of bugs in my code because the operator is too easy to miss and the negation was not or no longer intended.<br>&gt; <br>&gt;&gt; On Tue, Dec 15, 2015 at 3:11 PM, Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I&#39;m really used to negate logical expressions with this operator but it never feels confortable to me. If I need to negate some complex expression sometimes I prefer to write a temporal variable and then negate that with ! because I fear than others, or myself, could overlook it and cause confusion.<br>&gt;&gt; <br>&gt;&gt; Now that Swift use the same operator to force the unwrap of optional values it becomes even worse.<br>&gt;&gt; <br>&gt;&gt; Consider this examples:<br>&gt;&gt; <br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;&gt; <br>&gt;&gt; //Best case<br>&gt;&gt; if let value = optionalBool where !value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //Worse case<br>&gt;&gt; if !optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Now what happen with this examples if we instead use a not operator:<br>&gt;&gt; <br>&gt;&gt; if someOptionalValue != nil {<br>&gt;&gt;     ...<br>&gt;&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let value = optionalBool where not value {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if not optionalBool! {<br>&gt;&gt;     ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure if not is the right path here but I really want to improve the ! to something more clear at a glance and that doesn&#39;t have different behaviour depending where it appears in an expression.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/272545d0/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edd534b347e2276a1e13e4a4c3a872aa?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Tommy van der Vorst</string> &lt;tommy at pixelspark.nl&gt;<p>December 15, 2015 at 05:00:00pm</p></header><div class="content"><p>I do not see a problem with the &#39;!&#39; negation operator. The case with forced unwrap + negation doesn&#39;t happen very often, (in my opinion) doesn&#39;t look that bad, and certainly isn&#39;t confusing. The other example cases also look pretty clear to me. Usage of &#39;!&#39; for implicit unwrapping vs its usage for negation is well-separated (one being prefix, the other postfix). <br></p><p>I *do* see negative effects of removing it: ! is part of virtually all programming languages currently in use, any decent programmer is accustomed to it and read it like &#39;not&#39; in their head anyway. Removing would definitely confuse newcomers to the language. <br></p><p>/T<br></p><p>&gt; Op 15 dec. 2015, om 15:11 heeft Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; het volgende geschreven:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I&#39;m really used to negate logical expressions with this operator but it never feels confortable to me. If I need to negate some complex expression sometimes I prefer to write a temporal variable and then negate that with ! because I fear than others, or myself, could overlook it and cause confusion.<br>&gt; <br>&gt; Now that Swift use the same operator to force the unwrap of optional values it becomes even worse.<br>&gt; <br>&gt; Consider this examples:<br>&gt; <br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt; <br>&gt; //Best case<br>&gt; if let value = optionalBool where !value {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; //Worse case<br>&gt; if !optionalBool! {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; Now what happen with this examples if we instead use a not operator:<br>&gt; <br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; if let value = optionalBool where not value {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; if not optionalBool! {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; I&#39;m not sure if not is the right path here but I really want to improve the ! to something more clear at a glance and that doesn&#39;t have different behaviour depending where it appears in an expression.<br>&gt; <br>&gt; Thanks,<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/ddaf1472/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>December 15, 2015 at 09:00:00am</p></header><div class="content"><p>My vote is to leave &quot;!&quot; as is. I&#39;d support changing the &quot;unwrap&quot; operator<br>to something else.<br></p><p>Sprinkling &quot;not&quot; all over my source files seems noisy to me. Like<br>AppleScript, it sounds good in theory, but in practice the code is no<br>easier to read than before.<br></p><p>I find it kind of strange that the last couple years the internet suddenly<br>views C language features with great suspicion. I have no problem with any<br>of the C features that remain in Swift. I find far more confusing the<br>remaining features and conventions from Obj-C and Cocoa.<br></p><p><br>On Tue, Dec 15, 2015 at 8:05 AM, Tommy van der Vorst via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I do not see a problem with the &#39;!&#39; negation operator. The case with<br>&gt; forced unwrap + negation doesn&#39;t happen very often, (in my opinion) doesn&#39;t<br>&gt; look that bad, and certainly isn&#39;t confusing. The other example cases also<br>&gt; look pretty clear to me. Usage of &#39;!&#39; for implicit unwrapping vs its usage<br>&gt; for negation is well-separated (one being prefix, the other postfix).<br>&gt;<br>&gt; I *do* see negative effects of removing it: ! is part of virtually all<br>&gt; programming languages currently in use, any decent programmer is accustomed<br>&gt; to it and read it like &#39;not&#39; in their head anyway. Removing would<br>&gt; definitely confuse newcomers to the language.<br>&gt;<br>&gt; /T<br>&gt;<br>&gt; Op 15 dec. 2015, om 15:11 heeft Bruno Berisso via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; het volgende geschreven:<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; I&#39;m really used to negate logical expressions with this operator but it<br>&gt; never feels confortable to me. If I need to negate some complex expression<br>&gt; sometimes I prefer to write a temporal variable and then negate that with<br>&gt; *!* because I fear than others, or myself, could overlook it and cause<br>&gt; confusion.<br>&gt;<br>&gt; Now that Swift use the same operator to force the unwrap of optional<br>&gt; values it becomes even worse.<br>&gt;<br>&gt; Consider this examples:<br>&gt;<br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if !(otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Or even worse, what happen when negating Optional&lt;Bool&gt; values?<br>&gt;<br>&gt; //Best case<br>&gt; if let value = optionalBool where !value {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; //Worse case<br>&gt; if !optionalBool! {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; Now what happen with this examples if we instead use a *not* operator:<br>&gt;<br>&gt; if someOptionalValue != nil {<br>&gt;     ...<br>&gt;     if not (otherBoolValue &amp;&amp; someOptionalValue! &gt; 0) {<br>&gt;         ...<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; if let value = optionalBool where not value {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; if not optionalBool! {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; I&#39;m not sure if *not* is the right path here but I really want to improve<br>&gt; the *!* to something more clear at a glance and that doesn&#39;t have<br>&gt; different behaviour depending where it appears in an expression.<br>&gt;<br>&gt; Thanks,<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/c92a3bef/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Remove (!) logical negation operator (swift-evolution Digest, Vol 1, Issue 181)</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 15, 2015 at 05:00:00pm</p></header><div class="content"><p>On 12/15/15 14:05, Tommy van der Vorst wrote:<br>&gt; I *do* see negative effects of removing it: ! is part of virtually<br>&gt; all programming languages currently in use, any decent programmer is<br>&gt; accustomed to it and read it like &#39;not&#39; in their head anyway.<br>&gt; Removing would definitely confuse newcomers to the language.<br></p><p>I agree with that.<br></p><p>However, should `!` be removed, I&#39;d suggest `~` — which already means<br>negation for integers, but is currently not defined on booleans.<br></p><p><br>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator (swift-evolution Digest, Vol 1, Issue 181)</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 15, 2015 at 09:00:00pm</p></header><div class="content"><p>Your email did break out of the thread into its own one.<br>(at least in Google Mail)<br></p><p><br></p><p>On Tue, Dec 15, 2015 at 8:47 PM, Rainer Brockerhoff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 12/15/15 14:05, Tommy van der Vorst wrote:<br>&gt; &gt; I *do* see negative effects of removing it: ! is part of virtually<br>&gt; &gt; all programming languages currently in use, any decent programmer is<br>&gt; &gt; accustomed to it and read it like &#39;not&#39; in their head anyway.<br>&gt; &gt; Removing would definitely confuse newcomers to the language.<br>&gt;<br>&gt; I agree with that.<br>&gt;<br>&gt; However, should `!` be removed, I&#39;d suggest `~` — which already means<br>&gt; negation for integers, but is currently not defined on booleans.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>&gt; Belo Horizonte, Brazil<br>&gt; &quot;In the affairs of others even fools are wise<br>&gt; In their own business even sages err.&quot;<br>&gt; http://brockerhoff.net/blog/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/5907750a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>Remove (!) logical negation operator (swift-evolution Digest, Vol 1, Issue 181)</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>On 12/15/15 18:02, Marc Knaup wrote:<br>&gt; Your email did break out of the thread into its own one.<br>&gt; (at least in Google Mail)<br></p><p>I subscribe to the list in digest form, but tried to use &quot;Undigestify&quot;<br>(on Thunderbird) to hopefully preserve threading. Apparently it threads<br>to the digest, instead of to the digested threads. :-(<br></p><p>BTW, +1 on continuing to use Mailman, despite the threading issue. Not<br>everybody has broadband all the time, and I prefer to have messages<br>stored locally.<br></p><p><br>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>December 15, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 17:05, Tommy van der Vorst via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I *do* see negative effects of removing it: ! is part of virtually all programming languages currently in use, any decent programmer is accustomed to it and read it like &#39;not&#39; in their head anyway. Removing would definitely confuse newcomers to the language. <br></p><p>I completely agree. While it *is* a bit weird to use the same symbol for forced unwrap and its more traditional use as boolean negation, removing the one virtually all other languages have is not the answer. If we do that, why not also ~ for binary negation, || and &amp;&amp; and even + and -.<br></p><p>It’s always a balance between verbosity, “natural language”-ness and terseness. It’s not always easier to read code that’s very verbose, and I’m sure we don’t want Swift to be like AppleScript.<br></p><p>-Sune<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/c38bb78f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 15, 2015 at 09:00:00pm</p></header><div class="content"><p>+1 for clean-up:<br></p><p>• &quot;and&quot; instead of &amp;&amp; <br>• &quot;or&quot; instead of ||<br>• &quot;not&quot; instead of !<br>• if expressions instead of ?!<br></p><p>Easier to read, easier to type, easier to understand for beginners.<br></p><p>As a bonus, it doesn&#39;t look like optionals (less !s and ?s).<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 15 Dec 2015, at 20:49, Sune Foldager via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 15 Dec 2015, at 17:05, Tommy van der Vorst via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I *do* see negative effects of removing it: ! is part of virtually all programming languages currently in use, any decent programmer is accustomed to it and read it like &#39;not&#39; in their head anyway. Removing would definitely confuse newcomers to the language. <br>&gt; <br>&gt; I completely agree. While it *is* a bit weird to use the same symbol for forced unwrap and its more traditional use as boolean negation, removing the one virtually all other languages have is not the answer. If we do that, why not also ~ for binary negation, || and &amp;&amp; and even + and -.<br>&gt; <br>&gt; It’s always a balance between verbosity, “natural language”-ness and terseness. It’s not always easier to read code that’s very verbose, and I’m sure we don’t want Swift to be like AppleScript.<br>&gt; <br>&gt; -Sune<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/bd2735bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>December 15, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 21:13, Rudolf Adamkovic &lt;salutis at me.com&gt; wrote:<br>&gt; <br>&gt; +1 for clean-up:<br>&gt; <br>&gt; • &quot;and&quot; instead of &amp;&amp; <br>&gt; • &quot;or&quot; instead of ||<br>&gt; • &quot;not&quot; instead of !<br>&gt; • if expressions instead of ?!<br></p><p>What you call clean up I would call making needlessly verbose. By the same argument, why not “plus” and “minus”?<br></p><p>&gt; Easier to read, easier to type, easier to understand for beginners.<br></p><p>Symbols are great because they stand out from text, and your variables and class members will be text. There is a reason mathematics uses a lot of symbols as well: It makes it easier to read. There is a learning curve, sure, but the same is the case with text: “and” is that logical or binary and? With symbols, one is &amp;&amp; and the other is &amp;.<br></p><p>&gt; As a bonus, it doesn&#39;t look like optionals (less !s and ?s).<br></p><p>No, instead it looks like AppleScript :(  Catering to beginners is all good, but catering to experienced developers is ultimately more important, I think.<br></p><p>-Sune<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/517d6007/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 15, 2015 at 12:00:00pm</p></header><div class="content"><p>Today &amp;&amp;, ||, (prefix) !, !=, and !== are not magic; they are just like every other operator. Adding user-overridable keyword operators would be a non-trivial change to the language.<br></p><p>(Everyone—nearly—keeps forgetting about != and !==. Replacing these with not(a == b) is not really a good answer.)<br></p><p>Jordan<br></p><p>&gt; On Dec 15, 2015, at 12:13 , Rudolf Adamkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for clean-up:<br>&gt; <br>&gt; • &quot;and&quot; instead of &amp;&amp; <br>&gt; • &quot;or&quot; instead of ||<br>&gt; • &quot;not&quot; instead of !<br>&gt; • if expressions instead of ?!<br>&gt; <br>&gt; Easier to read, easier to type, easier to understand for beginners.<br>&gt; <br>&gt; As a bonus, it doesn&#39;t look like optionals (less !s and ?s).<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 15 Dec 2015, at 20:49, Sune Foldager via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 15 Dec 2015, at 17:05, Tommy van der Vorst via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I *do* see negative effects of removing it: ! is part of virtually all programming languages currently in use, any decent programmer is accustomed to it and read it like &#39;not&#39; in their head anyway. Removing would definitely confuse newcomers to the language. <br>&gt;&gt; <br>&gt;&gt; I completely agree. While it *is* a bit weird to use the same symbol for forced unwrap and its more traditional use as boolean negation, removing the one virtually all other languages have is not the answer. If we do that, why not also ~ for binary negation, || and &amp;&amp; and even + and -.<br>&gt;&gt; <br>&gt;&gt; It’s always a balance between verbosity, “natural language”-ness and terseness. It’s not always easier to read code that’s very verbose, and I’m sure we don’t want Swift to be like AppleScript.<br>&gt;&gt; <br>&gt;&gt; -Sune<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/c53fa640/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44fe7c93c07e30efe1de26f850cf9669?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Bruno Berisso</string> &lt;gojan.wan at gmail.com&gt;<p>December 15, 2015 at 09:00:00pm</p></header><div class="content"><p>Keep in mind that the discussion isn&#39;t &quot;!&quot; vs &quot;not&quot; but how to address<br>basically two issues with &quot;!&quot;:<br>- invisibility in non-trivial expressions<br>- collision with the forced unwrapped of optional values<br></p><p>I personally collect really good arguments against the use of &quot;not&quot; as an<br>alternative to address this two issues without being to disruptive.<br></p><p>I think that the best option we have until now is &quot;~&quot; used for bitwise<br>&quot;not&quot; operation. This bring the next question: why we need to distinguish<br>between bitwise logical operators and boolean logical ones? Doesn&#39;t that<br>should be implicit in the type of the operands?<br></p><p>The bitwise operators are not defined for Bool types and logical operations<br>are only defined for Booleans. So we could have:<br></p><p>boolValueX &amp; boolValueY = Boolean &quot;and&quot;<br>notBoolX &amp; notBoolY = bitwise &quot;and&quot;<br>~boolValueX = Boolean &quot;not&quot;<br>~notBoolX = bitwise &quot;not&quot;<br></p><p>I&#39;m thinking out loud here so let me know if this doesn&#39;t make sense.<br>On Tue, Dec 15, 2015 at 17:33 Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Today &amp;&amp;, ||, (prefix) !, !=, and !== are not magic; they are just like<br>&gt; every other operator. Adding user-overridable keyword operators would be a<br>&gt; non-trivial change to the language.<br>&gt;<br>&gt; (Everyone—nearly—keeps forgetting about != and !==. Replacing these with<br>&gt; not(a == b) is not really a good answer.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On Dec 15, 2015, at 12:13 , Rudolf Adamkovic via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1 for clean-up:<br>&gt;<br>&gt; • &quot;and&quot; instead of &amp;&amp;<br>&gt; • &quot;or&quot; instead of ||<br>&gt; • &quot;not&quot; instead of !<br>&gt; • if expressions instead of ?!<br>&gt;<br>&gt; Easier to read, easier to type, easier to understand for beginners.<br>&gt;<br>&gt; As a bonus, it doesn&#39;t look like optionals (less !s and ?s).<br>&gt;<br>&gt; R+<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 15 Dec 2015, at 20:49, Sune Foldager via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 15 Dec 2015, at 17:05, Tommy van der Vorst via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I *do* see negative effects of removing it: ! is part of virtually all<br>&gt; programming languages currently in use, any decent programmer is accustomed<br>&gt; to it and read it like &#39;not&#39; in their head anyway. Removing would<br>&gt; definitely confuse newcomers to the language.<br>&gt;<br>&gt;<br>&gt; I completely agree. While it *is* a bit weird to use the same symbol for<br>&gt; forced unwrap and its more traditional use as boolean negation, removing<br>&gt; the one virtually all other languages have is not the answer. If we do<br>&gt; that, why not also ~ for binary negation, || and &amp;&amp; and even + and -.<br>&gt;<br>&gt; It’s always a balance between verbosity, “natural language”-ness and<br>&gt; terseness. It’s not always easier to read code that’s very verbose, and I’m<br>&gt; sure we don’t want Swift to be like AppleScript.<br>&gt;<br>&gt; -Sune<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/f4d508ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 15, 2015 at 10:00:00pm</p></header><div class="content"><p>~ is just trading one operator for another, which isn&#39;t a lot better.<br>Also ~ is quire annoying to type on non-english keyboards.<br></p><p>&quot;&amp;&quot; and &quot;|&quot; have a different meaning than &quot;&amp;&amp;&quot; and &quot;||&quot;.<br>The former two evaluate both operands and then perform the logical<br>operation on the results.<br>The latter two evaluate the right operand iff the left operand is true or<br>false respectively.<br></p><p>On Tue, Dec 15, 2015 at 10:17 PM, Bruno Berisso via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Keep in mind that the discussion isn&#39;t &quot;!&quot; vs &quot;not&quot; but how to address<br>&gt; basically two issues with &quot;!&quot;:<br>&gt; - invisibility in non-trivial expressions<br>&gt; - collision with the forced unwrapped of optional values<br>&gt;<br>&gt; I personally collect really good arguments against the use of &quot;not&quot; as an<br>&gt; alternative to address this two issues without being to disruptive.<br>&gt;<br>&gt; I think that the best option we have until now is &quot;~&quot; used for bitwise<br>&gt; &quot;not&quot; operation. This bring the next question: why we need to distinguish<br>&gt; between bitwise logical operators and boolean logical ones? Doesn&#39;t that<br>&gt; should be implicit in the type of the operands?<br>&gt;<br>&gt; The bitwise operators are not defined for Bool types and logical<br>&gt; operations are only defined for Booleans. So we could have:<br>&gt;<br>&gt; boolValueX &amp; boolValueY = Boolean &quot;and&quot;<br>&gt; notBoolX &amp; notBoolY = bitwise &quot;and&quot;<br>&gt; ~boolValueX = Boolean &quot;not&quot;<br>&gt; ~notBoolX = bitwise &quot;not&quot;<br>&gt;<br>&gt; I&#39;m thinking out loud here so let me know if this doesn&#39;t make sense.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 17:33 Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Today &amp;&amp;, ||, (prefix) !, !=, and !== are not magic; they are just like<br>&gt;&gt; every other operator. Adding user-overridable keyword operators would be a<br>&gt;&gt; non-trivial change to the language.<br>&gt;&gt;<br>&gt;&gt; (Everyone—nearly—keeps forgetting about != and !==. Replacing these with<br>&gt;&gt; not(a == b) is not really a good answer.)<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt; On Dec 15, 2015, at 12:13 , Rudolf Adamkovic via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; +1 for clean-up:<br>&gt;&gt;<br>&gt;&gt; • &quot;and&quot; instead of &amp;&amp;<br>&gt;&gt; • &quot;or&quot; instead of ||<br>&gt;&gt; • &quot;not&quot; instead of !<br>&gt;&gt; • if expressions instead of ?!<br>&gt;&gt;<br>&gt;&gt; Easier to read, easier to type, easier to understand for beginners.<br>&gt;&gt;<br>&gt;&gt; As a bonus, it doesn&#39;t look like optionals (less !s and ?s).<br>&gt;&gt;<br>&gt;&gt; R+<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On 15 Dec 2015, at 20:49, Sune Foldager via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 15 Dec 2015, at 17:05, Tommy van der Vorst via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I *do* see negative effects of removing it: ! is part of virtually all<br>&gt;&gt; programming languages currently in use, any decent programmer is accustomed<br>&gt;&gt; to it and read it like &#39;not&#39; in their head anyway. Removing would<br>&gt;&gt; definitely confuse newcomers to the language.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I completely agree. While it *is* a bit weird to use the same symbol for<br>&gt;&gt; forced unwrap and its more traditional use as boolean negation, removing<br>&gt;&gt; the one virtually all other languages have is not the answer. If we do<br>&gt;&gt; that, why not also ~ for binary negation, || and &amp;&amp; and even + and -.<br>&gt;&gt;<br>&gt;&gt; It’s always a balance between verbosity, “natural language”-ness and<br>&gt;&gt; terseness. It’s not always easier to read code that’s very verbose, and I’m<br>&gt;&gt; sure we don’t want Swift to be like AppleScript.<br>&gt;&gt;<br>&gt;&gt; -Sune<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/41054e3b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 22:17, Bruno Berisso via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Keep in mind that the discussion isn&#39;t &quot;!&quot; vs &quot;not&quot; but how to address basically two issues with &quot;!&quot;:<br>&gt; - invisibility in non-trivial expressions<br>&gt; - collision with the forced unwrapped of optional values<br></p><p>I’ve coded with C and C like languages for more years than I like to admit and this thread is the first time I’ve ever heard that there is a problem with the visibility of the ! operator. <br></p><p>I also am quite surprised that the overloading of the meaning of symbols is a serious issue. It’s natural for people to distinguish the meaning of things by context. C programmers don’t complain that they are always confusing pointer dereferencing with multiplication do they? No.<br></p><p>I am -1 for replacing a perfectly adequate symbol with a word, because it is much harder to distinguish operators that are words from the identifiers they operate on (for this reason I am against replacing ?: with if then else too).  <br></p><p>Having said all that...<br></p><p>&gt; <br>&gt; I think that the best option we have until now is &quot;~&quot; used for bitwise &quot;not&quot; operation. This bring the next question: why we need to distinguish between bitwise logical operators and boolean logical ones? Doesn&#39;t that should be implicit in the type of the operands?<br></p><p>I think this is a fantastic idea. Given that there is a first class boolean type in Swift and we no longer have to pretend that ints are bools, there is no reason not to use ~ for logical negation of both types. The ! and &amp;&amp; and || operators only exist at all because C uses the same type for both bools and small arrays of bits.<br></p><p><br>&gt; <br>&gt; The bitwise operators are not defined for Bool types and logical operations are only defined for Booleans. So we could have:<br>&gt; <br>&gt; boolValueX &amp; boolValueY = Boolean &quot;and&quot;<br>&gt; notBoolX &amp; notBoolY = bitwise &quot;and&quot;<br>&gt; ~boolValueX = Boolean &quot;not&quot;<br>&gt; ~notBoolX = bitwise “not&quot;<br>&gt; <br>&gt; I&#39;m thinking out loud here so let me know if this doesn&#39;t make sense.<br></p><p>The only problem with this is what it does to existing code. I think you would have to introduce them in parallel with the old p=operators and a deprecation warning.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; <br>&gt;&gt; <br>&gt;&gt; I think that the best option we have until now is &quot;~&quot; used for bitwise &quot;not&quot; operation. This bring the next question: why we need to distinguish between bitwise logical operators and boolean logical ones? Doesn&#39;t that should be implicit in the type of the operands?<br>&gt; <br>&gt; I think this is a fantastic idea. Given that there is a first class boolean type in Swift and we no longer have to pretend that ints are bools, there is no reason not to use ~ for logical negation of both types. The ! and &amp;&amp; and || operators only exist at all because C uses the same type for both bools and small arrays of bits.<br></p><p>Forgot about the short circuiting of &amp;&amp; and ||. We have to keep them.<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 15, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 20:33, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Today &amp;&amp;, ||, (prefix) !, !=, and !== are not magic; they are just like every other operator. Adding user-overridable keyword operators would be a non-trivial change to the language.<br>&gt; <br>&gt; (Everyone—nearly—keeps forgetting about != and !==. Replacing these with not(a == b) is not really a good answer.)<br>&gt; <br>&gt; Jordan<br></p><p><br>There’s always /= and /== (not a serious suggestion, but it could work : )<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/0cd3fe37/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 15, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 12:13 PM, Rudolf Adamkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for clean-up:<br>&gt; <br>&gt; • &quot;and&quot; instead of &amp;&amp; <br>&gt; • &quot;or&quot; instead of ||<br>&gt; • &quot;not&quot; instead of !<br>&gt; • if expressions instead of ?!<br>&gt; <br>&gt; Easier to read, easier to type, easier to understand for beginners.<br></p><p>FWIW, this is not a likely direction for Swift, and has been discussed before:<br>https://lists.swift.org/pipermail/swift-evolution/2015-December/000032.html<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 15, 2015 at 10:00:00pm</p></header><div class="content"><p>Ah, haven&#39;t see that one. Very interesting!<br></p><p>Sent from my iPhone<br></p><p>&gt; On 15 Dec 2015, at 22:41, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 15, 2015, at 12:13 PM, Rudolf Adamkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 for clean-up:<br>&gt;&gt; <br>&gt;&gt; • &quot;and&quot; instead of &amp;&amp; <br>&gt;&gt; • &quot;or&quot; instead of ||<br>&gt;&gt; • &quot;not&quot; instead of !<br>&gt;&gt; • if expressions instead of ?!<br>&gt;&gt; <br>&gt;&gt; Easier to read, easier to type, easier to understand for beginners.<br>&gt; <br>&gt; FWIW, this is not a likely direction for Swift, and has been discussed before:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000032.html<br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>December 17, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; +1 for clean-up:<br>&gt; <br>&gt; • &quot;and&quot; instead of &amp;&amp; <br>&gt; • &quot;or&quot; instead of ||<br>&gt; • &quot;not&quot; instead of !<br>&gt; • if expressions instead of ?!<br></p><p>+1 from me as well. Should be a separate proposal, though?<br></p><p>I understand the concern that Chris expressed before:<br></p><p>&gt; We’ve briefly considered this in the past.  However, this doesn’t align well with the design of swift, which partitions infix and prefix operators into their own namespace (composed of operator characters) and normal identifiers (composed of “identifier characters”).  You can see the grammar for this in the Swift Programming Language Reference.<br></p><p>...but I don&#39;t see why the language cannot be extended to allow defining and using identifiers as operators.<br></p><p>A.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/5570bb34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44fe7c93c07e30efe1de26f850cf9669?s=50"></div><header><strong>Remove (!) logical negation operator</strong> from <string>Bruno Berisso</string> &lt;gojan.wan at gmail.com&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>I think that my original proposal was clearly discarded (twenty mails ago)<br>so to preserve order please consider open other threads to continue the<br>discussions started here.<br></p><p>I really enjoyed sharing thoughts with you guys :) Thanks to everyone for<br>participate.<br>On Thu, Dec 17, 2015 at 08:29 Andrey Tarantsov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for clean-up:<br>&gt;<br>&gt; • &quot;and&quot; instead of &amp;&amp;<br>&gt; • &quot;or&quot; instead of ||<br>&gt; • &quot;not&quot; instead of !<br>&gt; • if expressions instead of ?!<br>&gt;<br>&gt;<br>&gt; +1 from me as well. Should be a separate proposal, though?<br>&gt;<br>&gt; I understand the concern that Chris expressed before:<br>&gt;<br>&gt; &gt; We’ve briefly considered this in the past. However, this doesn’t align<br>&gt; well with the design of swift, which partitions infix and prefix operators<br>&gt; into their own namespace (composed of operator characters) and normal<br>&gt; identifiers (composed of “identifier characters”). You can see the grammar<br>&gt; for this in the Swift Programming Language Reference.<br>&gt;<br>&gt; ...but I don&#39;t see why the language cannot be extended to allow defining<br>&gt; and using identifiers as operators.<br>&gt;<br>&gt; A.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/d17a7b78/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
