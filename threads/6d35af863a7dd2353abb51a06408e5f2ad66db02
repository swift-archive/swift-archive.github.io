<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  6, 2016 at 07:00:00am</p></header><div class="content"><p>Starting a grouped discussion about these four:<br></p><p>* The global function withUnsafe[Mutable]Pointer(&amp;x) should have an argument label “to”. (https://bugs.swift.org/browse/SR-1937 rdar://problem/26529498.)<br></p><p>I think this one is clear and obvious.<br></p><p>* Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it. If there are any, it should be renamed to unsafeAddress(of:) to follow the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 rdar://problem/18589289)<br></p><p>* Consider renaming or eliminating ManagedProtoBuffer. &quot;The reason why ManagedProtoBuffer exists is to give the users an extra bit of type safety inside of the closure passed to ManagedBuffer.create(). This closure receives the ManagedBuffer instance and returns the initial value that is stored in the buffer (the header part of the buffer). We are passing the ManagedBuffer as ManagedProtoBuffer to prevent the closure from reading the uninitialized value property. Maybe this extra bit of safety is not worth the API surface complexity.&quot; (https://bugs.swift.org/browse/SR-1955 rdar://problem/26012924 rdar://problem/27118532.&quot;)<br></p><p>* withUnsafePointer shouldn&#39;t take its argument as inout. (https://bugs.swift.org/browse/SR-1956 rdar://problem/25019862) Note: &quot;Jordan has objections, see https://bugs.swift.org/browse/SR-1956&quot;<br></p><p>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/6d35db02/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it. If there are any, it should be renamed to unsafeAddress(of:) to follow the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 &lt;https://bugs.swift.org/browse/SR-1957&gt; rdar://problem/18589289 &lt;rdar://problem/18589289&gt;)<br></p><p>I&#39;ve mentioned on the bug report a few places in my code where I use the unsafeAddressOf - it can be used nicely to log the pointer to an instance - useful for debugging and is much shorter than <br></p><p>Unmanaged.passUnretained(x).toOpaque()<br></p><p>as Dmitri suggested - and clearer in a way - you are logging an address, you shouldn&#39;t have to deal with retain/unretained at all.<br></p><p>I&#39;m definitely for keeping it around, the renaming seems good to me. Alternative to renaming it is to move this under Unmanaged:<br></p><p>Unmanaged.address(of: obj)<br></p><p>BTW Xcode 8 already sees it as renamed to unsafeAddress(of:).<br></p><p>&gt; * Consider renaming or eliminating ManagedProtoBuffer. &quot;The reason why ManagedProtoBuffer exists is to give the users an extra bit of type safety inside of the closure passed to ManagedBuffer.create(). This closure receives the ManagedBuffer instance and returns the initial value that is stored in the buffer (the header part of the buffer). We are passing the ManagedBuffer as ManagedProtoBuffer to prevent the closure from reading the uninitialized value property. Maybe this extra bit of safety is not worth the API surface complexity.&quot; (https://bugs.swift.org/browse/SR-1955 &lt;https://bugs.swift.org/browse/SR-1955&gt; rdar://problem/26012924 &lt;rdar://problem/26012924&gt; rdar://problem/27118532 &lt;rdar://problem/27118532&gt;.&quot;)<br>&gt; <br>&gt; * withUnsafePointer shouldn&#39;t take its argument as inout. (https://bugs.swift.org/browse/SR-1956 &lt;https://bugs.swift.org/browse/SR-1956&gt; rdar://problem/25019862 &lt;rdar://problem/25019862&gt;) Note: &quot;Jordan has objections, see https://bugs.swift.org/browse/SR-1956 &lt;https://bugs.swift.org/browse/SR-1956&gt;&quot;<br>&gt; <br>&gt; -- E<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/f3b070bf/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  6, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jul 6, 2016, at 7:51 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it. If there are any, it should be renamed to unsafeAddress(of:) to follow the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 &lt;https://bugs.swift.org/browse/SR-1957&gt; rdar://problem/18589289 &lt;rdar://problem/18589289&gt;)<br>&gt; <br>&gt; I&#39;ve mentioned on the bug report a few places in my code where I use the unsafeAddressOf - it can be used nicely to log the pointer to an instance - useful for debugging and is much shorter than <br>&gt; <br>&gt; Unmanaged.passUnretained(x).toOpaque()<br>&gt; <br>&gt; as Dmitri suggested - and clearer in a way - you are logging an address, you shouldn&#39;t have to deal with retain/unretained at all.<br>&gt; <br>&gt; I&#39;m definitely for keeping it around, the renaming seems good to me. Alternative to renaming it is to move this under Unmanaged:<br>&gt; <br>&gt; Unmanaged.address(of: obj)<br>&gt; <br>&gt; BTW Xcode 8 already sees it as renamed to unsafeAddress(of:).<br></p><p>Can you take lead on this batch of items? It sounds like you have an existing interest and expertise.<br></p><p>-- E<br>&gt; <br>&gt;&gt; * Consider renaming or eliminating ManagedProtoBuffer. &quot;The reason why ManagedProtoBuffer exists is to give the users an extra bit of type safety inside of the closure passed to ManagedBuffer.create(). This closure receives the ManagedBuffer instance and returns the initial value that is stored in the buffer (the header part of the buffer). We are passing the ManagedBuffer as ManagedProtoBuffer to prevent the closure from reading the uninitialized value property. Maybe this extra bit of safety is not worth the API surface complexity.&quot; (https://bugs.swift.org/browse/SR-1955 &lt;https://bugs.swift.org/browse/SR-1955&gt; rdar://problem/26012924 &lt;rdar://problem/26012924&gt; rdar://problem/27118532 &lt;rdar://problem/27118532&gt;.&quot;)<br>&gt;&gt; <br>&gt;&gt; * withUnsafePointer shouldn&#39;t take its argument as inout. (https://bugs.swift.org/browse/SR-1956 &lt;https://bugs.swift.org/browse/SR-1956&gt; rdar://problem/25019862 &lt;rdar://problem/25019862&gt;) Note: &quot;Jordan has objections, see https://bugs.swift.org/browse/SR-1956 &lt;https://bugs.swift.org/browse/SR-1956&gt;&quot;<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/f5441353/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July  6, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; * *Remove unsafeAddressOf*. &quot;We are not aware of any real use cases for<br>&gt; it. If there are any, it should be renamed to unsafeAddress(of:) to follow<br>&gt; the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957<br>&gt; rdar://problem/18589289)<br>&gt;<br>&gt;<br>Oops, I just responded to this on another thread. Pasting:<br></p><p>It&#39;s minor, but I use unsafeAddressOf regularly for writing `description`<br>methods:<br></p><p>    var description: String {<br>        return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info<br>here... }&quot;<br>    }<br></p><p>I guess this would be covered by some generalized solution for format<br>specifiers in string interpolations, but I gather that won&#39;t happen for<br>quite a while...<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/ec163b14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 6, 2016, at 11:03, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it. If there are any, it should be renamed to unsafeAddress(of:) to follow the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 &lt;https://bugs.swift.org/browse/SR-1957&gt; rdar://problem/18589289 &lt;&gt;)<br>&gt; <br>&gt; <br>&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt; <br>&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description` methods:<br>&gt; <br>&gt;     var description: String {<br>&gt;         return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info here... }&quot;<br>&gt;     }<br>&gt; <br>&gt; I guess this would be covered by some generalized solution for format specifiers in string interpolations, but I gather that won&#39;t happen for quite a while... <br></p><p>I believe `ObjectIdentifier(self)` prints basically the same way.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/09a13738/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  7, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jul 7, 2016, at 12:46 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 6, 2016, at 11:03, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it. If there are any, it should be renamed to unsafeAddress(of:) to follow the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 &lt;https://bugs.swift.org/browse/SR-1957&gt; rdar://problem/18589289 &lt;&gt;)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt;&gt; <br>&gt;&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description` methods:<br>&gt;&gt; <br>&gt;&gt;     var description: String {<br>&gt;&gt;         return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info here... }&quot;<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; I guess this would be covered by some generalized solution for format specifiers in string interpolations, but I gather that won&#39;t happen for quite a while... <br>&gt; <br>&gt; I believe `ObjectIdentifier(self)` prints basically the same way.<br>&gt; <br>&gt; Jordan<br></p><p>Unfortunately, it doesn&#39;t:<br></p><p>print(&quot;\(ObjectIdentifier(obj))&quot;)<br></p><p>--&gt; ObjectIdentifier(_value: (Opaque Value))<br></p><p><br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/633a842a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July  7, 2016 at 08:00:00am</p></header><div class="content"><p>On Wed, Jul 6, 2016 at 9:57 PM, Charlie Monroe via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Jul 7, 2016, at 12:46 AM, Jordan Rose via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jul 6, 2016, at 11:03, Jacob Bandes-Storch via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it.<br>&gt;&gt; If there are any, it should be renamed to unsafeAddress(of:) to follow the<br>&gt;&gt; guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 rdar://problem/18589289)<br>&gt;&gt;<br>&gt;<br>&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt;<br>&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description`<br>&gt; methods:<br>&gt;<br>&gt;     var description: String {<br>&gt;         return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info<br>&gt; here... }&quot;<br>&gt;     }<br>&gt;<br>&gt; I guess this would be covered by some generalized solution for format<br>&gt; specifiers in string interpolations, but I gather that won&#39;t happen for<br>&gt; quite a while...<br>&gt;<br>&gt;<br>&gt; I believe `ObjectIdentifier(self)` prints basically the same way.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; Unfortunately, it doesn&#39;t:<br>&gt;<br>&gt; print(&quot;\(ObjectIdentifier(obj))&quot;)<br>&gt;<br>&gt; --&gt; ObjectIdentifier(_value: (Opaque Value))<br></p><p>We should absolutely fix that (does not even require a swift-evolution<br>proposal).  This string that it converts to is completely useless.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 7, 2016, at 08:58, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Jul 6, 2016 at 9:57 PM, Charlie Monroe via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Jul 7, 2016, at 12:46 AM, Jordan Rose via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 6, 2016, at 11:03, Jacob Bandes-Storch via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it.<br>&gt;&gt;&gt; If there are any, it should be renamed to unsafeAddress(of:) to follow the<br>&gt;&gt;&gt; guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 rdar://problem/18589289)<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt;&gt; <br>&gt;&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description`<br>&gt;&gt; methods:<br>&gt;&gt; <br>&gt;&gt;    var description: String {<br>&gt;&gt;        return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info<br>&gt;&gt; here... }&quot;<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; I guess this would be covered by some generalized solution for format<br>&gt;&gt; specifiers in string interpolations, but I gather that won&#39;t happen for<br>&gt;&gt; quite a while...<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I believe `ObjectIdentifier(self)` prints basically the same way.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Unfortunately, it doesn&#39;t:<br>&gt;&gt; <br>&gt;&gt; print(&quot;\(ObjectIdentifier(obj))&quot;)<br>&gt;&gt; <br>&gt;&gt; --&gt; ObjectIdentifier(_value: (Opaque Value))<br>&gt; <br>&gt; We should absolutely fix that (does not even require a swift-evolution<br>&gt; proposal).  This string that it converts to is completely useless.<br></p><p>Filed a starter bug, https://bugs.swift.org/browse/SR-2014.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/ca0090a0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>As was pointed out to me in the bug report, the preferred way to get a pointer is to use<br></p><p>Unmanaged.passUnretained(obj).toOpaque()<br></p><p>I see a few issues, though (aside from toOpaque() missing in Xcode 8b1, haven&#39;t installed b2 yet):<br></p><p>- it is quite a verbose way of something I consider should be trivial - getting an address of an object.<br>- it requires the caller to deal with retain cycle which I don&#39;t think should be explicit for getting an address of an object.<br></p><p>I&#39;d personally leave it in the language as it feels similar to dynamicType(obj) and can be a nice-to-have debugging tool.<br></p><p>The most confusing part about unsafeAddress(of:) is implicit bridging which creates a new instance e.g. in case of String, in order to satisfy the AnyObject requirement. Fortunately, this will get eliminated by SE-0072 and Unmanaged suffered from the same issue, though it required you to specify either Unmanaged&lt;NSString&gt; or Unmanaged&lt;AnyObject&gt;.<br></p><p>&gt; On Jul 6, 2016, at 8:03 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; * Remove unsafeAddressOf. &quot;We are not aware of any real use cases for it. If there are any, it should be renamed to unsafeAddress(of:) to follow the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957 &lt;https://bugs.swift.org/browse/SR-1957&gt; rdar://problem/18589289 &lt;&gt;)<br>&gt; <br>&gt; <br>&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt; <br>&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description` methods:<br>&gt; <br>&gt;     var description: String {<br>&gt;         return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info here... }&quot;<br>&gt;     }<br>&gt; <br>&gt; I guess this would be covered by some generalized solution for format specifiers in string interpolations, but I gather that won&#39;t happen for quite a while... <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/312cddea/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
