<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/adc8acb62c552a6f1ea81dd19ac3bbc3?s=50"></div><header><strong>Swift Strangeness? Failable initializer overriding non-failable vs. default parameters</strong> from <string>swu.tulux at xoxy.net</string> &lt;swu.tulux at xoxy.net&gt;<p>September  1, 2016 at 11:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>recently I stumbled upon an interesting and slightly confusing aspect of our favorite language. <br></p><p>I had defined a Cache class to conform to NSCoding and inherit from NSObject. My class’s initializer was declared init?(entries: [Entry]? = nil) at first, giving an option to pre-populate it when called from the NSCoding-conformant initializer but also simply start from scratch in my program. Failability is a valuable feature since the class depends on external resources that could be unavailable. Of course there are other means to model this, but a failable initializer is the most elegant one, I think.<br></p><p>Later on, I decided to make the Entry class private to my Cache class.<br></p><p>Now I had to split the initializer in a private init?(entries: [Entry]?) and an internal or public convenience init?().<br></p><p>I’ll abstract a bit now:<br></p><p><br>First version:<br></p><p>public class A: NSObject {<br>	public class X { }<br>	public init?(x: X? = nil) { }<br>}<br></p><p>— all good. I can use it like let a = A() in my program.<br></p><p>Second version:<br></p><p>public class B: NSObject {<br>	private class X { }<br>	private init?(x: X?) { }<br>	public convenience override init?() { self.init(x: nil) }	// ERROR<br>}<br></p><p>Now the compiler complains &quot;failable initializer &#39;init()&#39; cannot override a non-failable initializer&quot; with the overridden initializer being the public init() in NSObject. This is the same in Swift 2 and 3.<br>Omitting the override does not work, the compiler now says “overriding declaration requires an &#39;override’ keyword&quot;, so it does count as overriding anyway. Suggested Fix-it is inserting override, giving the other error.<br></p><p>How comes I can effectively declare an initializer A.init?() without the conflict but not B.init?() ?<br></p><p>And: Why at all am I not allowed to override a non-failable initializer with a failable one? The opposite is legal: I can override a failable initializer with a non-failable, which even requires using a forced super.init()! and thus introduces the risk of a runtime error. I always have a bad feeling when I use !, so I try to avoid it whenever possible. I would even accept to get a compiler warning ;-)<br></p><p>To me, letting the subclass have the failable initializer feels more natural since an extension of functionality introduces more chance of failure. But maybe I am missing something here – explanation greatly appreciated.<br></p><p>But I found a workaround. My class now looks like this:<br></p><p>public class C: NSObject {<br>	private class X { }<br>	private init?(x: X?) { }<br>	public convenience init?(_: Void) { self.init(x: nil) }		// NO ERROR<br>}<br></p><p>Now I can use it like let c = C(()) or even let c = C() – which is exactly what I intended at first.<br></p><p>The fact that the new declaration does not generate an error message seems (kind of) legal since it (somehow) differs from the superclass initializer&#39;s signature. Nevertheless, using a nameless Void parameter at all and then even omitting it completely in the 2nd version of the call feels a bit strange… But the end justifies the means, I suppose. Elegance is almost preserved.<br></p><p>What do you think?<br></p><p>Sincerely,<br>Stefan<br></p><p>PS: I already posted this question on Stack Overflow &lt;http://stackoverflow.com/q/38311365/1950945&gt;, but for the more philosophical aspects / underpinnings, it is not the right medium — you are obliged to ask a concrete question there (How to?, not Why?).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160901/dd5bab13/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
