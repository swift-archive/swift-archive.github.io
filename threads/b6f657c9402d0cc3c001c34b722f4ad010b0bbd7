<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Posix Module</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>October 28, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I guess this kinda belongs here:<br></p><p>I wonder whether we can have a standard Posix module with all the standard Posix stuff in it to avoid the<br></p><p>  #if os(Linux)<br>    import Glibc<br>  #else<br>    import Darwin<br>  #endif<br></p><p>for things which are standardised in Posix (and hence the same, even on Windoze). I currently have an `xsys` module to alias the definitions, but this is kinda crap :-)<br></p><p>  https://github.com/NozeIO/Noze.io/tree/master/Sources/xsys<br></p><p>Or is there a better way to do this already?<br></p><p>Thanks,<br>  Helge<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 842 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161028/b6f6bbd7/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Posix Module</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 28, 2016 at 03:00:00pm</p></header><div class="content"><p>Given the Glibc overlay lives in Swift, this probably is more appropriate for swift-dev rather than the server APIs project specifically.<br></p><p> - Daniel<br></p><p>&gt; On Oct 28, 2016, at 8:51 AM, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I guess this kinda belongs here:<br>&gt; <br>&gt; I wonder whether we can have a standard Posix module with all the standard Posix stuff in it to avoid the<br>&gt; <br>&gt;  #if os(Linux)<br>&gt;    import Glibc<br>&gt;  #else<br>&gt;    import Darwin<br>&gt;  #endif<br>&gt; <br>&gt; for things which are standardised in Posix (and hence the same, even on Windoze). I currently have an `xsys` module to alias the definitions, but this is kinda crap :-)<br>&gt; <br>&gt;  https://github.com/NozeIO/Noze.io/tree/master/Sources/xsys<br>&gt; <br>&gt; Or is there a better way to do this already?<br>&gt; <br>&gt; Thanks,<br>&gt;  Helge<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Posix Module</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>October 29, 2016 at 08:00:00pm</p></header><div class="content"><p>Actually swift-evolution. There was a thread about it already:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160307/012085.html<br></p><p>It was only a draft but people IIRC people viewed it favorably (don&#39;t quote me on this though, my memory might be wrong). Perhaps no one got behind implementing it? (again my memory is gone).<br></p><p>Michael<br></p><p>&gt; On Oct 28, 2016, at 3:56 PM, Daniel Dunbar via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Given the Glibc overlay lives in Swift, this probably is more appropriate for swift-dev rather than the server APIs project specifically.<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Oct 28, 2016, at 8:51 AM, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I guess this kinda belongs here:<br>&gt;&gt; <br>&gt;&gt; I wonder whether we can have a standard Posix module with all the standard Posix stuff in it to avoid the<br>&gt;&gt; <br>&gt;&gt; #if os(Linux)<br>&gt;&gt;   import Glibc<br>&gt;&gt; #else<br>&gt;&gt;   import Darwin<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; for things which are standardised in Posix (and hence the same, even on Windoze). I currently have an `xsys` module to alias the definitions, but this is kinda crap :-)<br>&gt;&gt; <br>&gt;&gt; https://github.com/NozeIO/Noze.io/tree/master/Sources/xsys<br>&gt;&gt; <br>&gt;&gt; Or is there a better way to do this already?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Helge<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Posix Module</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>October 29, 2016 at 11:00:00pm</p></header><div class="content"><p>I think this goes beyond just that proposal, though. It’s not just a problem of conditionally importing both frameworks as there is sometimes a slight mismatch in the API. This results in me having to do unfortunate things like this:<br></p><p>https://github.com/SwiftOnEdge/Edge/blob/8bdbb4555dd49ecfad51498234f4d91cdf07d4aa/Sources/POSIXExtensions/Socket.swift#L18 &lt;https://github.com/SwiftOnEdge/Edge/blob/8bdbb4555dd49ecfad51498234f4d91cdf07d4aa/Sources/POSIXExtensions/Socket.swift#L18&gt;<br></p><p>A standard POSIX Swift API would reduce some serious pain points in developing for the server. All of this translational work from C APIs to Swift APIs is happening in every project that does low level I/O. Ideally it would be as thin a wrapper as is possible while still making the APIs feel Swift-y.<br></p><p>Can you imagine not having to mess about with errno anymore? I dream of the day.<br></p><p>Tyler<br></p><p><br>&gt; On Oct 29, 2016, at 8:32 PM, Michael Gottesman via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Actually swift-evolution. There was a thread about it already:<br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160307/012085.html<br>&gt; <br>&gt; It was only a draft but people IIRC people viewed it favorably (don&#39;t quote me on this though, my memory might be wrong). Perhaps no one got behind implementing it? (again my memory is gone).<br>&gt; <br>&gt; Michael<br>&gt; <br>&gt;&gt; On Oct 28, 2016, at 3:56 PM, Daniel Dunbar via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Given the Glibc overlay lives in Swift, this probably is more appropriate for swift-dev rather than the server APIs project specifically.<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 28, 2016, at 8:51 AM, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess this kinda belongs here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wonder whether we can have a standard Posix module with all the standard Posix stuff in it to avoid the<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if os(Linux)<br>&gt;&gt;&gt;  import Glibc<br>&gt;&gt;&gt; #else<br>&gt;&gt;&gt;  import Darwin<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for things which are standardised in Posix (and hence the same, even on Windoze). I currently have an `xsys` module to alias the definitions, but this is kinda crap :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/NozeIO/Noze.io/tree/master/Sources/xsys<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or is there a better way to do this already?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Helge<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-server-dev mailing list<br>&gt;&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-server-dev mailing list<br>&gt;&gt; swift-server-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161029/d8b7026f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Posix Module</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>October 30, 2016 at 10:00:00am</p></header><div class="content"><p>On 30 Oct 2016, at 07:29, Tyler Cloutier via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; I think this goes beyond just that proposal, though. It’s not just a problem of conditionally importing both frameworks as there is sometimes a slight mismatch in the API. This results in me having to do unfortunate things like this:<br>&gt; <br>&gt; https://github.com/SwiftOnEdge/Edge/blob/8bdbb4555dd49ecfad51498234f4d91cdf07d4aa/Sources/POSIXExtensions/Socket.swift#L18<br></p><p>I wouldn’t go that far, I mean this is just a struct. There is nothing wrong with not using the convenience initialiser and doing a `var address = addr()` and then initialising the values. No portability issue here (BTW this worked fine before, SE-0060 b0rked it, maybe we are getting the old struct-convenience-initializer behaviour back later, I’m kinda counting on it :-).<br></p><p>On a higher level you wouldn’t want to access the ai_* values directly anyways (but rather something which gives you a string value, etc). But I wouldn’t even put those wrappers I have in my `xsys` module into that Swift `Posix` module. This one should be just the Posix API exposed, same like in C. The latter may be more like an extra `SwiftyPosix` module.<br></p><p><br>Is anyone else interested in having a module which enhances the Posix/CLib structs to be swiftyer? I think I currently have some code for socket addresses, the mentioned addr and for time value stuff (time_t, timespec, timeval).<br></p><p><br>&gt; A standard POSIX Swift API would reduce some serious pain points in developing for the server. All of this translational work from C APIs to Swift APIs is happening in every project that does low level I/O. Ideally it would be as thin a wrapper as is possible while still making the APIs feel Swift-y.<br></p><p>I wouldn’t even make it a wrapper. Just expose the Posix/C-stdlib subsystems under a common name. We could still do `#if linux` for cases where it is really necessary. (it shouldn’t be for the regular Posix socket demo doing a connect(), send(), recv() and close() …).<br></p><p>The platform which is a bit special wrt Posix is Windows. That may indeed require some renaming (all the socket stuff being prefixed with WSA etc). Though a higher level socket lib may want to do Windows differently anyways, not sure.<br></p><p><br>&gt; Can you imagine not having to mess about with errno anymore? I dream of the day.<br></p><p>Well, yes. But that should really live at a higher level. I was just talking about the<br></p><p>  #if os(Linux)<br>    import Glibc<br>    public let connect = Glibc.connect<br>  #else<br>    import Darwin<br>    public let connect = Darwin.connect<br>  #endif<br></p><p>… which is just ridiculous :-)<br></p><p><br>My understanding is that there likely wouldn’t be a big resistance towards having a common Posix/CLib module. There ‘just’ needs to be someone implementing a pull request for the Swift codebase (aka do the work).<br>That’s not me, easier for me to just do the funky mappings :-)<br></p><p>hh<br></p><p>P.S.: I think the discussion kinda belongs here because server-side is the main use case for X-platform stuff until the Android port begins to fly ;-&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 842 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161030/040db6ea/attachment.sig&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/353d1c09444050fea4228317eaefafda?s=50"></div><header><strong>Posix Module</strong> from <string>Johannes Weiß</string> &lt;johannesweiss at apple.com&gt;<p>October 30, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>Well, correct handling of POSIX functions in Swift is unfortunately a bit harder than just re-exporting Glibc/Darwin depending on the platform.<br></p><p>Errno is an issue. In _many_ libraries I have seen code like this:<br></p><p>let rv = some_syscall(params)<br>if tv != 0 {<br>    throw POSIXError(code: errno)<br>}<br></p><p>this looks correct but technically it isn&#39;t. There&#39;s no guarantee in Swift that between calling &#39;some_syscall&#39; and capturing &#39;errno&#39;, errno isn&#39;t overridden. ARC might insert &#39;release&#39; calls at any point. Unfortunately, release calls might cause &#39;deinit&#39;s to be run and they might use syscalls (which could override errno).<br></p><p>So yes, just re-exporting Glibc/Darwin is easy but using these functions correctly is hard.<br></p><p>Another assumption I have seen in Swift libraries is assuming that a successful system call resets errno to 0, that&#39;s not true either.<br></p><p>But as others have said, this might be a swift-{users,evolution} question?<br></p><p>Cheers,<br>  Johannes<br></p><p><br>&gt; On 28 Oct 2016, at 4:51 pm, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I guess this kinda belongs here:<br>&gt; <br>&gt; I wonder whether we can have a standard Posix module with all the standard Posix stuff in it to avoid the<br>&gt; <br>&gt;  #if os(Linux)<br>&gt;    import Glibc<br>&gt;  #else<br>&gt;    import Darwin<br>&gt;  #endif<br>&gt; <br>&gt; for things which are standardised in Posix (and hence the same, even on Windoze). I currently have an `xsys` module to alias the definitions, but this is kinda crap :-)<br>&gt; <br>&gt;  https://github.com/NozeIO/Noze.io/tree/master/Sources/xsys<br>&gt; <br>&gt; Or is there a better way to do this already?<br>&gt; <br>&gt; Thanks,<br>&gt;  Helge<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Posix Module</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>October 31, 2016 at 12:00:00am</p></header><div class="content"><p>Hi Johannes,<br></p><p>&gt; On 30 Oct 2016, at 19:11, Johannes Weiß &lt;johannesweiss at apple.com&gt; wrote:<br>&gt; <br>&gt; So yes, just re-exporting Glibc/Darwin is easy but using these functions correctly is hard.<br></p><p>yes, all that is understood but it has absolutely no relevance to the namespace under which those &quot;hard-to-use-functions&quot; are exposed?<br></p><p>All I :-) ask for is that those Posix or C99 funds are exposed under a common name whether on Linux, Darwin, Windoze or BeOS.<br></p><p>&gt; Another assumption I have seen in Swift libraries is assuming that a successful system call resets errno to 0, that&#39;s not true either.<br></p><p>File a bug report against the respective libs. Of course this is not true and never has been true in C either.<br></p><p>&gt; But as others have said, this might be a swift-{users,evolution} question?<br></p><p>It probably is, so are sockets, encryption and database access :-) I think you need to start somewhere, and Swift Server is the one place which has to deal with this specific issue right now.<br></p><p>hh<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/353d1c09444050fea4228317eaefafda?s=50"></div><header><strong>Posix Module</strong> from <string>Johannes Weiß</string> &lt;johannesweiss at apple.com&gt;<p>October 31, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Helge,<br></p><p>&gt; [...]<br>&gt;&gt; So yes, just re-exporting Glibc/Darwin is easy but using these functions correctly is hard.<br>&gt; <br>&gt; yes, all that is understood but it has absolutely no relevance to the namespace under which those &quot;hard-to-use-functions&quot; are exposed?<br>&gt; <br>&gt; All I :-) ask for is that those Posix or C99 funds are exposed under a common name whether on Linux, Darwin, Windoze or BeOS.<br></p><p>Understood but that topic is already covered on swift-evolution. I&#39;m more interested in making those functions usable correctly in Swift. Right now, &quot;hard-to-use function&quot; is an understatement IMHO, I have yet to see a guaranteed correct use of `errno` in any Swift open-source library but that should be discussed on swift-{evolution, users}.<br></p><p><br>&gt;&gt; Another assumption I have seen in Swift libraries is assuming that a successful system call resets errno to 0, that&#39;s not true either.<br>&gt; <br>&gt; File a bug report against the respective libs. Of course this is not true and never has been true in C either.<br></p><p>Doing that. And, yes, that errno isn&#39;t guaranteed to be set to 0 on success has always been true in C. But capturing the correct value of errno is very straightforward in C and it&#39;s definitely not in Swift.<br></p><p><br>&gt;&gt; But as others have said, this might be a swift-{users,evolution} question?<br>&gt; <br>&gt; It probably is, so are sockets, encryption and database access :-) I think you need to start somewhere, and Swift Server is the one place which has to deal with this specific issue right now.<br></p><p>Not sure if I fully agree. I see two areas here:<br></p><p>1) making the basic OS functionality available to Swift. IMHO that covers being able to call the OS&#39;s syscalls and being able to deal with the errors in a robust way. That for me belongs to swift-evolution but this work group could for example come up with proposals.<br></p><p>2) building libraries on top of these basic primitives. There&#39;s a bit more opinion involved here on how to do things. For example obvious questions about the programming model depending if based on Dispatch (DisptchIO or DispatchSource), one of the CSP libraries (eg. lib{dill, mill, venice}), blocking IO ;), or something else. But we should try to not bake too much opinion in these basic building blocks because that might make them incompatible with layers further up (like Zewo, Vapor, Kitura).<br></p><p>  Also we have to consider here that right now DispatchIO/DispatchSource is probably a reasonable place to start as Dispatch comes with Swift and a Swift API. But when (in maybe 1.5+ years) Swift gains a memory and concurrency model, Dispatch might not be the best way of doing things anymore.<br> So I think it&#39;s too early to answer these questions in the Swift standard library right now. But in this work group we can start to discuss and implement(!) basic building blocks that help building server programs right now (or in the near future). These efforts would then make it a) easier to develop server software right now and b) reduce duplication in the existing server frameworks.<br></p><p>  Summing up, I think this workgroup could cover the layer above syscalls focussing on the areas that common server software needs (eg. networking, security, HTTP parsing, ...). Hopefully the layer can be as free as possible of decisions that massively influence the stack on top. It&#39;d be great to see Vapor, Zewo and Kitura adopting these lower level primitives. And that should be possible without changing their overall architecture.<br></p><p>I hope that makes some sense. And for the record: The scope for the discussions/libraries that come out of this doesn&#39;t need to be massive. Personally, I&#39;d be very happy if we&#39;d produce some very few basic libraries that are used as a common ground to bootstrap network applications.<br></p><p>All the best,<br>  Johannes<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d23c2d6c1ccb724044f09d449772ff2?s=50"></div><header><strong>Posix Module</strong> from <string>Helge Heß</string> &lt;me at helgehess.eu&gt;<p>November  1, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Johannes,<br></p><p>On 31 Oct 2016, at 10:36, Johannes Weiß &lt;johannesweiss at apple.com&gt; wrote:<br>&gt;&gt; All I :-) ask for is that those Posix or C99 funds are exposed under a common name whether on Linux, Darwin, Windoze or BeOS.<br>&gt; Understood but that topic is already covered on swift-evolution.<br></p><p>OK, great.<br></p><p>&gt; I&#39;m more interested in making those functions usable correctly in Swift. Right now, &quot;hard-to-use function&quot; is an understatement IMHO<br></p><p>IMHO you are exaggerating quite a bit, but OK :-)<br></p><p>&gt;&gt; It probably is, so are sockets, encryption and database access :-) I think you need to start somewhere, and Swift Server is the one place which has to deal with this specific issue right now.<br>&gt; <br>&gt; Not sure if I fully agree. I see two areas here:<br>&gt; <br>&gt; 1) making the basic OS functionality available to Swift. IMHO that covers being able to call the OS&#39;s syscalls and being able to deal with the errors in a robust way. That for me belongs to swift-evolution but this work group could for example come up with proposals.<br></p><p>OK.<br></p><p>&gt; 2) building libraries on top of these basic primitives. There&#39;s a bit more opinion involved here on how to do things. For example obvious questions about the programming model depending if based on Dispatch (DisptchIO or DispatchSource), one of the CSP libraries (eg. lib{dill, mill, venice}), blocking IO ;), or something else. But we should try to not bake too much opinion in these basic building blocks because that might make them incompatible with layers further up (like Zewo, Vapor, Kitura).<br></p><p>I think I completely agree with this. As mentioned I also think that this means it would be so low level, it essentially is little more than &#39;making the basic OS functionality available to Swift’. Similar to what has been done to CoreGraphics or GCD APIs.<br></p><p>Presumably something everyone is fighting with is TLS, primarily due to the ‘nice’ API of the relevant library :-) Having a nice Swift TLS API which doesn’t tie into specific transports would be really great (actually having one for C would be great too :-).<br></p><p>&gt; Also we have to consider here that right now DispatchIO/DispatchSource is probably a reasonable place to start as Dispatch comes with Swift and a Swift API. But when (in maybe 1.5+ years) Swift gains a memory and concurrency model, Dispatch might not be the best way of doing things anymore.<br></p><p>I was wondering about this as well. It may not make sense to invest too much into modelling something bigger when such language changes are on the horizon?<br>Don’t know, interested to see what people come up with :-)<br></p><p>hh<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 842 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-server-dev/attachments/20161101/88d36fcc/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/353d1c09444050fea4228317eaefafda?s=50"></div><header><strong>Posix Module</strong> from <string>Johannes Weiß</string> &lt;johannesweiss at apple.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Helge,<br></p><p>FWIW, I posted to swift-evolution:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20161031/028627.html<br></p><p>Cheers,<br>  johannes<br></p><p>&gt; On 1 Nov 2016, at 10:41, Helge Heß via swift-server-dev &lt;swift-server-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Johannes,<br>&gt; <br>&gt; On 31 Oct 2016, at 10:36, Johannes Weiß &lt;johannesweiss at apple.com&gt; wrote:<br>&gt;&gt;&gt; All I :-) ask for is that those Posix or C99 funds are exposed under a common name whether on Linux, Darwin, Windoze or BeOS.<br>&gt;&gt; Understood but that topic is already covered on swift-evolution.<br>&gt; <br>&gt; OK, great.<br>&gt; <br>&gt;&gt; I&#39;m more interested in making those functions usable correctly in Swift. Right now, &quot;hard-to-use function&quot; is an understatement IMHO<br>&gt; <br>&gt; IMHO you are exaggerating quite a bit, but OK :-)<br>&gt; <br>&gt;&gt;&gt; It probably is, so are sockets, encryption and database access :-) I think you need to start somewhere, and Swift Server is the one place which has to deal with this specific issue right now.<br>&gt;&gt; <br>&gt;&gt; Not sure if I fully agree. I see two areas here:<br>&gt;&gt; <br>&gt;&gt; 1) making the basic OS functionality available to Swift. IMHO that covers being able to call the OS&#39;s syscalls and being able to deal with the errors in a robust way. That for me belongs to swift-evolution but this work group could for example come up with proposals.<br>&gt; <br>&gt; OK.<br>&gt; <br>&gt;&gt; 2) building libraries on top of these basic primitives. There&#39;s a bit more opinion involved here on how to do things. For example obvious questions about the programming model depending if based on Dispatch (DisptchIO or DispatchSource), one of the CSP libraries (eg. lib{dill, mill, venice}), blocking IO ;), or something else. But we should try to not bake too much opinion in these basic building blocks because that might make them incompatible with layers further up (like Zewo, Vapor, Kitura).<br>&gt; <br>&gt; I think I completely agree with this. As mentioned I also think that this means it would be so low level, it essentially is little more than &#39;making the basic OS functionality available to Swift’. Similar to what has been done to CoreGraphics or GCD APIs.<br>&gt; <br>&gt; Presumably something everyone is fighting with is TLS, primarily due to the ‘nice’ API of the relevant library :-) Having a nice Swift TLS API which doesn’t tie into specific transports would be really great (actually having one for C would be great too :-).<br>&gt; <br>&gt;&gt; Also we have to consider here that right now DispatchIO/DispatchSource is probably a reasonable place to start as Dispatch comes with Swift and a Swift API. But when (in maybe 1.5+ years) Swift gains a memory and concurrency model, Dispatch might not be the best way of doing things anymore.<br>&gt; <br>&gt; I was wondering about this as well. It may not make sense to invest too much into modelling something bigger when such language changes are on the horizon?<br>&gt; Don’t know, interested to see what people come up with :-)<br>&gt; <br>&gt; hh<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-server-dev mailing list<br>&gt; swift-server-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-server-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
