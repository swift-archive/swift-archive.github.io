<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Disappearing AnyGenerator/AnySequence/AnyCollection wrapper types</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 14, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; Joe wrote: &quot;What changes would be necessary to the standard library to make the most of this feature? Some particular problems we&#39;d like to solve are to eliminate the need for the AnyGenerator/AnySequence/AnyCollection wrapper types, and to provide a solution for heterogeneous equality, so that protocols can inherit Equatable and Hashable without forfeiting the ability to be used dynamically. See Brent Simmons&#39; Swift diary posts at http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt; for an example of why the latter is important.&quot;<br></p><p><br>Any advice for what could be done now in preparation for any changes that might happen and an estimate of when these types might be on the chopping block? Not 3.0, right? But 4.0? What are good ways to work around this now using current (and presumably stable) constructs?<br></p><p>Thanks, -- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/d8ce85cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Disappearing AnyGenerator/AnySequence/AnyCollection wrapper types</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December 14, 2015 at 11:00:00pm</p></header><div class="content"><p>I’ve had a few discussions about that with Joe and Rob Rix, where I understood less than I’d like to admit :) Joe recently said that the subject of type-erasure is probably not currently planned for Swift 3, but saying that:<br></p><p>@rob_rix @dhartbit Fixing cyclic assoc type references will give us the runtime support for those existentials, at least.<br>https://twitter.com/jckarter/status/675322278675001344<br></p><p>If that makes sense to you.<br></p><p>&gt; On 14 Dec 2015, at 23:24, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Joe wrote: &quot;What changes would be necessary to the standard library to make the most of this feature? Some particular problems we&#39;d like to solve are to eliminate the need for the AnyGenerator/AnySequence/AnyCollection wrapper types, and to provide a solution for heterogeneous equality, so that protocols can inherit Equatable and Hashable without forfeiting the ability to be used dynamically. See Brent Simmons&#39; Swift diary posts at http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt; for an example of why the latter is important.&quot;<br>&gt; <br>&gt; <br>&gt; Any advice for what could be done now in preparation for any changes that might happen and an estimate of when these types might be on the chopping block? Not 3.0, right? But 4.0? What are good ways to work around this now using current (and presumably stable) constructs?<br>&gt; <br>&gt; Thanks, -- E<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/f61f5090/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Disappearing AnyGenerator/AnySequence/AnyCollection wrapper types</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>December 14, 2015 at 08:00:00pm</p></header><div class="content"><p>I *think* that Joe is talking about when two protocols require mention of<br>each other. This forms an odd cycle in the type system right now when you<br>try to use it.<br></p><p>protocol SequenceType {<br>typealias Generator : GeneratorType<br>}<br></p><p>protocol GeneratorType {<br>typealias Sequence : SequenceType<br>}<br></p><p>On Mon, Dec 14, 2015 at 5:47 PM, David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’ve had a few discussions about that with Joe and Rob Rix, where I<br>&gt; understood less than I’d like to admit :) Joe recently said that the<br>&gt; subject of type-erasure is probably not currently planned for Swift 3, but<br>&gt; saying that:<br>&gt;<br>&gt; *@rob_rix @dhartbit Fixing cyclic assoc type references will give us the<br>&gt; runtime support for those existentials, at least.*<br>&gt; https://twitter.com/jckarter/status/675322278675001344<br>&gt;<br>&gt; If that makes sense to you.<br>&gt;<br>&gt; On 14 Dec 2015, at 23:24, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Joe wrote: &quot;What changes would be necessary to the standard library to<br>&gt; make the most of this feature? Some particular problems we&#39;d like to solve<br>&gt; are to eliminate the need for the AnyGenerator/AnySequence/AnyCollection<br>&gt; wrapper types, and to provide a solution for heterogeneous equality, so<br>&gt; that protocols can inherit Equatable and Hashable without forfeiting the<br>&gt; ability to be used dynamically. See Brent Simmons&#39; Swift diary posts at<br>&gt; http://inessential.com/swiftdiary for an example of why the latter is<br>&gt; important.&quot;<br>&gt;<br>&gt;<br>&gt; Any advice for what could be done now in preparation for any changes that<br>&gt; might happen and an estimate of when these types might be on the chopping<br>&gt; block? Not 3.0, right? But 4.0? What are good ways to work around this now<br>&gt; using current (and presumably stable) constructs?<br>&gt;<br>&gt; Thanks, -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/89bb449e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
