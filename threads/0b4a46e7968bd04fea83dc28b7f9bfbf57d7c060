<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0120: Revise &#39;partition&#39; Method Signature</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 12, 2016 at 05:00:00pm</p></header><div class="content"><p>on Tue Jul 12 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The proposal is clearly an improvement over the status quo.<br>&gt;<br>&gt; A naming concern, which I apologize for not getting in before the review period:<br>&gt;<br>&gt; In Ruby (and I think some other languages as well), “partition”<br>&gt; returns two collections, one with the included elements and one with<br>&gt; the excluded. That’s a useful flavor of the method to have. I’ve added<br>&gt; it in an extension myself in a project or two.<br>&gt;<br>&gt; Does this proposal leave room for the two-collection variant if we<br>&gt; want to add it later?<br></p><p>Yes.<br></p><p>  let p = x.partition { ... }<br>  excluded = x[x.startIndex..&lt;p]<br>  included = x[p..&lt;x.endIndex]<br></p><p>&gt; If it were to honor the existing term of art, the natural name for it would be “partitioned(by:)”:<br>&gt;<br>&gt;     mutating func partitioned(by: …) -&gt; ([Self.Iterator.Element], [Self.Iterator.Element])<br></p><p>Yes, we are interested in more algorithms,<br>but they are out-of-scope for Swift 3.  <br></p><p>&gt; However, naming the in-place reordering method “partition” as this<br>&gt; proposal does would suggest instead that “partitioned(by:)” is instead<br>&gt; its non-mutating counterpart:<br>&gt;<br>&gt;     mutating func partitioned(by: …) -&gt; ([Self.Iterator.Element], Index)<br></p><p>Yes a non-mutating one.  The above might return.<br>a pair of ArraySlice, with some way to retrieve the underlying Array.<br></p><p>&gt; Overloading on return type is dicey business, especially when the type<br>&gt; resolver has to peer inside a tuple. Could these two flavors coexist<br>&gt; peacefully? Will this be confusing? Are we painting ourselves into a<br>&gt; corner?<br></p><p>I don&#39;t see any such overloading here.<br></p><p>&gt; Cheers,<br>&gt;<br>&gt; Paul<br>&gt;<br>&gt;&gt; On Jul 12, 2016, at 1:12 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0120: Revise ‘partition&#39; Method Signature&quot; begins now and runs through July 19. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt; review through constructive criticism and contribute to the<br>&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0120: Revise &#39;partition&#39; Method Signature</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>July 13, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Jul 12, 2016, at 7:27 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Tue Jul 12 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Does this proposal leave room for the two-collection variant if we<br>&gt;&gt; want to add it later?<br>…<br>&gt;&gt; Overloading on return type is dicey business, especially when the type<br>&gt;&gt; resolver has to peer inside a tuple. Could these two flavors coexist<br>&gt;&gt; peacefully? Will this be confusing? Are we painting ourselves into a<br>&gt;&gt; corner?<br>&gt; <br>&gt; I don&#39;t see any such overloading here.<br></p><p>These two methods differ only by return type:<br></p><p>  mutating func partitioned(by: …) -&gt; ([Self.Iterator.Element], [Self.Iterator.Element])<br>  mutating func partitioned(by: …) -&gt; ([Self.Iterator.Element], Index)<br></p><p>These are the two methods a hypothetical post-3.0 stdlib would end up with given two fairly reasonable assumptions:<br></p><p>1. that we’d like a non-mutating variant of the “partition” method proposed here, and<br></p><p>2. that we’d like the stdlib to provide the two-collection “partition” as well.<br></p><p>To be clear, I’m _not_ proposing adding either of those things now. I’m only wondering whether using the name “partition” for the method under discussion now paints us into a corner later.<br></p><p>But…<br></p><p>&gt;&gt;   mutating func partitioned(by: …) -&gt; ([Self.Iterator.Element], Index)<br>&gt; <br>&gt; Yes a non-mutating one.  The above might return a pair of ArraySlice, with some way to retrieve the underlying Array.<br></p><p><br>Right, we’d be in the clear if that were the _only_ non-mutating counterpart of “partition,” i.e. if we only had this method:<br></p><p>   mutating func partitioned(by: …) -&gt; (ArraySlice&lt;Self.Iterator.Element&gt;, ArraySlice&lt;Self.Iterator.Element&gt;)<br></p><p>…instead of the two I listed above.<br></p><p>And this slice variant does seem to provide all the advantages of both the two above, so I think it could be the only “partitioned” method. My concern is thus addressed. Thanks.<br></p><p>Cheers,<br></p><p>Paul<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
