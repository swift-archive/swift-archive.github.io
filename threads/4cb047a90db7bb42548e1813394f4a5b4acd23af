<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>divisible-by operator</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April  6, 2016 at 05:00:00pm</p></header><div class="content"><p>Checking for divisibility is very common:<br></p><p>    21 % 3 == 0 // true<br></p><p>In fact, this is such a common use of the `%` operator that the `== 0` side of the expression seems distracting in this use case. For quite a while now, I’ve been using a custom operator for this, which is steadily growing on me:<br></p><p>    21 %== 3 // true<br></p><p>… which also allows me to overload it for sequences:<br></p><p>    21 %== [7, 3] // true<br></p><p>(If I’m inadvertently misusing this mailing list to share such a minor idea, please tell me off so that I can learn not to do it again!)<br></p><p>milos<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160406/4cb023af/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>divisible-by operator</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>April  6, 2016 at 11:00:00pm</p></header><div class="content"><p>This is the kind of thing that I&#39;d let live in a library and consider importing into the standard if a lot of people use it.<br></p><p>Félix<br></p><p>&gt; Le 6 avr. 2016 à 09:13:41, Milos Rankovic via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Checking for divisibility is very common:<br>&gt; <br>&gt;     21 % 3 == 0 // true<br>&gt; <br>&gt; In fact, this is such a common use of the `%` operator that the `== 0` side of the expression seems distracting in this use case. For quite a while now, I’ve been using a custom operator for this, which is steadily growing on me:<br>&gt; <br>&gt;     21 %== 3 // true<br>&gt; <br>&gt; … which also allows me to overload it for sequences:<br>&gt; <br>&gt;     21 %== [7, 3] // true<br>&gt; <br>&gt; (If I’m inadvertently misusing this mailing list to share such a minor idea, please tell me off so that I can learn not to do it again!)<br>&gt; <br>&gt; milos<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160406/e8e98d99/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>divisible-by operator</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Personally I’d prefer to use a method like:<br></p><p>	21.isDivisibleBy(3)<br></p><p>As it’s clearer IMO. My problem with the operator is that it doesn’t make logical sense to have the value you’re dividing by on the right hand side when there are equals signs, it seems more like this should be the value you’re testing. Perhaps there’s a better choice of operator such as:<br></p><p>	21 %: 3<br></p><p>Though that’s probably not very clear either as the colon could be easy to miss. Basically the choice of %== doesn’t suggest its purpose, which makes it one more thing to learn, which is why a method may be a better choice.<br></p><p>&gt; On 6 Apr 2016, at 17:13, Milos Rankovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Checking for divisibility is very common:<br>&gt; <br>&gt;     21 % 3 == 0 // true<br>&gt; <br>&gt; In fact, this is such a common use of the `%` operator that the `== 0` side of the expression seems distracting in this use case. For quite a while now, I’ve been using a custom operator for this, which is steadily growing on me:<br>&gt; <br>&gt;     21 %== 3 // true<br>&gt; <br>&gt; … which also allows me to overload it for sequences:<br>&gt; <br>&gt;     21 %== [7, 3] // true<br>&gt; <br>&gt; (If I’m inadvertently misusing this mailing list to share such a minor idea, please tell me off so that I can learn not to do it again!)<br>&gt; <br>&gt; milos<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/b6758e1e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>divisible-by operator</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April  7, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Apr 6, 2016, at 10:13 AM, Milos Rankovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Checking for divisibility is very common:<br>&gt; <br>&gt;     21 % 3 == 0 // true<br>&gt; <br>&gt; In fact, this is such a common use of the `%` operator that the `== 0` side of the expression seems distracting in this use case. For quite a while now, I’ve been using a custom operator for this, which is steadily growing on me:<br>&gt; <br>&gt;     21 %== 3 // true<br>&gt; <br>&gt; … which also allows me to overload it for sequences:<br>&gt; <br>&gt;     21 %== [7, 3] // true<br>&gt; <br>&gt; (If I’m inadvertently misusing this mailing list to share such a minor idea, please tell me off so that I can learn not to do it again!)<br>&gt; <br></p><p>While modulo checks are common, I don&#39;t think that your proposed solution (%==) enhances readability or saves typing *to such extent* that it vastly improves over the existing art:<br></p><p>21 % 3 == 0 reads easily from left to right, is quick to type, is understood across many languages.<br></p><p>21 %== 3    saves a few spaces, is less immediately understandable (due to the visual overlap with `+=` and `-=`) and would be (as far as I&#39;m aware of) unique to Swift.<br></p><p>I applaud the thinking and creativity but I would not support the proposal.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/0145c97e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>divisible-by operator</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April  7, 2016 at 07:00:00pm</p></header><div class="content"><p>Thank you for giving this a thought!<br></p><p>milos<br></p><p>&gt; On 7 Apr 2016, at 15:13, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 6, 2016, at 10:13 AM, Milos Rankovic via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Checking for divisibility is very common:<br>&gt;&gt; <br>&gt;&gt;     21 % 3 == 0 // true<br>&gt;&gt; <br>&gt;&gt; In fact, this is such a common use of the `%` operator that the `== 0` side of the expression seems distracting in this use case. For quite a while now, I’ve been using a custom operator for this, which is steadily growing on me:<br>&gt;&gt; <br>&gt;&gt;     21 %== 3 // true<br>&gt;&gt; <br>&gt;&gt; … which also allows me to overload it for sequences:<br>&gt;&gt; <br>&gt;&gt;     21 %== [7, 3] // true<br>&gt;&gt; <br>&gt;&gt; (If I’m inadvertently misusing this mailing list to share such a minor idea, please tell me off so that I can learn not to do it again!)<br>&gt;&gt; <br>&gt; <br>&gt; While modulo checks are common, I don&#39;t think that your proposed solution (%==) enhances readability or saves typing *to such extent* that it vastly improves over the existing art:<br>&gt; <br>&gt; 21 % 3 == 0 reads easily from left to right, is quick to type, is understood across many languages.<br>&gt; <br>&gt; 21 %== 3    saves a few spaces, is less immediately understandable (due to the visual overlap with `+=` and `-=`) and would be (as far as I&#39;m aware of) unique to Swift.<br>&gt; <br>&gt; I applaud the thinking and creativity but I would not support the proposal.<br>&gt; <br>&gt; -- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/e1e86c29/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>divisible-by operator</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>April 10, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;m not suggesting this for the standard library (or anyone&#39;s production<br>code), but it&#39;s fun to note that there is actually a standard mathematical<br>notation for this, and it has a corresponding Unicode character U+2223<br>&quot;DIVIDES&quot;: ∣<br></p><p>    infix operator ∣ {}<br>    func ∣&lt;I: IntegerType&gt;(lhs: I, rhs: I) -&gt; Bool {<br>        return rhs % lhs == 0<br>    }<br></p><p>    3 ∣ 12  // true<br>    4 ∣ 12  // true<br>    5 ∣ 12  // false<br></p><p><br>Jacob<br></p><p>On Thu, Apr 7, 2016 at 11:13 AM, Milos Rankovic via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Thank you for giving this a thought!<br>&gt;<br>&gt; milos<br>&gt;<br>&gt; On 7 Apr 2016, at 15:13, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Apr 6, 2016, at 10:13 AM, Milos Rankovic via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Checking for divisibility is very common:<br>&gt;<br>&gt;     21 % 3 == 0 // true<br>&gt;<br>&gt; In fact, this is such a common use of the `%` operator that the `== 0`<br>&gt; side of the expression seems distracting in this use case. For quite a<br>&gt; while now, I’ve been using a custom operator for this, which is steadily<br>&gt; growing on me:<br>&gt;<br>&gt;     21 %== 3 // true<br>&gt;<br>&gt; … which also allows me to overload it for sequences:<br>&gt;<br>&gt;     21 %== [7, 3] // true<br>&gt;<br>&gt; (If I’m inadvertently misusing this mailing list to share such a minor<br>&gt; idea, please tell me off so that I can learn not to do it again!)<br>&gt;<br>&gt;<br>&gt; While modulo checks are common, I don&#39;t think that your proposed solution<br>&gt; (%==) enhances readability or saves typing **to such extent** that it<br>&gt; vastly improves over the existing art:<br>&gt;<br>&gt; 21 % 3 == 0 reads easily from left to right, is quick to type, is<br>&gt; understood across many languages.<br>&gt;<br>&gt; 21 %== 3    saves a few spaces, is less immediately understandable (due<br>&gt; to the visual overlap with `+=` and `-=`) and would be (as far as I&#39;m aware<br>&gt; of) unique to Swift.<br>&gt;<br>&gt; I applaud the thinking and creativity but I would not support the proposal.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160410/b98e3818/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6d3081a5b9c408dfecc2681ab82af734?s=50"></div><header><strong>divisible-by operator</strong> from <string>Milos Rankovic</string> &lt;milos at milos-and-slavica.net&gt;<p>April 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 11 Apr 2016, at 02:39, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m not suggesting this for the standard library (or anyone&#39;s production code), but it&#39;s fun to note that there is actually a standard mathematical notation for this, and it has a corresponding Unicode character U+2223 &quot;DIVIDES&quot;: ∣<br></p><p><br>And a Unicode character too! That’s great to know, Jacob, thanks!<br></p><p>milos<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160411/ea022703/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
