<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0cb372b61e8fab9285dd7660f3b73af?s=50"></div><header><strong>Bitshift operators</strong> from <string>Brent Royal-Gordon</string> &lt;brent at brentdax.com&gt;<p>June 15, 2016 at 12:00:00am</p></header><div class="content"><p>While I was watching WWDC videos today, I noticed that there&#39;s a bit of annoying boilerplate in OptionSet specifications, and set out to get rid of it. Basically, what I&#39;d like to do is this:<br></p><p>	extension OptionSet where RawValue: Integer {<br>	    init(bit bits: RawValue...) {<br>	        self.init(rawValue: bits.reduce(0) { $0 | (1 &lt;&lt; $1) })<br>	    }<br>	}<br></p><p>	struct FooOptions: OptionSet {<br>	    let rawValue: Int<br>	    <br>	    static let bar = FooOptions(bit: 0)<br>	    static let baz = FooOptions(bit: 1)<br>	}<br></p><p>However, this was thwarted by the fact that the &lt;&lt; operator is not in Integer. Or BitwiseOperations. Or any protocol, in fact.<br></p><p>From what I understand, this is a long-known issue we were planning to address in the Integer redesign, but I&#39;m not sure what the status of that is at this point. I would guess that we&#39;re facing one of three situations:<br></p><p>1. An Integer redesign is still planned for Swift 3, but hasn&#39;t been reviewed yet.<br>2. An Integer redesign has been deferred, but an incremental improvement (like adding bitshifting to BitwiseOperations) would be welcome.<br>3. An Integer redesign has been deferred, and an incremental improvement is either not desired or too late at this point.<br></p><p>Can anyone share the status of this? If we&#39;re in #2, I&#39;d be happy to put together a quick proposal to patch this particular issue up in time for Swift 3. (I assume that `OptionSet.init(bit:)` would be considered a &quot;new feature&quot; and thus out of scope.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
