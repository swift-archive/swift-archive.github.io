<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>[Compiler] Help IR gen in targetting MSVC</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>April 26, 2016 at 11:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>I found a bug in my port for MSVC and Cygwin.<br></p><p>The C function swift_stdlib_readLine_stdin() is mapped to &#39;Int&#39; type in<br>Swift, but it generates i32 in LLVM if I specify the target as MSVC. If I<br>give the target as Cygwin, it generates i64.<br></p><p>With the target options, the Cygwin ported swiftc.exe has the same output.<br></p><p>I know that the one of the differences between MSVC and Cygwin is the size<br>of &#39;long&#39; type. But I don&#39;t know even if it is related to this problem.<br></p><p>I don&#39;t know where to I start with.<br></p><p>BEGIN OF tt.swift ---<br>import SwiftShims<br></p><p> var linePtr: UnsafeMutablePointer&lt;CChar&gt;? = nil<br> var readBytes = swift_stdlib_readLine_stdin(&amp;linePtr)<br> print(readBytes)<br>END OF tt.swift -----<br></p><p>C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-pc-windows-msvc  | findstr<br>stdlib<br>  %4 = call i32 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq*<br>@_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>declare i32 @swift_stdlib_readLine_stdin(i8**) #0<br></p><p>C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-unknown-windows-cygnus |<br>findstr stdlib<br>  %4 = call i64 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq*<br>@_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>declare i64 @swift_stdlib_readLine_stdin(i8**) #0<br></p><p><br>- Han Sangjin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160426/157778a0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Compiler] Help IR gen in targetting MSVC</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>April 25, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Apr 25, 2016, at 7:54 PM, Sangjin Han via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; Hi all,<br>&gt; <br>&gt; I found a bug in my port for MSVC and Cygwin.<br>&gt; <br>&gt; The C function swift_stdlib_readLine_stdin() is mapped to &#39;Int&#39; type in Swift, but it generates i32 in LLVM if I specify the target as MSVC. If I give the target as Cygwin, it generates i64.<br>&gt; <br>&gt; With the target options, the Cygwin ported swiftc.exe has the same output.<br>&gt; <br>&gt; I know that the one of the differences between MSVC and Cygwin is the size of &#39;long&#39; type. But I don&#39;t know even if it is related to this problem.<br>&gt; <br>&gt; I don&#39;t know where to I start with.<br></p><p>The problem is probably the unconditional line<br>  public typealias CLong = Int<br>in CTypes.swift.  That is generally true for Unix platforms (LP32 / LP64) but not MSVC (LLP64).<br></p><p>You will need to conditionalize that line.<br></p><p>John.<br></p><p>&gt;  <br>&gt; BEGIN OF tt.swift ---<br>&gt; import SwiftShims<br>&gt; <br>&gt;  var linePtr: UnsafeMutablePointer&lt;CChar&gt;? = nil<br>&gt;  var readBytes = swift_stdlib_readLine_stdin(&amp;linePtr)<br>&gt;  print(readBytes)<br>&gt; END OF tt.swift -----<br>&gt; <br>&gt; C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-pc-windows-msvc  | findstr stdlib<br>&gt;   %4 = call i32 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq* @_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>&gt; declare i32 @swift_stdlib_readLine_stdin(i8**) #0<br>&gt; <br>&gt; C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-unknown-windows-cygnus | findstr stdlib<br>&gt;   %4 = call i64 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq* @_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>&gt; declare i64 @swift_stdlib_readLine_stdin(i8**) #0<br>&gt; <br>&gt; <br>&gt; - Han Sangjin<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>[Compiler] Help IR gen in targetting MSVC</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>April 27, 2016 at 05:00:00am</p></header><div class="content"><p>The problem can be solved by modifying that code. Thanks you. I thought<br>that code will affect only to the CLong type not Int.<br></p><p>But I meet another problem to fix it. I couldn&#39;t find the conditional<br>method to distinct x86_64-*-windows-msvc with x86_64-*-windows-cygnus in<br>Swift source.<br></p><p>&quot;#if os(Windows)&quot; can not distinct MSVC from Cygwin.<br></p><p>Should I add new condition &#39;env()&#39; for the environment?<br></p><p>- Han Sangjin<br></p><p><br>2016-04-26 14:39 GMT+09:00 John McCall &lt;rjmccall at apple.com&gt;:<br></p><p>&gt; &gt; On Apr 25, 2016, at 7:54 PM, Sangjin Han via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt; &gt; Hi all,<br>&gt; &gt;<br>&gt; &gt; I found a bug in my port for MSVC and Cygwin.<br>&gt; &gt;<br>&gt; &gt; The C function swift_stdlib_readLine_stdin() is mapped to &#39;Int&#39; type in<br>&gt; Swift, but it generates i32 in LLVM if I specify the target as MSVC. If I<br>&gt; give the target as Cygwin, it generates i64.<br>&gt; &gt;<br>&gt; &gt; With the target options, the Cygwin ported swiftc.exe has the same<br>&gt; output.<br>&gt; &gt;<br>&gt; &gt; I know that the one of the differences between MSVC and Cygwin is the<br>&gt; size of &#39;long&#39; type. But I don&#39;t know even if it is related to this problem.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t know where to I start with.<br>&gt;<br>&gt; The problem is probably the unconditional line<br>&gt;   public typealias CLong = Int<br>&gt; in CTypes.swift.  That is generally true for Unix platforms (LP32 / LP64)<br>&gt; but not MSVC (LLP64).<br>&gt;<br>&gt; You will need to conditionalize that line.<br>&gt;<br>&gt; John.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; BEGIN OF tt.swift ---<br>&gt; &gt; import SwiftShims<br>&gt; &gt;<br>&gt; &gt;  var linePtr: UnsafeMutablePointer&lt;CChar&gt;? = nil<br>&gt; &gt;  var readBytes = swift_stdlib_readLine_stdin(&amp;linePtr)<br>&gt; &gt;  print(readBytes)<br>&gt; &gt; END OF tt.swift -----<br>&gt; &gt;<br>&gt; &gt; C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-pc-windows-msvc  |<br>&gt; findstr stdlib<br>&gt; &gt;   %4 = call i32 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq*<br>&gt; @_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>&gt; &gt; declare i32 @swift_stdlib_readLine_stdin(i8**) #0<br>&gt; &gt;<br>&gt; &gt; C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-unknown-windows-cygnus |<br>&gt; findstr stdlib<br>&gt; &gt;   %4 = call i64 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq*<br>&gt; @_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>&gt; &gt; declare i64 @swift_stdlib_readLine_stdin(i8**) #0<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; - Han Sangjin<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160427/b1fdb0de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Compiler] Help IR gen in targetting MSVC</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>April 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 1:03 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br>&gt; The problem can be solved by modifying that code. Thanks you. I thought that code will affect only to the CLong type not Int.<br></p><p>It changes what &#39;long&#39; gets imported as.  If there&#39;s a Windows API defined using &#39;long&#39; (rather than some more meaningful typedef like &#39;size_t&#39;), it&#39;s important for it to be imported as Int32 rather than Int, since &#39;long&#39; is always 32 bits under MSVC.<br></p><p>&gt; But I meet another problem to fix it. I couldn&#39;t find the conditional method to distinct x86_64-*-windows-msvc with x86_64-*-windows-cygnus in Swift source.<br>&gt; <br>&gt; &quot;#if os(Windows)&quot; can not distinct MSVC from Cygwin.<br>&gt; <br>&gt; Should I add new condition &#39;env()&#39; for the environment?<br></p><p>That is an excellent question.<br></p><p>My understanding / memory is that, as far as their programming interfaces goes, Cygwin and MSVC are very, very different environments.  Maybe it&#39;s useful to have a condition that&#39;s true for both environments â€” although I&#39;m not sure why it would â€” but I don&#39;t think it deserves to be as prominent as os(Windows).  So my gut reaction is that, rather than adding a #env, we ought to just reserve os(Windows) for MSVC compatibility and make a new os(Cygwin) for Cygwin.<br></p><p>This needs to be raised on swift-evolution, though.  CC&#39;ing that list.<br></p><p>John.<br></p><p>&gt; <br>&gt; - Han Sangjin<br>&gt; <br>&gt; <br>&gt; 2016-04-26 14:39 GMT+09:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt; &gt; On Apr 25, 2016, at 7:54 PM, Sangjin Han via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; &gt; Hi all,<br>&gt; &gt;<br>&gt; &gt; I found a bug in my port for MSVC and Cygwin.<br>&gt; &gt;<br>&gt; &gt; The C function swift_stdlib_readLine_stdin() is mapped to &#39;Int&#39; type in Swift, but it generates i32 in LLVM if I specify the target as MSVC. If I give the target as Cygwin, it generates i64.<br>&gt; &gt;<br>&gt; &gt; With the target options, the Cygwin ported swiftc.exe has the same output.<br>&gt; &gt;<br>&gt; &gt; I know that the one of the differences between MSVC and Cygwin is the size of &#39;long&#39; type. But I don&#39;t know even if it is related to this problem.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t know where to I start with.<br>&gt; <br>&gt; The problem is probably the unconditional line<br>&gt;   public typealias CLong = Int<br>&gt; in CTypes.swift.  That is generally true for Unix platforms (LP32 / LP64) but not MSVC (LLP64).<br>&gt; <br>&gt; You will need to conditionalize that line.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt; &gt;<br>&gt; &gt; BEGIN OF tt.swift ---<br>&gt; &gt; import SwiftShims<br>&gt; &gt;<br>&gt; &gt;  var linePtr: UnsafeMutablePointer&lt;CChar&gt;? = nil<br>&gt; &gt;  var readBytes = swift_stdlib_readLine_stdin(&amp;linePtr)<br>&gt; &gt;  print(readBytes)<br>&gt; &gt; END OF tt.swift -----<br>&gt; &gt;<br>&gt; &gt; C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-pc-windows-msvc  | findstr stdlib<br>&gt; &gt;   %4 = call i32 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq* @_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>&gt; &gt; declare i32 @swift_stdlib_readLine_stdin(i8**) #0<br>&gt; &gt;<br>&gt; &gt; C:\temp&gt;swiftc -emit-ir tt.swift -target x86_64-unknown-windows-cygnus | findstr stdlib<br>&gt; &gt;   %4 = call i64 @swift_stdlib_readLine_stdin(i8** bitcast (%Sq* @_Tv2tt7linePtrGSqGSpVs4Int8__ to i8**))<br>&gt; &gt; declare i64 @swift_stdlib_readLine_stdin(i8**) #0<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; - Han Sangjin<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160426/91c0cc7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution] [Compiler] Help IR gen in targetting MSVC</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 1:24 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 1:03 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br>&gt;&gt; The problem can be solved by modifying that code. Thanks you. I thought that code will affect only to the CLong type not Int.<br>&gt; <br>&gt; It changes what &#39;long&#39; gets imported as.  If there&#39;s a Windows API defined using &#39;long&#39; (rather than some more meaningful typedef like &#39;size_t&#39;), it&#39;s important for it to be imported as Int32 rather than Int, since &#39;long&#39; is always 32 bits under MSVC.<br>&gt; <br>&gt;&gt; But I meet another problem to fix it. I couldn&#39;t find the conditional method to distinct x86_64-*-windows-msvc with x86_64-*-windows-cygnus in Swift source.<br>&gt;&gt; <br>&gt;&gt; &quot;#if os(Windows)&quot; can not distinct MSVC from Cygwin.<br>&gt;&gt; <br>&gt;&gt; Should I add new condition &#39;env()&#39; for the environment?<br>&gt; <br>&gt; That is an excellent question.<br>&gt; <br>&gt; My understanding / memory is that, as far as their programming interfaces goes, Cygwin and MSVC are very, very different environments.  Maybe it&#39;s useful to have a condition that&#39;s true for both environments â€” although I&#39;m not sure why it would â€” but I don&#39;t think it deserves to be as prominent as os(Windows).  So my gut reaction is that, rather than adding a #env, we ought to just reserve os(Windows) for MSVC compatibility and make a new os(Cygwin) for Cygwin.<br>&gt; <br>&gt; This needs to be raised on swift-evolution, though.  CC&#39;ing that list.<br></p><p>It&#39;s an interesting question. Mingw, Cygwin, and MSVC definitely vary greatly in ABI and C language level behavior, but the underlying Win32 system libraries remain the same. I think it makes sense to consider them different os(...) environments, but it would also make sense IMO to have a broader platform check for Win32. Along similar lines, Linux, FreeBSD, and Darwin are different OSes, but all also share a POSIX environment.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[swift-evolution] [Compiler] Help IR gen in targetting MSVC</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>April 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 1:39 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; On Apr 26, 2016, at 1:24 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 26, 2016, at 1:03 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt; wrote:<br>&gt;&gt;&gt; The problem can be solved by modifying that code. Thanks you. I thought that code will affect only to the CLong type not Int.<br>&gt;&gt; <br>&gt;&gt; It changes what &#39;long&#39; gets imported as.  If there&#39;s a Windows API defined using &#39;long&#39; (rather than some more meaningful typedef like &#39;size_t&#39;), it&#39;s important for it to be imported as Int32 rather than Int, since &#39;long&#39; is always 32 bits under MSVC.<br>&gt;&gt; <br>&gt;&gt;&gt; But I meet another problem to fix it. I couldn&#39;t find the conditional method to distinct x86_64-*-windows-msvc with x86_64-*-windows-cygnus in Swift source.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;#if os(Windows)&quot; can not distinct MSVC from Cygwin.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Should I add new condition &#39;env()&#39; for the environment?<br>&gt;&gt; <br>&gt;&gt; That is an excellent question.<br>&gt;&gt; <br>&gt;&gt; My understanding / memory is that, as far as their programming interfaces goes, Cygwin and MSVC are very, very different environments.  Maybe it&#39;s useful to have a condition that&#39;s true for both environments â€” although I&#39;m not sure why it would â€” but I don&#39;t think it deserves to be as prominent as os(Windows).  So my gut reaction is that, rather than adding a #env, we ought to just reserve os(Windows) for MSVC compatibility and make a new os(Cygwin) for Cygwin.<br>&gt;&gt; <br>&gt;&gt; This needs to be raised on swift-evolution, though.  CC&#39;ing that list.<br>&gt; <br>&gt; It&#39;s an interesting question. Mingw, Cygwin, and MSVC definitely vary greatly in ABI and C language level behavior, but the underlying Win32 system libraries remain the same. I think it makes sense to consider them different os(...) environments, but it would also make sense IMO to have a broader platform check for Win32.<br></p><p>If, after import and however much magic, they both end up exposing a similarly-typed set of system APIs, I agree that it makes sense to have a condition that says &quot;yes, the target has those APIs&quot;.  It certainly seems like a worthwhile goal for Swift to present them with the same imported types.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52752079730726d693332706c65540b8?s=50"></div><header><strong>[swift-evolution] [Compiler] Help IR gen in targetting MSVC</strong> from <string>Sangjin Han</string> &lt;tinysun.net at gmail.com&gt;<p>April 30, 2016 at 10:00:00am</p></header><div class="content"><p>I made a PR https://github.com/apple/swift/pull/2351 introducing os(Cygwin).<br></p><p><br>2016-04-27 5:54 GMT+09:00 John McCall &lt;rjmccall at apple.com&gt;:<br></p><p>&gt; &gt; On Apr 26, 2016, at 1:39 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; &gt;&gt; On Apr 26, 2016, at 1:24 PM, John McCall via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Apr 26, 2016, at 1:03 PM, Sangjin Han &lt;tinysun.net at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt; The problem can be solved by modifying that code. Thanks you. I<br>&gt; thought that code will affect only to the CLong type not Int.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It changes what &#39;long&#39; gets imported as.  If there&#39;s a Windows API<br>&gt; defined using &#39;long&#39; (rather than some more meaningful typedef like<br>&gt; &#39;size_t&#39;), it&#39;s important for it to be imported as Int32 rather than Int,<br>&gt; since &#39;long&#39; is always 32 bits under MSVC.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; But I meet another problem to fix it. I couldn&#39;t find the conditional<br>&gt; method to distinct x86_64-*-windows-msvc with x86_64-*-windows-cygnus in<br>&gt; Swift source.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &quot;#if os(Windows)&quot; can not distinct MSVC from Cygwin.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Should I add new condition &#39;env()&#39; for the environment?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; That is an excellent question.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; My understanding / memory is that, as far as their programming<br>&gt; interfaces goes, Cygwin and MSVC are very, very different environments.<br>&gt; Maybe it&#39;s useful to have a condition that&#39;s true for both environments â€”<br>&gt; although I&#39;m not sure why it would â€” but I don&#39;t think it deserves to be as<br>&gt; prominent as os(Windows).  So my gut reaction is that, rather than adding a<br>&gt; #env, we ought to just reserve os(Windows) for MSVC compatibility and make<br>&gt; a new os(Cygwin) for Cygwin.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This needs to be raised on swift-evolution, though.  CC&#39;ing that list.<br>&gt; &gt;<br>&gt; &gt; It&#39;s an interesting question. Mingw, Cygwin, and MSVC definitely vary<br>&gt; greatly in ABI and C language level behavior, but the underlying Win32<br>&gt; system libraries remain the same. I think it makes sense to consider them<br>&gt; different os(...) environments, but it would also make sense IMO to have a<br>&gt; broader platform check for Win32.<br>&gt;<br>&gt; If, after import and however much magic, they both end up exposing a<br>&gt; similarly-typed set of system APIs, I agree that it makes sense to have a<br>&gt; condition that says &quot;yes, the target has those APIs&quot;.  It certainly seems<br>&gt; like a worthwhile goal for Swift to present them with the same imported<br>&gt; types.<br>&gt;<br>&gt; John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160430/a727f8a1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
