<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 23, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; Therefore the impermissible:<br>&gt; (()) -&gt; () Is identical to:<br>&gt; (Void) -&gt; () So to follow these rules, it must instead be:<br>&gt; Void -&gt; () … and we’re back to T1 -&gt; T2 :* )*<br></p><p><br>Wrong! If we enforce parentheses in function types, we won&#39;t be able to write<br></p><p>Void -&gt; ()<br></p><p>Parentheses will be required on the grammar level. The correct way to<br>write this will be:<br></p><p>() -&gt; ()  or  () -&gt; Void<br></p><p>The following will be legal:<br></p><p>(Void) -&gt; ()  and  (()) -&gt; ()<br></p><p>It is a function that takes a single parameter () and returns ().<br></p><p>I additionally propose that the following should be illegal, because<br>additional parentheses aren&#39;t needed there:<br></p><p>((())) -&gt; ()  and  () -&gt; (())  and just (Int) and (())<br></p><p>Hope it cleared up things a little bit.<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/07c8952b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 23, 2016 at 02:00:00pm</p></header><div class="content"><p>While I know it might be a bit strange to have different rules for each side, I think I prefer empty brackets on the left and Void on the right, but in combination with required parenthesis on the left. So we’d have:<br></p><p>	() -&gt; Void		// yes<br>	Void -&gt; ()		// no<br>	() -&gt; ()		// no (rhs interpreted as empty tuple which is not allowed)<br>	() -&gt; Int		// yes<br>	Int -&gt; Void	// no (lhs no parens)<br>	(Int) -&gt; Void	// yes<br></p><p>I think the parenthesis helps to highlight that it’s a function/closure, I think it’s also clearer for cases like:<br></p><p>	((Int, String)) -&gt; Void	// this is a closure taking a two-part tuple<br>	(Int, String) -&gt; Void		// this is definitely a closure taking an Int and a String<br></p><p>&gt; On 23 Apr 2016, at 11:47, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Therefore the impermissible:<br>&gt; (()) -&gt; () Is identical to:<br>&gt; (Void) -&gt; () So to follow these rules, it must instead be:<br>&gt; Void -&gt; () … and we’re back to T1 -&gt; T2 : )<br>&gt; <br>&gt; Wrong! If we enforce parentheses in function types, we won&#39;t be able to write<br>&gt; Void -&gt; ()<br>&gt; Parentheses will be required on the grammar level. The correct way to write this will be:<br>&gt; () -&gt; ()  or  () -&gt; Void<br>&gt; The following will be legal:<br>&gt; (Void) -&gt; ()  and  (()) -&gt; ()<br>&gt; It is a function that takes a single parameter () and returns ().<br>&gt; I additionally propose that the following should be illegal, because additional parentheses aren&#39;t needed there:<br>&gt; ((())) -&gt; ()  and  () -&gt; (())  and just (Int) and (())<br>&gt; Hope it cleared up things a little bit.<br>&gt; - Anton<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/5d92aa74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ade0c334ecff1448bb96f5f733bf1f83?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Chris Eidhof</string> &lt;chris at eidhof.nl&gt;<p>April 24, 2016 at 08:00:00am</p></header><div class="content"><p>(Sorry to be hijacking a different subthread, but I only just subscribed<br>again to the mailing list)<br></p><p>I understand why the proposal has its benefits. Yet, if we look at the<br>SE-0009 rationale, we could apply much of that as an argument against this<br>proposal, e.g. &quot;anything that is widely repeated becomes invisible.&quot;. To<br>me, it feel like extra syntax where the -&gt; is already making it very clear<br>that we&#39;re dealing with a function. I can understand why people would want<br>to enforce parenthesised types in their code bases, but to me, it feels<br>like clutter. I don&#39;t have any other strong rationales, adding the<br>parentheses feels superfluous to me, but I&#39;m sure that I can live with it,<br>too.<br></p><p><br>-- <br>Chris Eidhof<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160424/2086b046/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 24, 2016 at 09:00:00am</p></header><div class="content"><p>&gt;.. To me, it feel like extra syntax where the -&gt; is already making it <br>very clear that we&#39;re dealing with a function...<br></p><p>Can&#39;t agree with you.<br></p><p>I don&#39;t think it&#39;s &quot;very clear&quot; where the function and where is result type <br>here:<br></p><p>Int -&gt; String -&gt; Void -&gt; Float<br></p><p>in compare to this:<br></p><p>(Int) -&gt; (String) -&gt; (Void) -&gt; Float<br></p><p>Int/String/Void - are parameters, not result type, as first result type is<br>(String) -&gt; (Void) -&gt; Float<br>then<br>(Void) -&gt; Float<br>then<br>Float<br></p><p>Also, as described in proposal, if we can omit parenthesis then we have a <br>question if<br></p><p>(Int, Int) -&gt; Void<br></p><p>is a tuple-&gt;Void or func with 2 arguments? as we also can have<br></p><p>((Int,Int)) -&gt; Void which is tuple -&gt; Void<br></p><p><br>Please look at this code :<br></p><p>func foo(_ : (x: Int, y: Int)) -&gt; Int {<br>     return 1<br>}<br></p><p>typealias FooType1 = (Int,Int) -&gt; Int  // so, what does this mean?? tuple <br>to Int or 2 params to Int ?<br>typealias FooType2 = (((Int,Int))) -&gt; Int<br></p><p>let bar : FooType1 = foo  // ? will bar accept just tuple or just two params?<br>let bar2 : FooType2 = foo  // ? the same question<br></p><p>let z = (1,2)<br></p><p>foo(z)<br>//foo(1,2) //  ERROR : extra argument in call<br></p><p>bar(z)  // no problems<br>bar(1, 2)  // no problems<br></p><p>bar2(z)<br>// but<br>//bar2(1,2) // ERROR: extra argument in call<br></p><p>Were you confused by the FooType1 declaration?<br></p><p><br>On 24.04.2016 9:18, Chris Eidhof via swift-evolution wrote:<br>&gt; (Sorry to be hijacking a different subthread, but I only just subscribed<br>&gt; again to the mailing list)<br>&gt;<br>&gt; I understand why the proposal has its benefits. Yet, if we look at the<br>&gt; SE-0009 rationale, we could apply much of that as an argument against this<br>&gt; proposal, e.g. &quot;anything that is widely repeated becomes invisible.&quot;. To<br>&gt; me, it feel like extra syntax where the -&gt; is already making it very clear<br>&gt; that we&#39;re dealing with a function. I can understand why people would want<br>&gt; to enforce parenthesised types in their code bases, but to me, it feels<br>&gt; like clutter. I don&#39;t have any other strong rationales, adding the<br>&gt; parentheses feels superfluous to me, but I&#39;m sure that I can live with it, too.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Chris Eidhof<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 24, 2016 at 02:00:00pm</p></header><div class="content"><p>On Apr 23, 2016, at 6:01 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; While I know it might be a bit strange to have different rules for each side, I think I prefer empty brackets on the left and Void on the right, but in combination with required parenthesis on the left.<br></p><p>FWIW, it *does* make sense for there to be rules on both sides.  On the right is a “type” on the left is an “argument list”, which is more general than a type already (e.g. each argument can contain inout, @autoclosure, etc).<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
