<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 10, 2015 at 07:00:00am</p></header><div class="content"><p>For example:<br></p><p>for* … {<br>  for** ... {<br>    for ... {<br>      …<br>      if … { break for* }<br>      ...<br>      if … { continue for** }<br>      ...<br>    }<br>  }<br>}<br></p><p>repeat {<br>  do {<br>    for … {<br>      if … { break do }<br>      if … { continue repeat }<br>    }<br>    …<br>  }<br>} while …<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 10, 2015 at 01:00:00pm</p></header><div class="content"><p>No<br></p><p>On Thu, Dec 10, 2015 at 12:59 PM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; For example:<br>&gt;<br>&gt; for* … {<br>&gt;   for** ... {<br>&gt;     for ... {<br>&gt;       …<br>&gt;       if … { break for* }<br>&gt;       ...<br>&gt;       if … { continue for** }<br>&gt;       ...<br>&gt;     }<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; repeat {<br>&gt;   do {<br>&gt;     for … {<br>&gt;       if … { break do }<br>&gt;       if … { continue repeat }<br>&gt;     }<br>&gt;     …<br>&gt;   }<br>&gt; } while …<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/3a3e2ad3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 10, 2015 at 06:00:00am</p></header><div class="content"><p>Curios as to what you see the advantage of this is, over labels? Seems to me it only saves a few keystrokes at the expense of clarity.<br></p><p>Given the stated goals of Swift I don’t imagine this would be an interesting proposal for many.<br></p><p>&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; for* … {<br>&gt;  for** ... {<br>&gt;    for ... {<br>&gt;      …<br>&gt;      if … { break for* }<br>&gt;      ...<br>&gt;      if … { continue for** }<br>&gt;      ...<br>&gt;    }<br>&gt;  }<br>&gt; }<br>&gt; <br>&gt; repeat {<br>&gt;  do {<br>&gt;    for … {<br>&gt;      if … { break do }<br>&gt;      if … { continue repeat }<br>&gt;    }<br>&gt;    …<br>&gt;  }<br>&gt; } while …<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 10, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 8:20 AM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt; <br>&gt; Curios as to what you see the advantage of this is, over labels? Seems to me it only saves a few keystrokes at the expense of clarity.<br></p><p>What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br></p><p>Also, I really don’t like coming up with label names. They tend to be uninteresting.<br></p><p>&gt; <br>&gt; Given the stated goals of Swift I don’t imagine this would be an interesting proposal for many.<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; <br>&gt;&gt; for* … {<br>&gt;&gt; for** ... {<br>&gt;&gt;   for ... {<br>&gt;&gt;     …<br>&gt;&gt;     if … { break for* }<br>&gt;&gt;     ...<br>&gt;&gt;     if … { continue for** }<br>&gt;&gt;     ...<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; repeat {<br>&gt;&gt; do {<br>&gt;&gt;   for … {<br>&gt;&gt;     if … { break do }<br>&gt;&gt;     if … { continue repeat }<br>&gt;&gt;   }<br>&gt;&gt;   …<br>&gt;&gt; }<br>&gt;&gt; } while …<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 10, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br></p><p>Because `do` isn&#39;t a loop.<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 10.12.2015, o godz. 14:28:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 8:20 AM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Curios as to what you see the advantage of this is, over labels? Seems to me it only saves a few keystrokes at the expense of clarity.<br>&gt; <br>&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt; <br>&gt; Also, I really don’t like coming up with label names. They tend to be uninteresting.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Given the stated goals of Swift I don’t imagine this would be an interesting proposal for many.<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for* … {<br>&gt;&gt;&gt; for** ... {<br>&gt;&gt;&gt;  for ... {<br>&gt;&gt;&gt;    …<br>&gt;&gt;&gt;    if … { break for* }<br>&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;    if … { continue for** }<br>&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; repeat {<br>&gt;&gt;&gt; do {<br>&gt;&gt;&gt;  for … {<br>&gt;&gt;&gt;    if … { break do }<br>&gt;&gt;&gt;    if … { continue repeat }<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;  …<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; } while …<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/9c94969e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 10, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 8:45 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com&gt; wrote:<br>&gt; <br>&gt;&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt; <br>&gt; Because `do` isn&#39;t a loop.<br></p><p>Neither is a case but the “break&quot; behaviour is different.<br></p><p>Moreover, you can give do a label to just break out of the do.<br></p><p>&gt; <br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; w dniu 10.12.2015, o godz. 14:28:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 8:20 AM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Curios as to what you see the advantage of this is, over labels? Seems to me it only saves a few keystrokes at the expense of clarity.<br>&gt;&gt; <br>&gt;&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt;&gt; <br>&gt;&gt; Also, I really don’t like coming up with label names. They tend to be uninteresting.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Given the stated goals of Swift I don’t imagine this would be an interesting proposal for many.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for* … {<br>&gt;&gt;&gt;&gt; for** ... {<br>&gt;&gt;&gt;&gt;  for ... {<br>&gt;&gt;&gt;&gt;    …<br>&gt;&gt;&gt;&gt;    if … { break for* }<br>&gt;&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;&gt;    if … { continue for** }<br>&gt;&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; repeat {<br>&gt;&gt;&gt;&gt; do {<br>&gt;&gt;&gt;&gt;  for … {<br>&gt;&gt;&gt;&gt;    if … { break do }<br>&gt;&gt;&gt;&gt;    if … { continue repeat }<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;  …<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; } while …<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/73f6add8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 10, 2015 at 06:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 6:47 AM, Amir Michail &lt;a.michail at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 8:45 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt;&gt; <br>&gt;&gt; Because `do` isn&#39;t a loop.<br>&gt; <br>&gt; Neither is a case but the “break&quot; behaviour is different.<br>&gt; <br>&gt; Moreover, you can give do a label to just break out of the do.<br>&gt; <br></p><p><br>As you just said if you think “break” behavior is unclear, you can add a label.<br></p><p>It doesn’t seem to be up for debate that labels provide much more clarity than your proposal. To reduce clarity because you find it annoying to come up with label names is not consistent with the design of the language; which clearly favors clarity.<br></p><p><br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Pozdrawiam – Regards,<br>&gt;&gt; Adrian Kashivskyy<br>&gt;&gt; <br>&gt;&gt;&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; w dniu 10.12.2015, o godz. 14:28:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 8:20 AM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Curios as to what you see the advantage of this is, over labels? Seems to me it only saves a few keystrokes at the expense of clarity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, I really don’t like coming up with label names. They tend to be uninteresting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Given the stated goals of Swift I don’t imagine this would be an interesting proposal for many.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for* … {<br>&gt;&gt;&gt;&gt;&gt; for** ... {<br>&gt;&gt;&gt;&gt;&gt;  for ... {<br>&gt;&gt;&gt;&gt;&gt;    …<br>&gt;&gt;&gt;&gt;&gt;    if … { break for* }<br>&gt;&gt;&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;&gt;&gt;    if … { continue for** }<br>&gt;&gt;&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; repeat {<br>&gt;&gt;&gt;&gt;&gt; do {<br>&gt;&gt;&gt;&gt;&gt;  for … {<br>&gt;&gt;&gt;&gt;&gt;    if … { break do }<br>&gt;&gt;&gt;&gt;&gt;    if … { continue repeat }<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;  …<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; } while …<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/bdb87505/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 10, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 8:54 AM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 10, 2015, at 6:47 AM, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 8:45 AM, Adrian Kashivskyy &lt;adrian.kashivskyy at me.com &lt;mailto:adrian.kashivskyy at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because `do` isn&#39;t a loop.<br>&gt;&gt; <br>&gt;&gt; Neither is a case but the “break&quot; behaviour is different.<br>&gt;&gt; <br>&gt;&gt; Moreover, you can give do a label to just break out of the do.<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; As you just said if you think “break” behavior is unclear, you can add a label.<br></p><p>The point is that Swift currently has inconsistent break behaviour. <br></p><p>&gt; <br>&gt; It doesn’t seem to be up for debate that labels provide much more clarity than your proposal. To reduce clarity because you find it annoying to come up with label names is not consistent with the design of the language; which clearly favors clarity.<br>&gt; <br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Pozdrawiam – Regards,<br>&gt;&gt;&gt; Adrian Kashivskyy<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Wiadomość napisana przez Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; w dniu 10.12.2015, o godz. 14:28:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 8:20 AM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Curios as to what you see the advantage of this is, over labels? Seems to me it only saves a few keystrokes at the expense of clarity.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What “break&quot; currently does can be unclear. For example, “break” without a label in do {…} doesn’t just break out of the do.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I really don’t like coming up with label names. They tend to be uninteresting.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Given the stated goals of Swift I don’t imagine this would be an interesting proposal for many.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; for* … {<br>&gt;&gt;&gt;&gt;&gt;&gt; for** ... {<br>&gt;&gt;&gt;&gt;&gt;&gt;  for ... {<br>&gt;&gt;&gt;&gt;&gt;&gt;    …<br>&gt;&gt;&gt;&gt;&gt;&gt;    if … { break for* }<br>&gt;&gt;&gt;&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;&gt;&gt;&gt;    if … { continue for** }<br>&gt;&gt;&gt;&gt;&gt;&gt;    ...<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; repeat {<br>&gt;&gt;&gt;&gt;&gt;&gt; do {<br>&gt;&gt;&gt;&gt;&gt;&gt;  for … {<br>&gt;&gt;&gt;&gt;&gt;&gt;    if … { break do }<br>&gt;&gt;&gt;&gt;&gt;&gt;    if … { continue repeat }<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;  …<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; } while …<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/e5f64d93/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 10, 2015 at 11:00:00am</p></header><div class="content"><p>Unlabeled &quot;break&quot; within a do is a compiler error, even if the do is nested<br>within a different control flow.<br></p><p>If you really hate coming up with label names, just start with L1 and start<br>counting up. If you really need to come up with that many labeled breaks in<br>your code, though, I would invite you to step back and think about whether<br>or not you could refactor your control flow in a way that makes it easier<br>for others to understand.<br></p><p>Austin<br></p><p>On Thu, Dec 10, 2015 at 5:28 AM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Dec 10, 2015, at 8:20 AM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Curios as to what you see the advantage of this is, over labels? Seems<br>&gt; to me it only saves a few keystrokes at the expense of clarity.<br>&gt;<br>&gt; What “break&quot; currently does can be unclear. For example, “break” without a<br>&gt; label in do {…} doesn’t just break out of the do.<br>&gt;<br>&gt; Also, I really don’t like coming up with label names. They tend to be<br>&gt; uninteresting.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Given the stated goals of Swift I don’t imagine this would be an<br>&gt; interesting proposal for many.<br>&gt; &gt;<br>&gt; &gt;&gt; On Dec 10, 2015, at 5:59 AM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; For example:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; for* … {<br>&gt; &gt;&gt; for** ... {<br>&gt; &gt;&gt;   for ... {<br>&gt; &gt;&gt;     …<br>&gt; &gt;&gt;     if … { break for* }<br>&gt; &gt;&gt;     ...<br>&gt; &gt;&gt;     if … { continue for** }<br>&gt; &gt;&gt;     ...<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; repeat {<br>&gt; &gt;&gt; do {<br>&gt; &gt;&gt;   for … {<br>&gt; &gt;&gt;     if … { break do }<br>&gt; &gt;&gt;     if … { continue repeat }<br>&gt; &gt;&gt;   }<br>&gt; &gt;&gt;   …<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; } while …<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/b07cc4de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December 10, 2015 at 11:00:00am</p></header><div class="content"><p>On Thu, Dec 10, 2015, at 11:05 AM, Austin Zheng via swift-evolution wrote:<br>&gt; Unlabeled &quot;break&quot; within a do is a compiler error, even if the do is<br>&gt; nested within a different control flow.<br></p><p>No it&#39;s not. The following compiles just fine (in Swift 2.1 and<br>Swift 2.2-dev):<br></p><p>repeat {    do {        break    } } while true print(&quot;done&quot;)<br></p><p>But I don&#39;t think that&#39;s a problem. There&#39;s tons of precedent for<br>unlabelled break breaking out of the nearest enclosing loop rather than<br>the nearest enclosing scope. And people are generally going to learn<br>about unlabelled break before labelled break. The fact that you can<br>label a do {} and break out of it is interesting, but shouldn&#39;t change<br>the expected behavior of unlabelled break.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/0952c969/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Proposal: Replace labels with keywords and &quot;*&quot; suffixes</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 10, 2015 at 11:00:00am</p></header><div class="content"><p>Indeed, you&#39;re right. If the do or if is nested within a loop the break works on the loop instead of the do/if.<br></p><p>Austin<br></p><p>&gt; On Dec 10, 2015, at 11:12 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Thu, Dec 10, 2015, at 11:05 AM, Austin Zheng via swift-evolution wrote:<br>&gt;&gt; Unlabeled &quot;break&quot; within a do is a compiler error, even if the do is nested within a different control flow.<br>&gt;  <br>&gt; No it&#39;s not. The following compiles just fine (in Swift 2.1 and Swift 2.2-dev):<br>&gt;  <br>&gt; repeat {<br>&gt;     do {<br>&gt;         break<br>&gt;     }<br>&gt; } while true<br>&gt; print(&quot;done&quot;)<br>&gt; <br>&gt; But I don&#39;t think that&#39;s a problem. There&#39;s tons of precedent for unlabelled break breaking out of the nearest enclosing loop rather than the nearest enclosing scope. And people are generally going to learn about unlabelled break before labelled break. The fact that you can label a do {} and break out of it is interesting, but shouldn&#39;t change the expected behavior of unlabelled break.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/d695c097/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
