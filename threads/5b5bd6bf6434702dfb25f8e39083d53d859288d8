<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58e2591737c75b7700b11f23381b9590?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Rick Ballard</string> &lt;rballard at apple.com&gt;<p>February 16, 2016 at 06:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>A review of “Package Manager C Language Target Support” for the Swift Package Manager begins now and runs through Monday, February 22th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>	- Rick<br>	  Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 18, 2016 at 12:00:00am</p></header><div class="content"><p>I haven&#39;t had time to read this yet but I do have a question. You mention<br>C++ here but that is explicitly not a Swift 3 feature, right? Is this just<br>part of the groundwork for C++ support?<br></p><p><br></p><p>On Tue, Feb 16, 2016 at 9:12 PM, Rick Ballard via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; A review of “Package Manager C Language Target Support” for the Swift<br>&gt; Package Manager begins now and runs through Monday, February 22th. The<br>&gt; proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to the Swift Package Manager?<br>&gt;         * Does this proposal fit well with the feel and direction of the<br>&gt; Swift Package Manager?<br>&gt;         * If you have you used other package managers with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt;         - Rick<br>&gt;           Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160218/6ca9fae9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58e2591737c75b7700b11f23381b9590?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Rick Ballard</string> &lt;rballard at apple.com&gt;<p>February 17, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi T.J.,<br></p><p>This proposal is not about mixed Swift-C++ code. It&#39;s about allowing a Swift package to depend on and build a pure C/C++ module.<br></p><p>I hope that clarifies,<br></p><p>	- Rick<br></p><p>&gt; On Feb 17, 2016, at 9:34 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; I haven&#39;t had time to read this yet but I do have a question. You mention C++ here but that is explicitly not a Swift 3 feature, right? Is this just part of the groundwork for C++ support?<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Feb 16, 2016 at 9:12 PM, Rick Ballard via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; A review of “Package Manager C Language Target Support” for the Swift Package Manager begins now and runs through Monday, February 22th. The proposal is available here:<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>&gt;         * Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>&gt;         * If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt;         - Rick<br>&gt;           Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160217/c4ddd9da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 18, 2016 at 12:00:00am</p></header><div class="content"><p>Ah, you *did* state that explicitly in the proposal. Sorry. This is still<br>looks like a great addition.<br></p><p>TJ<br></p><p><br></p><p>On Thu, Feb 18, 2016 at 12:36 AM, Rick Ballard &lt;rballard at apple.com&gt; wrote:<br></p><p>&gt; Hi T.J.,<br>&gt;<br>&gt; This proposal is not about mixed Swift-C++ code. It&#39;s about allowing a<br>&gt; Swift package to depend on and build a pure C/C++ module.<br>&gt;<br>&gt; I hope that clarifies,<br>&gt;<br>&gt; - Rick<br>&gt;<br>&gt; On Feb 17, 2016, at 9:34 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt; I haven&#39;t had time to read this yet but I do have a question. You mention<br>&gt; C++ here but that is explicitly not a Swift 3 feature, right? Is this just<br>&gt; part of the groundwork for C++ support?<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Feb 16, 2016 at 9:12 PM, Rick Ballard via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; A review of “Package Manager C Language Target Support” for the Swift<br>&gt;&gt; Package Manager begins now and runs through Monday, February 22th. The<br>&gt;&gt; proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to the Swift Package Manager?<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of the<br>&gt;&gt; Swift Package Manager?<br>&gt;&gt;         * If you have you used other package managers with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt;         - Rick<br>&gt;&gt;           Review Manager<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160218/4c8bd62f/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d00f5acbaa7d24e0900e5045462e008?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Chris Bailey</string> &lt;BAILEYC at uk.ibm.com&gt;<p>February 18, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi Rick:<br></p><p>Thanks for putting this proposal together - having the ability to build <br>and link to C dependencies is going to be a huge step forward and this <br>very much looks like a step in the right direction.<br></p><p>I know there&#39;s been some discussion about being able to invoke custom <br>build targets and/or link to local dependencies. I agree that we don&#39;t <br>want to pre-design the entire solution but iterate in the right direction <br>and get feedback as we go. One thing we can do is look at some of the <br>challenges and solutions from other languages.<br></p><p>If we look at Node.js/NPM, as the most used language package manager, it <br>highlights the high usage of native modules. Most native modules have a <br>dependency on &quot;nan&quot; which has &gt;6.5M downloads a month and approaching 1000 <br>dependent modules.<br></p><p>As an example, one of those dependents is &quot;zmq&quot; (30K+ downloads/month) <br>which provides Node.js bindings for ZeroMQ. This provides a Node.js <br>wrapper around the zeromq library (installable via homebrew, apt-get etc). <br>The NPM approach is that at install/build time, the binding.gyp file can <br>be configured to check for the presence of the library, and to add the <br>necessary include and link flags.<br></p><p>I know that supporting that kind of scenario is outside of the scope of <br>this proposal - is it however a direction we&#39;re headed to?<br></p><p>Thanks,<br></p><p>Chris<br></p><p><br></p><p><br>From:   Rick Ballard via swift-build-dev &lt;swift-build-dev at swift.org&gt;<br>To:     swift-evolution-announce at swift.org<br>Cc:     swift-evolution &lt;swift-evolution at swift.org&gt;, <br>swift-build-dev at swift.org<br>Date:   17/02/2016 02:12<br>Subject:        [swift-build-dev] [Review] SE-0038 Package Manager C <br>Language        Target Support<br>Sent by:        swift-build-dev-bounces at swift.org<br></p><p><br></p><p>Hello Swift community,<br></p><p>A review of “Package Manager C Language Target Support” for the Swift <br>Package Manager begins now and runs through Monday, February 22th. The <br>proposal is available here:<br></p><p>                 <br>https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br></p><p><br>Reviews are an important part of the Swift evolution process. All reviews <br>should be sent to the swift-evolution mailing list at<br></p><p>                 https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the <br>review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review <br>through constructive criticism and, eventually, determine the direction of <br>Swift. When writing your review, here are some questions you might want to <br>answer in your review:<br></p><p>                 * What is your evaluation of the proposal?<br>                 * Is the problem being addressed significant enough to <br>warrant a change to the Swift Package Manager?<br>                 * Does this proposal fit well with the feel and direction <br>of the Swift Package Manager?<br>                 * If you have you used other package managers with a <br>similar feature, how do you feel that this proposal compares to those?<br>                 * How much effort did you put into your review? A glance, <br>a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>                 <br>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>                 - Rick<br>                   Review Manager<br></p><p>_______________________________________________<br>swift-build-dev mailing list<br>swift-build-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160218/cd3c8d06/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 18, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; As an example, one of those dependents is &quot;zmq&quot; (30K+ downloads/month) which provides Node.js bindings for ZeroMQ. This provides a Node.js wrapper around the zeromq library (installable via homebrew, apt-get etc). The NPM approach is that at install/build time, the binding.gyp file can be configured to check for the presence of the library, and to add the necessary include and link flags. <br></p><p>System libraries are handled by our System Module Map Package system which is separate to this proposal.<br></p><p>C targets under this proposal cannot directly depend on system libraries (though they could depend on a system-library-module-map-package).<br></p><p>The module-map package situation is not great at this time, but we will shortly have another proposal that seeks to improve that, I suggest watching out for that proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160218/5ed2950f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17301ad52a677b00a621c39ab052e16d?s=50"></div><header><strong>[Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Daniel Dunbar</string> &lt;daniel at zuster.org&gt;<p>February 18, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi Chris,<br></p><p>On Thu, Feb 18, 2016 at 1:25 PM, Chris Bailey via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi Rick:<br>&gt;<br>&gt; Thanks for putting this proposal together - having the ability to build<br>&gt; and link to C dependencies is going to be a huge step forward and this very<br>&gt; much looks like a step in the right direction.<br>&gt;<br>&gt; I know there&#39;s been some discussion about being able to invoke custom<br>&gt; build targets and/or link to local dependencies. I agree that we don&#39;t want<br>&gt; to pre-design the entire solution but iterate in the right direction and<br>&gt; get feedback as we go. One thing we can do is look at some of the<br>&gt; challenges and solutions from other languages.<br>&gt;<br>&gt; If we look at Node.js/NPM, as the most used language package manager, it<br>&gt; highlights the high usage of native modules. Most native modules have a<br>&gt; dependency on &quot;nan&quot; which has &gt;6.5M downloads a month and approaching 1000<br>&gt; dependent modules.<br>&gt;<br>&gt; As an example, one of those dependents is &quot;zmq&quot; (30K+ downloads/month)<br>&gt; which provides Node.js bindings for ZeroMQ. This provides a Node.js wrapper<br>&gt; around the zeromq library (installable via homebrew, apt-get etc). The NPM<br>&gt; approach is that at install/build time, the binding.gyp file can be<br>&gt; configured to check for the presence of the library, and to add the<br>&gt; necessary include and link flags.<br>&gt;<br>&gt; I know that supporting that kind of scenario is outside of the scope of<br>&gt; this proposal - is it however a direction we&#39;re headed to?<br>&gt;<br></p><p>We have three parallel features that all target this area, and I think that<br>eventually they will converge:<br></p><p>1. Our existing system module maps feature is designed to allow integrating<br>installed software with the package ecosystem. I am sure it will grow more<br>&quot;conditional&quot; features over time.<br></p><p>2. For projects which have a straightforward enough build process to be<br>fully described via our built in support (possibly using manifest override<br>features not yet designed), then I would like for them to be able to be<br>described as packages following this proposal (e.g., maybe there could be a<br>package which describes ZeroMQ that we could build it fully inside the<br>ecosystem).<br></p><p>3. There will be other projects outside that scope, but which we want to<br>also allow to participate in the ecosystem. For them, I suspect the best<br>solution is an alternate &quot;adaptor&quot; mechanism for integrating them into the<br>ecosystem. Some of my thoughts on that are in this thread:<br></p><p>https://lists.swift.org/pipermail/swift-build-dev/Week-of-Mon-20160104/000154.html<br></p><p> - Daniel<br></p><p><br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; Chris<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; From:        Rick Ballard via swift-build-dev &lt;swift-build-dev at swift.org&gt;<br>&gt; To:        swift-evolution-announce at swift.org<br>&gt; Cc:        swift-evolution &lt;swift-evolution at swift.org&gt;,<br>&gt; swift-build-dev at swift.org<br>&gt; Date:        17/02/2016 02:12<br>&gt; Subject:        [swift-build-dev] [Review] SE-0038 Package Manager C<br>&gt; Language        Target Support<br>&gt; Sent by:        swift-build-dev-bounces at swift.org<br>&gt; ------------------------------<br>&gt;<br>&gt;<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; A review of “Package Manager C Language Target Support” for the Swift<br>&gt; Package Manager begins now and runs through Monday, February 22th. The<br>&gt; proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;                 * What is your evaluation of the proposal?<br>&gt;                 * Is the problem being addressed significant enough to<br>&gt; warrant a change to the Swift Package Manager?<br>&gt;                 * Does this proposal fit well with the feel and direction<br>&gt; of the Swift Package Manager?<br>&gt;                 * If you have you used other package managers with a<br>&gt; similar feature, how do you feel that this proposal compares to those?<br>&gt;                 * How much effort did you put into your review? A glance,<br>&gt; a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt;                 - Rick<br>&gt;                   Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160218/7495e8c8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution] [Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 18, 2016 at 01:00:00pm</p></header><div class="content"><p>Looks pretty good! My one comment is that I think there should be support for umbrella headers, which allow more control over include order within a module. Maybe it&#39;s not strictly necessary, but if someone wants to develop a package that can be used by modular and non-modular build environments, they probably also want a way to keep the behavior as close as possible.<br></p><p>Suggestion: &quot;foo/foo.h&quot; in the include/ folder for &quot;foo&quot; is treated as an umbrella header if present; overriding this requires writing your own module map.<br></p><p><br>Having the &quot;include/&quot; folder inside the &quot;src/&quot; folder seems weird to me, but I guess it&#39;s the most consistent thing for packages that omit the src/ folder altogether.<br></p><p><br>What if there&#39;s more than one folder in the include/ folder? How are modules constructed? I wouldn&#39;t want &quot;llvm/&quot; and &quot;llvm-c/&quot; to be put in one module.<br></p><p>Jordan<br></p><p><br>&gt; On Feb 16, 2016, at 18:12, Rick Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; A review of “Package Manager C Language Target Support” for the Swift Package Manager begins now and runs through Monday, February 22th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>&gt; 	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>&gt; 	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; 	- Rick<br>&gt; 	  Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[swift-evolution] [Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>February 19, 2016 at 08:00:00am</p></header><div class="content"><p>On Feb 18, 2016, at 1:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Looks pretty good! My one comment is that I think there should be support for umbrella headers, which allow more control over include order within a module. Maybe it&#39;s not strictly necessary, but if someone wants to develop a package that can be used by modular and non-modular build environments, they probably also want a way to keep the behavior as close as possible.<br></p><p>I agree, I will amend the proposal to add this.<br></p><p>&gt; Suggestion: &quot;foo/foo.h&quot; in the include/ folder for &quot;foo&quot; is treated as an umbrella header if present; overriding this requires writing your own module map.<br></p><p>Agreed.<br></p><p>&gt; Having the &quot;include/&quot; folder inside the &quot;src/&quot; folder seems weird to me, but I guess it&#39;s the most consistent thing for packages that omit the src/ folder altogether.<br></p><p>Can you elaborate here? Is your concern packages that in traditional UNIX style would have looked something like ROOT/include ROOT/src, and that they are now ROOT/src/include?<br></p><p>I agree that is a little funny. I don&#39;t see a great alternative -- we could support ROOT/include and ROOT/src, but that feels odd since as soon as you added a subdirectory to ROOT/src we would start treating them as independent targets. It might be that single-target C packages are useful enough this is worth supporting, but I&#39;m not sure it is worth complicating the conventions for.<br></p><p>&gt; What if there&#39;s more than one folder in the include/ folder? How are modules constructed? I wouldn&#39;t want &quot;llvm/&quot; and &quot;llvm-c/&quot; to be put in one module.<br></p><p>Good point, this is something I didn&#39;t fully work out. I see a couple options here:<br></p><p>1. The primary use for module maps is for C targets being used in Swift. Those targets are encouraged strongly to support the foo/include/foo/*.h convention. We could restrict ourselves to only generating module maps in those situations, and in other situations requiring the library author to provide them.<br></p><p>The use case for allowing arbitrary headers under include/ was intended more at legacy C targets, or very complicated targets, both of which it is maybe reasonable to write module maps by hand.<br></p><p>2. We could define a policy that automatically creates different module maps based on the immediate subdirectory structure of the include dir. So, for the LLVM example, we could synthesize one module map for each of llvm and llvm-c.<br></p><p>This seems like it would work pretty well in practice, but then raises other special case questions: those modules then need distinct module names, derived from the directory name presumably. That works fine, but what if you have headers in foo/include/*.h *and* foo/include/foo/*.h? We would have to disallow that, or merge those two groups of headers into one module map, another annoying special case.<br></p><p>My temptation is to start with #1 and refine if it appears useful. What do you think?<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 16, 2016, at 18:12, Rick Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; A review of “Package Manager C Language Target Support” for the Swift Package Manager begins now and runs through Monday, February 22th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>&gt;&gt; 	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; 	- Rick<br>&gt;&gt; 	  Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160219/a93bd2ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution] [Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 25, 2016 at 09:00:00am</p></header><div class="content"><p>Oops, review period is over but I guess I should still respond.<br></p><p>&gt; On Feb 19, 2016, at 8:27 , Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; On Feb 18, 2016, at 1:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Having the &quot;include/&quot; folder inside the &quot;src/&quot; folder seems weird to me, but I guess it&#39;s the most consistent thing for packages that omit the src/ folder altogether.<br>&gt; <br>&gt; Can you elaborate here? Is your concern packages that in traditional UNIX style would have looked something like ROOT/include ROOT/src, and that they are now ROOT/src/include?<br>&gt; <br>&gt; I agree that is a little funny. I don&#39;t see a great alternative -- we could support ROOT/include and ROOT/src, but that feels odd since as soon as you added a subdirectory to ROOT/src we would start treating them as independent targets. It might be that single-target C packages are useful enough this is worth supporting, but I&#39;m not sure it is worth complicating the conventions for.<br></p><p>Yeah, that was the concern. I&#39;d expect ROOT/src/include to be private headers and ROOT/include to be public headers. But I agree there&#39;s not much to do about it.<br></p><p>&gt; <br>&gt;&gt; What if there&#39;s more than one folder in the include/ folder? How are modules constructed? I wouldn&#39;t want &quot;llvm/&quot; and &quot;llvm-c/&quot; to be put in one module.<br>&gt; <br>&gt; Good point, this is something I didn&#39;t fully work out. I see a couple options here:<br>&gt; <br>&gt; 1. The primary use for module maps is for C targets being used in Swift. Those targets are encouraged strongly to support the foo/include/foo/*.h convention. We could restrict ourselves to only generating module maps in those situations, and in other situations requiring the library author to provide them.<br>&gt; <br>&gt; The use case for allowing arbitrary headers under include/ was intended more at legacy C targets, or very complicated targets, both of which it is maybe reasonable to write module maps by hand.<br>&gt; <br>&gt; 2. We could define a policy that automatically creates different module maps based on the immediate subdirectory structure of the include dir. So, for the LLVM example, we could synthesize one module map for each of llvm and llvm-c.<br>&gt; <br>&gt; This seems like it would work pretty well in practice, but then raises other special case questions: those modules then need distinct module names, derived from the directory name presumably. That works fine, but what if you have headers in foo/include/*.h *and* foo/include/foo/*.h? We would have to disallow that, or merge those two groups of headers into one module map, another annoying special case.<br>&gt; <br>&gt; My temptation is to start with #1 and refine if it appears useful. What do you think?<br></p><p>I don&#39;t actually see how you can do #1 correctly if you were to install the package. (Then again, we don&#39;t know how to do top-level headers correctly either if you were to install the package, because we don&#39;t know how to add to the /usr/include module map.)<br></p><p>I think I&#39;d just limit it to &quot;we only generate a module map if you have exactly one subdirectory&quot;, and wait to see what feature requests come in, i.e. how people are actually structuring their modules.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160225/2459dbf9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[swift-evolution] [Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>February 25, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 9:12 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Oops, review period is over but I guess I should still respond.<br>&gt; <br>&gt;&gt; On Feb 19, 2016, at 8:27 , Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Feb 18, 2016, at 1:26 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Having the &quot;include/&quot; folder inside the &quot;src/&quot; folder seems weird to me, but I guess it&#39;s the most consistent thing for packages that omit the src/ folder altogether.<br>&gt;&gt; <br>&gt;&gt; Can you elaborate here? Is your concern packages that in traditional UNIX style would have looked something like ROOT/include ROOT/src, and that they are now ROOT/src/include?<br>&gt;&gt; <br>&gt;&gt; I agree that is a little funny. I don&#39;t see a great alternative -- we could support ROOT/include and ROOT/src, but that feels odd since as soon as you added a subdirectory to ROOT/src we would start treating them as independent targets. It might be that single-target C packages are useful enough this is worth supporting, but I&#39;m not sure it is worth complicating the conventions for.<br>&gt; <br>&gt; Yeah, that was the concern. I&#39;d expect ROOT/src/include to be private headers and ROOT/include to be public headers. But I agree there&#39;s not much to do about it.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; What if there&#39;s more than one folder in the include/ folder? How are modules constructed? I wouldn&#39;t want &quot;llvm/&quot; and &quot;llvm-c/&quot; to be put in one module.<br>&gt;&gt; <br>&gt;&gt; Good point, this is something I didn&#39;t fully work out. I see a couple options here:<br>&gt;&gt; <br>&gt;&gt; 1. The primary use for module maps is for C targets being used in Swift. Those targets are encouraged strongly to support the foo/include/foo/*.h convention. We could restrict ourselves to only generating module maps in those situations, and in other situations requiring the library author to provide them.<br>&gt;&gt; <br>&gt;&gt; The use case for allowing arbitrary headers under include/ was intended more at legacy C targets, or very complicated targets, both of which it is maybe reasonable to write module maps by hand.<br>&gt;&gt; <br>&gt;&gt; 2. We could define a policy that automatically creates different module maps based on the immediate subdirectory structure of the include dir. So, for the LLVM example, we could synthesize one module map for each of llvm and llvm-c.<br>&gt;&gt; <br>&gt;&gt; This seems like it would work pretty well in practice, but then raises other special case questions: those modules then need distinct module names, derived from the directory name presumably. That works fine, but what if you have headers in foo/include/*.h *and* foo/include/foo/*.h? We would have to disallow that, or merge those two groups of headers into one module map, another annoying special case.<br>&gt;&gt; <br>&gt;&gt; My temptation is to start with #1 and refine if it appears useful. What do you think?<br>&gt; <br>&gt; I don&#39;t actually see how you can do #1 correctly if you were to install the package. (Then again, we don&#39;t know how to do top-level headers correctly either if you were to install the package, because we don&#39;t know how to add to the /usr/include module map.)<br>&gt; <br>&gt; I think I&#39;d just limit it to &quot;we only generate a module map if you have exactly one subdirectory&quot;, and wait to see what feature requests come in, i.e. how people are actually structuring their modules.<br></p><p>Agreed.<br></p><p>I&#39;ve these changes in this PR:<br>  https://github.com/apple/swift-evolution/pull/173<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160225/0785e9cc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d00f5acbaa7d24e0900e5045462e008?s=50"></div><header><strong>[swift-build-dev] [Review] SE-0038 Package Manager C Language Target Support</strong> from <string>Chris Bailey</string> &lt;BAILEYC at uk.ibm.com&gt;<p>February 18, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi Rick:<br></p><p>Thanks for putting this proposal together - having the ability to build <br>and link to C dependencies is going to be a huge step forward and this <br>very much looks like a step in the right direction.<br></p><p>I know there&#39;s been some discussion about being able to invoke custom <br>build targets and/or link to local dependencies. I agree that we don&#39;t <br>want to pre-design the entire solution but iterate in the right direction <br>and get feedback as we go. One thing we can do is look at some of the <br>challenges and solutions from other languages.<br></p><p>If we look at Node.js/NPM, as the most used language package manager, it <br>highlights the high usage of native modules. Most native modules have a <br>dependency on &quot;nan&quot; which has &gt;6.5M downloads a month and approaching 1000 <br>dependent modules.<br></p><p>As an example, one of those dependents is &quot;zmq&quot; (30K+ downloads/month) <br>which provides Node.js bindings for ZeroMQ. This provides a Node.js <br>wrapper around the zeromq library (installable via homebrew, apt-get etc). <br>The NPM approach is that at install/build time, the binding.gyp file can <br>be configured to check for the presence of the library, and to add the <br>necessary include and link flags.<br></p><p>I know that supporting that kind of scenario is outside of the scope of <br>this proposal - is it however a direction we&#39;re headed to?<br></p><p>Thanks,<br></p><p>Chris<br></p><p><br></p><p><br>From:   Rick Ballard via swift-build-dev &lt;swift-build-dev at swift.org&gt;<br>To:     swift-evolution-announce at swift.org<br>Cc:     swift-evolution &lt;swift-evolution at swift.org&gt;, <br>swift-build-dev at swift.org<br>Date:   17/02/2016 02:12<br>Subject:        [swift-build-dev] [Review] SE-0038 Package Manager C <br>Language        Target Support<br>Sent by:        swift-build-dev-bounces at swift.org<br></p><p><br></p><p>Hello Swift community,<br></p><p>A review of “Package Manager C Language Target Support” for the Swift <br>Package Manager begins now and runs through Monday, February 22th. The <br>proposal is available here:<br></p><p>                 <br>https://github.com/apple/swift-evolution/blob/master/proposals/0038-swiftpm-c-language-targets.md<br></p><p><br>Reviews are an important part of the Swift evolution process. All reviews <br>should be sent to the swift-evolution mailing list at<br></p><p>                 https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the <br>review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review <br>through constructive criticism and, eventually, determine the direction of <br>Swift. When writing your review, here are some questions you might want to <br>answer in your review:<br></p><p>                 * What is your evaluation of the proposal?<br>                 * Is the problem being addressed significant enough to <br>warrant a change to the Swift Package Manager?<br>                 * Does this proposal fit well with the feel and direction <br>of the Swift Package Manager?<br>                 * If you have you used other package managers with a <br>similar feature, how do you feel that this proposal compares to those?<br>                 * How much effort did you put into your review? A glance, <br>a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>                 <br>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>                 - Rick<br>                   Review Manager<br></p><p>_______________________________________________<br>swift-build-dev mailing list<br>swift-build-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160218/c18e8a40/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
