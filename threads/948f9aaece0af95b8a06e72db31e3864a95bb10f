<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	• What is your evaluation of the proposal?<br>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>	• Does this proposal fit well with the feel and direction of Swift?<br>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at:<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>What is your evaluation of the proposal?<br></p><p><br>A huge +1.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p><br>Most definitely.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br></p><p><br>Most definitely.<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A lot actually. I&#39;ve been arguing for this change for a while now, so I&#39;m super happy to see an official proposal come through.<br></p><p><br>&gt; On Mar 11, 2016, at 10:01 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/be2a0396/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>+1.<br></p><p>I&#39;m delighted.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to<br>Swift?<br></p><p>Absolutely. My experience with inconsistent argument labels, has not been<br>positive. It adds a pinch of uncertainty whenever I&#39;m declaring functions,<br>and wastes time when I&#39;m copying and pasting between init methods and<br>functions.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, very well. Swift is supposed to be powerful, but easy for beginners.<br>The change will be helpful for casual users, and students. Fewer rules to<br>remember :)<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br></p><p>?<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>A lot actually. I&#39;ve been arguing for this change for a while now, so I&#39;m<br>super happy to see an official proposal come through.<br></p><p>Very little effort, though I have followed related threads for weeks, and<br>there&#39;s no doubt in my mind I support the proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/19e8e9a5/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 11, 2016 at 12:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br>+1… I have a dislike of special cases<br></p><p>• Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes, imho<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br>Yes, imho<br></p><p>• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>As much effort as it took to read the discussion thread, plus a few instances of contemplation while sipping coffee.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 11, 2016, at 12:01 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6dee842b5eb2fd94ffa79edac00b440e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Chris Wagner</string> &lt;cwagner118 at gmail.com&gt;<p>March 11, 2016 at 11:00:00am</p></header><div class="content"><p>What is your evaluation of the proposal?<br></p><p><br>A huge +1.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p><br>Absolutely, named parameters are immensely beneficial <br></p><p>Does this proposal fit well with the feel and direction of Swift?<br></p><p><br>100%<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>NA<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A fair deal, read the proposal. I’ve also been annoyed for awhile by the omission of the first param name in my development that I often explicitly add it.<br></p><p><br>&gt; On Mar 11, 2016, at 11:01 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/257928ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>March 11, 2016 at 01:00:00pm</p></header><div class="content"><p>+1<br></p><p>On Fri, Mar 11, 2016 at 1:27 PM, Chris Wagner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; *What is your evaluation of the proposal?*<br>&gt;<br>&gt;<br>&gt; A huge +1.<br>&gt;<br>&gt;<br>&gt; *Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?*<br>&gt;<br>&gt;<br>&gt; Absolutely, named parameters are immensely beneficial<br>&gt;<br>&gt;<br>&gt; *Does this proposal fit well with the feel and direction of Swift?*<br>&gt;<br>&gt;<br>&gt; 100%<br>&gt;<br>&gt;<br>&gt; *If you have used other languages or libraries with a similar feature, how<br>&gt; do you feel that this proposal compares to those?*<br>&gt;<br>&gt; NA<br>&gt;<br>&gt;<br>&gt; *How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?*<br>&gt;<br>&gt; A fair deal, read the proposal. I’ve also been annoyed for awhile by the<br>&gt; omission of the first param name in my development that I often explicitly<br>&gt; add it.<br>&gt;<br>&gt;<br>&gt; On Mar 11, 2016, at 11:01 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Establish consistent label behavior across all parameters<br>&gt; including first labels” begins now and runs through March 15, 2016. The<br>&gt; proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at:<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt; • What is your evaluation of the proposal?<br>&gt; • Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/678aa911/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>March 11, 2016 at 01:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>+1! This makes it so much more consistent and easier to reason with<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. I have also heard some students have trouble understanding the current behavior<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Completely. More so than the current way<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>This makes swift more like swift than ObjC<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Quick reading but enough to understand the problem and proposal<br></p><p>Brandon<br></p><p>&gt; On Mar 11, 2016, at 1:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/73013be0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, I believe so.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so.  When Swift was a language focused on Cocoa and Obj-C replacement, it made sense, but I think Swift is more than that now.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I don’t recall using a language where this was an issue<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the review and discussion on the mailing list, including the countering views.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 11 Mar 2016, at 18:01, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>I’m in favour of it; while I will most likely disable external parameter names for many of my methods that I feel are self explanatory, I think it’s better to consciously make that decision vs it being the default for first parameters.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It’s not a major issue; people are free to set external labels if they wish, but it’s an inconsistency that could do with being removed (IMO).<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes; it encourages consistency, and encourages a little thought before disabling all external parameter names on all parameters, rather than making the first a special case. It’s also easier to type underscore when you’re happy not to have a label, vs duplicating the name or coming up with another one to enable it.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The bulk of my experience is with Java, Javascript and PHP where there are no parameter labels, and I hate that that was the case. Generally in Swift I like to have them except for very simple methods (or obvious first parameters) as well as tuple-like structs.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve been following the discussion around this issue; quickly skimmed the proposal, but it seems pretty simple.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>March 11, 2016 at 10:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p> it makes  more sense and is more consistent and constructers require a first param it is a bit surprising that regular methods are different. Plus you can still omit the label on first param if it makes sense.  However, leaving out the param with this proposal is visually less appealing so people may be more tempted to add parameter labels than have underscores. <br></p><p>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>	• Does this proposal fit well with the feel and direction of Swift?<br>Perhaps. <br></p><p>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Most other languages don’t do this so it is a bit of a surprise that Swift does, but it is perhaps a distinguishing characteristic and the current way makes people think a bit more perhaps about what their direct object is. <br></p><p>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Been following the thread and read proposal.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>March 11, 2016 at 11:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>+1. I am happy to see this proposal.<br></p><p>        • Is the problem being addressed significant enough to warrant a<br>change to Swift?<br></p><p>Yes. In my experience, newcomers to Swift are often confused by parameter<br>labels in general, and first parameters in particular, and they often get<br>them wrong on their first few attempts.<br></p><p>        • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, it fits well with Swift&#39;s API Design guidelines, especially &quot;Clarity<br>is more important than brevity&quot; and &quot;Clarity at the point of use&quot;.<br></p><p>        • If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br></p><p>I have not used any languages that handle parameter labels quite like Swift<br>does.<br></p><p>        • How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>Quick read. I&#39;m ashamed to admit that I missed the other threads discussing<br>this.<br></p><p>On Fri, Mar 11, 2016 at 10:52 PM, Paul Ossenbruggen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;         • What is your evaluation of the proposal?<br>&gt;<br>&gt;  it makes  more sense and is more consistent and constructers require a<br>&gt; first param it is a bit surprising that regular methods are different. Plus<br>&gt; you can still omit the label on first param if it makes sense.  However,<br>&gt; leaving out the param with this proposal is visually less appealing so<br>&gt; people may be more tempted to add parameter labels than have underscores.<br>&gt;<br>&gt;         • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; Yes<br>&gt;<br>&gt;         • Does this proposal fit well with the feel and direction of Swift?<br>&gt; Perhaps.<br>&gt;<br>&gt;         • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Most other languages don’t do this so it is a bit of a surprise that Swift<br>&gt; does, but it is perhaps a distinguishing characteristic and the current way<br>&gt; makes people think a bit more perhaps about what their direct object is.<br>&gt;<br>&gt;         • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; Been following the thread and read proposal.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/c408bb2d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>March 12, 2016 at 05:00:00pm</p></header><div class="content"><p>Proposal link:<br></p><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md&gt;<br></p><p>&gt; • What is your evaluation of the proposal?<br></p><p>+1<br></p><p>I believe it should be accepted for Swift 3.0<br></p><p>&gt; • Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p>&gt; • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt; • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p>&gt; • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed previous threads (API design guidelines, etc.)<br></p><p>-- Ben<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>March 12, 2016 at 10:00:00am</p></header><div class="content"><p>+1 from me. The previous convention was good for Objective-C syntax, but feels unnatural for the more function-like syntax. I think this will make things better for people coming in from other languages.<br></p><p>-Kenny<br></p><p><br>&gt; On Mar 11, 2016, at 10:01 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>March 12, 2016 at 04:00:00pm</p></header><div class="content"><p>Huge +1<br></p><p>-Van<br></p><p>On Sat, Mar 12, 2016 at 3:32 PM, Kenny Leung via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 from me. The previous convention was good for Objective-C syntax, but<br>&gt; feels unnatural for the more function-like syntax. I think this will make<br>&gt; things better for people coming in from other languages.<br>&gt;<br>&gt; -Kenny<br>&gt;<br>&gt;<br>&gt; &gt; On Mar 11, 2016, at 10:01 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of “Establish consistent label behavior across all parameters<br>&gt; including first labels” begins now and runs through March 15, 2016. The<br>&gt; proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at:<br>&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt; &gt;<br>&gt; &gt;       • What is your evaluation of the proposal?<br>&gt; &gt;       • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;       • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;       • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at:<br>&gt; &gt;<br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Chris<br>&gt; &gt; Review Manager<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution-announce mailing list<br>&gt; &gt; swift-evolution-announce at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/91b10626/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d04f3c48ab68a1dd3e712dcab04004ce?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Curt Clifton</string> &lt;curt at omnigroup.com&gt;<p>March 12, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; <br>&gt; The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>   • What is your evaluation of the proposal?<br></p><p>+1. The baroque set of rules for external parameter was one of the most confusing and frustrating parts of Swift 1. Swift 2 substantially improved on this situation. The proposed change will rationalize this part of the language, substantially reducing Swift&#39;s complexity.<br></p><p>   • Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Definitely.<br></p><p>   • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Swift 3 is about increasing power while reducing incidentally complexity. This is a strong contribution to the latter.<br></p><p>   • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I really appreciate that Swift follows Objective-C in using named parameters. This results in much more readable client code. That said, Objective-C&#39;s syntax necessitates combining the action part of a method&#39;s name with the first parameter label. Breaking with that is a sensible thing to do. Programmers will still retain the ability to suppress any external parameter name, including the first, so the expressive power of the language is unchanged.<br></p><p>Turning this question on its head, I&#39;ve never used a language with parameter naming rules as complex as Swift&#39;s. This proposal rectifies that problem.<br></p><p>   • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal in detail twice. I&#39;ve been bothered by the complexity of the external parameter rules since Swift was introduced, so the problem has been on my mind since WWDC 2014.<br></p><p>Cheers, <br></p><p>Curt <br>------------------------- <br>Curt Clifton, PhD Software Developer <br>The Omni Group <br>www.curtclifton.net<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>I like this proposal because it increases consistency. My experience trying to remember when to label or not to label started feeling like reading Macbeth. <br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Other languages that I have experience with do not have complex semantical rules that govern parameter labeling.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p><p>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9df2c06d044639a33128b3b66f0b6509?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Juan Ignacio Laube</string> &lt;juanignaciolaube at gmail.com&gt;<p>March 12, 2016 at 05:00:00pm</p></header><div class="content"><p>*What is your evaluation of the proposal?*<br></p><p>+1. I was waiting for this.<br></p><p><br>*Is the problem being addressed significant enough to warrant a change to<br>Swift?*<br></p><p>Yes.<br></p><p><br>*Does this proposal fit well with the feel and direction of Swift?*<br></p><p>Yes.<br></p><p><br>*If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?*<br></p><p>n/a<br></p><p><br>*How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?*<br></p><p>A lot. I think this was needed in a first place.<br></p><p>On Fri, Mar 11, 2016 at 3:01 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of “Establish consistent label behavior across all parameters<br>&gt; including first labels” begins now and runs through March 15, 2016. The<br>&gt; proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at:<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         • What is your evaluation of the proposal?<br>&gt;         • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         • Does this proposal fit well with the feel and direction of Swift?<br>&gt;         • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/2b4ab873/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4002684831b0a89736f4837d2e60f66a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Pierre Monod-Broca</string> &lt;pierremonodbroca at gmail.com&gt;<p>March 12, 2016 at 10:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br></p><p>In favor<br></p><p>   • Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes : the problem is significant without being overwhelming, and the solution seems rather simple.<br></p><p>   • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, it increases consistency. Both between the first parameters and the others, and between a function declaration and its signature.<br>It was one of the first think to bother me in Swift.<br></p><p>   • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Not really.<br></p><p>   • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal, and rather quickly parts of the discussion.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>March 12, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br>On Sat, Mar 12, 2016 at 4:09 PM Pierre Monod-Broca via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;    • What is your evaluation of the proposal?<br>&gt;<br>&gt; In favor<br>&gt;<br>&gt;    • Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt;<br>&gt; Yes : the problem is significant without being overwhelming, and the<br>&gt; solution seems rather simple.<br>&gt;<br>&gt;    • Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes, it increases consistency. Both between the first parameters and the<br>&gt; others, and between a function declaration and its signature.<br>&gt; It was one of the first think to bother me in Swift.<br>&gt;<br>&gt;    • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Not really.<br>&gt;<br>&gt;    • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; I read the proposal, and rather quickly parts of the discussion.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/097f19aa/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>March 12, 2016 at 06:00:00pm</p></header><div class="content"><p>+1<br></p><p>I am a big fan of this proposal.<br></p><p>In a function or method that has more than one parameter, I strongly favor the consistent use of labels.<br></p><p>For a function or method that has a single parameter, I don’t care whether we standardize on a label being required or not. It wouldn’t bother me that a function with a single parameter wouldn’t require a label for that parameter while an init with a single parameter would. I mention this because one of the reasons given for no label on the first parameter was that half of the functions in an audit had zero or one parameter. It is important to me that a function with multiple parameters requires labels for all of them.<br></p><p>As an aside, once we have this consistency, I would like guidance from Apple and support from Xcode on how to format these method definitions and calls if we place them on multiple lines (each parameter on a separate line). In Obj-C we lined up the colons, in Swift should we line up the colons, the first letter of the parameter label, something else? It’s not that I care what we choose, but it would be nice to have a consistent format that is supported by Xcode. Currently, if we indent in a way other than is supported by Xcode, subsequent lines are indented awkwardly.<br></p><p>Thanks,<br></p><p>Daniel<br></p><p><br></p><p><br></p><p>&gt; On Mar 11, 2016, at 1:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>March 12, 2016 at 10:00:00pm</p></header><div class="content"><p>- What is your evaluation of the proposal?<br>   - Huge +1<br>   - Is the problem being addressed significant enough to warrant a change<br>   to Swift?<br>   - Yes. This creates a simpler, more consistent language.<br>   - Does this proposal fit well with the feel and direction of Swift?<br>   - Yes, especially after the new API guidelines.<br>   - If you have used other languages or libraries with a similar feature,<br>   how do you feel that this proposal compares to those?<br>   - N/A<br>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br>   - I&#39;ve read through the preceding discussion, the proposal, and others&#39;<br>      responses.<br></p><p><br>On Fri, Mar 11, 2016 at 1:01 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br></p><p><br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/856984a0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>March 13, 2016 at 11:00:00am</p></header><div class="content"><p>+1<br></p><p>&gt; On Mar 11, 2016, at 12:01 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>It’s probably needed. The inconsistency in the current rules for argument labels is rather ugly.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think so. This will make the language cleaner, as well as make it easier for newcomers to pick up.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>I’d say so. In fact, it seems to fit Swift’s general aesthetic better than the current behavior.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Most languages I’ve seen have all the arguments either labeled or unlabeled by default. Having the first argument treated differently is somewhat idiosyncratic, and this change would bring Swift more in line with other languages.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p><br>Quick reading.<br></p><p>Charles<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 13, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br></p><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I think it&#39;s a great idea. In previous versions of Swift, the inconsistent treatment of function parameters was justified—barely—by the fact that standard Swift style left most arguments unlabeled. Now that the API guidelines now call for many functions to label their first parameters, this justification has been fatally weakened.<br></p><p>Now that we&#39;re going to have consistent rules everywhere else, I think the design team should also consider applying the same rules to subscripts. Unlike functions, subscripts still *do* usually have unlabeled first parameters, but they are written so rarely that I&#39;m not sure it&#39;s worth being inconsistent with literally every other parameter construct in the language.<br></p><p>(Alternatively, making all subscript parameters unlabeled would be a simpler rule than the current one, and would suit multi-dimensional subscripts pretty nicely.)<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. This has always been an ugly, complicated corner of the language, and previous efforts to simplify it have been rewarded.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. It reflects the new API guidelines while making things simpler and consistent.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Most languages I&#39;ve used have pretty simple (though often somewhat impoverished) parameter naming rules; Swift has always been oddly complicated in this way.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading and a little bit of participation in the discussion thread.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 13, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Mar 13, 2016, at 3:35 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt; <br>&gt; I think it&#39;s a great idea. In previous versions of Swift, the inconsistent treatment of function parameters was justified—barely—by the fact that standard Swift style left most arguments unlabeled. Now that the API guidelines now call for many functions to label their first parameters, this justification has been fatally weakened.<br>&gt; <br>&gt; Now that we&#39;re going to have consistent rules everywhere else, I think the design team should also consider applying the same rules to subscripts. Unlike functions, subscripts still *do* usually have unlabeled first parameters, but they are written so rarely that I&#39;m not sure it&#39;s worth being inconsistent with literally every other parameter construct in the language.<br></p><p>As I mention in the proposal, I consider subscripts distinct, playing a different role in the language. <br>I do not have any problem with the existing implementation or their optional labels.<br></p><p>-- E<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>March 13, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 13 Mar 2016, at 21:35, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Now that we&#39;re going to have consistent rules everywhere else, I think the design team should also consider applying the same rules to subscripts. Unlike functions, subscripts still *do* usually have unlabeled first parameters, but they are written so rarely that I&#39;m not sure it&#39;s worth being inconsistent with literally every other parameter construct in the language.<br>&gt; <br>&gt; (Alternatively, making all subscript parameters unlabeled would be a simpler rule than the current one, and would suit multi-dimensional subscripts pretty nicely.)<br></p><p>All subscript parameters _are_ unlabelled by default.<br></p><p>There are also different rules for:<br></p><p>* operator functions (which cannot have argument labels);<br>* closure parameters (which cannot have parameter names).<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 13, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;&gt; (Alternatively, making all subscript parameters unlabeled would be a simpler rule than the current one, and would suit multi-dimensional subscripts pretty nicely.)<br>&gt; <br>&gt; All subscript parameters _are_ unlabelled by default.<br></p><p>Huh, so they are. My mistake.<br></p><p>Well, consider that an illustration of how infrequently subscripts are used, and how familiar people will be with their special parameter rules. :^)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March 13, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>Strong +1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Fits very well. Anonymous first parameters are a relict of Objective-C and do not conform to new API Naming Guidelines.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read of the proposal document.<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 11.03.2016, o godz. 19:01:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Establish consistent label behavior across all parameters including first labels” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160313/df0b47e0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
