<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/19ca8ea29768acdbb87dc016d7d9a8e4?s=50"></div><header><strong>Fwd: Name disambiguation of computed property/function with same type defined in extensions</strong> from <string>Paulo Faria</string> &lt;paulo at zewo.io&gt;<p>June  7, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Begin forwarded message:<br>&gt; <br>&gt; From: Paulo Faria &lt;paulo at zewo.io&gt;<br>&gt; Subject: Re: [swift-evolution] Name disambiguation of computed property/function with same type defined in extensions<br>&gt; Date: June 7, 2016 at 4:08:16 PM GMT-3<br>&gt; To: Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; <br>&gt; Yeah! I really like that option. no new keyword and it makes a lot of sense cause look at the error message:<br>&gt; <br>&gt; error: ambiguous use of &#39;capitalized()&#39;<br>&gt; let capitalized = &quot;hello swift&quot;.capitalized()<br>&gt;                  ^<br>&gt; ModuleA.String:2:17: note: found this candidate<br>&gt;    public func capitalized() -&gt; String<br>&gt;                ^<br>&gt; ModuleB.String:2:17: note: found this candidate<br>&gt;    public func capitalized() -&gt; String<br>&gt; <br>&gt; <br>&gt; Specifically ModuleA.String:2:17 and ModuleB.String:2:17. So it seems to me that Brent&#39;s proposal makes a lot of sense actually!<br>&gt; <br>&gt;&gt; On Jun 7, 2016, at 8:24 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I want to discuss the problem of name ambiguity when a computed property or function is defined with the same name and type in different modules. Currently there’s no way to disambiguate the implementation in use cases similar to the one contained in the gist below.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://gist.github.com/paulofaria/f48d0b847a0fb7c125d163d0e349500a<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The gist also contains some informal proposals. The idea is to create a formal proposal based on the discussion that shall follow.<br>&gt;&gt; <br>&gt;&gt; We already have the concept of prefixing a type name with a module to disambiguate when two modules have the same type. I wonder if we could do the same thing to disambiguate between conflicting extensions?<br>&gt;&gt; <br>&gt;&gt; 	import ModuleA<br>&gt;&gt; 	import ModuleB<br>&gt;&gt; 	<br>&gt;&gt; 	(&quot;hello world&quot; as ModuleA.String).capitalized()	// Swift.String, with only APIs known to ModuleA<br>&gt;&gt; 	(&quot;hello world&quot; as ModuleB.String).capitalized()	// Swift.String, with only APIs known to ModuleB<br>&gt;&gt; 	&quot;hello world&quot;.capitalized()					// Still causes a compile-time error for ambiguity<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/03ca7923/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/19ca8ea29768acdbb87dc016d7d9a8e4?s=50"></div><header><strong>Name disambiguation of computed property/function with same type defined in extensions</strong> from <string>Paulo Faria</string> &lt;paulo at zewo.io&gt;<p>June  7, 2016 at 05:00:00pm</p></header><div class="content"><p>Actually that could cause more ambiguity if a type String is created inside ModuleA or ModuleB for example. So yeah, I think “from” keyword would be the best option actually. :(<br></p><p><br>&gt; On Jun 7, 2016, at 5:23 PM, Paulo Faria &lt;paulo at zewo.io&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; Begin forwarded message:<br>&gt;&gt; <br>&gt;&gt; From: Paulo Faria &lt;paulo at zewo.io &lt;mailto:paulo at zewo.io&gt;&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Name disambiguation of computed property/function with same type defined in extensions<br>&gt;&gt; Date: June 7, 2016 at 4:08:16 PM GMT-3<br>&gt;&gt; To: Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt;<br>&gt;&gt; <br>&gt;&gt; Yeah! I really like that option. no new keyword and it makes a lot of sense cause look at the error message:<br>&gt;&gt; <br>&gt;&gt; error: ambiguous use of &#39;capitalized()&#39;<br>&gt;&gt; let capitalized = &quot;hello swift&quot;.capitalized()<br>&gt;&gt;                  ^<br>&gt;&gt; ModuleA.String:2:17: note: found this candidate<br>&gt;&gt;    public func capitalized() -&gt; String<br>&gt;&gt;                ^<br>&gt;&gt; ModuleB.String:2:17: note: found this candidate<br>&gt;&gt;    public func capitalized() -&gt; String<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Specifically ModuleA.String:2:17 and ModuleB.String:2:17. So it seems to me that Brent&#39;s proposal makes a lot of sense actually!<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 7, 2016, at 8:24 AM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I want to discuss the problem of name ambiguity when a computed property or function is defined with the same name and type in different modules. Currently there’s no way to disambiguate the implementation in use cases similar to the one contained in the gist below.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://gist.github.com/paulofaria/f48d0b847a0fb7c125d163d0e349500a &lt;https://gist.github.com/paulofaria/f48d0b847a0fb7c125d163d0e349500a&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The gist also contains some informal proposals. The idea is to create a formal proposal based on the discussion that shall follow.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We already have the concept of prefixing a type name with a module to disambiguate when two modules have the same type. I wonder if we could do the same thing to disambiguate between conflicting extensions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	import ModuleA<br>&gt;&gt;&gt; 	import ModuleB<br>&gt;&gt;&gt; 	<br>&gt;&gt;&gt; 	(&quot;hello world&quot; as ModuleA.String).capitalized()	// Swift.String, with only APIs known to ModuleA<br>&gt;&gt;&gt; 	(&quot;hello world&quot; as ModuleB.String).capitalized()	// Swift.String, with only APIs known to ModuleB<br>&gt;&gt;&gt; 	&quot;hello world&quot;.capitalized()					// Still causes a compile-time error for ambiguity<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/afe3d9ca/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
