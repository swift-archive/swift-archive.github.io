<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 05:00:00pm</p></header><div class="content"><p>on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>&gt; minor points and disagreements:<br>&gt;<br>&gt; * Like I mentioned in my SE-0023 review, I would be OK with keeping<br>&gt; the &quot;Type&quot; suffix for protocols but have no strong preference.<br>&gt;<br>&gt; * I&#39;m in favor of keeping `precondition()`. `require()` might be<br>&gt; easier to grasp at first but personally I really came to like<br>&gt; `precondition()`.<br>&gt; It fells both precise and I prefer the passive `precondition()` to the<br>&gt; active `require()` for this case. To me it fits the primary meaning<br>&gt; better; stating an API contract. The fact that the condition is<br>&gt; actively checked is secondary to that.<br>&gt;<br>&gt; * I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>&gt; Bool)` to `removeAll(keepingCapacity: Bool)`.<br></p><p>Why?<br></p><p>I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>eventually I realized that this pattern is less ambiguous, at least in<br>general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>considered high-tech construction elements since the middle ages, but<br>it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>keep.<br></p><p>&gt; * What is the rationale for moving `unsafeUnwrap` into Optional but<br>&gt; not `unsafeAddressOf` into AnyObject? <br></p><p>Language limitation: AnyObject can&#39;t be modified or extended.<br></p><p>&gt; I can certainly see the safety argument against moving it but I don&#39;t<br>&gt; see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br>&gt;<br>&gt; * `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>&gt; sense given the API guidelines and the previous `EnumerateSequence`<br>&gt; and `Repeat` were a bit clunky as well but these somehow feel a bit<br>&gt; worse... That might be wholly subjective though and I don&#39;t really<br>&gt; have a good suggestion. The only thing that came to mind was<br>&gt; `EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>&gt; those either especially not to the point of deviating from the norm...<br></p><p>Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>:-)<br></p><p>&gt; * This is not a disagreement but I&#39;d be interested in hearing the<br>&gt; reasons for replacing Generator(Type) with Iterator(Protocol) if<br>&gt; someone finds the time. I can speculate of course but it&#39;s probably<br>&gt; easier for someone to give me a short summary :-)<br></p><p>I think these messages give all the details:<br></p><p>http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com<br>http://article.gmane.org/gmane.comp.lang.swift.evolution/5344<br></p><p>&gt; * Typo: <br>&gt;&gt; +  public func take() -&gt; Memory // Should be Pointee<br></p><p>Nice, thanks.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  2, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 02:41, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>&gt;&gt; minor points and disagreements:<br>&gt;&gt; <br>&gt;&gt; * Like I mentioned in my SE-0023 review, I would be OK with keeping<br>&gt;&gt; the &quot;Type&quot; suffix for protocols but have no strong preference.<br>&gt;&gt; <br>&gt;&gt; * I&#39;m in favor of keeping `precondition()`. `require()` might be<br>&gt;&gt; easier to grasp at first but personally I really came to like<br>&gt;&gt; `precondition()`.<br>&gt;&gt; It fells both precise and I prefer the passive `precondition()` to the<br>&gt;&gt; active `require()` for this case. To me it fits the primary meaning<br>&gt;&gt; better; stating an API contract. The fact that the condition is<br>&gt;&gt; actively checked is secondary to that.<br>&gt;&gt; <br>&gt;&gt; * I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>&gt;&gt; Bool)` to `removeAll(keepingCapacity: Bool)`.<br>&gt; <br>&gt; Why?<br>&gt; <br>&gt; I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>&gt; eventually I realized that this pattern is less ambiguous, at least in<br>&gt; general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>&gt; considered high-tech construction elements since the middle ages, but<br>&gt; it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>&gt; keep.<br></p><p>Why not, though? adding `-ing`s in this context has all of the problems -ed/-ing has with method names, and none of the necessity of conveying mutability information.<br></p><p>What’s wrong with “keepCapacity” as a parameter name?<br></p><p>&gt; <br>&gt;&gt; * What is the rationale for moving `unsafeUnwrap` into Optional but<br>&gt;&gt; not `unsafeAddressOf` into AnyObject? <br>&gt; <br>&gt; Language limitation: AnyObject can&#39;t be modified or extended.<br>&gt; <br>&gt;&gt; I can certainly see the safety argument against moving it but I don&#39;t<br>&gt;&gt; see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br>&gt;&gt; <br>&gt;&gt; * `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>&gt;&gt; sense given the API guidelines and the previous `EnumerateSequence`<br>&gt;&gt; and `Repeat` were a bit clunky as well but these somehow feel a bit<br>&gt;&gt; worse... That might be wholly subjective though and I don&#39;t really<br>&gt;&gt; have a good suggestion. The only thing that came to mind was<br>&gt;&gt; `EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>&gt;&gt; those either especially not to the point of deviating from the norm...<br>&gt; <br>&gt; Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>&gt; :-)<br>&gt; <br>&gt;&gt; * This is not a disagreement but I&#39;d be interested in hearing the<br>&gt;&gt; reasons for replacing Generator(Type) with Iterator(Protocol) if<br>&gt;&gt; someone finds the time. I can speculate of course but it&#39;s probably<br>&gt;&gt; easier for someone to give me a short summary :-)<br>&gt; <br>&gt; I think these messages give all the details:<br>&gt; <br>&gt; http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com<br>&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/5344<br>&gt; <br>&gt;&gt; * Typo: <br>&gt;&gt;&gt; +  public func take() -&gt; Memory // Should be Pointee<br>&gt; <br>&gt; Nice, thanks.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February  2, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 02:41, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>&gt;&gt; minor points and disagreements:<br>&gt;&gt; <br>&gt;&gt; * Like I mentioned in my SE-0023 review, I would be OK with keeping<br>&gt;&gt; the &quot;Type&quot; suffix for protocols but have no strong preference.<br>&gt;&gt; <br>&gt;&gt; * I&#39;m in favor of keeping `precondition()`. `require()` might be<br>&gt;&gt; easier to grasp at first but personally I really came to like<br>&gt;&gt; `precondition()`.<br>&gt;&gt; It fells both precise and I prefer the passive `precondition()` to the<br>&gt;&gt; active `require()` for this case. To me it fits the primary meaning<br>&gt;&gt; better; stating an API contract. The fact that the condition is<br>&gt;&gt; actively checked is secondary to that.<br>&gt;&gt; <br>&gt;&gt; * I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>&gt;&gt; Bool)` to `removeAll(keepingCapacity: Bool)`.<br>&gt; <br>&gt; Why?<br>&gt; <br>&gt; I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>&gt; eventually I realized that this pattern is less ambiguous, at least in<br>&gt; general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>&gt; considered high-tech construction elements since the middle ages, but<br>&gt; it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>&gt; keep.<br></p><p>:-)<br>You are right, it&#39;s definitely less ambiguous in general. I&#39;m just not sure<br>how often that ambiguity actually arises in practice and if it&#39;s often enough to<br>justify always using the clearer but less beautiful style, even if it often actually<br>might not be necessary...<br>At least in these cases here i find the imperative to be perfectly clear, especially<br>given the surrounding context but you might have a better idea what the average<br>case might look like...<br></p><p>Also there is of course something to be said for consistency and I&#39;m probably<br>going to get used to this with time; I&#39;m just not quite there yet ;-)<br></p><p>It&#39;s also a bit more sentence-like: <br>* &quot;remove all; how?, ... by keeping capacity)&quot;<br>vs<br>* &quot;remove all! keep (the) capacity!&quot;<br>but then again the new guidelines and ongoing discussion on SE-0005<br>generally move away from that anyway so that doesn&#39;t seem to be a big factor.<br></p><p>&lt;/ramble&gt;<br></p><p><br>Speaking of this change, shouldn&#39;t  `split(_, maxSplits:, omitEmptySubsequences:)`<br>become `split(_, maxSplits:, omittingEmptySubsequences:)` as well or am I<br>missing something?<br></p><p><br>&gt;&gt; * What is the rationale for moving `unsafeUnwrap` into Optional but<br>&gt;&gt; not `unsafeAddressOf` into AnyObject? <br>&gt; <br>&gt; Language limitation: AnyObject can&#39;t be modified or extended.<br></p><p>Thanks! (To Brent as well). That makes sense of course.<br></p><p>Still not sure how I feel about making these functions so accessible<br>but I guess that issue should be solved differently if at all.<br></p><p><br>&gt;&gt; I can certainly see the safety argument against moving it but I don&#39;t<br>&gt;&gt; see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br>&gt;&gt; <br>&gt;&gt; * `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>&gt;&gt; sense given the API guidelines and the previous `EnumerateSequence`<br>&gt;&gt; and `Repeat` were a bit clunky as well but these somehow feel a bit<br>&gt;&gt; worse... That might be wholly subjective though and I don&#39;t really<br>&gt;&gt; have a good suggestion. The only thing that came to mind was<br>&gt;&gt; `EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>&gt;&gt; those either especially not to the point of deviating from the norm...<br>&gt; <br>&gt; Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>&gt; :-)<br></p><p>Well, at least I&#39;m not alone then :D<br></p><p>&gt;&gt; * This is not a disagreement but I&#39;d be interested in hearing the<br>&gt;&gt; reasons for replacing Generator(Type) with Iterator(Protocol) if<br>&gt;&gt; someone finds the time. I can speculate of course but it&#39;s probably<br>&gt;&gt; easier for someone to give me a short summary :-)<br>&gt; <br>&gt; I think these messages give all the details:<br>&gt; <br>&gt; http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com &lt;http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com&gt;<br>&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/5344 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/5344&gt;<br></p><p>Sorry, maybe I&#39;m missing something or my question was unclear, but<br>isn&#39;t that more the rationale for dropping the &quot;Type&quot; suffix?<br></p><p>I&#39;m asking more about the switch from `Generator` to `Iterator` and<br>by that argument wouldn&#39;t `GeneratorProtocol` work just as well?<br></p><p>My assumption was that the switch was probably motivated by<br>a) Iterator is the more well known concept<br>b) Generator is more of a term of art and IIUC Swift&#39;s Generators aren&#39;t Generators in the strictest sense<br></p><p>but I could be wrong in a lot of ways, hence why I&#39;m asking :-)<br></p><p><br>&gt;&gt; * Typo: <br>&gt;&gt;&gt; +  public func take() -&gt; Memory // Should be Pointee<br>&gt; <br>&gt; Nice, thanks.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/06434f5e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February  9, 2016 at 07:00:00am</p></header><div class="content"><p>I feel keepingCapacity should be a question, shouldKeepCapacity or whilstKeepingCapacity.<br></p><p>Sent from Outlook Mobile<br></p><p><br></p><p><br>On Tue, Feb 2, 2016 at 10:16 AM -0800, &quot;Janosch Hildebrand via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>On 02 Feb 2016, at 02:41, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>minor points and disagreements:<br></p><p>* Like I mentioned in my SE-0023 review, I would be OK with keeping<br>the &quot;Type&quot; suffix for protocols but have no strong preference.<br></p><p>* I&#39;m in favor of keeping `precondition()`. `require()` might be<br>easier to grasp at first but personally I really came to like<br>`precondition()`.<br>It fells both precise and I prefer the passive `precondition()` to the<br>active `require()` for this case. To me it fits the primary meaning<br>better; stating an API contract. The fact that the condition is<br>actively checked is secondary to that.<br></p><p>* I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>Bool)` to `removeAll(keepingCapacity: Bool)`.<br></p><p>Why?<br></p><p>I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>eventually I realized that this pattern is less ambiguous, at least in<br>general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>considered high-tech construction elements since the middle ages, but<br>it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>keep.<br></p><p>:-)You are right, it&#39;s definitely less ambiguous in general. I&#39;m just not surehow often that ambiguity actually arises in practice and if it&#39;s often enough tojustify always using the clearer but less beautiful style, even if it often actuallymight not be necessary...At least in these cases here i find the imperative to be perfectly clear, especiallygiven the surrounding context but you might have a better idea what the averagecase might look like...<br>Also there is of course something to be said for consistency and I&#39;m probablygoing to get used to this with time; I&#39;m just not quite there yet ;-)<br>It&#39;s also a bit more sentence-like: * &quot;remove all; how?, ... by keeping capacity)&quot;vs* &quot;remove all! keep (the) capacity!&quot;but then again the new guidelines and ongoing discussion on SE-0005generally move away from that anyway so that doesn&#39;t seem to be a big factor.<br>&lt;/ramble&gt;<br></p><p>Speaking of this change, shouldn&#39;t  `split(_, maxSplits:, omitEmptySubsequences:)`become `split(_, maxSplits:, omittingEmptySubsequences:)` as well or am Imissing something?<br></p><p>* What is the rationale for moving `unsafeUnwrap` into Optional but<br>not `unsafeAddressOf` into AnyObject? <br></p><p>Language limitation: AnyObject can&#39;t be modified or extended.<br></p><p>Thanks! (To Brent as well). That makes sense of course.<br>Still not sure how I feel about making these functions so accessiblebut I guess that issue should be solved differently if at all.<br></p><p>I can certainly see the safety argument against moving it but I don&#39;t<br>see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br></p><p>* `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>sense given the API guidelines and the previous `EnumerateSequence`<br>and `Repeat` were a bit clunky as well but these somehow feel a bit<br>worse... That might be wholly subjective though and I don&#39;t really<br>have a good suggestion. The only thing that came to mind was<br>`EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>those either especially not to the point of deviating from the norm...<br></p><p>Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>:-)<br></p><p>Well, at least I&#39;m not alone then :D<br>* This is not a disagreement but I&#39;d be interested in hearing the<br>reasons for replacing Generator(Type) with Iterator(Protocol) if<br>someone finds the time. I can speculate of course but it&#39;s probably<br>easier for someone to give me a short summary :-)<br></p><p>I think these messages give all the details:<br></p><p>http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com<br>http://article.gmane.org/gmane.comp.lang.swift.evolution/5344<br></p><p>Sorry, maybe I&#39;m missing something or my question was unclear, butisn&#39;t that more the rationale for dropping the &quot;Type&quot; suffix?<br>I&#39;m asking more about the switch from `Generator` to `Iterator` andby that argument wouldn&#39;t `GeneratorProtocol` work just as well?<br>My assumption was that the switch was probably motivated bya) Iterator is the more well known conceptb) Generator is more of a term of art and IIUC Swift&#39;s Generators aren&#39;t Generators in the strictest sense<br>but I could be wrong in a lot of ways, hence why I&#39;m asking :-)<br></p><p>* Typo: <br>+  public func take() -&gt; Memory // Should be Pointee<br></p><p>Nice, thanks.<br></p><p>-- <br>-Dave<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>- Janosch<br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/f11994de/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
