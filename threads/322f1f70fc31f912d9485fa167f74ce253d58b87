<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal Draft] Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 28, 2016 at 11:00:00pm</p></header><div class="content"><p>on Tue Jun 28 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jun 28, 2016, at 9:21 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; IntegerLiteralExpressable?<br>&gt;&gt; <br>&gt;&gt; Does Apple employ any philosophers? We might need one...<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;<br>&gt; Aaaaaand...welcome to last night.<br>&gt;<br>&gt; The problem being, that people see this and think that the type can be<br>&gt; expressed as an integer literal, <br></p><p>**Which is almost exactly the right interpretation, as I keep pointing<br>out.**  How can this be considered a valid argument against that name?<br></p><p>&gt; not that an integer literal can be expressing the type.<br>&gt; (I won&#39;t even bring up other associations for that word since most of<br>&gt; the subscribers of this mailing list have not been nursing mothers<br>&gt; although some may be familiar with the technique.)<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 28, 2016, at 10:02 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 28, 2016, at 8:08 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What about..<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Syntax.ConvertibleFromIntegerLiteral<br>&gt;&gt;&gt;&gt; etc..<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I like it but Dave has already expressed that this isn&#39;t conversion. This<br>&gt;&gt;&gt; is something distinct, magical, and more importantly, ineffable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; He says it means an instance of the type can be written as a literal, and<br>&gt;&gt;&gt; not converted from a literal. He writes:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Conformance to this protocol does *not* mean you can initialize the type with<br>&gt;&gt;&gt;&gt; a literal. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proof:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func f&lt;T: IntegerLiteralConvertible&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt;  return T(integerLiteral: 43) // Error<br>&gt;&gt;&gt;&gt;  return T(43)                 // Also an Error<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It means an instance of the type can be *written* as a literal:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func f&lt;T: IntegerLiteralConvertible&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt;  return 43   // OK<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So we&#39;re looking at something more like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Syntax.AnIntegerLiteralCanBeSubstitutedForThisTypeAndTheCompilerWillNotBarf<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Proposal Draft] Literal Syntax Protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 29, 2016 at 08:00:00am</p></header><div class="content"><p>And just as a side note: the example does work like this:<br></p><p>func f&lt;T : IntegerLiteralConvertible&gt;() -&gt; T {<br>    return T(integerLiteral: 43 as! T.IntegerLiteralType) // Error<br>}<br></p><p>func g&lt;T : IntegerLiteralConvertible where T.IntegerLiteralType == Int&gt;() -&gt; T {<br>     <br>    return T(integerLiteral: 43)<br>}<br></p><p>let test: Int = f()<br>let test2: Int = g()<br>I assume everyone does know that. The example by itself shows us that literals are in fact typeless until they’re converted into a real type.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 29. Juni 2016 um 08:48:30, Dave Abrahams via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p><br>on Tue Jun 28 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jun 28, 2016, at 9:21 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt; IntegerLiteralExpressable?<br>&gt;&gt;  <br>&gt;&gt; Does Apple employ any philosophers? We might need one...<br>&gt;&gt;  <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;  <br>&gt;<br>&gt; Aaaaaand...welcome to last night.<br>&gt;<br>&gt; The problem being, that people see this and think that the type can be<br>&gt; expressed as an integer literal,  <br></p><p>**Which is almost exactly the right interpretation, as I keep pointing<br>out.** How can this be considered a valid argument against that name?<br></p><p>&gt; not that an integer literal can be expressing the type.<br>&gt; (I won&#39;t even bring up other associations for that word since most of<br>&gt; the subscribers of this mailing list have not been nursing mothers<br>&gt; although some may be familiar with the technique.)<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;&gt;  <br>&gt;&gt;&gt; On Jun 28, 2016, at 10:02 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Jun 28, 2016, at 8:08 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; What about..<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Syntax.ConvertibleFromIntegerLiteral<br>&gt;&gt;&gt;&gt; etc..<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I like it but Dave has already expressed that this isn&#39;t conversion. This<br>&gt;&gt;&gt; is something distinct, magical, and more importantly, ineffable.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; He says it means an instance of the type can be written as a literal, and<br>&gt;&gt;&gt; not converted from a literal. He writes:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Conformance to this protocol does *not* mean you can initialize the type with<br>&gt;&gt;&gt;&gt; a literal.  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Proof:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; func f&lt;T: IntegerLiteralConvertible&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt; return T(integerLiteral: 43) // Error<br>&gt;&gt;&gt;&gt; return T(43) // Also an Error<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; It means an instance of the type can be *written* as a literal:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; func f&lt;T: IntegerLiteralConvertible&gt;() -&gt; T {<br>&gt;&gt;&gt;&gt; return 43 // OK<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; So we&#39;re looking at something more like:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Syntax.AnIntegerLiteralCanBeSubstitutedForThisTypeAndTheCompilerWillNotBarf<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>--  <br>Dave<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/76757fbc/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
