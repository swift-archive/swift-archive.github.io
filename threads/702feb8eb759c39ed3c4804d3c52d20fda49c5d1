<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9196b648a4f24597e0423bda1db0e50b?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>John Spurlock</string> &lt;john.spurlock at gmail.com&gt;<p>July 18, 2016 at 03:00:00am</p></header><div class="content"><p>Minimal repro case below.  I&#39;m creating a custom NSCoder, but the<br>&quot;encodeInt:forKey&quot; call is not dispatched properly to my overridden method<br>when encoding an NSCalendar instance.<br></p><p>What am I missing here?  Without source code for any of this, I&#39;m at a dead<br>end.<br></p><p>Thanks,<br>- john<br></p><p>================================================<br></p><p>    private class FooCoder : NSCoder {<br>        override var allowsKeyedCoding : Bool { return true }<br></p><p>        override func encode(_ objv: AnyObject?, forKey key: String) {<br>            print(&quot;\(key) \(objv)&quot;) // called<br>        }<br></p><p>        override func encode(_ intv: Int, forKey key: String) {<br>            print(&quot;\(key) \(intv)&quot;) // never called<br>        }<br>    }<br></p><p>    func testCoder() {<br>        Calendar.current.encode(with: FooCoder())  // crashes at runtime,<br>result below<br>    }<br></p><p>Results in:<br></p><p>&quot;NSInvalidArgumentException&quot;, &quot;*** -encodeInt:forKey: only defined for<br>abstract class.  Define -[_TtCC22Tests22TestsP33_1961FooCoder<br>encodeInt:forKey:]!&quot;<br>(<br>0   CoreFoundation                      0x00007fff84da34f2<br>__exceptionPreprocess + 178<br>1   libobjc.A.dylib                     0x00007fff883caf7e<br>objc_exception_throw + 48<br>2   CoreFoundation                      0x00007fff84e0a4bd +[NSException<br>raise:format:] + 205<br>3   Foundation                          0x00007fff903ccdbd<br>NSRequestConcreteImplementation + 229<br>4   Foundation                          0x00007fff9035323b<br>-[NSCalendar(NSCalendar) encodeWithCoder:] + 251<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160718/702fc5d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi John,<br></p><p>Can you try this?<br></p><p>@objc(encodeInt:forKey:)<br>override func encode(_ intv: Int, forKey key: String) {<br>            print(&quot;\(key) \(intv)&quot;) // never called<br>}<br></p><p>- Tony<br></p><p>&gt; On Jul 18, 2016, at 12:11 AM, John Spurlock via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Minimal repro case below.  I&#39;m creating a custom NSCoder, but the &quot;encodeInt:forKey&quot; call is not dispatched properly to my overridden method when encoding an NSCalendar instance.<br>&gt; <br>&gt; What am I missing here?  Without source code for any of this, I&#39;m at a dead end.<br>&gt; <br>&gt; Thanks,<br>&gt; - john<br>&gt; <br>&gt; ================================================<br>&gt; <br>&gt;     private class FooCoder : NSCoder {<br>&gt;         override var allowsKeyedCoding : Bool { return true }<br>&gt;         <br>&gt;         override func encode(_ objv: AnyObject?, forKey key: String) {<br>&gt;             print(&quot;\(key) \(objv)&quot;) // called<br>&gt;         }<br>&gt;         <br>&gt;         override func encode(_ intv: Int, forKey key: String) {<br>&gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt;         }<br>&gt;     }<br>&gt;     <br>&gt;     func testCoder() {<br>&gt;         Calendar.current.encode(with: FooCoder())  // crashes at runtime, result below<br>&gt;     }<br>&gt; <br>&gt; Results in:<br>&gt; <br>&gt; &quot;NSInvalidArgumentException&quot;, &quot;*** -encodeInt:forKey: only defined for abstract class.  Define -[_TtCC22Tests22TestsP33_1961FooCoder encodeInt:forKey:]!&quot;<br>&gt; (<br>&gt; 	0   CoreFoundation                      0x00007fff84da34f2 __exceptionPreprocess + 178<br>&gt; 	1   libobjc.A.dylib                     0x00007fff883caf7e objc_exception_throw + 48<br>&gt; 	2   CoreFoundation                      0x00007fff84e0a4bd +[NSException raise:format:] + 205<br>&gt; 	3   Foundation                          0x00007fff903ccdbd NSRequestConcreteImplementation + 229<br>&gt; 	4   Foundation                          0x00007fff9035323b -[NSCalendar(NSCalendar) encodeWithCoder:] + 251<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Shouldn&#39;t that be implicit, since the function is `override`?<br></p><p>On Mon, Jul 18, 2016 at 5:25 PM, Tony Parker via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi John,<br>&gt;<br>&gt; Can you try this?<br>&gt;<br>&gt; @objc(encodeInt:forKey:)<br>&gt; override func encode(_ intv: Int, forKey key: String) {<br>&gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt; }<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; &gt; On Jul 18, 2016, at 12:11 AM, John Spurlock via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Minimal repro case below.  I&#39;m creating a custom NSCoder, but the<br>&gt; &quot;encodeInt:forKey&quot; call is not dispatched properly to my overridden method<br>&gt; when encoding an NSCalendar instance.<br>&gt; &gt;<br>&gt; &gt; What am I missing here?  Without source code for any of this, I&#39;m at a<br>&gt; dead end.<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt; - john<br>&gt; &gt;<br>&gt; &gt; ================================================<br>&gt; &gt;<br>&gt; &gt;     private class FooCoder : NSCoder {<br>&gt; &gt;         override var allowsKeyedCoding : Bool { return true }<br>&gt; &gt;<br>&gt; &gt;         override func encode(_ objv: AnyObject?, forKey key: String) {<br>&gt; &gt;             print(&quot;\(key) \(objv)&quot;) // called<br>&gt; &gt;         }<br>&gt; &gt;<br>&gt; &gt;         override func encode(_ intv: Int, forKey key: String) {<br>&gt; &gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt; &gt;         }<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt;     func testCoder() {<br>&gt; &gt;         Calendar.current.encode(with: FooCoder())  // crashes at<br>&gt; runtime, result below<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; Results in:<br>&gt; &gt;<br>&gt; &gt; &quot;NSInvalidArgumentException&quot;, &quot;*** -encodeInt:forKey: only defined for<br>&gt; abstract class.  Define -[_TtCC22Tests22TestsP33_1961FooCoder<br>&gt; encodeInt:forKey:]!&quot;<br>&gt; &gt; (<br>&gt; &gt;       0   CoreFoundation                      0x00007fff84da34f2<br>&gt; __exceptionPreprocess + 178<br>&gt; &gt;       1   libobjc.A.dylib                     0x00007fff883caf7e<br>&gt; objc_exception_throw + 48<br>&gt; &gt;       2   CoreFoundation                      0x00007fff84e0a4bd<br>&gt; +[NSException raise:format:] + 205<br>&gt; &gt;       3   Foundation                          0x00007fff903ccdbd<br>&gt; NSRequestConcreteImplementation + 229<br>&gt; &gt;       4   Foundation                          0x00007fff9035323b<br>&gt; -[NSCalendar(NSCalendar) encodeWithCoder:] + 251<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160718/678cb755/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Probably, but there could be a compiler bug or importer bug lurking here.<br></p><p>- Tony<br></p><p>&gt; On Jul 18, 2016, at 5:29 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Shouldn&#39;t that be implicit, since the function is `override`?<br>&gt; <br>&gt; On Mon, Jul 18, 2016 at 5:25 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hi John,<br>&gt; <br>&gt; Can you try this?<br>&gt; <br>&gt; @objc(encodeInt:forKey:)<br>&gt; override func encode(_ intv: Int, forKey key: String) {<br>&gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt; }<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; &gt; On Jul 18, 2016, at 12:11 AM, John Spurlock via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Minimal repro case below.  I&#39;m creating a custom NSCoder, but the &quot;encodeInt:forKey&quot; call is not dispatched properly to my overridden method when encoding an NSCalendar instance.<br>&gt; &gt;<br>&gt; &gt; What am I missing here?  Without source code for any of this, I&#39;m at a dead end.<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt; - john<br>&gt; &gt;<br>&gt; &gt; ================================================<br>&gt; &gt;<br>&gt; &gt;     private class FooCoder : NSCoder {<br>&gt; &gt;         override var allowsKeyedCoding : Bool { return true }<br>&gt; &gt;<br>&gt; &gt;         override func encode(_ objv: AnyObject?, forKey key: String) {<br>&gt; &gt;             print(&quot;\(key) \(objv)&quot;) // called<br>&gt; &gt;         }<br>&gt; &gt;<br>&gt; &gt;         override func encode(_ intv: Int, forKey key: String) {<br>&gt; &gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt; &gt;         }<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt;     func testCoder() {<br>&gt; &gt;         Calendar.current.encode(with: FooCoder())  // crashes at runtime, result below<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; Results in:<br>&gt; &gt;<br>&gt; &gt; &quot;NSInvalidArgumentException&quot;, &quot;*** -encodeInt:forKey: only defined for abstract class.  Define -[_TtCC22Tests22TestsP33_1961FooCoder encodeInt:forKey:]!&quot;<br>&gt; &gt; (<br>&gt; &gt;       0   CoreFoundation                      0x00007fff84da34f2 __exceptionPreprocess + 178<br>&gt; &gt;       1   libobjc.A.dylib                     0x00007fff883caf7e objc_exception_throw + 48<br>&gt; &gt;       2   CoreFoundation                      0x00007fff84e0a4bd +[NSException raise:format:] + 205<br>&gt; &gt;       3   Foundation                          0x00007fff903ccdbd NSRequestConcreteImplementation + 229<br>&gt; &gt;       4   Foundation                          0x00007fff9035323b -[NSCalendar(NSCalendar) encodeWithCoder:] + 251<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160718/743eeb5c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9196b648a4f24597e0423bda1db0e50b?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>John Spurlock</string> &lt;john.spurlock at gmail.com&gt;<p>July 18, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi Tony - when I add that attribute, I get an error at compile-time:<br>Objective-C method has a different selector from the method it overrides<br>(&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br></p><p>If I update to encodeInteger:forKey as the fix describes, it compiles, but<br>I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey:<br>only defined for abstract class&quot;<br></p><p>Any other ideas?  See the same thing over there?  You should be able to<br>paste that into a new swift 3 test.<br></p><p>On Mon, Jul 18, 2016 at 8:25 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>wrote:<br></p><p>&gt; Hi John,<br>&gt;<br>&gt; Can you try this?<br>&gt;<br>&gt; @objc(encodeInt:forKey:)<br>&gt; override func encode(_ intv: Int, forKey key: String) {<br>&gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt; }<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; &gt; On Jul 18, 2016, at 12:11 AM, John Spurlock via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Minimal repro case below.  I&#39;m creating a custom NSCoder, but the<br>&gt; &quot;encodeInt:forKey&quot; call is not dispatched properly to my overridden method<br>&gt; when encoding an NSCalendar instance.<br>&gt; &gt;<br>&gt; &gt; What am I missing here?  Without source code for any of this, I&#39;m at a<br>&gt; dead end.<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt; - john<br>&gt; &gt;<br>&gt; &gt; ================================================<br>&gt; &gt;<br>&gt; &gt;     private class FooCoder : NSCoder {<br>&gt; &gt;         override var allowsKeyedCoding : Bool { return true }<br>&gt; &gt;<br>&gt; &gt;         override func encode(_ objv: AnyObject?, forKey key: String) {<br>&gt; &gt;             print(&quot;\(key) \(objv)&quot;) // called<br>&gt; &gt;         }<br>&gt; &gt;<br>&gt; &gt;         override func encode(_ intv: Int, forKey key: String) {<br>&gt; &gt;             print(&quot;\(key) \(intv)&quot;) // never called<br>&gt; &gt;         }<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt;     func testCoder() {<br>&gt; &gt;         Calendar.current.encode(with: FooCoder())  // crashes at<br>&gt; runtime, result below<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; Results in:<br>&gt; &gt;<br>&gt; &gt; &quot;NSInvalidArgumentException&quot;, &quot;*** -encodeInt:forKey: only defined for<br>&gt; abstract class.  Define -[_TtCC22Tests22TestsP33_1961FooCoder<br>&gt; encodeInt:forKey:]!&quot;<br>&gt; &gt; (<br>&gt; &gt;       0   CoreFoundation                      0x00007fff84da34f2<br>&gt; __exceptionPreprocess + 178<br>&gt; &gt;       1   libobjc.A.dylib                     0x00007fff883caf7e<br>&gt; objc_exception_throw + 48<br>&gt; &gt;       2   CoreFoundation                      0x00007fff84e0a4bd<br>&gt; +[NSException raise:format:] + 205<br>&gt; &gt;       3   Foundation                          0x00007fff903ccdbd<br>&gt; NSRequestConcreteImplementation + 229<br>&gt; &gt;       4   Foundation                          0x00007fff9035323b<br>&gt; -[NSCalendar(NSCalendar) encodeWithCoder:] + 251<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160718/992c666d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 18, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt; <br>&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt; <br>&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br></p><p>If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br></p><p>I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 18, 2016 at 07:00:00pm</p></header><div class="content"><p>We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br></p><p>encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com and let me know the radar number, and we’ll look into it.<br></p><p>Thanks,<br>- Tony<br></p><p>&gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt; <br>&gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt; <br>&gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt; <br>&gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt; <br>&gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9196b648a4f24597e0423bda1db0e50b?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>John Spurlock</string> &lt;john.spurlock at gmail.com&gt;<p>July 19, 2016 at 11:00:00am</p></header><div class="content"><p>Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997<br></p><p>Ensured it reproduces in xcode beta 3, swift version 3.0<br>(swiftlang-800.0.34.6 clang-800.0.33)<br></p><p>Is there anything I can do in the meantime as a swift-only workaround to<br>fix my custom NSCoder?<br></p><p>Thanks,<br>- john<br></p><p>On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>wrote:<br></p><p>&gt; We renamed some of these methods for Swift 3 in an attempt to remove some<br>&gt; of the confusion surrounding which of these did what - they were really<br>&gt; named for C types and not Swift ones.<br>&gt;<br>&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since<br>&gt; they were easily confused with the Swift Int type. I think we’ll have to<br>&gt; figure out a different approach here. John, please file a bug at<br>&gt; bugreport.apple.com and let me know the radar number, and we’ll look into<br>&gt; it.<br>&gt;<br>&gt; Thanks,<br>&gt; - Tony<br>&gt;<br>&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt; &gt;&gt; Objective-C method has a different selector from the method it<br>&gt; overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles,<br>&gt; but I&#39;m getting the same original problem at runtime.  i.e.<br>&gt; &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to<br>&gt; paste that into a new swift 3 test.<br>&gt; &gt;<br>&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the<br>&gt; Swift version of the &quot;Encoding General Data&quot; section, and 27<br>&gt; (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no<br>&gt; Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt; &gt;<br>&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend<br>&gt; you file a radar against Foundation. If this is a primitive method for<br>&gt; NSCoding, it needs to be accessible from Swift.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160719/e49f0953/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 19, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br></p><p>Horrible possibility: `class_addMethod()` *is* available from Swift. You might be able to do some old-fashioned runtime hackery like:<br></p><p>	class MyCoder: NSCoder {<br>		@objc func __encodeInt(_ intv: Int, forKey: String) { ... }<br>		<br>		override class func initialize() {<br>			super.initialize()<br>			<br>			// XXX I think this needs to be guarded against being run more than once.<br>			let donor = class_getInstanceMethod(self, #selector(__encodeInt(_:forKey:)))<br>			class_addMethod(self, Selector(&quot;encodeInt:forKey:&quot;), method_getImplementation(donor), method_getTypeEncoding(donor))<br>		}<br>		<br>		...<br>	}<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 19, 2016 at 08:00:00am</p></header><div class="content"><p>Please don’t resort to that; I’d rather fix the bug. =)<br></p><p>- Tony<br></p><p>&gt; On Jul 19, 2016, at 8:53 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt; <br>&gt; Horrible possibility: `class_addMethod()` *is* available from Swift. You might be able to do some old-fashioned runtime hackery like:<br>&gt; <br>&gt; 	class MyCoder: NSCoder {<br>&gt; 		@objc func __encodeInt(_ intv: Int, forKey: String) { ... }<br>&gt; 		<br>&gt; 		override class func initialize() {<br>&gt; 			super.initialize()<br>&gt; 			<br>&gt; 			// XXX I think this needs to be guarded against being run more than once.<br>&gt; 			let donor = class_getInstanceMethod(self, #selector(__encodeInt(_:forKey:)))<br>&gt; 			class_addMethod(self, Selector(&quot;encodeInt:forKey:&quot;), method_getImplementation(donor), method_getTypeEncoding(donor))<br>&gt; 		}<br>&gt; 		<br>&gt; 		...<br>&gt; 	}<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi John,<br></p><p>Thanks for filing the bug.<br></p><p>The root cause of the issue is that the importer would turn the following methods into the same name:<br></p><p>- (void)encodeInt:(int)x forKey:(NSString *)k;<br>- (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br></p><p>Plus, there is the added confusion that this method:<br></p><p>- (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br></p><p>is imported into Swift like this:<br></p><p>func encode(_ x: Int, forKey k : String)<br></p><p>where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br></p><p>I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br></p><p>func encodeInt(_ x : Int32, forKey k : String)<br>func encodeInt32(_ x : Int32, forKey k : String)<br>func encodeInt64(_ x : Int64, forKey k : String)<br>func encodeInteger(_ x : Int, forKey k : String)<br></p><p>and so on, for all of the encode methods, so they are consistent.<br></p><p>- Tony<br></p><p>&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt; <br>&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997<br>&gt; <br>&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt; <br>&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt; <br>&gt; Thanks,<br>&gt; - john<br>&gt; <br>&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt; <br>&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt; <br>&gt; Thanks,<br>&gt; - Tony<br>&gt; <br>&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt; &gt;<br>&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt; &gt;<br>&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160719/6bb92c8c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 19, 2016 at 06:00:00pm</p></header><div class="content"><p>You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br></p><p>-- <br>Brent Royal-Gordon<br>Sent from my iPhone<br></p><p>&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi John,<br>&gt; <br>&gt; Thanks for filing the bug.<br>&gt; <br>&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt; <br>&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt; <br>&gt; Plus, there is the added confusion that this method:<br>&gt; <br>&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt; <br>&gt; is imported into Swift like this:<br>&gt; <br>&gt; func encode(_ x: Int, forKey k : String)<br>&gt; <br>&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt; <br>&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt; <br>&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt; <br>&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997<br>&gt;&gt; <br>&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt; <br>&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - john<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160719/9b58b2b6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 19, 2016 at 06:00:00pm</p></header><div class="content"><p>I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br></p><p>- Tony<br></p><p>&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi John,<br>&gt;&gt; <br>&gt;&gt; Thanks for filing the bug.<br>&gt;&gt; <br>&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt; <br>&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt; <br>&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt; <br>&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt; <br>&gt;&gt; is imported into Swift like this:<br>&gt;&gt; <br>&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt; <br>&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt; <br>&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt; <br>&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt; <br>&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - john<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160719/e1c7d436/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9196b648a4f24597e0423bda1db0e50b?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>John Spurlock</string> &lt;john.spurlock at gmail.com&gt;<p>July 20, 2016 at 08:00:00am</p></header><div class="content"><p>1. Since encoding/decoding various types is the principal domain of this<br>type, it seems ok to be overly clear in the method names here.<br></p><p>2. Is there a way to systematically look for other types that may also have<br>this problem lurking with ints or other similar overload groups?<br></p><p>On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>wrote:<br></p><p>&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the<br>&gt; inconsistency this creates with all of the other decode methods on NSCoder.<br>&gt; I&#39;m discussing with a few people to decide what to do next.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; You could just do the one and call it encodeCInt. I think people would<br>&gt; understand that it&#39;s different because it&#39;s using a sort-of-foreign type.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;<br>&gt; Hi John,<br>&gt;<br>&gt; Thanks for filing the bug.<br>&gt;<br>&gt; The root cause of the issue is that the importer would turn the following<br>&gt; methods into the same name:<br>&gt;<br>&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;<br>&gt; Plus, there is the added confusion that this method:<br>&gt;<br>&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;<br>&gt; is imported into Swift like this:<br>&gt;<br>&gt; func encode(_ x: Int, forKey k : String)<br>&gt;<br>&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;<br>&gt; I’m not really sure how to resolve this and still allow for subclassing<br>&gt; without simply reverting these names back to Swift 2.2 style, so I think<br>&gt; that’s probably what I’ll have to do:<br>&gt;<br>&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;<br>&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Ok, filed a new bug for the encodeInt:forKey issue:<br>&gt; rdar://problem/27425997<br>&gt;<br>&gt; Ensured it reproduces in xcode beta 3, swift version 3.0<br>&gt; (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;<br>&gt; Is there anything I can do in the meantime as a swift-only workaround to<br>&gt; fix my custom NSCoder?<br>&gt;<br>&gt; Thanks,<br>&gt; - john<br>&gt;<br>&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some<br>&gt;&gt; of the confusion surrounding which of these did what - they were really<br>&gt;&gt; named for C types and not Swift ones.<br>&gt;&gt;<br>&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since<br>&gt;&gt; they were easily confused with the Swift Int type. I think we’ll have to<br>&gt;&gt; figure out a different approach here. John, please file a bug at<br>&gt;&gt; bugreport.apple.com and let me know the radar number, and we’ll look<br>&gt;&gt; into it.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - Tony<br>&gt;&gt;<br>&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it<br>&gt;&gt; overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles,<br>&gt;&gt; but I&#39;m getting the same original problem at runtime.  i.e.<br>&gt;&gt; &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able<br>&gt;&gt; to paste that into a new swift 3 test.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the<br>&gt;&gt; Swift version of the &quot;Encoding General Data&quot; section, and 27<br>&gt;&gt; (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no<br>&gt;&gt; Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend<br>&gt;&gt; you file a radar against Foundation. If this is a primitive method for<br>&gt;&gt; NSCoding, it needs to be accessible from Swift.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt; &gt; Architechies<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160720/24106acc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 20, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt; <br>&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt; <br></p><p>Agreed; I’m trying out a few approaches to see what works best.<br></p><p>&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt; <br></p><p>I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br></p><p>- Tony<br></p><p>&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160720/5139a532/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 21, 2016 at 01:00:00pm</p></header><div class="content"><p>FYI:<br></p><p>https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br></p><p>- Tony<br></p><p>&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt; <br>&gt; <br>&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt; <br>&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt; <br>&gt; <br>&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/d5989efa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 21, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m a bit late here, but I don’t see why this is necessary. John overrode &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey: String)’. Sure, overloading makes this kind of mistake harder to spot, especially when the run-time error comes from Objective-C, but it’s hardly unusual for a Swifty program.<br></p><p>Jordan<br></p><p><br>&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; FYI:<br>&gt; <br>&gt; https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;&gt; <br>&gt;&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/2e5706cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 21, 2016 at 02:00:00pm</p></header><div class="content"><p>It’s because two separate methods in ObjC are apparently mapped to the exact same Swift signature on import.<br></p><p>- Tony<br></p><p>&gt; On Jul 21, 2016, at 2:46 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I’m a bit late here, but I don’t see why this is necessary. John overrode &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey: String)’. Sure, overloading makes this kind of mistake harder to spot, especially when the run-time error comes from Objective-C, but it’s hardly unusual for a Swifty program.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; FYI:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/dbeae8c9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 21, 2016 at 02:00:00pm</p></header><div class="content"><p>But they aren’t. One takes an Int and the other takes an Int32. John just overrode the wrong one.<br></p><p>Jordan<br></p><p>&gt; On Jul 21, 2016, at 14:52, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; It’s because two separate methods in ObjC are apparently mapped to the exact same Swift signature on import.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jul 21, 2016, at 2:46 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m a bit late here, but I don’t see why this is necessary. John overrode &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey: String)’. Sure, overloading makes this kind of mistake harder to spot, especially when the run-time error comes from Objective-C, but it’s hardly unusual for a Swifty program.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FYI:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/8bdcca63/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 21, 2016 at 02:00:00pm</p></header><div class="content"><p>Ok, what do these two functions look like once imported into Swift?<br></p><p>- (void)encodeInt:(int)intv forKey:(NSString *)key;<br>- (void)encodeInt32:(int32_t)intv forKey:(NSString *)key;<br></p><p>- Tony<br></p><p>&gt; On Jul 21, 2016, at 2:53 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; But they aren’t. One takes an Int and the other takes an Int32. John just overrode the wrong one.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Jul 21, 2016, at 14:52, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It’s because two separate methods in ObjC are apparently mapped to the exact same Swift signature on import.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 21, 2016, at 2:46 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m a bit late here, but I don’t see why this is necessary. John overrode &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey: String)’. Sure, overloading makes this kind of mistake harder to spot, especially when the run-time error comes from Objective-C, but it’s hardly unusual for a Swifty program.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FYI:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/7a1d6ab8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 21, 2016 at 03:00:00pm</p></header><div class="content"><p>@objc func encode(_ intv: Swift.Int, forKey key: Swift.String)<br>  @objc func encode(_ intv: Swift.Int32, forKey key: Swift.String)<br></p><p>(as copied out of the REPL, hence the extra verbosity)<br></p><p>Jordan<br></p><p><br>&gt; On Jul 21, 2016, at 14:57, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Ok, what do these two functions look like once imported into Swift?<br>&gt; <br>&gt; - (void)encodeInt:(int)intv forKey:(NSString *)key;<br>&gt; - (void)encodeInt32:(int32_t)intv forKey:(NSString *)key;<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jul 21, 2016, at 2:53 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; But they aren’t. One takes an Int and the other takes an Int32. John just overrode the wrong one.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 21, 2016, at 14:52, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s because two separate methods in ObjC are apparently mapped to the exact same Swift signature on import.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 2:46 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m a bit late here, but I don’t see why this is necessary. John overrode &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey: String)’. Sure, overloading makes this kind of mistake harder to spot, especially when the run-time error comes from Objective-C, but it’s hardly unusual for a Swifty program.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FYI:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/590cfabc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9196b648a4f24597e0423bda1db0e50b?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>John Spurlock</string> &lt;john.spurlock at gmail.com&gt;<p>July 21, 2016 at 06:00:00pm</p></header><div class="content"><p>Nope, that doesn&#39;t work, try it yourself.<br></p><p>I tried that, any many more variations, before posting the minimal repro<br>example here.<br></p><p>On Thu, Jul 21, 2016 at 5:46 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; I’m a bit late here, but I don’t see why this is necessary. John overrode<br>&gt; &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey:<br>&gt; String)’. Sure, overloading makes this kind of mistake harder to spot,<br>&gt; especially when the run-time error comes from Objective-C, but it’s hardly<br>&gt; unusual for a Swifty program.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; FYI:<br>&gt;<br>&gt; https://github.com/apple/swift/pull/3663<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; 1. Since encoding/decoding various types is the principal domain of this<br>&gt; type, it seems ok to be overly clear in the method names here.<br>&gt;<br>&gt;<br>&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;<br>&gt; 2. Is there a way to systematically look for other types that may also<br>&gt; have this problem lurking with ints or other similar overload groups?<br>&gt;<br>&gt;<br>&gt; I don’t think so. I also know that the importer will happily create<br>&gt; ambiguous method names, for example when importing two ObjC methods that<br>&gt; are the same except that one has an options argument. The options gets a<br>&gt; default value and presto - two methods with the same signature. We only<br>&gt; find out when someone tries to use it in other source code.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the<br>&gt;&gt; inconsistency this creates with all of the other decode methods on NSCoder.<br>&gt;&gt; I&#39;m discussing with a few people to decide what to do next.<br>&gt;&gt;<br>&gt;&gt; - Tony<br>&gt;&gt;<br>&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; You could just do the one and call it encodeCInt. I think people would<br>&gt;&gt; understand that it&#39;s different because it&#39;s using a sort-of-foreign type.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi John,<br>&gt;&gt;<br>&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;<br>&gt;&gt; The root cause of the issue is that the importer would turn the following<br>&gt;&gt; methods into the same name:<br>&gt;&gt;<br>&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;<br>&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;<br>&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;<br>&gt;&gt; is imported into Swift like this:<br>&gt;&gt;<br>&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;<br>&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;<br>&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing<br>&gt;&gt; without simply reverting these names back to Swift 2.2 style, so I think<br>&gt;&gt; that’s probably what I’ll have to do:<br>&gt;&gt;<br>&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;<br>&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;<br>&gt;&gt; - Tony<br>&gt;&gt;<br>&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:<br>&gt;&gt; rdar://problem/27425997<br>&gt;&gt;<br>&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0<br>&gt;&gt; (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;<br>&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to<br>&gt;&gt; fix my custom NSCoder?<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; - john<br>&gt;&gt;<br>&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove<br>&gt;&gt;&gt; some of the confusion surrounding which of these did what - they were<br>&gt;&gt;&gt; really named for C types and not Swift ones.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since<br>&gt;&gt;&gt; they were easily confused with the Swift Int type. I think we’ll have to<br>&gt;&gt;&gt; figure out a different approach here. John, please file a bug at<br>&gt;&gt;&gt; bugreport.apple.com and let me know the radar number, and we’ll look<br>&gt;&gt;&gt; into it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;<br>&gt;&gt;&gt; brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it<br>&gt;&gt;&gt; overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it<br>&gt;&gt;&gt; compiles, but I&#39;m getting the same original problem at runtime.  i.e.<br>&gt;&gt;&gt; &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able<br>&gt;&gt;&gt; to paste that into a new swift 3 test.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the<br>&gt;&gt;&gt; Swift version of the &quot;Encoding General Data&quot; section, and 27<br>&gt;&gt;&gt; (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no<br>&gt;&gt;&gt; Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend<br>&gt;&gt;&gt; you file a radar against Foundation. If this is a primitive method for<br>&gt;&gt;&gt; NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/1632d74d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Possible swift 3 method rewrite issue with NSRequestConcreteImplementation ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 21, 2016 at 03:00:00pm</p></header><div class="content"><p>OH. I completely misread this, and jumped to the mistake I would have made. You’re all correct. Sorry, Tony; sorry, John.<br></p><p>Jordan<br></p><p>&gt; On Jul 21, 2016, at 15:06, John Spurlock &lt;john.spurlock at gmail.com&gt; wrote:<br>&gt; <br>&gt; Nope, that doesn&#39;t work, try it yourself.<br>&gt; <br>&gt; I tried that, any many more variations, before posting the minimal repro example here.<br>&gt; <br>&gt; On Thu, Jul 21, 2016 at 5:46 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; I’m a bit late here, but I don’t see why this is necessary. John overrode &#39;encode(_: Int, forKey: String)’ instead of ‘encode(_: Int32, forKey: String)’. Sure, overloading makes this kind of mistake harder to spot, especially when the run-time error comes from Objective-C, but it’s hardly unusual for a Swifty program.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 21, 2016, at 13:06, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; FYI:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/pull/3663 &lt;https://github.com/apple/swift/pull/3663&gt;<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 12:10 PM, Tony Parker via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 20, 2016, at 5:17 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. Since encoding/decoding various types is the principal domain of this type, it seems ok to be overly clear in the method names here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agreed; I’m trying out a few approaches to see what works best.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Is there a way to systematically look for other types that may also have this problem lurking with ints or other similar overload groups?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t think so. I also know that the importer will happily create ambiguous method names, for example when importing two ObjC methods that are the same except that one has an options argument. The options gets a default value and presto - two methods with the same signature. We only find out when someone tries to use it in other source code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 9:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; I thought of the exact same name, but I&#39;m not enthusiastic about the inconsistency this creates with all of the other decode methods on NSCoder. I&#39;m discussing with a few people to decide what to do next. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 19, 2016, at 6:32 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You could just do the one and call it encodeCInt. I think people would understand that it&#39;s different because it&#39;s using a sort-of-foreign type. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 4:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi John,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks for filing the bug.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The root cause of the issue is that the importer would turn the following methods into the same name:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt:(int)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInt32:(uint32_t)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Plus, there is the added confusion that this method:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - (void)encodeInteger:(NSInteger)x forKey:(NSString *)k;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; is imported into Swift like this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func encode(_ x: Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; where, as you can see, “Int” means “NSInteger”, but not the C “int”.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I’m not really sure how to resolve this and still allow for subclassing without simply reverting these names back to Swift 2.2 style, so I think that’s probably what I’ll have to do:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt32(_ x : Int32, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInt64(_ x : Int64, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; func encodeInteger(_ x : Int, forKey k : String)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; and so on, for all of the encode methods, so they are consistent.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 8:20 AM, John Spurlock &lt;john.spurlock at gmail.com &lt;mailto:john.spurlock at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok, filed a new bug for the encodeInt:forKey issue:  rdar://problem/27425997 &lt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ensured it reproduces in xcode beta 3, swift version 3.0 (swiftlang-800.0.34.6 clang-800.0.33)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is there anything I can do in the meantime as a swift-only workaround to fix my custom NSCoder?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - john<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Jul 18, 2016 at 10:52 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We renamed some of these methods for Swift 3 in an attempt to remove some of the confusion surrounding which of these did what - they were really named for C types and not Swift ones.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; encodeInt:forKey: and decodeInt:forKey: are the two missing ones, since they were easily confused with the Swift Int type. I think we’ll have to figure out a different approach here. John, please file a bug at bugreport.apple.com &lt;http://bugreport.apple.com/&gt; and let me know the radar number, and we’ll look into it.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 18, 2016, at 6:33 PM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Hi Tony - when I add that attribute, I get an error at compile-time:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Objective-C method has a different selector from the method it overrides (&#39;encodeInt:forKey:&#39; vs. &#39;encodeInteger:forKey:&#39;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; If I update to encodeInteger:forKey as the fix describes, it compiles, but I&#39;m getting the same original problem at runtime.  i.e. &quot;encodeInt:forKey: only defined for abstract class&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Any other ideas?  See the same thing over there?  You should be able to paste that into a new swift 3 test.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; If you look at the NSCoder documentation, you&#39;ll see 25 methods in the Swift version of the &quot;Encoding General Data&quot; section, and 27 (non-deprecated) in the Objective-C version. `-encodeInt:forKey:` has no Swift equivalent. I&#39;m not sure what the other missing method is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think this is probably a bug or design oversight, and I&#39;d recommend you file a radar against Foundation. If this is a primitive method for NSCoding, it needs to be accessible from Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160721/05e437c8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
