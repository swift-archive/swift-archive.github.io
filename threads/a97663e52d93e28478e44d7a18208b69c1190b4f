<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  1, 2016 at 09:00:00pm</p></header><div class="content"><p>Douglas Gregor via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0036 &quot;Requiring Leading Dot Prefixes for Enum Instance<br>&gt; Member Implementations&quot; begins now and runs throughApril 5, 2016. The<br>&gt; proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction<br>&gt; of Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how<br>&gt; do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br></p><p>This proposal seems to me like it&#39;s failing to fix the underlying problem,<br>which is that people don&#39;t understand the leading dot rules, and papering<br>over the problem by making the rule less consisten, with different behavior<br>for enums and other type-scoped (static/class) entities. It doesn&#39;t seem<br>like a principled solution to me. <br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>April  1, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Apr 1, 2016, at 4:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Douglas Gregor via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0036 &quot;Requiring Leading Dot Prefixes for Enum Instance<br>&gt;&gt; Member Implementations&quot; begins now and runs throughApril 5, 2016. The<br>&gt;&gt; proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager. When replying, please try to keep the proposal link at<br>&gt;&gt; the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt; goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction<br>&gt;&gt; of Swift. When writing your review, here are some questions you might<br>&gt;&gt; want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how<br>&gt;&gt; do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt; or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt; <br>&gt; This proposal seems to me like it&#39;s failing to fix the underlying problem,<br>&gt; which is that people don&#39;t understand the leading dot rules, and papering<br>&gt; over the problem by making the rule less consisten, with different behavior<br>&gt; for enums and other type-scoped (static/class) entities. It doesn&#39;t seem<br>&gt; like a principled solution to me. <br></p><p>This proposal doesn’t change the leading dot rules at all.  What it does is make the rules for referencing static members *more* consistent than they are now, removing the special case for enum cases.<br></p><p>&quot;Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member.&quot;<br></p><p>I believe at one point in Swift’s history all static members could be referenced directly.  This proposal seems like it is cleaning up a case that was missed when that changed. <br></p><p><br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/fdee74a5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>April  2, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello Matthew,<br></p><p>If the goal is to make rules for accessing static members and enum cases more consistent, why can’t static members be accessed from inside the type cope with a dot prefix (sorry for the grim example)?<br></p><p>struct Person {<br>    static let lifeExpectency: Int = 80<br>    let age: Int<br>    var lifeRatio: Double { return Double(age) / Double(.lifeExpectency) }<br>}<br></p><p>David.<br></p><p>&gt; On 01 Apr 2016, at 23:19, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 1, 2016, at 4:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Douglas Gregor via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0036 &quot;Requiring Leading Dot Prefixes for Enum Instance<br>&gt;&gt;&gt; Member Implementations&quot; begins now and runs throughApril 5, 2016. The<br>&gt;&gt;&gt; proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager. When replying, please try to keep the proposal link at<br>&gt;&gt;&gt; the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction<br>&gt;&gt;&gt; of Swift. When writing your review, here are some questions you might<br>&gt;&gt;&gt; want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how<br>&gt;&gt;&gt; do you feel that this proposal compares to those?<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt;&gt; or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; This proposal seems to me like it&#39;s failing to fix the underlying problem,<br>&gt;&gt; which is that people don&#39;t understand the leading dot rules, and papering<br>&gt;&gt; over the problem by making the rule less consisten, with different behavior<br>&gt;&gt; for enums and other type-scoped (static/class) entities. It doesn&#39;t seem<br>&gt;&gt; like a principled solution to me. <br>&gt; <br>&gt; This proposal doesn’t change the leading dot rules at all.  What it does is make the rules for referencing static members *more* consistent than they are now, removing the special case for enum cases.<br>&gt; <br>&gt; &quot;Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member.&quot;<br>&gt; <br>&gt; I believe at one point in Swift’s history all static members could be referenced directly.  This proposal seems like it is cleaning up a case that was missed when that changed. <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160402/f4dc30e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>April  2, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Apr 2, 2016, at 9:04 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Hello Matthew,<br>&gt; <br>&gt; If the goal is to make rules for accessing static members and enum cases more consistent, why can’t static members be accessed from inside the type cope with a dot prefix (sorry for the grim example)?<br></p><p>Actually they can as long as they return a value of the type.<br></p><p>struct Person {<br>    static let Bob: Person = Person(name: &quot;Bob&quot;)<br>    let name: String<br>}<br></p><p>Let bob: Person = .Bob<br></p><p><br>&gt; <br>&gt; struct Person {<br>&gt;     static let lifeExpectency: Int = 80<br>&gt;     let age: Int<br>&gt;     var lifeRatio: Double { return Double(age) / Double(.lifeExpectency) }<br>&gt; }<br>&gt; <br>&gt; David.<br>&gt; <br>&gt;&gt;&gt; On 01 Apr 2016, at 23:19, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Apr 1, 2016, at 4:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Douglas Gregor via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of SE-0036 &quot;Requiring Leading Dot Prefixes for Enum Instance<br>&gt;&gt;&gt;&gt; Member Implementations&quot; begins now and runs throughApril 5, 2016. The<br>&gt;&gt;&gt;&gt; proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt;&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt;&gt; review manager. When replying, please try to keep the proposal link at<br>&gt;&gt;&gt;&gt; the top of the message:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0036-enum-dot.md<br>&gt;&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt;&gt;&gt; goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt;&gt; through constructive criticism and, eventually, determine the direction<br>&gt;&gt;&gt;&gt; of Swift. When writing your review, here are some questions you might<br>&gt;&gt;&gt;&gt; want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how<br>&gt;&gt;&gt;&gt; do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt;&gt;&gt; or an in-depth study?<br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal seems to me like it&#39;s failing to fix the underlying problem,<br>&gt;&gt;&gt; which is that people don&#39;t understand the leading dot rules, and papering<br>&gt;&gt;&gt; over the problem by making the rule less consisten, with different behavior<br>&gt;&gt;&gt; for enums and other type-scoped (static/class) entities. It doesn&#39;t seem<br>&gt;&gt;&gt; like a principled solution to me. <br>&gt;&gt; <br>&gt;&gt; This proposal doesn’t change the leading dot rules at all.  What it does is make the rules for referencing static members *more* consistent than they are now, removing the special case for enum cases.<br>&gt;&gt; <br>&gt;&gt; &quot;Enumeration cases are essentially static not instance type members. Unlike static members in structures and classes, enumeration cases can be mentioned in initializers and instance methods without referencing a fully qualified type. This makes little sense. In no other case can an instance implementation directly access a static member.&quot;<br>&gt;&gt; <br>&gt;&gt; I believe at one point in Swift’s history all static members could be referenced directly.  This proposal seems like it is cleaning up a case that was missed when that changed. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160402/a62b9fac/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
