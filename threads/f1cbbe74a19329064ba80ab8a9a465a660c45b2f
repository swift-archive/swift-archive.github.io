<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fbb2eb7db6aecac77ec563869540a874?s=50"></div><header><strong>[Swift 2.2] Request to merge pull request: Perform a dynamic method call if a class has objc ancestry</strong> from <string>Arnold</string> &lt;aschwaighofer at apple.com&gt;<p>February  2, 2016 at 09:00:00am</p></header><div class="content"><p>https://github.com/apple/swift/pull/1159<br></p><p>Perform a dynamic method call if a class has objc ancestry in specula<br>tive devirt as fallback.<br></p><p>If a class has an @objc ancestry this class can be dynamically overridden and<br>therefore we don&#39;t know the default case even if we see the full class<br>hierarchy.<br></p><p>rdar://23228386<br></p><p>Explanation:<br></p><p>Before this change we would devirtualize a method call to static calls of the potential call targets without a fallback to a class method lookup if we believed to have the full class hierarchy e.g in WMO mode. But during runtime this assumption can be violated because an objective-c class can be dynamically extended and so we would end up calling through the wrong method.<br></p><p>private class A : NSObject {<br>func foo() {...}<br>}<br>private class B : A { <br>override foo() {...}<br>}<br></p><p>Before:<br></p><p>callAnA(a : A) {<br> if (a isa A) {<br>  A.foo(a)<br> } else {<br>  B.foo(a)<br> }<br>}<br></p><p>After:<br></p><p>callAnA(a : A) {<br> if (a isa A) {<br>  A.foo(a)<br> } else if (a isa B) {<br>  B.foo(a)<br> } else a.foo(a) // call through class method table.<br>}<br></p><p>Scope:<br></p><p>The change only effects whether we emit a default case that calls through the class method table. Emitting the call through the class method table is always safe. This risk is low.<br></p><p>Testing:<br></p><p>There is a unit test testing the change, furthermore the change was tested in the project reported in rdar://23228386 and only with this change the test scenario in the project works.<br></p><p>Reviewed by:<br>Roman, the author of the speculative virtualization pass, and Slava also took a look at it.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Swift 2.2] Request to merge pull request: Perform a dynamic method call if a class has objc ancestry</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  2, 2016 at 10:00:00am</p></header><div class="content"><p>Could we use the method implementation pointer as the speculation key instead of the isa pointer? That makes the load chain a little longer, but should give you a guaranteed exhaustive key for Swift methods even with mixed ObjC heritage, since artificial ObjC subclasses still aren&#39;t allowed to override Swift methods that aren&#39;t explicitly `dynamic`.<br></p><p>-Joe<br></p><p>&gt; On Feb 2, 2016, at 9:54 AM, Arnold Schwaighofer via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/apple/swift/pull/1159<br>&gt; <br>&gt; Perform a dynamic method call if a class has objc ancestry in specula<br>&gt; tive devirt as fallback.<br>&gt; <br>&gt; If a class has an @objc ancestry this class can be dynamically overridden and<br>&gt; therefore we don&#39;t know the default case even if we see the full class<br>&gt; hierarchy.<br>&gt; <br>&gt; rdar://23228386<br>&gt; <br>&gt; Explanation:<br>&gt; <br>&gt; Before this change we would devirtualize a method call to static calls of the potential call targets without a fallback to a class method lookup if we believed to have the full class hierarchy e.g in WMO mode. But during runtime this assumption can be violated because an objective-c class can be dynamically extended and so we would end up calling through the wrong method.<br>&gt; <br>&gt; private class A : NSObject {<br>&gt; func foo() {...}<br>&gt; }<br>&gt; private class B : A { <br>&gt; override foo() {...}<br>&gt; }<br>&gt; <br>&gt; Before:<br>&gt; <br>&gt; callAnA(a : A) {<br>&gt; if (a isa A) {<br>&gt;  A.foo(a)<br>&gt; } else {<br>&gt;  B.foo(a)<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; After:<br>&gt; <br>&gt; callAnA(a : A) {<br>&gt; if (a isa A) {<br>&gt;  A.foo(a)<br>&gt; } else if (a isa B) {<br>&gt;  B.foo(a)<br>&gt; } else a.foo(a) // call through class method table.<br>&gt; }<br>&gt; <br>&gt; Scope:<br>&gt; <br>&gt; The change only effects whether we emit a default case that calls through the class method table. Emitting the call through the class method table is always safe. This risk is low.<br>&gt; <br>&gt; Testing:<br>&gt; <br>&gt; There is a unit test testing the change, furthermore the change was tested in the project reported in rdar://23228386 and only with this change the test scenario in the project works.<br>&gt; <br>&gt; Reviewed by:<br>&gt; Roman, the author of the speculative virtualization pass, and Slava also took a look at it.<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fbb2eb7db6aecac77ec563869540a874?s=50"></div><header><strong>[Swift 2.2] Request to merge pull request: Perform a dynamic method call if a class has objc ancestry</strong> from <string>Arnold</string> &lt;aschwaighofer at apple.com&gt;<p>February  2, 2016 at 10:00:00am</p></header><div class="content"><p>Yes we could do something like this as an optimization I imagine. That should be done separately from this correctness bug, though.<br></p><p><br>&gt; On Feb 2, 2016, at 10:02 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; Could we use the method implementation pointer as the speculation key instead of the isa pointer? That makes the load chain a little longer, but should give you a guaranteed exhaustive key for Swift methods even with mixed ObjC heritage, since artificial ObjC subclasses still aren&#39;t allowed to override Swift methods that aren&#39;t explicitly `dynamic`.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 9:54 AM, Arnold Schwaighofer via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/pull/1159<br>&gt;&gt; <br>&gt;&gt; Perform a dynamic method call if a class has objc ancestry in specula<br>&gt;&gt; tive devirt as fallback.<br>&gt;&gt; <br>&gt;&gt; If a class has an @objc ancestry this class can be dynamically overridden and<br>&gt;&gt; therefore we don&#39;t know the default case even if we see the full class<br>&gt;&gt; hierarchy.<br>&gt;&gt; <br>&gt;&gt; rdar://23228386<br>&gt;&gt; <br>&gt;&gt; Explanation:<br>&gt;&gt; <br>&gt;&gt; Before this change we would devirtualize a method call to static calls of the potential call targets without a fallback to a class method lookup if we believed to have the full class hierarchy e.g in WMO mode. But during runtime this assumption can be violated because an objective-c class can be dynamically extended and so we would end up calling through the wrong method.<br>&gt;&gt; <br>&gt;&gt; private class A : NSObject {<br>&gt;&gt; func foo() {...}<br>&gt;&gt; }<br>&gt;&gt; private class B : A { <br>&gt;&gt; override foo() {...}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Before:<br>&gt;&gt; <br>&gt;&gt; callAnA(a : A) {<br>&gt;&gt; if (a isa A) {<br>&gt;&gt; A.foo(a)<br>&gt;&gt; } else {<br>&gt;&gt; B.foo(a)<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; After:<br>&gt;&gt; <br>&gt;&gt; callAnA(a : A) {<br>&gt;&gt; if (a isa A) {<br>&gt;&gt; A.foo(a)<br>&gt;&gt; } else if (a isa B) {<br>&gt;&gt; B.foo(a)<br>&gt;&gt; } else a.foo(a) // call through class method table.<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Scope:<br>&gt;&gt; <br>&gt;&gt; The change only effects whether we emit a default case that calls through the class method table. Emitting the call through the class method table is always safe. This risk is low.<br>&gt;&gt; <br>&gt;&gt; Testing:<br>&gt;&gt; <br>&gt;&gt; There is a unit test testing the change, furthermore the change was tested in the project reported in rdar://23228386 and only with this change the test scenario in the project works.<br>&gt;&gt; <br>&gt;&gt; Reviewed by:<br>&gt;&gt; Roman, the author of the speculative virtualization pass, and Slava also took a look at it.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Swift 2.2] Request to merge pull request: Perform a dynamic method call if a class has objc ancestry</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 2, 2016, at 10:06 AM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt; <br>&gt; Yes we could do something like this as an optimization I imagine. That should be done separately from this correctness bug, though.<br></p><p>Agreed. The change LGTM as is.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 10:02 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Could we use the method implementation pointer as the speculation key instead of the isa pointer? That makes the load chain a little longer, but should give you a guaranteed exhaustive key for Swift methods even with mixed ObjC heritage, since artificial ObjC subclasses still aren&#39;t allowed to override Swift methods that aren&#39;t explicitly `dynamic`.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 2, 2016, at 9:54 AM, Arnold Schwaighofer via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift/pull/1159<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perform a dynamic method call if a class has objc ancestry in specula<br>&gt;&gt;&gt; tive devirt as fallback.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If a class has an @objc ancestry this class can be dynamically overridden and<br>&gt;&gt;&gt; therefore we don&#39;t know the default case even if we see the full class<br>&gt;&gt;&gt; hierarchy.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; rdar://23228386<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Explanation:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Before this change we would devirtualize a method call to static calls of the potential call targets without a fallback to a class method lookup if we believed to have the full class hierarchy e.g in WMO mode. But during runtime this assumption can be violated because an objective-c class can be dynamically extended and so we would end up calling through the wrong method.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; private class A : NSObject {<br>&gt;&gt;&gt; func foo() {...}<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; private class B : A { <br>&gt;&gt;&gt; override foo() {...}<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Before:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; callAnA(a : A) {<br>&gt;&gt;&gt; if (a isa A) {<br>&gt;&gt;&gt; A.foo(a)<br>&gt;&gt;&gt; } else {<br>&gt;&gt;&gt; B.foo(a)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; After:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; callAnA(a : A) {<br>&gt;&gt;&gt; if (a isa A) {<br>&gt;&gt;&gt; A.foo(a)<br>&gt;&gt;&gt; } else if (a isa B) {<br>&gt;&gt;&gt; B.foo(a)<br>&gt;&gt;&gt; } else a.foo(a) // call through class method table.<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Scope:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The change only effects whether we emit a default case that calls through the class method table. Emitting the call through the class method table is always safe. This risk is low.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Testing:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There is a unit test testing the change, furthermore the change was tested in the project reported in rdar://23228386 and only with this change the test scenario in the project works.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviewed by:<br>&gt;&gt;&gt; Roman, the author of the speculative virtualization pass, and Slava also took a look at it.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8f1a9db0e26bb3e069fa7a0932e3cd85?s=50"></div><header><strong>[Swift 2.2] Request to merge pull request: Perform a dynamic method call if a class has objc ancestry</strong> from <string>Roman Levenstein</string> &lt;rlevenstein at apple.com&gt;<p>February  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 10:02, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Could we use the method implementation pointer as the speculation key instead of the isa pointer? That makes the load chain a little longer, but should give you a guaranteed exhaustive key for Swift methods even with mixed ObjC heritage, since artificial ObjC subclasses still aren&#39;t allowed to override Swift methods that aren&#39;t explicitly `dynamic`.<br>&gt; <br></p><p>I filed a radar about using the method implementation pointer as the speculation key instead of the isa pointer. See rdar://18508812 for more details.<br>One of the reasons why it was not implemented yet is the fact that it makes jump threading of checked_cast_br almost impossible, because because each speculatively devirtualized class_method  would use a different key.<br></p><p>-Roman<br></p><p>&gt; -Joe<br>&gt; <br>&gt;&gt; On Feb 2, 2016, at 9:54 AM, Arnold Schwaighofer via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/pull/1159<br>&gt;&gt; <br>&gt;&gt; Perform a dynamic method call if a class has objc ancestry in specula<br>&gt;&gt; tive devirt as fallback.<br>&gt;&gt; <br>&gt;&gt; If a class has an @objc ancestry this class can be dynamically overridden and<br>&gt;&gt; therefore we don&#39;t know the default case even if we see the full class<br>&gt;&gt; hierarchy.<br>&gt;&gt; <br>&gt;&gt; rdar://23228386<br>&gt;&gt; <br>&gt;&gt; Explanation:<br>&gt;&gt; <br>&gt;&gt; Before this change we would devirtualize a method call to static calls of the potential call targets without a fallback to a class method lookup if we believed to have the full class hierarchy e.g in WMO mode. But during runtime this assumption can be violated because an objective-c class can be dynamically extended and so we would end up calling through the wrong method.<br>&gt;&gt; <br>&gt;&gt; private class A : NSObject {<br>&gt;&gt; func foo() {...}<br>&gt;&gt; }<br>&gt;&gt; private class B : A { <br>&gt;&gt; override foo() {...}<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Before:<br>&gt;&gt; <br>&gt;&gt; callAnA(a : A) {<br>&gt;&gt; if (a isa A) {<br>&gt;&gt; A.foo(a)<br>&gt;&gt; } else {<br>&gt;&gt; B.foo(a)<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; After:<br>&gt;&gt; <br>&gt;&gt; callAnA(a : A) {<br>&gt;&gt; if (a isa A) {<br>&gt;&gt; A.foo(a)<br>&gt;&gt; } else if (a isa B) {<br>&gt;&gt; B.foo(a)<br>&gt;&gt; } else a.foo(a) // call through class method table.<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Scope:<br>&gt;&gt; <br>&gt;&gt; The change only effects whether we emit a default case that calls through the class method table. Emitting the call through the class method table is always safe. This risk is low.<br>&gt;&gt; <br>&gt;&gt; Testing:<br>&gt;&gt; <br>&gt;&gt; There is a unit test testing the change, furthermore the change was tested in the project reported in rdar://23228386 and only with this change the test scenario in the project works.<br>&gt;&gt; <br>&gt;&gt; Reviewed by:<br>&gt;&gt; Roman, the author of the speculative virtualization pass, and Slava also took a look at it.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>[Swift 2.2] Request to merge pull request: Perform a dynamic method call if a class has objc ancestry</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>February  2, 2016 at 01:00:00pm</p></header><div class="content"><p>Approved.  I’ll handle the merge with the pull request.<br></p><p>&gt; On Feb 2, 2016, at 9:54 AM, Arnold Schwaighofer &lt;aschwaighofer at apple.com&gt; wrote:<br>&gt; <br>&gt; https://github.com/apple/swift/pull/1159<br>&gt; <br>&gt; Perform a dynamic method call if a class has objc ancestry in specula<br>&gt; tive devirt as fallback.<br>&gt; <br>&gt; If a class has an @objc ancestry this class can be dynamically overridden and<br>&gt; therefore we don&#39;t know the default case even if we see the full class<br>&gt; hierarchy.<br>&gt; <br>&gt; rdar://23228386<br>&gt; <br>&gt; Explanation:<br>&gt; <br>&gt; Before this change we would devirtualize a method call to static calls of the potential call targets without a fallback to a class method lookup if we believed to have the full class hierarchy e.g in WMO mode. But during runtime this assumption can be violated because an objective-c class can be dynamically extended and so we would end up calling through the wrong method.<br>&gt; <br>&gt; private class A : NSObject {<br>&gt; func foo() {...}<br>&gt; }<br>&gt; private class B : A { <br>&gt; override foo() {...}<br>&gt; }<br>&gt; <br>&gt; Before:<br>&gt; <br>&gt; callAnA(a : A) {<br>&gt; if (a isa A) {<br>&gt;  A.foo(a)<br>&gt; } else {<br>&gt;  B.foo(a)<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; After:<br>&gt; <br>&gt; callAnA(a : A) {<br>&gt; if (a isa A) {<br>&gt;  A.foo(a)<br>&gt; } else if (a isa B) {<br>&gt;  B.foo(a)<br>&gt; } else a.foo(a) // call through class method table.<br>&gt; }<br>&gt; <br>&gt; Scope:<br>&gt; <br>&gt; The change only effects whether we emit a default case that calls through the class method table. Emitting the call through the class method table is always safe. This risk is low.<br>&gt; <br>&gt; Testing:<br>&gt; <br>&gt; There is a unit test testing the change, furthermore the change was tested in the project reported in rdar://23228386 and only with this change the test scenario in the project works.<br>&gt; <br>&gt; Reviewed by:<br>&gt; Roman, the author of the speculative virtualization pass, and Slava also took a look at it.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160202/1cd94b90/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
