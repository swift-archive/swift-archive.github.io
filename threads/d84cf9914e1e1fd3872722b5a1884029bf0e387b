<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April  6, 2016 at 11:00:00pm</p></header><div class="content"><p>let completeFile = [112, 114, 105, 110, 116, 40, 34, 104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 34, 41]<br>let str = String(validatingUTF8: completeFile)<br></p><p>Did you see it?  No?<br></p><p>What if our bytes are not UTF8?  Well, one would hope that the constructor, um, validates them.<br></p><p>Turns out it does validate them, *but only if the bytes are null-terminated*.  If they are not null-terminated, we get UB &lt;https://github.com/apple/swift/blob/510f29abf77e202780c11d5f6c7449313c819030/stdlib/public/core/CString.swift#L41&gt;.<br></p><p>IMO:<br></p><p>1.  If this constructor insists on null-terminated bytes, it should say so in the name (e.g. validatingNullTerminatedUTF8:), and it should crash deterministically if it gets non-terminated bytes, or<br>2.  It should not require null-terminated bytes<br></p><p>Drew<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160406/d84c387b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April  6, 2016 at 09:00:00pm</p></header><div class="content"><p>On Wed, Apr 6, 2016 at 9:16 PM, Drew Crawford via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; and it should crash<br>&gt; deterministically if it gets non-terminated bytes, or<br></p><p>It can&#39;t, how would you check for this, only given a pointer?<br></p><p>&gt; 2.  It should not require null-terminated bytes<br></p><p>This operation converts a C string to a Swift string, so (2) is a non-starter.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>April  6, 2016 at 09:00:00pm</p></header><div class="content"><p>Could we get a method that takes a [UInt8] directly and performs the same basic function? In my experience I have frequently wanted such a thing (primarily when debugging things) when working with binary protocols that have embedded ASCII data.<br></p><p> - Daniel<br></p><p>&gt; On Apr 6, 2016, at 9:51 PM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On Wed, Apr 6, 2016 at 9:16 PM, Drew Crawford via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; and it should crash<br>&gt;&gt; deterministically if it gets non-terminated bytes, or<br>&gt; <br>&gt; It can&#39;t, how would you check for this, only given a pointer?<br>&gt; <br>&gt;&gt; 2.  It should not require null-terminated bytes<br>&gt; <br>&gt; This operation converts a C string to a Swift string, so (2) is a non-starter.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April  6, 2016 at 09:00:00pm</p></header><div class="content"><p>On Wed, Apr 6, 2016 at 9:54 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; Could we get a method that takes a [UInt8] directly and performs the same basic function?<br></p><p>I think the root of the surprise here is that the compiler converts<br>[UInt8] into an unsafe pointer.  This is appropriate when the callee<br>is a C API, but usually not appropriate when it is a Swift API.  This<br>is not the first time when this implicit conversion causes surprise.<br>I think we should discuss scoping that conversion to only C and<br>Objective-C callees.<br></p><p>But I agree with you, we should have a similar operation that works on<br>arbitrary collections.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>April  6, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Apr 6, 2016, at 9:58 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Apr 6, 2016 at 9:54 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt; Could we get a method that takes a [UInt8] directly and performs the same basic function?<br>&gt; <br>&gt; I think the root of the surprise here is that the compiler converts<br>&gt; [UInt8] into an unsafe pointer.  This is appropriate when the callee<br>&gt; is a C API, but usually not appropriate when it is a Swift API.  This<br>&gt; is not the first time when this implicit conversion causes surprise.<br>&gt; I think we should discuss scoping that conversion to only C and<br>&gt; Objective-C calls.<br></p><p>+1 from me.<br></p><p>&gt; But I agree with you, we should have a similar operation that works on<br>&gt; arbitrary collections.<br></p><p>Cool, thanks.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April  7, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Apr 6, 2016, at 11:51 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; This operation converts a C string to a Swift string, so (2) is a non-starter.<br></p><p><br>Then it is inappropriately named.  The name of the constructor is `validatingUTF8`, not `cString`.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160407/0cd28e1b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>quick, spot the UB in this code:</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April  6, 2016 at 10:00:00pm</p></header><div class="content"><p>On Wed, Apr 6, 2016 at 10:03 PM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt;<br>&gt; On Apr 6, 2016, at 11:51 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt; This operation converts a C string to a Swift string, so (2) is a<br>&gt; non-starter.<br>&gt;<br>&gt;<br>&gt; Then it is inappropriately named.  The name of the constructor is<br>&gt; `validatingUTF8`, not `cString`.<br></p><p>Maybe!  If you can think of a better name, please start a thread on<br>swift-evolution, but please keep the implicit conversion issue<br>separate.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
