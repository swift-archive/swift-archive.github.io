<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/271ce22b6d779ccf67abd73688234905?s=50"></div><header><strong>Request advice on closed range operator</strong> from <string>Peter van der Linden</string> &lt;pvdl at afu.com&gt;<p>February 14, 2016 at 09:00:00am</p></header><div class="content"><p>Hi,<br>I&#39;m a swift novice, possibly asking an elementary question.<br>I noticed that in some cases, a closed range produces a compiler error <br>message.<br></p><p>If you add whitespace before and after the closed range operator (in the <br>example below), the error message goes away.<br>If you delete whitespace before and after the closed range operator, the <br>error message also goes away.<br></p><p>If you have a space before the closed range operator, but not one after, <br>you get an error message.<br>If you have a space after the closed range operator, but not one before, <br>you get an error message.<br>Below is a small example that demonstrates the error.  Can anyone <br>explain more about this?  I find it unusual that adding white space <br>between two tokens can cause the compiler to emit an error message.   <br>Should I file a bug about this?<br></p><p>Thanks<br>   Peter<br></p><p>pvdl$ swift<br>Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 <br>clang-700.1.81). Type :help for assistance.<br>   1&gt;         let s1 = &quot;foo&quot;<br>   2.         let i = s1.startIndex<br>   3.         let j = s1.startIndex.advancedBy(1)<br>s1: String = &quot;foo&quot;<br>i: Index = {<br>   _base = {<br>     _position = 0<br>     _core = {<br>       _baseAddress = 0x000000010054d680<br>       _countAndFlags = 3<br>       _owner = nil<br>     }<br>   }<br>   _lengthUTF16 = 1<br>}<br>j: Index = {<br>   _base = {<br>     _position = 1<br>     _core = {<br>       _baseAddress = 0x000000010054d680<br>       _countAndFlags = 3<br>       _owner = nil<br>     }<br>   }<br>   _lengthUTF16 = 1<br>}<br>   4&gt; var s2 = s1[ i ...j ]<br>repl.swift:4:16: error: expected &#39;,&#39; separator<br>var s2 = s1[ i ...j ]<br>                ^<br>               ,<br></p><p>   4&gt;         var s2 = s1[ i...j ]<br>s2: String = &quot;fo&quot;<br>   5&gt;         var s3 = s1[ i... j ]<br>repl.swift:5:27: error: expected &#39;,&#39; separator<br>         var s3 = s1[ i... j ]<br>                           ^<br>                          ,<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Request advice on closed range operator</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>February 14, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 14, 2016, at 9:37 AM, Peter van der Linden via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I find it unusual that adding white space between two tokens can cause the compiler to emit an error message. <br></p><p>This is by design. Swift is less lenient about whitespace than most C-derived languages. This helps the parser distinguish where operators begin and end, which allows programs to define arbitrary custom operators.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160214/d5f41892/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/069f7ef2d8a91cd35caa5bfc99a35773?s=50"></div><header><strong>Request advice on closed range operator</strong> from <string>Mark Glossop</string> &lt;lists at cueballcentral.com&gt;<p>February 15, 2016 at 03:00:00am</p></header><div class="content"><p>On 15 Feb 2016, at 01:37, Peter van der Linden via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; I&#39;m a swift novice, possibly asking an elementary question.<br>&gt; I noticed that in some cases, a closed range produces a compiler error message.<br>&gt; <br>&gt; If you add whitespace before and after the closed range operator (in the example below), the error message goes away.<br>&gt; If you delete whitespace before and after the closed range operator, the error message also goes away.<br>&gt; <br>&gt; If you have a space before the closed range operator, but not one after, you get an error message.<br>&gt; If you have a space after the closed range operator, but not one before, you get an error message.<br>&gt; Below is a small example that demonstrates the error.  Can anyone explain more about this?  I find it unusual that adding white space between two tokens can cause the compiler to emit an error message.   Should I file a bug about this?<br>&gt; <br>&gt; Thanks<br>&gt;  Peter<br>&gt; <br>&gt; pvdl$ swift<br>&gt; Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt;  1&gt;         let s1 = &quot;foo&quot;<br>&gt;  2.         let i = s1.startIndex<br>&gt;  3.         let j = s1.startIndex.advancedBy(1)<br>&gt; s1: String = &quot;foo&quot;<br>&gt; i: Index = {<br>&gt;  _base = {<br>&gt;    _position = 0<br>&gt;    _core = {<br>&gt;      _baseAddress = 0x000000010054d680<br>&gt;      _countAndFlags = 3<br>&gt;      _owner = nil<br>&gt;    }<br>&gt;  }<br>&gt;  _lengthUTF16 = 1<br>&gt; }<br>&gt; j: Index = {<br>&gt;  _base = {<br>&gt;    _position = 1<br>&gt;    _core = {<br>&gt;      _baseAddress = 0x000000010054d680<br>&gt;      _countAndFlags = 3<br>&gt;      _owner = nil<br>&gt;    }<br>&gt;  }<br>&gt;  _lengthUTF16 = 1<br>&gt; }<br>&gt;  4&gt; var s2 = s1[ i ...j ]<br>&gt; repl.swift:4:16: error: expected &#39;,&#39; separator<br>&gt; var s2 = s1[ i ...j ]<br>&gt;               ^<br>&gt;              ,<br>&gt; <br>&gt;  4&gt;         var s2 = s1[ i...j ]<br>&gt; s2: String = &quot;fo&quot;<br>&gt;  5&gt;         var s3 = s1[ i... j ]<br>&gt; repl.swift:5:27: error: expected &#39;,&#39; separator<br>&gt;        var s3 = s1[ i... j ]<br>&gt;                          ^<br></p><p>This is covered in TSPL in the section on &quot;Operators&quot;:<br>&gt; The whitespace around an operator is used to determine whether an operator is used as a prefix operator, a postfix operator, or a binary operator. This behavior is summarized in the following rules:<br>&gt; * If an operator has whitespace around both sides or around neither side, it is treated as a binary operator. As an example, the + operator in a+b and a + b is treated as a binary operator.<br>&gt; * If an operator has whitespace on the left side only, it is treated as a prefix unary operator. As an example, the ++ operator in a ++b is treated as a prefix unary operator.<br>&gt; * If an operator has whitespace on the right side only, it is treated as a postfix unary operator. As an example, the ++ operator in a++ b is treated as a postfix unary operator.<br>&gt; * If an operator has no whitespace on the left but is followed immediately by a dot (.), it is treated as a postfix unary operator. As an example, the ++ operator in a++.b is treated as a postfix unary operator (a++ .b rather than a ++ .b).<br>&gt; <br>&gt; Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2.2).” iBooks. <br></p><p>(I&#39;m assuming the above excerpt isn&#39;t significantly different from the Swift 2.1 language, but I didn&#39;t check...)<br></p><p>As Jens also indicated, Swift is more particular about whitespace than other C derivates. In the case you&#39;ve encountered (the first bullet above), you need to have whitespace around both sides or neither side of the range operator; asymmetric whitespace will cause the closed range operator to be parsed as an invalid prefix or postfix operator.<br></p><p>That said, it&#39;s probable the error message you&#39;ve encountered could be a little more informative...<br></p><p>HTH,<br>M.<br>-- <br>Mark Glossop<br>E: lists at cueballcentral.com<br>TW: http://twitter.com/Cueball_AU<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
