<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>Swift Extensions on Overlay Structs</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>November 11, 2016 at 08:00:00am</p></header><div class="content"><p>Hi list,<br></p><p>Since Swift 3 there exist overlay structs, e.g. NSURL gets bridged to URL.<br>Unfortunately now extensions on URL are not getting bridged back to ObjC:<br></p><p><br>extension URL {<br>	func doSomething() -&gt; URL {<br>		return self.absoluteURL<br>	}<br>}<br></p><p>+ (NSURL *)swiftStructExtensionCaller {<br>	NSURL *url = [NSURL URLWithString:@&quot;https://apple.github.io/swift-evolution/&quot;];<br>	return [url doSomething];<br>}<br></p><p>The compiler does not see the method `doSomething`. Is this on purpose, or something that has yet to be improved?<br></p><p>I&#39;m aware that I could write the extension on NSURL, but that would mean a lot of casting on the Swift side.<br></p><p><br>  -- Fabian<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Swift Extensions on Overlay Structs</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>November 13, 2016 at 02:00:00am</p></header><div class="content"><p>Hmm... would it be possible to define a protocol like &quot;UnifiedURLType&quot;,<br>define each of the properties you need to work with inside your extension<br>functions as protocol properties inside the protocol UnifiedURLType {}<br>declaration, create an extension UnifiedURLType {} and include<br>doSomething() inside the extension, and then create extensions on both URL<br>and NSURL causing them to conform to UnifiedURLType? (extension URL:<br>UnifiedURLType {}; extension NSURL: UnifiedURLType {})<br></p><p>You could try it, but I wouldn&#39;t hold my breath, especially if you&#39;re<br>planning on using absoluteURL within your extension as something as basic<br>as the type of that variable is already different between the two types.<br></p><p>Dennis<br></p><p>On Fri, Nov 11, 2016 at 3:08 AM Fabian Ehrentraud via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi list,<br>&gt;<br>&gt; Since Swift 3 there exist overlay structs, e.g. NSURL gets bridged to URL.<br>&gt; Unfortunately now extensions on URL are not getting bridged back to ObjC:<br>&gt;<br>&gt;<br>&gt; extension URL {<br>&gt;         func doSomething() -&gt; URL {<br>&gt;                 return self.absoluteURL<br>&gt;         }<br>&gt; }<br>&gt;<br>&gt; + (NSURL *)swiftStructExtensionCaller {<br>&gt;         NSURL *url = [NSURL URLWithString:@&quot;<br>&gt; https://apple.github.io/swift-evolution/&quot;];<br>&gt;         return [url doSomething];<br>&gt; }<br>&gt;<br>&gt; The compiler does not see the method `doSomething`. Is this on purpose, or<br>&gt; something that has yet to be improved?<br>&gt;<br>&gt; I&#39;m aware that I could write the extension on NSURL, but that would mean a<br>&gt; lot of casting on the Swift side.<br>&gt;<br>&gt;<br>&gt;   -- Fabian<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161113/6ee0cf58/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>Swift Extensions on Overlay Structs</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>November 14, 2016 at 07:00:00am</p></header><div class="content"><p>That&#39;s an interesting idea without having to write type signatures twice.<br></p><p>The different nullability of the absoluteURL is strange indeed - what if I do a guaranteed cast from NSURL to URL, and absoluteURL would have been nil in the original object?<br></p><p>Eiher way, I&#39;d really like to know if URL extensions could be bridged too without casting in a future Swift version.<br></p><p>  -- Fabian<br></p><p><br>On 13 Nov 2016, at 03:45, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&lt;mailto:dennis.s.lysenko at gmail.com&gt;&gt; wrote:<br></p><p>Hmm... would it be possible to define a protocol like &quot;UnifiedURLType&quot;, define each of the properties you need to work with inside your extension functions as protocol properties inside the protocol UnifiedURLType {} declaration, create an extension UnifiedURLType {} and include doSomething() inside the extension, and then create extensions on both URL and NSURL causing them to conform to UnifiedURLType? (extension URL: UnifiedURLType {}; extension NSURL: UnifiedURLType {})<br></p><p>You could try it, but I wouldn&#39;t hold my breath, especially if you&#39;re planning on using absoluteURL within your extension as something as basic as the type of that variable is already different between the two types.<br></p><p>Dennis<br></p><p>On Fri, Nov 11, 2016 at 3:08 AM Fabian Ehrentraud via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>Hi list,<br></p><p>Since Swift 3 there exist overlay structs, e.g. NSURL gets bridged to URL.<br>Unfortunately now extensions on URL are not getting bridged back to ObjC:<br></p><p><br>extension URL {<br>        func doSomething() -&gt; URL {<br>                return self.absoluteURL<br>        }<br>}<br></p><p>+ (NSURL *)swiftStructExtensionCaller {<br>        NSURL *url = [NSURL URLWithString:@&quot;https://apple.github.io/swift-evolution/&quot;];<br>        return [url doSomething];<br>}<br></p><p>The compiler does not see the method `doSomething`. Is this on purpose, or something that has yet to be improved?<br></p><p>I&#39;m aware that I could write the extension on NSURL, but that would mean a lot of casting on the Swift side.<br></p><p><br>  -- Fabian<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161114/d8146af2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
