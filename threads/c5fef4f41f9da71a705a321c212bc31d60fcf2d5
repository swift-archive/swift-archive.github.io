<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ff404e5928c7aeb05ee97fd4109bf38?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>tuuranton at tutanota.de</string> &lt;tuuranton at tutanota.de&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>Can you please add these features in Swift 3?<br>1. The ability to do this:extension Array&lt;Double&gt; {    //extend arrays of <br>doubles}<br>2. Generic typealiases:struct Foo&lt;T,V&gt; {    let t: T    let v: V}typealias <br>IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/c5fef2d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html. The core Swift team approves:<br></p><p>&gt; Yes, this is definitely something that I (at least) would like to see.  Patches welcome :-)<br>&gt; Chris (Lattner)<br></p><p>All the best,<br>Krzysztof<br></p><p>On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>Can you please add these features in Swift 3?<br></p><p>1. The ability to do this:<br>extension Array&lt;Double&gt; {<br>    //extend arrays of doubles<br>}<br></p><p>2. Generic typealiases:<br>struct Foo&lt;T,V&gt; {<br>    let t: T<br>    let v: V<br>}<br>typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/131d86e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Concerning extension constraining, it’s already doable with:<br></p><p>```<br>protocol DoubleProtocol {}<br></p><p>extension Double : DoubleProtocol {}<br></p><p>extension Array where Element : DoubleProtocol {<br>    func onlyForDoubles() -&gt; String {<br>            return &quot;hello doubles!&quot;<br>    }<br>}<br></p><p>[1.2].onlyForDoubles() // „hello doubles!”<br>[&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without more context<br>```<br></p><p>However, I personally like the idea of making a syntactic sugar for that case.<br></p><p>All the best,<br>Krzysztof<br></p><p><br>On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (krzysztof at siejkowski.net) wrote:<br></p><p>Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html. The core Swift team approves:<br></p><p>&gt; Yes, this is<br>definitely something that I (at least) would like to see. Patches<br>welcome :-)<br>&gt; Chris (Lattner)<br></p><p>All the best,<br>Krzysztof<br></p><p>On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>Can you please add these features in Swift 3?<br></p><p>1. The ability to do this:<br>extension Array&lt;Double&gt; {<br>    //extend arrays of doubles<br>}<br></p><p>2. Generic typealiases:<br>struct Foo&lt;T,V&gt; {<br>    let t: T<br>    let v: V<br>}<br>typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/3616a35d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5e460daedc625457bc16580ecdbc04?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Davide De Franceschi</string> &lt;defrenz98 at hotmail.com&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>I thought constraining an extension to a single type (#1) was already in 2.2?<br>I&#39;ve seen it in a SPM example and also someone confirmed to me that it compiled<br></p><p>It went like<br>extension Array where Element == Double { // add stuff }<br></p><p>&gt; On 7 Dec 2015, at 12:14, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Concerning extension constraining, it’s already doable with:<br>&gt; <br>&gt; ```<br>&gt; protocol DoubleProtocol {}<br>&gt; <br>&gt; extension Double : DoubleProtocol {}<br>&gt; <br>&gt; extension Array where Element : DoubleProtocol {<br>&gt;     func onlyForDoubles() -&gt; String {<br>&gt;             return &quot;hello doubles!&quot;<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; [1.2].onlyForDoubles() // „hello doubles!”<br>&gt; [&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without more context<br>&gt; ```<br>&gt; <br>&gt; However, I personally like the idea of making a syntactic sugar for that case.<br>&gt; <br>&gt; All the best,<br>&gt; Krzysztof<br>&gt; <br>&gt; <br>&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (krzysztof at siejkowski.net &lt;mailto:krzysztof at siejkowski.net&gt;) wrote:<br>&gt; <br>&gt;&gt; Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html&gt;. The core Swift team approves:<br>&gt;&gt; <br>&gt;&gt; &gt; Yes, this is<br>&gt;&gt; definitely something that I (at least) would like to see. Patches<br>&gt;&gt; welcome :-)<br>&gt;&gt; &gt; Chris (Lattner)<br>&gt;&gt; <br>&gt;&gt; All the best,<br>&gt;&gt; Krzysztof<br>&gt;&gt; <br>&gt;&gt; On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Can you please add these features in Swift 3?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. The ability to do this:<br>&gt;&gt;&gt; extension Array&lt;Double&gt; {<br>&gt;&gt;&gt;     //extend arrays of doubles<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. Generic typealiases:<br>&gt;&gt;&gt; struct Foo&lt;T,V&gt; {<br>&gt;&gt;&gt;     let t: T<br>&gt;&gt;&gt;     let v: V<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/fb53a69e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Oh, it could be so, I’m just not aware of it. I’ve tried Swift version 2.2-dev (LLVM 46be9ff861, Clang 4deb154edc, Swift 778f82939c) with<br></p><p>extension Array where Element == Double { <br>     func foo() -&gt; String { <br>         return &quot;hello doubles!&quot; <br>     } <br>}<br></p><p>and got<br></p><p>repl.swift:1:31: error: same-type requirement makes generic parameter &#39;Element&#39; non-generic<br>extension Array where Element == Double {<br>                              ^<br></p><p>Could you please point to docs / example / reference?<br></p><p>All the best,<br>Krzysztof<br></p><p><br>On 7 December 2015 at 13:34:51, Davide De Franceschi via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>I thought constraining an extension to a single type (#1) was already in 2.2?<br>I&#39;ve seen it in a SPM example and also someone confirmed to me that it compiled<br></p><p>It went like<br>extension Array where Element == Double { // add stuff }<br></p><p>On 7 Dec 2015, at 12:14, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>Concerning extension constraining, it’s already doable with:<br></p><p>```<br>protocol DoubleProtocol {}<br></p><p>extension Double : DoubleProtocol {}<br></p><p>extension Array where Element : DoubleProtocol {<br>    func onlyForDoubles() -&gt; String {<br>            return &quot;hello doubles!&quot;<br>    }<br>}<br></p><p>[1.2].onlyForDoubles() // „hello doubles!”<br>[&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without more context<br>```<br></p><p>However, I personally like the idea of making a syntactic sugar for that case.<br></p><p>All the best,<br>Krzysztof<br></p><p><br>On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (krzysztof at siejkowski.net) wrote:<br></p><p>Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html. The core Swift team approves:<br></p><p>&gt; Yes, this is definitely something that I (at least) would<br>like to see. Patches welcome :-)<br>&gt; Chris (Lattner)<br></p><p>All the best,<br>Krzysztof<br></p><p>On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>Can you please add these features in Swift 3?<br></p><p>1. The ability to do this:<br>extension Array&lt;Double&gt; {<br>    //extend arrays of doubles<br>}<br></p><p>2. Generic typealiases:<br>struct Foo&lt;T,V&gt; {<br>    let t: T<br>    let v: V<br>}<br>typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/f5f15c55/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5e460daedc625457bc16580ecdbc04?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Davide De Franceschi</string> &lt;defrenz98 at hotmail.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>So, I got now that I was confused.<br></p><p>When I saw this:<br>https://github.com/apple/example-package-fisheryates/blob/master/Sources/Fisher-Yates_Shuffle.swift#L26 &lt;https://github.com/apple/example-package-fisheryates/blob/master/Sources/Fisher-Yates_Shuffle.swift#L26&gt;<br>I was surprised as I was pretty sure you couldn&#39;t do that. But it works in 2.1 as well.<br></p><p>But it&#39;s extending a protocol, not a type.<br></p><p>but it still means that you can do what you wanted with<br>extension SequenceType where Generator.Element == Double {<br>  func foo() -&gt; String {<br>    return &quot;hello doubles!&quot;<br>  }<br>}<br></p><p>(of course there are cases where the type is generic but it doesn&#39;t adopt a protocol with associated types to extend, so it&#39;s still plenty useful)<br></p><p>&gt; On 7 Dec 2015, at 12:56, Krzysztof Siejkowski &lt;krzysztof at siejkowski.net&gt; wrote:<br>&gt; <br>&gt; Oh, it could be so, I’m just not aware of it. I’ve tried Swift version 2.2-dev (LLVM 46be9ff861, Clang 4deb154edc, Swift 778f82939c) with<br>&gt; <br>&gt; extension Array where Element == Double { <br>&gt;      func foo() -&gt; String { <br>&gt;          return &quot;hello doubles!&quot; <br>&gt;      } <br>&gt; }<br>&gt; <br>&gt; and got<br>&gt; <br>&gt; repl.swift:1:31: error: same-type requirement makes generic parameter &#39;Element&#39; non-generic<br>&gt; extension Array where Element == Double {<br>&gt;                               ^<br>&gt; <br>&gt; Could you please point to docs / example / reference?<br>&gt; <br>&gt; All the best,<br>&gt; Krzysztof<br>&gt; <br>&gt; <br>&gt; On 7 December 2015 at 13:34:51, Davide De Franceschi via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt; <br>&gt;&gt; I thought constraining an extension to a single type (#1) was already in 2.2?<br>&gt;&gt; I&#39;ve seen it in a SPM example and also someone confirmed to me that it compiled<br>&gt;&gt; <br>&gt;&gt; It went like<br>&gt;&gt; extension Array where Element == Double { // add stuff }<br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Dec 2015, at 12:14, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Concerning extension constraining, it’s already doable with:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; protocol DoubleProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Double : DoubleProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Array where Element : DoubleProtocol {<br>&gt;&gt;&gt;     func onlyForDoubles() -&gt; String {<br>&gt;&gt;&gt;             return &quot;hello doubles!&quot;<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1.2].onlyForDoubles() // „hello doubles!”<br>&gt;&gt;&gt; [&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without more context<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I personally like the idea of making a syntactic sugar for that case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; All the best,<br>&gt;&gt;&gt; Krzysztof<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (krzysztof at siejkowski.net &lt;mailto:krzysztof at siejkowski.net&gt;) wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html&gt;. The core Swift team approves:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Yes, this is definitely something that I (at least) would<br>&gt;&gt;&gt;&gt; like to see. Patches welcome :-)<br>&gt;&gt;&gt;&gt; &gt; Chris (Lattner)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; All the best,<br>&gt;&gt;&gt;&gt; Krzysztof<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can you please add these features in Swift 3?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. The ability to do this:<br>&gt;&gt;&gt;&gt;&gt; extension Array&lt;Double&gt; {<br>&gt;&gt;&gt;&gt;&gt;     //extend arrays of doubles<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2. Generic typealiases:<br>&gt;&gt;&gt;&gt;&gt; struct Foo&lt;T,V&gt; {<br>&gt;&gt;&gt;&gt;&gt;     let t: T<br>&gt;&gt;&gt;&gt;&gt;     let v: V<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/74849829/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 4:56 AM, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Oh, it could be so, I’m just not aware of it. I’ve tried Swift version 2.2-dev (LLVM 46be9ff861, Clang 4deb154edc, Swift 778f82939c) with<br>&gt; <br>&gt; extension Array where Element == Double { <br>&gt;      func foo() -&gt; String { <br>&gt;          return &quot;hello doubles!&quot; <br>&gt;      } <br>&gt; }<br>&gt; <br>&gt; and got<br>&gt; <br>&gt; repl.swift:1:31: error: same-type requirement makes generic parameter &#39;Element&#39; non-generic<br>&gt; extension Array where Element == Double {<br>&gt;                               ^<br></p><p>This is an artificial limitation.<br></p><p>In the case of a generic signature of a function, you really *do* want to prevent the user from constraining parameters to the point of becoming non-generic, eg the following does not make sense:<br></p><p>func foo&lt;T where T == Int&gt;(t: T) // why not just say func foo(t: Int) instead?<br></p><p>However the same diagnostic logic is used for validating generic signatures of constrained extensions, when in fact it needs a slightly different set of checks.<br></p><p>I think this is something that a community member could figure out and fix pretty easily without going through the evolution process -- its really a language change at this point.<br></p><p>Slava<br></p><p><br>&gt; <br>&gt; Could you please point to docs / example / reference?<br>&gt; <br>&gt; All the best,<br>&gt; Krzysztof<br>&gt; <br>&gt; <br>&gt; On 7 December 2015 at 13:34:51, Davide De Franceschi via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt; <br>&gt;&gt; I thought constraining an extension to a single type (#1) was already in 2.2?<br>&gt;&gt; I&#39;ve seen it in a SPM example and also someone confirmed to me that it compiled<br>&gt;&gt; <br>&gt;&gt; It went like<br>&gt;&gt; extension Array where Element == Double { // add stuff }<br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Dec 2015, at 12:14, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Concerning extension constraining, it’s already doable with:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; protocol DoubleProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Double : DoubleProtocol {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Array where Element : DoubleProtocol {<br>&gt;&gt;&gt;     func onlyForDoubles() -&gt; String {<br>&gt;&gt;&gt;             return &quot;hello doubles!&quot;<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1.2].onlyForDoubles() // „hello doubles!”<br>&gt;&gt;&gt; [&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without more context<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, I personally like the idea of making a syntactic sugar for that case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; All the best,<br>&gt;&gt;&gt; Krzysztof<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (krzysztof at siejkowski.net &lt;mailto:krzysztof at siejkowski.net&gt;) wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html &lt;https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_pipermail_swift-2Devolution_2015-2DDecember_000132.html&amp;d=BQMFaQ&amp;c=Hw-EJUFt2_D9PK5csBJ29kRV40HqSDXWTLPyZ6W8u84&amp;r=Uu9iNLnY0h1pMgusxPvGAdQh7wn-fCLNd0vIsJCqWtk&amp;m=Uzu4AUxAPExJgD7SwlP-qUxaoP5S2zFxkNZqp8nUDN0&amp;s=egkhmUc4MUnSb_VqledTCNrMEoPiGFA5RpGrmDsx5Sc&amp;e=&gt;. The core Swift team approves:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Yes, this is definitely something that I (at least) would<br>&gt;&gt;&gt;&gt; like to see. Patches welcome :-)<br>&gt;&gt;&gt;&gt; &gt; Chris (Lattner)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; All the best,<br>&gt;&gt;&gt;&gt; Krzysztof<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can you please add these features in Swift 3?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. The ability to do this:<br>&gt;&gt;&gt;&gt;&gt; extension Array&lt;Double&gt; {<br>&gt;&gt;&gt;&gt;&gt;     //extend arrays of doubles<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2. Generic typealiases:<br>&gt;&gt;&gt;&gt;&gt; struct Foo&lt;T,V&gt; {<br>&gt;&gt;&gt;&gt;&gt;     let t: T<br>&gt;&gt;&gt;&gt;&gt;     let v: V<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=BQMFaQ&amp;c=Hw-EJUFt2_D9PK5csBJ29kRV40HqSDXWTLPyZ6W8u84&amp;r=Uu9iNLnY0h1pMgusxPvGAdQh7wn-fCLNd0vIsJCqWtk&amp;m=Uzu4AUxAPExJgD7SwlP-qUxaoP5S2zFxkNZqp8nUDN0&amp;s=DDvpZ11cAh4tJzwSrC_Znf-_EuEh9_qzIeYp3oCdOyg&amp;e=&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=BQMFaQ&amp;c=Hw-EJUFt2_D9PK5csBJ29kRV40HqSDXWTLPyZ6W8u84&amp;r=Uu9iNLnY0h1pMgusxPvGAdQh7wn-fCLNd0vIsJCqWtk&amp;m=Uzu4AUxAPExJgD7SwlP-qUxaoP5S2zFxkNZqp8nUDN0&amp;s=DDvpZ11cAh4tJzwSrC_Znf-_EuEh9_qzIeYp3oCdOyg&amp;e=&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=BQIGaQ&amp;c=Hw-EJUFt2_D9PK5csBJ29kRV40HqSDXWTLPyZ6W8u84&amp;r=Uu9iNLnY0h1pMgusxPvGAdQh7wn-fCLNd0vIsJCqWtk&amp;m=Uzu4AUxAPExJgD7SwlP-qUxaoP5S2zFxkNZqp8nUDN0&amp;s=DDvpZ11cAh4tJzwSrC_Znf-_EuEh9_qzIeYp3oCdOyg&amp;e= &lt;https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=BQIGaQ&amp;c=Hw-EJUFt2_D9PK5csBJ29kRV40HqSDXWTLPyZ6W8u84&amp;r=Uu9iNLnY0h1pMgusxPvGAdQh7wn-fCLNd0vIsJCqWtk&amp;m=Uzu4AUxAPExJgD7SwlP-qUxaoP5S2zFxkNZqp8nUDN0&amp;s=DDvpZ11cAh4tJzwSrC_Znf-_EuEh9_qzIeYp3oCdOyg&amp;e=&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/a7ce3c69/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>On Mon, Dec 7, 2015 at 11:06 AM, Slava Pestov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; However the same diagnostic logic is used for validating generic<br>&gt; signatures of constrained extensions, when in fact it needs a slightly<br>&gt; different set of checks.<br>&gt;<br>&gt; I think this is something that a community member could figure out and fix<br>&gt; pretty easily without going through the evolution process -- its really a<br>&gt; language change at this point.<br>&gt;<br>&gt; Slava<br>&gt;<br></p><p>I&#39;d be interested in working on fixing this, though I won&#39;t be able to get<br>started immediately, so if someone else is more eager, go for it :-D<br></p><p>Jacob Bandes-Storch<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/b6eabd24/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff38f1fb583cc22cccd57a30fc9804e0?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Simon Pilkington</string> &lt;simonmpilkington at me.com&gt;<p>December  8, 2015 at 07:00:00am</p></header><div class="content"><p>Jacob,<br></p><p>When do you think you’d get to it? I’d be interested in looking at it as long as I’m not stepping on your toes.<br></p><p>Cheers,<br>Simon<br></p><p><br>&gt; On 7 Dec 2015, at 11:11 AM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 11:06 AM, Slava Pestov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; However the same diagnostic logic is used for validating generic signatures of constrained extensions, when in fact it needs a slightly different set of checks.<br>&gt; <br>&gt; I think this is something that a community member could figure out and fix pretty easily without going through the evolution process -- its really a language change at this point.<br>&gt; <br>&gt; Slava<br>&gt; <br>&gt; I&#39;d be interested in working on fixing this, though I won&#39;t be able to get started immediately, so if someone else is more eager, go for it :-D<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/3a4f54fa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 4:34 AM, Davide De Franceschi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I thought constraining an extension to a single type (#1) was already in 2.2?<br>&gt; I&#39;ve seen it in a SPM example and also someone confirmed to me that it compiled<br>&gt; <br>&gt; It went like<br>&gt; extension Array where Element == Double { // add stuff }<br></p><p>This ought to work, but doesn&#39;t because of a bug we didn&#39;t get around to fixing.<br></p><p>-Joe<br></p><p>&gt;&gt; On 7 Dec 2015, at 12:14, Krzysztof Siejkowski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Concerning extension constraining, it’s already doable with:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; protocol DoubleProtocol {}<br>&gt;&gt; <br>&gt;&gt; extension Double : DoubleProtocol {}<br>&gt;&gt; <br>&gt;&gt; extension Array where Element : DoubleProtocol {<br>&gt;&gt;     func onlyForDoubles() -&gt; String {<br>&gt;&gt;             return &quot;hello doubles!&quot;<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; [1.2].onlyForDoubles() // „hello doubles!”<br>&gt;&gt; [&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without more context<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; However, I personally like the idea of making a syntactic sugar for that case.<br>&gt;&gt; <br>&gt;&gt; All the best,<br>&gt;&gt; Krzysztof<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (krzysztof at siejkowski.net &lt;mailto:krzysztof at siejkowski.net&gt;) wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Concerning generic typealiases, the topic is already being discussed in „Generic `typealias`s” thread: https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html &lt;https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html&gt;. The core Swift team approves:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Yes, this is<br>&gt;&gt;&gt; definitely something that I (at least) would like to see. Patches<br>&gt;&gt;&gt; welcome :-)<br>&gt;&gt;&gt; &gt; Chris (Lattner)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; All the best,<br>&gt;&gt;&gt; Krzysztof<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can you please add these features in Swift 3?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. The ability to do this:<br>&gt;&gt;&gt;&gt; extension Array&lt;Double&gt; {<br>&gt;&gt;&gt;&gt;     //extend arrays of doubles<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Generic typealiases:<br>&gt;&gt;&gt;&gt; struct Foo&lt;T,V&gt; {<br>&gt;&gt;&gt;&gt;     let t: T<br>&gt;&gt;&gt;&gt;     let v: V<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/74baafb8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ff404e5928c7aeb05ee97fd4109bf38?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>tuuranton at tutanota.de</string> &lt;tuuranton at tutanota.de&gt;<p>December  8, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt;  However, I personally like the idea of making a syntactic sugar for that <br>&gt; case.<br>Thanks! I didn&#39;t know I could do it like that.Yeah, someone please add that <br>syntactic sugar. That would be really cool. Otherwise my namespace gets <br>polluted with that DoubleProtocol, minor drawback :)<br></p><p>--<br>Securely sent with Tutanota. Claim your encrypted mailbox today!<br>https://tutanota.com<br></p><p>7. Dec 2015 13:14 by krzysztof at siejkowski.net:<br></p><p><br>&gt; Concerning extension constraining, it’s already doable with:<br>&gt; ```&gt; protocol DoubleProtocol {}<br>&gt; extension Double : DoubleProtocol {}<br>&gt; extension Array where Element : DoubleProtocol {&gt;     func onlyForDoubles() <br>&gt; -&gt; String {&gt;             return &quot;hello doubles!&quot;&gt;     }&gt; }<br>&gt; [1.2].onlyForDoubles() // „hello doubles!”&gt; [&quot;a&quot;].onlyForDoubles() // <br>&gt; error: type of expression is ambiguous without more context&gt; ```<br>&gt; However, I personally like the idea of making a syntactic sugar for that <br>&gt; case.<br>&gt; All the best,&gt; Krzysztof&gt;<br>&gt;  &gt;<br>&gt;<br>&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (&gt; <br>&gt; krzysztof at siejkowski.net&gt; ) wrote:<br>&gt;<br></p><p>&gt; Concerning generic typealiases, the topic is already beingdiscussed in <br>&gt; „Generic `typealias`s” thread: &gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html&gt; <br>&gt; .The core Swift team approves:<br>&gt; &gt; &gt; Yes, this isdefinitely something that I (at least) would like to see. <br>&gt; Patcheswelcome :-)&gt; &gt; Chris(Lattner)<br>&gt; All the best,&gt; Krzysztof<br>&gt;<br>&gt; On 7 December 2015 at 12:41:05, Tuur Antonvia swift-evolution (&gt; <br>&gt; swift-evolution at swift.org&gt; )wrote:<br>&gt;<br>&gt;&gt; Can you please add these features in Swift3?<br>&gt;&gt; 1. The ability to do this:&gt;&gt; extension Array&lt;Double&gt; {&gt;&gt;     //extend <br>&gt;&gt; arrays of doubles&gt;&gt; }<br>&gt;&gt; 2. Generic typealiases:&gt;&gt; struct Foo&lt;T,V&gt; {&gt;&gt;     let t: T&gt;&gt;     let v: <br>&gt;&gt; V&gt;&gt; }&gt;&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error inSwift 2.1&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/5ef912a8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ff404e5928c7aeb05ee97fd4109bf38?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>tuuranton at tutanota.de</string> &lt;tuuranton at tutanota.de&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>Actually, I just realized that your solution isn&#39;t at all what I&#39;m after.<br>Doing &quot;extension Array&lt;Double&gt;&quot; is not the same thing and wouldn&#39;t be just a <br>&quot;syntactic sugar&quot; for the code you came up with.<br>Why? Because in your code, the extension method only knows that the array&#39;s <br>Element is a DoubleProtocol. It doesn&#39;t know it&#39;s a *Double* (which is what I <br>want it to be). As such, it won&#39;t have access to Double&#39;s methods and such.<br>This is probably okay for Doubles, but for other types, especially my own <br>custom types with their own methods, the difference is huge. &quot;extension <br>Array&lt;MyStructType&gt;&quot; is what I want, but your solution won&#39;t help me if the <br>extension method needs access to MyStructType&#39;s methods.<br>See what I mean, or am I missing something here?<br></p><p>--<br>Securely sent with Tutanota. Claim your encrypted mailbox today!<br>https://tutanota.com<br></p><p>7. Dec 2015 13:14 by krzysztof at siejkowski.net:<br></p><p><br>&gt; Concerning extension constraining, it’s already doable with:<br>&gt; ```&gt; protocol DoubleProtocol {}<br>&gt; extension Double : DoubleProtocol {}<br>&gt; extension Array where Element : DoubleProtocol {&gt;     func onlyForDoubles() <br>&gt; -&gt; String {&gt;             return &quot;hello doubles!&quot;&gt;     }&gt; }<br>&gt; [1.2].onlyForDoubles() // „hello doubles!”&gt; [&quot;a&quot;].onlyForDoubles() // <br>&gt; error: type of expression is ambiguous without more context&gt; ```<br>&gt; However, I personally like the idea of making a syntactic sugar for that <br>&gt; case.<br>&gt; All the best,&gt; Krzysztof&gt;<br>&gt;  &gt;<br>&gt;<br>&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (&gt; <br>&gt; krzysztof at siejkowski.net&gt; ) wrote:<br>&gt;<br></p><p>&gt; Concerning generic typealiases, the topic is already beingdiscussed in <br>&gt; „Generic `typealias`s” thread: &gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html&gt; <br>&gt; .The core Swift team approves:<br>&gt; &gt; &gt; Yes, this isdefinitely something that I (at least) would like to see. <br>&gt; Patcheswelcome :-)&gt; &gt; Chris(Lattner)<br>&gt; All the best,&gt; Krzysztof<br>&gt;<br>&gt; On 7 December 2015 at 12:41:05, Tuur Antonvia swift-evolution (&gt; <br>&gt; swift-evolution at swift.org&gt; )wrote:<br>&gt;<br>&gt;&gt; Can you please add these features in Swift3?<br>&gt;&gt; 1. The ability to do this:&gt;&gt; extension Array&lt;Double&gt; {&gt;&gt;     //extend <br>&gt;&gt; arrays of doubles&gt;&gt; }<br>&gt;&gt; 2. Generic typealiases:&gt;&gt; struct Foo&lt;T,V&gt; {&gt;&gt;     let t: T&gt;&gt;     let v: <br>&gt;&gt; V&gt;&gt; }&gt;&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error inSwift 2.1&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/db3396b9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/411a0fa16436bc975292f7044033a246?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Alex Lew</string> &lt;alexl.mail+swift at gmail.com&gt;<p>December  8, 2015 at 05:00:00pm</p></header><div class="content"><p>I think the pattern here is<br></p><p>protocol DoubleProtocol {<br>     var doubleValue: Double { get }<br>}<br>extension Double: DoubleProtocol {<br>     var doubleValue: Double { return self }<br>}<br>extension Array where Element: DoubleProtocol {<br>     // in these methods, use the element&#39;s .doubleValue property<br>     // to get the actual double, on which you can then call Double&#39;s<br>methods<br>}<br></p><p>That way, if another type wants to conform to DoubleProtocol, it needs to<br>be able to represent itself as a Double.<br></p><p>-Alex<br></p><p>On Tue, Dec 8, 2015 at 4:26 PM, Tuur Anton via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Actually, I just realized that your solution isn&#39;t at all what I&#39;m after.<br>&gt;<br>&gt; Doing &quot;extension Array&lt;Double&gt;&quot; is not the same thing and wouldn&#39;t be just<br>&gt; a &quot;syntactic sugar&quot; for the code you came up with.<br>&gt;<br>&gt; Why? Because in your code, the extension method only knows that the<br>&gt; array&#39;s Element is a DoubleProtocol. It doesn&#39;t know it&#39;s a *Double* (which<br>&gt; is what I want it to be). As such, it won&#39;t have access to Double&#39;s methods<br>&gt; and such.<br>&gt;<br>&gt; This is probably okay for Doubles, but for other types, especially my own<br>&gt; custom types with their own methods, the difference is huge. &quot;extension<br>&gt; Array&lt;MyStructType&gt;&quot; is what I want, but your solution won&#39;t help me if the<br>&gt; extension method needs access to MyStructType&#39;s methods.<br>&gt;<br>&gt; See what I mean, or am I missing something here?<br>&gt;<br>&gt; --<br>&gt; Securely sent with Tutanota. Claim your encrypted mailbox today!<br>&gt; https://tutanota.com<br>&gt;<br>&gt; 7. Dec 2015 13:14 by krzysztof at siejkowski.net:<br>&gt;<br>&gt; Concerning extension constraining, it’s already doable with:<br>&gt;<br>&gt; ```<br>&gt; protocol DoubleProtocol {}<br>&gt;<br>&gt; extension Double : DoubleProtocol {}<br>&gt;<br>&gt; extension Array where Element : DoubleProtocol {<br>&gt;     func onlyForDoubles() -&gt; String {<br>&gt;             return &quot;hello doubles!&quot;<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; [1.2].onlyForDoubles() // „hello doubles!”<br>&gt; [&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without<br>&gt; more context<br>&gt; ```<br>&gt;<br>&gt; However, I personally like the idea of making a syntactic sugar for that<br>&gt; case.<br>&gt;<br>&gt; All the best,<br>&gt; Krzysztof<br>&gt;<br>&gt;<br>&gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (<br>&gt; krzysztof at siejkowski.net) wrote:<br>&gt;<br>&gt; Concerning generic typealiases, the topic is already being discussed in<br>&gt; „Generic `typealias`s” thread:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html.<br>&gt; The core Swift team approves:<br>&gt;<br>&gt; &gt;  Yes, this is definitely something that I (at least) would like to see.<br>&gt; Patches welcome :-)<br>&gt; &gt; Chris (Lattner)<br>&gt;<br>&gt; All the best,<br>&gt; Krzysztof<br>&gt;<br>&gt; On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (<br>&gt; swift-evolution at swift.org) wrote:<br>&gt;<br>&gt; Can you please add these features in Swift 3?<br>&gt;<br>&gt; 1. The ability to do this:<br>&gt; extension Array&lt;Double&gt; {<br>&gt;     //extend arrays of doubles<br>&gt; }<br>&gt;<br>&gt; 2. Generic typealiases:<br>&gt; struct Foo&lt;T,V&gt; {<br>&gt;     let t: T<br>&gt;     let v: V<br>&gt; }<br>&gt; typealias IntFoo&lt;V&gt; = Foo&lt;Int,V&gt; //Error in Swift 2.1<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; Untracked with Trackbuster &lt;https://trackbuster.com/?sig&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/5b205e28/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>December  9, 2015 at 07:00:00am</p></header><div class="content"><p>True. DoubleProtocol introduces a layer of indirection. <br></p><p>This might be a disadvantage, because it requires unnecessary verbosity of the casting to original type. It also might be useful, because it allows you to pick and choose only the subset of functionalities and ensure the method of Array extension won’t have an access to all the abilities the type provides. It’s basically a mask for the interface of original type.<br></p><p>protocol DoubleType {<br>    var isFinite: Bool { get }<br>}<br></p><p>extension Double : DoubleType {<br>    var isFinite: Bool { get {<br>        return self.isFinite<br>    }}<br>}<br></p><p>extension Array where Element : DoubleType {<br>    func onlyFiniteAllowed() -&gt; [Element] {<br>        return self.filter { $0.isFinite } // I know nothing about $0 but if it’s finite<br>    }<br>}<br></p><p>Anyway, it looks like plain’n’simple extension Array Element == Double is already on its way, thanks to Simon and Jakob :)<br></p><p><br></p><p>-----Original Message-----<br>From: Alex Lew &lt;alexl.mail+swift at gmail.com&gt;<br>Reply: Alex Lew &lt;alexl.mail+swift at gmail.com&gt;<br>Date: December 8, 2015 at 11:19:41 PM<br>To: tuuranton at tutanota.de &lt;tuuranton at tutanota.de&gt;<br>CC: Krzysztof Siejkowski &lt;krzysztof at siejkowski.net&gt;, Swift Evolution &lt;swift-evolution at swift.org&gt;<br>Subject:  Re: [swift-evolution] Will these two features be included in Swift 3?<br></p><p>&gt; I think the pattern here is<br>&gt;  <br>&gt; protocol DoubleProtocol {<br>&gt; var doubleValue: Double { get }<br>&gt; }<br>&gt; extension Double: DoubleProtocol {<br>&gt; var doubleValue: Double { return self }<br>&gt; }<br>&gt; extension Array where Element: DoubleProtocol {<br>&gt; // in these methods, use the element&#39;s .doubleValue property<br>&gt; // to get the actual double, on which you can then call Double&#39;s<br>&gt; methods<br>&gt; }<br>&gt;  <br>&gt; That way, if another type wants to conform to DoubleProtocol, it needs to<br>&gt; be able to represent itself as a Double.<br>&gt;  <br>&gt; -Alex<br>&gt;  <br>&gt; On Tue, Dec 8, 2015 at 4:26 PM, Tuur Anton via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;  <br>&gt; &gt; Actually, I just realized that your solution isn&#39;t at all what I&#39;m after.<br>&gt; &gt;<br>&gt; &gt; Doing &quot;extension Array&quot; is not the same thing and wouldn&#39;t be just<br>&gt; &gt; a &quot;syntactic sugar&quot; for the code you came up with.<br>&gt; &gt;<br>&gt; &gt; Why? Because in your code, the extension method only knows that the<br>&gt; &gt; array&#39;s Element is a DoubleProtocol. It doesn&#39;t know it&#39;s a *Double* (which<br>&gt; &gt; is what I want it to be). As such, it won&#39;t have access to Double&#39;s methods<br>&gt; &gt; and such.<br>&gt; &gt;<br>&gt; &gt; This is probably okay for Doubles, but for other types, especially my own<br>&gt; &gt; custom types with their own methods, the difference is huge. &quot;extension<br>&gt; &gt; Array&quot; is what I want, but your solution won&#39;t help me if the<br>&gt; &gt; extension method needs access to MyStructType&#39;s methods.<br>&gt; &gt;<br>&gt; &gt; See what I mean, or am I missing something here?<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Securely sent with Tutanota. Claim your encrypted mailbox today!<br>&gt; &gt; https://tutanota.com<br>&gt; &gt;<br>&gt; &gt; 7. Dec 2015 13:14 by krzysztof at siejkowski.net:<br>&gt; &gt;<br>&gt; &gt; Concerning extension constraining, it’s already doable with:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; protocol DoubleProtocol {}<br>&gt; &gt;<br>&gt; &gt; extension Double : DoubleProtocol {}<br>&gt; &gt;<br>&gt; &gt; extension Array where Element : DoubleProtocol {<br>&gt; &gt; func onlyForDoubles() -&gt; String {<br>&gt; &gt; return &quot;hello doubles!&quot;<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; [1.2].onlyForDoubles() // „hello doubles!”<br>&gt; &gt; [&quot;a&quot;].onlyForDoubles() // error: type of expression is ambiguous without<br>&gt; &gt; more context<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; However, I personally like the idea of making a syntactic sugar for that<br>&gt; &gt; case.<br>&gt; &gt;<br>&gt; &gt; All the best,<br>&gt; &gt; Krzysztof<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On 7 December 2015 at 13:01:11, Krzysztof Siejkowski (<br>&gt; &gt; krzysztof at siejkowski.net) wrote:<br>&gt; &gt;<br>&gt; &gt; Concerning generic typealiases, the topic is already being discussed in<br>&gt; &gt; „Generic `typealias`s” thread:<br>&gt; &gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000132.html.  <br>&gt; &gt; The core Swift team approves:<br>&gt; &gt;<br>&gt; &gt; &gt; Yes, this is definitely something that I (at least) would like to see.<br>&gt; &gt; Patches welcome :-)<br>&gt; &gt; &gt; Chris (Lattner)<br>&gt; &gt;<br>&gt; &gt; All the best,<br>&gt; &gt; Krzysztof<br>&gt; &gt;<br>&gt; &gt; On 7 December 2015 at 12:41:05, Tuur Anton via swift-evolution (<br>&gt; &gt; swift-evolution at swift.org) wrote:<br>&gt; &gt;<br>&gt; &gt; Can you please add these features in Swift 3?<br>&gt; &gt;<br>&gt; &gt; 1. The ability to do this:<br>&gt; &gt; extension Array {<br>&gt; &gt; //extend arrays of doubles<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; 2. Generic typealiases:<br>&gt; &gt; struct Foo {<br>&gt; &gt; let t: T<br>&gt; &gt; let v: V<br>&gt; &gt; }<br>&gt; &gt; typealias IntFoo = Foo //Error in Swift 2.1<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; Untracked with Trackbuster  <br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Will these two features be included in Swift 3?</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>I would love to see this feature if it is possible. You can’t currently create an extension on Array&lt;Double&gt; so a common work-around is to add your functionality to SequenceType where you constrain the Generator’s Element to be of type Double - this means I’ve added functionality in places beyond where it belongs.<br></p><p>Daniel<br></p><p><br>&gt; On Dec 7, 2015, at 6:40 AM, Tuur Anton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Can you please add these features in Swift 3?<br>&gt; <br>&gt; 1. The ability to do this:<br>&gt; extension Array&lt;Double&gt; {<br>&gt;     //extend arrays of doubles<br>&gt; }<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
