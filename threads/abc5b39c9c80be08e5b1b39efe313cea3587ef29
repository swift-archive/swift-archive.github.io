<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad3deb66bae8cf131a987937367bf657?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Tony Constantinides</string> &lt;constantinnovationsinc at gmail.com&gt;<p>October 12, 2016 at 05:00:00pm</p></header><div class="content"><p>In Swift 3.0 you can build Android apps in Linux but only console apps as<br>there is no framework to build GUI apps using JNI.<br>What I propose is to build an initial limited framework coded in C that<br>calls enough of the Java Android API via JNI to bootstrap the android app<br>and to create widgets and layouts.A default Androidmanifest.xml file and<br>some files needed to be generated to make a valid android app.<br>  The Android API java surface is vast, so this framework needs to be build<br>over many releases to be useful. Developing a graphical Android app<br>requires interaction with &quot;Activities&quot; and the package manager and some<br>widgets like Button and some layouts like &quot;RelativeLayout&quot; and<br>&quot;LinearLayout&quot;.<br> The result will be the ability to develop GUI Android apps on Linux using<br>Swift 3.0<br>Further support for additional APIs will be provided once the basics are<br>solid..<br>Who am I: Senior Android mobile developer with more than six years<br>experience on Android.<br>Am I able to build Swift 3.0 on Linux: Yes<br>Any help, suggestions, or ideas are most welcome<br>Warms regards,<br>Tony Constantinides<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161012/abc5ef29/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad3deb66bae8cf131a987937367bf657?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Tony Constantinides</string> &lt;constantinnovationsinc at gmail.com&gt;<p>October 13, 2016 at 02:00:00pm</p></header><div class="content"><p>Ok,<br>Can I take the fact that there no feedback yet on<br>a) The community is not interested in writing Android apps in Swift<br>or<br>b) Wrong forum despite the fact the inventor the Swift programming language<br>pointed me here,<br>or<br>c) This has been tried and failed before.<br>I sincerely interested in the Swift community thoughts and ideas. I<br>sincerely want to build this project based on the desires of the Swift<br>developers community. Let me know what you think about the proposal<br>and yes, I can present in much more detail.<br>I took the idea from this page<br>https://github.com/apple/swift/blob/master/docs/Android.md<br>Thank you<br>Sincerely yours,<br>Tony Constantinides<br></p><p>On Wed, Oct 12, 2016 at 5:12 PM, Tony Constantinides &lt;<br>constantinnovationsinc at gmail.com&gt; wrote:<br></p><p>&gt; In Swift 3.0 you can build Android apps in Linux but only console apps as<br>&gt; there is no framework to build GUI apps using JNI.<br>&gt; What I propose is to build an initial limited framework coded in C that<br>&gt; calls enough of the Java Android API via JNI to bootstrap the android app<br>&gt; and to create widgets and layouts.A default Androidmanifest.xml file and<br>&gt; some files needed to be generated to make a valid android app.<br>&gt;   The Android API java surface is vast, so this framework needs to be<br>&gt; build over many releases to be useful. Developing a graphical Android app<br>&gt; requires interaction with &quot;Activities&quot; and the package manager and some<br>&gt; widgets like Button and some layouts like &quot;RelativeLayout&quot; and<br>&gt; &quot;LinearLayout&quot;.<br>&gt;  The result will be the ability to develop GUI Android apps on Linux using<br>&gt; Swift 3.0<br>&gt; Further support for additional APIs will be provided once the basics are<br>&gt; solid..<br>&gt; Who am I: Senior Android mobile developer with more than six years<br>&gt; experience on Android.<br>&gt; Am I able to build Swift 3.0 on Linux: Yes<br>&gt; Any help, suggestions, or ideas are most welcome<br>&gt; Warms regards,<br>&gt; Tony Constantinides<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/9feb933b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 13, 2016 at 05:00:00pm</p></header><div class="content"><p>I think it is too soon to tackle this issue.<br></p><p>I think there is room for making adapters for a lightweight GUI toolkit for embedded applications. For example, a Swift adapter for EFL &lt;https://www.enlightenment.org/about-efl&gt; (of Enlightenment) or something like that. But when we talk about Android, we are usually talking about a real Android app that can be a good citizen in Google ecosystem. I donâ€™t think this is feasible right now. <br></p><p>Current Android GUI services is too intertwined with its proprietary runtime and VM and Google is continuing to tie them harder and harder to its Google services API. Unless Google starts treating non-Dalvik-based languages as first class citizens in Android development world, there is no point in trying to make Swift usable as a GUI development language for Android. It is not going to work.<br></p><p>Just my opinion.<br></p><p>&gt; On Oct 13, 2016, at 2:56 PM, Tony Constantinides via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Ok,<br>&gt; Can I take the fact that there no feedback yet on<br>&gt; a) The community is not interested in writing Android apps in Swift<br>&gt; or<br>&gt; b) Wrong forum despite the fact the inventor the Swift programming language pointed me here,<br>&gt; or<br>&gt; c) This has been tried and failed before.<br>&gt; I sincerely interested in the Swift community thoughts and ideas. I sincerely want to build this project based on the desires of the Swift developers community. Let me know what you think about the proposal and yes, I can present in much more detail.<br>&gt; I took the idea from this page<br>&gt; https://github.com/apple/swift/blob/master/docs/Android.md &lt;https://github.com/apple/swift/blob/master/docs/Android.md&gt;<br>&gt; Thank you<br>&gt; Sincerely yours,<br>&gt; Tony Constantinides<br>&gt; <br>&gt; On Wed, Oct 12, 2016 at 5:12 PM, Tony Constantinides &lt;constantinnovationsinc at gmail.com &lt;mailto:constantinnovationsinc at gmail.com&gt;&gt; wrote:<br>&gt; In Swift 3.0 you can build Android apps in Linux but only console apps as there is no framework to build GUI apps using JNI.<br>&gt; What I propose is to build an initial limited framework coded in C that calls enough of the Java Android API via JNI to bootstrap the android app and to create widgets and layouts.A default Androidmanifest.xml file and some files needed to be generated to make a valid android app.<br>&gt;   The Android API java surface is vast, so this framework needs to be build over many releases to be useful. Developing a graphical Android app requires interaction with &quot;Activities&quot; and the package manager and some widgets like Button and some layouts like &quot;RelativeLayout&quot; and &quot;LinearLayout&quot;.<br>&gt;  The result will be the ability to develop GUI Android apps on Linux using Swift 3.0<br>&gt; Further support for additional APIs will be provided once the basics are solid..<br>&gt; Who am I: Senior Android mobile developer with more than six years experience on Android.<br>&gt; Am I able to build Swift 3.0 on Linux: Yes<br>&gt; Any help, suggestions, or ideas are most welcome<br>&gt; Warms regards,<br>&gt; Tony Constantinides<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/df9cfdb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad3deb66bae8cf131a987937367bf657?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Tony Constantinides</string> &lt;constantinnovationsinc at gmail.com&gt;<p>October 13, 2016 at 06:00:00pm</p></header><div class="content"><p>Yeah,<br>I do not disagree with you.<br>  People who have succeeded have gone down the code generation route.<br>a) This require them to build a special Swift compiler that generates<br>Android Java Code from Swift code. They generate a 95% complete Java<br>Android app and finish it in Android Studio. By doing it that way you avoid<br>all the runtime issues and the binding issues. The problem is that you have<br>to mirror the Android SDK on Swift and code Swift like Java. You would have<br>to update the compiler for every new Java Class you would need to generate<br>which is not flexible but doable.<br>b)  Other people have tried to port the entire Swift toolchain to Android<br>but that far too much work and Swift is changing too fast to make that<br>feasible. Observe the dead projects on GitHub.<br>c)  My first thought was to create a shim that routing messages from the<br>Swift app to a Java app which translated them to API calls but this has<br>bootstrapping issues and code maintenance issues.<br>d)  My second thought  is to use JNI, as it already been proven that you<br>can call C code from Swift which in turn can call Android Java code. This<br>approach require lots of bindings and a bootstrap of the Android runtime<br>and god knows how many third party libs. The java app also wants to be in<br>charge and load the JNI bindings as a so file via its LoadLibrary() call.<br>It might be easier to call Swift from Java rather than the other way round<br>if the Swift code could be built as a library. Writing JNI glue code does<br>not excite me.<br></p><p> Since I can already build Swift on Linux and ARM, I do have the ability to<br>generate an Android runnable app from Swift code. The only issue is that I<br>am using the Android NDK way of writing Android which provides access to<br>only the C++ API of Android which is far smaller API surface that the huge<br>Java API surface and its big runtime. This evolves  Swift calling an LVM<br> module library that contains C code that call the Android NDK API which<br>bootstrap the NativeActivity class in Android (and the android runtime) and<br>from there you can access the Camera and multimedia API just not the GUI<br>widgets.<br>  This is not too soon to think about as Swift language changes are<br>supposed to be minimal until Swift 4.0. Of course Google could do the work<br>for me but I not holding my breath. You can also build Android GUI apps<br>without every referencing the Google Service API but I do notice that the<br>Google Service API is being extended because it does not require an Android<br>OS update to get new features into Android..<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>On Thu, Oct 13, 2016 at 5:20 PM, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br></p><p>&gt; I think it is too soon to tackle this issue.<br>&gt;<br>&gt; I think there is room for making adapters for a lightweight GUI toolkit<br>&gt; for embedded applications. For example, a Swift adapter for EFL<br>&gt; &lt;https://www.enlightenment.org/about-efl&gt; (of Enlightenment) or something<br>&gt; like that. But when we talk about Android, we are usually talking about a<br>&gt; real Android app that can be a good citizen in Google ecosystem. I donâ€™t<br>&gt; think this is feasible right now.<br>&gt;<br>&gt; Current Android GUI services is too intertwined with its proprietary<br>&gt; runtime and VM and Google is continuing to tie them harder and harder to<br>&gt; its Google services API. Unless Google starts treating non-Dalvik-based<br>&gt; languages as first class citizens in Android development world, there is no<br>&gt; point in trying to make Swift usable as a GUI development language for<br>&gt; Android. It is not going to work.<br>&gt;<br>&gt; Just my opinion.<br>&gt;<br>&gt; On Oct 13, 2016, at 2:56 PM, Tony Constantinides via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Ok,<br>&gt; Can I take the fact that there no feedback yet on<br>&gt; a) The community is not interested in writing Android apps in Swift<br>&gt; or<br>&gt; b) Wrong forum despite the fact the inventor the Swift programming<br>&gt; language pointed me here,<br>&gt; or<br>&gt; c) This has been tried and failed before.<br>&gt; I sincerely interested in the Swift community thoughts and ideas. I<br>&gt; sincerely want to build this project based on the desires of the Swift<br>&gt; developers community. Let me know what you think about the proposal<br>&gt; and yes, I can present in much more detail.<br>&gt; I took the idea from this page<br>&gt; https://github.com/apple/swift/blob/master/docs/Android.md<br>&gt; Thank you<br>&gt; Sincerely yours,<br>&gt; Tony Constantinides<br>&gt;<br>&gt; On Wed, Oct 12, 2016 at 5:12 PM, Tony Constantinides &lt;<br>&gt; constantinnovationsinc at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; In Swift 3.0 you can build Android apps in Linux but only console apps as<br>&gt;&gt; there is no framework to build GUI apps using JNI.<br>&gt;&gt; What I propose is to build an initial limited framework coded in C that<br>&gt;&gt; calls enough of the Java Android API via JNI to bootstrap the android app<br>&gt;&gt; and to create widgets and layouts.A default Androidmanifest.xml file and<br>&gt;&gt; some files needed to be generated to make a valid android app.<br>&gt;&gt;   The Android API java surface is vast, so this framework needs to be<br>&gt;&gt; build over many releases to be useful. Developing a graphical Android app<br>&gt;&gt; requires interaction with &quot;Activities&quot; and the package manager and some<br>&gt;&gt; widgets like Button and some layouts like &quot;RelativeLayout&quot; and<br>&gt;&gt; &quot;LinearLayout&quot;.<br>&gt;&gt;  The result will be the ability to develop GUI Android apps on Linux<br>&gt;&gt; using Swift 3.0<br>&gt;&gt; Further support for additional APIs will be provided once the basics are<br>&gt;&gt; solid..<br>&gt;&gt; Who am I: Senior Android mobile developer with more than six years<br>&gt;&gt; experience on Android.<br>&gt;&gt; Am I able to build Swift 3.0 on Linux: Yes<br>&gt;&gt; Any help, suggestions, or ideas are most welcome<br>&gt;&gt; Warms regards,<br>&gt;&gt; Tony Constantinides<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/b869fdb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ade63d18e3dc425b3add61921718ac1?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Proyb P</string> &lt;proyb6 at gmail.com&gt;<p>October 16, 2016 at 02:00:00am</p></header><div class="content"><p>Android N and later may changes a lot, I would use Kotlin which has<br>similarity to Swift syntax.<br></p><p>Kotlin Lang<br>https://www.toptal.com/software/kotlin-android-language<br></p><p>Javascript for mobile app for best compatibility.<br></p><p><br></p><p>On Fri, Oct 14, 2016 at 9:34 AM, Tony Constantinides via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Yeah,<br>&gt; I do not disagree with you.<br>&gt;   People who have succeeded have gone down the code generation route.<br>&gt; a) This require them to build a special Swift compiler that generates<br>&gt; Android Java Code from Swift code. They generate a 95% complete Java<br>&gt; Android app and finish it in Android Studio. By doing it that way you avoid<br>&gt; all the runtime issues and the binding issues. The problem is that you have<br>&gt; to mirror the Android SDK on Swift and code Swift like Java. You would have<br>&gt; to update the compiler for every new Java Class you would need to generate<br>&gt; which is not flexible but doable.<br>&gt; b)  Other people have tried to port the entire Swift toolchain to Android<br>&gt; but that far too much work and Swift is changing too fast to make that<br>&gt; feasible. Observe the dead projects on GitHub.<br>&gt; c)  My first thought was to create a shim that routing messages from the<br>&gt; Swift app to a Java app which translated them to API calls but this has<br>&gt; bootstrapping issues and code maintenance issues.<br>&gt; d)  My second thought  is to use JNI, as it already been proven that you<br>&gt; can call C code from Swift which in turn can call Android Java code. This<br>&gt; approach require lots of bindings and a bootstrap of the Android runtime<br>&gt; and god knows how many third party libs. The java app also wants to be in<br>&gt; charge and load the JNI bindings as a so file via its LoadLibrary() call.<br>&gt; It might be easier to call Swift from Java rather than the other way round<br>&gt; if the Swift code could be built as a library. Writing JNI glue code does<br>&gt; not excite me.<br>&gt;<br>&gt;  Since I can already build Swift on Linux and ARM, I do have the ability<br>&gt; to generate an Android runnable app from Swift code. The only issue is that<br>&gt; I am using the Android NDK way of writing Android which provides access to<br>&gt; only the C++ API of Android which is far smaller API surface that the huge<br>&gt; Java API surface and its big runtime. This evolves  Swift calling an LVM<br>&gt;  module library that contains C code that call the Android NDK API which<br>&gt; bootstrap the NativeActivity class in Android (and the android runtime) and<br>&gt; from there you can access the Camera and multimedia API just not the GUI<br>&gt; widgets.<br>&gt;   This is not too soon to think about as Swift language changes are<br>&gt; supposed to be minimal until Swift 4.0. Of course Google could do the work<br>&gt; for me but I not holding my breath. You can also build Android GUI apps<br>&gt; without every referencing the Google Service API but I do notice that the<br>&gt; Google Service API is being extended because it does not require an Android<br>&gt; OS update to get new features into Android..<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Oct 13, 2016 at 5:20 PM, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br>&gt;<br>&gt;&gt; I think it is too soon to tackle this issue.<br>&gt;&gt;<br>&gt;&gt; I think there is room for making adapters for a lightweight GUI toolkit<br>&gt;&gt; for embedded applications. For example, a Swift adapter for EFL<br>&gt;&gt; &lt;https://www.enlightenment.org/about-efl&gt; (of Enlightenment) or<br>&gt;&gt; something like that. But when we talk about Android, we are usually talking<br>&gt;&gt; about a real Android app that can be a good citizen in Google ecosystem. I<br>&gt;&gt; donâ€™t think this is feasible right now.<br>&gt;&gt;<br>&gt;&gt; Current Android GUI services is too intertwined with its proprietary<br>&gt;&gt; runtime and VM and Google is continuing to tie them harder and harder to<br>&gt;&gt; its Google services API. Unless Google starts treating non-Dalvik-based<br>&gt;&gt; languages as first class citizens in Android development world, there is no<br>&gt;&gt; point in trying to make Swift usable as a GUI development language for<br>&gt;&gt; Android. It is not going to work.<br>&gt;&gt;<br>&gt;&gt; Just my opinion.<br>&gt;&gt;<br>&gt;&gt; On Oct 13, 2016, at 2:56 PM, Tony Constantinides via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Ok,<br>&gt;&gt; Can I take the fact that there no feedback yet on<br>&gt;&gt; a) The community is not interested in writing Android apps in Swift<br>&gt;&gt; or<br>&gt;&gt; b) Wrong forum despite the fact the inventor the Swift programming<br>&gt;&gt; language pointed me here,<br>&gt;&gt; or<br>&gt;&gt; c) This has been tried and failed before.<br>&gt;&gt; I sincerely interested in the Swift community thoughts and ideas. I<br>&gt;&gt; sincerely want to build this project based on the desires of the Swift<br>&gt;&gt; developers community. Let me know what you think about the proposal<br>&gt;&gt; and yes, I can present in much more detail.<br>&gt;&gt; I took the idea from this page<br>&gt;&gt; https://github.com/apple/swift/blob/master/docs/Android.md<br>&gt;&gt; Thank you<br>&gt;&gt; Sincerely yours,<br>&gt;&gt; Tony Constantinides<br>&gt;&gt;<br>&gt;&gt; On Wed, Oct 12, 2016 at 5:12 PM, Tony Constantinides &lt;<br>&gt;&gt; constantinnovationsinc at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; In Swift 3.0 you can build Android apps in Linux but only console apps<br>&gt;&gt;&gt; as there is no framework to build GUI apps using JNI.<br>&gt;&gt;&gt; What I propose is to build an initial limited framework coded in C that<br>&gt;&gt;&gt; calls enough of the Java Android API via JNI to bootstrap the android app<br>&gt;&gt;&gt; and to create widgets and layouts.A default Androidmanifest.xml file and<br>&gt;&gt;&gt; some files needed to be generated to make a valid android app.<br>&gt;&gt;&gt;   The Android API java surface is vast, so this framework needs to be<br>&gt;&gt;&gt; build over many releases to be useful. Developing a graphical Android app<br>&gt;&gt;&gt; requires interaction with &quot;Activities&quot; and the package manager and some<br>&gt;&gt;&gt; widgets like Button and some layouts like &quot;RelativeLayout&quot; and<br>&gt;&gt;&gt; &quot;LinearLayout&quot;.<br>&gt;&gt;&gt;  The result will be the ability to develop GUI Android apps on Linux<br>&gt;&gt;&gt; using Swift 3.0<br>&gt;&gt;&gt; Further support for additional APIs will be provided once the basics are<br>&gt;&gt;&gt; solid..<br>&gt;&gt;&gt; Who am I: Senior Android mobile developer with more than six years<br>&gt;&gt;&gt; experience on Android.<br>&gt;&gt;&gt; Am I able to build Swift 3.0 on Linux: Yes<br>&gt;&gt;&gt; Any help, suggestions, or ideas are most welcome<br>&gt;&gt;&gt; Warms regards,<br>&gt;&gt;&gt; Tony Constantinides<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161016/c4d3b22d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad3deb66bae8cf131a987937367bf657?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Tony Constantinides</string> &lt;constantinnovationsinc at gmail.com&gt;<p>October 16, 2016 at 01:00:00pm</p></header><div class="content"><p>Kotlin does not run on iOS without some custom VM (Robot VM) which would<br>kill performance. Kotlin  is based on Java byte code compatibility so it<br>really an Android only solution. JavaScript work across platforms but has<br>limited functionality based on its programming model. Getting a ListView to<br>scroll with hundreds of items in it is still almost impossible in<br>Javascript.  It also (ReactJS) has to call native code to get anything done<br>expect its bridge is going to be slower than my native JNI calls.  Sure<br>developers can cop out with Kotlin and JavaScript but both of those<br>solutions are sub-optimal.<br></p><p>The key is to use a programming language that is support on one platform<br>(IOS and MacOS) and make it work on another while retaining the ability to<br>make native calls. Since i can already generate Android ARM code from Swift<br>on Linux, we just need to ability to call Android 18K API calls to be fully<br>Android complaint. Since Swift support Clang modules which is basically a C<br>lib with a module map, I can write JNI calls to the Android Java API via<br>these modules in C. I would then use the Swift &quot;import xxx&quot; to use these<br>APIs.<br></p><p>  The key here is to bootstrap Android run time library and not require<br>developer to relearn 18K API calls. To avoid the Java Native Interface<br> calls I could go done the custom compiler approach or code generation<br>approach. By instead of one co debase I would then have two. Anyone else<br>have any ideas otherwise I get the impression I posting to the wrong<br>mailing group.<br></p><p><br></p><p><br></p><p><br>On Oct 15, 2016 11:07, &quot;Proyb P&quot; &lt;proyb6 at gmail.com&gt; wrote:<br></p><p>&gt; Android N and later may changes a lot, I would use Kotlin which has<br>&gt; similarity to Swift syntax.<br>&gt;<br>&gt; Kotlin Lang<br>&gt; https://www.toptal.com/software/kotlin-android-language<br>&gt;<br>&gt; Javascript for mobile app for best compatibility.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Fri, Oct 14, 2016 at 9:34 AM, Tony Constantinides via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Yeah,<br>&gt;&gt; I do not disagree with you.<br>&gt;&gt;   People who have succeeded have gone down the code generation route.<br>&gt;&gt; a) This require them to build a special Swift compiler that generates<br>&gt;&gt; Android Java Code from Swift code. They generate a 95% complete Java<br>&gt;&gt; Android app and finish it in Android Studio. By doing it that way you avoid<br>&gt;&gt; all the runtime issues and the binding issues. The problem is that you have<br>&gt;&gt; to mirror the Android SDK on Swift and code Swift like Java. You would have<br>&gt;&gt; to update the compiler for every new Java Class you would need to generate<br>&gt;&gt; which is not flexible but doable.<br>&gt;&gt; b)  Other people have tried to port the entire Swift toolchain to Android<br>&gt;&gt; but that far too much work and Swift is changing too fast to make that<br>&gt;&gt; feasible. Observe the dead projects on GitHub.<br>&gt;&gt; c)  My first thought was to create a shim that routing messages from the<br>&gt;&gt; Swift app to a Java app which translated them to API calls but this has<br>&gt;&gt; bootstrapping issues and code maintenance issues.<br>&gt;&gt; d)  My second thought  is to use JNI, as it already been proven that you<br>&gt;&gt; can call C code from Swift which in turn can call Android Java code. This<br>&gt;&gt; approach require lots of bindings and a bootstrap of the Android runtime<br>&gt;&gt; and god knows how many third party libs. The java app also wants to be in<br>&gt;&gt; charge and load the JNI bindings as a so file via its LoadLibrary() call.<br>&gt;&gt; It might be easier to call Swift from Java rather than the other way round<br>&gt;&gt; if the Swift code could be built as a library. Writing JNI glue code does<br>&gt;&gt; not excite me.<br>&gt;&gt;<br>&gt;&gt;  Since I can already build Swift on Linux and ARM, I do have the ability<br>&gt;&gt; to generate an Android runnable app from Swift code. The only issue is that<br>&gt;&gt; I am using the Android NDK way of writing Android which provides access to<br>&gt;&gt; only the C++ API of Android which is far smaller API surface that the huge<br>&gt;&gt; Java API surface and its big runtime. This evolves  Swift calling an LVM<br>&gt;&gt;  module library that contains C code that call the Android NDK API which<br>&gt;&gt; bootstrap the NativeActivity class in Android (and the android runtime) and<br>&gt;&gt; from there you can access the Camera and multimedia API just not the GUI<br>&gt;&gt; widgets.<br>&gt;&gt;   This is not too soon to think about as Swift language changes are<br>&gt;&gt; supposed to be minimal until Swift 4.0. Of course Google could do the work<br>&gt;&gt; for me but I not holding my breath. You can also build Android GUI apps<br>&gt;&gt; without every referencing the Google Service API but I do notice that the<br>&gt;&gt; Google Service API is being extended because it does not require an Android<br>&gt;&gt; OS update to get new features into Android..<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Oct 13, 2016 at 5:20 PM, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I think it is too soon to tackle this issue.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think there is room for making adapters for a lightweight GUI toolkit<br>&gt;&gt;&gt; for embedded applications. For example, a Swift adapter for EFL<br>&gt;&gt;&gt; &lt;https://www.enlightenment.org/about-efl&gt; (of Enlightenment) or<br>&gt;&gt;&gt; something like that. But when we talk about Android, we are usually talking<br>&gt;&gt;&gt; about a real Android app that can be a good citizen in Google ecosystem. I<br>&gt;&gt;&gt; donâ€™t think this is feasible right now.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Current Android GUI services is too intertwined with its proprietary<br>&gt;&gt;&gt; runtime and VM and Google is continuing to tie them harder and harder to<br>&gt;&gt;&gt; its Google services API. Unless Google starts treating non-Dalvik-based<br>&gt;&gt;&gt; languages as first class citizens in Android development world, there is no<br>&gt;&gt;&gt; point in trying to make Swift usable as a GUI development language for<br>&gt;&gt;&gt; Android. It is not going to work.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Just my opinion.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Oct 13, 2016, at 2:56 PM, Tony Constantinides via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ok,<br>&gt;&gt;&gt; Can I take the fact that there no feedback yet on<br>&gt;&gt;&gt; a) The community is not interested in writing Android apps in Swift<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; b) Wrong forum despite the fact the inventor the Swift programming<br>&gt;&gt;&gt; language pointed me here,<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; c) This has been tried and failed before.<br>&gt;&gt;&gt; I sincerely interested in the Swift community thoughts and ideas. I<br>&gt;&gt;&gt; sincerely want to build this project based on the desires of the Swift<br>&gt;&gt;&gt; developers community. Let me know what you think about the proposal<br>&gt;&gt;&gt; and yes, I can present in much more detail.<br>&gt;&gt;&gt; I took the idea from this page<br>&gt;&gt;&gt; https://github.com/apple/swift/blob/master/docs/Android.md<br>&gt;&gt;&gt; Thank you<br>&gt;&gt;&gt; Sincerely yours,<br>&gt;&gt;&gt; Tony Constantinides<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Oct 12, 2016 at 5:12 PM, Tony Constantinides &lt;<br>&gt;&gt;&gt; constantinnovationsinc at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; In Swift 3.0 you can build Android apps in Linux but only console apps<br>&gt;&gt;&gt;&gt; as there is no framework to build GUI apps using JNI.<br>&gt;&gt;&gt;&gt; What I propose is to build an initial limited framework coded in C that<br>&gt;&gt;&gt;&gt; calls enough of the Java Android API via JNI to bootstrap the android app<br>&gt;&gt;&gt;&gt; and to create widgets and layouts.A default Androidmanifest.xml file and<br>&gt;&gt;&gt;&gt; some files needed to be generated to make a valid android app.<br>&gt;&gt;&gt;&gt;   The Android API java surface is vast, so this framework needs to be<br>&gt;&gt;&gt;&gt; build over many releases to be useful. Developing a graphical Android app<br>&gt;&gt;&gt;&gt; requires interaction with &quot;Activities&quot; and the package manager and some<br>&gt;&gt;&gt;&gt; widgets like Button and some layouts like &quot;RelativeLayout&quot; and<br>&gt;&gt;&gt;&gt; &quot;LinearLayout&quot;.<br>&gt;&gt;&gt;&gt;  The result will be the ability to develop GUI Android apps on Linux<br>&gt;&gt;&gt;&gt; using Swift 3.0<br>&gt;&gt;&gt;&gt; Further support for additional APIs will be provided once the basics<br>&gt;&gt;&gt;&gt; are solid..<br>&gt;&gt;&gt;&gt; Who am I: Senior Android mobile developer with more than six years<br>&gt;&gt;&gt;&gt; experience on Android.<br>&gt;&gt;&gt;&gt; Am I able to build Swift 3.0 on Linux: Yes<br>&gt;&gt;&gt;&gt; Any help, suggestions, or ideas are most welcome<br>&gt;&gt;&gt;&gt; Warms regards,<br>&gt;&gt;&gt;&gt; Tony Constantinides<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161016/e2757904/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>October 17, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Oct 16, 2016, at 1:35 PM, Tony Constantinides via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Kotlin does not run on iOS without some custom VM (Robot VM) which would kill performance.<br></p><p>If you mean RoboVM, it claims to use ahead-of-time compilation of Java to native code, so there shouldnâ€™t be much of a performance penalty. (Definitely a size penalty, though!) However, RoboVM appears to have been discontinued.<br></p><p>â€”Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161017/fb0a1889/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ad3deb66bae8cf131a987937367bf657?s=50"></div><header><strong>Build Android GUI apps with Swift 3.0 via a framework/library</strong> from <string>Tony Constantinides</string> &lt;constantinnovationsinc at gmail.com&gt;<p>October 18, 2016 at 10:00:00am</p></header><div class="content"><p>So according to the Swift Community I should adapt Kotlin and not Swift as<br>my choice for the programming language for a  cross-platform GUI framework?<br>Is that really going to be easier than building a GUI framework for Android<br>as listed on this page?<br>https://github.com/apple/swift/blob/master/docs/Android.md<br></p><p>The main technical issues I can think of when building Android Java API<br>Access is the following:<br>a) You can only call static Java methods from the NDK Main Thread in Android<br>b) If I go the Android NDK(C/C++) approach, it provides access to the C++<br>API of Android but not the Java API of Android. It bootstraps differently<br>in that you have access to a NativeActivity class but a lot of Java Android<br>is deriving from an Activity and adding your overrides. I wonder if that<br>possible doing that with JNI<br>c) You would not have access to the XML way of declaring an Android GUI but<br>will have to do everything in code (I have experience in this in Android).<br>This is not a problem just extra work<br>d) Since the Java API of Android bootstraps differently you would need to<br>add libraries to your module maps in Swift so you can bootstrap the Java VM<br>literally in Android so you have access to the Java Environment via Java<br>Native Interface.<br></p><p>Anyone else think of how to call Java API from Swift? I was thinking  a<br>bootstrap Java Android skeleton app, which receives an API via a 64 bit<br>encoded number. The number is converted into a string and passed into a<br>switch statement where the correct API call is made.<br>Any fresh ideas?<br>Sincerely yours,<br>Tony Constantinides<br></p><p><br></p><p><br></p><p><br></p><p>On Mon, Oct 17, 2016 at 9:34 AM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 16, 2016, at 1:35 PM, Tony Constantinides via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Kotlin does not run on iOS without some custom VM (Robot VM) which would<br>&gt; kill performance.<br>&gt;<br>&gt;<br>&gt; If you mean RoboVM, it claims to use ahead-of-time compilation of Java to<br>&gt; native code, so there shouldnâ€™t be much of a performance penalty.<br>&gt; (Definitely a *size* penalty, though!) However, RoboVM appears to have<br>&gt; been discontinued.<br>&gt;<br>&gt; â€”Jens<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161018/d0af0fb6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
