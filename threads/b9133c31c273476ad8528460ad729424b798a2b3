<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 23, 2016 at 09:00:00pm</p></header><div class="content"><p>Dave Abrahams via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; A couple of weeks ago we started to notice that we had some poorly-<br>named<br>&gt; closure parameters and argument labels in the standard library, so we<br>&gt; did a complete audit of the standard library&#39;s APIs and came up with a<br>&gt; preliminary proposal for changes, which we applied in a branch and you<br>&gt; can review in https://github.com/apple/swift/pull/2981.  Let&#39;s please<br>&gt; carry on further discussion here rather than in the pull request, <br>though.<br></p><p>I don&#39;t like that more clutter is added to the call site. We can surely <br>find shorter and more descriptive names. Remember that most people <br>already know what filter, map and reduce means, we don&#39;t need to explain <br>them.<br></p><p>My suggestions:<br></p><p>filter(where:)<br>map(over:)<br>reduce(applying:)<br>sort(by:)<br>forEach(do:)<br></p><p>Remember that these functions came from functional languages, where <br>function names tend to be brief, and it is considered one of their <br>advantages.<br></p><p>Data flow is an area where code becomes the less understandable when <br>more visual clutter is added. In my opinion,<br></p><p>array.filter(isEven).map(square).reduce(sum)<br></p><p>reads better than<br></p><p>array.filter(suchThatTrue: isEven).map(applyingTransformation: <br>square).reduce(accumulatingResultBy: sum)<br></p><p>What do you think?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>On 24.06.2016 0:55, Anton Zhilin via swift-evolution wrote:<br>&gt; Dave Abrahams via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;<br>&gt;&gt; A couple of weeks ago we started to notice that we had some poorly-<br>&gt; named<br>&gt;&gt; closure parameters and argument labels in the standard library, so we<br>&gt;&gt; did a complete audit of the standard library&#39;s APIs and came up with a<br>&gt;&gt; preliminary proposal for changes, which we applied in a branch and you<br>&gt;&gt; can review in https://github.com/apple/swift/pull/2981.  Let&#39;s please<br>&gt;&gt; carry on further discussion here rather than in the pull request,<br>&gt; though.<br>&gt;<br>&gt; I don&#39;t like that more clutter is added to the call site. We can surely<br>&gt; find shorter and more descriptive names. Remember that most people<br>&gt; already know what filter, map and reduce means, we don&#39;t need to explain<br>&gt; them.<br>&gt;<br>&gt; My suggestions:<br>&gt;<br>&gt; filter(where:)<br>&gt; map(over:)<br>&gt; reduce(applying:)<br>&gt; sort(by:)<br></p><p>Do you mean *sorted*(by:) ? Or I&#39;m missing something in naming rules?<br></p><p>&gt; forEach(do:)<br>&gt;<br>&gt; Remember that these functions came from functional languages, where<br>&gt; function names tend to be brief, and it is considered one of their<br>&gt; advantages.<br></p><p>+1<br></p><p>&gt;<br>&gt; Data flow is an area where code becomes the less understandable when<br>&gt; more visual clutter is added. In my opinion,<br>&gt;<br>&gt; array.filter(isEven).map(square).reduce(sum)<br>&gt;<br>&gt; reads better than<br>&gt;<br>&gt; array.filter(suchThatTrue: isEven).map(applyingTransformation:<br>&gt; square).reduce(accumulatingResultBy: sum)<br>&gt;<br>&gt; What do you think?<br></p><p>+100. I even want to brought the term-of-art argument here. IMO These <br>functions are expected to be called without any parameter names.<br></p><p> From other point, often these functions will be called with closures(i.e. <br>without parameter names at all):<br></p><p>array.filter {$0 % 2 == 0} .map {$0*$0} .reduce(0) {$0+$1}<br></p><p>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>June 25, 2016 at 12:00:00pm</p></header><div class="content"><p>Yes, I think the long names somewhat reduces the argument for keeping ‘terms of art’, as in this proposal the method names are describing themselves twice. Is the extra clarity for those who are not familiar with `filter`, `map`, `reduce` etc from other languages? Is this extra clarity actually helping — is someone going to say ‘ah it’s applying the transformation, now it makes sense’. From experience, these methods make sense after using them for the first time, not reading them in the documentation where even the longer description can feel quite abstract.<br></p><p>e.g. ‘accumulatingResultBy’ does not tell me much more than ‘reduce’, it’s probably not until they see an example or play around with it that someone new sees the utility of what it does and how it works.<br></p><p>Patrick<br></p><p>&gt; On 24 Jun 2016, at 7:55 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; array.filter(isEven).map(square).reduce(sum)<br>&gt; <br>&gt; reads better than<br>&gt; <br>&gt; array.filter(suchThatTrue: isEven).map(applyingTransformation: <br>&gt; square).reduce(accumulatingResultBy: sum)<br>&gt; <br>&gt; What do you think?<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
