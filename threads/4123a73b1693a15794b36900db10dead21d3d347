<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft]: Introducing a striding(by:) method on 3.0 ranges</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 25, 2016 at 06:00:00pm</p></header><div class="content"><p>on Mon Apr 11 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; on Sun Apr 10 2016, Michel Fortin &lt;michel.fortin-AT-michelf.ca&gt; wrote:<br>&gt;<br>&gt;&gt; So if you take this into account, storing the comparator as part of<br>&gt;&gt; the stride makes the cost more predictable: not only there is one<br>&gt;&gt; branch less in `next()`, but you avoid evaluating the condition which<br>&gt;&gt; has an unknown cost: the `stride &lt; 0` part.<br>&gt;&gt;<br>&gt;&gt; And ideally you should make sure the optimizer can replace the<br>&gt;&gt; indirect call with a direct call to the comparator. You do that by not<br>&gt;&gt; making the comparator choice dependent on a runtime value, hence why I<br>&gt;&gt; suggested having distinct &quot;down&quot; variants for the convenience<br>&gt;&gt; functions: `stride(from:downTo:by:)` and<br>&gt;&gt; `stride(from:downThrough:by:)` and `Range.strindingDown(by:)`.<br>&gt;<br>&gt; A few points:<br>&gt;<br>&gt; 1. There&#39;s a balance to be struck between making sure the optimizer can<br>&gt;    do a good job under *absolutely all circumstances*, and keeping the<br>&gt;    API surface area small and simple.  That makes me somewhat reluctant<br>&gt;    to add “down” variants, if as I suspect the optimizer does well in<br>&gt;    the vast majority of cases without them.<br>&gt;<br>&gt; 2. Similarly, I view r.striding(by: x) as redundant with stride(from: x,<br>&gt;    to: y, by: z).  I&#39;d rather not have them both.<br>&gt;<br>&gt; 3. The fact that we&#39;re migrating C-style for loops to<br>&gt;    uses of stride, as noted in https://github.com/apple/swift/pull/2125,<br>&gt;    has convinced me that, sadly, we may need an answer that doesn&#39;t<br>&gt;    involve ranges.  But maybe something like<br>&gt;<br>&gt;      for x in loop(from: 0.1, while: { $0 &lt; 10 }, next: { $0 + .2 })<br>&gt;<br>&gt;    is sufficient for this purpose.<br></p><p>After some reflection, I don&#39;t really want to see a construct like #3 in<br>the standard library, and Chris has clarified for me that the standard<br>library doesn&#39;t need to solve the migration problems created by the<br>removal of C-style “for” loops.  So, if I have inadvertently killed<br>progress on this proposal by bringing it up, please allow me to retract<br>item 3 above.  <br></p><p>I&#39;d love to see the floating-point stride thing solved for Swift 3, but<br>the window for changes is getting narrower, so if the community wants to<br>move forward with the proposal (and implementation), that would be<br>awesome.<br></p><p>Cheers,<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft]: Introducing a striding(by:) method on 3.0 ranges</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April 25, 2016 at 08:00:00pm</p></header><div class="content"><p>Yup, we&#39;re going to try to touch base, the authors of the current draft<br>that is, sometime this week. More to come, hopefully.<br></p><p><br>On Mon, Apr 25, 2016 at 8:13 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Apr 11 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; on Sun Apr 10 2016, Michel Fortin &lt;michel.fortin-AT-michelf.ca&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; So if you take this into account, storing the comparator as part of<br>&gt; &gt;&gt; the stride makes the cost more predictable: not only there is one<br>&gt; &gt;&gt; branch less in `next()`, but you avoid evaluating the condition which<br>&gt; &gt;&gt; has an unknown cost: the `stride &lt; 0` part.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; And ideally you should make sure the optimizer can replace the<br>&gt; &gt;&gt; indirect call with a direct call to the comparator. You do that by not<br>&gt; &gt;&gt; making the comparator choice dependent on a runtime value, hence why I<br>&gt; &gt;&gt; suggested having distinct &quot;down&quot; variants for the convenience<br>&gt; &gt;&gt; functions: `stride(from:downTo:by:)` and<br>&gt; &gt;&gt; `stride(from:downThrough:by:)` and `Range.strindingDown(by:)`.<br>&gt; &gt;<br>&gt; &gt; A few points:<br>&gt; &gt;<br>&gt; &gt; 1. There&#39;s a balance to be struck between making sure the optimizer can<br>&gt; &gt;    do a good job under *absolutely all circumstances*, and keeping the<br>&gt; &gt;    API surface area small and simple.  That makes me somewhat reluctant<br>&gt; &gt;    to add “down” variants, if as I suspect the optimizer does well in<br>&gt; &gt;    the vast majority of cases without them.<br>&gt; &gt;<br>&gt; &gt; 2. Similarly, I view r.striding(by: x) as redundant with stride(from: x,<br>&gt; &gt;    to: y, by: z).  I&#39;d rather not have them both.<br>&gt; &gt;<br>&gt; &gt; 3. The fact that we&#39;re migrating C-style for loops to<br>&gt; &gt;    uses of stride, as noted in https://github.com/apple/swift/pull/2125,<br>&gt; &gt;    has convinced me that, sadly, we may need an answer that doesn&#39;t<br>&gt; &gt;    involve ranges.  But maybe something like<br>&gt; &gt;<br>&gt; &gt;      for x in loop(from: 0.1, while: { $0 &lt; 10 }, next: { $0 + .2 })<br>&gt; &gt;<br>&gt; &gt;    is sufficient for this purpose.<br>&gt;<br>&gt; After some reflection, I don&#39;t really want to see a construct like #3 in<br>&gt; the standard library, and Chris has clarified for me that the standard<br>&gt; library doesn&#39;t need to solve the migration problems created by the<br>&gt; removal of C-style “for” loops.  So, if I have inadvertently killed<br>&gt; progress on this proposal by bringing it up, please allow me to retract<br>&gt; item 3 above.<br>&gt;<br>&gt; I&#39;d love to see the floating-point stride thing solved for Swift 3, but<br>&gt; the window for changes is getting narrower, so if the community wants to<br>&gt; move forward with the proposal (and implementation), that would be<br>&gt; awesome.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/e8b81c33/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft]: Introducing a striding(by:) method on 3.0 ranges</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 25, 2016 at 08:00:00pm</p></header><div class="content"><p>On Apr 25, 2016, at 7:15 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yup, we&#39;re going to try to touch base, the authors of the current draft that is, sometime this week. More to come, hopefully.<br>&gt; <br>&gt; <br>&gt; On Mon, Apr 25, 2016 at 8:13 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; After some reflection, I don&#39;t really want to see a construct like #3 in<br>&gt; the standard library, and Chris has clarified for me that the standard<br>&gt; library doesn&#39;t need to solve the migration problems created by the<br>&gt; removal of C-style “for” loops.  So, if I have inadvertently killed<br>&gt; progress on this proposal by bringing it up, please allow me to retract<br>&gt; item 3 above.<br></p><p>* Strides break down into: walks along the integer number line and walks along the floating<br>point number line. We need to fix the math<br></p><p>* For in need to work for collections, integer ranges, and strides for basic iteration.<br></p><p>* Advanced `for` work is already addressed with mapping and Kevin Ballard&#39;s proposed iterate and takeWhile<br></p><p>* Everyone but me has been traveling so getting things together has been a little hard.<br></p><p>* I have been on Nate&#39;s case a lot about what collections, strides, sequences, etc mean and should be named.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/fdc73550/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
