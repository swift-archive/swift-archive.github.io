<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 19, 2016 at 06:00:00pm</p></header><div class="content"><p>Any idea why Swift supports implicit casting to AnyHashable, but not to, say, AnySequence?<br></p><p>&gt; &gt; On Aug 18, 2016, at 9:54 AM, Adel Zhang via swift-users&lt;swift-users at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Any other situation when implicit type casting works?<br>&gt; I don&#39;t know if there&#39;s a comprehensive list anywhere. Here are the ones I can think of:<br>&gt; <br>&gt; 1. A subtype can be used where a supertype is expected; for instance, you can pass an `Int` to a parameter typed `Any` without a cast. The same is true of superclasses: `NSString` can be used where `NSObject` is expected. Obvious, but worth mentioning.<br>&gt; <br>&gt; 2. Swift 3&#39;s `AnyHashable` isn&#39;t *really* a supertype of `Hashable` types, but it&#39;s sort of treated as one.<br>&gt; <br>&gt; 3. The built-in `Array`, `Dictionary`, `Set`, and `Optional` types can be implicitly converted to the same data structure, but with supertypes of its generic parameters. For instance, an `Array&lt;Int&gt;` can be passed to a parameter of type `Array&lt;Any&gt;`. This is not a general feature of generics—it&#39;s special-cased for these types.<br>&gt; <br>&gt; 4. As you noticed, a type can be implicitly made more `Optional`; that is, `Int` converts to `Optional&lt;Int&gt;`, `Optional&lt;Optional&lt;Int&gt;&gt;`, and so on.<br>&gt; <br>&gt; 5. In Swift 2, importing Foundation activates many implicit conversions between Foundation and Standard Library types, including conversions to AnyObject. Many (perhaps all?) are gone in Swift 3. (However, Foundation still has plenty of magical `as` casts.)<br>&gt; <br>&gt; Hope this helps,<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 19, 2016 at 11:00:00am</p></header><div class="content"><p>It&#39;s mainly to support heterogeneous dictionary literals. There&#39;s not usually a need to upcast to AnySequence regularly, since most things that take sequences should be using generics, but heterogeneity and generics don&#39;t play well together.<br></p><p>Jordan<br></p><p><br>&gt; On Aug 19, 2016, at 9:00, Tim Vermeulen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Any idea why Swift supports implicit casting to AnyHashable, but not to, say, AnySequence?<br>&gt; <br>&gt;&gt;&gt; On Aug 18, 2016, at 9:54 AM, Adel Zhang via swift-users&lt;swift-users at swift.org&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any other situation when implicit type casting works?<br>&gt;&gt; I don&#39;t know if there&#39;s a comprehensive list anywhere. Here are the ones I can think of:<br>&gt;&gt; <br>&gt;&gt; 1. A subtype can be used where a supertype is expected; for instance, you can pass an `Int` to a parameter typed `Any` without a cast. The same is true of superclasses: `NSString` can be used where `NSObject` is expected. Obvious, but worth mentioning.<br>&gt;&gt; <br>&gt;&gt; 2. Swift 3&#39;s `AnyHashable` isn&#39;t *really* a supertype of `Hashable` types, but it&#39;s sort of treated as one.<br>&gt;&gt; <br>&gt;&gt; 3. The built-in `Array`, `Dictionary`, `Set`, and `Optional` types can be implicitly converted to the same data structure, but with supertypes of its generic parameters. For instance, an `Array&lt;Int&gt;` can be passed to a parameter of type `Array&lt;Any&gt;`. This is not a general feature of generics—it&#39;s special-cased for these types.<br>&gt;&gt; <br>&gt;&gt; 4. As you noticed, a type can be implicitly made more `Optional`; that is, `Int` converts to `Optional&lt;Int&gt;`, `Optional&lt;Optional&lt;Int&gt;&gt;`, and so on.<br>&gt;&gt; <br>&gt;&gt; 5. In Swift 2, importing Foundation activates many implicit conversions between Foundation and Standard Library types, including conversions to AnyObject. Many (perhaps all?) are gone in Swift 3. (However, Foundation still has plenty of magical `as` casts.)<br>&gt;&gt; <br>&gt;&gt; Hope this helps,<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160819/44c5502d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 19, 2016 at 11:00:00am</p></header><div class="content"><p>It&#39;s mainly to support heterogeneous dictionary literals. There&#39;s not usually a need to upcast to AnySequence regularly, since most things that take sequences should be using generics, but heterogeneity and generics don&#39;t play well together.<br></p><p>Jordan<br></p><p><br>&gt; On Aug 19, 2016, at 9:00, Tim Vermeulen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; Any idea why Swift supports implicit casting to AnyHashable, but not to, say, AnySequence?<br>&gt; <br>&gt;&gt;&gt; On Aug 18, 2016, at 9:54 AM, Adel Zhang via swift-users&lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any other situation when implicit type casting works?<br>&gt;&gt; I don&#39;t know if there&#39;s a comprehensive list anywhere. Here are the ones I can think of:<br>&gt;&gt; <br>&gt;&gt; 1. A subtype can be used where a supertype is expected; for instance, you can pass an `Int` to a parameter typed `Any` without a cast. The same is true of superclasses: `NSString` can be used where `NSObject` is expected. Obvious, but worth mentioning.<br>&gt;&gt; <br>&gt;&gt; 2. Swift 3&#39;s `AnyHashable` isn&#39;t *really* a supertype of `Hashable` types, but it&#39;s sort of treated as one.<br>&gt;&gt; <br>&gt;&gt; 3. The built-in `Array`, `Dictionary`, `Set`, and `Optional` types can be implicitly converted to the same data structure, but with supertypes of its generic parameters. For instance, an `Array&lt;Int&gt;` can be passed to a parameter of type `Array&lt;Any&gt;`. This is not a general feature of generics—it&#39;s special-cased for these types.<br>&gt;&gt; <br>&gt;&gt; 4. As you noticed, a type can be implicitly made more `Optional`; that is, `Int` converts to `Optional&lt;Int&gt;`, `Optional&lt;Optional&lt;Int&gt;&gt;`, and so on.<br>&gt;&gt; <br>&gt;&gt; 5. In Swift 2, importing Foundation activates many implicit conversions between Foundation and Standard Library types, including conversions to AnyObject. Many (perhaps all?) are gone in Swift 3. (However, Foundation still has plenty of magical `as` casts.)<br>&gt;&gt; <br>&gt;&gt; Hope this helps,<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160819/8003ad77/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>August 25, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 19 Aug 2016, at 18:00, Tim Vermeulen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Any idea why Swift supports implicit casting to AnyHashable, but not to, say, AnySequence?<br>&gt; <br></p><p>It’s a hack until existential support gets better. Explicitly casting to AnyHashable clutters your dictionary literals.<br></p><p>There’s a fair amount of code in the compiler to support it, it’s probably just not worth the effort for other types (and since they were never anything else, nothing has regressed for them as it did for AnyHashable).<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
