<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d56214606b5cc60e5cf1e2bc91add3?s=50"></div><header><strong>Proposal: Keep var on Function Parameters and Pattern Matching</strong> from <string>Francisco Costa</string> &lt;phelgo at gmail.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>Hello all,<br></p><p>There is currently a proposal to remove `var` from Function Parameters and<br>Pattern Matching which seems to have been already accepted<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md<br></p><p>I cannot find the discussion on it, probably because it predates the open<br>sourcing of Swift. While some of its arguments may sound reasonable, I<br>think they have been greatly exaggerated.<br></p><p>The main point of the proposal seems to be that the `var` attribute can be<br>easily confused with `inout`.  It then provides examples where `var` would<br>be completely useless:<br></p><p>```<br>func foo(i: Int) {<br>  i += 1 // Illegal<br>}<br></p><p>func foo(var i: Int) {<br>  i += 1 // Legal but useless since we are not using this local value<br>anywhere<br>}<br>```<br></p><p>We today made a quick survey around the backend developers on the office<br>(not familiar with Swift) and not a single one suggested that the second<br>method would mutate the original parameter value. In fact, to all of them<br>it was clear that `var` creates a local copy of the value and that the<br>method is also missing a `return` if we want to use the incremented value.<br></p><p>The Swift Language Guide gives a good explanation on this as well:<br></p><p>&quot;Variable parameters ... give a new modifiable copy of the parameter’s<br>value for your function to work with.&quot;<br></p><p>This is probably a concept most beginners to the language can either guess<br>intuitively or learn in a couple of seconds.<br></p><p>Especially taking into account that the way we use `inout` parameters is so<br>much advertised in Swift, to the point where calling a method with them<br>requires to explicitly identify them with `&amp;`, it seems that by giving up<br>the `var` attribute we would lose a convenient elegance in exchange for no<br>real benefit to beginners.<br></p><p>In fact, in my experience the `var` attribute is most often used in<br>scenarios where immutability is intentionally preserved, we pass a<br>immutable value to a method and it returns another immutable (modified)<br>version of that value.<br></p><p>Another common scenario is when you need to further modify a value that was<br>unwrapped from an Optional. I would argue that this seems elegant and easy<br>to read:<br></p><p>```<br>if var x = getOptionalInt() {<br>  x += 1<br>  return x<br>}<br>```<br></p><p>While this (as has been proposed) seems like we are fighting a language<br>limitation:<br></p><p>```<br>if let x = getOptionalInt() {<br>  var x = x<br>  x += 1<br>  return x<br>}<br>```<br></p><p>I understand that discussing back and forth proposals that have been<br>already accepted is counter-productive, but since this discussion doesn&#39;t<br>seem to have been published, I would kindly ask if we can give it a second<br>thought :)<br></p><p>Thanks,<br>Francisco<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/f6b668e2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5c9df42e3c293e3cdb5f3e1b34d44ef9?s=50"></div><header><strong>Proposal: Keep var on Function Parameters and Pattern Matching</strong> from <string>Step C</string> &lt;schristopher at bignerdranch.com&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>While we were discussing this proposal, a team member objected saying he<br>had fixed a bug related to using `var` this summer. It turned out he had<br>actually fixed the bug by switching to `inout` _from_ `var`. This is an<br>experienced dev with plenty of resources and Swift knowledge.<br></p><p>So yes, it is not only possible but has definitely happened that this<br>confusion exists for some developers. We were surprised but group<br>conclusion was it validated the proposal. I was ambivalent on the proposal<br>initially, but overall I think it is the right direction for Swift.<br></p><p>Step Christopher<br>Big Nerd Ranch, LLC<br>schristopher at bignerdranch.com<br></p><p><br>On Tue, Dec 15, 2015 at 5:27 PM, Francisco Costa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello all,<br>&gt;<br>&gt; There is currently a proposal to remove `var` from Function Parameters and<br>&gt; Pattern Matching which seems to have been already accepted<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md<br>&gt;<br>&gt; I cannot find the discussion on it, probably because it predates the open<br>&gt; sourcing of Swift. While some of its arguments may sound reasonable, I<br>&gt; think they have been greatly exaggerated.<br>&gt;<br>&gt; The main point of the proposal seems to be that the `var` attribute can be<br>&gt; easily confused with `inout`.  It then provides examples where `var` would<br>&gt; be completely useless:<br>&gt;<br>&gt; ```<br>&gt; func foo(i: Int) {<br>&gt;   i += 1 // Illegal<br>&gt; }<br>&gt;<br>&gt; func foo(var i: Int) {<br>&gt;   i += 1 // Legal but useless since we are not using this local value<br>&gt; anywhere<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; We today made a quick survey around the backend developers on the office<br>&gt; (not familiar with Swift) and not a single one suggested that the second<br>&gt; method would mutate the original parameter value. In fact, to all of them<br>&gt; it was clear that `var` creates a local copy of the value and that the<br>&gt; method is also missing a `return` if we want to use the incremented value.<br>&gt;<br>&gt; The Swift Language Guide gives a good explanation on this as well:<br>&gt;<br>&gt; &quot;Variable parameters ... give a new modifiable copy of the parameter’s<br>&gt; value for your function to work with.&quot;<br>&gt;<br>&gt; This is probably a concept most beginners to the language can either guess<br>&gt; intuitively or learn in a couple of seconds.<br>&gt;<br>&gt; Especially taking into account that the way we use `inout` parameters is<br>&gt; so much advertised in Swift, to the point where calling a method with them<br>&gt; requires to explicitly identify them with `&amp;`, it seems that by giving up<br>&gt; the `var` attribute we would lose a convenient elegance in exchange for no<br>&gt; real benefit to beginners.<br>&gt;<br>&gt; In fact, in my experience the `var` attribute is most often used in<br>&gt; scenarios where immutability is intentionally preserved, we pass a<br>&gt; immutable value to a method and it returns another immutable (modified)<br>&gt; version of that value.<br>&gt;<br>&gt; Another common scenario is when you need to further modify a value that<br>&gt; was unwrapped from an Optional. I would argue that this seems elegant and<br>&gt; easy to read:<br>&gt;<br>&gt; ```<br>&gt; if var x = getOptionalInt() {<br>&gt;   x += 1<br>&gt;   return x<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; While this (as has been proposed) seems like we are fighting a language<br>&gt; limitation:<br>&gt;<br>&gt; ```<br>&gt; if let x = getOptionalInt() {<br>&gt;   var x = x<br>&gt;   x += 1<br>&gt;   return x<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; I understand that discussing back and forth proposals that have been<br>&gt; already accepted is counter-productive, but since this discussion doesn&#39;t<br>&gt; seem to have been published, I would kindly ask if we can give it a second<br>&gt; thought :)<br>&gt;<br>&gt; Thanks,<br>&gt; Francisco<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/bcf84f6f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d56214606b5cc60e5cf1e2bc91add3?s=50"></div><header><strong>Proposal: Keep var on Function Parameters and Pattern Matching</strong> from <string>Francisco Costa</string> &lt;phelgo at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>Thanks Stephen for the insight!<br></p><p>The way Swift prevents us from inadvertently writing common bugs is one of<br>the many things that makes it great, and I absolutely agree that this<br>confusion must be handled. However I would still prefer if this would be<br>less aggressively fixed with a warning telling us when a struct has been<br>copied but the new value has not been returned or used in the outer scope,<br>rather than removing the feature entirely. How hard it would be to<br>implement such a warning I am not sure though.<br></p><p>Francisco<br></p><p><br>On Wed, Dec 16, 2015 at 12:29 AM, Stephen Christopher &lt;<br>schristopher at bignerdranch.com&gt; wrote:<br></p><p>&gt; While we were discussing this proposal, a team member objected saying he<br>&gt; had fixed a bug related to using `var` this summer. It turned out he had<br>&gt; actually fixed the bug by switching to `inout` _from_ `var`. This is an<br>&gt; experienced dev with plenty of resources and Swift knowledge.<br>&gt;<br>&gt; So yes, it is not only possible but has definitely happened that this<br>&gt; confusion exists for some developers. We were surprised but group<br>&gt; conclusion was it validated the proposal. I was ambivalent on the proposal<br>&gt; initially, but overall I think it is the right direction for Swift.<br>&gt;<br>&gt; Step Christopher<br>&gt; Big Nerd Ranch, LLC<br>&gt; schristopher at bignerdranch.com<br>&gt;<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 5:27 PM, Francisco Costa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello all,<br>&gt;&gt;<br>&gt;&gt; There is currently a proposal to remove `var` from Function Parameters<br>&gt;&gt; and Pattern Matching which seems to have been already accepted<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md<br>&gt;&gt;<br>&gt;&gt; I cannot find the discussion on it, probably because it predates the open<br>&gt;&gt; sourcing of Swift. While some of its arguments may sound reasonable, I<br>&gt;&gt; think they have been greatly exaggerated.<br>&gt;&gt;<br>&gt;&gt; The main point of the proposal seems to be that the `var` attribute can<br>&gt;&gt; be easily confused with `inout`.  It then provides examples where `var`<br>&gt;&gt; would be completely useless:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; func foo(i: Int) {<br>&gt;&gt;   i += 1 // Illegal<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; func foo(var i: Int) {<br>&gt;&gt;   i += 1 // Legal but useless since we are not using this local value<br>&gt;&gt; anywhere<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; We today made a quick survey around the backend developers on the office<br>&gt;&gt; (not familiar with Swift) and not a single one suggested that the second<br>&gt;&gt; method would mutate the original parameter value. In fact, to all of them<br>&gt;&gt; it was clear that `var` creates a local copy of the value and that the<br>&gt;&gt; method is also missing a `return` if we want to use the incremented value.<br>&gt;&gt;<br>&gt;&gt; The Swift Language Guide gives a good explanation on this as well:<br>&gt;&gt;<br>&gt;&gt; &quot;Variable parameters ... give a new modifiable copy of the parameter’s<br>&gt;&gt; value for your function to work with.&quot;<br>&gt;&gt;<br>&gt;&gt; This is probably a concept most beginners to the language can either<br>&gt;&gt; guess intuitively or learn in a couple of seconds.<br>&gt;&gt;<br>&gt;&gt; Especially taking into account that the way we use `inout` parameters is<br>&gt;&gt; so much advertised in Swift, to the point where calling a method with them<br>&gt;&gt; requires to explicitly identify them with `&amp;`, it seems that by giving up<br>&gt;&gt; the `var` attribute we would lose a convenient elegance in exchange for no<br>&gt;&gt; real benefit to beginners.<br>&gt;&gt;<br>&gt;&gt; In fact, in my experience the `var` attribute is most often used in<br>&gt;&gt; scenarios where immutability is intentionally preserved, we pass a<br>&gt;&gt; immutable value to a method and it returns another immutable (modified)<br>&gt;&gt; version of that value.<br>&gt;&gt;<br>&gt;&gt; Another common scenario is when you need to further modify a value that<br>&gt;&gt; was unwrapped from an Optional. I would argue that this seems elegant and<br>&gt;&gt; easy to read:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; if var x = getOptionalInt() {<br>&gt;&gt;   x += 1<br>&gt;&gt;   return x<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; While this (as has been proposed) seems like we are fighting a language<br>&gt;&gt; limitation:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; if let x = getOptionalInt() {<br>&gt;&gt;   var x = x<br>&gt;&gt;   x += 1<br>&gt;&gt;   return x<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; I understand that discussing back and forth proposals that have been<br>&gt;&gt; already accepted is counter-productive, but since this discussion doesn&#39;t<br>&gt;&gt; seem to have been published, I would kindly ask if we can give it a second<br>&gt;&gt; thought :)<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Francisco<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/c112a3a6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4de621aec7ff90a03f5b9b21e790bc66?s=50"></div><header><strong>Proposal: Keep var on Function Parameters and Pattern Matching</strong> from <string>Dennis Lysenko</string> &lt;dennis.s.lysenko at gmail.com&gt;<p>December 16, 2015 at 02:00:00am</p></header><div class="content"><p>Francisco,<br></p><p>Can you run the same survey with an example that uses a struct called<br>&quot;Song&quot; instead? I think the confusion would lie in complex value types. Int<br>may be an unideal example.<br></p><p>On Tue, Dec 15, 2015, 5:27 PM Francisco Costa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello all,<br>&gt;<br>&gt; There is currently a proposal to remove `var` from Function Parameters and<br>&gt; Pattern Matching which seems to have been already accepted<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md<br>&gt;<br>&gt; I cannot find the discussion on it, probably because it predates the open<br>&gt; sourcing of Swift. While some of its arguments may sound reasonable, I<br>&gt; think they have been greatly exaggerated.<br>&gt;<br>&gt; The main point of the proposal seems to be that the `var` attribute can be<br>&gt; easily confused with `inout`.  It then provides examples where `var` would<br>&gt; be completely useless:<br>&gt;<br>&gt; ```<br>&gt; func foo(i: Int) {<br>&gt;   i += 1 // Illegal<br>&gt; }<br>&gt;<br>&gt; func foo(var i: Int) {<br>&gt;   i += 1 // Legal but useless since we are not using this local value<br>&gt; anywhere<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; We today made a quick survey around the backend developers on the office<br>&gt; (not familiar with Swift) and not a single one suggested that the second<br>&gt; method would mutate the original parameter value. In fact, to all of them<br>&gt; it was clear that `var` creates a local copy of the value and that the<br>&gt; method is also missing a `return` if we want to use the incremented value.<br>&gt;<br>&gt; The Swift Language Guide gives a good explanation on this as well:<br>&gt;<br>&gt; &quot;Variable parameters ... give a new modifiable copy of the parameter’s<br>&gt; value for your function to work with.&quot;<br>&gt;<br>&gt; This is probably a concept most beginners to the language can either guess<br>&gt; intuitively or learn in a couple of seconds.<br>&gt;<br>&gt; Especially taking into account that the way we use `inout` parameters is<br>&gt; so much advertised in Swift, to the point where calling a method with them<br>&gt; requires to explicitly identify them with `&amp;`, it seems that by giving up<br>&gt; the `var` attribute we would lose a convenient elegance in exchange for no<br>&gt; real benefit to beginners.<br>&gt;<br>&gt; In fact, in my experience the `var` attribute is most often used in<br>&gt; scenarios where immutability is intentionally preserved, we pass a<br>&gt; immutable value to a method and it returns another immutable (modified)<br>&gt; version of that value.<br>&gt;<br>&gt; Another common scenario is when you need to further modify a value that<br>&gt; was unwrapped from an Optional. I would argue that this seems elegant and<br>&gt; easy to read:<br>&gt;<br>&gt; ```<br>&gt; if var x = getOptionalInt() {<br>&gt;   x += 1<br>&gt;   return x<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; While this (as has been proposed) seems like we are fighting a language<br>&gt; limitation:<br>&gt;<br>&gt; ```<br>&gt; if let x = getOptionalInt() {<br>&gt;   var x = x<br>&gt;   x += 1<br>&gt;   return x<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; I understand that discussing back and forth proposals that have been<br>&gt; already accepted is counter-productive, but since this discussion doesn&#39;t<br>&gt; seem to have been published, I would kindly ask if we can give it a second<br>&gt; thought :)<br>&gt;<br>&gt; Thanks,<br>&gt; Francisco<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/af2fb0e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>Proposal: Keep var on Function Parameters and Pattern Matching</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>December 16, 2015 at 11:00:00am</p></header><div class="content"><p>While I think it&#39;s good to loose `var` for parameters, the different semantics for Structs and Classes can be confusing sometimes. It is not always obvious at caller site, whether you are passing a Struct or a Class instance, and therefore whether the call will alter the instance at caller site.<br></p><p><br>On 16.12.2015, at 03:33, Dennis Lysenko via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>Francisco,<br></p><p>Can you run the same survey with an example that uses a struct called &quot;Song&quot; instead? I think the confusion would lie in complex value types. Int may be an unideal example.<br></p><p>On Tue, Dec 15, 2015, 5:27 PM Francisco Costa via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>Hello all,<br></p><p>There is currently a proposal to remove `var` from Function Parameters and Pattern Matching which seems to have been already accepted<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md<br></p><p>I cannot find the discussion on it, probably because it predates the open sourcing of Swift. While some of its arguments may sound reasonable, I think they have been greatly exaggerated.<br></p><p>The main point of the proposal seems to be that the `var` attribute can be easily confused with `inout`.  It then provides examples where `var` would be completely useless:<br></p><p>```<br>func foo(i: Int) {<br>  i += 1 // Illegal<br>}<br></p><p>func foo(var i: Int) {<br>  i += 1 // Legal but useless since we are not using this local value anywhere<br>}<br>```<br></p><p>We today made a quick survey around the backend developers on the office (not familiar with Swift) and not a single one suggested that the second method would mutate the original parameter value. In fact, to all of them it was clear that `var` creates a local copy of the value and that the method is also missing a `return` if we want to use the incremented value.<br></p><p>The Swift Language Guide gives a good explanation on this as well:<br></p><p>&quot;Variable parameters ... give a new modifiable copy of the parameter’s value for your function to work with.&quot;<br></p><p>This is probably a concept most beginners to the language can either guess intuitively or learn in a couple of seconds.<br></p><p>Especially taking into account that the way we use `inout` parameters is so much advertised in Swift, to the point where calling a method with them requires to explicitly identify them with `&amp;`, it seems that by giving up the `var` attribute we would lose a convenient elegance in exchange for no real benefit to beginners.<br></p><p>In fact, in my experience the `var` attribute is most often used in scenarios where immutability is intentionally preserved, we pass a immutable value to a method and it returns another immutable (modified) version of that value.<br></p><p>Another common scenario is when you need to further modify a value that was unwrapped from an Optional. I would argue that this seems elegant and easy to read:<br></p><p>```<br>if var x = getOptionalInt() {<br>  x += 1<br>  return x<br>}<br>```<br></p><p>While this (as has been proposed) seems like we are fighting a language limitation:<br></p><p>```<br>if let x = getOptionalInt() {<br>  var x = x<br>  x += 1<br>  return x<br>}<br>```<br></p><p>I understand that discussing back and forth proposals that have been already accepted is counter-productive, but since this discussion doesn&#39;t seem to have been published, I would kindly ask if we can give it a second thought :)<br></p><p>Thanks,<br>Francisco<br></p><p> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br> _______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/d93b69c7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d56214606b5cc60e5cf1e2bc91add3?s=50"></div><header><strong>Proposal: Keep var on Function Parameters and Pattern Matching</strong> from <string>Francisco Costa</string> &lt;phelgo at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>Thanks Dennis, you have a great point there! Int is intuitively thought to<br>be passed as a value in most languages.<br></p><p>Out of curiosity I made a quick poll based on your suggestion<br></p><p>https://twitter.com/phelgo/status/677047198824202241<br></p><p>Lets see what answers do we get<br></p><p>Francisco<br></p><p><br>On Wed, Dec 16, 2015 at 3:33 AM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com&gt;<br>wrote:<br></p><p>&gt; Francisco,<br>&gt;<br>&gt; Can you run the same survey with an example that uses a struct called<br>&gt; &quot;Song&quot; instead? I think the confusion would lie in complex value types. Int<br>&gt; may be an unideal example.<br>&gt;<br>&gt; On Tue, Dec 15, 2015, 5:27 PM Francisco Costa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello all,<br>&gt;&gt;<br>&gt;&gt; There is currently a proposal to remove `var` from Function Parameters<br>&gt;&gt; and Pattern Matching which seems to have been already accepted<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters-patterns.md<br>&gt;&gt;<br>&gt;&gt; I cannot find the discussion on it, probably because it predates the open<br>&gt;&gt; sourcing of Swift. While some of its arguments may sound reasonable, I<br>&gt;&gt; think they have been greatly exaggerated.<br>&gt;&gt;<br>&gt;&gt; The main point of the proposal seems to be that the `var` attribute can<br>&gt;&gt; be easily confused with `inout`.  It then provides examples where `var`<br>&gt;&gt; would be completely useless:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; func foo(i: Int) {<br>&gt;&gt;   i += 1 // Illegal<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; func foo(var i: Int) {<br>&gt;&gt;   i += 1 // Legal but useless since we are not using this local value<br>&gt;&gt; anywhere<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; We today made a quick survey around the backend developers on the office<br>&gt;&gt; (not familiar with Swift) and not a single one suggested that the second<br>&gt;&gt; method would mutate the original parameter value. In fact, to all of them<br>&gt;&gt; it was clear that `var` creates a local copy of the value and that the<br>&gt;&gt; method is also missing a `return` if we want to use the incremented value.<br>&gt;&gt;<br>&gt;&gt; The Swift Language Guide gives a good explanation on this as well:<br>&gt;&gt;<br>&gt;&gt; &quot;Variable parameters ... give a new modifiable copy of the parameter’s<br>&gt;&gt; value for your function to work with.&quot;<br>&gt;&gt;<br>&gt;&gt; This is probably a concept most beginners to the language can either<br>&gt;&gt; guess intuitively or learn in a couple of seconds.<br>&gt;&gt;<br>&gt;&gt; Especially taking into account that the way we use `inout` parameters is<br>&gt;&gt; so much advertised in Swift, to the point where calling a method with them<br>&gt;&gt; requires to explicitly identify them with `&amp;`, it seems that by giving up<br>&gt;&gt; the `var` attribute we would lose a convenient elegance in exchange for no<br>&gt;&gt; real benefit to beginners.<br>&gt;&gt;<br>&gt;&gt; In fact, in my experience the `var` attribute is most often used in<br>&gt;&gt; scenarios where immutability is intentionally preserved, we pass a<br>&gt;&gt; immutable value to a method and it returns another immutable (modified)<br>&gt;&gt; version of that value.<br>&gt;&gt;<br>&gt;&gt; Another common scenario is when you need to further modify a value that<br>&gt;&gt; was unwrapped from an Optional. I would argue that this seems elegant and<br>&gt;&gt; easy to read:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; if var x = getOptionalInt() {<br>&gt;&gt;   x += 1<br>&gt;&gt;   return x<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; While this (as has been proposed) seems like we are fighting a language<br>&gt;&gt; limitation:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; if let x = getOptionalInt() {<br>&gt;&gt;   var x = x<br>&gt;&gt;   x += 1<br>&gt;&gt;   return x<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; I understand that discussing back and forth proposals that have been<br>&gt;&gt; already accepted is counter-productive, but since this discussion doesn&#39;t<br>&gt;&gt; seem to have been published, I would kindly ask if we can give it a second<br>&gt;&gt; thought :)<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Francisco<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/ee33a436/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
