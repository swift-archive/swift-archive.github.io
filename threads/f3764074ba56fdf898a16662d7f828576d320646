<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>July 28, 2016 at 09:00:00pm</p></header><div class="content"><p>How are arrays passed to C in Linux ? I tried unwrapping an optional array<br>in an if statment and passing it to c. it seemed like the array was<br>deallocated however if I stored it in a local var in the function before<br>the if statment it worked perfectly fine, sureley this shouldn&#39;t work<br>either ?<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160728/f3760646/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 28, 2016 at 01:00:00pm</p></header><div class="content"><p>On Thu, Jul 28, 2016 at 1:27 PM, James Campbell via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; How are arrays passed to C in Linux ? I tried unwrapping an optional array<br>&gt; in an if statment and passing it to c. it seemed like the array was<br>&gt; deallocated however if I stored it in a local var in the function before the<br>&gt; if statment it worked perfectly fine, sureley this shouldn&#39;t work either ?<br></p><p>Would you mind pasting the code example?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>July 29, 2016 at 08:00:00am</p></header><div class="content"><p>So this:<br></p><p>if let data = someArrayGeneratingFunction() {<br>  cFunction(UnsafeMutablePointer(data))<br>}<br></p><p>Has issues with the array passed to c getting corrupted, but this doesn&#39;t:<br></p><p>let data = someArrayGeneratingFunction()<br></p><p>if let data = data {<br>  cFunction(UnsafeMutablePointer(data))<br>}<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 28 July 2016 at 21:32, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Thu, Jul 28, 2016 at 1:27 PM, James Campbell via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt; How are arrays passed to C in Linux ? I tried unwrapping an optional<br>&gt; array<br>&gt; &gt; in an if statment and passing it to c. it seemed like the array was<br>&gt; &gt; deallocated however if I stored it in a local var in the function before<br>&gt; the<br>&gt; &gt; if statment it worked perfectly fine, sureley this shouldn&#39;t work either<br>&gt; ?<br>&gt;<br>&gt; Would you mind pasting the code example?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160729/34d25903/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 29, 2016 at 01:00:00am</p></header><div class="content"><p>On Fri, Jul 29, 2016 at 12:55 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; So this:<br>&gt;<br>&gt; if let data = someArrayGeneratingFunction() {<br>&gt;   cFunction(UnsafeMutablePointer(data))<br>&gt; }<br>&gt;<br>&gt; Has issues with the array passed to c getting corrupted, but this doesn&#39;t:<br>&gt;<br>&gt; let data = someArrayGeneratingFunction()<br>&gt;<br>&gt; if let data = data {<br>&gt;   cFunction(UnsafeMutablePointer(data))<br>&gt; }<br></p><p>Neither piece of code is guaranteed to work.  (You are just getting<br>lucky that the second one happens to work.)  Array-to-pointer<br>conversion only extends the lifetime of the array until the immediate<br>function call returns.  So after UnsafeMutablePointer(data) returns,<br>the array can be freed.<br></p><p>Use someArrayGeneratingFunction.withUnsafeMutableBuffer { ... } instead.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>July 29, 2016 at 09:00:00am</p></header><div class="content"><p>​Do you know of any resources to brush up on the pointer aspect of swift ? ​<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 29 July 2016 at 09:10, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Jul 29, 2016 at 12:55 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt; wrote:<br>&gt; &gt; So this:<br>&gt; &gt;<br>&gt; &gt; if let data = someArrayGeneratingFunction() {<br>&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Has issues with the array passed to c getting corrupted, but this<br>&gt; doesn&#39;t:<br>&gt; &gt;<br>&gt; &gt; let data = someArrayGeneratingFunction()<br>&gt; &gt;<br>&gt; &gt; if let data = data {<br>&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt; &gt; }<br>&gt;<br>&gt; Neither piece of code is guaranteed to work.  (You are just getting<br>&gt; lucky that the second one happens to work.)  Array-to-pointer<br>&gt; conversion only extends the lifetime of the array until the immediate<br>&gt; function call returns.  So after UnsafeMutablePointer(data) returns,<br>&gt; the array can be freed.<br>&gt;<br>&gt; Use someArrayGeneratingFunction.withUnsafeMutableBuffer { ... } instead.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160729/cbed2ad2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>Have you read<br>https://developer.apple.com/library/tvos/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID17<br> ?<br></p><p>Zhaoxin<br></p><p>On Fri, Jul 29, 2016 at 4:55 PM, James Campbell via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; ​Do you know of any resources to brush up on the pointer aspect of swift ?<br>&gt; ​<br>&gt;<br>&gt; *___________________________________*<br>&gt;<br>&gt; *James⎥Head of Trolls*<br>&gt;<br>&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt; &lt;http://supmenow.com&gt;*<br>&gt;<br>&gt; *Sup*<br>&gt;<br>&gt; *Runway East *<br>&gt;<br>&gt; *10 Finsbury Square*<br>&gt;<br>&gt; *London*<br>&gt;<br>&gt; * EC2A 1AF *<br>&gt;<br>&gt; On 29 July 2016 at 09:10, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Jul 29, 2016 at 12:55 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt; So this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; if let data = someArrayGeneratingFunction() {<br>&gt;&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Has issues with the array passed to c getting corrupted, but this<br>&gt;&gt; doesn&#39;t:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let data = someArrayGeneratingFunction()<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; if let data = data {<br>&gt;&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt;&gt; &gt; }<br>&gt;&gt;<br>&gt;&gt; Neither piece of code is guaranteed to work.  (You are just getting<br>&gt;&gt; lucky that the second one happens to work.)  Array-to-pointer<br>&gt;&gt; conversion only extends the lifetime of the array until the immediate<br>&gt;&gt; function call returns.  So after UnsafeMutablePointer(data) returns,<br>&gt;&gt; the array can be freed.<br>&gt;&gt;<br>&gt;&gt; Use someArrayGeneratingFunction.withUnsafeMutableBuffer { ... } instead.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160729/c1695d72/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>July 29, 2016 at 11:00:00am</p></header><div class="content"><p>No I haven&#39;t thats a big help thank you !<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 29 July 2016 at 10:40, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; Have you read<br>&gt; https://developer.apple.com/library/tvos/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID17<br>&gt;  ?<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Fri, Jul 29, 2016 at 4:55 PM, James Campbell via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; ​Do you know of any resources to brush up on the pointer aspect of swift<br>&gt;&gt; ? ​<br>&gt;&gt;<br>&gt;&gt; *___________________________________*<br>&gt;&gt;<br>&gt;&gt; *James⎥Head of Trolls*<br>&gt;&gt;<br>&gt;&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt;&gt; &lt;http://supmenow.com&gt;*<br>&gt;&gt;<br>&gt;&gt; *Sup*<br>&gt;&gt;<br>&gt;&gt; *Runway East *<br>&gt;&gt;<br>&gt;&gt; *10 Finsbury Square*<br>&gt;&gt;<br>&gt;&gt; *London*<br>&gt;&gt;<br>&gt;&gt; * EC2A 1AF *<br>&gt;&gt;<br>&gt;&gt; On 29 July 2016 at 09:10, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 29, 2016 at 12:55 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt; So this:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; if let data = someArrayGeneratingFunction() {<br>&gt;&gt;&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Has issues with the array passed to c getting corrupted, but this<br>&gt;&gt;&gt; doesn&#39;t:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; let data = someArrayGeneratingFunction()<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; if let data = data {<br>&gt;&gt;&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Neither piece of code is guaranteed to work.  (You are just getting<br>&gt;&gt;&gt; lucky that the second one happens to work.)  Array-to-pointer<br>&gt;&gt;&gt; conversion only extends the lifetime of the array until the immediate<br>&gt;&gt;&gt; function call returns.  So after UnsafeMutablePointer(data) returns,<br>&gt;&gt;&gt; the array can be freed.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Use someArrayGeneratingFunction.withUnsafeMutableBuffer { ... } instead.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160729/4bafdc2d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b7513b7d11e2aa623380d671875fa080?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>Chris McIntyre</string> &lt;cmcintyre3600 at gmail.com&gt;<p>July 29, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi guys, <br></p><p>I’m having issues with Swift pointers. I feel like the Interactive With C APis document only gets you half way there. <br></p><p>For example, look at this from the docs<br></p><p>If you have declared a function like this one:<br></p><p>func takesAMutablePointer(x: UnsafeMutablePointer&lt;Float&gt;) {<br>    // ...<br>}<br>You can call it in any of the following ways:<br></p><p>var x: Float = 0.0<br>var p: UnsafeMutablePointer&lt;Float&gt; = nil<br>var a: [Float] = [1.0, 2.0, 3.0]<br>takesAMutablePointer(nil)<br>takesAMutablePointer(p)<br>takesAMutablePointer(&amp;x)<br>takesAMutablePointer(&amp;a)<br>Seem simple enough. But then I was trying to figure out Core Data validation, which takes an AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt; and I can’t figure out what to pass to it. <br></p><p>I tried to create a simple test in a Playground:<br></p><p>func takesAPointer(p: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;){<br>    return<br>}<br></p><p>var myString = &quot;Hello&quot;<br></p><p>takesAPointer(p: &amp;myString)<br></p><p>Then I get an error stating &#39;Cannot pass immutable type “AnyObject?” as inout argument’. <br></p><p>Everything seems to match the example from the docs. I have a var (so it should be mutable) and I’m using the ampersand, but still I’m getting an error. <br></p><p>Another problem. I have a specific byte pattern I want to create. For arguments sake, lets call it 0x123ABC, and I have it as an Int. I want to access the individual bytes (i.e. 12, 3A, BC). <br></p><p>The struct reference for UnsafePointer&lt;T&gt; doesn’t talk much about initializing it. Most of the initializers take a pointer. I tried the init(_ bitPattern:) initializer, and was able to create a pointer, but it seemed to point to the address 0x123ABC rather than the address *of* 0x123ABC. I tried creating a buffer with malloc, and it gives me an UnsafeMutablePointer  but now I can’t figure out how to copy my bytes to this buffer.<br></p><p>So clearly there’s something I’m just not grocking about Swift pointers. Does anyone know of a more remedial tutorial that is updated for Swift 3? I’d like to continue to work in pure Swift, but it just isn’t clicking.<br></p><p>--<br>Chris McIntyre<br></p><p><br></p><p><br>&gt; On Jul 29, 2016, at 6:11 AM, James Campbell via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; No I haven&#39;t thats a big help thank you !<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On 29 July 2016 at 10:40, Zhao Xin &lt;owenzx at gmail.com &lt;mailto:owenzx at gmail.com&gt;&gt; wrote:<br>&gt; Have you read https://developer.apple.com/library/tvos/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID17 &lt;https://developer.apple.com/library/tvos/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID17&gt; ?<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Fri, Jul 29, 2016 at 4:55 PM, James Campbell via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; ​Do you know of any resources to brush up on the pointer aspect of swift ? ​<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head of Trolls<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On 29 July 2016 at 09:10, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt; On Fri, Jul 29, 2016 at 12:55 AM, James Campbell &lt;james at supmenow.com &lt;mailto:james at supmenow.com&gt;&gt; wrote:<br>&gt; &gt; So this:<br>&gt; &gt;<br>&gt; &gt; if let data = someArrayGeneratingFunction() {<br>&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Has issues with the array passed to c getting corrupted, but this doesn&#39;t:<br>&gt; &gt;<br>&gt; &gt; let data = someArrayGeneratingFunction()<br>&gt; &gt;<br>&gt; &gt; if let data = data {<br>&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt; &gt; }<br>&gt; <br>&gt; Neither piece of code is guaranteed to work.  (You are just getting<br>&gt; lucky that the second one happens to work.)  Array-to-pointer<br>&gt; conversion only extends the lifetime of the array until the immediate<br>&gt; function call returns.  So after UnsafeMutablePointer(data) returns,<br>&gt; the array can be freed.<br>&gt; <br>&gt; Use someArrayGeneratingFunction.withUnsafeMutableBuffer { ... } instead.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160729/e255dce9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>July 30, 2016 at 05:00:00am</p></header><div class="content"><p>On Fri, Jul 29, 2016 at 8:40 PM, Chris McIntyre via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi guys,<br>&gt;<br>&gt; I’m having issues with Swift pointers. I feel like the Interactive With C<br>&gt; APis document only gets you half way there.<br>&gt;<br>&gt; For example, look at this from the docs<br>&gt;<br>&gt; If you have declared a function like this one:<br>&gt;<br>&gt;    1. func takesAMutablePointer(x: UnsafeMutablePointer&lt;Float&gt;) {<br>&gt;    2. // ...<br>&gt;    3. }<br>&gt;<br>&gt; You can call it in any of the following ways:<br>&gt;<br>&gt;    1. var x: Float = 0.0<br>&gt;    2. var p: UnsafeMutablePointer&lt;Float&gt; = nil<br>&gt;    3. var a: [Float] = [1.0, 2.0, 3.0]<br>&gt;    4. takesAMutablePointer(nil)<br>&gt;    5. takesAMutablePointer(p)<br>&gt;    6. takesAMutablePointer(&amp;x)<br>&gt;    7. takesAMutablePointer(&amp;a)<br>&gt;<br>&gt; Seem simple enough. But then I was trying to figure out Core Data<br>&gt; validation, which takes an AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;<br>&gt; and I can’t figure out what to pass to it.<br>&gt;<br>&gt; I tried to create a simple test in a Playground:<br>&gt;<br>&gt; func takesAPointer(p: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;){<br>&gt;<br>&gt;     return<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; var myString = &quot;Hello&quot;<br>&gt;<br>&gt;<br>&gt; takesAPointer(p: &amp;myString)<br>&gt;<br></p><p>Try this:<br></p><p>import Foundation<br>func takesAPointer(p: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;){<br>    return<br>}<br>let myString : NSString? = &quot;Hello&quot;<br>var obj : AnyObject? = myString<br>takesAPointer(&amp;obj)<br></p><p><br></p><p>&gt;<br>&gt; Then I get an error stating &#39;Cannot pass immutable type “AnyObject?” as<br>&gt; inout argument’.<br>&gt;<br>&gt; Everything seems to match the example from the docs. I have a var (so it<br>&gt; should be mutable) and I’m using the ampersand, but still I’m getting an<br>&gt; error.<br>&gt;<br>&gt; Another problem. I have a specific byte pattern I want to create. For<br>&gt; arguments sake, lets call it 0x123ABC, and I have it as an Int. I want to<br>&gt; access the individual bytes (i.e. 12, 3A, BC).<br>&gt;<br></p><p>Is something like this what you&#39;re looking for:<br>let a = UInt16((0x123ABC &gt;&gt; 16) &amp; 0xFF)<br>let b = UInt16((0x123ABC &gt;&gt; 8) &amp; 0xFF)<br>print(String(a, radix: 16))<br>print(String(b, radix: 16))<br></p><p><br>&gt;<br>&gt; The struct reference for UnsafePointer&lt;T&gt; doesn’t talk much about<br>&gt; initializing it. Most of the initializers take a pointer. I tried the<br>&gt; init(_ bitPattern:) initializer, and was able to create a pointer, but it<br>&gt; seemed to point to the address 0x123ABC rather than the address *of*<br>&gt; 0x123ABC. I tried creating a buffer with malloc, and it gives me an<br>&gt; UnsafeMutablePointer  but now I can’t figure out how to copy my bytes to<br>&gt; this buffer.<br>&gt;<br>&gt; So clearly there’s something I’m just not grocking about Swift pointers.<br>&gt; Does anyone know of a more remedial tutorial that is updated for Swift 3?<br>&gt; I’d like to continue to work in pure Swift, but it just isn’t clicking.<br>&gt;<br>&gt; --<br>&gt; Chris McIntyre<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 29, 2016, at 6:11 AM, James Campbell via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; No I haven&#39;t thats a big help thank you !<br>&gt;<br>&gt; *___________________________________*<br>&gt;<br>&gt; *James⎥Head of Trolls*<br>&gt;<br>&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt; &lt;http://supmenow.com/&gt;*<br>&gt;<br>&gt; *Sup*<br>&gt;<br>&gt; *Runway East *<br>&gt;<br>&gt; *10 Finsbury Square*<br>&gt;<br>&gt; *London*<br>&gt;<br>&gt; * EC2A 1AF *<br>&gt;<br>&gt; On 29 July 2016 at 10:40, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Have you read<br>&gt;&gt; https://developer.apple.com/library/tvos/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID17<br>&gt;&gt;  ?<br>&gt;&gt;<br>&gt;&gt; Zhaoxin<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 29, 2016 at 4:55 PM, James Campbell via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; ​Do you know of any resources to brush up on the pointer aspect of swift<br>&gt;&gt;&gt; ? ​<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *___________________________________*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *James⎥Head of Trolls*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt;&gt;&gt; &lt;http://supmenow.com/&gt;*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *Sup*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *Runway East *<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *10 Finsbury Square*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *London*<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * EC2A 1AF *<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 29 July 2016 at 09:10, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jul 29, 2016 at 12:55 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; So this:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; if let data = someArrayGeneratingFunction() {<br>&gt;&gt;&gt;&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Has issues with the array passed to c getting corrupted, but this<br>&gt;&gt;&gt;&gt; doesn&#39;t:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; let data = someArrayGeneratingFunction()<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; if let data = data {<br>&gt;&gt;&gt;&gt; &gt;   cFunction(UnsafeMutablePointer(data))<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Neither piece of code is guaranteed to work.  (You are just getting<br>&gt;&gt;&gt;&gt; lucky that the second one happens to work.)  Array-to-pointer<br>&gt;&gt;&gt;&gt; conversion only extends the lifetime of the array until the immediate<br>&gt;&gt;&gt;&gt; function call returns.  So after UnsafeMutablePointer(data) returns,<br>&gt;&gt;&gt;&gt; the array can be freed.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Use someArrayGeneratingFunction.withUnsafeMutableBuffer { ... } instead.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160730/088edc90/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06a673cb15b38c3417ac46d8aa0e35f0?s=50"></div><header><strong>C Pointers and Memory</strong> from <string>Bryan Chan</string> &lt;bryanpkc at gmail.com&gt;<p>July 30, 2016 at 01:00:00pm</p></header><div class="content"><p>Personally I like swiftdoc.org as a reference:<br></p><p>http://swiftdoc.org/v3.0/type/UnsafeMutablePointer/<br></p><p>Click on the initializers and function names to read the description of<br>what each of them does.<br></p><p>You can use a UnsafeMutableBufferPointer to help initialize your memory<br>(which you have to allocate first):<br></p><p>var memory = UnsafeMutablePointer&lt;Int8&gt;(allocatingCapacity: 4)<br>var buf = UnsafeMutableBufferPointer&lt;Int8&gt;(start: memory, count: 4)<br>for i in 0...3 {<br>    buf[i] = Int8(0x10 * (i + 1)) // [ 16, 32, 48, 64 ]<br>}<br>CFunctionThatTakesACharPointer(memory, 4)<br></p><p>--<br>Bryan Chan<br></p><p>On Fri, Jul 29, 2016 at 11:40 PM, Chris McIntyre via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Another problem. I have a specific byte pattern I want to create. For<br>&gt; arguments sake, lets call it 0x123ABC, and I have it as an Int. I want to<br>&gt; access the individual bytes (i.e. 12, 3A, BC).<br>&gt;<br>&gt; The struct reference for UnsafePointer&lt;T&gt; doesn’t talk much about<br>&gt; initializing it. Most of the initializers take a pointer. I tried the<br>&gt; init(_ bitPattern:) initializer, and was able to create a pointer, but it<br>&gt; seemed to point to the address 0x123ABC rather than the address *of*<br>&gt; 0x123ABC. I tried creating a buffer with malloc, and it gives me an<br>&gt; UnsafeMutablePointer  but now I can’t figure out how to copy my bytes to<br>&gt; this buffer.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160730/339b2824/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
