<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cc377023711b064682f44cd33e75e536?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Dale Buckley</string> &lt;dalebuckley86 at gmail.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br></p><p>My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br></p><p>Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br></p><p>I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br></p><p>What are peoples thoughts on this?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 13, 2016 at 07:00:00pm</p></header><div class="content"><p>Big Yes!<br></p><p>Most business applications require the use of Decimal numbers.  NSDecimalNumber is sludgy to use in Swift and generally does not interoperate well - and with limited functionality.<br></p><p>It should be a base type, and the same computational infix operators should be able to be used.  <br></p><p><br>&gt; On 2016-02-13, at 18:51:39, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt; <br>&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt; <br>&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt; <br>&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt; <br>&gt; What are peoples thoughts on this?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February 13, 2016 at 10:00:00am</p></header><div class="content"><p>General +1, but I&#39;m wondering if a better development process would be to<br>release this as an open-source library, get some adoption, respond to<br>user-feedback, and then propose to integrate that library into the stdlib.<br>You can iterate much faster in a library than in the language standard, and<br>APIs usually end up being a lot cleaner when designed in response to user<br>feedback than when designed by committee.  (Particularly when the library<br>in question is fairly domain-specific.)<br></p><p>On Sat, Feb 13, 2016 at 4:03 AM, Craig Cruden via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Big Yes!<br>&gt;<br>&gt; Most business applications require the use of Decimal numbers.<br>&gt; NSDecimalNumber is sludgy to use in Swift and generally does not<br>&gt; interoperate well - and with limited functionality.<br>&gt;<br>&gt; It should be a base type, and the same computational infix operators<br>&gt; should be able to be used.<br>&gt;<br>&gt;<br>&gt; &gt; On 2016-02-13, at 18:51:39, Dale Buckley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; We all know the problems with floating point types, they are well<br>&gt; documented and well understood by developers everywhere. We know when to<br>&gt; use them and (hopefully) when not to use them and if you are working with<br>&gt; financial values on a Foundation based platform you know to not use a<br>&gt; floating point type and to use NSDecimalNumber instead.<br>&gt; &gt;<br>&gt; &gt; My question is this; should there be an equivalent NSDecimalNumber type<br>&gt; built into Swift that can be used for precision sensitive decimal values<br>&gt; where floating point types can’t be used?<br>&gt; &gt;<br>&gt; &gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a<br>&gt; modern twist so I can see it looking like something else entirely, but the<br>&gt; point still stands.<br>&gt; &gt;<br>&gt; &gt; I feel like there is a need for this, it’s not a new problem and has<br>&gt; been solved many times over in other languages such as Objective-C<br>&gt; (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be<br>&gt; lacking an equivalent solution in Swift. It shouldn’t be left for an<br>&gt; external library to solve, it’s one of those things that need to be built<br>&gt; into the language.<br>&gt; &gt;<br>&gt; &gt; What are peoples thoughts on this?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/56d41a76/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/069f7ef2d8a91cd35caa5bfc99a35773?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Mark Glossop</string> &lt;lists at cueballcentral.com&gt;<p>February 14, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; On 13 Feb 2016, at 19:51, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt; <br>&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt; <br>&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt; <br>&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt; <br>&gt; What are peoples thoughts on this?<br></p><p>Relevant (and because I remember it since Steve was replying to my message at the time):<br></p><p>	https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005782.html<br></p><p>&gt;&gt; On Jan 7, 2016, at 12:40 PM, Mark Glossop via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sidebar on decimal numerics since they&#39;re relevant to support for currency units - would be nice to know if the &quot;new&quot; IEEE 754 (2008) Decimal floating-point types are in the Swift roadmap?<br>&gt;&gt; My suspicion is that any support for them will only come from upstream in LLVM as a first-class type [quad precision/binary128 is supported as the fp128 type; but no decimal floating-point types at present] - so looks like any fixed-point decimal support in the interim would need to be provided by hacking int types, but if anyone wants to chime in... :-)<br>&gt; <br>&gt; Decimal FP is somewhere in the hazy far-future hypothetical roadmap.  It’s actually far more useful than (software) Binary128; implemented in software the performance delta between the two is fairly narrow on modern CPU architectures (except possibly for division), and having a decimal FP type available would be quite nice.<br>&gt; <br>&gt; There’s a lot of lower-hanging fruit to chip away on first, however.<br>&gt; – Steve<br></p><p>So - it&#39;s in the &quot;far-future hypothetical roadmap&quot;. I&#39;ve taken that to mean somewhere past Swift 4, whenever that drops.<br></p><p>In the meantime you might check out PONS which was mentioned a few days ago: https://github.com/dankogai/swift-pons - haven&#39;t tried it myself yet, but it appears to be an option for BigNums and Rational types (&quot;decimal&quot; types being a subset of Rational functionality.)<br></p><p>FWIW a number of other prior posts that mention dedicated decimal types:<br></p><p>	https://www.google.com.au/search?q=decimal+AND+type+site:https://lists.swift.org/pipermail/swift-evolution/<br></p><p>HTH,<br>M.<br>-- <br>Mark Glossop<br>E: lists at cueballcentral.com<br>TW: http://twitter.com/Cueball_AU<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>Both the NSDecimalNumber class and the NSDecimal struct are already available in Swift. If there were a set of operators and initializers for NSDecimal, would that provide most of what you need? The operators would be simple to implement over the existing functions, I think. Maybe the corelibs people would take those as a patch?<br></p><p>—CK<br></p><p>&gt; On Feb 13, 2016, at 3:51 AM, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt; <br>&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt; <br>&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt; <br>&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt; <br>&gt; What are peoples thoughts on this?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 14, 2016 at 03:00:00am</p></header><div class="content"><p>You mean this (I cannot find NSDecimal)<br></p><p>let y = NSDecimalNumber(string: &quot;5&quot;)<br></p><p>y.decimalNumberByAdding(NSDecimalNumber(string: &quot;10”))<br></p><p>Base values like this should not be mutable…..<br></p><p>And I could not find an NSDecimal implementation accessible from Swift (is there one)? (as such I cannot check that api). <br></p><p>The only real difference between a Decimal and an Int is that Int / Float instructions exist in hardware, whereas Decimal has to be simulated - but is just a real type when programming in high level language.<br></p><p>So you should have all the infix operations available, and the values themselves should not be mutable.<br></p><p><br></p><p><br></p><p>&gt; On 2016-02-14, at 3:45:46, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Both the NSDecimalNumber class and the NSDecimal struct are already available in Swift. If there were a set of operators and initializers for NSDecimal, would that provide most of what you need? The operators would be simple to implement over the existing functions, I think. Maybe the corelibs people would take those as a patch?<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 3:51 AM, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt;&gt; <br>&gt;&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt;&gt; <br>&gt;&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt;&gt; <br>&gt;&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt;&gt; <br>&gt;&gt; What are peoples thoughts on this?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/4609a00e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 12:57 PM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; You mean this (I cannot find NSDecimal)<br></p><p>Hmmm. NSDecimal is accessible to me in Xcode after importing Foundation. It’s included in the open source Foundation library as well. I’m not sure what is going on there.<br></p><p>I can understand why you would not want to use NSDecimalNumber.<br></p><p>—CK<br></p><p>&gt; let y = NSDecimalNumber(string: &quot;5&quot;)<br>&gt; <br>&gt; y.decimalNumberByAdding(NSDecimalNumber(string: &quot;10”))<br>&gt; <br>&gt; Base values like this should not be mutable…..<br>&gt; <br>&gt; And I could not find an NSDecimal implementation accessible from Swift (is there one)? (as such I cannot check that api). <br>&gt; <br>&gt; The only real difference between a Decimal and an Int is that Int / Float instructions exist in hardware, whereas Decimal has to be simulated - but is just a real type when programming in high level language.<br>&gt; <br>&gt; So you should have all the infix operations available, and the values themselves should not be mutable.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 2016-02-14, at 3:45:46, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Both the NSDecimalNumber class and the NSDecimal struct are already available in Swift. If there were a set of operators and initializers for NSDecimal, would that provide most of what you need? The operators would be simple to implement over the existing functions, I think. Maybe the corelibs people would take those as a patch?<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 13, 2016, at 3:51 AM, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What are peoples thoughts on this?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/3dc4ffe8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 14, 2016 at 04:00:00am</p></header><div class="content"><p>ok, found it….  woooooo….. <br></p><p>ugly.  Sure this is not just suppose to be internal to NSDecimalNumber<br></p><p>Have not tried using it…. just let it fill in the defaults to see what it is.  Does not look like it is actually meant to be used outside of something that makes it friendly.<br></p><p>NSDecimal(_exponent: &lt;#T##Int32#&gt;, _length: &lt;#T##UInt32#&gt;, _isNegative: &lt;#T##UInt32#&gt;, _isCompact: &lt;#T##UInt32#&gt;, _reserved: &lt;#T##UInt32#&gt;, _mantissa: &lt;#T##(UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)#&gt;)<br></p><p><br></p><p>&gt; On 2016-02-14, at 4:08:51, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 13, 2016, at 12:57 PM, Craig Cruden &lt;ccruden at novafore.com &lt;mailto:ccruden at novafore.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You mean this (I cannot find NSDecimal)<br>&gt; <br>&gt; Hmmm. NSDecimal is accessible to me in Xcode after importing Foundation. It’s included in the open source Foundation library as well. I’m not sure what is going on there.<br>&gt; <br>&gt; I can understand why you would not want to use NSDecimalNumber.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt;&gt; let y = NSDecimalNumber(string: &quot;5&quot;)<br>&gt;&gt; <br>&gt;&gt; y.decimalNumberByAdding(NSDecimalNumber(string: &quot;10”))<br>&gt;&gt; <br>&gt;&gt; Base values like this should not be mutable…..<br>&gt;&gt; <br>&gt;&gt; And I could not find an NSDecimal implementation accessible from Swift (is there one)? (as such I cannot check that api). <br>&gt;&gt; <br>&gt;&gt; The only real difference between a Decimal and an Int is that Int / Float instructions exist in hardware, whereas Decimal has to be simulated - but is just a real type when programming in high level language.<br>&gt;&gt; <br>&gt;&gt; So you should have all the infix operations available, and the values themselves should not be mutable.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2016-02-14, at 3:45:46, Charles Kissinger via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Both the NSDecimalNumber class and the NSDecimal struct are already available in Swift. If there were a set of operators and initializers for NSDecimal, would that provide most of what you need? The operators would be simple to implement over the existing functions, I think. Maybe the corelibs people would take those as a patch?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 13, 2016, at 3:51 AM, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What are peoples thoughts on this?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/6a610901/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Is there a need for a Decimal type?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 15, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 3:51 AM, Dale Buckley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We all know the problems with floating point types, they are well documented and well understood by developers everywhere. We know when to use them and (hopefully) when not to use them and if you are working with financial values on a Foundation based platform you know to not use a floating point type and to use NSDecimalNumber instead.<br>&gt; <br>&gt; My question is this; should there be an equivalent NSDecimalNumber type built into Swift that can be used for precision sensitive decimal values where floating point types can’t be used?<br>&gt; <br>&gt; Maybe the answer isn’t an ‘equivalent’ as such, it would probably have a modern twist so I can see it looking like something else entirely, but the point still stands.<br>&gt; <br>&gt; I feel like there is a need for this, it’s not a new problem and has been solved many times over in other languages such as Objective-C (NSDecimalNumber) and Java (BigDecimal) etc. Yet as it stands we seem to be lacking an equivalent solution in Swift. It shouldn’t be left for an external library to solve, it’s one of those things that need to be built into the language.<br>&gt; <br>&gt; What are peoples thoughts on this?<br></p><p>Decimal libraries would be great. However, there are a few different kinds of decimal that are interesting—currency tends to have different domain-specific behavior from general floating-point decimal, for instance. One thing I&#39;d like to see us eventually fix at the language level is the low-level protocol for decimal literals. The current behavior of `FloatLiteralConvertible` is to pass the floating-point value down as a binary floating-point Double, making it unsuitable for use by decimal libraries. A more accurate protocol might break a decimal literal down into mantissa/exponent, something like this:<br></p><p>protocol DecimalLiteralConvertible {<br>  associatedtype Value: IntegerLiteralConvertible<br>  associatedtype Exponent: IntegerLiteralConvertible<br>  init(decimalLiteral: Value, timesTenToThePowerOf: Exponent)<br>}<br></p><p>Then e.g. &#39;0.1&#39; would compile down to &#39;T(decimalLiteral: 1, timesTenToThePowerOf: -1)&#39; rather than &#39;T(floatLiteral: 0x1.999999999999ap-4)&#39;. This would make it possible for libraries to extend the language with good decimal support.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/b61a99d5/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
