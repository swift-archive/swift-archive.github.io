<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d1bff9080a4237cc9b79c5751afb6f7?s=50"></div><header><strong>[Draft proposal] Extending read-only properties with setters</strong> from <string>Jarod Long</string> &lt;swift at lng.la&gt;<p>February  3, 2016 at 02:00:00pm</p></header><div class="content"><p>Swift extensions are fantastic for filling in gaps in an API, but they don&#39;t currently allow you to convert a read-only property into a read-write property by extending it with your own setter. I&#39;d like to propose that an extension may contain a set-only computed property iff the extended type already has a getter for that property.<br></p><p>My specific motivation for this proposal stems from CGRect&#39;s translated API. If you frequently work with rects, it&#39;s very convenient to be able to access their x/y/width/height properties directly. It&#39;s easy to extend CGRect with x/y properties, but width and height are problematic because of the CGRectGetWidth and CGRectGetHeight functions that get imported as read-only width and height properties on CGRect.<br></p><p>If you extend CGRect with read-write width/height properties, they&#39;ll work within the module they&#39;re defined because the getters shadow the imported Objective-C versions, but using the getters in other modules becomes impossible due to ambiguity errors. If it was possible to only define the width/height setters, the ambiguity wouldn&#39;t exist.<br></p><p>This particular issue is pretty narrow, but it&#39;s moderately frustrating if you write a lot of layout code or do other work with rects, and I think this is just one of many situations where adding a setter to a property would be useful.<br></p><p>This proposal is somewhat related to the &quot;support for pure setters&quot; discussion, but since it doesn&#39;t involve the tradeoffs of introducing actual set-only properties, I feel that this warrants its own separate discussion.<br></p><p>Looking forward to your input!<br></p><p>Jarod<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Draft proposal] Extending read-only properties with setters</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>This violates the &quot;what if two people did this?&quot; rule; while you might be able to disambiguate between two modules that define the same method or property, it seems really hard to pick a particular module&#39;s setter.<br></p><p>I think it would be better to just request that the width and height fields get setters, since they&#39;re already being defined in Swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/SDK/CoreGraphics/CoreGraphics.swift#L172&gt;. If you want to attack the general problem, I think it would be better to come up with ways to disambiguate overloads that differ only by module.<br></p><p>Best,<br>Jordan<br></p><p><br>&gt; On Feb 3, 2016, at 14:30, Jarod Long via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift extensions are fantastic for filling in gaps in an API, but they don&#39;t currently allow you to convert a read-only property into a read-write property by extending it with your own setter. I&#39;d like to propose that an extension may contain a set-only computed property iff the extended type already has a getter for that property.<br>&gt; <br>&gt; My specific motivation for this proposal stems from CGRect&#39;s translated API. If you frequently work with rects, it&#39;s very convenient to be able to access their x/y/width/height properties directly. It&#39;s easy to extend CGRect with x/y properties, but width and height are problematic because of the CGRectGetWidth and CGRectGetHeight functions that get imported as read-only width and height properties on CGRect.<br>&gt; <br>&gt; If you extend CGRect with read-write width/height properties, they&#39;ll work within the module they&#39;re defined because the getters shadow the imported Objective-C versions, but using the getters in other modules becomes impossible due to ambiguity errors. If it was possible to only define the width/height setters, the ambiguity wouldn&#39;t exist.<br>&gt; <br>&gt; This particular issue is pretty narrow, but it&#39;s moderately frustrating if you write a lot of layout code or do other work with rects, and I think this is just one of many situations where adding a setter to a property would be useful.<br>&gt; <br>&gt; This proposal is somewhat related to the &quot;support for pure setters&quot; discussion, but since it doesn&#39;t involve the tradeoffs of introducing actual set-only properties, I feel that this warrants its own separate discussion.<br>&gt; <br>&gt; Looking forward to your input!<br>&gt; <br>&gt; Jarod<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/0cc5f49e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d1bff9080a4237cc9b79c5751afb6f7?s=50"></div><header><strong>[Draft proposal] Extending read-only properties with setters</strong> from <string>Jarod Long</string> &lt;swift at lng.la&gt;<p>February  3, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 3, 2016, at 15:23, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; This violates the &quot;what if two people did this?&quot; rule; while you might be able to disambiguate between two modules that define the same method or property, it seems really hard to pick a particular module&#39;s setter.<br></p><p>I think I don&#39;t have a complete understanding of how disambiguation works, because it&#39;s not quite clear to me how disambiguating setters is harder than methods or properties. As far as I understand it, to disambiguate a symbol, you prefix it with the module name. I&#39;m actually not sure how to disambiguate anything that isn&#39;t directly accessible in the current scope (where does the module name go?), so getters, setters, and methods seem equally difficult to disambiguate.<br></p><p>Apologies if I&#39;m overlooking something here.<br></p><p>&gt; I think it would be better to just request that the width and height fields get setters, since they&#39;re already being defined in Swift &lt;https://github.com/apple/swift/blob/master/stdlib/public/SDK/CoreGraphics/CoreGraphics.swift#L172&gt;. If you want to attack the general problem, I think it would be better to come up with ways to disambiguate overloads that differ only by module.<br></p><p>Interesting -- thank you for the link! I was originally going to suggest a change in the Objective-C API translation thread, but I had assumed that the width and height properties came from a generic rule that automatically translated the CGRectGet___ functions and that making explicit translation rules for CGRect would be undesirable.<br></p><p>I would like to solve the general problem if there&#39;s a reasonable way to do so, since I do think there are applications outside of these specific properties. To use another CGRect example, you may want the midX/Y properties (among others) to be settable, but introducing built-in setters for all of these kinds of properties is likely not something we would want to do.<br></p><p>If it turns out that this isn&#39;t a feasible thing to do, then I think building these particular setters into Swift is the next best thing, but I&#39;d like to explore the possibilities here for a bit before trying to go that route.<br></p><p>&gt; Best,<br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 3, 2016, at 14:30, Jarod Long via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swift extensions are fantastic for filling in gaps in an API, but they don&#39;t currently allow you to convert a read-only property into a read-write property by extending it with your own setter. I&#39;d like to propose that an extension may contain a set-only computed property iff the extended type already has a getter for that property.<br>&gt;&gt; <br>&gt;&gt; My specific motivation for this proposal stems from CGRect&#39;s translated API. If you frequently work with rects, it&#39;s very convenient to be able to access their x/y/width/height properties directly. It&#39;s easy to extend CGRect with x/y properties, but width and height are problematic because of the CGRectGetWidth and CGRectGetHeight functions that get imported as read-only width and height properties on CGRect.<br>&gt;&gt; <br>&gt;&gt; If you extend CGRect with read-write width/height properties, they&#39;ll work within the module they&#39;re defined because the getters shadow the imported Objective-C versions, but using the getters in other modules becomes impossible due to ambiguity errors. If it was possible to only define the width/height setters, the ambiguity wouldn&#39;t exist.<br>&gt;&gt; <br>&gt;&gt; This particular issue is pretty narrow, but it&#39;s moderately frustrating if you write a lot of layout code or do other work with rects, and I think this is just one of many situations where adding a setter to a property would be useful.<br>&gt;&gt; <br>&gt;&gt; This proposal is somewhat related to the &quot;support for pure setters&quot; discussion, but since it doesn&#39;t involve the tradeoffs of introducing actual set-only properties, I feel that this warrants its own separate discussion.<br>&gt;&gt; <br>&gt;&gt; Looking forward to your input!<br>&gt;&gt; <br>&gt;&gt; Jarod<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/e4af86a4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
