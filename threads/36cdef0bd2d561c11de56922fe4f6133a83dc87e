<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7b322f7cba0c5d2ed8aab562e3198acb?s=50"></div><header><strong>[Idea] Allowing definition of custom behaviors for `as` casting</strong> from <string>Yaman JAIOUCH</string> &lt;yjaiouch at gmail.com&gt;<p>June 20, 2016 at 10:00:00pm</p></header><div class="content"><p>What you think about having the possibility to define custom behavior while casting with `as` keyword ?<br>It could be quite handy to use while keeping a good level of readability. <br></p><p>Something like this :<br></p><p>struct User {<br>    let firstname: String<br>    let lastname: String<br></p><p>    as(json: AnyObject) -&gt; User? {<br>        guard let json = json as? [String: AnyObject], let firstname = json[&quot;firstname&quot;] as? String, let lastname = json[&quot;lastname&quot;] else {<br>            return nil<br>        }<br>    <br>        return User(firstname: firstname, lastname: lastname)<br>    }<br>    <br>    as(string: String) -&gt; User? {<br>        let components = string.componentsSeparatedByString(&quot; &quot;)<br>        guard components.count == 2 else { return nil }<br>    <br>        return User(firstname: components[0], lastname: components[1])<br>    }<br>}<br></p><p>let user1 = [&quot;firstname&quot;: &quot;Yaman&quot;, &quot;lastname&quot;: &quot;JAIOUCH&quot;] as? User // returns valid user<br>let user2 = &quot;Yaman JAIOUCH&quot; as? User // returns valid user<br>let user3 = 24 as? User // returns nil<br>let user4 = NSDate() as! User // crash as usual<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[Idea] Allowing definition of custom behaviors for `as` casting</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 21, 2016 at 03:00:00pm</p></header><div class="content"><p>What benefit would this provide that writing them as initializers already<br>doesn&#39;t? Writing the first two lines this way seems much clearer from a<br>call-site point of view:<br></p><p>let user1 = User(json: [&quot;firstname&quot;: &quot;Yaman&quot;, &quot;lastname&quot;: &quot;JAIOUCH&quot;])<br>let user2 = User(string: &quot;Yaman JAIOUCH&quot;)<br></p><p>That aside, placing the &quot;as&quot; methods on the destination type makes it look<br>to me like you&#39;re allowing casts *from* User *to* AnyObject/String and not<br>the other way around.<br></p><p>On Tue, Jun 21, 2016 at 8:27 AM Yaman JAIOUCH via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What you think about having the possibility to define custom behavior<br>&gt; while casting with `as` keyword ?<br>&gt; It could be quite handy to use while keeping a good level of readability.<br>&gt;<br>&gt; Something like this :<br>&gt;<br>&gt; struct User {<br>&gt;     let firstname: String<br>&gt;     let lastname: String<br>&gt;<br>&gt;     as(json: AnyObject) -&gt; User? {<br>&gt;         guard let json = json as? [String: AnyObject], let firstname =<br>&gt; json[&quot;firstname&quot;] as? String, let lastname = json[&quot;lastname&quot;] else {<br>&gt;             return nil<br>&gt;         }<br>&gt;<br>&gt;         return User(firstname: firstname, lastname: lastname)<br>&gt;     }<br>&gt;<br>&gt;     as(string: String) -&gt; User? {<br>&gt;         let components = string.componentsSeparatedByString(&quot; &quot;)<br>&gt;         guard components.count == 2 else { return nil }<br>&gt;<br>&gt;         return User(firstname: components[0], lastname: components[1])<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; let user1 = [&quot;firstname&quot;: &quot;Yaman&quot;, &quot;lastname&quot;: &quot;JAIOUCH&quot;] as? User //<br>&gt; returns valid user<br>&gt; let user2 = &quot;Yaman JAIOUCH&quot; as? User // returns valid user<br>&gt; let user3 = 24 as? User // returns nil<br>&gt; let user4 = NSDate() as! User // crash as usual<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/aa62ee51/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
