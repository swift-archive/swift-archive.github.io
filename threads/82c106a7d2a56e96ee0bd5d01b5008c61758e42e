<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9a5c497293dffb91cacef202bad5b602?s=50"></div><header><strong>Package module name collisions</strong> from <string>Jason Lee</string> &lt;jasonlee9 at gmail.com&gt;<p>February  1, 2016 at 05:00:00pm</p></header><div class="content"><p>Today I introduced a dependency on another project&#39;s package with brought over a module name that conflicted with one he modules in my project.<br></p><p>Currently my project has multiple modules (and executables) in the package and everything is working well for me. However, when I got this conflict today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s been solved already by the package manager team, but I haven&#39;t figured out how to do this from the docs yet.<br></p><p>An example:<br>Package &#39;A&#39; has a module named &#39;Base&#39;<br>My package also has a module named &#39;Base&#39;<br></p><p>When I build, I get a circular ref error now. One way I was thinking I cld fix this on my end is to prefix all my module names with my package name (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;. And my imports could look like so:<br></p><p>import Foundation<br>import Base<br>import MyAppBase<br></p><p>Any thoughts on this? Thx.<br></p><p>- jason<br></p><p>Sent from my iPhone<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Package module name collisions</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February  1, 2016 at 06:00:00pm</p></header><div class="content"><p>This is a good reason why package names should be clear and specific, avoiding common phrases and terms that will overlap. <br>A proven way to avoid such issues is to namespace your packages in some way, e.g. prefer SadunStringUtilities vs SwiftString.<br></p><p>At this time there is no built-in way that I know of how to deal with module name collisions. So let me speculate about what<br>a solution might look like. (Skip to the next message if this doesn&#39;t interest.) Having a reverse domain name as<br>part of the Package declaration syntax maybe could address part of the issue, for example:<br></p><p>import PackageDescription<br></p><p>let package = Package(<br>    name: &quot;SwiftString&quot;<br>    origin: &quot;com.sadun&quot;<br>)<br></p><p>and in the case of name conflicts use:<br></p><p>import com.sadun.SwiftString<br>import com.LeeJason.SwiftString<br></p><p>with all the annoying resolution that might involve in disambiguating symbols.  I could also <br>see some kind of package alias being needed if this problem got too bad, e.g.<br></p><p>packagealias Sadun = com.sadun.SwiftString<br>packagealias LeeJ = com.lLeeJason.SwiftString<br></p><p>let x = LeeJ.countStringItems(someString)<br></p><p>but I don&#39;t know how Swift would disambiguate, for example, two packages that both created<br> public extensions on String both being imported into the same file, and both offering conflicting, say, properties.<br></p><p>-- Erica<br></p><p><br>&gt; On Feb 1, 2016, at 6:41 PM, Jason Lee via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Today I introduced a dependency on another project&#39;s package with brought over a module name that conflicted with one he modules in my project.<br>&gt; <br>&gt; Currently my project has multiple modules (and executables) in the package and everything is working well for me. However, when I got this conflict today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s been solved already by the package manager team, but I haven&#39;t figured out how to do this from the docs yet.<br>&gt; <br>&gt; An example:<br>&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt; My package also has a module named &#39;Base&#39;<br>&gt; <br>&gt; When I build, I get a circular ref error now. One way I was thinking I cld fix this on my end is to prefix all my module names with my package name (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;. And my imports could look like so:<br>&gt; <br>&gt; import Foundation<br>&gt; import Base<br>&gt; import MyAppBase<br>&gt; <br>&gt; Any thoughts on this? Thx.<br>&gt; <br>&gt; - jason<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160201/b8050287/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9a5c497293dffb91cacef202bad5b602?s=50"></div><header><strong>Package module name collisions</strong> from <string>Jason Lee</string> &lt;jasonlee9 at gmail.com&gt;<p>February  1, 2016 at 07:00:00pm</p></header><div class="content"><p>Hmm, ok, so I wasn&#39;t too far off. I guess this still is along the lines of<br>the Obj-C way of namespacing. Sorta.. I&#39;m going to look into this more on<br>the swift package project and in the mean time, I&#39;ll use the relevant<br>project name prefix in the module name. Thanks!<br></p><p>On Mon, Feb 1, 2016 at 5:53 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt; This is a good reason why package names should be clear and specific,<br>&gt; avoiding common phrases and terms that will overlap.<br>&gt; A proven way to avoid such issues is to namespace your packages in some<br>&gt; way, e.g. prefer SadunStringUtilities vs SwiftString.<br>&gt;<br>&gt; At this time there is no built-in way that I know of how to deal with<br>&gt; module name collisions. So let me speculate about what<br>&gt; a solution might look like. (Skip to the next message if this doesn&#39;t<br>&gt; interest.) Having a reverse domain name as<br>&gt; part of the Package declaration syntax maybe could address part of the<br>&gt; issue, for example:<br>&gt;<br>&gt; import PackageDescription<br>&gt;<br>&gt; let package = Package(<br>&gt;     name: &quot;SwiftString&quot;<br>&gt;     origin: &quot;com.sadun&quot;<br>&gt; )<br>&gt;<br>&gt; and in the case of name conflicts use:<br>&gt;<br>&gt; import com.sadun.SwiftString<br>&gt; import com.LeeJason.SwiftString<br>&gt;<br>&gt; with all the annoying resolution that might involve in disambiguating<br>&gt; symbols.  I could also<br>&gt; see some kind of package alias being needed if this problem got too bad,<br>&gt; e.g.<br>&gt;<br>&gt; packagealias Sadun = com.sadun.SwiftString<br>&gt; packagealias LeeJ = com.lLeeJason.SwiftString<br>&gt;<br>&gt; let x = LeeJ.countStringItems(someString)<br>&gt;<br>&gt; but I don&#39;t know how Swift would disambiguate, for example, two packages<br>&gt; that both created<br>&gt;  public extensions on String both being imported into the same file, and<br>&gt; both offering conflicting, say, properties.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; On Feb 1, 2016, at 6:41 PM, Jason Lee via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Today I introduced a dependency on another project&#39;s package with brought<br>&gt; over a module name that conflicted with one he modules in my project.<br>&gt;<br>&gt; Currently my project has multiple modules (and executables) in the package<br>&gt; and everything is working well for me. However, when I got this conflict<br>&gt; today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s<br>&gt; been solved already by the package manager team, but I haven&#39;t figured out<br>&gt; how to do this from the docs yet.<br>&gt;<br>&gt; An example:<br>&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt; My package also has a module named &#39;Base&#39;<br>&gt;<br>&gt; When I build, I get a circular ref error now. One way I was thinking I cld<br>&gt; fix this on my end is to prefix all my module names with my package name<br>&gt; (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;.<br>&gt; And my imports could look like so:<br>&gt;<br>&gt; import Foundation<br>&gt; import Base<br>&gt; import MyAppBase<br>&gt;<br>&gt; Any thoughts on this? Thx.<br>&gt;<br>&gt; - jason<br>&gt;<br>&gt; Sent from my iPhone<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160201/c36745ca/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Package module name collisions</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>February  2, 2016 at 09:00:00am</p></header><div class="content"><p>Have you tried typealias? typealias NewTypeName =<br>Module.TypeInsideModuleName<br></p><p>zhaoxin<br></p><p>On Tue, Feb 2, 2016 at 9:41 AM, Jason Lee via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Today I introduced a dependency on another project&#39;s package with brought<br>&gt; over a module name that conflicted with one he modules in my project.<br>&gt;<br>&gt; Currently my project has multiple modules (and executables) in the package<br>&gt; and everything is working well for me. However, when I got this conflict<br>&gt; today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s<br>&gt; been solved already by the package manager team, but I haven&#39;t figured out<br>&gt; how to do this from the docs yet.<br>&gt;<br>&gt; An example:<br>&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt; My package also has a module named &#39;Base&#39;<br>&gt;<br>&gt; When I build, I get a circular ref error now. One way I was thinking I cld<br>&gt; fix this on my end is to prefix all my module names with my package name<br>&gt; (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;.<br>&gt; And my imports could look like so:<br>&gt;<br>&gt; import Foundation<br>&gt; import Base<br>&gt; import MyAppBase<br>&gt;<br>&gt; Any thoughts on this? Thx.<br>&gt;<br>&gt; - jason<br>&gt;<br>&gt; Sent from my iPhone<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160202/98f4598d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Package module name collisions</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Jason,<br></p><p>module-name collision is something that keeps me up at night. I intend to solve it as properly as possible.<br></p><p>This will involve a proper proposal for swift proper down the line, probably involving namespacing in some form.<br></p><p>For now, you can either cross your fingers or fork the project that has the collision and change the module name.<br></p><p>&gt; On Feb 1, 2016, at 5:41 PM, Jason Lee via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Today I introduced a dependency on another project&#39;s package with brought over a module name that conflicted with one he modules in my project.<br>&gt; <br>&gt; Currently my project has multiple modules (and executables) in the package and everything is working well for me. However, when I got this conflict today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s been solved already by the package manager team, but I haven&#39;t figured out how to do this from the docs yet.<br>&gt; <br>&gt; An example:<br>&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt; My package also has a module named &#39;Base&#39;<br>&gt; <br>&gt; When I build, I get a circular ref error now. One way I was thinking I cld fix this on my end is to prefix all my module names with my package name (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;. And my imports could look like so:<br>&gt; <br>&gt; import Foundation<br>&gt; import Base<br>&gt; import MyAppBase<br>&gt; <br>&gt; Any thoughts on this? Thx.<br>&gt; <br>&gt; - jason<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9a5c497293dffb91cacef202bad5b602?s=50"></div><header><strong>Package module name collisions</strong> from <string>Jason Lee</string> &lt;jasonlee9 at gmail.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Hey Max,<br></p><p>I decided to go the longer name route. This has solved my issue - for now. I will keep my eye open for the proposal, thanks!<br></p><p>&gt; On Feb 3, 2016, at 3:16 PM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Jason,<br>&gt; <br>&gt; module-name collision is something that keeps me up at night. I intend to solve it as properly as possible.<br>&gt; <br>&gt; This will involve a proper proposal for swift proper down the line, probably involving namespacing in some form.<br>&gt; <br>&gt; For now, you can either cross your fingers or fork the project that has the collision and change the module name.<br>&gt; <br>&gt;&gt; On Feb 1, 2016, at 5:41 PM, Jason Lee via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Today I introduced a dependency on another project&#39;s package with brought over a module name that conflicted with one he modules in my project.<br>&gt;&gt; <br>&gt;&gt; Currently my project has multiple modules (and executables) in the package and everything is working well for me. However, when I got this conflict today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s been solved already by the package manager team, but I haven&#39;t figured out how to do this from the docs yet.<br>&gt;&gt; <br>&gt;&gt; An example:<br>&gt;&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt;&gt; My package also has a module named &#39;Base&#39;<br>&gt;&gt; <br>&gt;&gt; When I build, I get a circular ref error now. One way I was thinking I cld fix this on my end is to prefix all my module names with my package name (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;. And my imports could look like so:<br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; import Base<br>&gt;&gt; import MyAppBase<br>&gt;&gt; <br>&gt;&gt; Any thoughts on this? Thx.<br>&gt;&gt; <br>&gt;&gt; - jason<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Package module name collisions</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Haha, forgive my overuse of “proper”. Blimey.<br></p><p>&gt; Hi Jason,<br>&gt; <br>&gt; module-name collision is something that keeps me up at night. I intend to solve it as properly as possible.<br>&gt; <br>&gt; This will involve a proper proposal for swift proper down the line, probably involving namespacing in some form.<br>&gt; <br>&gt; For now, you can either cross your fingers or fork the project that has the collision and change the module name.<br>&gt; <br>&gt;&gt; On Feb 1, 2016, at 5:41 PM, Jason Lee via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Today I introduced a dependency on another project&#39;s package with brought over a module name that conflicted with one he modules in my project.<br>&gt;&gt; <br>&gt;&gt; Currently my project has multiple modules (and executables) in the package and everything is working well for me. However, when I got this conflict today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s been solved already by the package manager team, but I haven&#39;t figured out how to do this from the docs yet.<br>&gt;&gt; <br>&gt;&gt; An example:<br>&gt;&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt;&gt; My package also has a module named &#39;Base&#39;<br>&gt;&gt; <br>&gt;&gt; When I build, I get a circular ref error now. One way I was thinking I cld fix this on my end is to prefix all my module names with my package name (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;. And my imports could look like so:<br>&gt;&gt; <br>&gt;&gt; import Foundation<br>&gt;&gt; import Base<br>&gt;&gt; import MyAppBase<br>&gt;&gt; <br>&gt;&gt; Any thoughts on this? Thx.<br>&gt;&gt; <br>&gt;&gt; - jason<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a28b53f05e7f3067fb104cb78fbb585?s=50"></div><header><strong>Package module name collisions</strong> from <string>Kostiantyn Koval</string> &lt;konstantin.koval1 at gmail.com&gt;<p>February  4, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Max and Jason, <br></p><p>I just faced same problem.<br>The origin URL + Version tag uniquely identifies the package. Maybe they could be used as a part of the namespace? <br>Looking forward for the awesomely proper proposal, I trust you :)<br></p><p>Kostiantyn<br></p><p>&gt; On 04 Feb 2016, at 00:24, Max Howell via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Haha, forgive my overuse of “proper”. Blimey.<br>&gt; <br>&gt;&gt; Hi Jason,<br>&gt;&gt; <br>&gt;&gt; module-name collision is something that keeps me up at night. I intend to solve it as properly as possible.<br>&gt;&gt; <br>&gt;&gt; This will involve a proper proposal for swift proper down the line, probably involving namespacing in some form.<br>&gt;&gt; <br>&gt;&gt; For now, you can either cross your fingers or fork the project that has the collision and change the module name.<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 1, 2016, at 5:41 PM, Jason Lee via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Today I introduced a dependency on another project&#39;s package with brought over a module name that conflicted with one he modules in my project.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently my project has multiple modules (and executables) in the package and everything is working well for me. However, when I got this conflict today, I was thinking this will be a problem going forward. I&#39;m sure it&#39;s been solved already by the package manager team, but I haven&#39;t figured out how to do this from the docs yet.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; An example:<br>&gt;&gt;&gt; Package &#39;A&#39; has a module named &#39;Base&#39;<br>&gt;&gt;&gt; My package also has a module named &#39;Base&#39;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When I build, I get a circular ref error now. One way I was thinking I cld fix this on my end is to prefix all my module names with my package name (seems redundant, of course). Something like &#39;Base&#39; becomes &#39;MyAppBase&#39;. And my imports could look like so:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; import Base<br>&gt;&gt;&gt; import MyAppBase<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any thoughts on this? Thx.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - jason<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
