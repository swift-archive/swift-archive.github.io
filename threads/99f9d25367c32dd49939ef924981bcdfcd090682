<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>When does `Data.init?(capacity:)` fail?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello there, I’m trying to optimize my code and reduce copying from different buffers into a new one.<br></p><p>I thought I just create a Data value with enough capacity and write directly into it. My problem is that Data.init?(capacity:) can fail, but why and when?<br></p><p>Can someone explain this behavior to me?<br></p><p>I’m sending data via TCP sockets and when recn function write directly into a Data struct.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/99f90682/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>When does `Data.init?(capacity:)` fail?</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 18, 2016 at 04:00:00am</p></header><div class="content"><p>This &lt;http://article.gmane.org/gmane.comp.lang.swift.user/1702&gt; might be<br>relavant. Basically, Data’s init will fail if memory can’t be allocated for<br>it.<br></p><p><br>On Fri, Jun 17, 2016 at 11:38 AM Adrian Zubarev via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hello there, I’m trying to optimize my code and reduce copying from<br>&gt; different buffers into a new one.<br>&gt;<br>&gt; I thought I just create a Data value with enough capacity and write<br>&gt; directly into it. My problem is that Data.init?(capacity:) can fail, but<br>&gt; why and when?<br>&gt;<br>&gt; Can someone explain this behavior to me?<br>&gt;<br>&gt; I’m sending data via TCP sockets and when recn function write directly<br>&gt; into a Data struct.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160618/c956046e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>When does `Data.init?(capacity:)` fail?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 19, 2016 at 06:00:00pm</p></header><div class="content"><p>As I understand it, that’s not an error in the ‘try’ sense of the word. If that failure happens, it’s a catastrophic issue which should bring down the application.<br></p><p>So the initialiser shouldn’t be failable; you’re right. File a bug at bugs.swift.org.<br></p><p>Karl<br></p><p>&gt; On 18 Jun 2016, at 06:06, Saagar Jha via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This &lt;http://article.gmane.org/gmane.comp.lang.swift.user/1702&gt; might be relavant. Basically, Data’s init will fail if memory can’t be allocated for it.<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Fri, Jun 17, 2016 at 11:38 AM Adrian Zubarev via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hello there, I’m trying to optimize my code and reduce copying from different buffers into a new one.<br>&gt; <br>&gt; I thought I just create a Data value with enough capacity and write directly into it. My problem is that Data.init?(capacity:) can fail, but why and when?<br>&gt; <br>&gt; Can someone explain this behavior to me?<br>&gt; <br>&gt; I’m sending data via TCP sockets and when recn function write directly into a Data struct.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; -- <br>&gt; -Saagar Jha<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160619/8f260b05/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>When does `Data.init?(capacity:)` fail?</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June 19, 2016 at 05:00:00pm</p></header><div class="content"><p>Not quite:<br></p><p>Swift’s policy on memory allocation failure is that fixed-size object<br>allocation is considered to be a runtime failure if it cannot be handled.<br>OTOH, APIs that can take a variable and arbitrarily large amount to<br>allocate should be failable. NSData falls into the later category.<br></p><p>Source &lt;http://article.gmane.org/gmane.comp.lang.swift.user/1709&gt;<br></p><p><br>On Sun, Jun 19, 2016 at 10:00 AM Karl &lt;razielim at gmail.com&gt; wrote:<br></p><p>&gt; As I understand it, that’s not an error in the ‘try’ sense of the word. If<br>&gt; that failure happens, it’s a catastrophic issue which should bring down the<br>&gt; application.<br>&gt;<br>&gt; So the initialiser shouldn’t be failable; you’re right. File a bug at<br>&gt; bugs.swift.org.<br>&gt;<br>&gt; Karl<br>&gt;<br>&gt; On 18 Jun 2016, at 06:06, Saagar Jha via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; This &lt;http://article.gmane.org/gmane.comp.lang.swift.user/1702&gt; might be<br>&gt; relavant. Basically, Data’s init will fail if memory can’t be allocated<br>&gt; for it.<br>&gt;<br>&gt;<br>&gt; On Fri, Jun 17, 2016 at 11:38 AM Adrian Zubarev via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello there, I’m trying to optimize my code and reduce copying from<br>&gt;&gt; different buffers into a new one.<br>&gt;&gt;<br>&gt;&gt; I thought I just create a Data value with enough capacity and write<br>&gt;&gt; directly into it. My problem is that Data.init?(capacity:) can fail, but<br>&gt;&gt; why and when?<br>&gt;&gt;<br>&gt;&gt; Can someone explain this behavior to me?<br>&gt;&gt;<br>&gt;&gt; I’m sending data via TCP sockets and when recn function write directly<br>&gt;&gt; into a Data struct.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; --<br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160619/c740741b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>When does `Data.init?(capacity:)` fail?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 19, 2016 at 07:00:00pm</p></header><div class="content"><p>I’ve got an answer on Twitter for that behavior: https://twitter.com/phausler/status/743927492096851969<br></p><p>I’ve anyone like me needs Data to have a specific capacity and still be non-optional, here is how I build a workaround (Data and Data.Deallocator aren’t fully implemented yet, thats why I’m using a custom deallocator rather then .free):<br></p><p>let capacity = 42 // or get the value somehow<br></p><p>let dataBufferPointer = UnsafeMutablePointer&lt;UInt8&gt;(allocatingCapacity: capacity)<br>        dataBufferPointer.initialize(with: 0, count: capacity)<br>         <br>// do some work and mutation to the data here<br></p><p>let deallocator = Data.Deallocator.custom {<br>             <br>    (buffer, _) in<br>             <br>    free(buffer)<br>}<br>         <br>// this initializer says you should not mutate that data after constructing it<br>let data = Data(bytesNoCopy: dataBufferPointer, count: capacity, deallocator: deallocator)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 19. Juni 2016 um 19:27:21, Saagar Jha (saagarjha28 at gmail.com) schrieb:<br></p><p>Not quite:<br></p><p>Swift’s policy on memory allocation failure is that fixed-size object allocation is considered to be a runtime failure if it cannot be handled. OTOH, APIs that can take a variable and arbitrarily large amount to allocate should be failable. NSData falls into the later category. <br>Source<br></p><p><br></p><p>On Sun, Jun 19, 2016 at 10:00 AM Karl &lt;razielim at gmail.com&gt; wrote:<br>As I understand it, that’s not an error in the ‘try’ sense of the word. If that failure happens, it’s a catastrophic issue which should bring down the application.<br></p><p>So the initialiser shouldn’t be failable; you’re right. File a bug at bugs.swift.org.<br></p><p>Karl<br></p><p>On 18 Jun 2016, at 06:06, Saagar Jha via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>This might be relavant. Basically, Data’s init will fail if memory can’t be allocated for it.<br></p><p><br></p><p>On Fri, Jun 17, 2016 at 11:38 AM Adrian Zubarev via swift-users &lt;swift-users at swift.org&gt; wrote:<br>Hello there, I’m trying to optimize my code and reduce copying from different buffers into a new one.<br></p><p>I thought I just create a Data value with enough capacity and write directly into it. My problem is that Data.init?(capacity:) can fail, but why and when?<br></p><p>Can someone explain this behavior to me?<br></p><p>I’m sending data via TCP sockets and when recn function write directly into a Data struct.<br></p><p><br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-users<br>--<br>-Saagar Jha<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>--<br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160619/ede94d7d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
