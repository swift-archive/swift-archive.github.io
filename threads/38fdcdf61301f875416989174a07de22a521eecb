<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Draft] Clarify interaction between comments &amp; operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>January  9, 2016 at 11:00:00am</p></header><div class="content"><p>Hi All,<br></p><p>Last month, I started a discussion about resolving some inconsistencies in the way operators interact with comments. I received some good feedback and then the break happened. I’ve since updated the draft proposal in a few small ways and would appreciate any additional comments folks have before submitting it for review. <br></p><p>The proposal is reproduced below and lives here: https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md&gt;<br></p><p>Thanks!<br>Jesse<br></p><p>Clarify interaction between comments &amp; operators<br></p><p>Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>Author(s): Jesse Rusak &lt;https://github.com/jder&gt;<br>Status: Review<br>Review manager: TBD<br> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#introduction&gt;Introduction<br></p><p>There are several inconsistencies in how comments are treated when determining whether an operator is prefix, postfix, or infix. They are sometimes treated as whitespace, sometimes as non-whitespace, and this differs depending on whether they are to the left or right of an operator, and the contents of the comment itself. This proposal suggests a uniform set of rules for how these cases should be parsed.<br></p><p>Swift-evolution thread: started here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003780.html&gt; and continued here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/003913.html&gt; and continued here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151228/004646.html&gt;.<br></p><p> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#motivation&gt;Motivation<br></p><p>At the moment, comments next to operators are usually treated as non-whitespace for the purpose of determining whether an operator is prefix/postfix/binary &lt;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID418&gt;, meaning that this fails to compile:<br></p><p>if /* comment */!foo { ... }<br>Because the &quot;!&quot; is parsed as binary operator (no whitespace on either side), rather than as a prefix operator, which seems undesirable. This behavior is also not consistently applied. For example, this currently works:<br></p><p>1 +/* comment */2<br>Because the &quot;+/*&quot; is treated as one token and sees the whitespace to its right and left, and so is parsed as a binary operator. <br></p><p>In order to resolve these and related issues, this proposes a general rule about the expected behavior.<br></p><p> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#proposed-solution&gt;Proposed solution<br></p><p>Comments should be treated as absent for all of the purposes in the “operators” section of the swift language reference: determining whether an operator is binary, prefix, or postfix, as well as the special rules around the “!” and “?” predefined operators. In other words, operators should &quot;see through&quot; a comment to the characters on the other side.<br></p><p>This means that adding a comment next to an operator (including between it and its operand) should not change whether the operator is treated as prefix, postfix, or binary, regardless of the contents of the comment.<br></p><p>For example, these should all be equivalent:<br></p><p>if !foo { ... }<br>if /* comment */!foo { ... }<br>if !/* comment */foo { ... }<br>As should these:<br></p><p>// whitespace on both sides<br>1 + 2<br>1 +/* comment */ 2<br></p><p>// no whitespace on either side<br>1+/*comment*/2<br>1+/* comment<br> comment */2<br>This is a predictable model, and is intended to be as unsurprising as possible, especially to beginners that are not used to troubleshooting parse errors.<br></p><p> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#detailed-design&gt;Detailed design<br></p><p>When parsing an operator character and trying to determine whether it has a whitespace character to either the right or left, we should skip comments (both possibly-nested slash-star comments, and slash-slash comments). The contents of the skipped comments (e.g. whether they include newlines) should have no effect on this determination.<br></p><p>For this purpose, slash-slash comments should be treated as extending up to but not including the trailing newline character (if present). So, for example, this should be treated as a postfix &quot;~&quot; operator:<br></p><p>let a = foo~// comment<br>bar()<br>The newline character after the end of the comment means the &quot;~&quot; has whitespace to its right, not bar. On the other hand, this should be parsed as a binary operator:<br></p><p>let a = foo~/* commment<br>*/bar()<br>As the newline appears only within the comment. (Note that this only matters for operators other than &quot;!&quot; and &quot;?&quot; because of their special rules.)<br></p><p>The language reference should also be updated to make clear that comments are ignored for these purposes.<br></p><p> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#impact-on-existing-code&gt;Impact on existing code<br></p><p>Only code with comments immediately next to operators will be affected. This is not expected to be very common, and could be fixed by adding/removing whitespace or moving the comment outside of the expression. It would probably be possible to produce fix-its for these. Here are some examples of the changes.<br></p><p>Some cases which would previously work will now produce an error (these are breaking changes):<br></p><p>1 /* */+2<br>1 +/* comment */2<br>1+/*comment*/ 2<br>Some cases which were previously errors will now work:<br></p><p>/* */!foo<br>!/* */foo<br></p><p>1+/* */2<br>1 /**/+ 2<br>Examples of things which will continue to be errors:<br></p><p>1/**/+ 2<br>1 +/*comment*/2<br>And things which will continue to work:<br></p><p>foo!// comment<br>foo/* */?.description<br>foo/* */!<br></p><p>1 +/**/ 2<br>1/**/+2<br>1+/**/2<br> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#alternatives-considered&gt;Alternatives considered<br></p><p> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#treat-comments-as-whitespace&gt;Treat comments as whitespace<br></p><p>We could instead specify that comments are treated as whitespace. This is a simpler rule, and it avoids some extra complications described above around slash-slash comments and multi-line slash-star comments. It is also easier for both the lexer and a human reader to determine whether an operator is binary or not, since if comments are always whitespace, you don&#39;t have to scan to the other side of a long comment to tell whether an operator has whitespace around it. For example:<br></p><p>1 +/* a very long comment */2<br>With the proposed changes, you can&#39;t tell just by looking near the “+” whether it is a binary or prefix operator. <br></p><p>On the other hand, this goes against the common mental model that comments are ignored when parsing. As a result, this is somewhat more surprising rule. This rule is also less flexible; that is, there are places which this completely prohibits comments which are permitted by the above proposal. (e.g. !/* */foo)<br></p><p> &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#a-more-general-rule&gt;A more general rule<br></p><p>Another alternative is a more general rule about how comments are handled everywhere in the language (e.g. there must be no effect when replacing a comment with a space character). This has the advantage of possibly resolving other ambiguities, but has potentially far-reaching consequences in various edge cases which are hard to fully enumerate (e.g. multi-line comments, comments within interpolated sequences inside of string literals, comments in lines which contain &quot;#&quot; directives, etc).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/38fdeecb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>[Draft] Clarify interaction between comments &amp; operators</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>January 10, 2016 at 01:00:00am</p></header><div class="content"><p>I think treat the comments as absence is a good idea. As the comments are<br>only for the programmers not for the compiler.<br></p><p>Besides, I think one rule should be added. The comments that are used to<br>generate the help documents or #pragma like should always be written in<br>separated lines and should never mixed in the code lines.<br></p><p>zhaoxin<br></p><p>On Sun, Jan 10, 2016 at 12:50 AM, Jesse Rusak via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi All,<br>&gt;<br>&gt; Last month, I started a discussion about resolving some inconsistencies in<br>&gt; the way operators interact with comments. I received some good feedback and<br>&gt; then the break happened. I’ve since updated the draft proposal in a few<br>&gt; small ways and would appreciate any additional comments folks have before<br>&gt; submitting it for review.<br>&gt;<br>&gt; The proposal is reproduced below and lives here:<br>&gt; https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md<br>&gt;<br>&gt; Thanks!<br>&gt; Jesse<br>&gt;<br>&gt; Clarify interaction between comments &amp; operators<br>&gt;<br>&gt;    - Proposal: SE-NNNN<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt;    - Author(s): Jesse Rusak &lt;https://github.com/jder&gt;<br>&gt;    - Status: *Review*<br>&gt;    - Review manager: TBD<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#introduction&gt;<br>&gt; Introduction<br>&gt;<br>&gt; There are several inconsistencies in how comments are treated when<br>&gt; determining whether an operator is prefix, postfix, or infix. They are<br>&gt; sometimes treated as whitespace, sometimes as non-whitespace, and this<br>&gt; differs depending on whether they are to the left or right of an operator,<br>&gt; and the contents of the comment itself. This proposal suggests a uniform<br>&gt; set of rules for how these cases should be parsed.<br>&gt;<br>&gt; Swift-evolution thread: started here<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003780.html&gt;<br>&gt;  and continued here<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/003913.html&gt;<br>&gt;  and continued here<br>&gt; &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151228/004646.html&gt;<br>&gt; .<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#motivation&gt;<br>&gt; Motivation<br>&gt;<br>&gt; At the moment, comments next to operators are usually treated as<br>&gt; non-whitespace for the purpose of determining whether an operator is<br>&gt; prefix/postfix/binary<br>&gt; &lt;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID418&gt;,<br>&gt; meaning that this fails to compile:<br>&gt;<br>&gt; if /* comment */!foo { ... }<br>&gt;<br>&gt; Because the &quot;!&quot; is parsed as binary operator (no whitespace on either<br>&gt; side), rather than as a prefix operator, which seems undesirable. This<br>&gt; behavior is also not consistently applied. For example, this currently<br>&gt; works:<br>&gt;<br>&gt; 1 +/* comment */2<br>&gt;<br>&gt; Because the &quot;+/*&quot; is treated as one token and sees the whitespace to its<br>&gt; right and left, and so is parsed as a binary operator.<br>&gt;<br>&gt; In order to resolve these and related issues, this proposes a general rule<br>&gt; about the expected behavior.<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#proposed-solution&gt;Proposed<br>&gt; solution<br>&gt;<br>&gt; Comments should be treated as absent for all of the purposes in the<br>&gt; “operators” section of the swift language reference: determining whether an<br>&gt; operator is binary, prefix, or postfix, as well as the special rules around<br>&gt; the “!” and “?” predefined operators. In other words, operators should &quot;see<br>&gt; through&quot; a comment to the characters on the other side.<br>&gt;<br>&gt; This means that adding a comment next to an operator (including between it<br>&gt; and its operand) should not change whether the operator is treated as<br>&gt; prefix, postfix, or binary, regardless of the contents of the comment.<br>&gt;<br>&gt; For example, these should all be equivalent:<br>&gt;<br>&gt; if !foo { ... }if /* comment */!foo { ... }if !/* comment */foo { ... }<br>&gt;<br>&gt; As should these:<br>&gt;<br>&gt; // whitespace on both sides1 + 21 +/* comment */ 2<br>&gt; // no whitespace on either side1+/*comment*/21+/* comment comment */2<br>&gt;<br>&gt; This is a predictable model, and is intended to be as unsurprising as<br>&gt; possible, especially to beginners that are not used to troubleshooting<br>&gt; parse errors.<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#detailed-design&gt;Detailed<br>&gt; design<br>&gt;<br>&gt; When parsing an operator character and trying to determine whether it has<br>&gt; a whitespace character to either the right or left, we should skip comments<br>&gt; (both possibly-nested slash-star comments, and slash-slash comments). The<br>&gt; contents of the skipped comments (e.g. whether they include newlines)<br>&gt; should have no effect on this determination.<br>&gt;<br>&gt; For this purpose, slash-slash comments should be treated as extending up<br>&gt; to but not including the trailing newline character (if present). So, for<br>&gt; example, this should be treated as a postfix &quot;~&quot; operator:<br>&gt;<br>&gt; let a = foo~// comment<br>&gt; bar()<br>&gt;<br>&gt; The newline character after the end of the comment means the &quot;~&quot; has<br>&gt; whitespace to its right, not bar. On the other hand, this should be<br>&gt; parsed as a binary operator:<br>&gt;<br>&gt; let a = foo~/* commment*/bar()<br>&gt;<br>&gt; As the newline appears only within the comment. (Note that this only<br>&gt; matters for operators other than &quot;!&quot; and &quot;?&quot; because of their special<br>&gt; rules.)<br>&gt;<br>&gt; The language reference should also be updated to make clear that comments<br>&gt; are ignored for these purposes.<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#impact-on-existing-code&gt;Impact<br>&gt; on existing code<br>&gt;<br>&gt; Only code with comments immediately next to operators will be affected.<br>&gt; This is not expected to be very common, and could be fixed by<br>&gt; adding/removing whitespace or moving the comment outside of the expression.<br>&gt; It would probably be possible to produce fix-its for these. Here are some<br>&gt; examples of the changes.<br>&gt;<br>&gt; Some cases which would previously work will now produce an error (these<br>&gt; are breaking changes):<br>&gt;<br>&gt; 1 /* */+21 +/* comment */21+/*comment*/ 2<br>&gt;<br>&gt; Some cases which were previously errors will now work:<br>&gt;<br>&gt; /* */!foo<br>&gt; !/* */foo<br>&gt; 1+/* */21 /**/+ 2<br>&gt;<br>&gt; Examples of things which will continue to be errors:<br>&gt;<br>&gt; 1/**/+ 21 +/*comment*/2<br>&gt;<br>&gt; And things which will continue to work:<br>&gt;<br>&gt; foo!// comment<br>&gt; foo/* */?.description<br>&gt; foo/* */!<br>&gt; 1 +/**/ 21/**/+21+/**/2<br>&gt;<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#alternatives-considered&gt;Alternatives<br>&gt; considered<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#treat-comments-as-whitespace&gt;Treat<br>&gt; comments as whitespace<br>&gt;<br>&gt; We could instead specify that comments are treated as whitespace. This is<br>&gt; a simpler rule, and it avoids some extra complications described above<br>&gt; around slash-slash comments and multi-line slash-star comments. It is also<br>&gt; easier for both the lexer and a human reader to determine whether an<br>&gt; operator is binary or not, since if comments are always whitespace, you<br>&gt; don&#39;t have to scan to the other side of a long comment to tell whether an<br>&gt; operator has whitespace around it. For example:<br>&gt;<br>&gt; 1 +/* a very long comment */2<br>&gt;<br>&gt; With the proposed changes, you can&#39;t tell just by looking near the “+”<br>&gt; whether it is a binary or prefix operator.<br>&gt;<br>&gt; On the other hand, this goes against the common mental model that comments<br>&gt; are ignored when parsing. As a result, this is somewhat more surprising<br>&gt; rule. This rule is also less flexible; that is, there are places which this<br>&gt; completely prohibits comments which are permitted by the above proposal.<br>&gt; (e.g. !/* */foo)<br>&gt;<br>&gt; &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#a-more-general-rule&gt;A<br>&gt; more general rule<br>&gt; Another alternative is a more general rule about how comments are handled<br>&gt; everywhere in the language (e.g. there must be no effect when replacing a<br>&gt; comment with a space character). This has the advantage of possibly<br>&gt; resolving other ambiguities, but has potentially far-reaching consequences<br>&gt; in various edge cases which are hard to fully enumerate (e.g. multi-line<br>&gt; comments, comments within interpolated sequences inside of string literals,<br>&gt; comments in lines which contain &quot;#&quot; directives, etc).<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>Owen Zhao<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160110/f51de739/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Draft] Clarify interaction between comments &amp; operators</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  9, 2016 at 02:00:00pm</p></header><div class="content"><p>I think it&#39;s a good idea to clarify how operators and comments &quot;work together&quot;.<br></p><p>Félix<br></p><p>&gt; Le 9 janv. 2016 à 12:25:22, 肇鑫 via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I think treat the comments as absence is a good idea. As the comments are only for the programmers not for the compiler.<br>&gt; <br>&gt; Besides, I think one rule should be added. The comments that are used to generate the help documents or #pragma like should always be written in separated lines and should never mixed in the code lines.<br>&gt; <br>&gt; zhaoxin<br>&gt; <br>&gt; On Sun, Jan 10, 2016 at 12:50 AM, Jesse Rusak via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;wrote:<br>&gt; Hi All,<br>&gt; <br>&gt; Last month, I started a discussion about resolving some inconsistencies in the way operators interact with comments. I received some good feedback and then the break happened. I’ve since updated the draft proposal in a few small ways and would appreciate any additional comments folks have before submitting it for review. <br>&gt; <br>&gt; The proposal is reproduced below and lives here: https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md&gt;<br>&gt; <br>&gt; Thanks!<br>&gt; Jesse<br>&gt; <br>&gt; Clarify interaction between comments &amp; operators<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt; Author(s): Jesse Rusak &lt;https://github.com/jder&gt;<br>&gt; Status: Review<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#introduction&gt;Introduction<br>&gt; <br>&gt; There are several inconsistencies in how comments are treated when determining whether an operator is prefix, postfix, or infix. They are sometimes treated as whitespace, sometimes as non-whitespace, and this differs depending on whether they are to the left or right of an operator, and the contents of the comment itself. This proposal suggests a uniform set of rules for how these cases should be parsed.<br>&gt; <br>&gt; Swift-evolution thread: started here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003780.html&gt; and continued here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/003913.html&gt; and continued here &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151228/004646.html&gt;.<br>&gt; <br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#motivation&gt;Motivation<br>&gt; <br>&gt; At the moment, comments next to operators are usually treated as non-whitespace for the purpose of determining whether an operator is prefix/postfix/binary &lt;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID418&gt;, meaning that this fails to compile:<br>&gt; <br>&gt; if /* comment */!foo { ... }<br>&gt; Because the &quot;!&quot; is parsed as binary operator (no whitespace on either side), rather than as a prefix operator, which seems undesirable. This behavior is also not consistently applied. For example, this currently works:<br>&gt; <br>&gt; 1 +/* comment */2<br>&gt; Because the &quot;+/*&quot; is treated as one token and sees the whitespace to its right and left, and so is parsed as a binary operator. <br>&gt; <br>&gt; In order to resolve these and related issues, this proposes a general rule about the expected behavior.<br>&gt; <br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; Comments should be treated as absent for all of the purposes in the “operators” section of the swift language reference: determining whether an operator is binary, prefix, or postfix, as well as the special rules around the “!” and “?” predefined operators. In other words, operators should &quot;see through&quot; a comment to the characters on the other side.<br>&gt; <br>&gt; This means that adding a comment next to an operator (including between it and its operand) should not change whether the operator is treated as prefix, postfix, or binary, regardless of the contents of the comment.<br>&gt; <br>&gt; For example, these should all be equivalent:<br>&gt; <br>&gt; if !foo { ... }<br>&gt; if /* comment */!foo { ... }<br>&gt; if !/* comment */foo { ... }<br>&gt; As should these:<br>&gt; <br>&gt; // whitespace on both sides<br>&gt; 1 + 2<br>&gt; 1 +/* comment */ 2<br>&gt; <br>&gt; // no whitespace on either side<br>&gt; 1+/*comment*/2<br>&gt; 1+/* comment<br>&gt;  comment */2<br>&gt; This is a predictable model, and is intended to be as unsurprising as possible, especially to beginners that are not used to troubleshooting parse errors.<br>&gt; <br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#detailed-design&gt;Detailed design<br>&gt; <br>&gt; When parsing an operator character and trying to determine whether it has a whitespace character to either the right or left, we should skip comments (both possibly-nested slash-star comments, and slash-slash comments). The contents of the skipped comments (e.g. whether they include newlines) should have no effect on this determination.<br>&gt; <br>&gt; For this purpose, slash-slash comments should be treated as extending up to but not including the trailing newline character (if present). So, for example, this should be treated as a postfix &quot;~&quot; operator:<br>&gt; <br>&gt; let a = foo~// comment<br>&gt; bar()<br>&gt; The newline character after the end of the comment means the &quot;~&quot; has whitespace to its right, not bar. On the other hand, this should be parsed as a binary operator:<br>&gt; <br>&gt; let a = foo~/* commment<br>&gt; */bar()<br>&gt; As the newline appears only within the comment. (Note that this only matters for operators other than &quot;!&quot; and &quot;?&quot; because of their special rules.)<br>&gt; <br>&gt; The language reference should also be updated to make clear that comments are ignored for these purposes.<br>&gt; <br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; Only code with comments immediately next to operators will be affected. This is not expected to be very common, and could be fixed by adding/removing whitespace or moving the comment outside of the expression. It would probably be possible to produce fix-its for these. Here are some examples of the changes.<br>&gt; <br>&gt; Some cases which would previously work will now produce an error (these are breaking changes):<br>&gt; <br>&gt; 1 /* */+2<br>&gt; 1 +/* comment */2<br>&gt; 1+/*comment*/ 2<br>&gt; Some cases which were previously errors will now work:<br>&gt; <br>&gt; /* */!foo<br>&gt; !/* */foo<br>&gt; <br>&gt; 1+/* */2<br>&gt; 1 /**/+ 2<br>&gt; Examples of things which will continue to be errors:<br>&gt; <br>&gt; 1/**/+ 2<br>&gt; 1 +/*comment*/2<br>&gt; And things which will continue to work:<br>&gt; <br>&gt; foo!// comment<br>&gt; foo/* */?.description<br>&gt; foo/* */!<br>&gt; <br>&gt; 1 +/**/ 2<br>&gt; 1/**/+2<br>&gt; 1+/**/2<br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#treat-comments-as-whitespace&gt;Treat comments as whitespace<br>&gt; <br>&gt; We could instead specify that comments are treated as whitespace. This is a simpler rule, and it avoids some extra complications described above around slash-slash comments and multi-line slash-star comments. It is also easier for both the lexer and a human reader to determine whether an operator is binary or not, since if comments are always whitespace, you don&#39;t have to scan to the other side of a long comment to tell whether an operator has whitespace around it. For example:<br>&gt; <br>&gt; 1 +/* a very long comment */2<br>&gt; With the proposed changes, you can&#39;t tell just by looking near the “+” whether it is a binary or prefix operator. <br>&gt; <br>&gt; On the other hand, this goes against the common mental model that comments are ignored when parsing. As a result, this is somewhat more surprising rule. This rule is also less flexible; that is, there are places which this completely prohibits comments which are permitted by the above proposal. (e.g. !/* */foo)<br>&gt; <br>&gt;  &lt;https://github.com/jder/swift-evolution/blob/comments-and-operators/proposals/0000-clarify-comments-and-operators.md#a-more-general-rule&gt;A more general rule<br>&gt; <br>&gt; Another alternative is a more general rule about how comments are handled everywhere in the language (e.g. there must be no effect when replacing a comment with a space character). This has the advantage of possibly resolving other ambiguities, but has potentially far-reaching consequences in various edge cases which are hard to fully enumerate (e.g. multi-line comments, comments within interpolated sequences inside of string literals, comments in lines which contain &quot;#&quot; directives, etc).<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; <br>&gt; Owen Zhao<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/c68f4d88/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Draft] Clarify interaction between comments &amp; operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>January  9, 2016 at 08:00:00pm</p></header><div class="content"><p>Thanks both of you for your positive feedback. One response below:<br></p><p>&gt; On Jan 9, 2016, at 2:26 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; I think it&#39;s a good idea to clarify how operators and comments &quot;work together&quot;.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 9 janv. 2016 à 12:25:22, 肇鑫 via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; I think treat the comments as absence is a good idea. As the comments are only for the programmers not for the compiler.<br>&gt;&gt; <br>&gt;&gt; Besides, I think one rule should be added. The comments that are used to generate the help documents or #pragma like should always be written in separated lines and should never mixed in the code lines.<br></p><p>I think that this is probably a good convention, but I’m not sure you’d want that as part of the language. Maybe something a style-checker would do?<br></p><p>- Jesse<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/9355260d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
