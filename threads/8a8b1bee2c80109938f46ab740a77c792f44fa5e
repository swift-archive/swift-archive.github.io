<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Suggestion] swift/utils/update-checkout should keep llvm/clang up-to-date</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  8, 2016 at 03:00:00pm</p></header><div class="content"><p>I was surprised to discover that swift/utils/update-checkout doesn&#39;t update LLVM/clang by default. Looking at the script, it supports a --all flag to update those (and llbuild too), but that led to the second surprise, which is that the script doesn&#39;t make any attempt to ensure it&#39;s checking out a compatible version of llvm/clang, it just runs `git fetch` and `git rebase FETCH_HEAD`.<br></p><p>Given that we&#39;re targeting specific stable snapshots of llvm/clang, and that we shouldn&#39;t be updating our local versions for new stable versions until it&#39;s actually been validated and local changes made if necessary, it seems to me that the script should actually know what specific versions of llvm/clang we want to be using, and should always update to those versions. It could have a separate flag to skip llvm/clang (instead of a flag to include them) for use by people who are intentionally testing newer versions, but the default behavior should update it.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[Suggestion] swift/utils/update-checkout should keep llvm/clang up-to-date</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>February  8, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 3:09 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I was surprised to discover that swift/utils/update-checkout doesn&#39;t update LLVM/clang by default. Looking at the script, it supports a --all flag to update those (and llbuild too), but that led to the second surprise, which is that the script doesn&#39;t make any attempt to ensure it&#39;s checking out a compatible version of llvm/clang, it just runs `git fetch` and `git rebase FETCH_HEAD`.<br></p><p>We ensure that the trunk stable clang/llvm branches are always in sync. So just rebasing head should be sufficient.<br></p><p>&gt; <br>&gt; Given that we&#39;re targeting specific stable snapshots of llvm/clang, and that we shouldn&#39;t be updating our local versions for new stable versions until it&#39;s actually been validated and local changes made if necessary, it seems to me that the script should actually know what specific versions of llvm/clang we want to be using, and should always update to those versions. It could have a separate flag to skip llvm/clang (instead of a flag to include them) for use by people who are intentionally testing newer versions, but the default behavior should update it.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Suggestion] swift/utils/update-checkout should keep llvm/clang up-to-date</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  8, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, Feb 8, 2016, at 03:33 PM, Michael Gottesman wrote:<br>&gt; <br>&gt; &gt; On Feb 8, 2016, at 3:09 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; I was surprised to discover that swift/utils/update-checkout doesn&#39;t update LLVM/clang by default. Looking at the script, it supports a --all flag to update those (and llbuild too), but that led to the second surprise, which is that the script doesn&#39;t make any attempt to ensure it&#39;s checking out a compatible version of llvm/clang, it just runs `git fetch` and `git rebase FETCH_HEAD`.<br>&gt; <br>&gt; We ensure that the trunk stable clang/llvm branches are always in sync. So just rebasing head should be sufficient.<br></p><p>Ah right, the llvm/clang checkouts are to copies of llvm/clang instead of to the original.<br></p><p>In that case, why doesn&#39;t the update-checkout script update llvm/clang by default? The only reason I can think of to not update it (besides for when you&#39;re intentionally targeting a non-stable version of llvm/clang because you&#39;re working on migrating it) is to avoid having to recompile llvm/clang if a backwards-compatible change happens to llvm/clang, but I assume the llvm/clang repos aren&#39;t updated very often, and when they are updated we all should probably update our checkouts of it even if we don&#39;t get compilation errors.<br></p><p>-Kevin Ballard<br></p><p>&gt; &gt; Given that we&#39;re targeting specific stable snapshots of llvm/clang, and that we shouldn&#39;t be updating our local versions for new stable versions until it&#39;s actually been validated and local changes made if necessary, it seems to me that the script should actually know what specific versions of llvm/clang we want to be using, and should always update to those versions. It could have a separate flag to skip llvm/clang (instead of a flag to include them) for use by people who are intentionally testing newer versions, but the default behavior should update it.<br>&gt; &gt; <br>&gt; &gt; -Kevin Ballard<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[Suggestion] swift/utils/update-checkout should keep llvm/clang up-to-date</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>February  8, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 3:54 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Feb 8, 2016, at 03:33 PM, Michael Gottesman wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 8, 2016, at 3:09 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was surprised to discover that swift/utils/update-checkout doesn&#39;t update LLVM/clang by default. Looking at the script, it supports a --all flag to update those (and llbuild too), but that led to the second surprise, which is that the script doesn&#39;t make any attempt to ensure it&#39;s checking out a compatible version of llvm/clang, it just runs `git fetch` and `git rebase FETCH_HEAD`.<br>&gt;&gt; <br>&gt;&gt; We ensure that the trunk stable clang/llvm branches are always in sync. So just rebasing head should be sufficient.<br>&gt; <br>&gt; Ah right, the llvm/clang checkouts are to copies of llvm/clang instead of to the original.<br>&gt; <br>&gt; In that case, why doesn&#39;t the update-checkout script update llvm/clang by default? The only reason I can think of to not update it (besides for when you&#39;re intentionally targeting a non-stable version of llvm/clang because you&#39;re working on migrating it) is to avoid having to recompile llvm/clang if a backwards-compatible change happens to llvm/clang, but I assume the llvm/clang repos aren&#39;t updated very often, and when they are updated we all should probably update our checkouts of it even if we don&#39;t get compilation errors.<br></p><p>That is most likely an oversight. Pull request and assign to me?<br></p><p>Michael<br></p><p>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt;&gt;&gt; Given that we&#39;re targeting specific stable snapshots of llvm/clang, and that we shouldn&#39;t be updating our local versions for new stable versions until it&#39;s actually been validated and local changes made if necessary, it seems to me that the script should actually know what specific versions of llvm/clang we want to be using, and should always update to those versions. It could have a separate flag to skip llvm/clang (instead of a flag to include them) for use by people who are intentionally testing newer versions, but the default behavior should update it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Suggestion] swift/utils/update-checkout should keep llvm/clang up-to-date</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  8, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 8, 2016, at 16:34, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 8, 2016, at 3:54 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 8, 2016, at 03:33 PM, Michael Gottesman wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 8, 2016, at 3:09 PM, Kevin Ballard via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was surprised to discover that swift/utils/update-checkout doesn&#39;t update LLVM/clang by default. Looking at the script, it supports a --all flag to update those (and llbuild too), but that led to the second surprise, which is that the script doesn&#39;t make any attempt to ensure it&#39;s checking out a compatible version of llvm/clang, it just runs `git fetch` and `git rebase FETCH_HEAD`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We ensure that the trunk stable clang/llvm branches are always in sync. So just rebasing head should be sufficient.<br>&gt;&gt; <br>&gt;&gt; Ah right, the llvm/clang checkouts are to copies of llvm/clang instead of to the original.<br>&gt;&gt; <br>&gt;&gt; In that case, why doesn&#39;t the update-checkout script update llvm/clang by default? The only reason I can think of to not update it (besides for when you&#39;re intentionally targeting a non-stable version of llvm/clang because you&#39;re working on migrating it) is to avoid having to recompile llvm/clang if a backwards-compatible change happens to llvm/clang, but I assume the llvm/clang repos aren&#39;t updated very often, and when they are updated we all should probably update our checkouts of it even if we don&#39;t get compilation errors.<br>&gt; <br>&gt; That is most likely an oversight. Pull request and assign to me?<br></p><p>IIRC Dmitri was concerned about doing more serialized network requests on slow connections.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160208/9f765655/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Suggestion] swift/utils/update-checkout should keep llvm/clang up-to-date</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>February  8, 2016 at 08:00:00pm</p></header><div class="content"><p>The script already updates 9 repositories by default, including the<br>various corelibs repos. I&#39;d say it&#39;s worth updating llvm and clang too,<br>since having an out-of-date llvm or clang can prevent swift from<br>building. I&#39;m not sure about llbuild, since I don&#39;t really know much<br>about it or how often it updates, but I&#39;m tempted to just get rid of the<br>--all flag entirely. I&#39;ll submit a PR.<br></p><p>-Kevin Ballard<br></p><p>On Mon, Feb 8, 2016, at 05:07 PM, Jordan Rose wrote:<br>&gt;<br>&gt;&gt; On Feb 8, 2016, at 16:34, Michael Gottesman via swift-dev &lt;swift-<br>&gt;&gt; dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Feb 8, 2016, at 3:54 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Feb 8, 2016, at 03:33 PM, Michael Gottesman wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Feb 8, 2016, at 3:09 PM, Kevin Ballard via swift-dev &lt;swift-<br>&gt;&gt;&gt;&gt;&gt; dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I was surprised to discover that swift/utils/update-checkout<br>&gt;&gt;&gt;&gt;&gt; doesn&#39;t update LLVM/clang by default. Looking at the script, it<br>&gt;&gt;&gt;&gt;&gt; supports a --all flag to update those (and llbuild too), but that<br>&gt;&gt;&gt;&gt;&gt; led to the second surprise, which is that the script doesn&#39;t make<br>&gt;&gt;&gt;&gt;&gt; any attempt to ensure it&#39;s checking out a compatible version of<br>&gt;&gt;&gt;&gt;&gt; llvm/clang, it just runs `git fetch` and `git rebase FETCH_HEAD`.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; We ensure that the trunk stable clang/llvm branches are always in<br>&gt;&gt;&gt;&gt; sync. So just rebasing head should be sufficient.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ah right, the llvm/clang checkouts are to copies of llvm/clang<br>&gt;&gt;&gt; instead of to the original.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In that case, why doesn&#39;t the update-checkout script update<br>&gt;&gt;&gt; llvm/clang by default? The only reason I can think of to not update<br>&gt;&gt;&gt; it (besides for when you&#39;re intentionally targeting a non-stable<br>&gt;&gt;&gt; version of llvm/clang because you&#39;re working on migrating it) is to<br>&gt;&gt;&gt; avoid having to recompile llvm/clang if a backwards-compatible<br>&gt;&gt;&gt; change happens to llvm/clang, but I assume the llvm/clang repos<br>&gt;&gt;&gt; aren&#39;t updated very often, and when they are updated we all should<br>&gt;&gt;&gt; probably update our checkouts of it even if we don&#39;t get compilation<br>&gt;&gt;&gt; errors.<br>&gt;&gt;<br>&gt;&gt; That is most likely an oversight. Pull request and assign to me?<br>&gt;<br>&gt; IIRC Dmitri was concerned about doing more serialized network requests<br>&gt; on slow connections.<br>&gt;<br>&gt; Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160208/60cb1a79/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
