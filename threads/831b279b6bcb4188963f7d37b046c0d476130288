<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d224c7d805dda70742539b077c4241fe?s=50"></div><header><strong>Llvm Toolchain packaging</strong> from <string>Patrice Kouame</string> &lt;pkouame at mac.com&gt;<p>August 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi all - Xcode doesn&#39;t recognize my llvm toolchain even though it was built right out of llvm trunk with llvm toolchain enabled. However, Swift toolchains are imported with ease into Xcode. Just by dropping into toolchains. I&#39;d like to find out more about how swift manages to package their toolchains so that Xcode doesn&#39;t complain about incompatibility. What&#39;s the secret sauce? Can any one point me in the right direction? Is it signing related? I&#39;m on a bleeding edge environment with Sierra public beta and Xcode 8 beta.<br>Currently I just change my path to &quot;enable&quot; my preferred clang toolchain, but would like to avoid that in the future by switching with xcode-select. Any help is greatly appreciated...<br></p><p>Patrice<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Llvm Toolchain packaging</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August 19, 2016 at 02:00:00pm</p></header><div class="content"><p>Is CompatibilityVersion set in the LLVM toolchains? IIRC, Xcode 8 requires it to be 2.<br></p><p> - Daniel<br></p><p>&gt; On Aug 19, 2016, at 1:12 PM, Patrice Kouame via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all - Xcode doesn&#39;t recognize my llvm toolchain even though it was built right out of llvm trunk with llvm toolchain enabled. However, Swift toolchains are imported with ease into Xcode. Just by dropping into toolchains. I&#39;d like to find out more about how swift manages to package their toolchains so that Xcode doesn&#39;t complain about incompatibility. What&#39;s the secret sauce? Can any one point me in the right direction? Is it signing related? I&#39;m on a bleeding edge environment with Sierra public beta and Xcode 8 beta.<br>&gt; Currently I just change my path to &quot;enable&quot; my preferred clang toolchain, but would like to avoid that in the future by switching with xcode-select. Any help is greatly appreciated...<br>&gt; <br>&gt; Patrice<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d224c7d805dda70742539b077c4241fe?s=50"></div><header><strong>Llvm Toolchain packaging</strong> from <string>Patrice Kouame</string> &lt;pkouame at mac.com&gt;<p>August 19, 2016 at 05:00:00pm</p></header><div class="content"><p>Excellent!  That did the trick…<br></p><p>Just out of curiosity, where is that documented?  The trunk llvm plist is an old Info.plist with an odd (dated) structure, I did have to “modernize it along the lines of the default Xcode default one.  Just wondering if there are any other fields I need to set.  Is there a unique swift toolchain packaging “project” I can study to figure all this out on my own?<br></p><p>Thanks much in advance,  <br></p><p>Regards, Patrice<br>&gt; On Aug 19, 2016, at 5:08 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; Is CompatibilityVersion set in the LLVM toolchains? IIRC, Xcode 8 requires it to be 2.<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Aug 19, 2016, at 1:12 PM, Patrice Kouame via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all - Xcode doesn&#39;t recognize my llvm toolchain even though it was built right out of llvm trunk with llvm toolchain enabled. However, Swift toolchains are imported with ease into Xcode. Just by dropping into toolchains. I&#39;d like to find out more about how swift manages to package their toolchains so that Xcode doesn&#39;t complain about incompatibility. What&#39;s the secret sauce? Can any one point me in the right direction? Is it signing related? I&#39;m on a bleeding edge environment with Sierra public beta and Xcode 8 beta.<br>&gt;&gt; Currently I just change my path to &quot;enable&quot; my preferred clang toolchain, but would like to avoid that in the future by switching with xcode-select. Any help is greatly appreciated...<br>&gt;&gt; <br>&gt;&gt; Patrice<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Llvm Toolchain packaging</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August 19, 2016 at 02:00:00pm</p></header><div class="content"><p>I don&#39;t think it is documented anywhere, but it is embedded in Swift&#39;s utils/build-script-impl.<br></p><p> - Daniel<br></p><p>&gt; On Aug 19, 2016, at 2:49 PM, Patrice Kouame &lt;pkouame at mac.com&gt; wrote:<br>&gt; <br>&gt; Excellent!  That did the trick…<br>&gt; <br>&gt; Just out of curiosity, where is that documented?  The trunk llvm plist is an old Info.plist with an odd (dated) structure, I did have to “modernize it along the lines of the default Xcode default one.  Just wondering if there are any other fields I need to set.  Is there a unique swift toolchain packaging “project” I can study to figure all this out on my own?<br>&gt; <br>&gt; Thanks much in advance,  <br>&gt; <br>&gt; Regards, Patrice<br>&gt;&gt; On Aug 19, 2016, at 5:08 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is CompatibilityVersion set in the LLVM toolchains? IIRC, Xcode 8 requires it to be 2.<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 19, 2016, at 1:12 PM, Patrice Kouame via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all - Xcode doesn&#39;t recognize my llvm toolchain even though it was built right out of llvm trunk with llvm toolchain enabled. However, Swift toolchains are imported with ease into Xcode. Just by dropping into toolchains. I&#39;d like to find out more about how swift manages to package their toolchains so that Xcode doesn&#39;t complain about incompatibility. What&#39;s the secret sauce? Can any one point me in the right direction? Is it signing related? I&#39;m on a bleeding edge environment with Sierra public beta and Xcode 8 beta.<br>&gt;&gt;&gt; Currently I just change my path to &quot;enable&quot; my preferred clang toolchain, but would like to avoid that in the future by switching with xcode-select. Any help is greatly appreciated...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Patrice<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d224c7d805dda70742539b077c4241fe?s=50"></div><header><strong>Llvm Toolchain packaging</strong> from <string>Patrice Kouame</string> &lt;pkouame at mac.com&gt;<p>August 19, 2016 at 06:00:00pm</p></header><div class="content"><p>Cool.  Will probably post an issue with llvm.org &lt;http://llvm.org/&gt; , this should be fixed.  Dunno of it’s just a Sierra/Xcode beta issue.<br></p><p>&gt; On Aug 19, 2016, at 5:56 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t think it is documented anywhere, but it is embedded in Swift&#39;s utils/build-script-impl.<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Aug 19, 2016, at 2:49 PM, Patrice Kouame &lt;pkouame at mac.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Excellent!  That did the trick…<br>&gt;&gt; <br>&gt;&gt; Just out of curiosity, where is that documented?  The trunk llvm plist is an old Info.plist with an odd (dated) structure, I did have to “modernize it along the lines of the default Xcode default one.  Just wondering if there are any other fields I need to set.  Is there a unique swift toolchain packaging “project” I can study to figure all this out on my own?<br>&gt;&gt; <br>&gt;&gt; Thanks much in advance,  <br>&gt;&gt; <br>&gt;&gt; Regards, Patrice<br>&gt;&gt;&gt; On Aug 19, 2016, at 5:08 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is CompatibilityVersion set in the LLVM toolchains? IIRC, Xcode 8 requires it to be 2.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 19, 2016, at 1:12 PM, Patrice Kouame via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi all - Xcode doesn&#39;t recognize my llvm toolchain even though it was built right out of llvm trunk with llvm toolchain enabled. However, Swift toolchains are imported with ease into Xcode. Just by dropping into toolchains. I&#39;d like to find out more about how swift manages to package their toolchains so that Xcode doesn&#39;t complain about incompatibility. What&#39;s the secret sauce? Can any one point me in the right direction? Is it signing related? I&#39;m on a bleeding edge environment with Sierra public beta and Xcode 8 beta.<br>&gt;&gt;&gt;&gt; Currently I just change my path to &quot;enable&quot; my preferred clang toolchain, but would like to avoid that in the future by switching with xcode-select. Any help is greatly appreciated...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Patrice<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160819/a10663cd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
