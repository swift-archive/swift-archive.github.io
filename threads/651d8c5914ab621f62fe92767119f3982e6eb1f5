<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fa2575f192bfdb93dd4cb043545a5df4?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium at gmail.com&gt;<p>April 14, 2016 at 03:00:00pm</p></header><div class="content"><p>This is a common pattern for initialisers at the moment:<br></p><p>class Foo<br></p><p>{<br></p><p>let foo : String<br></p><p>let bar : String<br></p><p>let barCount : Int<br></p><p>let baz : Int<br></p><p><br>init(foo: String, bar: String, baz: Int)<br></p><p>{<br></p><p>self.foo = foo<br></p><p>self.bar = bar<br></p><p>self.baz = baz<br></p><p>barCount = bar.characters.count<br></p><p>}<br></p><p>}<br></p><p>This involves a lot of using &#39;self.&#39;. For those who prefer not to use<br>&#39;self.&#39; explicitly everywhere, this is probably the main place it gets<br>used. It&#39;s a lot of boilerplate code.<br></p><p>How would it be if, like default variables, we could pack some of that<br>information into the argument tuple, and unify parameters with properties<br>immediately?<br></p><p>class Foo<br></p><p>{<br></p><p>let foo : String<br></p><p>let bar : String<br></p><p>let barCount : Int<br></p><p>let baz : Int<br></p><p><br>init(self.foo: String, self.bar: String, self.baz: Int)<br></p><p>{<br></p><p>barCount = bar.characters.count<br></p><p>}<br></p><p>}<br></p><p>Less boilerplate, more focus on the properties which need to be generated.<br></p><p>Thoughts?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/651db1f5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>April 14, 2016 at 05:00:00pm</p></header><div class="content"><p>There has been a long debate about something similar:<br>[Proposal Draft] Flexible memberwise initialization &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/727&gt;<br></p><p>Afair there has been a general agreement that the current boilerplate is ugly, but all suggested alternatives had flaws as well (and init is already a complicated topic).<br>I&#39;m quite sure a variant of your idea has been discussed, but didn&#39;t turn into a formal proposal.<br>Getting rid of a third of the boilerplate wouldn&#39;t be bad, and imho some additional characters could be saved if you skip the type declarations (this would also make it easier to refactor).<br>The linked proposal had less boilerplate, but much higher complexity.<br></p><p>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/582e89c8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Unifying init parameters with properties</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 14, 2016 at 07:00:00pm</p></header><div class="content"><p>So I suggest to discuss some &quot;middle&quot; solution: not too complex, but that <br>will improve our live. I believe this (in subject) proposal don&#39;t require a <br>lot of changes in Swift, it seems more like sugar<br></p><p>Compiler &quot;just&quot; can replace<br></p><p>init (self.a: Int, self.b: String) {<br>   //...<br>}<br></p><p>to<br></p><p>init (a: Int, b: String) {<br>   self.a = a<br>   self.b = b<br>   //...<br>}<br></p><p>Yes, I understand that we can actually omit types for init(as each prop has <br>its own type already) :<br></p><p>init (self.a, self.b, someOther: String) {<br>//...<br>}<br></p><p>But I&#39;m afraid this brokes Swift parser a lot(so probably it is complex to <br>implement this) and IMO init becomes not explicit on types of parameters <br>when just looking at it(we need to go to each property to find this out). <br>So I personally -1 for such skipping of types.<br></p><p>On 14.04.2016 18:41, Tino Heth via swift-evolution wrote:<br>&gt; There has been a long debate about something similar:<br>&gt; [Proposal Draft] Flexible memberwise initialization<br>&gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/727&gt;<br>&gt;<br>&gt; Afair there has been a general agreement that the current boilerplate is<br>&gt; ugly, but all suggested alternatives had flaws as well (and init is already<br>&gt; a complicated topic).<br>&gt; I&#39;m quite sure a variant of your idea has been discussed, but didn&#39;t turn<br>&gt; into a formal proposal.<br>&gt; Getting rid of a third of the boilerplate wouldn&#39;t be bad, and imho some<br>&gt; additional characters could be saved if you skip the type declarations<br>&gt; (this would also make it easier to refactor).<br>&gt; The linked proposal had less boilerplate, but much higher complexity.<br>&gt;<br>&gt; Tino<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
