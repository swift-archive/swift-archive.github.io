<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>[Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br></p><p>The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>- method parameters<br>- array and dictionary literals<br>- tuples<br>[anything else?]<br></p><p>SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br></p><p>This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br></p><p>So, first question:<br>What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br></p><p>Tino<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/d85ace59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 17, 2016 at 09:00:00pm</p></header><div class="content"><p>On 17.05.2016 21:06, Tino Heth wrote:<br>&gt; - method parameters<br>&gt; - array and dictionary literals<br>&gt; - tuples<br>&gt; [anything else?]<br></p><p>list of generic types:<br>func f&lt;T,U,V&gt;(t: T, u: U, v: V) {<br>  ..<br>}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 17, 2016 at 07:00:00pm</p></header><div class="content"><p>I don&#39;t like this idea so -1 from me.<br></p><p>Most languages allow that extra comma at the end of a list and sure that<br>eases reordering a list but making them optional at all lines may make the<br>code confusing to read and put an extra job at the compiler to decide<br>whether a line is a new item or continuation from the previous line. This<br>may even be simpler to implement than I think but the code may become more<br>prone to errors as I may forget an item spans across two or more lines and<br>thus harder to read. If the clarity of code is a premisse of Swift, I think<br>this change would go against it.<br></p><p>- Leonardo<br></p><p>On 17 May 2016 at 15:22, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 17.05.2016 21:06, Tino Heth wrote:<br>&gt;<br>&gt;&gt; - method parameters<br>&gt;&gt; - array and dictionary literals<br>&gt;&gt; - tuples<br>&gt;&gt; [anything else?]<br>&gt;&gt;<br>&gt;<br>&gt; list of generic types:<br>&gt; func f&lt;T,U,V&gt;(t: T, u: U, v: V) {<br>&gt;  ..<br>&gt; }<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/691fed78/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 11:22 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On 17.05.2016 21:06, Tino Heth wrote:<br>&gt;&gt; - method parameters<br>&gt;&gt; - array and dictionary literals<br>&gt;&gt; - tuples<br>&gt;&gt; [anything else?]<br>&gt; <br>&gt; list of generic types:<br>&gt; func f&lt;T,U,V&gt;(t: T, u: U, v: V) {<br>&gt; ..<br>&gt; }<br></p><p>This  would mean that we have to disambiguate generic parameter lists from comparison operators across lines:<br></p><p>	// Is this `a&lt;b, c&gt;(d)`, or `(a &lt; b); (c &gt; (d))` ?<br>	a &lt; b<br>	c &gt; (d)<br></p><p>Maybe our existing lookahead rule is still sufficiently unlikely to misparse it (since we require a &lt; to be followed by the type grammar, then followed by a &#39;&gt;.&#39; or &#39;&gt;(&#39; to parse as a generic param list), but that&#39;s something that&#39;d have to be explored.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 18, 2016 at 09:00:00am</p></header><div class="content"><p>+1 for this feature.<br>I don&#39;t see any problem with it, just like we all don&#39;t see any problem <br>with optional semicolon for code lines.<br>But I don&#39;t know if it will be possible(not too hard) to implement.<br></p><p>On 17.05.2016 21:06, Tino Heth wrote:<br>&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing<br>&gt; commas in parameter lists and tuples]<br>&gt;<br>&gt; The option to skip semicolons for statements followed by a newline is only<br>&gt; a tiny convinience, yet it is one of the most favored differences to C (and<br>&gt; one of the most annoying things to remember when you have to switch from<br>&gt; Swift to do some coding in Objective-C).<br>&gt; While lists of statements don&#39;t need a special separator character anymore,<br>&gt; other lists still rely on commas to separate items:<br>&gt; - method parameters<br>&gt; - array and dictionary literals<br>&gt; - tuples<br>&gt; [anything else?]<br>&gt;<br>&gt; SE-0084 targets to make it easier to reorder list elements by allowing an<br>&gt; additional comma after the last element; afaics, the same can be achieved<br>&gt; by making all of those commas optional, as long as there is a newline to<br>&gt; separate the next item (without those newlines, SE-0084 makes less sense as<br>&gt; well).<br>&gt;<br>&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much<br>&gt; sense to combine those features (at least in actual source code).<br>&gt;<br>&gt; So, first question:<br>&gt; What are the downsides of this change? (question zero is &quot;are there any<br>&gt; other places where comma-separeted lists could be turned into<br>&gt; newline-separated lists?&quot;...)<br>&gt;<br>&gt; Tino<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>-1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br></p><p>&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt; <br>&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt; - method parameters<br>&gt; - array and dictionary literals<br>&gt; - tuples<br>&gt; [anything else?]<br>&gt; <br>&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt; <br>&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt; <br>&gt; So, first question:<br>&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt; <br>&gt; Tino<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/0336f5be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>I don’t really see what the issue with having to reintroduce commas would be? The losing track of where the items are separated?<br></p><p>Maybe there could be an Xcode key shortcut to toggle commas off and on for newline separated items, like the current toggler for comments.<br></p><p>&gt; On 18 May 2016, at 6:28 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br>&gt; <br>&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt;&gt; <br>&gt;&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt;&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt;&gt; - method parameters<br>&gt;&gt; - array and dictionary literals<br>&gt;&gt; - tuples<br>&gt;&gt; [anything else?]<br>&gt;&gt; <br>&gt;&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt;&gt; <br>&gt;&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt;&gt; <br>&gt;&gt; So, first question:<br>&gt;&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt;&gt; <br>&gt;&gt; Tino<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/41e4b0c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>It would cumbersome to transform to newline-separated list to a comma-seperated list, because you’d have to add a character on top of removing the newline.<br></p><p>&gt; On 18 May 2016, at 14:20, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don’t really see what the issue with having to reintroduce commas would be? The losing track of where the items are separated?<br>&gt; <br>&gt; Maybe there could be an Xcode key shortcut to toggle commas off and on for newline separated items, like the current toggler for comments.<br>&gt; <br>&gt;&gt; On 18 May 2016, at 6:28 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br>&gt;&gt; <br>&gt;&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt;&gt;&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt;&gt;&gt; - method parameters<br>&gt;&gt;&gt; - array and dictionary literals<br>&gt;&gt;&gt; - tuples<br>&gt;&gt;&gt; [anything else?]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, first question:<br>&gt;&gt;&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tino<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/cc94b294/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 18, 2016, at 8:08 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It would cumbersome to transform to newline-separated list to a comma-seperated list, because you’d have to add a character on top of removing the newline.<br></p><p>The way I edit code this would not add any extra keystrokes.  Select new line, insert comma rather than select new line and press delete.<br></p><p>This feature would be fantastic when making EDSLs in Swift.  It would help them come out much cleaner any time they include a comma separated list that is likely to be formatted on individual lines. <br></p><p>Big +1 from me.<br></p><p><br>&gt; <br>&gt;&gt; On 18 May 2016, at 14:20, Patrick Smith &lt;pgwsmith at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don’t really see what the issue with having to reintroduce commas would be? The losing track of where the items are separated?<br>&gt;&gt; <br>&gt;&gt; Maybe there could be an Xcode key shortcut to toggle commas off and on for newline separated items, like the current toggler for comments.<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 May 2016, at 6:28 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt;&gt;&gt;&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt;&gt;&gt;&gt; - method parameters<br>&gt;&gt;&gt;&gt; - array and dictionary literals<br>&gt;&gt;&gt;&gt; - tuples<br>&gt;&gt;&gt;&gt; [anything else?]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So, first question:<br>&gt;&gt;&gt;&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/a3a2b62b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Could you show me an example of a fictional EDSL that gets better with newline separated lists?<br></p><p>&gt; On 18 May 2016, at 16:02, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 18, 2016, at 8:08 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; It would cumbersome to transform to newline-separated list to a comma-seperated list, because you’d have to add a character on top of removing the newline.<br>&gt; <br>&gt; The way I edit code this would not add any extra keystrokes.  Select new line, insert comma rather than select new line and press delete.<br>&gt; <br>&gt; This feature would be fantastic when making EDSLs in Swift.  It would help them come out much cleaner any time they include a comma separated list that is likely to be formatted on individual lines. <br>&gt; <br>&gt; Big +1 from me.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 18 May 2016, at 14:20, Patrick Smith &lt;pgwsmith at gmail.com &lt;mailto:pgwsmith at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t really see what the issue with having to reintroduce commas would be? The losing track of where the items are separated?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe there could be an Xcode key shortcut to toggle commas off and on for newline separated items, like the current toggler for comments.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 May 2016, at 6:28 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt;&gt;&gt;&gt;&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt;&gt;&gt;&gt;&gt; - method parameters<br>&gt;&gt;&gt;&gt;&gt; - array and dictionary literals<br>&gt;&gt;&gt;&gt;&gt; - tuples<br>&gt;&gt;&gt;&gt;&gt; [anything else?]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So, first question:<br>&gt;&gt;&gt;&gt;&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/0ca4df52/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 10:51 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Could you show me an example of a fictional EDSL that gets better with newline separated lists?<br></p><p>I’ll do better than that.  I’ll show and example of a real EDSL I implemented in Ruby in the early days of iOS.  It was used to generate very efficient streaming SAX-style XML parsers which parsed the data directly into model objects without building an intermediate DOM (validating the data in the process).  The generated parsers were implemented in Objective-C with some use of C code in the implementation.<br></p><p>Here is a sample in Ruby:<br></p><p>object :attribute1, :class =&gt; :ObjectiveCClassName do<br>    integer :id<br>    string :description<br>    bool :is_active, :property =&gt; :isActive<br>    date :created_at, :property =&gt; :createdAt<br>    array :items do<br>        object :item, :class =&gt; :AnotherObjectiveCClass do<br>                float :amount<br>        end<br>    end<br>end<br></p><p>The EDSL was used to build a data structure describing the expected schema and how it maps to the model objects.  That schema was used to generate the parser.<br></p><p>You would probably do some things different in Swift but a relatively direct translation will suffice to demonstrate how removing commas is desirable.  This example will assume Swift is also the target language.  <br></p><p>Operators are used so that the structure of the EDSL follows the Ruby closer rather than nesting the array inside of the parameter list).  Please ignore the specific operator “names&quot;.  I just selected something arbitrary.<br></p><p>Here is what we would have in Swift with commas (I modified the EDSL slightly to make it more type-safe as it was intended to have only one child node for `array` to define the element type):<br></p><p>object (“attribute1”, type: ASwiftType) ++++ [<br>    integer (“id”),<br>    string (“description”),<br>    bool (“is_active”, property: “isActive”),<br>    date (“created_at”, property: “createdAt”),<br>    array (“items”) &gt;&gt;&gt;&gt; object (“item”, type: AnotherSwiftType) ++++ [<br>        float (“amount”)<br>    ]<br>]<br></p><p>And here without commas:<br></p><p>object (“attribute1”, type: ASwiftType) ++++ [<br>    integer (“id”)<br>    string (“description”)<br>    bool (“is_active”, property: “isActive”)<br>    date (“created_at”, property: “createdAt”)<br>    array (“items”) &gt;&gt;&gt;&gt; object (“item”, type: AnotherSwiftType) ++++ [<br>        float (“amount”)<br>    ]<br>]<br></p><p>The difference isn’t super significant, but IMO every bit of unnecessary / undesirable syntactic noise in an EDSL is a flaw.  The less noise the language requires the better it is for creating EDSLs.  You want to be able to approximate the syntax you might design from scratch relatively closely.  <br></p><p>In this case, items in the list are essentially statements / declarations in the EDSL.  You don’t want commas here for the same reason we appreciate the omission of semicolons as line terminators in Swift and other modern languages.<br></p><p>The obvious advantage of using Swift is that you can design the EDSL to have very strict types and reject anything invalid at compile time.<br></p><p>The Ruby still feels slightly cleaner to me because Ruby allows you to omit parentheses for expressions that only involve a single method call.  Ruby also has symbols which are lighter syntactically than string literals.  Both of these are also features that might be interesting to consider adding to Swift IMO.  For the sake of argument (but without considering whether that would be practical in the Swift grammar, and whether Swift would borrow Ruby’s colon for symbols) here is what you might be able to do in Swift if we do get those features:<br></p><p>(object :attribute1, type: ASwiftType) ++++ [<br>    integer :id<br>    string :description<br>    bool :is_active, property: :isActive<br>    date :created_at, property: :createdAt<br>    (array :items) &gt;&gt;&gt;&gt; (object item, type: AnotherSwiftType) ++++ [<br>        float :amount<br>    ]<br>]<br></p><p>This roughly as good as the Ruby, a language which is praised for the flexibility it allows in designing EDSLs.  Pretty cool!  (Of course while I loved it in Ruby, I imagine there would be a lot of controversy if we do ever consider allowing simple expressions to omit parentheses in Swift)<br></p><p><br>&gt; <br>&gt;&gt; On 18 May 2016, at 16:02, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On May 18, 2016, at 8:08 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; It would cumbersome to transform to newline-separated list to a comma-seperated list, because you’d have to add a character on top of removing the newline.<br>&gt;&gt; <br>&gt;&gt; The way I edit code this would not add any extra keystrokes.  Select new line, insert comma rather than select new line and press delete.<br>&gt;&gt; <br>&gt;&gt; This feature would be fantastic when making EDSLs in Swift.  It would help them come out much cleaner any time they include a comma separated list that is likely to be formatted on individual lines. <br>&gt;&gt; <br>&gt;&gt; Big +1 from me.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 May 2016, at 14:20, Patrick Smith &lt;pgwsmith at gmail.com &lt;mailto:pgwsmith at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t really see what the issue with having to reintroduce commas would be? The losing track of where the items are separated?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe there could be an Xcode key shortcut to toggle commas off and on for newline separated items, like the current toggler for comments.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 18 May 2016, at 6:28 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt;&gt;&gt;&gt;&gt;&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt;&gt;&gt;&gt;&gt;&gt; - method parameters<br>&gt;&gt;&gt;&gt;&gt;&gt; - array and dictionary literals<br>&gt;&gt;&gt;&gt;&gt;&gt; - tuples<br>&gt;&gt;&gt;&gt;&gt;&gt; [anything else?]<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; So, first question:<br>&gt;&gt;&gt;&gt;&gt;&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Tino<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/312a170d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>SE-0084 spinoff: Newlines as item separators</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>May 18, 2016 at 09:00:00am</p></header><div class="content"><p>Agreed with all of these points.<br></p><p>I’d personally like to see the ‘,’ disappear altogether, but not piece-wise like this.<br></p><p>-David<br></p><p>&gt; On May 18, 2016, at 1:28 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 I see one big downside. Contrary to statements, which rarely appear on the same line, other list elements are more frequently reformatted, from one line to multiple lines and back. For example, I&#39;ll try to find function declarations with too many arguments (formatted on multiple lines) and refactor them to reduce the number of arguments and reformat them on one line. This style refactoring would be made more difficult because it would force me to re-introduce commas if they had been removed. Summary: I&#39;m against this proposal because element lists can be frequently reformatted from one to multiple lines.<br>&gt; <br>&gt; On 17 May 2016, at 20:06, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; [Due to popular demand ;-) in the discussion of SE-0084: Allow trailing commas in parameter lists and tuples]<br>&gt;&gt; <br>&gt;&gt; The option to skip semicolons for statements followed by a newline is only a tiny convinience, yet it is one of the most favored differences to C (and one of the most annoying things to remember when you have to switch from Swift to do some coding in Objective-C).<br>&gt;&gt; While lists of statements don&#39;t need a special separator character anymore, other lists still rely on commas to separate items:<br>&gt;&gt; - method parameters<br>&gt;&gt; - array and dictionary literals<br>&gt;&gt; - tuples<br>&gt;&gt; [anything else?]<br>&gt;&gt; <br>&gt;&gt; SE-0084 targets to make it easier to reorder list elements by allowing an additional comma after the last element; afaics, the same can be achieved by making all of those commas optional, as long as there is a newline to separate the next item (without those newlines, SE-0084 makes less sense as well).<br>&gt;&gt; <br>&gt;&gt; This change is not incompatible with SE-0084, but imho it doesn&#39;t make much sense to combine those features (at least in actual source code).<br>&gt;&gt; <br>&gt;&gt; So, first question:<br>&gt;&gt; What are the downsides of this change? (question zero is &quot;are there any other places where comma-separeted lists could be turned into newline-separated lists?&quot;...)<br>&gt;&gt; <br>&gt;&gt; Tino<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/16d2d923/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
