<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8eeb9ac8c83f684a210d9a2f8f1eb14?s=50"></div><header><strong>SPM support for branches and commits</strong> from <string>Said Sikira</string> &lt;saidsikira at gmail.com&gt;<p>September  6, 2016 at 06:00:00am</p></header><div class="content"><p>Hi,<br></p><p>Our code is almost always developed and pushed in small incremental<br>changes. When we implement critical amount of changes in our code, we push<br>new version.<br></p><p>When adding dependencies to Package.swift file, we supply their repository<br>url and version we want to use. However, differentiating code only by it’s<br>version is not enough in some cases. When writing new code features, we use<br>branches. They enable all the mechanisms one needs to create, test and<br>deploy new features without polluting production environment.<br></p><p>I think that Swift Package Manager should have support for branches (and<br>commits). There are several reasons why this feature would greatly improve<br>developer workflow:<br></p><p>   1. Writing new features. Being able to specify branch in Package.swift<br>   would make creating and testing new features easier. You wouldn’t need to<br>   push new version to be able to use it in your Swift program. You would just<br>   specify the branch you’re working on.<br>   2. Differentiating between new Swift versions. This problem comes from<br>   the current Swift 2.2 -&gt; Swift 3.0 migration. Many framework developers use<br>   specific branches (swift–3, swift3.0) to work on migration of their API’s<br>   to Swift 3. However, you can’t use them in your Swift projects because they<br>   don’t live in the master branch in the repository. I’m sure this will also<br>   happen when Swift 3 starts migration to the Swift 4, until ABI becomes<br>   stable.<br></p><p>SPM should also have support for specifying commits. Specifying which<br>commit you want to use in your project dependency is not always a good<br>idea, but it’s necessary in some cases.<br></p><p>This shouldn’t be very hard to implement. We would need to update<br>PackageDescription and Get source from swift-package-manager repository to<br>enable specifying branches or commits. Pulling the branch source would just<br>be another parameter in git instruction.<br></p><p>Example:<br></p><p>// Specifying branch<br>let package = Package(<br>  name: &quot;SomePackage&quot;,<br>  dependencies: [<br>    .Package(url: &quot;https://repo-source.git&quot;, branch: &quot;new-feature&quot;)<br>  ]<br>)<br></p><p>// Specifying commits<br>let package = Package(<br>  name: &quot;SomePackage&quot;,<br>  dependencies: [<br>    .Package(url: &quot;https://repo-source.git&quot;, commit:<br>&quot;c336664020v4f94ed78cbe7447a39ae5ca0b6c11&quot;)<br>  ]<br>)<br></p><p>What are your thoughts on this subject?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/bfa6bda1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a7a98d998c4108fe9443d33575515bf?s=50"></div><header><strong>SPM support for branches and commits</strong> from <string>Guillaume DIDIER</string> &lt;guillaume.didier.2014 at polytechnique.org&gt;<p>September  6, 2016 at 03:00:00pm</p></header><div class="content"><p>I think that the ability to fetch a branch or a commit may be interesting<br>(basically anything that git understands), would be nice,<br>but with the caveat that for production use it is far better to use à fixed version (i.e. a tag).<br>We do not want that most packages are used by specifying the master branch.<br></p><p><br>Guillaume DIDIER <br>—<br>ÉCOLE POLYTECHNIQUE<br>91128 PALAISEAU CEDEX<br>guillaume.didier at polytechnique.edu &lt;mailto:guillaume.didier at polytechnique.edu?subject=&gt;<br>www.polytechnique.edu &lt;http://www.polytechnique.edu/&gt;<br>—<br></p><p>PS : I am new here, do not hesitate to correct me.<br></p><p>&gt; Le 6 sept. 2016 à 15:41, Said Sikira via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Our code is almost always developed and pushed in small incremental changes. When we implement critical amount of changes in our code, we push new version.<br>&gt; <br>&gt; When adding dependencies to Package.swift file, we supply their repository url and version we want to use. However, differentiating code only by it’s version is not enough in some cases. When writing new code features, we use branches. They enable all the mechanisms one needs to create, test and deploy new features without polluting production environment.<br>&gt; <br>&gt; I think that Swift Package Manager should have support for branches (and commits). There are several reasons why this feature would greatly improve developer workflow:<br>&gt; <br>&gt; Writing new features. Being able to specify branch in Package.swift would make creating and testing new features easier. You wouldn’t need to push new version to be able to use it in your Swift program. You would just specify the branch you’re working on.<br>&gt; Differentiating between new Swift versions. This problem comes from the current Swift 2.2 -&gt; Swift 3.0 migration. Many framework developers use specific branches (swift–3, swift3.0) to work on migration of their API’s to Swift 3. However, you can’t use them in your Swift projects because they don’t live in the master branch in the repository. I’m sure this will also happen when Swift 3 starts migration to the Swift 4, until ABI becomes stable.<br>&gt; SPM should also have support for specifying commits. Specifying which commit you want to use in your project dependency is not always a good idea, but it’s necessary in some cases.<br>&gt; <br>&gt; This shouldn’t be very hard to implement. We would need to update PackageDescription and Get source from swift-package-manager repository to enable specifying branches or commits. Pulling the branch source would just be another parameter in git instruction.<br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; // Specifying branch<br>&gt; let package = Package(<br>&gt;   name: &quot;SomePackage&quot;,<br>&gt;   dependencies: [<br>&gt;     .Package(url: &quot;https://repo-source.git &lt;https://repo-source.git/&gt;&quot;, branch: &quot;new-feature&quot;)<br>&gt;   ]<br>&gt; )<br>&gt; // Specifying commits<br>&gt; let package = Package(<br>&gt;   name: &quot;SomePackage&quot;,<br>&gt;   dependencies: [<br>&gt;     .Package(url: &quot;https://repo-source.git &lt;https://repo-source.git/&gt;&quot;, commit: &quot;c336664020v4f94ed78cbe7447a39ae5ca0b6c11&quot;)<br>&gt;   ]<br>&gt; )<br>&gt; What are your thoughts on this subject?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/f9f3b09a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8eeb9ac8c83f684a210d9a2f8f1eb14?s=50"></div><header><strong>SPM support for branches and commits</strong> from <string>Said Sikira</string> &lt;saidsikira at gmail.com&gt;<p>September  6, 2016 at 07:00:00am</p></header><div class="content"><p>Yes, I agree that tags are far better option for production use, but<br>development process stage would certainly benefit from possibility to track<br>specific branch or commit. Having to rely completely on versioned tags in<br>development stage would not be easy nor very productive.<br></p><p>Said<br></p><p>On September 6, 2016 at 3:49:06 PM, Guillaume DIDIER (<br>guillaume.didier.2014 at polytechnique.org) wrote:<br></p><p>I think that the ability to fetch a branch or a commit may be interesting<br>(basically anything that git understands), would be nice,<br>but with the caveat that for production use it is far better to use à fixed<br>version (i.e. a tag).<br>We do not want that most packages are used by specifying the master branch.<br></p><p><br>*Guillaume DIDIER *<br>—<br>*ÉCOLE POLYTECHNIQUE*<br>91128 PALAISEAU CEDEX<br>guillaume.didier at polytechnique.edu<br>&lt;guillaume.didier at polytechnique.edu?subject=&gt;<br>www.polytechnique.edu<br>—<br></p><p>PS : I am new here, do not hesitate to correct me.<br></p><p>Le 6 sept. 2016 à 15:41, Said Sikira via swift-evolution &lt;<br>swift-evolution at swift.org&gt; a écrit :<br></p><p>Hi,<br></p><p>Our code is almost always developed and pushed in small incremental<br>changes. When we implement critical amount of changes in our code, we push<br>new version.<br></p><p>When adding dependencies to Package.swift file, we supply their repository<br>url and version we want to use. However, differentiating code only by it’s<br>version is not enough in some cases. When writing new code features, we use<br>branches. They enable all the mechanisms one needs to create, test and<br>deploy new features without polluting production environment.<br></p><p>I think that Swift Package Manager should have support for branches (and<br>commits). There are several reasons why this feature would greatly improve<br>developer workflow:<br></p><p>   1. Writing new features. Being able to specify branch in Package.swift<br>   would make creating and testing new features easier. You wouldn’t need to<br>   push new version to be able to use it in your Swift program. You would just<br>   specify the branch you’re working on.<br>   2. Differentiating between new Swift versions. This problem comes from<br>   the current Swift 2.2 -&gt; Swift 3.0 migration. Many framework developers use<br>   specific branches (swift–3, swift3.0) to work on migration of their API’s<br>   to Swift 3. However, you can’t use them in your Swift projects because they<br>   don’t live in the master branch in the repository. I’m sure this will also<br>   happen when Swift 3 starts migration to the Swift 4, until ABI becomes<br>   stable.<br></p><p>SPM should also have support for specifying commits. Specifying which<br>commit you want to use in your project dependency is not always a good<br>idea, but it’s necessary in some cases.<br></p><p>This shouldn’t be very hard to implement. We would need to update<br>PackageDescription and Get source from swift-package-manager repository to<br>enable specifying branches or commits. Pulling the branch source would just<br>be another parameter in git instruction.<br></p><p>Example:<br></p><p>// Specifying branch<br>let package = Package(<br>  name: &quot;SomePackage&quot;,<br>  dependencies: [<br>    .Package(url: &quot;https://repo-source.git&quot;, branch: &quot;new-feature&quot;)<br>  ]<br>)<br></p><p>// Specifying commits<br>let package = Package(<br>  name: &quot;SomePackage&quot;,<br>  dependencies: [<br>    .Package(url: &quot;https://repo-source.git&quot;, commit:<br>&quot;c336664020v4f94ed78cbe7447a39ae5ca0b6c11&quot;)<br>  ]<br>)<br></p><p>What are your thoughts on this subject?<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/240fbfa6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e5bfbacb9ead452482f19041b9779dd?s=50"></div><header><strong>SPM support for branches and commits</strong> from <string>Daniel Leping</string> &lt;daniel at crossroadlabs.xyz&gt;<p>September  6, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 here. It becomes much more crucial when you work with finely grained<br>projects with each module in its own repo. Making a new release when you<br>push a fix becomes too much of job to do.<br></p><p>On Tue, Sep 6, 2016 at 5:08 PM, Said Sikira via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Yes, I agree that tags are far better option for production use, but<br>&gt; development process stage would certainly benefit from possibility to track<br>&gt; specific branch or commit. Having to rely completely on versioned tags in<br>&gt; development stage would not be easy nor very productive.<br>&gt;<br>&gt; Said<br>&gt;<br>&gt; On September 6, 2016 at 3:49:06 PM, Guillaume DIDIER (<br>&gt; guillaume.didier.2014 at polytechnique.org) wrote:<br>&gt;<br>&gt; I think that the ability to fetch a branch or a commit may be interesting<br>&gt; (basically anything that git understands), would be nice,<br>&gt; but with the caveat that for production use it is far better to use à<br>&gt; fixed version (i.e. a tag).<br>&gt; We do not want that most packages are used by specifying the master branch.<br>&gt;<br>&gt;<br>&gt; *Guillaume DIDIER *<br>&gt; —<br>&gt; *ÉCOLE POLYTECHNIQUE*<br>&gt; 91128 PALAISEAU CEDEX<br>&gt; guillaume.didier at polytechnique.edu<br>&gt; &lt;guillaume.didier at polytechnique.edu?subject=&gt;<br>&gt; www.polytechnique.edu<br>&gt; —<br>&gt;<br>&gt; PS : I am new here, do not hesitate to correct me.<br>&gt;<br>&gt; Le 6 sept. 2016 à 15:41, Said Sikira via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; Our code is almost always developed and pushed in small incremental<br>&gt; changes. When we implement critical amount of changes in our code, we push<br>&gt; new version.<br>&gt;<br>&gt; When adding dependencies to Package.swift file, we supply their repository<br>&gt; url and version we want to use. However, differentiating code only by it’s<br>&gt; version is not enough in some cases. When writing new code features, we use<br>&gt; branches. They enable all the mechanisms one needs to create, test and<br>&gt; deploy new features without polluting production environment.<br>&gt;<br>&gt; I think that Swift Package Manager should have support for branches (and<br>&gt; commits). There are several reasons why this feature would greatly improve<br>&gt; developer workflow:<br>&gt;<br>&gt;    1. Writing new features. Being able to specify branch in Package.swift<br>&gt;    would make creating and testing new features easier. You wouldn’t need to<br>&gt;    push new version to be able to use it in your Swift program. You would just<br>&gt;    specify the branch you’re working on.<br>&gt;    2. Differentiating between new Swift versions. This problem comes from<br>&gt;    the current Swift 2.2 -&gt; Swift 3.0 migration. Many framework developers use<br>&gt;    specific branches (swift–3, swift3.0) to work on migration of their API’s<br>&gt;    to Swift 3. However, you can’t use them in your Swift projects because they<br>&gt;    don’t live in the master branch in the repository. I’m sure this will also<br>&gt;    happen when Swift 3 starts migration to the Swift 4, until ABI becomes<br>&gt;    stable.<br>&gt;<br>&gt; SPM should also have support for specifying commits. Specifying which<br>&gt; commit you want to use in your project dependency is not always a good<br>&gt; idea, but it’s necessary in some cases.<br>&gt;<br>&gt; This shouldn’t be very hard to implement. We would need to update<br>&gt; PackageDescription and Get source from swift-package-manager repository to<br>&gt; enable specifying branches or commits. Pulling the branch source would just<br>&gt; be another parameter in git instruction.<br>&gt;<br>&gt; Example:<br>&gt;<br>&gt; // Specifying branch<br>&gt; let package = Package(<br>&gt;   name: &quot;SomePackage&quot;,<br>&gt;   dependencies: [<br>&gt;     .Package(url: &quot;https://repo-source.git&quot;, branch: &quot;new-feature&quot;)<br>&gt;   ]<br>&gt; )<br>&gt;<br>&gt; // Specifying commits<br>&gt; let package = Package(<br>&gt;   name: &quot;SomePackage&quot;,<br>&gt;   dependencies: [<br>&gt;     .Package(url: &quot;https://repo-source.git&quot;, commit: &quot;c336664020v4f94ed78cbe7447a39ae5ca0b6c11&quot;)<br>&gt;   ]<br>&gt; )<br>&gt;<br>&gt; What are your thoughts on this subject?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/973a6d46/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
