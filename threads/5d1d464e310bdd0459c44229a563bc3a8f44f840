<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Here&#39;s a multi-platform OpenGL loader for Swift.</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>If you tried using OpenGL with something other than Apple&#39;s framework then<br>you probably didn&#39;t get very far. The header files of GLEW and Epoxy aren&#39;t<br>fully understood by Swift. So I wrote some Swift code that generates some<br>Swift code using the XML file from Khronos. Now everything you usually get<br>from the headers is Swift code.<br></p><p>https://github.com/AE9RB/SwiftGL<br></p><p>The Demo folder contains an OpenGL equivalent of hello world. This is also<br>a good example to look at if you want to learn more about C bindings.<br></p><p>https://github.com/AE9RB/SwiftGL/tree/master/Demo<br></p><p>-david<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/5d1df840/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Here&#39;s a multi-platform OpenGL loader for Swift.</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 11, 2015 at 07:00:00pm</p></header><div class="content"><p>Nice! Having done OpenGL bindings for other languages, I know this isn&#39;t a trivial task. Giving the functions argument labels is a nice touch.<br></p><p>-Joe<br></p><p>&gt; On Dec 10, 2015, at 9:22 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; If you tried using OpenGL with something other than Apple&#39;s framework then you probably didn&#39;t get very far. The header files of GLEW and Epoxy aren&#39;t fully understood by Swift. So I wrote some Swift code that generates some Swift code using the XML file from Khronos. Now everything you usually get from the headers is Swift code.<br>&gt; <br>&gt; https://github.com/AE9RB/SwiftGL &lt;https://github.com/AE9RB/SwiftGL&gt;<br>&gt; <br>&gt; The Demo folder contains an OpenGL equivalent of hello world. This is also a good example to look at if you want to learn more about C bindings.<br>&gt; <br>&gt; https://github.com/AE9RB/SwiftGL/tree/master/Demo &lt;https://github.com/AE9RB/SwiftGL/tree/master/Demo&gt;<br>&gt; <br>&gt; -david<br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151211/7c8dd82b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Here&#39;s a multi-platform OpenGL loader for Swift.</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December 11, 2015 at 11:00:00pm</p></header><div class="content"><p>This is a great use case for multiline string literals! ðŸ˜…<br></p><p>&gt; On Dec 11, 2015, at 10:56 PM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Nice! Having done OpenGL bindings for other languages, I know this isn&#39;t a trivial task. Giving the functions argument labels is a nice touch.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 9:22 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If you tried using OpenGL with something other than Apple&#39;s framework then you probably didn&#39;t get very far. The header files of GLEW and Epoxy aren&#39;t fully understood by Swift. So I wrote some Swift code that generates some Swift code using the XML file from Khronos. Now everything you usually get from the headers is Swift code.<br>&gt;&gt; <br>&gt;&gt; https://github.com/AE9RB/SwiftGL<br>&gt;&gt; <br>&gt;&gt; The Demo folder contains an OpenGL equivalent of hello world. This is also a good example to look at if you want to learn more about C bindings.<br>&gt;&gt; <br>&gt;&gt; https://github.com/AE9RB/SwiftGL/tree/master/Demo<br>&gt;&gt; <br>&gt;&gt; -david<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151211/7274db1e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Here&#39;s a multi-platform OpenGL loader for Swift.</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>It&#39;s looking like the Epoxy requirement for SwiftGL is going away real soon<br>now. I was able to lookup the OpenGL symbols from pure Swift code. No<br>compiled C code is needed at all. What follows is roughly how I will do it.<br>It lazily loads the pointer the first time you use it. The Linux version is<br>only slightly different.<br></p><p>Does anyone know a way to do this without the unsafeBitCast?<br></p><p>import Darwin<br></p><p><br>let handle = dlopen(<br>&quot;/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL&quot;,<br>RTLD_LAZY)<br></p><p><br>func DLOADglGetIntegerv(a:GLenum, _ b:UnsafeMutablePointer&lt;GLint&gt;) -&gt; Void {<br></p><p>    glGetIntegerv = unsafeBitCast(dlsym(handle, &quot;glGetIntegerv&quot;),<br>glGetIntegerv.dynamicType)<br></p><p>    glGetIntegerv(a,b)<br></p><p>}<br></p><p><br>public var glGetIntegerv:@convention(c) (GLenum, UnsafeMutablePointer&lt;GLint&gt;)<br>-&gt; Void = { DLOADglGetIntegerv($0,$1) }<br></p><p><br>On Thu, Dec 10, 2015 at 9:22 PM, David Turnbull &lt;dturnbull at gmail.com&gt; wrote:<br></p><p>&gt; If you tried using OpenGL with something other than Apple&#39;s framework then<br>&gt; you probably didn&#39;t get very far. The header files of GLEW and Epoxy aren&#39;t<br>&gt; fully understood by Swift. So I wrote some Swift code that generates some<br>&gt; Swift code using the XML file from Khronos. Now everything you usually get<br>&gt; from the headers is Swift code.<br>&gt;<br>&gt; https://github.com/AE9RB/SwiftGL<br>&gt;<br>&gt; The Demo folder contains an OpenGL equivalent of hello world. This is also<br>&gt; a good example to look at if you want to learn more about C bindings.<br>&gt;<br>&gt; https://github.com/AE9RB/SwiftGL/tree/master/Demo<br>&gt;<br>&gt; -david<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151212/d1c25416/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Here&#39;s a multi-platform OpenGL loader for Swift.</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 14, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 12, 2015, at 1:39 PM, David Turnbull via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s looking like the Epoxy requirement for SwiftGL is going away real soon now. I was able to lookup the OpenGL symbols from pure Swift code. No compiled C code is needed at all. What follows is roughly how I will do it. It lazily loads the pointer the first time you use it. The Linux version is only slightly different.<br>&gt; <br>&gt; Does anyone know a way to do this without the unsafeBitCast?<br>&gt; <br>&gt; import Darwin<br>&gt; <br>&gt; let handle = dlopen(&quot;/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL&quot;, RTLD_LAZY)<br>&gt; <br>&gt; func DLOADglGetIntegerv(a:GLenum, _ b:UnsafeMutablePointer&lt;GLint&gt;) -&gt; Void {<br>&gt;     glGetIntegerv = unsafeBitCast(dlsym(handle, &quot;glGetIntegerv&quot;), glGetIntegerv.dynamicType)<br>&gt;     glGetIntegerv(a,b)<br>&gt; }<br>&gt; <br>&gt; public var glGetIntegerv:@convention(c) (GLenum, UnsafeMutablePointer&lt;GLint&gt;) -&gt; Void = { DLOADglGetIntegerv($0,$1) }<br></p><p>I think the unsafeBitCast is fundamentally necessary here to coerce the void pointer you get from dlsym to a C function pointer. I don&#39;t think it&#39;s a problem. This is pretty awesome!<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151214/cdccd7e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Here&#39;s a multi-platform OpenGL loader for Swift.</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>December 15, 2015 at 12:00:00am</p></header><div class="content"><p>On Mon, Dec 14, 2015 at 9:22 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt; I think the unsafeBitCast is fundamentally necessary here<br>&gt;<br></p><p>It&#39;s all generated code from a canonical XML source so really not at all<br>unsafe. Certainly no more unsafe than fixing up a C header file that<br>doesn&#39;t quite work with Swift.<br></p><p>-david (https://github.com/AE9RB/SwiftGL)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151215/b304d2c3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
