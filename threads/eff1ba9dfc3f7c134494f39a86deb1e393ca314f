<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d128cffeaf768e0ad7c47488aaa95f13?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Dominik Pich</string> &lt;dominik at pich.info&gt;<p>May  2, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello,<br>often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br></p><p>so how about we do the same as with try/catch where you can use try! and have a guard!<br></p><p>the guard! could just throw an exception …<br></p><p>regards<br>Dominik<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/eff1314f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>By existing semantics of the exclamation mark, ‘guard!&#39; would be expected to cause the application to fail fatally, not throw. This is the same as try!.<br></p><p>-DW<br></p><p>&gt; On May 2, 2016, at 1:09 PM, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>&gt; also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br>&gt; <br>&gt; so how about we do the same as with try/catch where you can use try! and have a guard!<br>&gt; <br>&gt; the guard! could just throw an exception …<br>&gt; <br>&gt; regards<br>&gt; Dominik<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/36ad57ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d128cffeaf768e0ad7c47488aaa95f13?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Dominik Pich</string> &lt;dominik at pich.info&gt;<p>May  2, 2016 at 10:00:00pm</p></header><div class="content"><p>yes. true. that’d be also totally fine.<br></p><p>my main issue is to make unwrapping easier ;)<br></p><p>&gt; On May 2, 2016, at 9:57 PM, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; By existing semantics of the exclamation mark, ‘guard!&#39; would be expected to cause the application to fail fatally, not throw. This is the same as try!.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On May 2, 2016, at 1:09 PM, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>&gt;&gt; also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br>&gt;&gt; <br>&gt;&gt; so how about we do the same as with try/catch where you can use try! and have a guard!<br>&gt;&gt; <br>&gt;&gt; the guard! could just throw an exception …<br>&gt;&gt; <br>&gt;&gt; regards<br>&gt;&gt; Dominik<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/d79d7247/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  2, 2016 at 04:00:00pm</p></header><div class="content"><p>We have that; it’s just ‘!’. :-)<br></p><p>Jordan<br></p><p>&gt; On May 2, 2016, at 12:09, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>&gt; also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br>&gt; <br>&gt; so how about we do the same as with try/catch where you can use try! and have a guard!<br>&gt; <br>&gt; the guard! could just throw an exception …<br>&gt; <br>&gt; regards<br>&gt; Dominik<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/78927c4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d128cffeaf768e0ad7c47488aaa95f13?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Dominik Pich</string> &lt;dominik at pich.info&gt;<p>May  3, 2016 at 08:00:00am</p></header><div class="content"><p>;) yes. I know I can write let x = y! but IMHO THAT is too brief again. <br>I like the fact that guard makes you look what you do… it is a little bit like assert(x != nil)<br></p><p>guard! let x = y<br></p><p>it reads awesome and everybody can more easily see it is a potentially fatal &amp; important call<br></p><p>&gt; On May 3, 2016, at 1:38 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; We have that; it’s just ‘!’. :-)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On May 2, 2016, at 12:09, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>&gt;&gt; also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br>&gt;&gt; <br>&gt;&gt; so how about we do the same as with try/catch where you can use try! and have a guard!<br>&gt;&gt; <br>&gt;&gt; the guard! could just throw an exception …<br>&gt;&gt; <br>&gt;&gt; regards<br>&gt;&gt; Dominik<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/a51ada6a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  3, 2016 at 06:00:00am</p></header><div class="content"><p>Besides the legacy operator `!=`, isn&#39;t virtually every place you see !<br>potentially fatal, for some definition of potential? ;)<br>On Tue, May 3, 2016 at 01:41 Dominik Pich via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; ;) yes. I know I can write let x = y! but IMHO THAT is too brief again.<br>&gt; I like the fact that *guard *makes you look what you do… it is a little<br>&gt; bit like assert(x != nil)<br>&gt;<br>&gt; guard! let x = y<br>&gt;<br>&gt; it reads awesome and everybody can more easily see it is a potentially<br>&gt; fatal &amp; important call<br>&gt;<br>&gt; On May 3, 2016, at 1:38 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt; We have that; it’s just ‘!’. :-)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On May 2, 2016, at 12:09, Dominik Pich via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello,<br>&gt; often the guard statement is used to only unwrap optionals. multiple<br>&gt; guards will cause a lot of ‘overhead’.<br>&gt; also often if it doesn’t work. there is no easy way we can gracefully<br>&gt; recover ;)<br>&gt;<br>&gt; so how about we do the same as with try/catch where you can use try! and<br>&gt; have a guard!<br>&gt;<br>&gt; the *guard!* could just throw an exception …<br>&gt;<br>&gt; regards<br>&gt; Dominik<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/ed2b78c7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>May  3, 2016 at 04:00:00pm</p></header><div class="content"><p>I’m on the side of the ‘!’ at the moment.<br></p><p>I see a lot of heat here going into hatred of the force unwrap operator, as if it should be avoided like the plague. I simply don’t see the need for such absolutism. It’s there for a reason.<br></p><p>There are definitely use cases where use of the force unwrap operator is unsafe. Specifically, a lot of direct property access shouldn’t be done with it because of the fact that even if you check, another thread may come in, switch the variable to “nil” and all of a sudden you have a crash despite your best efforts.<br></p><p>That said, if you properly reason about your code, the ! operator is a useful and reasonable access tool to unwrap the optional you know about.<br></p><p>I certainly don&#39;t agree that we need a language construct purely so we can write verbose things as a big scary warning.<br></p><p><br>&gt; On 3 May 2016, at 4:41 PM, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ;) yes. I know I can write let x = y! but IMHO THAT is too brief again. <br>&gt; I like the fact that guard makes you look what you do… it is a little bit like assert(x != nil)<br>&gt; <br>&gt; guard! let x = y<br>&gt; <br>&gt; it reads awesome and everybody can more easily see it is a potentially fatal &amp; important call<br>&gt; <br>&gt;&gt; On May 3, 2016, at 1:38 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We have that; it’s just ‘!’. :-)<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On May 2, 2016, at 12:09, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>&gt;&gt;&gt; also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; so how about we do the same as with try/catch where you can use try! and have a guard!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; the guard! could just throw an exception …<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; regards<br>&gt;&gt;&gt; Dominik<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/79e475ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>proposal for a even simpler guard.. =&gt; guard!</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May  2, 2016 at 11:00:00pm</p></header><div class="content"><p>+1. The force unwrap operator is basically a runtime assert that enforces the invariant that &quot;this value should not be nil at this point of use, and if it is nil the programmer made a mistake&quot;. It is a perfectly legitimate tool for writing code that can&#39;t otherwise be expressed (cleanly or at all) using the other type system constructs.<br></p><p>Likewise for all the other postfix-! keywords (&#39;as!&#39;, &#39;try!&#39;, etc).<br></p><p>Austin<br></p><p>&gt; On May 2, 2016, at 11:53 PM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m on the side of the ‘!’ at the moment.<br>&gt; <br>&gt; I see a lot of heat here going into hatred of the force unwrap operator, as if it should be avoided like the plague. I simply don’t see the need for such absolutism. It’s there for a reason.<br>&gt; <br>&gt; There are definitely use cases where use of the force unwrap operator is unsafe. Specifically, a lot of direct property access shouldn’t be done with it because of the fact that even if you check, another thread may come in, switch the variable to “nil” and all of a sudden you have a crash despite your best efforts.<br>&gt; <br>&gt; That said, if you properly reason about your code, the ! operator is a useful and reasonable access tool to unwrap the optional you know about.<br>&gt; <br>&gt; I certainly don&#39;t agree that we need a language construct purely so we can write verbose things as a big scary warning.<br>&gt; <br>&gt; <br>&gt;&gt; On 3 May 2016, at 4:41 PM, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ;) yes. I know I can write let x = y! but IMHO THAT is too brief again. <br>&gt;&gt; I like the fact that guard makes you look what you do… it is a little bit like assert(x != nil)<br>&gt;&gt; <br>&gt;&gt; guard! let x = y<br>&gt;&gt; <br>&gt;&gt; it reads awesome and everybody can more easily see it is a potentially fatal &amp; important call<br>&gt;&gt; <br>&gt;&gt;&gt; On May 3, 2016, at 1:38 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We have that; it’s just ‘!’. :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 2, 2016, at 12:09, Dominik Pich via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; often the guard statement is used to only unwrap optionals. multiple guards will cause a lot of ‘overhead’.<br>&gt;&gt;&gt;&gt; also often if it doesn’t work. there is no easy way we can gracefully recover ;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; so how about we do the same as with try/catch where you can use try! and have a guard!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; the guard! could just throw an exception …<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; regards<br>&gt;&gt;&gt;&gt; Dominik<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/99f06c19/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
