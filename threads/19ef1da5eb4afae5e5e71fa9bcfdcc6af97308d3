<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cb639bf23446015169a290e4aab5b4d8?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Grant Paul</string> &lt;grp at fb.com&gt;<p>March  8, 2016 at 10:00:00pm</p></header><div class="content"><p>## Introduction<br></p><p>Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br></p><p>    let person = Person(<br>       id: json[&#39;id&#39;],<br>       name: json[&#39;name&#39;],<br>       picture: Im2age(picture),<br>       friends: friends,<br>    )<br></p><p><br>## Motivation<br></p><p>It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br></p><p>Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br></p><p>However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br></p><p> - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br> - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br> - It’s more consistent with other Swift lists which do support trailing commas.<br></p><p><br>## Proposed Solution<br></p><p>The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br></p><p>    let person = Person(<br>        id: json[&#39;id&#39;],<br>        name: json[&#39;name&#39;],<br>        picture: Image(picture),<br>        friends: friends,<br>    )<br></p><p>    let tuple = (<br>       color,<br>       32,<br>    )<br></p><p><br>## Detailed Design<br></p><p>Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br></p><p>    let array = [<br>        2,<br>        4,<br>        8,<br>    ]<br></p><p>There should not be any impact to existing code from this proposal.<br></p><p>Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br></p><p> - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br> - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br></p><p><br>## Alternatives Considered<br></p><p>The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br></p><p>    let person =<br>        Person(id: json[&#39;id&#39;]<br>             , name: json[&#39;name&#39;]<br>             , picture: Image(picture)<br>             , friends: friends)<br></p><p>Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March  8, 2016 at 10:00:00pm</p></header><div class="content"><p>While I agree with the benefits to diffs, the main question is whether a trailing comma should represent a possible mistake or not. For example, if I have two values with two commas in a tuple did I mean that tuple to be two elements or three (forgetting to add the third)? The same issue could apply to functions, particularly if you’re dealing with functions/initialisers with multiple signatures that could lead to ambiguity.<br></p><p>Admittedly I like having the capability on arrays, but I do agree that it should be consistent, I’m just not sure whether removing trailing commas everywhere would be a good thing either, especially if leads to a that horrible leading comma syntax just to make diffs easier.<br></p><p>So I’m a +not sure at the moment, it bears some thinking about!<br></p><p>I wonder if it’d be possible to report the trailing comma as a mistake but only in certain cases; i.e- only if there actually is ambiguity with other function/initialiser variants, and likewise for tuples that have a known type. For example, the following would still be an error:<br></p><p>	let foo = (a:1, b:2,) // Not sure what you meant<br></p><p>But this wouldn’t be:<br></p><p>	let foo:(Int, Int) = (1, 2,) // Two for two, should be okay<br></p><p>I suppose this could be further enforced by only allowing the trailing comma on multi-line statements, since they don’t serve much purpose on a single line. In this case my second example would also fail, but the following wouldn’t:<br></p><p>	let foo:(Int, Int) = (<br>		a: 1234,<br>		b: 4321,<br>	)<br></p><p>Because it’s unambiguous, and the comma is of more use here.<br></p><p>I guess I’m a ±dunno at the moment, it bears some thinking about =D<br></p><p>&gt; On 8 Mar 2016, at 22:07, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  9, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; While I agree with the benefits to diffs, the main question is whether a trailing comma should represent a possible mistake or not. For example, if I have two values with two commas in a tuple did I mean that tuple to be two elements or three (forgetting to add the third)?<br></p><p>I think our type system is strong enough that most cases will be caught. Even if you assign a tuple through type inference, sooner or later you will pass it into something typed and it will fail to work properly.<br></p><p>&gt; The same issue could apply to functions, particularly if you’re dealing with functions/initialisers with multiple signatures that could lead to ambiguity.<br></p><p>For the same reason, I don&#39;t really worry about overloads. What I&#39;m not sure of with functions, though, is what&#39;s the use case? Function arguments aren&#39;t typically interchangeable, and most arguments include labels which would have to be corrected anyway. I don&#39;t see a lot of downside to supporting it in a parameter list, but I don&#39;t see much upside, either.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  8, 2016 at 02:00:00pm</p></header><div class="content"><p>+1, thanks for bringing it up.<br></p><p><br>&gt; On Mar 8, 2016, at 14:07, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  8, 2016 at 04:00:00pm</p></header><div class="content"><p>I like trailing commas in all the things, up to and including variadic arguments.<br></p><p>-- E<br></p><p>&gt; On Mar 8, 2016, at 3:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  8, 2016 at 04:00:00pm</p></header><div class="content"><p>Yes please.<br></p><p>&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02b3e471050a20a8e94732823c238cdf?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Nisse Bergman</string> &lt;nisse at potmo.com&gt;<p>March  9, 2016 at 01:00:00pm</p></header><div class="content"><p>-1<br>Let’s not go down this path and enable the javascript flamewar of trailing or non-trailing commas. <br></p><p>Nisse<br></p><p><br></p><p>&gt; On 09 Mar 2016, at 01:23, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes please.<br>&gt; <br>&gt;&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt;&gt; <br>&gt;&gt;   let person = Person(<br>&gt;&gt;      id: json[&#39;id&#39;],<br>&gt;&gt;      name: json[&#39;name&#39;],<br>&gt;&gt;      picture: Im2age(picture),<br>&gt;&gt;      friends: friends,<br>&gt;&gt;   )<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Motivation<br>&gt;&gt; <br>&gt;&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt;&gt; <br>&gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt;&gt; <br>&gt;&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt;&gt; <br>&gt;&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt;&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt;&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Proposed Solution<br>&gt;&gt; <br>&gt;&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt;&gt; <br>&gt;&gt;   let person = Person(<br>&gt;&gt;       id: json[&#39;id&#39;],<br>&gt;&gt;       name: json[&#39;name&#39;],<br>&gt;&gt;       picture: Image(picture),<br>&gt;&gt;       friends: friends,<br>&gt;&gt;   )<br>&gt;&gt; <br>&gt;&gt;   let tuple = (<br>&gt;&gt;      color,<br>&gt;&gt;      32,<br>&gt;&gt;   )<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Detailed Design<br>&gt;&gt; <br>&gt;&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt;&gt; <br>&gt;&gt;   let array = [<br>&gt;&gt;       2,<br>&gt;&gt;       4,<br>&gt;&gt;       8,<br>&gt;&gt;   ]<br>&gt;&gt; <br>&gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt;&gt; <br>&gt;&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt;&gt; <br>&gt;&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt;&gt; <br>&gt;&gt;   let person =<br>&gt;&gt;       Person(id: json[&#39;id&#39;]<br>&gt;&gt;            , name: json[&#39;name&#39;]<br>&gt;&gt;            , picture: Image(picture)<br>&gt;&gt;            , friends: friends)<br>&gt;&gt; <br>&gt;&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>March  9, 2016 at 02:00:00pm</p></header><div class="content"><p>+1, I don&#39;t remember ever making a mistake (in a trailing-comma-allowing<br>language) that would have been caught if trailing commas had been<br>considered an error. But I do remember editing commas a lot in languages in<br>which trailing commas are considered an error.<br></p><p>(I would also be in favor of whitespace-separated elements (instead of the<br>current comma+optionalButAlmostAlwaysInPracticeWhitespace-separated<br>elements), but I&#39;m 99% sure that would never be accepted by the community.)<br></p><p><br>On Wed, Mar 9, 2016 at 1:54 PM, Nisse Bergman via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1<br>&gt; Let’s not go down this path and enable the javascript flamewar of trailing<br>&gt; or non-trailing commas.<br>&gt;<br>&gt; Nisse<br>&gt;<br>&gt;<br>&gt;<br>&gt; &gt; On 09 Mar 2016, at 01:23, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Yes please.<br>&gt; &gt;<br>&gt; &gt;&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## Introduction<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Right now, Swift argument lists are not permitted to contain trailing<br>&gt; commas. To make multi-line calls easier, we propose allowing trailing<br>&gt; commas in argument (and tuple) syntax:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   let person = Person(<br>&gt; &gt;&gt;      id: json[&#39;id&#39;],<br>&gt; &gt;&gt;      name: json[&#39;name&#39;],<br>&gt; &gt;&gt;      picture: Im2age(picture),<br>&gt; &gt;&gt;      friends: friends,<br>&gt; &gt;&gt;   )<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## Motivation<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It’s common for functions to take a number of arguments. In some<br>&gt; languages, this can make it difficult to figure out what a function does,<br>&gt; leading to patterns like fluent interfaces and configuration objects.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure<br>&gt; parameters aren’t confused even when they’re of the same type. And compared<br>&gt; to Objective-C, it’s much easier to write a multi-line list of arguments in<br>&gt; Swift.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, with a parentheses placement style placing the closing<br>&gt; parentheses for a multi-line call on a new line, Swift does not support a<br>&gt; trailing comma. Trailing commas have a number of benefits:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; - It is easier to re-arrange lines (especially in certain text editors)<br>&gt; when all lines have commas.<br>&gt; &gt;&gt; - Line-based diffs (as used by most source control systems) only show<br>&gt; added lines when adding a new parameter to the end, rather than two lines<br>&gt; where one just adds the comma.<br>&gt; &gt;&gt; - It’s more consistent with other Swift lists which do support trailing<br>&gt; commas.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## Proposed Solution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The proposed solution is to allow and ignore trailing commas in<br>&gt; argument lists and tuples:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   let person = Person(<br>&gt; &gt;&gt;       id: json[&#39;id&#39;],<br>&gt; &gt;&gt;       name: json[&#39;name&#39;],<br>&gt; &gt;&gt;       picture: Image(picture),<br>&gt; &gt;&gt;       friends: friends,<br>&gt; &gt;&gt;   )<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   let tuple = (<br>&gt; &gt;&gt;      color,<br>&gt; &gt;&gt;      32,<br>&gt; &gt;&gt;   )<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## Detailed Design<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Support for trailing commas in argument lists and tuples would make<br>&gt; them consistent with Swift’s handling of array literals, which do support<br>&gt; trailing commas:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   let array = [<br>&gt; &gt;&gt;       2,<br>&gt; &gt;&gt;       4,<br>&gt; &gt;&gt;       8,<br>&gt; &gt;&gt;   ]<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Support for this syntax is also found in other programming languages<br>&gt; like Python, D, and Hack. It’s been proposed for JavaScript (positive<br>&gt; response) and PHP (rejected):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; &gt;&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ## Alternatives Considered<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The main alternative is the existing behavior. This has the benefit of<br>&gt; standardizing Swift code on a particular style. However, many people will<br>&gt; in practice continue to use a style regardless of support trailing commas,<br>&gt; especially for cross-language consistency. It could also lead to<br>&gt; JavaScript-inspired parameter ordering:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;   let person =<br>&gt; &gt;&gt;       Person(id: json[&#39;id&#39;]<br>&gt; &gt;&gt;            , name: json[&#39;name&#39;]<br>&gt; &gt;&gt;            , picture: Image(picture)<br>&gt; &gt;&gt;            , friends: friends)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Another alternative would be to support this syntax for function<br>&gt; parameters but not tuples. However, this would be an arbitrary<br>&gt; inconsistency.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/6f29b994/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>March  9, 2016 at 07:00:00am</p></header><div class="content"><p>+1 to support trailing commas<br></p><p>+1 to just whitespace too. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Mar 9, 2016, at 5:18 AM, Jens Persson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1, I don&#39;t remember ever making a mistake (in a trailing-comma-allowing language) that would have been caught if trailing commas had been considered an error. But I do remember editing commas a lot in languages in which trailing commas are considered an error.<br>&gt; <br>&gt; (I would also be in favor of whitespace-separated elements (instead of the current comma+optionalButAlmostAlwaysInPracticeWhitespace-separated elements), but I&#39;m 99% sure that would never be accepted by the community.)<br>&gt; <br>&gt; <br>&gt;&gt; On Wed, Mar 9, 2016 at 1:54 PM, Nisse Bergman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; -1<br>&gt;&gt; Let’s not go down this path and enable the javascript flamewar of trailing or non-trailing commas.<br>&gt;&gt; <br>&gt;&gt; Nisse<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; On 09 Mar 2016, at 01:23, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Yes please.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Introduction<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let person = Person(<br>&gt;&gt; &gt;&gt;      id: json[&#39;id&#39;],<br>&gt;&gt; &gt;&gt;      name: json[&#39;name&#39;],<br>&gt;&gt; &gt;&gt;      picture: Im2age(picture),<br>&gt;&gt; &gt;&gt;      friends: friends,<br>&gt;&gt; &gt;&gt;   )<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Motivation<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas.<br>&gt;&gt; &gt;&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt;&gt; &gt;&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Proposed Solution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let person = Person(<br>&gt;&gt; &gt;&gt;       id: json[&#39;id&#39;],<br>&gt;&gt; &gt;&gt;       name: json[&#39;name&#39;],<br>&gt;&gt; &gt;&gt;       picture: Image(picture),<br>&gt;&gt; &gt;&gt;       friends: friends,<br>&gt;&gt; &gt;&gt;   )<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let tuple = (<br>&gt;&gt; &gt;&gt;      color,<br>&gt;&gt; &gt;&gt;      32,<br>&gt;&gt; &gt;&gt;   )<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Detailed Design<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let array = [<br>&gt;&gt; &gt;&gt;       2,<br>&gt;&gt; &gt;&gt;       4,<br>&gt;&gt; &gt;&gt;       8,<br>&gt;&gt; &gt;&gt;   ]<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;&gt; &gt;&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Alternatives Considered<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let person =<br>&gt;&gt; &gt;&gt;       Person(id: json[&#39;id&#39;]<br>&gt;&gt; &gt;&gt;            , name: json[&#39;name&#39;]<br>&gt;&gt; &gt;&gt;            , picture: Image(picture)<br>&gt;&gt; &gt;&gt;            , friends: friends)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; http://www.bitcycle.com/<br>&gt; Phone: +46-73-753 24 62<br>&gt; E-mail: jens at bitcycle.com<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/92655e69/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/057e065f57ad1094ec9830932fbca63e?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Brentley Jones</string> &lt;contact at brentleyjones.com&gt;<p>March  9, 2016 at 01:00:00pm</p></header><div class="content"><p>+1<br></p><p>On Wed, Mar 9, 2016 at 7:18 AM Jens Persson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1, I don&#39;t remember ever making a mistake (in a trailing-comma-allowing<br>&gt; language) that would have been caught if trailing commas had been<br>&gt; considered an error. But I do remember editing commas a lot in languages in<br>&gt; which trailing commas are considered an error.<br>&gt;<br>&gt; (I would also be in favor of whitespace-separated elements (instead of the<br>&gt; current comma+optionalButAlmostAlwaysInPracticeWhitespace-separated<br>&gt; elements), but I&#39;m 99% sure that would never be accepted by the community.)<br>&gt;<br>&gt;<br>&gt; On Wed, Mar 9, 2016 at 1:54 PM, Nisse Bergman via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; -1<br>&gt;&gt; Let’s not go down this path and enable the javascript flamewar of<br>&gt;&gt; trailing or non-trailing commas.<br>&gt;&gt;<br>&gt;&gt; Nisse<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On 09 Mar 2016, at 01:23, Joe Groff via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Yes please.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Introduction<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Right now, Swift argument lists are not permitted to contain trailing<br>&gt;&gt; commas. To make multi-line calls easier, we propose allowing trailing<br>&gt;&gt; commas in argument (and tuple) syntax:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let person = Person(<br>&gt;&gt; &gt;&gt;      id: json[&#39;id&#39;],<br>&gt;&gt; &gt;&gt;      name: json[&#39;name&#39;],<br>&gt;&gt; &gt;&gt;      picture: Im2age(picture),<br>&gt;&gt; &gt;&gt;      friends: friends,<br>&gt;&gt; &gt;&gt;   )<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Motivation<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It’s common for functions to take a number of arguments. In some<br>&gt;&gt; languages, this can make it difficult to figure out what a function does,<br>&gt;&gt; leading to patterns like fluent interfaces and configuration objects.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure<br>&gt;&gt; parameters aren’t confused even when they’re of the same type. And compared<br>&gt;&gt; to Objective-C, it’s much easier to write a multi-line list of arguments in<br>&gt;&gt; Swift.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, with a parentheses placement style placing the closing<br>&gt;&gt; parentheses for a multi-line call on a new line, Swift does not support a<br>&gt;&gt; trailing comma. Trailing commas have a number of benefits:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; - It is easier to re-arrange lines (especially in certain text<br>&gt;&gt; editors) when all lines have commas.<br>&gt;&gt; &gt;&gt; - Line-based diffs (as used by most source control systems) only show<br>&gt;&gt; added lines when adding a new parameter to the end, rather than two lines<br>&gt;&gt; where one just adds the comma.<br>&gt;&gt; &gt;&gt; - It’s more consistent with other Swift lists which do support<br>&gt;&gt; trailing commas.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Proposed Solution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The proposed solution is to allow and ignore trailing commas in<br>&gt;&gt; argument lists and tuples:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let person = Person(<br>&gt;&gt; &gt;&gt;       id: json[&#39;id&#39;],<br>&gt;&gt; &gt;&gt;       name: json[&#39;name&#39;],<br>&gt;&gt; &gt;&gt;       picture: Image(picture),<br>&gt;&gt; &gt;&gt;       friends: friends,<br>&gt;&gt; &gt;&gt;   )<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let tuple = (<br>&gt;&gt; &gt;&gt;      color,<br>&gt;&gt; &gt;&gt;      32,<br>&gt;&gt; &gt;&gt;   )<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Detailed Design<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Support for trailing commas in argument lists and tuples would make<br>&gt;&gt; them consistent with Swift’s handling of array literals, which do support<br>&gt;&gt; trailing commas:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let array = [<br>&gt;&gt; &gt;&gt;       2,<br>&gt;&gt; &gt;&gt;       4,<br>&gt;&gt; &gt;&gt;       8,<br>&gt;&gt; &gt;&gt;   ]<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Support for this syntax is also found in other programming languages<br>&gt;&gt; like Python, D, and Hack. It’s been proposed for JavaScript (positive<br>&gt;&gt; response) and PHP (rejected):<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;&gt; &gt;&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; ## Alternatives Considered<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The main alternative is the existing behavior. This has the benefit of<br>&gt;&gt; standardizing Swift code on a particular style. However, many people will<br>&gt;&gt; in practice continue to use a style regardless of support trailing commas,<br>&gt;&gt; especially for cross-language consistency. It could also lead to<br>&gt;&gt; JavaScript-inspired parameter ordering:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   let person =<br>&gt;&gt; &gt;&gt;       Person(id: json[&#39;id&#39;]<br>&gt;&gt; &gt;&gt;            , name: json[&#39;name&#39;]<br>&gt;&gt; &gt;&gt;            , picture: Image(picture)<br>&gt;&gt; &gt;&gt;            , friends: friends)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Another alternative would be to support this syntax for function<br>&gt;&gt; parameters but not tuples. However, this would be an arbitrary<br>&gt;&gt; inconsistency.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>&gt; http://www.bitcycle.com/<br>&gt; Phone: +46-73-753 24 62<br>&gt; E-mail: jens at bitcycle.com<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/172ec6af/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March  9, 2016 at 03:00:00pm</p></header><div class="content"><p>JavaScript’s common convention (and weird looking!) to use leading commas is exactly because it can’t do trailing commas.<br></p><p>Swift already allows trailing commas in arrays. Even if not everyone will know or use this, I see zero harm in allowing trailing commas in argument lists and tuples.<br></p><p>+1. Because Why Not™.<br></p><p>— Radek<br></p><p>&gt; On 09 Mar 2016, at 13:54, Nisse Bergman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; Let’s not go down this path and enable the javascript flamewar of trailing or non-trailing commas. <br>&gt; <br>&gt; Nisse<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 09 Mar 2016, at 01:23, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes please.<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  let person = Person(<br>&gt;&gt;&gt;     id: json[&#39;id&#39;],<br>&gt;&gt;&gt;     name: json[&#39;name&#39;],<br>&gt;&gt;&gt;     picture: Im2age(picture),<br>&gt;&gt;&gt;     friends: friends,<br>&gt;&gt;&gt;  )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt;&gt;&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt;&gt;&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Proposed Solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  let person = Person(<br>&gt;&gt;&gt;      id: json[&#39;id&#39;],<br>&gt;&gt;&gt;      name: json[&#39;name&#39;],<br>&gt;&gt;&gt;      picture: Image(picture),<br>&gt;&gt;&gt;      friends: friends,<br>&gt;&gt;&gt;  )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  let tuple = (<br>&gt;&gt;&gt;     color,<br>&gt;&gt;&gt;     32,<br>&gt;&gt;&gt;  )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Detailed Design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  let array = [<br>&gt;&gt;&gt;      2,<br>&gt;&gt;&gt;      4,<br>&gt;&gt;&gt;      8,<br>&gt;&gt;&gt;  ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;&gt;&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  let person =<br>&gt;&gt;&gt;      Person(id: json[&#39;id&#39;]<br>&gt;&gt;&gt;           , name: json[&#39;name&#39;]<br>&gt;&gt;&gt;           , picture: Image(picture)<br>&gt;&gt;&gt;           , friends: friends)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March  9, 2016 at 03:00:00pm</p></header><div class="content"><p>I see the following an advantage of using trailing commas:<br></p><p>If using trailing commas, when adding an item at the end of array, only one line has to be changed (added). If not, two lines are diffed (comma + new element).<br></p><p>So yeah, +1. Because Why Not™. ¯\_(ツ)_/¯<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 09.03.2016, o godz. 15:02:<br>&gt; <br>&gt; JavaScript’s common convention (and weird looking!) to use leading commas is exactly because it can’t do trailing commas.<br>&gt; <br>&gt; Swift already allows trailing commas in arrays. Even if not everyone will know or use this, I see zero harm in allowing trailing commas in argument lists and tuples.<br>&gt; <br>&gt; +1. Because Why Not™.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 09 Mar 2016, at 13:54, Nisse Bergman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; Let’s not go down this path and enable the javascript flamewar of trailing or non-trailing commas. <br>&gt;&gt; <br>&gt;&gt; Nisse<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Mar 2016, at 01:23, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes please.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let person = Person(<br>&gt;&gt;&gt;&gt;    id: json[&#39;id&#39;],<br>&gt;&gt;&gt;&gt;    name: json[&#39;name&#39;],<br>&gt;&gt;&gt;&gt;    picture: Im2age(picture),<br>&gt;&gt;&gt;&gt;    friends: friends,<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt;&gt;&gt;&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt;&gt;&gt;&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Proposed Solution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let person = Person(<br>&gt;&gt;&gt;&gt;     id: json[&#39;id&#39;],<br>&gt;&gt;&gt;&gt;     name: json[&#39;name&#39;],<br>&gt;&gt;&gt;&gt;     picture: Image(picture),<br>&gt;&gt;&gt;&gt;     friends: friends,<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let tuple = (<br>&gt;&gt;&gt;&gt;    color,<br>&gt;&gt;&gt;&gt;    32,<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Detailed Design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let array = [<br>&gt;&gt;&gt;&gt;     2,<br>&gt;&gt;&gt;&gt;     4,<br>&gt;&gt;&gt;&gt;     8,<br>&gt;&gt;&gt;&gt; ]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;&gt;&gt;&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ## Alternatives Considered<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let person =<br>&gt;&gt;&gt;&gt;     Person(id: json[&#39;id&#39;]<br>&gt;&gt;&gt;&gt;          , name: json[&#39;name&#39;]<br>&gt;&gt;&gt;&gt;          , picture: Image(picture)<br>&gt;&gt;&gt;&gt;          , friends: friends)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/fa397b38/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>March  9, 2016 at 10:00:00am</p></header><div class="content"><p>+1. Although a minor point, it would make the writing of “code that generates code” a little easier, too.<br></p><p>I think I kind of like Haravikk’s idea of only allowing it on multi-line argument lists, though. It should probably at least be an alternative in the proposal.<br></p><p>-1 for mandatory spaces (not a part of this proposal). That should be in a linter IMO.<br></p><p>—CK<br></p><p>&gt; On Mar 8, 2016, at 2:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>March 10, 2016 at 10:00:00am</p></header><div class="content"><p>It feels intuitively wrong to me to change the language so that it accepts incorrect syntax just to make editing/merging/diffing easier.<br></p><p>A trailing comma is as likely to be a mistake as it is some sort of deliberately-taken convenience shortcut. Sometimes I deliberately leave unfinished expressions in place when I go off to do something else, knowing that by hitting ⌘-B the compiler will bring me right back to where I was when I return. I like that the Swift compiler is good at catching my mistakes.<br></p><p>Anyway, I&#39;d bet that for most developers, a vast majority of merge pain is caused by Xcode project files and not commas. If the goal is to address merge pain during development, that would be the place I&#39;d start.<br></p><p>That said, allowing whitespace between elements to act as a delimiter equivalent to a comma would seem to address the original concern, without leaving unsightly dangling commas at the end of things.<br></p><p><br></p><p><br>&gt; On Mar 8, 2016, at 5:07 PM, Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 10, 2016 at 07:00:00pm</p></header><div class="content"><p>-1<br> As code is read much more than it is written or diffed, I prefer its punctuation not to be misleading over saving a few keystrokes (and yes, I do not like them either, but I would like dangling commas even less).<br></p><p>-Thorsten <br></p><p>&gt; Am 08.03.2016 um 23:07 schrieb Grant Paul via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; ## Introduction<br>&gt; <br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt; <br>&gt;    let person = Person(<br>&gt;       id: json[&#39;id&#39;],<br>&gt;       name: json[&#39;name&#39;],<br>&gt;       picture: Im2age(picture),<br>&gt;       friends: friends,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Motivation<br>&gt; <br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt; <br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt; <br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt; <br>&gt; - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas. <br>&gt; - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt; - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt; <br>&gt; <br>&gt; ## Proposed Solution<br>&gt; <br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt; <br>&gt;    let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Image(picture),<br>&gt;        friends: friends,<br>&gt;    )<br>&gt; <br>&gt;    let tuple = (<br>&gt;       color,<br>&gt;       32,<br>&gt;    )<br>&gt; <br>&gt; <br>&gt; ## Detailed Design<br>&gt; <br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt; <br>&gt;    let array = [<br>&gt;        2,<br>&gt;        4,<br>&gt;        8,<br>&gt;    ]<br>&gt; <br>&gt; There should not be any impact to existing code from this proposal.<br>&gt; <br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt; <br>&gt; - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt; - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt; <br>&gt; <br>&gt; ## Alternatives Considered<br>&gt; <br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt; <br>&gt;    let person =<br>&gt;        Person(id: json[&#39;id&#39;]<br>&gt;             , name: json[&#39;name&#39;]<br>&gt;             , picture: Image(picture)<br>&gt;             , friends: friends)<br>&gt; <br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ea125c5cd93ba84769387c17c973e2b3?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>rintaro ishizaki</string> &lt;fs.output at gmail.com&gt;<p>March 11, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m against this proposal.<br></p><p>In Swift, like many other programming languages,<br>there are several purposes for function calling.<br></p><p>* Definition<br>    Person(name: &quot;Daniel&quot;, age: 28, address: &quot;...&quot;)<br>* Query<br>    obj.contains(id: &quot;ABC001&quot;, inBox: .Blue)<br>* Operation<br>    obj.tune(toChannel: &quot;CBS&quot;, using: .RCU)<br></p><p>For me, trailing comma for definition is OK:<br></p><p>    Person(<br>      name: &quot;Daniel&quot;,<br>      age: 28,<br>      countryCode: &quot;US&quot;,<br>    )<br></p><p>But not for others:<br></p><p>    obj.contains(<br>      id: &quot;ABC001&quot;,<br>      inBox: .Blue,<br>    )<br></p><p>    tv.tune(<br>      toChannel: &quot;CBS&quot;,<br>      using: .RCU,<br>    )<br></p><p>As an alternative, I propose: &quot;Allow omitting commas in function parameters&quot;<br>Like Objective-C, but only for multi-line.<br></p><p># OK<br>    fn(x: 1, y: 2, z: 3)<br>    fn(x: 1<br>        y: 2, z: 3<br>    )<br>    fn(x: 1, y: 2<br>        z: 3<br>    )<br>    fn(<br>        x: 1<br>        y: 2<br>        z: 3<br>    )<br>    fn(x: 1<br>        y: 2, z: 3)<br></p><p># NG<br>    fn(x: 1 y: 2 z: 3)<br>    fn(x: 1, y: 2, z: 3,)<br>    fn(<br>        x: 1,<br>        y: 2,<br>        z: 3,<br>    )<br></p><p> - It is easier to re-arrange lines<br> - Line-based diffs<br> - Easy to read<br></p><p>I don&#39;t think it&#39;s consistent with other parts in Swift,<br>but I also don&#39;t think function parameters are &quot;list&quot; or &quot;dictionary&quot;.<br>It&#39;s more like &quot;Who, what, when, where, why&quot;.<br></p><p>Could you please add this in your &quot;Alternatives Considered&quot; list? :)<br></p><p>2016-03-09 7:07 GMT+09:00 Grant Paul via swift-evolution<br>&lt;swift-evolution at swift.org&gt;:<br>&gt; ## Introduction<br>&gt;<br>&gt; Right now, Swift argument lists are not permitted to contain trailing commas. To make multi-line calls easier, we propose allowing trailing commas in argument (and tuple) syntax:<br>&gt;<br>&gt;     let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Im2age(picture),<br>&gt;        friends: friends,<br>&gt;     )<br>&gt;<br>&gt;<br>&gt; ## Motivation<br>&gt;<br>&gt; It’s common for functions to take a number of arguments. In some languages, this can make it difficult to figure out what a function does, leading to patterns like fluent interfaces and configuration objects.<br>&gt;<br>&gt; Swift, by contrast, handles this very well. Argument labels make sure parameters aren’t confused even when they’re of the same type. And compared to Objective-C, it’s much easier to write a multi-line list of arguments in Swift.<br>&gt;<br>&gt; However, with a parentheses placement style placing the closing parentheses for a multi-line call on a new line, Swift does not support a trailing comma. Trailing commas have a number of benefits:<br>&gt;<br>&gt;  - It is easier to re-arrange lines (especially in certain text editors) when all lines have commas.<br>&gt;  - Line-based diffs (as used by most source control systems) only show added lines when adding a new parameter to the end, rather than two lines where one just adds the comma.<br>&gt;  - It’s more consistent with other Swift lists which do support trailing commas.<br>&gt;<br>&gt;<br>&gt; ## Proposed Solution<br>&gt;<br>&gt; The proposed solution is to allow and ignore trailing commas in argument lists and tuples:<br>&gt;<br>&gt;     let person = Person(<br>&gt;         id: json[&#39;id&#39;],<br>&gt;         name: json[&#39;name&#39;],<br>&gt;         picture: Image(picture),<br>&gt;         friends: friends,<br>&gt;     )<br>&gt;<br>&gt;     let tuple = (<br>&gt;        color,<br>&gt;        32,<br>&gt;     )<br>&gt;<br>&gt;<br>&gt; ## Detailed Design<br>&gt;<br>&gt; Support for trailing commas in argument lists and tuples would make them consistent with Swift’s handling of array literals, which do support trailing commas:<br>&gt;<br>&gt;     let array = [<br>&gt;         2,<br>&gt;         4,<br>&gt;         8,<br>&gt;     ]<br>&gt;<br>&gt; There should not be any impact to existing code from this proposal.<br>&gt;<br>&gt; Support for this syntax is also found in other programming languages like Python, D, and Hack. It’s been proposed for JavaScript (positive response) and PHP (rejected):<br>&gt;<br>&gt;  - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;  - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;<br>&gt;<br>&gt; ## Alternatives Considered<br>&gt;<br>&gt; The main alternative is the existing behavior. This has the benefit of standardizing Swift code on a particular style. However, many people will in practice continue to use a style regardless of support trailing commas, especially for cross-language consistency. It could also lead to JavaScript-inspired parameter ordering:<br>&gt;<br>&gt;     let person =<br>&gt;         Person(id: json[&#39;id&#39;]<br>&gt;              , name: json[&#39;name&#39;]<br>&gt;              , picture: Image(picture)<br>&gt;              , friends: friends)<br>&gt;<br>&gt; Another alternative would be to support this syntax for function parameters but not tuples. However, this would be an arbitrary inconsistency.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9fa0dab2b53704212f29f6c5b1eeee58?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Tim Schmelter</string> &lt;tschmelter at gmail.com&gt;<p>March 14, 2016 at 08:00:00am</p></header><div class="content"><p>-1<br></p><p>If we agree with the Swift API Guidelines: &quot;Clarity at the point of use is<br>your most important goal&quot;, it seems to me that adding trailing commas to a<br>method/function signature reduces clarity significantly, with others on<br>this thread and the previous articulating the supporting reasons.<br></p><p>As an aside: I also eschew trailing commas in array declarations, but<br>recognized that this convention is well established in other languages, and<br>am resigned to letting the linter handle that case. I would look to do that<br>in this case as well.<br></p><p>--T<br></p><p><br>On Tue, Mar 8, 2016 at 2:07 PM, Grant Paul via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; ## Introduction<br>&gt;<br>&gt; Right now, Swift argument lists are not permitted to contain trailing<br>&gt; commas. To make multi-line calls easier, we propose allowing trailing<br>&gt; commas in argument (and tuple) syntax:<br>&gt;<br>&gt;     let person = Person(<br>&gt;        id: json[&#39;id&#39;],<br>&gt;        name: json[&#39;name&#39;],<br>&gt;        picture: Im2age(picture),<br>&gt;        friends: friends,<br>&gt;     )<br>&gt;<br>&gt;<br>&gt; ## Motivation<br>&gt;<br>&gt; It’s common for functions to take a number of arguments. In some<br>&gt; languages, this can make it difficult to figure out what a function does,<br>&gt; leading to patterns like fluent interfaces and configuration objects.<br>&gt;<br>&gt; Swift, by contrast, handles this very well. Argument labels make sure<br>&gt; parameters aren’t confused even when they’re of the same type. And compared<br>&gt; to Objective-C, it’s much easier to write a multi-line list of arguments in<br>&gt; Swift.<br>&gt;<br>&gt; However, with a parentheses placement style placing the closing<br>&gt; parentheses for a multi-line call on a new line, Swift does not support a<br>&gt; trailing comma. Trailing commas have a number of benefits:<br>&gt;<br>&gt;  - It is easier to re-arrange lines (especially in certain text editors)<br>&gt; when all lines have commas.<br>&gt;  - Line-based diffs (as used by most source control systems) only show<br>&gt; added lines when adding a new parameter to the end, rather than two lines<br>&gt; where one just adds the comma.<br>&gt;  - It’s more consistent with other Swift lists which do support trailing<br>&gt; commas.<br>&gt;<br>&gt;<br>&gt; ## Proposed Solution<br>&gt;<br>&gt; The proposed solution is to allow and ignore trailing commas in argument<br>&gt; lists and tuples:<br>&gt;<br>&gt;     let person = Person(<br>&gt;         id: json[&#39;id&#39;],<br>&gt;         name: json[&#39;name&#39;],<br>&gt;         picture: Image(picture),<br>&gt;         friends: friends,<br>&gt;     )<br>&gt;<br>&gt;     let tuple = (<br>&gt;        color,<br>&gt;        32,<br>&gt;     )<br>&gt;<br>&gt;<br>&gt; ## Detailed Design<br>&gt;<br>&gt; Support for trailing commas in argument lists and tuples would make them<br>&gt; consistent with Swift’s handling of array literals, which do support<br>&gt; trailing commas:<br>&gt;<br>&gt;     let array = [<br>&gt;         2,<br>&gt;         4,<br>&gt;         8,<br>&gt;     ]<br>&gt;<br>&gt; There should not be any impact to existing code from this proposal.<br>&gt;<br>&gt; Support for this syntax is also found in other programming languages like<br>&gt; Python, D, and Hack. It’s been proposed for JavaScript (positive response)<br>&gt; and PHP (rejected):<br>&gt;<br>&gt;  - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;  - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;<br>&gt;<br>&gt; ## Alternatives Considered<br>&gt;<br>&gt; The main alternative is the existing behavior. This has the benefit of<br>&gt; standardizing Swift code on a particular style. However, many people will<br>&gt; in practice continue to use a style regardless of support trailing commas,<br>&gt; especially for cross-language consistency. It could also lead to<br>&gt; JavaScript-inspired parameter ordering:<br>&gt;<br>&gt;     let person =<br>&gt;         Person(id: json[&#39;id&#39;]<br>&gt;              , name: json[&#39;name&#39;]<br>&gt;              , picture: Image(picture)<br>&gt;              , friends: friends)<br>&gt;<br>&gt; Another alternative would be to support this syntax for function<br>&gt; parameters but not tuples. However, this would be an arbitrary<br>&gt; inconsistency.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/cf90cb74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>[Draft] Allow trailing commas in argument lists</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>I continue to be in favor of trailing commas in arrays and enums, but<br>agree that for method/functions signatures and calls it&#39;s not so good.<br></p><p>However, in analogy to `;`s to separate statements on the same line, it<br>might be useful to consider commas in a similar light; that is, commas<br>would be required to separate arguments on the same line, but become<br>optional in multi-line statements. So:<br></p><p>     let person = Person(<br>        id: json[&#39;id&#39;]<br>        name: json[&#39;name&#39;]<br>        picture: Im2age(picture)<br>        friends: friends<br>     )<br>but<br>	let person = Person(id: json[&#39;id&#39;], name: json[&#39;name&#39;], picture:<br>Im2age(picture), friends: friends)<br></p><p><br>On 3/14/16 12:08, Tim Schmelter via swift-evolution wrote:<br>&gt; -1<br>&gt; <br>&gt; If we agree with the Swift API Guidelines: &quot;Clarity at the point of use is<br>&gt; your most important goal&quot;, it seems to me that adding trailing commas to a<br>&gt; method/function signature reduces clarity significantly, with others on<br>&gt; this thread and the previous articulating the supporting reasons.<br>&gt; <br>&gt; As an aside: I also eschew trailing commas in array declarations, but<br>&gt; recognized that this convention is well established in other languages, and<br>&gt; am resigned to letting the linter handle that case. I would look to do that<br>&gt; in this case as well.<br>&gt; <br>&gt; --T<br>&gt; <br>&gt; <br>&gt; On Tue, Mar 8, 2016 at 2:07 PM, Grant Paul via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt;<br>&gt;&gt; Right now, Swift argument lists are not permitted to contain trailing<br>&gt;&gt; commas. To make multi-line calls easier, we propose allowing trailing<br>&gt;&gt; commas in argument (and tuple) syntax:<br>&gt;&gt;<br>&gt;&gt;     let person = Person(<br>&gt;&gt;        id: json[&#39;id&#39;],<br>&gt;&gt;        name: json[&#39;name&#39;],<br>&gt;&gt;        picture: Im2age(picture),<br>&gt;&gt;        friends: friends,<br>&gt;&gt;     )<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ## Motivation<br>&gt;&gt;<br>&gt;&gt; It’s common for functions to take a number of arguments. In some<br>&gt;&gt; languages, this can make it difficult to figure out what a function does,<br>&gt;&gt; leading to patterns like fluent interfaces and configuration objects.<br>&gt;&gt;<br>&gt;&gt; Swift, by contrast, handles this very well. Argument labels make sure<br>&gt;&gt; parameters aren’t confused even when they’re of the same type. And compared<br>&gt;&gt; to Objective-C, it’s much easier to write a multi-line list of arguments in<br>&gt;&gt; Swift.<br>&gt;&gt;<br>&gt;&gt; However, with a parentheses placement style placing the closing<br>&gt;&gt; parentheses for a multi-line call on a new line, Swift does not support a<br>&gt;&gt; trailing comma. Trailing commas have a number of benefits:<br>&gt;&gt;<br>&gt;&gt;  - It is easier to re-arrange lines (especially in certain text editors)<br>&gt;&gt; when all lines have commas.<br>&gt;&gt;  - Line-based diffs (as used by most source control systems) only show<br>&gt;&gt; added lines when adding a new parameter to the end, rather than two lines<br>&gt;&gt; where one just adds the comma.<br>&gt;&gt;  - It’s more consistent with other Swift lists which do support trailing<br>&gt;&gt; commas.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ## Proposed Solution<br>&gt;&gt;<br>&gt;&gt; The proposed solution is to allow and ignore trailing commas in argument<br>&gt;&gt; lists and tuples:<br>&gt;&gt;<br>&gt;&gt;     let person = Person(<br>&gt;&gt;         id: json[&#39;id&#39;],<br>&gt;&gt;         name: json[&#39;name&#39;],<br>&gt;&gt;         picture: Image(picture),<br>&gt;&gt;         friends: friends,<br>&gt;&gt;     )<br>&gt;&gt;<br>&gt;&gt;     let tuple = (<br>&gt;&gt;        color,<br>&gt;&gt;        32,<br>&gt;&gt;     )<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ## Detailed Design<br>&gt;&gt;<br>&gt;&gt; Support for trailing commas in argument lists and tuples would make them<br>&gt;&gt; consistent with Swift’s handling of array literals, which do support<br>&gt;&gt; trailing commas:<br>&gt;&gt;<br>&gt;&gt;     let array = [<br>&gt;&gt;         2,<br>&gt;&gt;         4,<br>&gt;&gt;         8,<br>&gt;&gt;     ]<br>&gt;&gt;<br>&gt;&gt; There should not be any impact to existing code from this proposal.<br>&gt;&gt;<br>&gt;&gt; Support for this syntax is also found in other programming languages like<br>&gt;&gt; Python, D, and Hack. It’s been proposed for JavaScript (positive response)<br>&gt;&gt; and PHP (rejected):<br>&gt;&gt;<br>&gt;&gt;  - JavaScript: https://jeffmo.github.io/es-trailing-function-commas/<br>&gt;&gt;  - PHP: https://wiki.php.net/rfc/trailing-comma-function-args<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ## Alternatives Considered<br>&gt;&gt;<br>&gt;&gt; The main alternative is the existing behavior. This has the benefit of<br>&gt;&gt; standardizing Swift code on a particular style. However, many people will<br>&gt;&gt; in practice continue to use a style regardless of support trailing commas,<br>&gt;&gt; especially for cross-language consistency. It could also lead to<br>&gt;&gt; JavaScript-inspired parameter ordering:<br>&gt;&gt;<br>&gt;&gt;     let person =<br>&gt;&gt;         Person(id: json[&#39;id&#39;]<br>&gt;&gt;              , name: json[&#39;name&#39;]<br>&gt;&gt;              , picture: Image(picture)<br>&gt;&gt;              , friends: friends)<br>&gt;&gt;<br>&gt;&gt; Another alternative would be to support this syntax for function<br>&gt;&gt; parameters but not tuples. However, this would be an arbitrary<br>&gt;&gt; inconsistency.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p><br>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
