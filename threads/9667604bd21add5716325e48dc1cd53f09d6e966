<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Safer half-open range operator</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 25, 2016 at 02:00:00pm</p></header><div class="content"><p>on Sat Apr 23 2016, &quot;Luis Henrique B. Sousa via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; No, I got the half-joke on the python-like example. :-)<br></p><p>I wasn&#39;t joking, really.<br></p><p>&gt; I meant the label as part of the brackets content, right before the range<br>&gt; itself. E.g. [truncate: Range&lt;Index&gt;]<br>&gt; where &quot;truncate&quot; is the label I&#39;m referring to.<br></p><p>That&#39;s trivial to implement, if that&#39;s all you&#39;re asking.  Just write<br>the subscript with an explicit label for its argument.<br></p><p>&gt; Thanks<br>&gt;<br>&gt; - Luis<br>&gt;<br>&gt; On Friday, April 22, 2016, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Fri Apr 22 2016, &quot;Luis Henrique B. Sousa via swift-evolution&quot;<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; is this syntax reasonably simple to implement?<br>&gt;<br>&gt;     If you mean a syntax that allows 0..&lt;-2, it&#39;s implementable but I&#39;d be<br>&gt;     opposed to it. You&#39;d have to introduce a new overload of ..&lt; that<br>&gt;     produced something other than a Range or CountableRange, because those<br>&gt;     have a precondition that the LHS is &lt;= the RHS.<br>&gt;<br>&gt;     &gt; Or is there another solution that would work with less impact in terms<br>&gt;     &gt; of design? I mean the subscript with a label on it,<br>&gt;     &gt; i.e. collection[label: Range&lt;Index&gt;]<br>&gt;<br>&gt;     I&#39;m sure there are lots of other possibilities :-)<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt; It&#39;s been a while since the last feedback, so I&#39;m doing some rewriting<br>&gt;     &gt; on this proposal and still considering to submit it for review.<br>&gt;     &gt;<br>&gt;     &gt; - Luis<br>&gt;     &gt;<br>&gt;     &gt; On Wed, Apr 13, 2016 at 10:29 PM, Dave Abrahams via swift-evolution<br>&gt;     &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; on Wed Apr 13 2016, Maximilian Hünenberger<br>&gt;     &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; &gt; Should this new operator form a new range? How can this range know about<br>&gt;     &gt; the<br>&gt;     &gt; &gt; array&#39;s indices?<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; A while ago there was a proposal (unfortunately it was not discussed<br>&gt;     &gt; enough)<br>&gt;     &gt; &gt; which introduced safe array indexing:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; array[safe: 3] // returns nil if index out of bounds<br>&gt;     &gt;<br>&gt;     &gt; Wrong label, but I wouldn&#39;t be opposed to adding such an operator for<br>&gt;     &gt; all Collections.<br>&gt;     &gt;<br>&gt;     &gt; &gt; So another way to handle this issue would be to make another subscript<br>&gt;     &gt; like:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; array[truncate: -1...6]<br>&gt;     &gt;<br>&gt;     &gt; That approach makes sense too. But then do we add<br>&gt;     &gt;<br>&gt;     &gt; x[python: 0..&lt;-2] // all but the last two elements?<br>&gt;     &gt;<br>&gt;     &gt; ;^)<br>&gt;     &gt;<br>&gt;     &gt; &gt; Best regards<br>&gt;     &gt; &gt; - Maximilian<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Am 12.04.2016 um 01:21 schrieb Luis Henrique B. Sousa via<br>&gt;     swift-evolution<br>&gt;     &gt; &gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; The idea of having a new operator following the principles of overflow<br>&gt;     &gt; &gt; operators looks great. Two distinct operators doing implicit and<br>&gt;     &gt; explicitly<br>&gt;     &gt; &gt; might really be a good way to go; it would be concise and wouldn&#39;t look<br>&gt;     &gt; like<br>&gt;     &gt; &gt; some magic happened behind the scenes. I&#39;d like to hear more opinions<br>&gt;     &gt; about<br>&gt;     &gt; &gt; it.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; &gt; what we&#39;ll have in case a[-1 &amp;..&lt; 5]? should this raise error or<br>&gt;     become<br>&gt;     &gt; [0<br>&gt;     &gt; &gt; ..&lt; 3] ? I think, the latter.<br>&gt;     &gt; &gt; I agree here, I&#39;d choose the latter.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; From my perspective, the behaviour I&#39;m proposing is what a considerable<br>&gt;     &gt; &gt; number of users expect, especially if coming from other languages that<br>&gt;     &gt; &gt; follow that path. Of course I&#39;m not comparing languages here, but<br>&gt;     &gt; &gt; considering the Swift principles of being a safer language, in my<br>&gt;     opinion<br>&gt;     &gt; &gt; we&#39;d rather have a partial slice than a crash in execution time (when<br>&gt;     the<br>&gt;     &gt; &gt; user is not totally aware of it).<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Many thanks for all your additions so far. It&#39;s really good to see that<br>&gt;     &gt; &gt; these things are not set in stone yet.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; - Luis<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; On Apr 11, 2016 4:21 PM, &quot;Vladimir.S via swift-evolution&quot;<br>&gt;     &gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; +1 for the idea &quot;in general&quot;. But I also think that explicit is better<br>&gt;     &gt; than<br>&gt;     &gt; &gt; implicit, especially if we deal with possible errors. Just like we work<br>&gt;     &gt; &gt; in Swift with integer overflow : &#39;+&#39; will generate run time error, but<br>&gt;     &gt; &gt; saying &amp;+ we point Swift that we know what we do.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; but.. what we&#39;ll have in case a[-1 &amp;..&lt; 5]? should this raise error or<br>&gt;     &gt; &gt; become [0 ..&lt; 3] ? I think, the latter.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; On 11.04.2016 17:02, Haravikk via swift-evolution wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; I like the idea in theory, but the question is; is it really safer to<br>&gt;     &gt; &gt; return a result that the developer may not have wanted, versus an<br>&gt;     &gt; &gt; error<br>&gt;     &gt; &gt; indicating that a mistake may have been made? I wonder if perhaps<br>&gt;     &gt; &gt; there<br>&gt;     &gt; &gt; could be an alternative, such as a variation of the operator like<br>&gt;     &gt; &gt; so:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; let b = a [0 &amp;..&lt; 5]// Equivalent to let b = a[0 ..&lt; min(5,<br>&gt;     &gt; &gt; a.endIndex)],<br>&gt;     &gt; &gt; becomes let b = a[0 ..&lt; 3]<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; I’m just not sure that we can assume that an array index out of<br>&gt;     &gt; &gt; range error<br>&gt;     &gt; &gt; is okay without some kind of indication from the developer, as<br>&gt;     &gt; &gt; otherwise we<br>&gt;     &gt; &gt; could end up returning a partial slice, which could end up causing<br>&gt;     &gt; &gt; an error<br>&gt;     &gt; &gt; elsewhere where the size of the slice is assumed to be 5 but isn’t.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; On 11 Apr 2016, at 13:23, Luis Henrique B. Sousa via<br>&gt;     &gt; &gt; swift-evolution<br>&gt;     &gt; &gt; &lt;swift-evolution at swift.org<br>&gt;     &gt; &gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;     &gt; &gt; wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; This proposal seeks to provide a safer ..&lt; (aka half-open range<br>&gt;     &gt; &gt; operator)<br>&gt;     &gt; &gt; in order to avoid **Array index out of range** errors in<br>&gt;     &gt; &gt; execution time.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Here is my first draft for this proposal:<br>&gt;     &gt; &gt;<br>&gt;     &gt;<br>&gt;     https://github.com/luish/swift-evolution/blob/half-open-range-operator/proposals/nnnn-safer-half-open-range-operator.md<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; In short, doing that in Swift causes a runtime error:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; leta =[1,2,3]<br>&gt;     &gt; &gt; letb =a[0..&lt;5]<br>&gt;     &gt; &gt; print(b)<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; &gt; Error running code:<br>&gt;     &gt; &gt; &gt; fatal error: Array index out of range<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; The proposed solution is to slice the array returning all<br>&gt;     &gt; &gt; elements that<br>&gt;     &gt; &gt; are below the half-open operator, even though the number of<br>&gt;     &gt; &gt; elements is<br>&gt;     &gt; &gt; lesser than the ending of the half-open operator. So the example<br>&gt;     &gt; &gt; above<br>&gt;     &gt; &gt; would return [1,2,3].<br>&gt;     &gt; &gt; We can see this very behaviour in other languages, such as<br>&gt;     &gt; &gt; Python and<br>&gt;     &gt; &gt; Ruby as shown in the proposal draft.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; This would eliminate the need for verifications on the array<br>&gt;     &gt; &gt; size before<br>&gt;     &gt; &gt; slicing it -- and consequently runtime errors in cases when the<br>&gt;     &gt; &gt; programmer didn&#39;t.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Viewing that it is my very first proposal, any feedback will be<br>&gt;     &gt; &gt; helpful.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Thanks!<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Luis Henrique Borges<br>&gt;     &gt; &gt; @luishborges<br>&gt;     &gt; &gt; _______________________________________________<br>&gt;     &gt; &gt; swift-evolution mailing list<br>&gt;     &gt; &gt; swift-evolution at swift.org<br>&gt;     &gt; &gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; _______________________________________________<br>&gt;     &gt; &gt; swift-evolution mailing list<br>&gt;     &gt; &gt; swift-evolution at swift.org<br>&gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; _______________________________________________<br>&gt;     &gt; &gt; swift-evolution mailing list<br>&gt;     &gt; &gt; swift-evolution at swift.org<br>&gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; _______________________________________________<br>&gt;     &gt; &gt; swift-evolution mailing list<br>&gt;     &gt; &gt; swift-evolution at swift.org<br>&gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; _______________________________________________<br>&gt;     &gt; &gt; swift-evolution mailing list<br>&gt;     &gt; &gt; swift-evolution at swift.org<br>&gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;     &gt; --<br>&gt;     &gt; Dave<br>&gt;     &gt;<br>&gt;     &gt; _______________________________________________<br>&gt;     &gt; swift-evolution mailing list<br>&gt;     &gt; swift-evolution at swift.org<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;     &gt; _______________________________________________<br>&gt;     &gt; swift-evolution mailing list<br>&gt;     &gt; swift-evolution at swift.org<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
