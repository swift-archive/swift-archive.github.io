<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>specialize a generic type in a method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 20, 2016 at 07:00:00pm</p></header><div class="content"><p>Should we be able to specialize a generic type in a method, if that generic <br>type declared in type&#39;s definition like here? :<br></p><p>struct Foo&lt;I&gt; {<br>     func bar(i: I) where I: Equatable { } // should this work?<br>}<br></p><p>As I understand, for concrete instance of foo: Foo&lt;X&gt;, if X is not <br>Equatable, then compiler should prevent us from calling foo.bar(x)<br></p><p>Or, probably, the better way to express this could be :<br></p><p>     func bar(i: I &amp; Equatable) { }<br>or<br>     func bar(i: Any&lt;I, Equatable&gt;) { }<br></p><p>Can&#39;t check if it possible now because my compiler crashes because of <br>&#39;where I:Equatable&#39; text (submitted to bugs.swift.org)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>specialize a generic type in a method</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 20, 2016 at 07:00:00pm</p></header><div class="content"><p>This is IMHO better solved via an extension - it even makes more sense to put together methods whose use is limited only to certain generics constraint:<br></p><p>extension Foo where I: Equatable {<br></p><p>	func bar(i: I) {<br>		///<br>	}<br></p><p>}<br></p><p><br>&gt; On Jun 20, 2016, at 6:57 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Should we be able to specialize a generic type in a method, if that generic type declared in type&#39;s definition like here? :<br>&gt; <br>&gt; struct Foo&lt;I&gt; {<br>&gt;    func bar(i: I) where I: Equatable { } // should this work?<br>&gt; }<br>&gt; <br>&gt; As I understand, for concrete instance of foo: Foo&lt;X&gt;, if X is not Equatable, then compiler should prevent us from calling foo.bar(x)<br>&gt; <br>&gt; Or, probably, the better way to express this could be :<br>&gt; <br>&gt;    func bar(i: I &amp; Equatable) { }<br>&gt; or<br>&gt;    func bar(i: Any&lt;I, Equatable&gt;) { }<br>&gt; <br>&gt; Can&#39;t check if it possible now because my compiler crashes because of &#39;where I:Equatable&#39; text (submitted to bugs.swift.org)<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>specialize a generic type in a method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 20, 2016 at 09:00:00pm</p></header><div class="content"><p>Thank you for reply. Yes, seems this could be solved by extension. No other <br>solutions?<br></p><p>But how should I be if I need such a protocol?<br></p><p>protocol P1 {<br>     associatedtype T<br>     func foo(t: T)<br>     func bar(t: T) // where T:Equatable  ??<br>}<br></p><p>I.e. I need to specify T &amp; Equatable for bar in requirements<br></p><p>On 20.06.2016 20:03, Charlie Monroe wrote:<br>&gt; This is IMHO better solved via an extension - it even makes more sense to put together methods whose use is limited only to certain generics constraint:<br>&gt;<br>&gt; extension Foo where I: Equatable {<br>&gt;<br>&gt; 	func bar(i: I) {<br>&gt; 		///<br>&gt; 	}<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt;&gt; On Jun 20, 2016, at 6:57 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Should we be able to specialize a generic type in a method, if that generic type declared in type&#39;s definition like here? :<br>&gt;&gt;<br>&gt;&gt; struct Foo&lt;I&gt; {<br>&gt;&gt;    func bar(i: I) where I: Equatable { } // should this work?<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; As I understand, for concrete instance of foo: Foo&lt;X&gt;, if X is not Equatable, then compiler should prevent us from calling foo.bar(x)<br>&gt;&gt;<br>&gt;&gt; Or, probably, the better way to express this could be :<br>&gt;&gt;<br>&gt;&gt;    func bar(i: I &amp; Equatable) { }<br>&gt;&gt; or<br>&gt;&gt;    func bar(i: Any&lt;I, Equatable&gt;) { }<br>&gt;&gt;<br>&gt;&gt; Can&#39;t check if it possible now because my compiler crashes because of &#39;where I:Equatable&#39; text (submitted to bugs.swift.org)<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>specialize a generic type in a method</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 20, 2016 at 08:00:00pm</p></header><div class="content"><p>Something like this should work:<br></p><p>protocol P1 {<br>	associatedtype T<br>	func foo(t: T)<br>	func bar&lt;U where U == T, U: Equatable&gt;(t: U)<br>}<br></p><p><br>&gt; On Jun 20, 2016, at 8:07 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thank you for reply. Yes, seems this could be solved by extension. No other solutions?<br>&gt; <br>&gt; But how should I be if I need such a protocol?<br>&gt; <br>&gt; protocol P1 {<br>&gt;    associatedtype T<br>&gt;    func foo(t: T)<br>&gt;    func bar(t: T) // where T:Equatable  ??<br>&gt; }<br>&gt; <br>&gt; I.e. I need to specify T &amp; Equatable for bar in requirements<br>&gt; <br>&gt; On 20.06.2016 20:03, Charlie Monroe wrote:<br>&gt;&gt; This is IMHO better solved via an extension - it even makes more sense to put together methods whose use is limited only to certain generics constraint:<br>&gt;&gt; <br>&gt;&gt; extension Foo where I: Equatable {<br>&gt;&gt; <br>&gt;&gt; 	func bar(i: I) {<br>&gt;&gt; 		///<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 20, 2016, at 6:57 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Should we be able to specialize a generic type in a method, if that generic type declared in type&#39;s definition like here? :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct Foo&lt;I&gt; {<br>&gt;&gt;&gt;   func bar(i: I) where I: Equatable { } // should this work?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I understand, for concrete instance of foo: Foo&lt;X&gt;, if X is not Equatable, then compiler should prevent us from calling foo.bar(x)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or, probably, the better way to express this could be :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func bar(i: I &amp; Equatable) { }<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt;   func bar(i: Any&lt;I, Equatable&gt;) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can&#39;t check if it possible now because my compiler crashes because of &#39;where I:Equatable&#39; text (submitted to bugs.swift.org)<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>specialize a generic type in a method</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>On 20.06.2016 21:38, Charlie Monroe wrote:<br>&gt; Something like this should work:<br>&gt;<br>&gt; protocol P1 {<br>&gt; 	associatedtype T<br>&gt; 	func foo(t: T)<br>&gt; 	func bar&lt;U where U == T, U: Equatable&gt;(t: U)<br>&gt; }<br>&gt;<br></p><p>Thank you. Strange, but also can&#39;t check this code - compiler crashes on it.<br></p><p>IMO it will be good if we can write just<br></p><p>func bar(t: T &amp; Equatable)<br></p><p>&gt;<br>&gt;&gt; On Jun 20, 2016, at 8:07 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Thank you for reply. Yes, seems this could be solved by extension. No other solutions?<br>&gt;&gt;<br>&gt;&gt; But how should I be if I need such a protocol?<br>&gt;&gt;<br>&gt;&gt; protocol P1 {<br>&gt;&gt;    associatedtype T<br>&gt;&gt;    func foo(t: T)<br>&gt;&gt;    func bar(t: T) // where T:Equatable  ??<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I.e. I need to specify T &amp; Equatable for bar in requirements<br>&gt;&gt;<br>&gt;&gt; On 20.06.2016 20:03, Charlie Monroe wrote:<br>&gt;&gt;&gt; This is IMHO better solved via an extension - it even makes more sense to put together methods whose use is limited only to certain generics constraint:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; extension Foo where I: Equatable {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 	func bar(i: I) {<br>&gt;&gt;&gt; 		///<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jun 20, 2016, at 6:57 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Should we be able to specialize a generic type in a method, if that generic type declared in type&#39;s definition like here? :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; struct Foo&lt;I&gt; {<br>&gt;&gt;&gt;&gt;   func bar(i: I) where I: Equatable { } // should this work?<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As I understand, for concrete instance of foo: Foo&lt;X&gt;, if X is not Equatable, then compiler should prevent us from calling foo.bar(x)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Or, probably, the better way to express this could be :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   func bar(i: I &amp; Equatable) { }<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;   func bar(i: Any&lt;I, Equatable&gt;) { }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Can&#39;t check if it possible now because my compiler crashes because of &#39;where I:Equatable&#39; text (submitted to bugs.swift.org)<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
