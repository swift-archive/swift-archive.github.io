<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Tue May 17 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; begins now and<br>&gt; runs through May 23. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>myself.<br></p><p>We would like to accept the proposal with one modification: rather than<br>add an argument label, we&#39;d like to drop the String initializer<br>altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>representation of `expression`.<br></p><p>Thanks,<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Excellent. Having one canonical, unambiguous way to get the string<br>representation should make things simpler and easier for developers.<br></p><p>Austin<br></p><p>On Thu, May 19, 2016 at 3:57 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Tue May 17 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; begins now and<br>&gt; &gt; runs through May 23. The proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; &gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt; through constructive criticism and contribute to the direction of<br>&gt; &gt; Swift. When writing your review, here are some questions you might<br>&gt; &gt; want to answer in your review:<br>&gt; &gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;       * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;       * If you have used other languages or libraries with a similar<br>&gt; &gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;       * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt;       https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt; myself.<br>&gt;<br>&gt; We would like to accept the proposal with one modification: rather than<br>&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt; representation of `expression`.<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/17bc3af3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Hm. That might conflict with:<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/17575<br></p><p>On Thu, May 19, 2016 at 4:02 PM, Austin Zheng via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Excellent. Having one canonical, unambiguous way to get the string<br>&gt; representation should make things simpler and easier for developers.<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt; On Thu, May 19, 2016 at 3:57 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Tue May 17 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; Hello Swift community,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; begins now and<br>&gt;&gt; &gt; runs through May 23. The proposal is available here:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt; &gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; What goes into a review?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; &gt; through constructive criticism and contribute to the direction of<br>&gt;&gt; &gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt; &gt; want to answer in your review:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;&gt; &gt;       * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt; &gt;       * Does this proposal fit well with the feel and direction of<br>&gt;&gt; Swift?<br>&gt;&gt; &gt;       * If you have used other languages or libraries with a similar<br>&gt;&gt; &gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; &gt;       * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; More information about the Swift evolution process is available at<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt;&gt; myself.<br>&gt;&gt;<br>&gt;&gt; We would like to accept the proposal with one modification: rather than<br>&gt;&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt;&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt;&gt; representation of `expression`.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/3c4a86ac/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 19, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt; myself.<br>&gt; <br>&gt; We would like to accept the proposal with one modification: rather than<br>&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt; representation of `expression`.<br></p><p>Given how complicated the StringInterpolationConvertible protocol is, I&#39;m not sure it&#39;s a good idea to invoke all of that machinery merely to convert an expression to a string. I mean, you end up with code like:<br></p><p>	String(stringInterpolation:<br>		String(stringInterpolationSegment: &quot;&quot;),<br>		String(stringInterpolationSegment: expression),<br>		String(stringInterpolationSegment: &quot;&quot;)<br>	)<br></p><p>That seems like a lot of code to generate for such a simple task.<br></p><p>(And you can have those empty segments over my dead body—they&#39;re very important to a lot of interpolation use cases, because they allow you to distinguish between the literal and interpolated segments. If you want to design a different mechanism that&#39;s more efficient and equally capable, well, I&#39;m happy to talk about improving StringInterpolationConvertible any time you are, but it&#39;ll definitely be opening a can of worms.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 20, 2016 at 01:00:00am</p></header><div class="content"><p>On Thu, May 19, 2016 at 6:00 PM, Brent Royal-Gordon via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt;&gt; myself.<br>&gt;&gt;<br>&gt;&gt; We would like to accept the proposal with one modification: rather than<br>&gt;&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt;&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt;&gt; representation of `expression`.<br>&gt;<br>&gt; Given how complicated the StringInterpolationConvertible protocol is, I&#39;m not sure it&#39;s a good idea to invoke all of that machinery merely to convert an expression to a string. I mean, you end up with code like:<br>&gt;<br>&gt;         String(stringInterpolation:<br>&gt;                 String(stringInterpolationSegment: &quot;&quot;),<br>&gt;                 String(stringInterpolationSegment: expression),<br>&gt;                 String(stringInterpolationSegment: &quot;&quot;)<br>&gt;         )<br>&gt;<br>&gt; That seems like a lot of code to generate for such a simple task.<br>&gt;<br>&gt; (And you can have those empty segments over my dead body—they&#39;re very important to a lot of interpolation use cases, because they allow you to distinguish between the literal and interpolated segments. If you want to design a different mechanism that&#39;s more efficient and equally capable, well, I&#39;m happy to talk about improving StringInterpolationConvertible any time you are, but it&#39;ll definitely be opening a can of worms.)<br></p><p>We will add a special case in the optimizer to fold these empty<br>segments when interpolation is invoked on String.  It won&#39;t affect<br>other types.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>May 20, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On May 19, 2016, at 5:57 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue May 17 2016, Chris Lattner &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; begins now and<br>&gt;&gt; runs through May 23. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and contribute to the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt; want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt; myself.<br>&gt; <br>&gt; We would like to accept the proposal with one modification: rather than<br>&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt; representation of `expression`.<br></p><p>Is there some performance-driven motivation here, or is this just aesthetics?<br></p><p>I ask b/c not having a name for this &quot;initializer&quot; here would seem mildly annoying and asymmetric vis-a-vis `String.init(reflecting:)`; sure, I can always add an equivalent with a name, but I’m curious if there’s an argument-from-functionality for the removal.<br></p><p>Also FWIW I like the idea to use `init(describing:)`, although it’s still a bit quirky when put side-by-side with `init(reflecting:)` (since it doesn’t really capture the heart of the distinction between the two, IMHO).<br></p><p>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/ee22ddb9/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
