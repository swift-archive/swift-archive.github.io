<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Open Issues Affecting Standard Library API Stability</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  6, 2016 at 06:00:00pm</p></header><div class="content"><p>on Tue Jul 05 2016, Dmitri Gribenko &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Tue, Jul 5, 2016 at 9:24 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; On Jul 5, 2016, at 6:57 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hi swift-evolution,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Dave, Max and I have compiled a list of open issues in the standard<br>&gt;&gt;&gt; library for which the resolutions could result non-additive API<br>&gt;&gt;&gt; changes.  Having a resolution (and an implementation of the<br>&gt;&gt;&gt; resolution!) for these issues is blocking API stability.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d<br>&gt;&gt;<br>&gt;&gt; Thank you for collecting this Dmitri!  For the issues in the “low<br>&gt;&gt; hanging fruit” list, are the changes all sufficiently &quot;obvious”?  If<br>&gt;&gt; so, having one proposal tackle all of them in one sweep would be<br>&gt;&gt; preferable to reduce process overhead.<br>&gt;<br>&gt; My subjective assessment:<br>&gt;<br>&gt;&gt; The global function withUnsafe[Mutable]Pointer(&amp;x) should have an argument label “to”.<br>&gt; Obvious.<br>&gt;<br>&gt;&gt; UnicodeScalar.init(Int) should be failable.<br>&gt; Obvious.<br>&gt;<br>&gt;&gt; withUnsafePointer shouldn&#39;t take its argument as inout.<br>&gt; Jordan has objections, see https://bugs.swift.org/browse/SR-1956<br>&gt;<br>&gt;&gt; Remove unsafeAddressOf. We are not aware of any real usecases for<br>&gt;&gt; it. If there are any, it should be renamed to unsafeAddress(of:) to<br>&gt;&gt; follow the guidelines.<br>&gt; Obvious, unless someone comes up with use cases during the review period.<br>&gt;<br>&gt;&gt; Consider renaming or eliminating ManagedProtoBuffer.<br>&gt;&gt; The reason why ManagedProtoBuffer exists is to give the users an<br>&gt;&gt; extra bit of type safety inside of the closure passed to<br>&gt;&gt; ManagedBuffer.create().<br>&gt; Debatable.<br></p><p>The only debate, IMO, is whether to rename or eliminate.  Anything with<br>“ProtoBuf” in the name is likely to be misleading.<br></p><p>&gt;&gt; String.CharacterView.Iterator should be a custom type rather than<br>&gt;&gt; the default, to allow performance optimizations. Audit all other<br>&gt;&gt; collections for such opportunities.<br>&gt; Obvious.<br>&gt;<br>&gt;&gt; String(count:, repeatedValue:) and String.append() are ambiguous without an explicit cast to Character.<br>&gt; Obvious.<br>&gt;<br>&gt;&gt; Rename the ~LiteralConvertible protocols according to the resolution of the proposal currently under review.<br>&gt; A separate review.<br>&gt;<br>&gt; Dmitri<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
