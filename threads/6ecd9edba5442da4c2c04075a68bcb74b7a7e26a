<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e3efd2865da9728ccc523ac1e9a119f9?s=50"></div><header><strong>Optionals in switch statements</strong> from <string>Matteo</string> &lt;matteo at mimecastercentral.com&gt;<p>June 29, 2016 at 10:00:00am</p></header><div class="content"><p>I’m trying to make the best use of swift’s switch statement while converting some old code from obj-c.<br></p><p>Imagine a method that takes two optional strings representing file names:<br></p><p>func updateFileFrom(from : String?, to: String?)<br></p><p>If both strings are nil, then it does nothing.<br>If both are non nil AND are equal it also does nothing<br>If both are non-nil and not equal it renames the file<br>If from is not nil, but to is nil, it deletes the file.<br>If from is nil, but to is not-nil it creates a file.<br></p><p>Here is my original implementation as a straight conversion using only if:<br></p><p>func ifs_updateFileFrom(from : String?, to: String?)<br>{<br>    if from == nil &amp;&amp; to == nil {<br>        print(&quot;Nothing to do, both are nil&quot;)<br>    } else if from != nil &amp;&amp; to != nil {<br>        if from == to {<br>            print(&quot;Nothing to do, both are non-nil and equal&quot;)<br>        } else {<br>            print(&quot;Renaming \(from!) to \(to!)&quot;)<br>        }<br>    } else if to == nil {<br>        print(&quot;Deleting \(from!)&quot;)<br>    } else {<br>        print(&quot;Creating \(to!)&quot;)<br>    }<br>}<br></p><p>So I’ve had a go at using a switch statement to make it more readable:<br></p><p>func switch_updateFileFrom(from : String?, to: String?)<br>{<br>    switch (from, to) {<br>    case (.None, .None):<br>        print(&quot;Nothing to do, both are nil&quot;)<br>    case (.Some, .Some) where from == to:<br>        print(&quot;Nothing to do, both are non-nil and equal&quot;)<br>    case (.Some, .Some):<br>        print(&quot;Renaming \(from!) to \(to!)&quot;)<br>    case (.Some, .None):<br>        print(&quot;Deleting \(from!)&quot;)<br>    case (.None, .Some):<br>        print(&quot;Creating \(to!)&quot;)<br>    }<br>}<br></p><p>It seems reasonable to me and clearer, but I don’t really like accessing the from and to variables within it, it just doesn’t feel right compared to ‘normal’ switch statement<br></p><p>i.e consider this example from the swift book:<br></p><p>let anotherPoint = (2, 0)<br></p><p>switch anotherPoint {<br>case (let x, 0):<br>    print(&quot;on x-axis with x value of \(x)&quot;)<br>case (0, let y):<br>    print(&quot;on y-axis with y value of \(y)&quot;)<br>case let (x, y):<br>    print(&quot;Somewhere else at (\(x), \(y))&quot;)<br>}<br></p><p>The switch statement is entirely self-referential with regard to the internally bound values of x and y, it has no need to access anotherPoint directly.<br></p><p>Is there a way to write my switch-based method that does not access from and to directly, but is also as clear?<br></p><p>Thanks<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ccbc60826cca6a6f9c527b671cdad531?s=50"></div><header><strong>Optionals in switch statements</strong> from <string>Loïc Lecrenier</string> &lt;loiclecrenier at icloud.com&gt;<p>June 29, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Matteo,<br></p><p>I would write it like that:<br></p><p>func switch_updateFileFrom(from : String?, to: String?)<br>{<br>    switch(from, to) {<br></p><p>    case (nil, nil):<br>        print(&quot;Nothing to do, both are nil&quot;)<br></p><p>    case let (x?, y?) where x == y:<br>        print(&quot;Nothing to do, both are non-nil and equal&quot;)<br></p><p>    case let (x?, y?):<br>        print(&quot;Renaming \(x) to \(y)&quot;)<br></p><p>    case let (x?, nil):<br>        print(&quot;Deleting \(x)&quot;)<br></p><p>    case let (nil, y?):<br>        print(&quot;Creating \(y)&quot;)<br>    }<br>}<br></p><p>“x?” is syntactic sugar for “.Some(x)&quot;<br>“nil” is a literal equivalent to “.None” (in this case)<br></p><p>Loïc<br></p><p>&gt; On Jun 29, 2016, at 12:42 PM, Matteo via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m trying to make the best use of swift’s switch statement while converting some old code from obj-c.<br>&gt; <br>&gt; Imagine a method that takes two optional strings representing file names:<br>&gt; <br>&gt; func updateFileFrom(from : String?, to: String?)<br>&gt; <br>&gt; If both strings are nil, then it does nothing.<br>&gt; If both are non nil AND are equal it also does nothing<br>&gt; If both are non-nil and not equal it renames the file<br>&gt; If from is not nil, but to is nil, it deletes the file.<br>&gt; If from is nil, but to is not-nil it creates a file.<br>&gt; <br>&gt; Here is my original implementation as a straight conversion using only if:<br>&gt; <br>&gt; func ifs_updateFileFrom(from : String?, to: String?)<br>&gt; {<br>&gt;    if from == nil &amp;&amp; to == nil {<br>&gt;        print(&quot;Nothing to do, both are nil&quot;)<br>&gt;    } else if from != nil &amp;&amp; to != nil {<br>&gt;        if from == to {<br>&gt;            print(&quot;Nothing to do, both are non-nil and equal&quot;)<br>&gt;        } else {<br>&gt;            print(&quot;Renaming \(from!) to \(to!)&quot;)<br>&gt;        }<br>&gt;    } else if to == nil {<br>&gt;        print(&quot;Deleting \(from!)&quot;)<br>&gt;    } else {<br>&gt;        print(&quot;Creating \(to!)&quot;)<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; So I’ve had a go at using a switch statement to make it more readable:<br>&gt; <br>&gt; func switch_updateFileFrom(from : String?, to: String?)<br>&gt; {<br>&gt;    switch (from, to) {<br>&gt;    case (.None, .None):<br>&gt;        print(&quot;Nothing to do, both are nil&quot;)<br>&gt;    case (.Some, .Some) where from == to:<br>&gt;        print(&quot;Nothing to do, both are non-nil and equal&quot;)<br>&gt;    case (.Some, .Some):<br>&gt;        print(&quot;Renaming \(from!) to \(to!)&quot;)<br>&gt;    case (.Some, .None):<br>&gt;        print(&quot;Deleting \(from!)&quot;)<br>&gt;    case (.None, .Some):<br>&gt;        print(&quot;Creating \(to!)&quot;)<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; It seems reasonable to me and clearer, but I don’t really like accessing the from and to variables within it, it just doesn’t feel right compared to ‘normal’ switch statement<br>&gt; <br>&gt; i.e consider this example from the swift book:<br>&gt; <br>&gt; let anotherPoint = (2, 0)<br>&gt; <br>&gt; switch anotherPoint {<br>&gt; case (let x, 0):<br>&gt;    print(&quot;on x-axis with x value of \(x)&quot;)<br>&gt; case (0, let y):<br>&gt;    print(&quot;on y-axis with y value of \(y)&quot;)<br>&gt; case let (x, y):<br>&gt;    print(&quot;Somewhere else at (\(x), \(y))&quot;)<br>&gt; }<br>&gt; <br>&gt; The switch statement is entirely self-referential with regard to the internally bound values of x and y, it has no need to access anotherPoint directly.<br>&gt; <br>&gt; Is there a way to write my switch-based method that does not access from and to directly, but is also as clear?<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
