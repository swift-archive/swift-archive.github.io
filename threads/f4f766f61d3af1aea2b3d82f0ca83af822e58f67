<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 04:00:00am</p></header><div class="content"><p>Dear Swift developers:<br></p><p>Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br></p><p>Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br></p><p>I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br></p><p>In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br></p><p>Max<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4097 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/f4f78f67/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bae027e8623c1741db73328ee45dcf?s=50"></div><header><strong>Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Gregory Casamento</string> &lt;greg.casamento at gmail.com&gt;<p>December  3, 2015 at 08:00:00pm</p></header><div class="content"><p>Way ahead of you<br>On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br></p><p>&gt; Dear Swift developers:<br>&gt;<br>&gt; Maybe you have never heard of it, but there have been several ongoing<br>&gt; efforts, like GNUstep and Cocotron, at maintaining an open source<br>&gt; Foundation reimplementation for alternative operating systems like Linux.<br>&gt; It seemed to me that the current release of Swift did not put such efforts<br>&gt; into consideration and brutally broke compatibility between Swift and<br>&gt; Objective-C on Linux. I understand the fact that Apple is unwilling to<br>&gt; release source code of Foundation, and this is usually where those<br>&gt; alternative implementations comes into play.<br>&gt;<br>&gt; Some of such projects, like GNUstep, are mature enough to allow existing<br>&gt; AppKit applications written in Objective-C, like TextEdit and Chess, to be<br>&gt; ported from OS X to Linux and Windows without changing too much, if any,<br>&gt; code, taking all modern Objective-C features like ARC and object<br>&gt; subscripting with stride, with a compatible version of LLVM compiler.<br>&gt; Meanwhile, with the current version of Swift, even if the Swift code is<br>&gt; written with calls to Objective-C runtime assuming the case on OS X, it is<br>&gt; broken under Linux even with libobjc linked in.<br>&gt;<br>&gt; I am here suggesting keeping the Objective-C bridge intact at least when<br>&gt; built with a compatible version of libobjc (and GNUstep project have one<br>&gt; already.) This will allow users of such alternative Foundation<br>&gt; reimplementations to use their favourite Foundation distribution in place<br>&gt; of the version provided by the Swift project, retaining the code<br>&gt; compatibility already established between OS X and Linux by those Swift<br>&gt; reimplementations.<br>&gt;<br>&gt; In such an environment the alternative Foundation implementation will<br>&gt; provide their own version of CoreFoundation and Foundation, implemented<br>&gt; using C and Objective-C, as well as a libobjc that supports ARC. The Swift<br>&gt; environment would be built without its own CoreFoundation and Foundation,<br>&gt; but linking against the provided version instead, bridging calls just like<br>&gt; OS X version of Swift does. This will also allow the new Swift platform to<br>&gt; take full advantage of the AppKit came with the alternative Foundation,<br>&gt; allow porting full OS X apps to Linux a lot easier. The above also applies<br>&gt; for porting iOS apps, if the alternative Foundation implementation also<br>&gt; comes with their own UIKit.<br>&gt;<br>&gt; Max_______________________________________________<br>&gt; Gnustep-dev mailing list<br>&gt; Gnustep-dev at gnu.org<br>&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/d4d00658/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  3, 2015 at 09:00:00pm</p></header><div class="content"><p>I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt; <br>&gt; Way ahead of you<br>&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;&gt; Dear Swift developers:<br>&gt;&gt; <br>&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt; <br>&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt; <br>&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt; <br>&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt; <br>&gt;&gt; Max_______________________________________________<br>&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt; Gnustep-dev at gnu.org<br>&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/254049a5/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  3, 2015 at 09:00:00pm</p></header><div class="content"><p>I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br></p><p>&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt; <br>&gt; Way ahead of you<br>&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;&gt; Dear Swift developers:<br>&gt;&gt; <br>&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt; <br>&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt; <br>&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt; <br>&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt; <br>&gt;&gt; Max_______________________________________________<br>&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt; Gnustep-dev at gnu.org<br>&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/ff22357e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bae027e8623c1741db73328ee45dcf?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Gregory Casamento</string> &lt;greg.casamento at gmail.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>David,<br></p><p>There wouldn&#39;t be any need to do it for every platform.   There is one<br>objective-C runtime GNUstep uses for every platform it runs on.   So there<br>is no need for it to be different.<br></p><p>Reimplementing everything in pure swift is silly because it would not allow<br>re-use of all of the objective-c that is out there which is one of the<br>advantages of swift in the first place.<br></p><p><br>GC<br></p><p>On Thu, Dec 3, 2015 at 3:32 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>&gt; I also agree with Adrian. I would much prefer to see efforts put towards<br>&gt; implementing a pure Swift foundation API than supporting a Cocoa<br>&gt; implementation and bridge on every platform Swift will run on.<br>&gt;<br>&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Way ahead of you<br>&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;<br>&gt;&gt; Dear Swift developers:<br>&gt;&gt;<br>&gt;&gt; Maybe you have never heard of it, but there have been several ongoing<br>&gt;&gt; efforts, like GNUstep and Cocotron, at maintaining an open source<br>&gt;&gt; Foundation reimplementation for alternative operating systems like Linux.<br>&gt;&gt; It seemed to me that the current release of Swift did not put such efforts<br>&gt;&gt; into consideration and brutally broke compatibility between Swift and<br>&gt;&gt; Objective-C on Linux. I understand the fact that Apple is unwilling to<br>&gt;&gt; release source code of Foundation, and this is usually where those<br>&gt;&gt; alternative implementations comes into play.<br>&gt;&gt;<br>&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing<br>&gt;&gt; AppKit applications written in Objective-C, like TextEdit and Chess, to be<br>&gt;&gt; ported from OS X to Linux and Windows without changing too much, if any,<br>&gt;&gt; code, taking all modern Objective-C features like ARC and object<br>&gt;&gt; subscripting with stride, with a compatible version of LLVM compiler.<br>&gt;&gt; Meanwhile, with the current version of Swift, even if the Swift code is<br>&gt;&gt; written with calls to Objective-C runtime assuming the case on OS X, it is<br>&gt;&gt; broken under Linux even with libobjc linked in.<br>&gt;&gt;<br>&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when<br>&gt;&gt; built with a compatible version of libobjc (and GNUstep project have one<br>&gt;&gt; already.) This will allow users of such alternative Foundation<br>&gt;&gt; reimplementations to use their favourite Foundation distribution in place<br>&gt;&gt; of the version provided by the Swift project, retaining the code<br>&gt;&gt; compatibility already established between OS X and Linux by those Swift<br>&gt;&gt; reimplementations.<br>&gt;&gt;<br>&gt;&gt; In such an environment the alternative Foundation implementation will<br>&gt;&gt; provide their own version of CoreFoundation and Foundation, implemented<br>&gt;&gt; using C and Objective-C, as well as a libobjc that supports ARC. The Swift<br>&gt;&gt; environment would be built without its own CoreFoundation and Foundation,<br>&gt;&gt; but linking against the provided version instead, bridging calls just like<br>&gt;&gt; OS X version of Swift does. This will also allow the new Swift platform to<br>&gt;&gt; take full advantage of the AppKit came with the alternative Foundation,<br>&gt;&gt; allow porting full OS X apps to Linux a lot easier. The above also applies<br>&gt;&gt; for porting iOS apps, if the alternative Foundation implementation also<br>&gt;&gt; comes with their own UIKit.<br>&gt;&gt;<br>&gt;&gt; Max_______________________________________________<br>&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt; Gnustep-dev at gnu.org<br>&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Gregory Casamento<br>GNUstep Lead Developer / OLC, Principal Consultant<br>http://www.gnustep.org - http://heronsperch.blogspot.com<br>http://ind.ie/phoenix/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/8c66aa9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5bae027e8623c1741db73328ee45dcf?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Gregory Casamento</string> &lt;greg.casamento at gmail.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>Additionally, GNUstep is a Nearly complete clone of cocoa that is well<br>tested and mature.   Building a Cocoa-inspired Swift implementation would,<br>quite honestly, miss the point entirely.<br></p><p>GC<br></p><p>On Thu, Dec 3, 2015 at 3:37 PM, Gregory Casamento &lt;greg.casamento at gmail.com&gt;<br>wrote:<br></p><p>&gt; David,<br>&gt;<br>&gt; There wouldn&#39;t be any need to do it for every platform.   There is one<br>&gt; objective-C runtime GNUstep uses for every platform it runs on.   So there<br>&gt; is no need for it to be different.<br>&gt;<br>&gt; Reimplementing everything in pure swift is silly because it would not<br>&gt; allow re-use of all of the objective-c that is out there which is one of<br>&gt; the advantages of swift in the first place.<br>&gt;<br>&gt;<br>&gt; GC<br>&gt;<br>&gt; On Thu, Dec 3, 2015 at 3:32 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;<br>&gt;&gt; I also agree with Adrian. I would much prefer to see efforts put towards<br>&gt;&gt; implementing a pure Swift foundation API than supporting a Cocoa<br>&gt;&gt; implementation and bridge on every platform Swift will run on.<br>&gt;&gt;<br>&gt;&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Way ahead of you<br>&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Dear Swift developers:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Maybe you have never heard of it, but there have been several ongoing<br>&gt;&gt;&gt; efforts, like GNUstep and Cocotron, at maintaining an open source<br>&gt;&gt;&gt; Foundation reimplementation for alternative operating systems like Linux.<br>&gt;&gt;&gt; It seemed to me that the current release of Swift did not put such efforts<br>&gt;&gt;&gt; into consideration and brutally broke compatibility between Swift and<br>&gt;&gt;&gt; Objective-C on Linux. I understand the fact that Apple is unwilling to<br>&gt;&gt;&gt; release source code of Foundation, and this is usually where those<br>&gt;&gt;&gt; alternative implementations comes into play.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing<br>&gt;&gt;&gt; AppKit applications written in Objective-C, like TextEdit and Chess, to be<br>&gt;&gt;&gt; ported from OS X to Linux and Windows without changing too much, if any,<br>&gt;&gt;&gt; code, taking all modern Objective-C features like ARC and object<br>&gt;&gt;&gt; subscripting with stride, with a compatible version of LLVM compiler.<br>&gt;&gt;&gt; Meanwhile, with the current version of Swift, even if the Swift code is<br>&gt;&gt;&gt; written with calls to Objective-C runtime assuming the case on OS X, it is<br>&gt;&gt;&gt; broken under Linux even with libobjc linked in.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when<br>&gt;&gt;&gt; built with a compatible version of libobjc (and GNUstep project have one<br>&gt;&gt;&gt; already.) This will allow users of such alternative Foundation<br>&gt;&gt;&gt; reimplementations to use their favourite Foundation distribution in place<br>&gt;&gt;&gt; of the version provided by the Swift project, retaining the code<br>&gt;&gt;&gt; compatibility already established between OS X and Linux by those Swift<br>&gt;&gt;&gt; reimplementations.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; In such an environment the alternative Foundation implementation will<br>&gt;&gt;&gt; provide their own version of CoreFoundation and Foundation, implemented<br>&gt;&gt;&gt; using C and Objective-C, as well as a libobjc that supports ARC. The Swift<br>&gt;&gt;&gt; environment would be built without its own CoreFoundation and Foundation,<br>&gt;&gt;&gt; but linking against the provided version instead, bridging calls just like<br>&gt;&gt;&gt; OS X version of Swift does. This will also allow the new Swift platform to<br>&gt;&gt;&gt; take full advantage of the AppKit came with the alternative Foundation,<br>&gt;&gt;&gt; allow porting full OS X apps to Linux a lot easier. The above also applies<br>&gt;&gt;&gt; for porting iOS apps, if the alternative Foundation implementation also<br>&gt;&gt;&gt; comes with their own UIKit.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Max_______________________________________________<br>&gt;&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt;&gt; Gnustep-dev at gnu.org<br>&gt;&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Gregory Casamento<br>&gt; GNUstep Lead Developer / OLC, Principal Consultant<br>&gt; http://www.gnustep.org - http://heronsperch.blogspot.com<br>&gt; http://ind.ie/phoenix/<br>&gt;<br></p><p><br></p><p>-- <br>Gregory Casamento<br>GNUstep Lead Developer / OLC, Principal Consultant<br>http://www.gnustep.org - http://heronsperch.blogspot.com<br>http://ind.ie/phoenix/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/19c6cf4e/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 04:00:00am</p></header><div class="content"><p>David<br></p><p>Given the fact that there are two active Foundation reimplementations out there means your Swift-only reimplementation of Foundation is reinventing wheels, in an incompatible way. (Cocoatron can at least take a few libraries from GNUstep if compiled correctly, but not this)<br></p><p>The silliest way of doing this is just ?endorse? someone* as the official Objective-C backend for Swift anywhere outside OS X and iOS and scratch this swift-corelibs-foundation entirely. Since both GNUstep and Cocotron runs under Linux, Windows and BSD instead of just Linux outside OS X and iOS, you get extra compatibility for free, from removing instead of adding code.<br></p><p>* preferably GNUstep in my own opinion, since they have better library coverage and they are the team that ships libobjc2 which fully supports ARC and every single modern Objective-C feature in a code-compatible way although not ABI-compatible, and the platform barrier rendered ABI compatibility pointless anyway<br></p><p>&gt; On Dec 4, 2015, at 04:37, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt; <br>&gt; David,<br>&gt; <br>&gt; There wouldn&#39;t be any need to do it for every platform.   There is one objective-C runtime GNUstep uses for every platform it runs on.   So there is no need for it to be different.<br>&gt; <br>&gt; Reimplementing everything in pure swift is silly because it would not allow re-use of all of the objective-c that is out there which is one of the advantages of swift in the first place.<br>&gt; <br>&gt; <br>&gt; GC<br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 3:32 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt; I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br>&gt; <br>&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com &lt;mailto:greg.casamento at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Way ahead of you<br>&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com &lt;mailto:xcvista at me.com&gt;&gt; wrote:<br>&gt;&gt; Dear Swift developers:<br>&gt;&gt; <br>&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt; <br>&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt; <br>&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt; <br>&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt; <br>&gt;&gt; Max_______________________________________________<br>&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt; Gnustep-dev at gnu.org &lt;mailto:Gnustep-dev at gnu.org&gt;<br>&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev &lt;https://lists.gnu.org/mailman/listinfo/gnustep-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Gregory Casamento<br>&gt; GNUstep Lead Developer / OLC, Principal Consultant<br>&gt; http://www.gnustep.org &lt;http://www.gnustep.org/&gt; - http://heronsperch.blogspot.com &lt;http://heronsperch.blogspot.com/&gt;<br>&gt; http://ind.ie/phoenix/ &lt;http://ind.ie/phoenix/&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/adc5b570/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4097 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/adc5b570/attachment.p7s&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>December  3, 2015 at 09:00:00pm</p></header><div class="content"><p>GC,<br></p><p>I just went to check the code for the corelibs and saw that the current iteration is a pretty close direct API mapping of the Objective-C Foundation framework. If this stays the case, then I think I agree with you.<br></p><p>I was under the impression (my bad for not investigating beforehand) was that corelibs was an original library that provided the functionality of the Foundation framework but using all the power and idioms of Swift. I would have preferred that.<br></p><p>David.<br></p><p>&gt; On 03 Dec 2015, at 21:37, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt; <br>&gt; David,<br>&gt; <br>&gt; There wouldn&#39;t be any need to do it for every platform.   There is one objective-C runtime GNUstep uses for every platform it runs on.   So there is no need for it to be different.<br>&gt; <br>&gt; Reimplementing everything in pure swift is silly because it would not allow re-use of all of the objective-c that is out there which is one of the advantages of swift in the first place.<br>&gt; <br>&gt; <br>&gt; GC<br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 3:32 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt; I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br>&gt; <br>&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com &lt;mailto:greg.casamento at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Way ahead of you<br>&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com &lt;mailto:xcvista at me.com&gt;&gt; wrote:<br>&gt;&gt; Dear Swift developers:<br>&gt;&gt; <br>&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt; <br>&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt; <br>&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt; <br>&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt; <br>&gt;&gt; Max_______________________________________________<br>&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt; Gnustep-dev at gnu.org &lt;mailto:Gnustep-dev at gnu.org&gt;<br>&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev &lt;https://lists.gnu.org/mailman/listinfo/gnustep-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Gregory Casamento<br>&gt; GNUstep Lead Developer / OLC, Principal Consultant<br>&gt; http://www.gnustep.org &lt;http://www.gnustep.org/&gt; - http://heronsperch.blogspot.com &lt;http://heronsperch.blogspot.com/&gt;<br>&gt; http://ind.ie/phoenix/ &lt;http://ind.ie/phoenix/&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/d64c447a/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 04:00:00am</p></header><div class="content"><p>If it don?t, just notify GNUstep team and they will add it.<br> <br>&gt; On Dec 4, 2015, at 04:52, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; GC,<br>&gt; <br>&gt; I just went to check the code for the corelibs and saw that the current iteration is a pretty close direct API mapping of the Objective-C Foundation framework. If this stays the case, then I think I agree with you.<br>&gt; <br>&gt; I was under the impression (my bad for not investigating beforehand) was that corelibs was an original library that provided the functionality of the Foundation framework but using all the power and idioms of Swift. I would have preferred that.<br>&gt; <br>&gt; David.<br>&gt; <br>&gt;&gt; On 03 Dec 2015, at 21:37, Gregory Casamento &lt;greg.casamento at gmail.com &lt;mailto:greg.casamento at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; David,<br>&gt;&gt; <br>&gt;&gt; There wouldn&#39;t be any need to do it for every platform.   There is one objective-C runtime GNUstep uses for every platform it runs on.   So there is no need for it to be different.<br>&gt;&gt; <br>&gt;&gt; Reimplementing everything in pure swift is silly because it would not allow re-use of all of the objective-c that is out there which is one of the advantages of swift in the first place.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; GC<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 3, 2015 at 3:32 PM, David Hart &lt;david at hartbit.com &lt;mailto:david at hartbit.com&gt;&gt; wrote:<br>&gt;&gt; I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br>&gt;&gt; <br>&gt;&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com &lt;mailto:greg.casamento at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Way ahead of you<br>&gt;&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com &lt;mailto:xcvista at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Dear Swift developers:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Max_______________________________________________<br>&gt;&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt;&gt; Gnustep-dev at gnu.org &lt;mailto:Gnustep-dev at gnu.org&gt;<br>&gt;&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev &lt;https://lists.gnu.org/mailman/listinfo/gnustep-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Gregory Casamento<br>&gt;&gt; GNUstep Lead Developer / OLC, Principal Consultant<br>&gt;&gt; http://www.gnustep.org &lt;http://www.gnustep.org/&gt; - http://heronsperch.blogspot.com &lt;http://heronsperch.blogspot.com/&gt;<br>&gt;&gt; http://ind.ie/phoenix/ &lt;http://ind.ie/phoenix/&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/66f225f9/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4097 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/66f225f9/attachment.p7s&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 05:00:00am</p></header><div class="content"><p>I am already seeing incompatibilities showing up on this list between this OC-less Swift and the OC-backed Swift that could have been avoided if this project supports OC bridging and some OC backend is provided.<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 4, 2015, at 04:52, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; GC,<br>&gt; <br>&gt; I just went to check the code for the corelibs and saw that the current iteration is a pretty close direct API mapping of the Objective-C Foundation framework. If this stays the case, then I think I agree with you.<br>&gt; <br>&gt; I was under the impression (my bad for not investigating beforehand) was that corelibs was an original library that provided the functionality of the Foundation framework but using all the power and idioms of Swift. I would have preferred that.<br>&gt; <br>&gt; David.<br>&gt; <br>&gt;&gt; On 03 Dec 2015, at 21:37, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; David,<br>&gt;&gt; <br>&gt;&gt; There wouldn&#39;t be any need to do it for every platform.   There is one objective-C runtime GNUstep uses for every platform it runs on.   So there is no need for it to be different.<br>&gt;&gt; <br>&gt;&gt; Reimplementing everything in pure swift is silly because it would not allow re-use of all of the objective-c that is out there which is one of the advantages of swift in the first place.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; GC<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 3, 2015 at 3:32 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt;&gt;&gt; I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Way ahead of you<br>&gt;&gt;&gt;&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Dear Swift developers:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Max_______________________________________________<br>&gt;&gt;&gt;&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; Gnustep-dev at gnu.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Gregory Casamento<br>&gt;&gt; GNUstep Lead Developer / OLC, Principal Consultant<br>&gt;&gt; http://www.gnustep.org - http://heronsperch.blogspot.com<br>&gt;&gt; http://ind.ie/phoenix/<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/512e695e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 05:00:00am</p></header><div class="content"><p>I am talking scaling projects back here. If you allow this bridging from the get-go you don&#39;t need anything other than the compiler, the standard libraries and half a runtime. Not even libdispatch or CoreFoundation is needed in this project since the Objective-C backend&#39;s authors are already maintaining it for you.<br></p><p>As a bonus point, if you can make the build system take Swift and Objective-C equally and not depend on Swift or Objective-C, the authors of the backend may even migrate their build system to the one here (since Cocotron does not have its own build system, and GNUstep&#39;s one is badly documented, clunky and hard to use)<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 4, 2015, at 04:32, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; I also agree with Adrian. I would much prefer to see efforts put towards implementing a pure Swift foundation API than supporting a Cocoa implementation and bridge on every platform Swift will run on.<br>&gt; <br>&gt;&gt; On 03 Dec 2015, at 21:01, Gregory Casamento &lt;greg.casamento at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Way ahead of you<br>&gt;&gt;&gt; On Thu, Dec 3, 2015 at 15:01 Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;&gt;&gt; Dear Swift developers:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Max_______________________________________________<br>&gt;&gt;&gt; Gnustep-dev mailing list<br>&gt;&gt;&gt; Gnustep-dev at gnu.org<br>&gt;&gt;&gt; https://lists.gnu.org/mailman/listinfo/gnustep-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/9eaa7dca/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  3, 2015 at 09:00:00pm</p></header><div class="content"><p>I believe the goal of swift-corelibs-foundation is to fully reimplement Foundation functionality in pure, platform-agnostic Swift, so that no bridging is required (at least on Linux). Maintaining Objective-C interoperability on Linux would be a too huge task at the current stage, in my opinion.<br></p><p>Pozdrawiam ? Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomo?? napisana przez Maxthon Chan &lt;xcvista at me.com&gt; w dniu 03.12.2015, o godz. 21:01:<br>&gt; <br>&gt; Dear Swift developers:<br>&gt; <br>&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt; <br>&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt; <br>&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt; <br>&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt; <br>&gt; Max_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/6103376e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  3, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 12:01 PM, Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt; <br>&gt; Dear Swift developers:<br>&gt; <br>&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br></p><p>Hi Maxthon,<br></p><p>Thanks for your interest, we?re definitely aware of GNUstep and Cocotron.<br></p><p>As others have surmised, the goal for the Swift Foundation project is to provide a pure-swift implementation (which reuses widely-available C libraries) of important Foundation APIs that do *not* depend on the Objective-C runtime.  Reusing GNUstep, Cocotron, or even Apple?s existing Foundation implementation didn?t allow us to achieve those goals, so we didn?t go with those approaches.<br></p><p>We?re aware that this means that it will take longer for the Swift Foundation to be fully operational and useful, but that is a tradeoff we?re willing to make.  You are of course welcome to make Swift work with GNUstep or Cocotron if you?re interested in doing that, but that seems outside the charter of the work on Swift Foundation.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt; <br>&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt; <br>&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt; <br>&gt; Max_______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  3, 2015 at 02:00:00pm</p></header><div class="content"><p>On Thu, Dec 3, 2015 at 2:13 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; As others have surmised, the goal for the Swift Foundation project is to<br>&gt; provide a pure-swift implementation (which reuses widely-available C<br>&gt; libraries) of important Foundation APIs that do *not* depend on the<br>&gt; Objective-C runtime.  Reusing GNUstep, Cocotron, or even Apple?s existing<br>&gt; Foundation implementation didn?t allow us to achieve those goals, so we<br>&gt; didn?t go with those approaches.<br>&gt;<br></p><p>This is great, but is the goal also to exactly duplicate all the<br>idiosyncrasies of the Obj-C Foundation?<br></p><p>Quiz: what&#39;s the result of NSURL(string: &quot;http://one/two;three/four&quot;)?.<br>URLByAppendingPathComponent(&quot;five&quot;) ?<br></p><p>If, as I would hope, corelibs-foundation is an opportunity to make simpler<br>APIs that resolve some of these weirdnesses, then should the class names<br>(NSURL, NSFileHandle, etc.) really be the same?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/07a05285/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December  3, 2015 at 02:00:00pm</p></header><div class="content"><p>Hi Jacob,<br></p><p>&gt; On Dec 3, 2015, at 2:23 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 2:13 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; As others have surmised, the goal for the Swift Foundation project is to provide a pure-swift implementation (which reuses widely-available C libraries) of important Foundation APIs that do *not* depend on the Objective-C runtime.  Reusing GNUstep, Cocotron, or even Apple?s existing Foundation implementation didn?t allow us to achieve those goals, so we didn?t go with those approaches.<br>&gt; <br>&gt; This is great, but is the goal also to exactly duplicate all the idiosyncrasies of the Obj-C Foundation?<br>&gt; <br>&gt; Quiz: what&#39;s the result of NSURL(string: &quot;http://one/two;three/four &lt;http://one/two;three/four&gt;&quot;)?.URLByAppendingPathComponent(&quot;five&quot;) ?<br>&gt; <br>&gt; If, as I would hope, corelibs-foundation is an opportunity to make simpler APIs that resolve some of these weirdnesses, then should the class names (NSURL, NSFileHandle, etc.) really be the same?<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>I think NSURL is actually a pretty great example of an API that we want to be the same on all platforms. There is quite a bit of logic backing it (along with something like NSURLComponents). Check out some of it here:<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/master/CoreFoundation/URL.subproj/CFURLComponents_URIParser.c<br></p><p>(and that CF code is reflected up into NSURLComponents)<br></p><p>It?s tricky stuff, and the goal is to get it as standards compliant as possible. If we use this implementation for all Swift clients then we can get a consistent answer everywhere - and even better, fix bugs everywhere at the same time.<br></p><p>So if you find some of the interface confusing (or wrong), then file a bug for us at bugs.swift.org. We can take this opportunity to try to make it better for everyone.<br></p><p>Thanks,<br>- Tony<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/9fefbcac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December  3, 2015 at 02:00:00pm</p></header><div class="content"><p>Thanks, Tony.<br></p><p>On Thu, Dec 3, 2015 at 2:33 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>wrote:<br></p><p>&gt; It?s tricky stuff, and the goal is to get it as standards compliant as<br>&gt; possible. If we use this implementation for all Swift clients then we can<br>&gt; get a consistent answer everywhere - and even better, fix bugs everywhere<br>&gt; at the same time.<br>&gt;<br></p><p>Agreed. I look forward to it :)  I&#39;m just concerned that users will expect<br>behavior to exactly match their equivalent Obj-C code. If these bugs are<br>fixed / APIs are refined in corelibs-foundation, that expectation might be<br>broken.<br></p><p><br>&gt; So if you find some of the interface confusing (or wrong), then file a bug<br>&gt; for us at bugs.swift.org. We can take this opportunity to try to make it<br>&gt; better for everyone.<br>&gt;<br></p><p>Will do!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/8cf74d14/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December  3, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 2:37 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thanks, Tony.<br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 2:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt; It?s tricky stuff, and the goal is to get it as standards compliant as possible. If we use this implementation for all Swift clients then we can get a consistent answer everywhere - and even better, fix bugs everywhere at the same time.<br>&gt; <br>&gt; Agreed. I look forward to it :)  I&#39;m just concerned that users will expect behavior to exactly match their equivalent Obj-C code. If these bugs are fixed / APIs are refined in corelibs-foundation, that expectation might be broken.<br></p><p>Indeed, a very good point and something we are actively thinking about.<br></p><p>An important goal of our project is to provide a layer of OS independence and portability. There may be times when we have a bug in the Obj-C implementation that we therefore decide to reflect in the Swift implementation as well, because the inconsistency would otherwise be a problem. Hopefully this doesn?t happen too often. I?d rather fix the bug in the Obj-C implementation as well, but there are always going to be tradeoffs to make.<br></p><p>We have lots of experience making changes to Foundation underneath apps and keeping things compatible. I think we?ll certainly be using some of that as we move forward with the Swift Foundation implementation as well. For example, we may choose to deprecate a confusing (or wrong) API and replace it with something better. We?d like the bar for changing API to be very high, though, so that we can provide as much stability to clients as possible.<br></p><p>Thanks,<br>- Tony<br></p><p><br>&gt;  <br>&gt; So if you find some of the interface confusing (or wrong), then file a bug for us at bugs.swift.org &lt;http://bugs.swift.org/&gt;. We can take this opportunity to try to make it better for everyone.<br>&gt; <br>&gt; Will do!<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/bc31b358/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>[swift-evolution] Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 10:00:00am</p></header><div class="content"><p>Both GNUstep and Cocotron have already achieved this ?OS independence and portability? better than you think, on a wider variety of platforms - Linux as well as Windows and FreeBSD. So if you open up the Objective-C compatibility layer and leave the Foundation to them you may have even better OS independence.<br></p><p>&gt; On Dec 4, 2015, at 06:46, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 2:37 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks, Tony.<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 3, 2015 at 2:33 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; It?s tricky stuff, and the goal is to get it as standards compliant as possible. If we use this implementation for all Swift clients then we can get a consistent answer everywhere - and even better, fix bugs everywhere at the same time.<br>&gt;&gt; <br>&gt;&gt; Agreed. I look forward to it :)  I&#39;m just concerned that users will expect behavior to exactly match their equivalent Obj-C code. If these bugs are fixed / APIs are refined in corelibs-foundation, that expectation might be broken.<br>&gt; <br>&gt; Indeed, a very good point and something we are actively thinking about.<br>&gt; <br>&gt; An important goal of our project is to provide a layer of OS independence and portability. There may be times when we have a bug in the Obj-C implementation that we therefore decide to reflect in the Swift implementation as well, because the inconsistency would otherwise be a problem. Hopefully this doesn?t happen too often. I?d rather fix the bug in the Obj-C implementation as well, but there are always going to be tradeoffs to make.<br>&gt; <br>&gt; We have lots of experience making changes to Foundation underneath apps and keeping things compatible. I think we?ll certainly be using some of that as we move forward with the Swift Foundation implementation as well. For example, we may choose to deprecate a confusing (or wrong) API and replace it with something better. We?d like the bar for changing API to be very high, though, so that we can provide as much stability to clients as possible.<br>&gt; <br>&gt; Thanks,<br>&gt; - Tony<br>&gt; <br>&gt; <br>&gt;&gt;  <br>&gt;&gt; So if you find some of the interface confusing (or wrong), then file a bug for us at bugs.swift.org &lt;http://bugs.swift.org/&gt;. We can take this opportunity to try to make it better for everyone.<br>&gt;&gt; <br>&gt;&gt; Will do!<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/1caf06bc/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4097 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/1caf06bc/attachment-0001.p7s&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>Proposal: Swift Open Source Project and Foundation replacements</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 09:00:00am</p></header><div class="content"><p>Swift without Objective-C support will miss out a few important pieces that is crucial to the success of Objective-C outside OS X:<br></p><p>1) AppKit and UIKit. Both GNUstep and Cocotron have their version of AppKit and GNUstep even have a version of UIKit. Missing this means there is no way writing portable Swift app that have any form of GUI.<br>2) WebObjects. I know that Apple deprecated WebObjects for Objective-C long ago, but its clone in GNUstep is still used and maintained. Missing out this means that you cannot easily write Web applications using Swift on Linux without going back to CGI or FastCGI - kind of defeats its purpose isn?t it?<br>3) Code compatibility. One of the best features of both Cocotron and GNUstep is that it allows OS X app to be ported to other platforms without changing its code. This Swift apparently won?t do this.<br></p><p>Max<br></p><p>&gt; On Dec 4, 2015, at 06:13, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 12:01 PM, Maxthon Chan &lt;xcvista at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dear Swift developers:<br>&gt;&gt; <br>&gt;&gt; Maybe you have never heard of it, but there have been several ongoing efforts, like GNUstep and Cocotron, at maintaining an open source Foundation reimplementation for alternative operating systems like Linux. It seemed to me that the current release of Swift did not put such efforts into consideration and brutally broke compatibility between Swift and Objective-C on Linux. I understand the fact that Apple is unwilling to release source code of Foundation, and this is usually where those alternative implementations comes into play.<br>&gt; <br>&gt; Hi Maxthon,<br>&gt; <br>&gt; Thanks for your interest, we?re definitely aware of GNUstep and Cocotron.<br>&gt; <br>&gt; As others have surmised, the goal for the Swift Foundation project is to provide a pure-swift implementation (which reuses widely-available C libraries) of important Foundation APIs that do *not* depend on the Objective-C runtime.  Reusing GNUstep, Cocotron, or even Apple?s existing Foundation implementation didn?t allow us to achieve those goals, so we didn?t go with those approaches.<br>&gt; <br>&gt; We?re aware that this means that it will take longer for the Swift Foundation to be fully operational and useful, but that is a tradeoff we?re willing to make.  You are of course welcome to make Swift work with GNUstep or Cocotron if you?re interested in doing that, but that seems outside the charter of the work on Swift Foundation.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Some of such projects, like GNUstep, are mature enough to allow existing AppKit applications written in Objective-C, like TextEdit and Chess, to be ported from OS X to Linux and Windows without changing too much, if any, code, taking all modern Objective-C features like ARC and object subscripting with stride, with a compatible version of LLVM compiler. Meanwhile, with the current version of Swift, even if the Swift code is written with calls to Objective-C runtime assuming the case on OS X, it is broken under Linux even with libobjc linked in.<br>&gt;&gt; <br>&gt;&gt; I am here suggesting keeping the Objective-C bridge intact at least when built with a compatible version of libobjc (and GNUstep project have one already.) This will allow users of such alternative Foundation reimplementations to use their favourite Foundation distribution in place of the version provided by the Swift project, retaining the code compatibility already established between OS X and Linux by those Swift reimplementations.<br>&gt;&gt; <br>&gt;&gt; In such an environment the alternative Foundation implementation will provide their own version of CoreFoundation and Foundation, implemented using C and Objective-C, as well as a libobjc that supports ARC. The Swift environment would be built without its own CoreFoundation and Foundation, but linking against the provided version instead, bridging calls just like OS X version of Swift does. This will also allow the new Swift platform to take full advantage of the AppKit came with the alternative Foundation, allow porting full OS X apps to Linux a lot easier. The above also applies for porting iOS apps, if the alternative Foundation implementation also comes with their own UIKit.<br>&gt;&gt; <br>&gt;&gt; Max_______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4097 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/8006ccb1/attachment.p7s&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
