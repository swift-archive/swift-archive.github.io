<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0a88a27755600d9f1c1ce00e3c209a38?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Brad Hilton</string> &lt;brad.hilton.nw at gmail.com&gt;<p>July  1, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>I think it’s good to have this functionality in the standard library, but it seems a bit inconsistent with other Swift math operators which are declared as global functions such as abs, max, +, -, /, *, %, etc.<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes, I believe that it would be useful to have these methods.<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>As I mentioned before, it seems to be a departure from Swift’s other math operators. I think global functions such as floor(), ceil() and round() would be more consistent.<br></p><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>July  1, 2016 at 03:00:00pm</p></header><div class="content"><p>Note under the latest floating point and integer protocol proposals the<br>operators you outlined are basically overlays of the protocol functions<br>even abs is replaced with magnitude on a protocol. Sorry not in a situation<br>to link out to the proposals.<br></p><p>On Fri, Jul 1, 2016 at 7:51 AM Brad Hilton via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; What is your evaluation of the proposal?<br>&gt; I think it’s good to have this functionality in the standard library, but<br>&gt; it seems a bit inconsistent with other Swift math operators which are<br>&gt; declared as global functions such as abs, max, +, -, /, *, %, etc.<br>&gt; &gt; Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; Yes, I believe that it would be useful to have these methods.<br>&gt; &gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; As I mentioned before, it seems to be a departure from Swift’s other math<br>&gt; operators. I think global functions such as floor(), ceil() and round()<br>&gt; would be more consistent.<br>&gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0113: Add integral rounding functions to<br>&gt; FloatingPoint&quot; begins now and runs through July 5. The proposal is<br>&gt; available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt; &gt;<br>&gt; &gt; * What is your evaluation of the proposal?<br>&gt; &gt; * Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br>&gt; &gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; &gt; * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Chris Lattner<br>&gt; &gt; Review Manager<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/f3b90246/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
