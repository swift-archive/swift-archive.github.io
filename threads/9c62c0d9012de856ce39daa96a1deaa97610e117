<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>I agree with David.<br></p><p>I don’t think I’ve ever omitted parenthesis in the argument list of a closure; not only that, but I think that omitting them in that case *reduces* clarity, making the closure harder to parse visually.<br></p><p>Nicola<br></p><p>&gt; What is your evaluation of the proposal?<br>&gt; I reluctantly agree with the proposal with the following caveat: I do not agree with the rationale to support being able to choose to omit the () for the parameter list of the closure declaration.<br>&gt; <br>&gt; I see no cohesive argument that says that the parens should be required in some cases but not in others when talking about parameter lists.<br>&gt; <br>&gt; I believe the proposal should be amended that the following should be the only allowable forms:<br>&gt; <br>&gt; y = x.sorted { (lhs : Int, rhs : Int) -&gt;Bool in rhs&lt;lhs }<br>&gt; y = x.sorted { (lhs, rhs) in rhs&lt;lhs }<br>&gt; y = x.sorted { $1&lt;$0 }<br>&gt; <br>&gt; I’ve bolded the change above, today this is allowable:<br>&gt; <br>&gt; y = x.sorted { lhs, rhs in rhs&lt;lhs }<br>&gt; <br>&gt; I’ve read the argument about why it’s ok to elide the parens here, I simply disagree with the author’s premise that this is a structurally significant different form. Not requiring the parens for this parameter list begs the question why other forms require them and provides a similar ambiguity of whether the closure takes two parameters or a single tuple parameter from both of these valid syntaxes today:<br>&gt; <br>&gt; y = x.sorted { lhs, rhs in rhs&lt;lhs }<br>&gt; y = x.sorted { (lhs, rhs) in rhs&lt;lhs }<br>&gt; <br>&gt; I don’t see how this is fundamentally different than the example in the “Motivation” section:<br>&gt; <br>&gt; (Int, Float) -&gt;Int // Takes two arguments, or takes one two-argument tuple?<br>&gt; <br>&gt; While I will concede that `(lhs, rhs)` is not a valid tuple declaration, I’d still argue that it’s too subtle of a difference to be used a primary means of justification. If we are going to remove the ambiguity, let’s remove it for all parameter list scenarios.<br>&gt; <br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Potentially.<br>&gt; <br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes.<br>&gt; <br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; I participated in the original discussion thread as well as tested out many different combinations function and closure syntax in the Swift Playground.<br>&gt; <br>&gt; -David<br>&gt; <br>&gt; <br>&gt; <br>&gt; &gt; On Apr 25, 2016, at 9:22 PM, Douglas Gregor via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Hello Swift community,<br>&gt; &gt; <br>&gt; &gt; The review of SE-0066 &quot;Standardize function type argument syntax to require parentheses&quot; begins now and runs through May 2, 2016. The proposal is available here:<br>&gt; &gt; <br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt; <br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; &gt; <br>&gt; &gt; Proposal link:<br>&gt; &gt; <br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; &gt; Reply text<br>&gt; &gt; <br>&gt; &gt; Other replies<br>&gt; &gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; &gt; <br>&gt; &gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; &gt; <br>&gt; &gt; What is your evaluation of the proposal?<br>&gt; &gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; &gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; &gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt; <br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/process.md&lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; &gt; Thank you,<br>&gt; &gt; <br>&gt; &gt; Doug Gregor<br>&gt; &gt; <br>&gt; &gt; Review Manager<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
