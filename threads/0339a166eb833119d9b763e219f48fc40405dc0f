<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3fe51901d36948779ddf2d144babf2c3?s=50"></div><header><strong>Roll-out of deprecating ++ and --</strong> from <string>Matthijs Hollemans</string> &lt;mail at hollance.com&gt;<p>December  5, 2015 at 10:00:00am</p></header><div class="content"><p>The proposal for the removal of the ++ and -- operators states that,<br></p><p>&gt; In terms of roll-out, we should deprecate them in the Spring Swift 2.x release (with a nice Fixit hint to cover common cases), and remove them completely in Swift 3.<br></p><p>Is it possible to keep the Spring 2.x release non-breaking and backwards compatible? Authors of books everywhere will be grateful. :-)<br></p><p>With the speed that Swift is moving, books are out-of-date before they even hit the shelves. Doing a major yearly update is manageable (barely) but more than that is a huge burden.<br></p><p>Most importantly, it is not a very nice experience for readers if the book they just bought is now wrong. The last thing you want to see as a beginner is warnings or error messages on code that you’ve just typed in from a book.<br></p><p>Now that the evolution of Swift is a community effort, it would be nice if the contribution of book and tutorial authors to the popularity of Swift is recognized and appreciated by the Swift team, and their concerns taken into account as well.<br></p><p>Thanks!<br></p><p>-Matthijs<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Roll-out of deprecating ++ and --</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December  5, 2015 at 03:00:00pm</p></header><div class="content"><p>-1<br></p><p>Slowing down development so that paper books can keep up? Sounds like a very bad idea to me.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 05 Dec 2015, at 10:26, Matthijs Hollemans &lt;mail at hollance.com&gt; wrote:<br>&gt; <br>&gt; The proposal for the removal of the ++ and -- operators states that,<br>&gt; <br>&gt;&gt; In terms of roll-out, we should deprecate them in the Spring Swift 2.x release (with a nice Fixit hint to cover common cases), and remove them completely in Swift 3.<br>&gt; <br>&gt; Is it possible to keep the Spring 2.x release non-breaking and backwards compatible? Authors of books everywhere will be grateful. :-)<br>&gt; <br>&gt; With the speed that Swift is moving, books are out-of-date before they even hit the shelves. Doing a major yearly update is manageable (barely) but more than that is a huge burden.<br>&gt; <br>&gt; Most importantly, it is not a very nice experience for readers if the book they just bought is now wrong. The last thing you want to see as a beginner is warnings or error messages on code that you’ve just typed in from a book.<br>&gt; <br>&gt; Now that the evolution of Swift is a community effort, it would be nice if the contribution of book and tutorial authors to the popularity of Swift is recognized and appreciated by the Swift team, and their concerns taken into account as well.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; -Matthijs<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3d3a2cce932eca144b8c13a63966404?s=50"></div><header><strong>Roll-out of deprecating ++ and --</strong> from <string>Alex Blewitt</string> &lt;alex.blewitt at gmail.com&gt;<p>December  5, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On 5 Dec 2015, at 10:26, Matthijs Hollemans &lt;mail at hollance.com&gt; wrote:<br>&gt; <br>&gt; The proposal for the removal of the ++ and -- operators states that,<br>&gt; <br>&gt;&gt; In terms of roll-out, we should deprecate them in the Spring Swift 2.x release (with a nice Fixit hint to cover common cases), and remove them completely in Swift 3.<br>&gt; <br>&gt; Is it possible to keep the Spring 2.x release non-breaking and backwards compatible? Authors of books everywhere will be grateful. :-)<br>&gt; <br>&gt; With the speed that Swift is moving, books are out-of-date before they even hit the shelves. Doing a major yearly update is manageable (barely) but more than that is a huge burden.<br>&gt; <br>&gt; Most importantly, it is not a very nice experience for readers if the book they just bought is now wrong. The last thing you want to see as a beginner is warnings or error messages on code that you’ve just typed in from a book.<br>&gt; <br>&gt; Now that the evolution of Swift is a community effort, it would be nice if the contribution of book and tutorial authors to the popularity of Swift is recognized and appreciated by the Swift team, and their concerns taken into account as well.<br></p><p>Yes, it&#39;s certainly a challenge I have seen. However the openness of future changes is definitely advantageous (including beta releases) since it allows a first draft to be written and then hopefully not too much changes between then and the final release. <br></p><p>The same problem also exists in StackOverflow answers where users have accepted a question that no longer works. It&#39;s almost impossible to go through the list of UIKit questions where an &quot;as UIxxx&quot; needs to be changed to an &quot;as! UIxxx&quot; but it might be more practical to work through those that have ++ or -- in them - provided that you can search questions for symbols which I&#39;m not sure you always can. <br></p><p>The point is that language agility is good in the initial few releases but each subsequent change has the potential to cause more of the tutorial/how to/blog posts to atrophy, and this should generally be a concern taken into account when changing or removing any feature.<br></p><p>Alex<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Roll-out of deprecating ++ and --</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 1:26 AM, Matthijs Hollemans &lt;mail at hollance.com&gt; wrote:<br>&gt; <br>&gt; The proposal for the removal of the ++ and -- operators states that,<br>&gt; <br>&gt;&gt; In terms of roll-out, we should deprecate them in the Spring Swift 2.x release (with a nice Fixit hint to cover common cases), and remove them completely in Swift 3.<br>&gt; <br>&gt; Is it possible to keep the Spring 2.x release non-breaking and backwards compatible? Authors of books everywhere will be grateful. :-)<br></p><p>Yes, that is the general goal.  I doubt that Swift 2.2 will be 100% compatible with Swift 2.1, but we don’t want major breaking changes.  Things like removal of ++, wide-spread renaming of stdlib and Cocoa APIs (etc) shouldn’t go into Swift 2.2, they should wait for Swift 3.  That said, making these things *warnings* in Swift 2.2 is desirable, because that makes the transition path to swift 3 smoother.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3fe51901d36948779ddf2d144babf2c3?s=50"></div><header><strong>Roll-out of deprecating ++ and --</strong> from <string>Matthijs Hollemans</string> &lt;mail at hollance.com&gt;<p>December  5, 2015 at 07:00:00pm</p></header><div class="content"><p>Awesome, thanks for clarifying. :-)<br></p><p>-Matthijs<br></p><p><br></p><p><br>&gt; On 5 dec. 2015, at 18:29, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 1:26 AM, Matthijs Hollemans &lt;mail at hollance.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The proposal for the removal of the ++ and -- operators states that,<br>&gt;&gt; <br>&gt;&gt;&gt; In terms of roll-out, we should deprecate them in the Spring Swift 2.x release (with a nice Fixit hint to cover common cases), and remove them completely in Swift 3.<br>&gt;&gt; <br>&gt;&gt; Is it possible to keep the Spring 2.x release non-breaking and backwards compatible? Authors of books everywhere will be grateful. :-)<br>&gt; <br>&gt; Yes, that is the general goal.  I doubt that Swift 2.2 will be 100% compatible with Swift 2.1, but we don’t want major breaking changes.  Things like removal of ++, wide-spread renaming of stdlib and Cocoa APIs (etc) shouldn’t go into Swift 2.2, they should wait for Swift 3.  That said, making these things *warnings* in Swift 2.2 is desirable, because that makes the transition path to swift 3 smoother.<br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
