<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>June  3, 2016 at 10:00:00pm</p></header><div class="content"><p>I ran into a major hurdle this week that basically stopped my work in<br>its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>target to a framework target, since we have the same code in multiple<br>app targets and it is problematic to have to remember to add new code to<br>every single app target when they can all just share a framework.<br></p><p>However I didn&#39;t anticipate the issue that made this task explode in<br>terms of effort. According to the Using Swift with Cocoa &amp; obj-C book<br>(this section:<br>https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-ID122),<br>swift code in an app target can be accessed from obj-c if it is internal<br>or public. However, swift code in a framework target can only be<br>accessed from objc if it is public, not internal.<br></p><p>Is there any way around this restriction? The codebase I want to migrate<br>has a lot of swift and obj-c intermingling, and I can&#39;t see a reasonable<br>end to converting everything I need to convert to public from internal<br>for this to work.<br></p><p>If there&#39;s no feasible workaround, would swift-evolution be the proper<br>place to discuss changing this behavior? Or is this something that would<br>need to be logged in radar for the Xcode team to address?<br></p><p>Thanks,<br>- Kevin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>June  3, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jun 3, 2016, at 7:55 PM, Kevin Lundberg via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; swift code in an app target can be accessed from obj-c if it is internal<br>&gt; or public. However, swift code in a framework target can only be<br>&gt; accessed from objc if it is public, not internal.<br></p><p>That’s exactly what the access modifiers are supposed to do. A framework is by definition a separate package from the binary that imports it, so only public symbols are visible.<br></p><p>This doesn’t only apply to Obj-C code, either. Swift code in your app won’t be able to use internal APIs of Swift code from the framework, either.<br></p><p>&gt; would swift-evolution be the proper place to discuss changing this behavior?<br></p><p><br>This seems to be pretty clearly the correct behavior, so I can’t see it being changed.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160603/82f7a554/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June  3, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; I ran into a major hurdle this week that basically stopped my work in<br>&gt; its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>&gt; target to a framework target, since we have the same code in multiple<br>&gt; app targets and it is problematic to have to remember to add new code to<br>&gt; every single app target when they can all just share a framework.<br></p><p>To be clear: Are you having trouble making the Objective-C and Swift inside your framework talk to each other, or the Objective-C outside your framework talk to the Swift inside your framework?<br></p><p>If it&#39;s the latter, then I agree with Jens that this is &quot;works as intended&quot;, and you&#39;re just going to have to spend some time pasting `public` into your code in a lot of places. But if you&#39;re being forced to make Swift APIs public so you can use them from Objective-C *inside* the framework, that might be something worth talking about.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>June  4, 2016 at 02:00:00pm</p></header><div class="content"><p>The former case is what I&#39;m concerned with. I agree that code external to the framework should only see public symbols. However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br></p><p>--<br>Kevin Lundberg<br></p><p>On Jun 4, 2016, at 2:48 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; I ran into a major hurdle this week that basically stopped my work in<br>&gt;&gt; its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>&gt;&gt; target to a framework target, since we have the same code in multiple<br>&gt;&gt; app targets and it is problematic to have to remember to add new code to<br>&gt;&gt; every single app target when they can all just share a framework.<br>&gt; <br>&gt; To be clear: Are you having trouble making the Objective-C and Swift inside your framework talk to each other, or the Objective-C outside your framework talk to the Swift inside your framework?<br>&gt; <br>&gt; If it&#39;s the latter, then I agree with Jens that this is &quot;works as intended&quot;, and you&#39;re just going to have to spend some time pasting `public` into your code in a lot of places. But if you&#39;re being forced to make Swift APIs public so you can use them from Objective-C *inside* the framework, that might be something worth talking about.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>June  4, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br></p><p>I agree; I didn’t realize that was your situation. I haven’t tried doing this myself. It sounds like a bug.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160604/c2703d2f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June  4, 2016 at 11:00:00am</p></header><div class="content"><p>This is probably a solution to a different issue, but what happens if you declare your &quot;should be visible from Objective-C&quot; swift methods as &#39;dynamic&#39;?<br></p><p>Austin<br></p><p>&gt; On Jun 4, 2016, at 11:55 AM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br>&gt; <br>&gt; I agree; I didn’t realize that was your situation. I haven’t tried doing this myself. It sounds like a bug.<br>&gt; <br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160604/883327fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>June  4, 2016 at 07:00:00pm</p></header><div class="content"><p>Its not just methods, but types themselves. Even if this was a solution<br>I&#39;d still have to manually fix all build issues by prepending dynamic to<br>everything that needs it :(<br></p><p><br>On 6/4/2016 2:56 PM, Austin Zheng wrote:<br>&gt; This is probably a solution to a different issue, but what happens if<br>&gt; you declare your &quot;should be visible from Objective-C&quot; swift methods as<br>&gt; &#39;dynamic&#39;?<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt;&gt; On Jun 4, 2016, at 11:55 AM, Jens Alfke via swift-users<br>&gt;&gt; &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users<br>&gt;&gt;&gt; &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; However objc code inside the same framework as the swift code in<br>&gt;&gt;&gt; question should ideally be able to see internal swift symbols as<br>&gt;&gt;&gt; well, as they are within the same module.<br>&gt;&gt;<br>&gt;&gt; I agree; I didn’t realize that was your situation. I haven’t tried<br>&gt;&gt; doing this myself. It sounds like a bug.<br>&gt;&gt;<br>&gt;&gt; —Jens<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160604/a634b99e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  4, 2016 at 01:00:00pm</p></header><div class="content"><p>Unfortunately, this is a limitation of the current model for mixed Obj-C and Swift targets. The Swift code is compiled and optimized as a single module, and the only supported external entry points that result from that are the public API, which is then exposed as the &quot;&lt;module&gt;-Swift.h&quot; header file.<br></p><p>However, this limitation applies to application targets as well, so I&#39;m not sure I understand yet what the blocker is w.r.t. your migration. Can you explain more?<br></p><p> - Daniel<br></p><p>&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The former case is what I&#39;m concerned with. I agree that code external to the framework should only see public symbols. However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br>&gt; <br>&gt; --<br>&gt; Kevin Lundberg<br>&gt; <br>&gt; On Jun 4, 2016, at 2:48 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I ran into a major hurdle this week that basically stopped my work in<br>&gt;&gt;&gt; its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>&gt;&gt;&gt; target to a framework target, since we have the same code in multiple<br>&gt;&gt;&gt; app targets and it is problematic to have to remember to add new code to<br>&gt;&gt;&gt; every single app target when they can all just share a framework.<br>&gt;&gt; <br>&gt;&gt; To be clear: Are you having trouble making the Objective-C and Swift inside your framework talk to each other, or the Objective-C outside your framework talk to the Swift inside your framework?<br>&gt;&gt; <br>&gt;&gt; If it&#39;s the latter, then I agree with Jens that this is &quot;works as intended&quot;, and you&#39;re just going to have to spend some time pasting `public` into your code in a lot of places. But if you&#39;re being forced to make Swift APIs public so you can use them from Objective-C *inside* the framework, that might be something worth talking about.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>June  4, 2016 at 05:00:00pm</p></header><div class="content"><p>Our application target swift code is internal since we don&#39;t bother putting public in there as its not shared outside the app(s), obviously. The internally scoped swift code is exported to obj/c through the generated -Swift.h header when in the app target, in addition to anything marked as public (unlike the framework case where only public symbols are found in that header). <br></p><p>This discrepancy seems off, and could possibly trip up anyone else who wants to migrate some mixed language code from an app to a framework. I&#39;d love for there to be some way to import internal symbols in a private/project visible header in objc code in the same framework. I&#39;d be less enthusiastic if consistency went in the other direction where swift code had to be public to be seen in objc code in an app too, but at least that would be consistent behavior for all types of build targets (and if that change resulted in a migrator to do the work that was too much for me to tackle manually, that wouldn&#39;t be too bad).<br></p><p>--<br>Kevin Lundberg<br></p><p>&gt; On Jun 4, 2016, at 4:00 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; Unfortunately, this is a limitation of the current model for mixed Obj-C and Swift targets. The Swift code is compiled and optimized as a single module, and the only supported external entry points that result from that are the public API, which is then exposed as the &quot;&lt;module&gt;-Swift.h&quot; header file.<br>&gt; <br>&gt; However, this limitation applies to application targets as well, so I&#39;m not sure I understand yet what the blocker is w.r.t. your migration. Can you explain more?<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The former case is what I&#39;m concerned with. I agree that code external to the framework should only see public symbols. However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Kevin Lundberg<br>&gt;&gt; <br>&gt;&gt; On Jun 4, 2016, at 2:48 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I ran into a major hurdle this week that basically stopped my work in<br>&gt;&gt;&gt;&gt; its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>&gt;&gt;&gt;&gt; target to a framework target, since we have the same code in multiple<br>&gt;&gt;&gt;&gt; app targets and it is problematic to have to remember to add new code to<br>&gt;&gt;&gt;&gt; every single app target when they can all just share a framework.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To be clear: Are you having trouble making the Objective-C and Swift inside your framework talk to each other, or the Objective-C outside your framework talk to the Swift inside your framework?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it&#39;s the latter, then I agree with Jens that this is &quot;works as intended&quot;, and you&#39;re just going to have to spend some time pasting `public` into your code in a lot of places. But if you&#39;re being forced to make Swift APIs public so you can use them from Objective-C *inside* the framework, that might be something worth talking about.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  6, 2016 at 10:00:00am</p></header><div class="content"><p>We don&#39;t currently have a way to generate two headers, one to be used internally and one externally. For methods and properties on existing types, it&#39;s safe to write a category manually to be included in your .m files, but classes and protocols don&#39;t really have a good answer.<br></p><p>This is very similar to another existing problem, that you can&#39;t import implementation-detail things into Swift without making them public. However, that problem still needs a lot of design, whereas this one is essentially as simple as &quot;generate two headers&quot;. (It&#39;s not quite that easy because you need one to import the other rather than having them be independent, but it&#39;s still a problem where it&#39;s known that the solution will work.)<br></p><p>&quot;Simple&quot; or &quot;easy&quot; does not necessarily mean &quot;quick to implement&quot;, though, so we have to balance this against other improvements.<br></p><p>Best,<br>Jordan<br></p><p><br>&gt; On Jun 4, 2016, at 13:00, Daniel Dunbar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Unfortunately, this is a limitation of the current model for mixed Obj-C and Swift targets. The Swift code is compiled and optimized as a single module, and the only supported external entry points that result from that are the public API, which is then exposed as the &quot;&lt;module&gt;-Swift.h&quot; header file.<br>&gt; <br>&gt; However, this limitation applies to application targets as well, so I&#39;m not sure I understand yet what the blocker is w.r.t. your migration. Can you explain more?<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The former case is what I&#39;m concerned with. I agree that code external to the framework should only see public symbols. However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Kevin Lundberg<br>&gt;&gt; <br>&gt;&gt; On Jun 4, 2016, at 2:48 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I ran into a major hurdle this week that basically stopped my work in<br>&gt;&gt;&gt;&gt; its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>&gt;&gt;&gt;&gt; target to a framework target, since we have the same code in multiple<br>&gt;&gt;&gt;&gt; app targets and it is problematic to have to remember to add new code to<br>&gt;&gt;&gt;&gt; every single app target when they can all just share a framework.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To be clear: Are you having trouble making the Objective-C and Swift inside your framework talk to each other, or the Objective-C outside your framework talk to the Swift inside your framework?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If it&#39;s the latter, then I agree with Jens that this is &quot;works as intended&quot;, and you&#39;re just going to have to spend some time pasting `public` into your code in a lot of places. But if you&#39;re being forced to make Swift APIs public so you can use them from Objective-C *inside* the framework, that might be something worth talking about.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/cce1ddf5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bab03b11d4cd60804cf4a6ba68589430?s=50"></div><header><strong>Discrepancy between sharing internal Swift symbols with Obj-C when in an app vs a framework target</strong> from <string>Kevin Lundberg</string> &lt;kevin at klundberg.com&gt;<p>June  6, 2016 at 08:00:00pm</p></header><div class="content"><p>My apologies if I insinuated that the effort would be small or trivial, that wasn’t my intent.<br></p><p>The converse situation that you describe, where objc code must also be public in the framework makes sense. I didn’t mind that myself when I was attempting this since this is an internally used framework only, but ideally that should also be resolved. The fact that swift in frameworks has to be public for this to work today is less a problem for me than the discrepancy between target types.<br></p><p>I logged a radar for the swift -&gt; objc case that I described initially as that’s the use case that affects me most: rdar://26663470. <br></p><p>--<br>Kevin Lundberg<br>kevin at klundberg.com<br></p><p>&gt; On Jun 6, 2016, at 1:34 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; We don&#39;t currently have a way to generate two headers, one to be used internally and one externally. For methods and properties on existing types, it&#39;s safe to write a category manually to be included in your .m files, but classes and protocols don&#39;t really have a good answer.<br>&gt; <br>&gt; This is very similar to another existing problem, that you can&#39;t import implementation-detail things into Swift without making them public. However, that problem still needs a lot of design, whereas this one is essentially as simple as &quot;generate two headers&quot;. (It&#39;s not quite that easy because you need one to import the other rather than having them be independent, but it&#39;s still a problem where it&#39;s known that the solution will work.)<br>&gt; <br>&gt; &quot;Simple&quot; or &quot;easy&quot; does not necessarily mean &quot;quick to implement&quot;, though, so we have to balance this against other improvements.<br>&gt; <br>&gt; Best,<br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 4, 2016, at 13:00, Daniel Dunbar via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Unfortunately, this is a limitation of the current model for mixed Obj-C and Swift targets. The Swift code is compiled and optimized as a single module, and the only supported external entry points that result from that are the public API, which is then exposed as the &quot;&lt;module&gt;-Swift.h&quot; header file.<br>&gt;&gt; <br>&gt;&gt; However, this limitation applies to application targets as well, so I&#39;m not sure I understand yet what the blocker is w.r.t. your migration. Can you explain more?<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 4, 2016, at 11:29 AM, Kevin Lundberg via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The former case is what I&#39;m concerned with. I agree that code external to the framework should only see public symbols. However objc code inside the same framework as the swift code in question should ideally be able to see internal swift symbols as well, as they are within the same module.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Kevin Lundberg<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 4, 2016, at 2:48 AM, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I ran into a major hurdle this week that basically stopped my work in<br>&gt;&gt;&gt;&gt;&gt; its tracks. I&#39;ve been working on moving a large codebase from an iOS app<br>&gt;&gt;&gt;&gt;&gt; target to a framework target, since we have the same code in multiple<br>&gt;&gt;&gt;&gt;&gt; app targets and it is problematic to have to remember to add new code to<br>&gt;&gt;&gt;&gt;&gt; every single app target when they can all just share a framework.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To be clear: Are you having trouble making the Objective-C and Swift inside your framework talk to each other, or the Objective-C outside your framework talk to the Swift inside your framework?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If it&#39;s the latter, then I agree with Jens that this is &quot;works as intended&quot;, and you&#39;re just going to have to spend some time pasting `public` into your code in a lot of places. But if you&#39;re being forced to make Swift APIs public so you can use them from Objective-C *inside* the framework, that might be something worth talking about.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/045bbbd4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
