<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 05:00:00pm</p></header><div class="content"><p>on Fri May 06 2016, Cole Campbell &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but<br>&gt; I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39;<br>&gt; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer<br>&gt; it). <br></p><p>It&#39;s not, IMO.  “Reduce” was chosen deliberately over “fold” because we<br>think it is more in “common currency” among programmers, in no small<br>part to the notice that MapReduce has gotten.<br></p><p>&gt; I think changing it now with other source-breaking changes is better<br>&gt; than moving forward with &#39;reduce&#39; and a corresponding function with a<br>&gt; confusing name. Fold/unfold would fit in beautifully with the<br>&gt; prefix/suffix pairings already in the standard library.<br>&gt;<br>&gt; Cole<br>&gt;<br>&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt;<br>&gt;     * When I first encountered it, I understood exactly what it did because I<br>&gt;     knew that term of art. If it was named sequence, I would have been confused.<br>&gt;     * If we are discussing name changes, I&#39;d personally vote to change it to<br>&gt;     fold. It is the other term of art used for it, and it makes unfold work.<br>&gt;<br>&gt;     David<br>&gt;<br>&gt;     On 05 May 2016, at 22:39, Chris Lattner via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;             On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt;             wrote:<br>&gt;<br>&gt;             On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution<br>&gt;             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                 Proposal link:<br>&gt;                 https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;<br>&gt;                 Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are<br>&gt;                 *accepted* as specified in revision 3 of the proposal.<br>&gt;<br>&gt;             I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/<br>&gt;             `drop` pairs that linguistically matched.Nonetheless I&#39;m gratified<br>&gt;             these are hopping into the language. That said, I&#39;m going to put on<br>&gt;             my painters cap to consider selecting some exterior latex for the<br>&gt;             feature I was most looking forward to in this proposal:<br>&gt;<br>&gt;             Core team writes:<br>&gt;<br>&gt;                 unfold(_:applying:) - This addition is *rejected* by the core<br>&gt;                 team as written, but deserves more discussion in the community,<br>&gt;                 and potentially could be the subject of a future proposal. The<br>&gt;                 core team felt that the utility of this operation is high enough<br>&gt;                 to be worth including in the standard library, but could not<br>&gt;                 find an acceptable name for it. “unfold” is problematic, despite<br>&gt;                 its precedence in other language, because Swift calls the<br>&gt;                 corresponding operation “reduce” and not “fold”. No one could<br>&gt;                 get excited about “unreduce”. “iterate” was also considered, but<br>&gt;                 a noun is more appropriate than an verb in this case. Given the<br>&gt;                 lack of a good name, the core team preferred to reject to let<br>&gt;                 the community discuss it more.<br>&gt;<br>&gt;             A few thoughts:<br>&gt;<br>&gt;             * I&#39;m not sure why a noun is more appropriate than a verb. Reduce<br>&gt;             isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;<br>&gt;         I’m not a naming guru, but my understanding is that ‘reduce’ was picked<br>&gt;         because it was term of art (like map), which is what allowed the misuse<br>&gt;         of a verb.<br>&gt;<br>&gt;         One idea that came out of the core team discussion was something like:<br>&gt;<br>&gt;         sequence(from: 0) { $0 += 42 }<br>&gt;<br>&gt;         Since it returns a sequence.<br>&gt;<br>&gt;         -Chris<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  6, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On May 6, 2016, at 7:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri May 06 2016, Cole Campbell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but<br>&gt;&gt; I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39;<br>&gt;&gt; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer<br>&gt;&gt; it). <br>&gt; <br>&gt; It&#39;s not, IMO.  “Reduce” was chosen deliberately over “fold” because we<br>&gt; think it is more in “common currency” among programmers, in no small<br>&gt; part to the notice that MapReduce has gotten.<br></p><p>I was guessing this was the rationale.  But if it’s not too late and “fold” solves the “unfold” naming problem maybe we that balances out the equation.  <br></p><p>Which name do you think best communicates the essence of the operation?  IMO “fold” does a much better job of this.<br></p><p><br>&gt; <br>&gt;&gt; I think changing it now with other source-breaking changes is better<br>&gt;&gt; than moving forward with &#39;reduce&#39; and a corresponding function with a<br>&gt;&gt; confusing name. Fold/unfold would fit in beautifully with the<br>&gt;&gt; prefix/suffix pairings already in the standard library.<br>&gt;&gt; <br>&gt;&gt; Cole<br>&gt;&gt; <br>&gt;&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt;&gt; <br>&gt;&gt;    * When I first encountered it, I understood exactly what it did because I<br>&gt;&gt;    knew that term of art. If it was named sequence, I would have been confused.<br>&gt;&gt;    * If we are discussing name changes, I&#39;d personally vote to change it to<br>&gt;&gt;    fold. It is the other term of art used for it, and it makes unfold work.<br>&gt;&gt; <br>&gt;&gt;    David<br>&gt;&gt; <br>&gt;&gt;    On 05 May 2016, at 22:39, Chris Lattner via swift-evolution<br>&gt;&gt;    &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;            On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt;&gt;            wrote:<br>&gt;&gt; <br>&gt;&gt;            On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution<br>&gt;&gt;            &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;                Proposal link:<br>&gt;&gt;                https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt; <br>&gt;&gt;                Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are<br>&gt;&gt;                *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt; <br>&gt;&gt;            I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/<br>&gt;&gt;            `drop` pairs that linguistically matched.Nonetheless I&#39;m gratified<br>&gt;&gt;            these are hopping into the language. That said, I&#39;m going to put on<br>&gt;&gt;            my painters cap to consider selecting some exterior latex for the<br>&gt;&gt;            feature I was most looking forward to in this proposal:<br>&gt;&gt; <br>&gt;&gt;            Core team writes:<br>&gt;&gt; <br>&gt;&gt;                unfold(_:applying:) - This addition is *rejected* by the core<br>&gt;&gt;                team as written, but deserves more discussion in the community,<br>&gt;&gt;                and potentially could be the subject of a future proposal. The<br>&gt;&gt;                core team felt that the utility of this operation is high enough<br>&gt;&gt;                to be worth including in the standard library, but could not<br>&gt;&gt;                find an acceptable name for it. “unfold” is problematic, despite<br>&gt;&gt;                its precedence in other language, because Swift calls the<br>&gt;&gt;                corresponding operation “reduce” and not “fold”. No one could<br>&gt;&gt;                get excited about “unreduce”. “iterate” was also considered, but<br>&gt;&gt;                a noun is more appropriate than an verb in this case. Given the<br>&gt;&gt;                lack of a good name, the core team preferred to reject to let<br>&gt;&gt;                the community discuss it more.<br>&gt;&gt; <br>&gt;&gt;            A few thoughts:<br>&gt;&gt; <br>&gt;&gt;            * I&#39;m not sure why a noun is more appropriate than a verb. Reduce<br>&gt;&gt;            isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt; <br>&gt;&gt;        I’m not a naming guru, but my understanding is that ‘reduce’ was picked<br>&gt;&gt;        because it was term of art (like map), which is what allowed the misuse<br>&gt;&gt;        of a verb.<br>&gt;&gt; <br>&gt;&gt;        One idea that came out of the core team discussion was something like:<br>&gt;&gt; <br>&gt;&gt;        sequence(from: 0) { $0 += 42 }<br>&gt;&gt; <br>&gt;&gt;        Since it returns a sequence.<br>&gt;&gt; <br>&gt;&gt;        -Chris<br>&gt;&gt; <br>&gt;&gt;        _______________________________________________<br>&gt;&gt;        swift-evolution mailing list<br>&gt;&gt;        swift-evolution at swift.org<br>&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;    _______________________________________________<br>&gt;&gt;    swift-evolution mailing list<br>&gt;&gt;    swift-evolution at swift.org<br>&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
