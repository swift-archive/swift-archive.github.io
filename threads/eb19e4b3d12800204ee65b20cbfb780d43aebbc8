<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>Endgame for Swift 3</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>July 15, 2016 at 10:00:00am</p></header><div class="content"><p>Hi everyone,<br></p><p>Swift 3 has shaped up to be a remarkable release — a product of the inspiration, ideas, and hard labor many people from across the Swift open source community. It is now time, however, to talk about the endgame for the release.<br></p><p>Here are the key points:<br></p><p>The last day to take planned source-breaking changes for Swift 3 is July 27.<br></p><p>On that day, there will likely be a set of approved-but-not-implemented proposals for Swift 3 — including proposals for source-breaking changes. Will have an open discussion on that day on the fate of those unimplemented proposals in the context of Swift 3 and future Swift releases.<br></p><p>Starting on August 1 we will open up discussion about Swift 4. Part of this discussion will likely be guided by important work that was deferred from Swift 3, as well as the a goal of achieving binary stability in Swift 4. Until then, however, discussion should remain focused on Swift 3.<br></p><p>Note that there is an intentional gap of a few days between the last planned day to take source-breaking changes for Swift 3 and when we start talking about Swift 4. The idea is to provide some time for the community to take stock of where things have ended up for Swift 3.<br></p><p>The final branching plan for Swift 3 development is to be determined, but the final convergence branch is likely to be cut from master around that date or shortly after. Part of it comes down to the discussion on July 27 on how to handle the remaining unimplemented proposals for Swift 3.<br></p><p>The final release date for Swift 3 is TBD, but essentially after July 27 the intent is that Swift 3 is in full convergence and not in active development.<br></p><p>With these dates in mind, I want to call attention to some approved-but-not-yet-implemented proposals that currently I have nobody on Apple&#39;s Swift team able to tackle in the next couple weeks:<br></p><p>SE-0042: Flattening the function type of unapplied method references &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0042-flatten-method-types.md&gt;<br>SE-0068: Expanding Swift Self to class members and value types &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0068-universal-self.md&gt;<br>SE-0075: Adding a Build Configuration Import Test &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt;<br>SE-0096: Converting dynamicType from a property to an operator &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0096-dynamictype.md&gt;<br>SE-0077: Improved operator declarations &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0077-operator-precedence.md&gt;<br>SE-0092: Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md&gt;<br>SE-0110: Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>Some proposals — like SE-0075 &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt; — are things we can add at any time, but many of the others tie into the goal of achieving some degree of source-stability for Swift in Swift 3. I&#39;m letting the community know that these proposals currently have no implementation traction in case there is interest in helping make them happen in time for Swift 3.<br></p><p>Related, I&#39;d like to call out a special thanks to the community for getting implementation traction on SE-0095:<br></p><p>SE-0095: Replace protocol&lt;P1,P2&gt; syntax with P1 &amp; P2 syntax &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0095-any-as-existential.md&gt;<br>Currently there is a JIRA issue &lt;https://bugs.swift.org/browse/SR-1938&gt; and pull request &lt;https://github.com/apple/swift/pull/3293&gt; tracking work on implementing this proposal.<br></p><p>In addition to these language proposals, there is also an assortment of outstanding work for the Standard Library that would be great to do for Swift 3. There is a gist summarizing those tasks:<br></p><p>https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d &lt;https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d&gt;<br>These tasks are broken down in relative order of difficulty, with a JIRA issue associated with each one of them. If a JIRA isssue is currently not assigned to anyone, please consider them fair game to tackle if you are interested. API changes that have currently not gone through the evolution process will still need an evolution proposal, even if they are listed in the gist. If you take on a specific task, please assign the JIRA issue to yourself so others know it is being tackled.<br></p><p>Thank you to everyone — and I mean everyone — who has contributed to making Swift 3 happen.<br></p><p>Ted<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160715/eb19bbc8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Endgame for Swift 3</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 16, 2016 at 06:00:00am</p></header><div class="content"><p>https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md<br>  <br></p><p>  <br>Isn&#39;t half of this done, or something? I seem to remember seeing code about it, and I think there may even be a hidden switch to enable what is there.<br>  <br>  <br> Sent from my new   Email (https://itunes.apple.com/app/apple-store/id922793622?pt=814382&amp;mt=8&amp;ct=my_new_email)<br>  <br>  <br>  <br>  <br></p><p>  <br>  <br>&gt;   <br>&gt; On Jul 15, 2016 at 7:46 PM,  &lt;Ted Kremenek via swift-dev (mailto:swift-dev at swift.org)&gt;  wrote:<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; Hi everyone,<br>&gt;<br>&gt;   <br>&gt;<br>&gt; Swift 3 has shaped up to be a remarkable release — a product of the inspiration, ideas, and hard labor many people from across the Swift open source community. It is now time, however, to talk about the endgame for the release.<br>&gt;<br>&gt;   <br>&gt;<br>&gt; Here are the key points:<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; The last day to take planned source-breaking changes for Swift 3 is   July 27 (x-apple-data-detectors://1). (x-apple-data-detectors://1)<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; On that day, there will likely be a set of approved-but-not-implemented proposals for Swift 3 — including proposals for source-breaking changes. Will have an open discussion on that day on the fate of those unimplemented proposals in the context of Swift 3 and future Swift releases.<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; Starting on   (x-apple-data-detectors://2)August 1 (x-apple-data-detectors://2)   we will open up discussion about Swift 4. Part of this discussion will likely be guided by important work that was deferred from Swift 3, as well as the a goal of achieving binary stability in Swift 4. Until then, however, discussion should remain focused on Swift 3.<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; Note that there is an intentional gap of a few days between the last planned day to take source-breaking changes for Swift 3 and when we start talking about Swift 4. The idea is to provide some time for the community to take stock of where things have ended up for Swift 3.<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; The final branching plan for Swift 3 development is to be determined, but the final convergence branch is likely to be cut from   master   around that date or shortly after. Part of it comes down to the discussion  on July 27 (x-apple-data-detectors://3)  on how to handle the remaining unimplemented proposals for Swift 3.<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; The final release date for Swift 3 is TBD, but essentially  after July 27 (x-apple-data-detectors://4)  the intent is that Swift 3 is in full convergence and not in active development.<br>&gt;<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;<br>&gt; With these dates in mind, I want to call attention to some approved-but-not-yet-implemented proposals that currently I have nobody on Apple&#39;s Swift team able to tackle in the next couple weeks:<br>&gt;<br>&gt;   <br>&gt;   <br>&gt; SE-0042: Flattening the function type of unapplied method references (https://github.com/apple/swift-evolution/tree/master/proposals/0042-flatten-method-types.md)<br>&gt;   <br>&gt; SE-0068: Expanding Swift   Self   to class members and value types (https://github.com/apple/swift-evolution/tree/master/proposals/0068-universal-self.md)<br>&gt;   <br>&gt; SE-0075: Adding a Build Configuration Import Test (https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md)<br>&gt;   <br>&gt; SE-0096: Converting dynamicType from a property to an operator (https://github.com/apple/swift-evolution/tree/master/proposals/0096-dynamictype.md)<br>&gt;   <br>&gt; SE-0077: Improved operator declarations (https://github.com/apple/swift-evolution/tree/master/proposals/0077-operator-precedence.md)<br>&gt;   <br>&gt; SE-0092: Typealiases in protocols and protocol extensions (https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md)<br>&gt;   <br>&gt; SE-0110: Distinguish between single-tuple and multiple-argument function types (https://github.com/apple/swift-evolution/tree/master/proposals/0110-distingish-single-tuple-arg.md)<br>&gt;   <br>&gt;   <br>&gt;<br>&gt; Some proposals — like   SE-0075 (https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md)   — are things we can add at any time, but many of the others tie into the goal of achieving some degree of source-stability for Swift in Swift 3. I&#39;m letting the community know that these proposals currently have no implementation traction in case there is interest in helping make them happen in time for Swift 3.<br>&gt;<br>&gt;   <br>&gt;<br>&gt; Related, I&#39;d like to call out a special thanks to the community for getting implementation traction on SE-0095:<br>&gt;<br>&gt;   <br>&gt;   <br>&gt; SE-0095: Replace   protocol&lt;P1,P2&gt;   syntax with   P1  &amp;  P2   syntax (https://github.com/apple/swift-evolution/tree/master/proposals/0095-any-as-existential.md)<br>&gt;   <br>&gt;   <br>&gt;<br>&gt; Currently there is a   JIRA issue (https://bugs.swift.org/browse/SR-1938)   and   pull request (https://github.com/apple/swift/pull/3293)   tracking work on implementing this proposal.<br>&gt;<br>&gt;   <br>&gt;<br>&gt; In addition to these language proposals, there is also an assortment of outstanding work for the Standard Library that would be great to do for Swift 3. There is a gist summarizing those tasks:<br>&gt;<br>&gt;   <br>&gt;   <br>&gt; https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d<br>&gt;   <br>&gt;   <br>&gt;<br>&gt; These tasks are broken down in relative order of difficulty, with a JIRA issue associated with each one of them. If a JIRA isssue is currently not assigned to anyone, please consider them fair game to tackle if you are interested. API changes that have currently not gone through the evolution process will still need an evolution proposal, even if they are listed in the gist. If you take on a specific task, please assign the JIRA issue to yourself so others know it is being tackled.<br>&gt;<br>&gt;   <br>&gt;<br>&gt; Thank you to everyone — and I mean   everyone   — who has contributed to making Swift 3 happen.<br>&gt;<br>&gt;   <br>&gt;<br>&gt; Ted<br>&gt;<br>&gt;  _______________________________________________ swift-dev mailing list  swift-dev at swift.org (mailto:swift-dev at swift.org)   https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;   <br>  <br>  <br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160716/fc2eecd1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>Endgame for Swift 3</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>July 16, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; Isn&#39;t half of this done, or something? I seem to remember seeing code<br>&gt; about it, and I think there may even be a hidden switch to enable what is<br>&gt; there.<br></p><p><br>The parsing code seems to be in place, toggled by the flag Context.LangOpts.<br>EnableProtocolTypealiases:<br>https://github.com/apple/swift/blob/master/lib/Parse/ParseDecl.cpp#L2080<br></p><p>Is this still blocked by support elsewhere?<br></p><p>On Sat, Jul 16, 2016 at 2:19 PM, Karl Wagner via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md<br>&gt;<br>&gt; Isn&#39;t half of this done, or something? I seem to remember seeing code<br>&gt; about it, and I think there may even be a hidden switch to enable what is<br>&gt; there.<br>&gt;<br>&gt; Sent from my new Email<br>&gt; &lt;https://itunes.apple.com/app/apple-store/id922793622?pt=814382&amp;mt=8&amp;ct=my_new_email&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 15, 2016 at 7:46 PM, &lt;Ted Kremenek via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt; Hi everyone,<br>&gt;<br>&gt; Swift 3 has shaped up to be a remarkable release — a product of the<br>&gt; inspiration, ideas, and hard labor many people from across the Swift open<br>&gt; source community. It is now time, however, to talk about the endgame for<br>&gt; the release.<br>&gt;<br>&gt; Here are the key points:<br>&gt;<br>&gt;    -<br>&gt;<br>&gt;    The last day to take planned source-breaking changes for Swift 3 is *July<br>&gt;    27*.<br>&gt;    -<br>&gt;<br>&gt;    On that day, there will likely be a set of<br>&gt;    approved-but-not-implemented proposals for Swift 3 — including proposals<br>&gt;    for source-breaking changes. Will have an open discussion on that day on<br>&gt;    the fate of those unimplemented proposals in the context of Swift 3 and<br>&gt;    future Swift releases.<br>&gt;    -<br>&gt;<br>&gt;    Starting on *August 1* we will open up discussion about Swift 4. Part<br>&gt;    of this discussion will likely be guided by important work that was<br>&gt;    deferred from Swift 3, as well as the a goal of achieving binary stability<br>&gt;    in Swift 4. Until then, however, discussion should remain focused on Swift<br>&gt;    3.<br>&gt;    -<br>&gt;<br>&gt;    Note that there is an intentional gap of a few days between the last<br>&gt;    planned day to take source-breaking changes for Swift 3 and when we start<br>&gt;    talking about Swift 4. The idea is to provide some time for the community<br>&gt;    to take stock of where things have ended up for Swift 3.<br>&gt;    -<br>&gt;<br>&gt;    The final branching plan for Swift 3 development is to be determined,<br>&gt;    but the final convergence branch is likely to be cut from master around<br>&gt;    that date or shortly after. Part of it comes down to the discussion on<br>&gt;    July 27 on how to handle the remaining unimplemented proposals for<br>&gt;    Swift 3.<br>&gt;    -<br>&gt;<br>&gt;    The final release date for Swift 3 is TBD, but essentially after July<br>&gt;    27 the intent is that Swift 3 is in full convergence and not in active<br>&gt;    development.<br>&gt;<br>&gt; With these dates in mind, I want to call attention to some<br>&gt; approved-but-not-yet-implemented proposals that currently I have nobody on<br>&gt; Apple&#39;s Swift team able to tackle in the next couple weeks:<br>&gt;<br>&gt;    - SE-0042: Flattening the function type of unapplied method references<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;    - SE-0068: Expanding Swift Self to class members and value types<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0068-universal-self.md&gt;<br>&gt;    - SE-0075: Adding a Build Configuration Import Test<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt;<br>&gt;    - SE-0096: Converting dynamicType from a property to an operator<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0096-dynamictype.md&gt;<br>&gt;    - SE-0077: Improved operator declarations<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0077-operator-precedence.md&gt;<br>&gt;    - SE-0092: Typealiases in protocols and protocol extensions<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;    - SE-0110: Distinguish between single-tuple and multiple-argument<br>&gt;    function types<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;<br>&gt; Some proposals — like SE-0075<br>&gt; &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt; —<br>&gt; are things we can add at any time, but many of the others tie into the goal<br>&gt; of achieving some degree of source-stability for Swift in Swift 3. I&#39;m<br>&gt; letting the community know that these proposals currently have no<br>&gt; implementation traction in case there is interest in helping make them<br>&gt; happen in time for Swift 3.<br>&gt;<br>&gt; Related, I&#39;d like to call out a special thanks to the community for<br>&gt; getting implementation traction on SE-0095:<br>&gt;<br>&gt;    - SE-0095: Replace protocol&lt;P1,P2&gt; syntax with P1 &amp; P2 syntax<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0095-any-as-existential.md&gt;<br>&gt;<br>&gt; Currently there is a JIRA issue &lt;https://bugs.swift.org/browse/SR-1938&gt;<br>&gt;  and pull request &lt;https://github.com/apple/swift/pull/3293&gt; tracking<br>&gt; work on implementing this proposal.<br>&gt;<br>&gt; In addition to these language proposals, there is also an assortment of<br>&gt; outstanding work for the Standard Library that would be great to do for<br>&gt; Swift 3. There is a gist summarizing those tasks:<br>&gt;<br>&gt;    - https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d<br>&gt;<br>&gt; These tasks are broken down in relative order of difficulty, with a JIRA<br>&gt; issue associated with each one of them. If a JIRA isssue is currently not<br>&gt; assigned to anyone, please consider them fair game to tackle if you are<br>&gt; interested. API changes that have currently not gone through the evolution<br>&gt; process will still need an evolution proposal, even if they are listed in<br>&gt; the gist. If you take on a specific task, please assign the JIRA issue to<br>&gt; yourself so others know it is being tackled.<br>&gt;<br>&gt; Thank you to everyone — and I mean *everyone* — who has contributed to<br>&gt; making Swift 3 happen.<br>&gt;<br>&gt; Ted<br>&gt; _______________________________________________ swift-dev mailing list<br>&gt; swift-dev at swift.org https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160716/50528ee2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>Endgame for Swift 3</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>July 15, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 15, 2016, at 10:35 PM, Patrick Pijnappel via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Isn&#39;t half of this done, or something? I seem to remember seeing code about it, and I think there may even be a hidden switch to enable what is there.<br>&gt;  <br>&gt; The parsing code seems to be in place, toggled by the flag Context.LangOpts.EnableProtocolTypealiases:<br>&gt; https://github.com/apple/swift/blob/master/lib/Parse/ParseDecl.cpp#L2080<br>&gt; <br>&gt; Is this still blocked by support elsewhere?<br></p><p>With the EnableProtocolTypealiases flag turned on, some (most?) of this is done. You can see the tests in test/decl/typealias/protocol.swift along with the remaining FIXMEs. Slava has cleaned up my attempts at it. :-) The last commit (a09986f) in this area is him saying &quot;This will be more generally useful once I fix a few more issues in name lookup”.<br></p><p>	- Greg<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Endgame for Swift 3</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 16, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 15 Jul 2016, at 19:46, Ted Kremenek via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Swift 3 has shaped up to be a remarkable release — a product of the inspiration, ideas, and hard labor many people from across the Swift open source community. It is now time, however, to talk about the endgame for the release.<br>&gt; <br>&gt; Here are the key points:<br>&gt; <br>&gt; The last day to take planned source-breaking changes for Swift 3 is July 27.<br>&gt; <br>&gt; On that day, there will likely be a set of approved-but-not-implemented proposals for Swift 3 — including proposals for source-breaking changes. Will have an open discussion on that day on the fate of those unimplemented proposals in the context of Swift 3 and future Swift releases.<br>&gt; <br>&gt; Starting on August 1 we will open up discussion about Swift 4. Part of this discussion will likely be guided by important work that was deferred from Swift 3, as well as the a goal of achieving binary stability in Swift 4. Until then, however, discussion should remain focused on Swift 3.<br>&gt; <br>&gt; Note that there is an intentional gap of a few days between the last planned day to take source-breaking changes for Swift 3 and when we start talking about Swift 4. The idea is to provide some time for the community to take stock of where things have ended up for Swift 3.<br>&gt; <br>&gt; The final branching plan for Swift 3 development is to be determined, but the final convergence branch is likely to be cut from master around that date or shortly after. Part of it comes down to the discussion on July 27 on how to handle the remaining unimplemented proposals for Swift 3.<br>&gt; <br>&gt; The final release date for Swift 3 is TBD, but essentially after July 27 the intent is that Swift 3 is in full convergence and not in active development.<br>&gt; <br>&gt; With these dates in mind, I want to call attention to some approved-but-not-yet-implemented proposals that currently I have nobody on Apple&#39;s Swift team able to tackle in the next couple weeks:<br>&gt; <br>&gt; SE-0042: Flattening the function type of unapplied method references &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0042-flatten-method-types.md&gt;<br>&gt; SE-0068: Expanding Swift Self to class members and value types &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0068-universal-self.md&gt;<br>&gt; SE-0075: Adding a Build Configuration Import Test &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt;<br>&gt; SE-0096: Converting dynamicType from a property to an operator &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0096-dynamictype.md&gt;<br>&gt; SE-0077: Improved operator declarations &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0077-operator-precedence.md&gt;<br>&gt; SE-0092: Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt; SE-0110: Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt; Some proposals — like SE-0075 &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt; — are things we can add at any time, but many of the others tie into the goal of achieving some degree of source-stability for Swift in Swift 3. I&#39;m letting the community know that these proposals currently have no implementation traction in case there is interest in helping make them happen in time for Swift 3.<br>&gt; <br>&gt; Related, I&#39;d like to call out a special thanks to the community for getting implementation traction on SE-0095:<br>&gt; <br>&gt; SE-0095: Replace protocol&lt;P1,P2&gt; syntax with P1 &amp; P2 syntax &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0095-any-as-existential.md&gt;<br>&gt; Currently there is a JIRA issue &lt;https://bugs.swift.org/browse/SR-1938&gt; and pull request &lt;https://github.com/apple/swift/pull/3293&gt; tracking work on implementing this proposal.<br>&gt; <br>&gt; In addition to these language proposals, there is also an assortment of outstanding work for the Standard Library that would be great to do for Swift 3. There is a gist summarizing those tasks:<br>&gt; <br>&gt; https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d &lt;https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d&gt;<br>&gt; These tasks are broken down in relative order of difficulty, with a JIRA issue associated with each one of them. If a JIRA isssue is currently not assigned to anyone, please consider them fair game to tackle if you are interested. API changes that have currently not gone through the evolution process will still need an evolution proposal, even if they are listed in the gist. If you take on a specific task, please assign the JIRA issue to yourself so others know it is being tackled.<br>&gt; <br>&gt; Thank you to everyone — and I mean everyone — who has contributed to making Swift 3 happen.<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p><br>Oh, and one more thing - the new Dispatch API. I’m unhappy with some parts of it, and I’ve seen discussions on here before mine from people who were unhappy with the same parts (and more). The dispatch team have said they are planning changes, but I don’t think they’ll resolve the issue.<br></p><p>I think the proper thing to do would be to have another review about any changes the dispatch team are planning for Swift 3, so we have a chance to discuss it and come to some consensus. Perhaps for Foundation, too, if they are planning any late changes to the new API (I don’t know of any specifically)?<br></p><p>Karl<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160716/821b7ccc/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b04cad4cec3d0229248b366373bf4e62?s=50"></div><header><strong>[swift-evolution] Endgame for Swift 3</strong> from <string>Will Field-Thompson</string> &lt;will.a.ft at gmail.com&gt;<p>July 15, 2016 at 06:00:00pm</p></header><div class="content"><p>Is there any way to tell which of the changes in the gist have had<br>proposals associated with them?<br></p><p>-- Will<br></p><p>On Fri, Jul 15, 2016 at 1:46 PM Ted Kremenek via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; Swift 3 has shaped up to be a remarkable release — a product of the<br>&gt; inspiration, ideas, and hard labor many people from across the Swift open<br>&gt; source community. It is now time, however, to talk about the endgame for<br>&gt; the release.<br>&gt;<br>&gt; Here are the key points:<br>&gt;<br>&gt;    -<br>&gt;<br>&gt;    The last day to take planned source-breaking changes for Swift 3 is *July<br>&gt;    27*.<br>&gt;    -<br>&gt;<br>&gt;    On that day, there will likely be a set of<br>&gt;    approved-but-not-implemented proposals for Swift 3 — including proposals<br>&gt;    for source-breaking changes. Will have an open discussion on that day on<br>&gt;    the fate of those unimplemented proposals in the context of Swift 3 and<br>&gt;    future Swift releases.<br>&gt;    -<br>&gt;<br>&gt;    Starting on *August 1* we will open up discussion about Swift 4. Part<br>&gt;    of this discussion will likely be guided by important work that was<br>&gt;    deferred from Swift 3, as well as the a goal of achieving binary stability<br>&gt;    in Swift 4. Until then, however, discussion should remain focused on Swift<br>&gt;    3.<br>&gt;    -<br>&gt;<br>&gt;    Note that there is an intentional gap of a few days between the last<br>&gt;    planned day to take source-breaking changes for Swift 3 and when we start<br>&gt;    talking about Swift 4. The idea is to provide some time for the community<br>&gt;    to take stock of where things have ended up for Swift 3.<br>&gt;    -<br>&gt;<br>&gt;    The final branching plan for Swift 3 development is to be determined,<br>&gt;    but the final convergence branch is likely to be cut from master around<br>&gt;    that date or shortly after. Part of it comes down to the discussion on July<br>&gt;    27 on how to handle the remaining unimplemented proposals for Swift 3.<br>&gt;    -<br>&gt;<br>&gt;    The final release date for Swift 3 is TBD, but essentially after July<br>&gt;    27 the intent is that Swift 3 is in full convergence and not in active<br>&gt;    development.<br>&gt;<br>&gt; With these dates in mind, I want to call attention to some<br>&gt; approved-but-not-yet-implemented proposals that currently I have nobody on<br>&gt; Apple&#39;s Swift team able to tackle in the next couple weeks:<br>&gt;<br>&gt;    - SE-0042: Flattening the function type of unapplied method references<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;    - SE-0068: Expanding Swift Self to class members and value types<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0068-universal-self.md&gt;<br>&gt;    - SE-0075: Adding a Build Configuration Import Test<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt;<br>&gt;    - SE-0096: Converting dynamicType from a property to an operator<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0096-dynamictype.md&gt;<br>&gt;    - SE-0077: Improved operator declarations<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0077-operator-precedence.md&gt;<br>&gt;    - SE-0092: Typealiases in protocols and protocol extensions<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;    - SE-0110: Distinguish between single-tuple and multiple-argument<br>&gt;    function types<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;<br>&gt; Some proposals — like SE-0075<br>&gt; &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0075-import-test.md&gt; —<br>&gt; are things we can add at any time, but many of the others tie into the goal<br>&gt; of achieving some degree of source-stability for Swift in Swift 3. I&#39;m<br>&gt; letting the community know that these proposals currently have no<br>&gt; implementation traction in case there is interest in helping make them<br>&gt; happen in time for Swift 3.<br>&gt;<br>&gt; Related, I&#39;d like to call out a special thanks to the community for<br>&gt; getting implementation traction on SE-0095:<br>&gt;<br>&gt;    - SE-0095: Replace protocol&lt;P1,P2&gt; syntax with P1 &amp; P2 syntax<br>&gt;    &lt;https://github.com/apple/swift-evolution/tree/master/proposals/0095-any-as-existential.md&gt;<br>&gt;<br>&gt; Currently there is a JIRA issue &lt;https://bugs.swift.org/browse/SR-1938&gt;<br>&gt;  and pull request &lt;https://github.com/apple/swift/pull/3293&gt; tracking<br>&gt; work on implementing this proposal.<br>&gt;<br>&gt; In addition to these language proposals, there is also an assortment of<br>&gt; outstanding work for the Standard Library that would be great to do for<br>&gt; Swift 3. There is a gist summarizing those tasks:<br>&gt;<br>&gt;    - https://gist.github.com/gribozavr/37e811f12b27c6365fc88e6f9645634d<br>&gt;<br>&gt; These tasks are broken down in relative order of difficulty, with a JIRA<br>&gt; issue associated with each one of them. If a JIRA isssue is currently not<br>&gt; assigned to anyone, please consider them fair game to tackle if you are<br>&gt; interested. API changes that have currently not gone through the evolution<br>&gt; process will still need an evolution proposal, even if they are listed in<br>&gt; the gist. If you take on a specific task, please assign the JIRA issue to<br>&gt; yourself so others know it is being tackled.<br>&gt;<br>&gt; Thank you to everyone — and I mean *everyone* — who has contributed to<br>&gt; making Swift 3 happen.<br>&gt;<br>&gt; Ted<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160715/fd782cef/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
