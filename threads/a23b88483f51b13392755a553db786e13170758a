<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec6689b267447cdcd58fbe5d89332b25?s=50"></div><header><strong>Project init command</strong> from <string>Lander Brandt</string> &lt;landerbrandt at gmail.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>On the Swift package manager page on swift.org &lt;http://swift.org/&gt; (https://swift.org/package-manager/#example-usage &lt;https://swift.org/package-manager/#example-usage&gt;) the requirements for creating a package/application are clearly outlined, but why not include a command in the swift tool for autogenerating the require? I did a quick look and didn’t see any existing discussion, so I apologize if this has already been discussed.<br></p><p>Example of the tool command: `swift init foo --type=(lib|app)`<br></p><p>Would create a new directory called “foo” with the following tree structure for a project of type app:<br></p><p>foo<br>├── Package.swift<br>├── Packages<br>├── README.md<br>└── main.swift<br></p><p>And for project of type lib:<br></p><p>foo<br>├── Package.swift<br>├── README.md<br>└── Sources<br>    └── Foo.swift<br></p><p>In both cases Package.swift would contain something basic like:<br></p><p>import PackageDescription<br></p><p>let package = Package(<br>    name: “Foo&quot;,<br>    dependencies: [<br>    ]<br>)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151205/a23b758a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a28b53f05e7f3067fb104cb78fbb585?s=50"></div><header><strong>Project init command</strong> from <string>Kostiantyn Koval</string> &lt;konstantin.koval1 at gmail.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>I like the idea. It would make people to follow the standard convention even more. And make it even simpler to create a Module.<br></p><p>Kostiantyn<br></p><p>&gt; On 05 Dec 2015, at 22:01, Lander Brandt via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On the Swift package manager page on swift.org &lt;http://swift.org/&gt; (https://swift.org/package-manager/#example-usage &lt;https://swift.org/package-manager/#example-usage&gt;) the requirements for creating a package/application are clearly outlined, but why not include a command in the swift tool for autogenerating the require? I did a quick look and didn’t see any existing discussion, so I apologize if this has already been discussed.<br>&gt; <br>&gt; Example of the tool command: `swift init foo --type=(lib|app)`<br>&gt; <br>&gt; Would create a new directory called “foo” with the following tree structure for a project of type app:<br>&gt; <br>&gt; foo<br>&gt; ├── Package.swift<br>&gt; ├── Packages<br>&gt; ├── README.md<br>&gt; └── main.swift<br>&gt; <br>&gt; And for project of type lib:<br>&gt; <br>&gt; foo<br>&gt; ├── Package.swift<br>&gt; ├── README.md<br>&gt; └── Sources<br>&gt;     └── Foo.swift<br>&gt; <br>&gt; In both cases Package.swift would contain something basic like:<br>&gt; <br>&gt; import PackageDescription<br>&gt; <br>&gt; let package = Package(<br>&gt;     name: “Foo&quot;,<br>&gt;     dependencies: [<br>&gt;     ]<br>&gt; )<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151205/edbd48ab/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Project init command</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>This is indeed something we have discussed and agree it would make sense to add, just haven&#39;t gotten there yet.<br></p><p>Patches in this direction are welcome, although I recommend as with any new feature coming up with a concrete proposal and outline before you set in on the implementation...<br></p><p>&gt; On Dec 5, 2015, at 1:01 PM, Lander Brandt via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On the Swift package manager page on swift.org &lt;http://swift.org/&gt; (https://swift.org/package-manager/#example-usage &lt;https://swift.org/package-manager/#example-usage&gt;) the requirements for creating a package/application are clearly outlined, but why not include a command in the swift tool for autogenerating the require? I did a quick look and didn’t see any existing discussion, so I apologize if this has already been discussed.<br>&gt; <br>&gt; Example of the tool command: `swift init foo --type=(lib|app)`<br></p><p>One question we would need to resolve is whether or not the tool should be interactive. If one goal<br></p><p>&gt; <br>&gt; Would create a new directory called “foo” with the following tree structure for a project of type app:<br>&gt; <br>&gt; foo<br>&gt; ├── Package.swift<br>&gt; ├── Packages<br>&gt; ├── README.md<br>&gt; └── main.swift<br></p><p>This is most likely not the initial layout we want to recommend, because it is less obvious how to migrate upwards. This flat layout is a little confusing as well to newcomers because Package.swift here *isn&#39;t* part of their actual larget. We included support for this style for &quot;micro-framework&quot; type packages, where it can be useful for the simplicity of the project to be obvious in the initial repo view, but this is something more advanced users can come to discover.<br>&gt; <br>&gt; And for project of type lib:<br>&gt; <br>&gt; foo<br>&gt; ├── Package.swift<br>&gt; ├── README.md<br>&gt; └── Sources<br>&gt;     └── Foo.swift<br>&gt; <br>&gt; In both cases Package.swift would contain something basic like:<br>&gt; <br>&gt; import PackageDescription<br>&gt; <br>&gt; let package = Package(<br>&gt;     name: “Foo&quot;,<br>&gt;     dependencies: [<br>&gt;     ]<br>&gt; )<br></p><p>I&#39;d probably leave dependencies: out of this. I presume you added it to help people know where to add things, but another related thing we would like to see develop is tools for automatically editing this file (e.g., a command to add a new dependency). Tools like that will help people get their manifest files right w/o needing to memorize the package syntax.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151205/38e6239b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Project init command</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 1:15 PM, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; This is indeed something we have discussed and agree it would make sense to add, just haven&#39;t gotten there yet.<br>&gt; <br>&gt; Patches in this direction are welcome, although I recommend as with any new feature coming up with a concrete proposal and outline before you set in on the implementation...<br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 1:01 PM, Lander Brandt via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On the Swift package manager page on swift.org &lt;http://swift.org/&gt; (https://swift.org/package-manager/#example-usage &lt;https://swift.org/package-manager/#example-usage&gt;) the requirements for creating a package/application are clearly outlined, but why not include a command in the swift tool for autogenerating the require? I did a quick look and didn’t see any existing discussion, so I apologize if this has already been discussed.<br>&gt;&gt; <br>&gt;&gt; Example of the tool command: `swift init foo --type=(lib|app)`<br>&gt; <br>&gt; One question we would need to resolve is whether or not the tool should be interactive. If one goal<br></p><p>To finish my thought:<br></p><p>If one goal of the tool is to help out newcomers, it might make sense for the default invocation to be interactive with command line prompts, and then provide options which advanced users can use to efficiently create new projects.<br></p><p> - Daniel<br></p><p>&gt;&gt; <br>&gt;&gt; Would create a new directory called “foo” with the following tree structure for a project of type app:<br>&gt;&gt; <br>&gt;&gt; foo<br>&gt;&gt; ├── Package.swift<br>&gt;&gt; ├── Packages<br>&gt;&gt; ├── README.md<br>&gt;&gt; └── main.swift<br>&gt; <br>&gt; This is most likely not the initial layout we want to recommend, because it is less obvious how to migrate upwards. This flat layout is a little confusing as well to newcomers because Package.swift here *isn&#39;t* part of their actual larget. We included support for this style for &quot;micro-framework&quot; type packages, where it can be useful for the simplicity of the project to be obvious in the initial repo view, but this is something more advanced users can come to discover.<br>&gt;&gt; <br>&gt;&gt; And for project of type lib:<br>&gt;&gt; <br>&gt;&gt; foo<br>&gt;&gt; ├── Package.swift<br>&gt;&gt; ├── README.md<br>&gt;&gt; └── Sources<br>&gt;&gt;     └── Foo.swift<br>&gt;&gt; <br>&gt;&gt; In both cases Package.swift would contain something basic like:<br>&gt;&gt; <br>&gt;&gt; import PackageDescription<br>&gt;&gt; <br>&gt;&gt; let package = Package(<br>&gt;&gt;     name: “Foo&quot;,<br>&gt;&gt;     dependencies: [<br>&gt;&gt;     ]<br>&gt;&gt; )<br>&gt; <br>&gt; I&#39;d probably leave dependencies: out of this. I presume you added it to help people know where to add things, but another related thing we would like to see develop is tools for automatically editing this file (e.g., a command to add a new dependency). Tools like that will help people get their manifest files right w/o needing to memorize the package syntax.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151205/831650ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec6689b267447cdcd58fbe5d89332b25?s=50"></div><header><strong>Project init command</strong> from <string>Lander Brandt</string> &lt;landerbrandt at gmail.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>Interactive by default would definitely be better for newcomers. I’ll see about submitting a formal proposal soon although it may not appear until after this upcoming Wednesday as I have university finals that are slightly higher priority.<br></p><p>&gt; On Dec 5, 2015, at 13:17, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 5, 2015, at 1:15 PM, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is indeed something we have discussed and agree it would make sense to add, just haven&#39;t gotten there yet.<br>&gt;&gt; <br>&gt;&gt; Patches in this direction are welcome, although I recommend as with any new feature coming up with a concrete proposal and outline before you set in on the implementation...<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 1:01 PM, Lander Brandt via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On the Swift package manager page on swift.org &lt;http://swift.org/&gt; (https://swift.org/package-manager/#example-usage &lt;https://swift.org/package-manager/#example-usage&gt;) the requirements for creating a package/application are clearly outlined, but why not include a command in the swift tool for autogenerating the require? I did a quick look and didn’t see any existing discussion, so I apologize if this has already been discussed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Example of the tool command: `swift init foo --type=(lib|app)`<br>&gt;&gt; <br>&gt;&gt; One question we would need to resolve is whether or not the tool should be interactive. If one goal<br>&gt; <br>&gt; To finish my thought:<br>&gt; <br>&gt; If one goal of the tool is to help out newcomers, it might make sense for the default invocation to be interactive with command line prompts, and then provide options which advanced users can use to efficiently create new projects.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would create a new directory called “foo” with the following tree structure for a project of type app:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; foo<br>&gt;&gt;&gt; ├── Package.swift<br>&gt;&gt;&gt; ├── Packages<br>&gt;&gt;&gt; ├── README.md<br>&gt;&gt;&gt; └── main.swift<br>&gt;&gt; <br>&gt;&gt; This is most likely not the initial layout we want to recommend, because it is less obvious how to migrate upwards. This flat layout is a little confusing as well to newcomers because Package.swift here *isn&#39;t* part of their actual larget. We included support for this style for &quot;micro-framework&quot; type packages, where it can be useful for the simplicity of the project to be obvious in the initial repo view, but this is something more advanced users can come to discover.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And for project of type lib:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; foo<br>&gt;&gt;&gt; ├── Package.swift<br>&gt;&gt;&gt; ├── README.md<br>&gt;&gt;&gt; └── Sources<br>&gt;&gt;&gt;     └── Foo.swift<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In both cases Package.swift would contain something basic like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; import PackageDescription<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let package = Package(<br>&gt;&gt;&gt;     name: “Foo&quot;,<br>&gt;&gt;&gt;     dependencies: [<br>&gt;&gt;&gt;     ]<br>&gt;&gt;&gt; )<br>&gt;&gt; <br>&gt;&gt; I&#39;d probably leave dependencies: out of this. I presume you added it to help people know where to add things, but another related thing we would like to see develop is tools for automatically editing this file (e.g., a command to add a new dependency). Tools like that will help people get their manifest files right w/o needing to memorize the package syntax.<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151205/83248cf1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Project init command</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 1:23 PM, Lander Brandt &lt;landerbrandt at gmail.com&gt; wrote:<br>&gt; <br>&gt; Interactive by default would definitely be better for newcomers. I’ll see about submitting a formal proposal soon although it may not appear until after this upcoming Wednesday as I have university finals that are slightly higher priority.<br></p><p>Cool!<br></p><p>The kinds of issues I&#39;d like to see some kind of plan for are:<br></p><p>1. Interactivity model<br>2. Conflict resolution: Does the command refuse to run if there is an existing Package.swift, or should it also be the same mechanism that is used to automatically update the Package.swift.<br>3. Source files: When should the command help create source files?<br>4. Automation: When can we automatically invoke this tool? Swift build with empty dir? When we notice a new target? etc.<br></p><p> - Daniel<br></p><p>&gt;&gt; On Dec 5, 2015, at 13:17, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 1:15 PM, Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is indeed something we have discussed and agree it would make sense to add, just haven&#39;t gotten there yet.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Patches in this direction are welcome, although I recommend as with any new feature coming up with a concrete proposal and outline before you set in on the implementation...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 5, 2015, at 1:01 PM, Lander Brandt via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On the Swift package manager page on swift.org &lt;http://swift.org/&gt; (https://swift.org/package-manager/#example-usage &lt;https://swift.org/package-manager/#example-usage&gt;) the requirements for creating a package/application are clearly outlined, but why not include a command in the swift tool for autogenerating the require? I did a quick look and didn’t see any existing discussion, so I apologize if this has already been discussed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Example of the tool command: `swift init foo --type=(lib|app)`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One question we would need to resolve is whether or not the tool should be interactive. If one goal<br>&gt;&gt; <br>&gt;&gt; To finish my thought:<br>&gt;&gt; <br>&gt;&gt; If one goal of the tool is to help out newcomers, it might make sense for the default invocation to be interactive with command line prompts, and then provide options which advanced users can use to efficiently create new projects.<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would create a new directory called “foo” with the following tree structure for a project of type app:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; foo<br>&gt;&gt;&gt;&gt; ├── Package.swift<br>&gt;&gt;&gt;&gt; ├── Packages<br>&gt;&gt;&gt;&gt; ├── README.md<br>&gt;&gt;&gt;&gt; └── main.swift<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is most likely not the initial layout we want to recommend, because it is less obvious how to migrate upwards. This flat layout is a little confusing as well to newcomers because Package.swift here *isn&#39;t* part of their actual larget. We included support for this style for &quot;micro-framework&quot; type packages, where it can be useful for the simplicity of the project to be obvious in the initial repo view, but this is something more advanced users can come to discover.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And for project of type lib:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; foo<br>&gt;&gt;&gt;&gt; ├── Package.swift<br>&gt;&gt;&gt;&gt; ├── README.md<br>&gt;&gt;&gt;&gt; └── Sources<br>&gt;&gt;&gt;&gt;     └── Foo.swift<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In both cases Package.swift would contain something basic like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; import PackageDescription<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let package = Package(<br>&gt;&gt;&gt;&gt;     name: “Foo&quot;,<br>&gt;&gt;&gt;&gt;     dependencies: [<br>&gt;&gt;&gt;&gt;     ]<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d probably leave dependencies: out of this. I presume you added it to help people know where to add things, but another related thing we would like to see develop is tools for automatically editing this file (e.g., a command to add a new dependency). Tools like that will help people get their manifest files right w/o needing to memorize the package syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151205/fe67e618/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
