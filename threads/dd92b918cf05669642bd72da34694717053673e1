<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b816b2b1af6ff24b077be5cffa7fea26?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Arman Shan</string> &lt;armanshan12 at gmail.com&gt;<p>January 15, 2016 at 11:00:00am</p></header><div class="content"><p>Hi,<br></p><p>I was wondering if we could add a new filter method to the stdlib, where<br>instead of returning just one array, it returns a tuple of 2 arrays, one<br>with items that the closure returned true for and one with items that the<br>closure returned false for. What do you think?<br></p><p>Thank you,<br></p><p>Arman<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/dd9273e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>January 15, 2016 at 09:00:00am</p></header><div class="content"><p>That seems like a solid idea.<br></p><p>On Fri, Jan 15, 2016 at 8:02 AM, Arman Shanjani via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; I was wondering if we could add a new filter method to the stdlib, where<br>&gt; instead of returning just one array, it returns a tuple of 2 arrays, one<br>&gt; with items that the closure returned true for and one with items that the<br>&gt; closure returned false for. What do you think?<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Arman<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Nate Birkholz<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/d7591e07/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>January 15, 2016 at 12:00:00pm</p></header><div class="content"><p>If we&#39;re going to add a partition method, can the original filter be rewritten in terms of it?<br></p><p>~Robert Widmann<br></p><p>2016/01/15 12:07、Nate Birkholz via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; That seems like a solid idea.<br>&gt; <br>&gt;&gt; On Fri, Jan 15, 2016 at 8:02 AM, Arman Shanjani via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I was wondering if we could add a new filter method to the stdlib, where instead of returning just one array, it returns a tuple of 2 arrays, one with items that the closure returned true for and one with items that the closure returned false for. What do you think?<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Arman<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Nate Birkholz<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/8f3cd9f9/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b816b2b1af6ff24b077be5cffa7fea26?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Arman Shan</string> &lt;armanshan12 at gmail.com&gt;<p>January 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Yes. I was thinking we would just copy over the filter implementation, and it should only need a small modification to keep track of the items being filtered, and finally return 2 arrays.<br></p><p><br>&gt; On Jan 15, 2016, at 12:11 PM, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; If we&#39;re going to add a partition method, can the original filter be rewritten in terms of it?<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/01/15 12:07、Nate Birkholz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt; <br>&gt;&gt; That seems like a solid idea.<br>&gt;&gt; <br>&gt;&gt; On Fri, Jan 15, 2016 at 8:02 AM, Arman Shanjani via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I was wondering if we could add a new filter method to the stdlib, where instead of returning just one array, it returns a tuple of 2 arrays, one with items that the closure returned true for and one with items that the closure returned false for. What do you think?<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Arman<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Nate Birkholz<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/35141793/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 15, 2016 at 11:00:00am</p></header><div class="content"><p>I’m not sure if it’s currently done this way… In theory, filter can allocate enough contiguous memory to store all the results up front, skip all the overhead of expanding an array, and if it doesn’t all get used, well not caring (as much) about memory fragmentation is (one reason) why we have a 64-bit address space. This would be harder to do (or necessarily double the storage requirements) if filter could return two arrays, either of which could potentially contain as many elements as the original array.<br></p><p>Which is not to say I’m against having this because it does sound handy, I just don’t want it instead of the current filter function.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 15, 2016, at 09:59, Arman Shan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes. I was thinking we would just copy over the filter implementation, and it should only need a small modification to keep track of the items being filtered, and finally return 2 arrays.<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 12:11 PM, Developer &lt;devteam.codafi at gmail.com &lt;mailto:devteam.codafi at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If we&#39;re going to add a partition method, can the original filter be rewritten in terms of it?<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt; 2016/01/15 12:07、Nate Birkholz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt;&gt; <br>&gt;&gt;&gt; That seems like a solid idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jan 15, 2016 at 8:02 AM, Arman Shanjani via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was wondering if we could add a new filter method to the stdlib, where instead of returning just one array, it returns a tuple of 2 arrays, one with items that the closure returned true for and one with items that the closure returned false for. What do you think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Arman<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Nate Birkholz<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/c52e7231/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b816b2b1af6ff24b077be5cffa7fea26?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Arman Shan</string> &lt;armanshan12 at gmail.com&gt;<p>January 15, 2016 at 02:00:00pm</p></header><div class="content"><p>I definitely agree that this function should not replace the current filter function. We can give it a new name like &quot;partition&quot; or something.<br></p><p>Regarding the memory constraint: since both filter and partition methods will be provided, the developer may choose whether they prefer performance over memory fragmentation or not.<br></p><p>Or maybe at the end of the partition method, if one of the result arrays is significantly smaller than the other, we copy the data into a smaller array and then return.<br></p><p>&gt; On Jan 15, 2016, at 2:22 PM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m not sure if it’s currently done this way… In theory, filter can allocate enough contiguous memory to store all the results up front, skip all the overhead of expanding an array, and if it doesn’t all get used, well not caring (as much) about memory fragmentation is (one reason) why we have a 64-bit address space. This would be harder to do (or necessarily double the storage requirements) if filter could return two arrays, either of which could potentially contain as many elements as the original array.<br>&gt; <br>&gt; Which is not to say I’m against having this because it does sound handy, I just don’t want it instead of the current filter function.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 09:59, Arman Shan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes. I was thinking we would just copy over the filter implementation, and it should only need a small modification to keep track of the items being filtered, and finally return 2 arrays.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 15, 2016, at 12:11 PM, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If we&#39;re going to add a partition method, can the original filter be rewritten in terms of it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2016/01/15 12:07、Nate Birkholz via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That seems like a solid idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jan 15, 2016 at 8:02 AM, Arman Shanjani via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was wondering if we could add a new filter method to the stdlib, where instead of returning just one array, it returns a tuple of 2 arrays, one with items that the closure returned true for and one with items that the closure returned false for. What do you think?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Arman<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Nate Birkholz<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/c994ad92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 15, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 15, 2016, at 11:49, Arman Shan &lt;armanshan12 at gmail.com&gt; wrote:<br>&gt; <br>&gt; I definitely agree that this function should not replace the current filter function. We can give it a new name like &quot;partition&quot; or something.<br>+1 on “partition”. That makes the semantics much clearer, IMHO.<br></p><p>&gt; Regarding the memory constraint: since both filter and partition methods will be provided, the developer may choose whether they prefer performance over memory fragmentation or not.<br>&gt; <br>&gt; Or maybe at the end of the partition method, if one of the result arrays is significantly smaller than the other, we copy the data into a smaller array and then return.<br></p><p>Oh, yeah… I was thinking the excess storage would be deallocated at the end anyway. Honestly, this whole bit about super-optimizing the memory allocation assumes that the actual element storage is managed like C arrays (with a pointer to [0], and using pointer math to get the other elements) behind the scenes, and I don’t actually know that it’s done that way.<br></p><p>- Dave Sweeris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b816b2b1af6ff24b077be5cffa7fea26?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Arman Shan</string> &lt;armanshan12 at gmail.com&gt;<p>January 15, 2016 at 07:00:00pm</p></header><div class="content"><p>We could do it the easy way and just allocate 2 arrays of original size and return them.<br></p><p>We can also do the optimized way which isn&#39;t so user-friendly: make a new structure that contains an array and an index internally. The array will be the original array just &quot;sorted&quot; based on the predicate function. And the index is for where the second half starts. The public API would show 2 arrays somehow and gives the illusion that there are 2 arrays.<br></p><p><br>- Arman<br></p><p>On Jan 15, 2016, at 5:37 PM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 15, 2016, at 11:49, Arman Shan &lt;armanshan12 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I definitely agree that this function should not replace the current filter function. We can give it a new name like &quot;partition&quot; or something.<br>&gt; +1 on “partition”. That makes the semantics much clearer, IMHO.<br>&gt; <br>&gt;&gt; Regarding the memory constraint: since both filter and partition methods will be provided, the developer may choose whether they prefer performance over memory fragmentation or not.<br>&gt;&gt; <br>&gt;&gt; Or maybe at the end of the partition method, if one of the result arrays is significantly smaller than the other, we copy the data into a smaller array and then return.<br>&gt; <br>&gt; Oh, yeah… I was thinking the excess storage would be deallocated at the end anyway. Honestly, this whole bit about super-optimizing the memory allocation assumes that the actual element storage is managed like C arrays (with a pointer to [0], and using pointer math to get the other elements) behind the scenes, and I don’t actually know that it’s done that way.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/0cd42343/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 15, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; We can also do the optimized way which isn&#39;t so user-friendly: make a new structure that contains an array and an index internally. The array will be the original array just &quot;sorted&quot; based on the predicate function. And the index is for where the second half starts. The public API would show 2 arrays somehow and gives the illusion that there are 2 arrays.<br></p><p>The problem is, you would still need some kind of array to tell you which elements fell into each partition. So I don&#39;t think that helps us very much.<br></p><p><br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Yeah… If the “optimized” route isn’t available, I don’t think trying to fake it is worth adding complexity to *Arrays*. If this were some heavy-weight object where it already has tons of overhead, then maybe, but not something as relatively basic and low-level as an Array.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 15, 2016, at 19:03, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; We can also do the optimized way which isn&#39;t so user-friendly: make a new structure that contains an array and an index internally. The array will be the original array just &quot;sorted&quot; based on the predicate function. And the index is for where the second half starts. The public API would show 2 arrays somehow and gives the illusion that there are 2 arrays.<br>&gt; <br>&gt; The problem is, you would still need some kind of array to tell you which elements fell into each partition. So I don&#39;t think that helps us very much.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 16, 2016 at 01:00:00pm</p></header><div class="content"><p>I would prefer a more general approach:<br>Return value could be a dictionary whose values are arrays, and the supplied function could by anything that maps target contents to possible keys (Bool would be possible, but also attributes like &quot;lastName&quot;, &quot;age&quot;…).<br>But it isn&#39;t that hard to write this on your own, so I&#39;m not sure if it&#39;s fundamental enough for stdlib...<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b816b2b1af6ff24b077be5cffa7fea26?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Arman Shan</string> &lt;armanshan12 at gmail.com&gt;<p>January 16, 2016 at 11:00:00pm</p></header><div class="content"><p>The dictionary return will be a more complicated version of the partition method. The reason I thought the partition method would be a trivial addition to the stdlib is because filter pretty much does all that work; it just doesn’t return the “other” items. so this function would be sort of a “filter2”.<br></p><p><br></p><p>&gt; On Jan 16, 2016, at 7:46 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt; <br>&gt; I would prefer a more general approach:<br>&gt; Return value could be a dictionary whose values are arrays, and the supplied function could by anything that maps target contents to possible keys (Bool would be possible, but also attributes like &quot;lastName&quot;, &quot;age&quot;…).<br>&gt; But it isn&#39;t that hard to write this on your own, so I&#39;m not sure if it&#39;s fundamental enough for stdlib...<br>&gt; <br>&gt; Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Adding a new filter method which returns 2 arrays</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>January 18, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 17 Jan 2016, at 05:55, Arman Shan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The dictionary return will be a more complicated version of the partition method. The reason I thought the partition method would be a trivial addition to the stdlib is because filter pretty much does all that work; it just doesn’t return the “other” items. so this function would be sort of a “filter2”.<br></p><p>I think the point of the dictionary return is that it gives you a generalised version of partition (why would you only ever want to partition a set into only two subsets?). The naive implementation is not *very* complicated. I just wrote it in about five minutes. It lets you do some interesting things, but whether it is worth having in the standard library is for others to decide.<br></p><p><br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jan 16, 2016, at 7:46 AM, Tino Heth &lt;2th at gmx.de&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would prefer a more general approach:<br>&gt;&gt; Return value could be a dictionary whose values are arrays, and the supplied function could by anything that maps target contents to possible keys (Bool would be possible, but also attributes like &quot;lastName&quot;, &quot;age&quot;…).<br>&gt;&gt; But it isn&#39;t that hard to write this on your own, so I&#39;m not sure if it&#39;s fundamental enough for stdlib...<br>&gt;&gt; <br>&gt;&gt; Tino<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
