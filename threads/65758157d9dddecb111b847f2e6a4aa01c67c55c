<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon May 02 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 2, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sun May 01 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; It&#39;s a bad habit of mine, I guess, to err on the side of suggesting conservative<br>&gt;&gt;&gt; changes on the assumption that it&#39;ll be maximally acceptable. If there&#39;s<br>&gt;&gt;&gt; appetite for a more serious renaming, and as you say these are considered<br>&gt;&gt;&gt; relatively rarely used, then it&#39;s a world of possibility!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We could do as Shawn suggested and follow precedent in some other languages by<br>&gt;&gt;&gt; moving these functions out of the global scope. Perhaps these will meet with<br>&gt;&gt;&gt; some satisfaction:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; Memory.footprint(of:)<br>&gt;&gt;&gt; Memory.alignment(of:)<br>&gt;&gt;&gt; Memory.spacing(of:)<br>&gt;&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; I&#39;d rather have <br>&gt;&gt; <br>&gt;&gt; MemoryLayout&lt;T&gt;.size<br>&gt;&gt; MemoryLayout&lt;T&gt;.alignment<br>&gt;&gt; MemoryLayout&lt;T&gt;.spacing<br>&gt;<br>&gt; This would be a legit use for &#39;extension Any&#39;. IMO it&#39;d be even better<br>&gt; as just T.size, T.alignment, T.spacing.<br></p><p>I very much disagree.  I don&#39;t want to see Array(1..&lt;100).size == 24.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>I agree that the names could be more specific but I do agree that putting these methods on `Any` is a good idea.<br>(I am not saying that `Any` should be open to user extensions though.) <br></p><p><br>&gt; On May 2, 2016, at 1:10 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon May 02 2016, Joe Groff &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 2, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Sun May 01 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s a bad habit of mine, I guess, to err on the side of suggesting conservative<br>&gt;&gt;&gt;&gt; changes on the assumption that it&#39;ll be maximally acceptable. If there&#39;s<br>&gt;&gt;&gt;&gt; appetite for a more serious renaming, and as you say these are considered<br>&gt;&gt;&gt;&gt; relatively rarely used, then it&#39;s a world of possibility!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We could do as Shawn suggested and follow precedent in some other languages by<br>&gt;&gt;&gt;&gt; moving these functions out of the global scope. Perhaps these will meet with<br>&gt;&gt;&gt;&gt; some satisfaction:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; Memory.footprint(of:)<br>&gt;&gt;&gt;&gt; Memory.alignment(of:)<br>&gt;&gt;&gt;&gt; Memory.spacing(of:)<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d rather have <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.size<br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.alignment<br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.spacing<br>&gt;&gt; <br>&gt;&gt; This would be a legit use for &#39;extension Any&#39;. IMO it&#39;d be even better<br>&gt;&gt; as just T.size, T.alignment, T.spacing.<br>&gt; <br>&gt; I very much disagree.  I don&#39;t want to see Array(1..&lt;100).size == 24.<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/7d3114a1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 2, 2016, at 1:10 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon May 02 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 2, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Sun May 01 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s a bad habit of mine, I guess, to err on the side of suggesting conservative<br>&gt;&gt;&gt;&gt; changes on the assumption that it&#39;ll be maximally acceptable. If there&#39;s<br>&gt;&gt;&gt;&gt; appetite for a more serious renaming, and as you say these are considered<br>&gt;&gt;&gt;&gt; relatively rarely used, then it&#39;s a world of possibility!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We could do as Shawn suggested and follow precedent in some other languages by<br>&gt;&gt;&gt;&gt; moving these functions out of the global scope. Perhaps these will meet with<br>&gt;&gt;&gt;&gt; some satisfaction:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; Memory.footprint(of:)<br>&gt;&gt;&gt;&gt; Memory.alignment(of:)<br>&gt;&gt;&gt;&gt; Memory.spacing(of:)<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d rather have <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.size<br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.alignment<br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.spacing<br>&gt;&gt; <br>&gt;&gt; This would be a legit use for &#39;extension Any&#39;. IMO it&#39;d be even better<br>&gt;&gt; as just T.size, T.alignment, T.spacing.<br>&gt; <br>&gt; I very much disagree.  I don&#39;t want to see Array(1..&lt;100).size == 24.<br></p><p>They would presumably be static members, so that wouldn&#39;t be valid. Array&lt;Int&gt;.size would be, though.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  2, 2016 at 01:00:00pm</p></header><div class="content"><p>on Mon May 02 2016, Joe Groff &lt;jgroff-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On May 2, 2016, at 1:10 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon May 02 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On May 2, 2016, at 9:46 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Sun May 01 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It&#39;s a bad habit of mine, I guess, to err on the side of suggesting conservative<br>&gt;&gt;&gt;&gt;&gt; changes on the assumption that it&#39;ll be maximally acceptable. If there&#39;s<br>&gt;&gt;&gt;&gt;&gt; appetite for a more serious renaming, and as you say these are considered<br>&gt;&gt;&gt;&gt;&gt; relatively rarely used, then it&#39;s a world of possibility!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We could do as Shawn suggested and follow precedent in some other languages by<br>&gt;&gt;&gt;&gt;&gt; moving these functions out of the global scope. Perhaps these will meet with<br>&gt;&gt;&gt;&gt;&gt; some satisfaction:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; Memory.footprint(of:)<br>&gt;&gt;&gt;&gt;&gt; Memory.alignment(of:)<br>&gt;&gt;&gt;&gt;&gt; Memory.spacing(of:)<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d rather have <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; MemoryLayout&lt;T&gt;.size<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;T&gt;.alignment<br>&gt;&gt;&gt;&gt; MemoryLayout&lt;T&gt;.spacing<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would be a legit use for &#39;extension Any&#39;. IMO it&#39;d be even better<br>&gt;&gt;&gt; as just T.size, T.alignment, T.spacing.<br>&gt;&gt; <br>&gt;&gt; I very much disagree.  I don&#39;t want to see Array(1..&lt;100).size == 24.<br>&gt;<br>&gt; They would presumably be static members, so that wouldn&#39;t be valid. Array&lt;Int&gt;.size would be, though.<br></p><p>OK, but personally don&#39;t want it on Array either, especially not after<br>we get statically-sized arrays.<br></p><p>-- <br>Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  2, 2016 at 02:00:00pm</p></header><div class="content"><p>On May 2, 2016, at 1:10 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d rather have <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.size<br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.alignment<br>&gt;&gt;&gt; MemoryLayout&lt;T&gt;.spacing<br>&gt;&gt; <br>&gt;&gt; This would be a legit use for &#39;extension Any&#39;. IMO it&#39;d be even better<br>&gt;&gt; as just T.size, T.alignment, T.spacing.<br>&gt; <br>&gt; I very much disagree.  I don&#39;t want to see Array(1..&lt;100).size == 24.<br></p><p>I agree with Dave here.  Even if these got more verbose names (to avoid confusion with count), it is still unfortunate to pollute code completion for these uncommonly used &quot;operators”.  I’m coming around to agree with Dave’s view that dynamicType should be made into a global function for the same reason. <br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  2, 2016 at 06:00:00pm</p></header><div class="content"><p>On Mon, May 2, 2016 at 4:32 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On May 2, 2016, at 1:10 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I&#39;d rather have<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; MemoryLayout&lt;T&gt;.size<br>&gt; &gt;&gt;&gt; MemoryLayout&lt;T&gt;.alignment<br>&gt; &gt;&gt;&gt; MemoryLayout&lt;T&gt;.spacing<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This would be a legit use for &#39;extension Any&#39;. IMO it&#39;d be even better<br>&gt; &gt;&gt; as just T.size, T.alignment, T.spacing.<br>&gt; &gt;<br>&gt; &gt; I very much disagree.  I don&#39;t want to see Array(1..&lt;100).size == 24.<br>&gt;<br>&gt; I agree with Dave here.  Even if these got more verbose names (to avoid<br>&gt; confusion with count), it is still unfortunate to pollute code completion<br>&gt; for these uncommonly used &quot;operators”.  I’m coming around to agree with<br>&gt; Dave’s view that dynamicType should be made into a global function for the<br>&gt; same reason.<br>&gt;<br></p><p>This feedback has been very edifying. I&#39;ve been playing around a little bit<br>in the IBM Swift Sandbox (it&#39;s what I&#39;ve got handy). I think Dave&#39;s<br>solution is supremely elegant, but I&#39;m not entirely comfortable proposing<br>elimination of `sizeofValue(_:)` and friends; I&#39;ve just got no real-world<br>information about how useful they are or not, and the onus is on the person<br>proposing the change to show why the change is necessary and appropriate. I<br>wouldn&#39;t know where to begin.<br></p><p>Dave&#39;s suggestion can be bolted onto Swift 2 as follows:<br></p><p>```<br>struct MemoryLayout&lt;T&gt; {<br>    static var alignment: Int {<br>        return alignof(T)<br>    }<br>    static var size: Int {<br>        return sizeof(T)<br>    }<br>    static var spacing: Int {<br>        return strideof(T)<br>    }<br>    private init() { }<br>}<br>```<br></p><p>I think, though, that it becomes more confusing to include<br>`sizeofValue(_:)` in this syntax, because it&#39;d be possible to write<br>`MemoryLayout&lt;Base&gt;.size(ofValue: Subclass())`, which is a can of worms.<br>However, we can do this:<br></p><p>```<br>struct MemoryLayout {<br>    static func alignment&lt;T&gt;(type: T.Type) -&gt; Int {<br>        return alignof(type)<br>    }<br>    static func size&lt;T&gt;(type: T.Type) -&gt; Int {<br>        return sizeof(type)<br>    }<br>    static func spacing&lt;T&gt;(type: T.Type) -&gt; Int {<br>        return strideof(type)<br>    }<br>    static func alignment&lt;T&gt;(value: T) -&gt; Int {<br>        return alignofValue(value)<br>    }<br>    static func size&lt;T&gt;(value: T) -&gt; Int {<br>        return sizeofValue(value)<br>    }<br>    static func spacing&lt;T&gt;(value: T) -&gt; Int {<br>        return strideofValue(value)<br>    }<br>    private init() { }<br>}<br>```<br></p><p>It&#39;s not up to Dave&#39;s standards of elegance, but it seems acceptable IMO.<br>The preposition, incidentally, has to go because parsing rules (at least in<br>Swift 2) mean `size(Int)` is fine but `size(of: Int)` blows up (it has to<br>be `size(of: Int.self)`). Is there an issue with using overloaded methods<br>instead of unique labels in replacing `sizeof(_:)` and `sizeofValue(_:)`?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160502/13d55fb3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
