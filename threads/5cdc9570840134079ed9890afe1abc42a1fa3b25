<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  4, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello! I work with a large project (~900 .swift files and more .m files).<br>We have a nightly job that compiles the app and calls out function bodies<br>(using -debug-time-function-bodies) that are slower than 100ms to compile.<br>Since upgrading to Swift 3, the number of trouble function bodies has one<br>from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only issue though<br>is that build time overall increased by ~1 min (amount of time to build all<br>targets before automatically merging to master in our integration build).<br></p><p>To dig into this further, we&#39;ve started a new nightly job that builds the<br>app using the -debug-time-compilation flag, and using that we&#39;ve found that<br>some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted<br>output to help us get this down via the -debug-time-function-bodies flag<br>(i.e. no function bodies that we can refactor to get compile times much<br>faster). We can see that most of the time is spent in &quot;Type checking /<br>Semantic analysis&quot; for these problem files, but we don&#39;t currently have any<br>way of knowing what that means. It feels like we&#39;ve exhausted the available<br>options at this point (unless there are other flags I&#39;m missing) in terms<br>of existing actionable debugging/profiling/reporting, so now our question<br>is this: what kind of reports would Swift maintainers be interested in<br>seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>these slow compile issues? We&#39;re willing to devote time to tooling to help<br>generate such reports and file bugs.<br></p><p>Thanks!<br></p><p>Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161004/5cdc3b25/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>October  5, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Ben,<br></p><p>I&#39;d really like to see improvements here as well. I don&#39;t know what reports<br>would be useful to the Swift team, but allow me to point out<br>https://github.com/apple/swift/commit/18c75928639acf0ccf0e1fb6729eea75bc09cbd5,<br>which adds a -warn-long-function-bodies option that you may be able to use.<br></p><p>However, as stated in the commit message I linked to above, both<br>-debug-time-function-bodies and -warn-long-function-bodies are frontend<br>options. They are not officially supported, and may be removed at any time<br>without warning.<br></p><p>Personally, I think the Swift compiler should provide users with more<br>information about compilation times. In<br>https://bugs.swift.org/browse/SR-2741, Brian Michel (cc&#39;ed) describes a<br>feature he&#39;d like to see: structured output from the Swift compiler driver,<br>as an official, supported option. Your team&#39;s use case sounds very similar<br>to his, so I&#39;d encourage you to chime in on that issue with your thoughts.<br></p><p>- Brian Gesiak<br></p><p><br>On Tue, Oct 4, 2016 at 5:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org<br>&gt; wrote:<br></p><p>&gt; Hello! I work with a large project (~900 .swift files and more .m files).<br>&gt; We have a nightly job that compiles the app and calls out function bodies<br>&gt; (using -debug-time-function-bodies) that are slower than 100ms to<br>&gt; compile. Since upgrading to Swift 3, the number of trouble function bodies<br>&gt; has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only<br>&gt; issue though is that build time overall increased by ~1 min (amount of time<br>&gt; to build all targets before automatically merging to master in our<br>&gt; integration build).<br>&gt;<br>&gt; To dig into this further, we&#39;ve started a new nightly job that builds the<br>&gt; app using the -debug-time-compilation flag, and using that we&#39;ve found that<br>&gt; some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted<br>&gt; output to help us get this down via the -debug-time-function-bodies flag<br>&gt; (i.e. no function bodies that we can refactor to get compile times much<br>&gt; faster). We can see that most of the time is spent in &quot;Type checking /<br>&gt; Semantic analysis&quot; for these problem files, but we don&#39;t currently have any<br>&gt; way of knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt; generate such reports and file bugs.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Ben<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/09a35760/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>I didn&#39;t know about that warning, so thanks for sharing that! Having this<br>enabled will help somewhat, at least in terms of keeping specific<br>slow-to-compile functions out of our master branch.<br></p><p>That said, I understand Jordan&#39;s response (in SR-2741) of being &quot;leery of<br>&#39;productizing&#39;&quot; these flags. Developing with Swift shouldn&#39;t involve<br>fighting the compiler to get the best compile time, so making this more<br>than a debug flag does seem odd/worrisome.<br></p><p>I&#39;m more interested in the best way to get a feedback loop to understand<br>what the known issues are and see them addressed. This has already worked<br>well with fixes for big slowdown issues like SR-1277 and this well known<br>patch:<br>https://github.com/apple/swift/commit/2cdd7d64e1e2add7bcfd5452d36e7f5fc6c86a03<br>.<br></p><p>On Wed, Oct 5, 2016 at 11:47 AM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br></p><p>&gt; Hi Ben,<br>&gt;<br>&gt; I&#39;d really like to see improvements here as well. I don&#39;t know what<br>&gt; reports would be useful to the Swift team, but allow me to point out<br>&gt; https://github.com/apple/swift/commit/18c75928639acf0ccf0e1fb6729eea<br>&gt; 75bc09cbd5, which adds a -warn-long-function-bodies option that you may<br>&gt; be able to use.<br>&gt;<br>&gt; However, as stated in the commit message I linked to above, both<br>&gt; -debug-time-function-bodies and -warn-long-function-bodies are frontend<br>&gt; options. They are not officially supported, and may be removed at any time<br>&gt; without warning.<br>&gt;<br>&gt; Personally, I think the Swift compiler should provide users with more<br>&gt; information about compilation times. In https://bugs.swift.org/<br>&gt; browse/SR-2741, Brian Michel (cc&#39;ed) describes a feature he&#39;d like to<br>&gt; see: structured output from the Swift compiler driver, as an official,<br>&gt; supported option. Your team&#39;s use case sounds very similar to his, so I&#39;d<br>&gt; encourage you to chime in on that issue with your thoughts.<br>&gt;<br>&gt; - Brian Gesiak<br>&gt;<br>&gt;<br>&gt; On Tue, Oct 4, 2016 at 5:38 PM, Ben Asher via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m files).<br>&gt;&gt; We have a nightly job that compiles the app and calls out function bodies<br>&gt;&gt; (using -debug-time-function-bodies) that are slower than 100ms to<br>&gt;&gt; compile. Since upgrading to Swift 3, the number of trouble function bodies<br>&gt;&gt; has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only<br>&gt;&gt; issue though is that build time overall increased by ~1 min (amount of time<br>&gt;&gt; to build all targets before automatically merging to master in our<br>&gt;&gt; integration build).<br>&gt;&gt;<br>&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds the<br>&gt;&gt; app using the -debug-time-compilation flag, and using that we&#39;ve found that<br>&gt;&gt; some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted<br>&gt;&gt; output to help us get this down via the -debug-time-function-bodies flag<br>&gt;&gt; (i.e. no function bodies that we can refactor to get compile times much<br>&gt;&gt; faster). We can see that most of the time is spent in &quot;Type checking /<br>&gt;&gt; Semantic analysis&quot; for these problem files, but we don&#39;t currently have any<br>&gt;&gt; way of knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt;&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt;&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt;&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt;&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt;&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt;&gt; generate such reports and file bugs.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Ben<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p><br>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/0b614a97/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello! I work with a large project (~900 .swift files and more .m files). We have a nightly job that compiles the app and calls out function bodies (using -debug-time-function-bodies) that are slower than 100ms to compile. Since upgrading to Swift 3, the number of trouble function bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only issue though is that build time overall increased by ~1 min (amount of time to build all targets before automatically merging to master in our integration build).<br></p><p>Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or with one of the toolchain builds from swift.org &lt;http://swift.org/&gt;?<br></p><p>Xcode 8.1 beta 2 includes some type checker performance improvements which might have an impact here.<br></p><p>&gt; <br>&gt; To dig into this further, we&#39;ve started a new nightly job that builds the app using the -debug-time-compilation flag, and using that we&#39;ve found that some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted output to help us get this down via the -debug-time-function-bodies flag (i.e. no function bodies that we can refactor to get compile times much faster).<br></p><p>One thing to look out for here is that I believe there are some cases where -debug-time-function-bodies isn’t reporting type checking time. From my (potentially faulty) recollection, things like let bindings with literals or closures on the right hand side do not show up in the -debug-time-function-bodies output, and depending on the specifics of the expression these can sometimes take a long time to type check. When these appear within the body of another type declaration they can end up getting type checked multiple times during a full project build, and that time can add up.<br></p><p>I don’t believe there is a bug open for improving -debug-time-function-bodies to help diagnose this, but opening a bug would be appreciated if you can confirm that this is the case, and of course patches to fix it are definitely welcome as well.<br></p><p>Mark<br></p><p>&gt; We can see that most of the time is spent in &quot;Type checking / Semantic analysis&quot; for these problem files, but we don&#39;t currently have any way of knowing what that means. It feels like we&#39;ve exhausted the available options at this point (unless there are other flags I&#39;m missing) in terms of existing actionable debugging/profiling/reporting, so now our question is this: what kind of reports would Swift maintainers be interested in seeing in terms of output from profiling tools, etc. to help debug/diagnose these slow compile issues? We&#39;re willing to devote time to tooling to help generate such reports and file bugs.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Ben<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/401a9012/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>Apologies for not starting off with system info: macOS Sierra (10.12.0),<br>Xcode 8.0 (from the App Store).<br></p><p>I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also open<br>a ticket for improving -debug-time-function-bodies if I can confirm<br>anything.<br></p><p>Thanks!<br></p><p>Ben<br></p><p>On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Hello! I work with a large project (~900 .swift files and more .m files).<br>&gt; We have a nightly job that compiles the app and calls out function bodies<br>&gt; (using -debug-time-function-bodies) that are slower than 100ms to<br>&gt; compile. Since upgrading to Swift 3, the number of trouble function bodies<br>&gt; has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only<br>&gt; issue though is that build time overall increased by ~1 min (amount of time<br>&gt; to build all targets before automatically merging to master in our<br>&gt; integration build).<br>&gt;<br>&gt;<br>&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or with<br>&gt; one of the toolchain builds from swift.org?<br>&gt;<br>&gt; Xcode 8.1 beta 2 includes some type checker performance improvements which<br>&gt; might have an impact here.<br>&gt;<br>&gt;<br>&gt; To dig into this further, we&#39;ve started a new nightly job that builds the<br>&gt; app using the -debug-time-compilation flag, and using that we&#39;ve found that<br>&gt; some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted<br>&gt; output to help us get this down via the -debug-time-function-bodies flag<br>&gt; (i.e. no function bodies that we can refactor to get compile times much<br>&gt; faster).<br>&gt;<br>&gt;<br>&gt; One thing to look out for here is that I believe there are some cases<br>&gt; where -debug-time-function-bodies isn’t reporting type checking time. From<br>&gt; my (potentially faulty) recollection, things like let bindings with<br>&gt; literals or closures on the right hand side do not show up in the<br>&gt; -debug-time-function-bodies output, and depending on the specifics of the<br>&gt; expression these can sometimes take a long time to type check. When these<br>&gt; appear within the body of another type declaration they can end up getting<br>&gt; type checked multiple times during a full project build, and that time can<br>&gt; add up.<br>&gt;<br>&gt; I don’t believe there is a bug open for improving<br>&gt; -debug-time-function-bodies to help diagnose this, but opening a bug would<br>&gt; be appreciated if you can confirm that this is the case, and of course<br>&gt; patches to fix it are definitely welcome as well.<br>&gt;<br>&gt; Mark<br>&gt;<br>&gt; We can see that most of the time is spent in &quot;Type checking / Semantic<br>&gt; analysis&quot; for these problem files, but we don&#39;t currently have any way of<br>&gt; knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt; generate such reports and file bugs.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Ben<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/c1026594/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  5, 2016 at 03:00:00pm</p></header><div class="content"><p>I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems<br>maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s.<br>It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement<br>was expected.<br></p><p>Is there any profiling/tracing you all would recommend to help find problem<br>areas? I don&#39;t mind building from Swift master, using someone&#39;s preferred<br>profiling tools, etc. I&#39;m not really sure where to start.<br></p><p>Ben<br></p><p>On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br></p><p>&gt; Apologies for not starting off with system info: macOS Sierra (10.12.0),<br>&gt; Xcode 8.0 (from the App Store).<br>&gt;<br>&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also open<br>&gt; a ticket for improving -debug-time-function-bodies if I can confirm<br>&gt; anything.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Ben<br>&gt;<br>&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m files).<br>&gt;&gt; We have a nightly job that compiles the app and calls out function bodies<br>&gt;&gt; (using -debug-time-function-bodies) that are slower than 100ms to<br>&gt;&gt; compile. Since upgrading to Swift 3, the number of trouble function bodies<br>&gt;&gt; has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only<br>&gt;&gt; issue though is that build time overall increased by ~1 min (amount of time<br>&gt;&gt; to build all targets before automatically merging to master in our<br>&gt;&gt; integration build).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or<br>&gt;&gt; with one of the toolchain builds from swift.org?<br>&gt;&gt;<br>&gt;&gt; Xcode 8.1 beta 2 includes some type checker performance improvements<br>&gt;&gt; which might have an impact here.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds the<br>&gt;&gt; app using the -debug-time-compilation flag, and using that we&#39;ve found that<br>&gt;&gt; some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted<br>&gt;&gt; output to help us get this down via the -debug-time-function-bodies flag<br>&gt;&gt; (i.e. no function bodies that we can refactor to get compile times much<br>&gt;&gt; faster).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; One thing to look out for here is that I believe there are some cases<br>&gt;&gt; where -debug-time-function-bodies isn’t reporting type checking time. From<br>&gt;&gt; my (potentially faulty) recollection, things like let bindings with<br>&gt;&gt; literals or closures on the right hand side do not show up in the<br>&gt;&gt; -debug-time-function-bodies output, and depending on the specifics of the<br>&gt;&gt; expression these can sometimes take a long time to type check. When these<br>&gt;&gt; appear within the body of another type declaration they can end up getting<br>&gt;&gt; type checked multiple times during a full project build, and that time can<br>&gt;&gt; add up.<br>&gt;&gt;<br>&gt;&gt; I don’t believe there is a bug open for improving<br>&gt;&gt; -debug-time-function-bodies to help diagnose this, but opening a bug would<br>&gt;&gt; be appreciated if you can confirm that this is the case, and of course<br>&gt;&gt; patches to fix it are definitely welcome as well.<br>&gt;&gt;<br>&gt;&gt; Mark<br>&gt;&gt;<br>&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic<br>&gt;&gt; analysis&quot; for these problem files, but we don&#39;t currently have any way of<br>&gt;&gt; knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt;&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt;&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt;&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt;&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt;&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt;&gt; generate such reports and file bugs.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Ben<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Ben<br>&gt;<br></p><p><br></p><p>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/8d486b42/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ef7f67e1731d665cea6e6802e8a08217?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Graydon Hoare</string> &lt;ghoare at apple.com&gt;<p>October  5, 2016 at 04:00:00pm</p></header><div class="content"><p>If you can collect an instruments profile of the frontend running one of the particularly-slow files, it might help localize the subsystem of the typechecker; aside from that, I&#39;m currently putting some new counters and timers in the frontend, so am likely to have slightly more-constructive news in the next little while, but don&#39;t have that work done just yet.<br></p><p>For collecting an instruments profile, try something like:<br></p><p>  $ SWIFTBIN=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift<br>  $ instruments -t &#39;Time Profiler&#39; $SWIFTBIN -frontend -parse somefile.swift<br>  $ open instrumentscli0.trace<br></p><p>Then expand all (option-click the triangle next to &#39;swift&#39; in the call-tree), select-all, copy and paste the complete call-tree into a text file and attach it here, that might give a bit of insight. On my local copy of instruments one also has to toggle the &quot;separate by state&quot; box of the details pane to get the full call-tree to expand, not sure why; might just be a transient bug.<br></p><p>-Graydon<br></p><p>&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s. It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement was expected.<br>&gt; <br>&gt; Is there any profiling/tracing you all would recommend to help find problem areas? I don&#39;t mind building from Swift master, using someone&#39;s preferred profiling tools, etc. I&#39;m not really sure where to start.<br>&gt; <br>&gt; Ben<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com &lt;mailto:benasher44 at gmail.com&gt;&gt; wrote:<br>&gt; Apologies for not starting off with system info: macOS Sierra (10.12.0), Xcode 8.0 (from the App Store).<br>&gt; <br>&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also open a ticket for improving -debug-time-function-bodies if I can confirm anything.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Ben<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com &lt;mailto:mark.lacey at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m files). We have a nightly job that compiles the app and calls out function bodies (using -debug-time-function-bodies) that are slower than 100ms to compile. Since upgrading to Swift 3, the number of trouble function bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only issue though is that build time overall increased by ~1 min (amount of time to build all targets before automatically merging to master in our integration build).<br>&gt; <br>&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or with one of the toolchain builds from swift.org &lt;http://swift.org/&gt;?<br>&gt; <br>&gt; Xcode 8.1 beta 2 includes some type checker performance improvements which might have an impact here.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds the app using the -debug-time-compilation flag, and using that we&#39;ve found that some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted output to help us get this down via the -debug-time-function-bodies flag (i.e. no function bodies that we can refactor to get compile times much faster).<br>&gt; <br>&gt; One thing to look out for here is that I believe there are some cases where -debug-time-function-bodies isn’t reporting type checking time. From my (potentially faulty) recollection, things like let bindings with literals or closures on the right hand side do not show up in the -debug-time-function-bodies output, and depending on the specifics of the expression these can sometimes take a long time to type check. When these appear within the body of another type declaration they can end up getting type checked multiple times during a full project build, and that time can add up.<br>&gt; <br>&gt; I don’t believe there is a bug open for improving -debug-time-function-bodies to help diagnose this, but opening a bug would be appreciated if you can confirm that this is the case, and of course patches to fix it are definitely welcome as well.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic analysis&quot; for these problem files, but we don&#39;t currently have any way of knowing what that means. It feels like we&#39;ve exhausted the available options at this point (unless there are other flags I&#39;m missing) in terms of existing actionable debugging/profiling/reporting, so now our question is this: what kind of reports would Swift maintainers be interested in seeing in terms of output from profiling tools, etc. to help debug/diagnose these slow compile issues? We&#39;re willing to devote time to tooling to help generate such reports and file bugs.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; Ben<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Ben<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Ben<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/8bd412b3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  5, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt; <br>&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s. It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement was expected.<br></p><p>The kind of benefit you might expect really depends on the specific code you’ve written. The changes I have in mind attempt to speed up the expression type checker (the thing that does the work of inferring types for a given expression, and the case where there is an explicit type the expression needs to type-check to, ensuring that it does). These expressions include things like array literals and dictionary literals, where we sometimes take a long time to type check.<br></p><p>&gt; Is there any profiling/tracing you all would recommend to help find problem areas?<br></p><p>If you’re looking for problem areas in your particular build, I have a couple suggestions:<br></p><p>1. Take a look at the output of -debug-time-function-bodies to see if the same function is getting type checked multiple times, and determine what the cumulative time for those functions is.<br></p><p>For example below is the output I see for a simple test case. Note that the getter/setter that are generated from a property on line 2 of two.swift are type checked twice. Although in this case we type check the individual functions very quickly, if you have enough of this kind of redundant type checking happening, it can add up. This *particular* case is a known bug that we hope to address - the synthesized getters/setters for properties are type checked in each file they are referenced in.<br></p><p>There may be other cases like this that we’re not already aware of, so it’s always good to open a bug if you find something like this.<br></p><p>swiftc -c main.swift two.swift -module-name test -Xfrontend -debug-time-function-bodies<br>0.2ms	main.swift:2:7	get {}<br>0.2ms	main.swift:2:7	set {}<br>0.0ms	main.swift:1:7	@objc deinit<br>0.3ms	main.swift:1:13	override init()<br>0.2ms	two.swift:2:14	get {}<br>0.2ms	two.swift:2:14	set {}<br>0.2ms	two.swift:2:14	get {}<br>0.2ms	two.swift:2:14	set {}<br>0.0ms	two.swift:1:14	@objc deinit<br>0.0ms	two.swift:1:14	init()<br></p><p>2. Add a timer for expression type checking and see if that helps narrow down whether there is time being spent type checking expressions that isn’t accounted for in -debug-time-function-bodies. There are a few places that might make sense for this, but I suspect ConstraintSystem::solve() might be the best. This is ultimately called from a variety of places, and would provide the most insight into where time is being spent in the expression type checking. It’s possible something higher up the stack, like TypeChecker::solveForExpression or TypeChecker::typeCheckExpression() might make more sense as well. You can model this on how -debug-time-function-bodies is currently implemented, e.g. look at swift::performTypeChecking for some help on getting started. I’ll probably try to add this timer myself in the next few weeks if you don’t manage to beat me to it.<br></p><p>Mark<br></p><p><br>&gt; I don&#39;t mind building from Swift master, using someone&#39;s preferred profiling tools, etc. I&#39;m not really sure where to start.<br>&gt; <br>&gt; Ben<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com &lt;mailto:benasher44 at gmail.com&gt;&gt; wrote:<br>&gt; Apologies for not starting off with system info: macOS Sierra (10.12.0), Xcode 8.0 (from the App Store).<br>&gt; <br>&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also open a ticket for improving -debug-time-function-bodies if I can confirm anything.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Ben<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com &lt;mailto:mark.lacey at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m files). We have a nightly job that compiles the app and calls out function bodies (using -debug-time-function-bodies) that are slower than 100ms to compile. Since upgrading to Swift 3, the number of trouble function bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only issue though is that build time overall increased by ~1 min (amount of time to build all targets before automatically merging to master in our integration build).<br>&gt; <br>&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or with one of the toolchain builds from swift.org &lt;http://swift.org/&gt;?<br>&gt; <br>&gt; Xcode 8.1 beta 2 includes some type checker performance improvements which might have an impact here.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds the app using the -debug-time-compilation flag, and using that we&#39;ve found that some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted output to help us get this down via the -debug-time-function-bodies flag (i.e. no function bodies that we can refactor to get compile times much faster).<br>&gt; <br>&gt; One thing to look out for here is that I believe there are some cases where -debug-time-function-bodies isn’t reporting type checking time. From my (potentially faulty) recollection, things like let bindings with literals or closures on the right hand side do not show up in the -debug-time-function-bodies output, and depending on the specifics of the expression these can sometimes take a long time to type check. When these appear within the body of another type declaration they can end up getting type checked multiple times during a full project build, and that time can add up.<br>&gt; <br>&gt; I don’t believe there is a bug open for improving -debug-time-function-bodies to help diagnose this, but opening a bug would be appreciated if you can confirm that this is the case, and of course patches to fix it are definitely welcome as well.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic analysis&quot; for these problem files, but we don&#39;t currently have any way of knowing what that means. It feels like we&#39;ve exhausted the available options at this point (unless there are other flags I&#39;m missing) in terms of existing actionable debugging/profiling/reporting, so now our question is this: what kind of reports would Swift maintainers be interested in seeing in terms of output from profiling tools, etc. to help debug/diagnose these slow compile issues? We&#39;re willing to devote time to tooling to help generate such reports and file bugs.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; Ben<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Ben<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/7ca6a94c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  5, 2016 at 04:00:00pm</p></header><div class="content"><p>Ah this is all super helpful. I&#39;ll do some more profiling and try to get<br>back with some data in the next several days.<br></p><p>Thanks!<br></p><p>Ben<br></p><p>On Wed, Oct 5, 2016 at 4:28 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;<br>&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems<br>&gt; maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s.<br>&gt; It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement<br>&gt; was expected.<br>&gt;<br>&gt;<br>&gt; The kind of benefit you might expect really depends on the specific code<br>&gt; you’ve written. The changes I have in mind attempt to speed up the<br>&gt; expression type checker (the thing that does the work of inferring types<br>&gt; for a given expression, and the case where there is an explicit type the<br>&gt; expression needs to type-check to, ensuring that it does). These<br>&gt; expressions include things like array literals and dictionary literals,<br>&gt; where we sometimes take a long time to type check.<br>&gt;<br>&gt; Is there any profiling/tracing you all would recommend to help find<br>&gt; problem areas?<br>&gt;<br>&gt;<br>&gt; If you’re looking for problem areas in your particular build, I have a<br>&gt; couple suggestions:<br>&gt;<br>&gt; 1. Take a look at the output of -debug-time-function-bodies to see if the<br>&gt; same function is getting type checked multiple times, and determine what<br>&gt; the cumulative time for those functions is.<br>&gt;<br>&gt; For example below is the output I see for a simple test case. Note that<br>&gt; the getter/setter that are generated from a property on line 2 of two.swift<br>&gt; are type checked twice. Although in this case we type check the individual<br>&gt; functions very quickly, if you have enough of this kind of redundant type<br>&gt; checking happening, it can add up. This *particular* case is a known bug<br>&gt; that we hope to address - the synthesized getters/setters for properties<br>&gt; are type checked in each file they are referenced in.<br>&gt;<br>&gt; There may be other cases like this that we’re not already aware of, so<br>&gt; it’s always good to open a bug if you find something like this.<br>&gt;<br>&gt; swiftc -c main.swift two.swift -module-name test -Xfrontend<br>&gt; -debug-time-function-bodies<br>&gt; 0.2ms main.swift:2:7 get {}<br>&gt; 0.2ms main.swift:2:7 set {}<br>&gt; 0.0ms main.swift:1:7 @objc deinit<br>&gt; 0.3ms main.swift:1:13 override init()<br>&gt; 0.2ms two.swift:2:14 get {}<br>&gt; 0.2ms two.swift:2:14 set {}<br>&gt; 0.2ms two.swift:2:14 get {}<br>&gt; 0.2ms two.swift:2:14 set {}<br>&gt; 0.0ms two.swift:1:14 @objc deinit<br>&gt; 0.0ms two.swift:1:14 init()<br>&gt;<br>&gt; 2. Add a timer for expression type checking and see if that helps narrow<br>&gt; down whether there is time being spent type checking expressions that isn’t<br>&gt; accounted for in -debug-time-function-bodies. There are a few places that<br>&gt; might make sense for this, but I suspect ConstraintSystem::solve() might<br>&gt; be the best. This is ultimately called from a variety of places, and would<br>&gt; provide the most insight into where time is being spent in the expression<br>&gt; type checking. It’s possible something higher up the stack, like<br>&gt; TypeChecker::solveForExpression or TypeChecker::typeCheckExpression()<br>&gt; might make more sense as well. You can model this on how<br>&gt; -debug-time-function-bodies is currently implemented, e.g. look<br>&gt; at swift::performTypeChecking for some help on getting started. I’ll<br>&gt; probably try to add this timer myself in the next few weeks if you don’t<br>&gt; manage to beat me to it.<br>&gt;<br>&gt; Mark<br>&gt;<br>&gt;<br>&gt; I don&#39;t mind building from Swift master, using someone&#39;s preferred<br>&gt; profiling tools, etc. I&#39;m not really sure where to start.<br>&gt;<br>&gt; Ben<br>&gt;<br>&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Apologies for not starting off with system info: macOS Sierra (10.12.0),<br>&gt;&gt; Xcode 8.0 (from the App Store).<br>&gt;&gt;<br>&gt;&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also<br>&gt;&gt; open a ticket for improving -debug-time-function-bodies if I can confirm<br>&gt;&gt; anything.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Ben<br>&gt;&gt;<br>&gt;&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m<br>&gt;&gt;&gt; files). We have a nightly job that compiles the app and calls out function<br>&gt;&gt;&gt; bodies (using -debug-time-function-bodies) that are slower than 100ms<br>&gt;&gt;&gt; to compile. Since upgrading to Swift 3, the number of trouble function<br>&gt;&gt;&gt; bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The<br>&gt;&gt;&gt; only issue though is that build time overall increased by ~1 min (amount of<br>&gt;&gt;&gt; time to build all targets before automatically merging to master in our<br>&gt;&gt;&gt; integration build).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or<br>&gt;&gt;&gt; with one of the toolchain builds from swift.org?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Xcode 8.1 beta 2 includes some type checker performance improvements<br>&gt;&gt;&gt; which might have an impact here.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds<br>&gt;&gt;&gt; the app using the -debug-time-compilation flag, and using that we&#39;ve found<br>&gt;&gt;&gt; that some files take as long as 2-3 seconds to compile. But, there&#39;s no<br>&gt;&gt;&gt; targeted output to help us get this down via the<br>&gt;&gt;&gt; -debug-time-function-bodies flag (i.e. no function bodies that we can<br>&gt;&gt;&gt; refactor to get compile times much faster).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; One thing to look out for here is that I believe there are some cases<br>&gt;&gt;&gt; where -debug-time-function-bodies isn’t reporting type checking time. From<br>&gt;&gt;&gt; my (potentially faulty) recollection, things like let bindings with<br>&gt;&gt;&gt; literals or closures on the right hand side do not show up in the<br>&gt;&gt;&gt; -debug-time-function-bodies output, and depending on the specifics of the<br>&gt;&gt;&gt; expression these can sometimes take a long time to type check. When these<br>&gt;&gt;&gt; appear within the body of another type declaration they can end up getting<br>&gt;&gt;&gt; type checked multiple times during a full project build, and that time can<br>&gt;&gt;&gt; add up.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don’t believe there is a bug open for improving<br>&gt;&gt;&gt; -debug-time-function-bodies to help diagnose this, but opening a bug would<br>&gt;&gt;&gt; be appreciated if you can confirm that this is the case, and of course<br>&gt;&gt;&gt; patches to fix it are definitely welcome as well.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Mark<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic<br>&gt;&gt;&gt; analysis&quot; for these problem files, but we don&#39;t currently have any way of<br>&gt;&gt;&gt; knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt;&gt;&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt;&gt;&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt;&gt;&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt;&gt;&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt;&gt;&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt;&gt;&gt; generate such reports and file bugs.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ben<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Ben<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Ben<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161005/6904f0e4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello again! I wanted to follow up with some more numbers and feedback. I<br>wasn&#39;t able to easily compile a single file from our project from the CLI.<br>I started putting together a command with all of the necessary framework<br>includes, flags, etc., but I moved on because it was taking awhile,<br>becoming a mess, and figured the other suggestions might yield results<br>quicker.<br></p><p>Moving on, I took a second look at the -debug-time-function-bodies output<br>as Mark suggested, and I found that we have 2521 properties that are parsed<br>607 times each. If we got that down to the ideal case of parsing each one<br>of those properties once, that would save us ~1.5 million &quot;parses&quot;. So, is<br>there a ticket already for this issue? I didn&#39;t see one when I searched,<br>but it does sound like it&#39;s known.<br></p><p>I do plan on at least taking a look at adding the suggested timers, but<br>that will likely take me into next week or longer depending on what else I<br>have going on.<br></p><p>Thanks!<br></p><p>Ben<br></p><p>On Wed, Oct 5, 2016 at 4:31 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br></p><p>&gt; Ah this is all super helpful. I&#39;ll do some more profiling and try to get<br>&gt; back with some data in the next several days.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Ben<br>&gt;<br>&gt; On Wed, Oct 5, 2016 at 4:28 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems<br>&gt;&gt; maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s.<br>&gt;&gt; It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement<br>&gt;&gt; was expected.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The kind of benefit you might expect really depends on the specific code<br>&gt;&gt; you’ve written. The changes I have in mind attempt to speed up the<br>&gt;&gt; expression type checker (the thing that does the work of inferring types<br>&gt;&gt; for a given expression, and the case where there is an explicit type the<br>&gt;&gt; expression needs to type-check to, ensuring that it does). These<br>&gt;&gt; expressions include things like array literals and dictionary literals,<br>&gt;&gt; where we sometimes take a long time to type check.<br>&gt;&gt;<br>&gt;&gt; Is there any profiling/tracing you all would recommend to help find<br>&gt;&gt; problem areas?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If you’re looking for problem areas in your particular build, I have a<br>&gt;&gt; couple suggestions:<br>&gt;&gt;<br>&gt;&gt; 1. Take a look at the output of -debug-time-function-bodies to see if the<br>&gt;&gt; same function is getting type checked multiple times, and determine what<br>&gt;&gt; the cumulative time for those functions is.<br>&gt;&gt;<br>&gt;&gt; For example below is the output I see for a simple test case. Note that<br>&gt;&gt; the getter/setter that are generated from a property on line 2 of two.swift<br>&gt;&gt; are type checked twice. Although in this case we type check the individual<br>&gt;&gt; functions very quickly, if you have enough of this kind of redundant type<br>&gt;&gt; checking happening, it can add up. This *particular* case is a known bug<br>&gt;&gt; that we hope to address - the synthesized getters/setters for properties<br>&gt;&gt; are type checked in each file they are referenced in.<br>&gt;&gt;<br>&gt;&gt; There may be other cases like this that we’re not already aware of, so<br>&gt;&gt; it’s always good to open a bug if you find something like this.<br>&gt;&gt;<br>&gt;&gt; swiftc -c main.swift two.swift -module-name test -Xfrontend<br>&gt;&gt; -debug-time-function-bodies<br>&gt;&gt; 0.2ms main.swift:2:7 get {}<br>&gt;&gt; 0.2ms main.swift:2:7 set {}<br>&gt;&gt; 0.0ms main.swift:1:7 @objc deinit<br>&gt;&gt; 0.3ms main.swift:1:13 override init()<br>&gt;&gt; 0.2ms two.swift:2:14 get {}<br>&gt;&gt; 0.2ms two.swift:2:14 set {}<br>&gt;&gt; 0.2ms two.swift:2:14 get {}<br>&gt;&gt; 0.2ms two.swift:2:14 set {}<br>&gt;&gt; 0.0ms two.swift:1:14 @objc deinit<br>&gt;&gt; 0.0ms two.swift:1:14 init()<br>&gt;&gt;<br>&gt;&gt; 2. Add a timer for expression type checking and see if that helps narrow<br>&gt;&gt; down whether there is time being spent type checking expressions that isn’t<br>&gt;&gt; accounted for in -debug-time-function-bodies. There are a few places that<br>&gt;&gt; might make sense for this, but I suspect ConstraintSystem::solve() might<br>&gt;&gt; be the best. This is ultimately called from a variety of places, and would<br>&gt;&gt; provide the most insight into where time is being spent in the expression<br>&gt;&gt; type checking. It’s possible something higher up the stack, like<br>&gt;&gt; TypeChecker::solveForExpression or TypeChecker::typeCheckExpression()<br>&gt;&gt; might make more sense as well. You can model this on how<br>&gt;&gt; -debug-time-function-bodies is currently implemented, e.g. look<br>&gt;&gt; at swift::performTypeChecking for some help on getting started. I’ll<br>&gt;&gt; probably try to add this timer myself in the next few weeks if you don’t<br>&gt;&gt; manage to beat me to it.<br>&gt;&gt;<br>&gt;&gt; Mark<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t mind building from Swift master, using someone&#39;s preferred<br>&gt;&gt; profiling tools, etc. I&#39;m not really sure where to start.<br>&gt;&gt;<br>&gt;&gt; Ben<br>&gt;&gt;<br>&gt;&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Apologies for not starting off with system info: macOS Sierra (10.12.0),<br>&gt;&gt;&gt; Xcode 8.0 (from the App Store).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also<br>&gt;&gt;&gt; open a ticket for improving -debug-time-function-bodies if I can confirm<br>&gt;&gt;&gt; anything.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;<br>&gt;&gt;&gt;&gt; swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m<br>&gt;&gt;&gt;&gt; files). We have a nightly job that compiles the app and calls out function<br>&gt;&gt;&gt;&gt; bodies (using -debug-time-function-bodies) that are slower than 100ms<br>&gt;&gt;&gt;&gt; to compile. Since upgrading to Swift 3, the number of trouble function<br>&gt;&gt;&gt;&gt; bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The<br>&gt;&gt;&gt;&gt; only issue though is that build time overall increased by ~1 min (amount of<br>&gt;&gt;&gt;&gt; time to build all targets before automatically merging to master in our<br>&gt;&gt;&gt;&gt; integration build).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or<br>&gt;&gt;&gt;&gt; with one of the toolchain builds from swift.org?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Xcode 8.1 beta 2 includes some type checker performance improvements<br>&gt;&gt;&gt;&gt; which might have an impact here.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds<br>&gt;&gt;&gt;&gt; the app using the -debug-time-compilation flag, and using that we&#39;ve found<br>&gt;&gt;&gt;&gt; that some files take as long as 2-3 seconds to compile. But, there&#39;s no<br>&gt;&gt;&gt;&gt; targeted output to help us get this down via the<br>&gt;&gt;&gt;&gt; -debug-time-function-bodies flag (i.e. no function bodies that we can<br>&gt;&gt;&gt;&gt; refactor to get compile times much faster).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One thing to look out for here is that I believe there are some cases<br>&gt;&gt;&gt;&gt; where -debug-time-function-bodies isn’t reporting type checking time. From<br>&gt;&gt;&gt;&gt; my (potentially faulty) recollection, things like let bindings with<br>&gt;&gt;&gt;&gt; literals or closures on the right hand side do not show up in the<br>&gt;&gt;&gt;&gt; -debug-time-function-bodies output, and depending on the specifics of the<br>&gt;&gt;&gt;&gt; expression these can sometimes take a long time to type check. When these<br>&gt;&gt;&gt;&gt; appear within the body of another type declaration they can end up getting<br>&gt;&gt;&gt;&gt; type checked multiple times during a full project build, and that time can<br>&gt;&gt;&gt;&gt; add up.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don’t believe there is a bug open for improving<br>&gt;&gt;&gt;&gt; -debug-time-function-bodies to help diagnose this, but opening a bug would<br>&gt;&gt;&gt;&gt; be appreciated if you can confirm that this is the case, and of course<br>&gt;&gt;&gt;&gt; patches to fix it are definitely welcome as well.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Mark<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic<br>&gt;&gt;&gt;&gt; analysis&quot; for these problem files, but we don&#39;t currently have any way of<br>&gt;&gt;&gt;&gt; knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt;&gt;&gt;&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt;&gt;&gt;&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt;&gt;&gt;&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt;&gt;&gt;&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt;&gt;&gt;&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt;&gt;&gt;&gt; generate such reports and file bugs.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Ben<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Ben<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Ben<br>&gt;<br></p><p><br></p><p>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161007/f1ba3447/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  8, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Oct 7, 2016, at 2:35 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello again! I wanted to follow up with some more numbers and feedback. I wasn&#39;t able to easily compile a single file from our project from the CLI. I started putting together a command with all of the necessary framework includes, flags, etc., but I moved on because it was taking awhile, becoming a mess, and figured the other suggestions might yield results quicker.<br>&gt; <br>&gt; Moving on, I took a second look at the -debug-time-function-bodies output as Mark suggested, and I found that we have 2521 properties that are parsed 607 times each. If we got that down to the ideal case of parsing each one of those properties once, that would save us ~1.5 million &quot;parses&quot;. So, is there a ticket already for this issue? I didn&#39;t see one when I searched, but it does sound like it&#39;s known.<br></p><p>The fact that we type check the bodies of synthesized accessors multiple times is something a handful of people are aware of, but I’m not aware of any JIRA bug for it so it would be great to open one if you get a chance.<br></p><p>Out of curiosity, how many files are in your project, and how long does a clean build take (debug build, without optimizations)?<br></p><p>Mark<br></p><p>&gt; <br>&gt; I do plan on at least taking a look at adding the suggested timers, but that will likely take me into next week or longer depending on what else I have going on.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Ben<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 4:31 PM, Ben Asher &lt;benasher44 at gmail.com &lt;mailto:benasher44 at gmail.com&gt;&gt; wrote:<br>&gt; Ah this is all super helpful. I&#39;ll do some more profiling and try to get back with some data in the next several days.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Ben<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 4:28 PM, Mark Lacey &lt;mark.lacey at apple.com &lt;mailto:mark.lacey at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher &lt;benasher44 at gmail.com &lt;mailto:benasher44 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s. It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement was expected.<br>&gt; <br>&gt; The kind of benefit you might expect really depends on the specific code you’ve written. The changes I have in mind attempt to speed up the expression type checker (the thing that does the work of inferring types for a given expression, and the case where there is an explicit type the expression needs to type-check to, ensuring that it does). These expressions include things like array literals and dictionary literals, where we sometimes take a long time to type check.<br>&gt; <br>&gt;&gt; Is there any profiling/tracing you all would recommend to help find problem areas?<br>&gt; <br>&gt; If you’re looking for problem areas in your particular build, I have a couple suggestions:<br>&gt; <br>&gt; 1. Take a look at the output of -debug-time-function-bodies to see if the same function is getting type checked multiple times, and determine what the cumulative time for those functions is.<br>&gt; <br>&gt; For example below is the output I see for a simple test case. Note that the getter/setter that are generated from a property on line 2 of two.swift are type checked twice. Although in this case we type check the individual functions very quickly, if you have enough of this kind of redundant type checking happening, it can add up. This *particular* case is a known bug that we hope to address - the synthesized getters/setters for properties are type checked in each file they are referenced in.<br>&gt; <br>&gt; There may be other cases like this that we’re not already aware of, so it’s always good to open a bug if you find something like this.<br>&gt; <br>&gt; swiftc -c main.swift two.swift -module-name test -Xfrontend -debug-time-function-bodies<br>&gt; 0.2ms	main.swift:2:7	get {}<br>&gt; 0.2ms	main.swift:2:7	set {}<br>&gt; 0.0ms	main.swift:1:7	@objc deinit<br>&gt; 0.3ms	main.swift:1:13	override init()<br>&gt; 0.2ms	two.swift:2:14	get {}<br>&gt; 0.2ms	two.swift:2:14	set {}<br>&gt; 0.2ms	two.swift:2:14	get {}<br>&gt; 0.2ms	two.swift:2:14	set {}<br>&gt; 0.0ms	two.swift:1:14	@objc deinit<br>&gt; 0.0ms	two.swift:1:14	init()<br>&gt; <br>&gt; 2. Add a timer for expression type checking and see if that helps narrow down whether there is time being spent type checking expressions that isn’t accounted for in -debug-time-function-bodies. There are a few places that might make sense for this, but I suspect ConstraintSystem::solve() might be the best. This is ultimately called from a variety of places, and would provide the most insight into where time is being spent in the expression type checking. It’s possible something higher up the stack, like TypeChecker::solveForExpression or TypeChecker::typeCheckExpression() might make more sense as well. You can model this on how -debug-time-function-bodies is currently implemented, e.g. look at swift::performTypeChecking for some help on getting started. I’ll probably try to add this timer myself in the next few weeks if you don’t manage to beat me to it.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt; <br>&gt;&gt; I don&#39;t mind building from Swift master, using someone&#39;s preferred profiling tools, etc. I&#39;m not really sure where to start.<br>&gt;&gt; <br>&gt;&gt; Ben<br>&gt;&gt; <br>&gt;&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com &lt;mailto:benasher44 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Apologies for not starting off with system info: macOS Sierra (10.12.0), Xcode 8.0 (from the App Store).<br>&gt;&gt; <br>&gt;&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also open a ticket for improving -debug-time-function-bodies if I can confirm anything.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; Ben<br>&gt;&gt; <br>&gt;&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com &lt;mailto:mark.lacey at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m files). We have a nightly job that compiles the app and calls out function bodies (using -debug-time-function-bodies) that are slower than 100ms to compile. Since upgrading to Swift 3, the number of trouble function bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The only issue though is that build time overall increased by ~1 min (amount of time to build all targets before automatically merging to master in our integration build).<br>&gt;&gt; <br>&gt;&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or with one of the toolchain builds from swift.org &lt;http://swift.org/&gt;?<br>&gt;&gt; <br>&gt;&gt; Xcode 8.1 beta 2 includes some type checker performance improvements which might have an impact here.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds the app using the -debug-time-compilation flag, and using that we&#39;ve found that some files take as long as 2-3 seconds to compile. But, there&#39;s no targeted output to help us get this down via the -debug-time-function-bodies flag (i.e. no function bodies that we can refactor to get compile times much faster).<br>&gt;&gt; <br>&gt;&gt; One thing to look out for here is that I believe there are some cases where -debug-time-function-bodies isn’t reporting type checking time. From my (potentially faulty) recollection, things like let bindings with literals or closures on the right hand side do not show up in the -debug-time-function-bodies output, and depending on the specifics of the expression these can sometimes take a long time to type check. When these appear within the body of another type declaration they can end up getting type checked multiple times during a full project build, and that time can add up.<br>&gt;&gt; <br>&gt;&gt; I don’t believe there is a bug open for improving -debug-time-function-bodies to help diagnose this, but opening a bug would be appreciated if you can confirm that this is the case, and of course patches to fix it are definitely welcome as well.<br>&gt;&gt; <br>&gt;&gt; Mark<br>&gt;&gt; <br>&gt;&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic analysis&quot; for these problem files, but we don&#39;t currently have any way of knowing what that means. It feels like we&#39;ve exhausted the available options at this point (unless there are other flags I&#39;m missing) in terms of existing actionable debugging/profiling/reporting, so now our question is this: what kind of reports would Swift maintainers be interested in seeing in terms of output from profiling tools, etc. to help debug/diagnose these slow compile issues? We&#39;re willing to devote time to tooling to help generate such reports and file bugs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ben<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Ben<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Ben<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Ben<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161008/605fecd4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  8, 2016 at 10:00:00am</p></header><div class="content"><p>Okay great I&#39;ll open one soon! And just to clarify, that 2521 number is<br>counting the generated setters and getters (there are fewer number of<br>actual lines of &quot;let&quot; and &quot;var&quot; property code).<br></p><p>In the main target, there are 607 .swift files (guess we can deduce that<br>those properties are parsed once per file in the target) and 2012 .m files.<br>The build times I mentioned earlier (~7min) were debug builds after<br>cleaning only for the main target (not including test targets). Building<br>the main target after a clean requires building some framework and<br>extension targets (iOS extensions), but those are built pretty quickly and<br>are small.<br></p><p>Ben<br></p><p>On Sat, Oct 8, 2016 at 12:04 AM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 7, 2016, at 2:35 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hello again! I wanted to follow up with some more numbers and feedback. I<br>&gt; wasn&#39;t able to easily compile a single file from our project from the CLI.<br>&gt; I started putting together a command with all of the necessary framework<br>&gt; includes, flags, etc., but I moved on because it was taking awhile,<br>&gt; becoming a mess, and figured the other suggestions might yield results<br>&gt; quicker.<br>&gt;<br>&gt; Moving on, I took a second look at the -debug-time-function-bodies output<br>&gt; as Mark suggested, and I found that we have 2521 properties that are parsed<br>&gt; 607 times each. If we got that down to the ideal case of parsing each one<br>&gt; of those properties once, that would save us ~1.5 million &quot;parses&quot;. So, is<br>&gt; there a ticket already for this issue? I didn&#39;t see one when I searched,<br>&gt; but it does sound like it&#39;s known.<br>&gt;<br>&gt;<br>&gt; The fact that we type check the bodies of synthesized accessors multiple<br>&gt; times is something a handful of people are aware of, but I’m not aware of<br>&gt; any JIRA bug for it so it would be great to open one if you get a chance.<br>&gt;<br>&gt; Out of curiosity, how many files are in your project, and how long does a<br>&gt; clean build take (debug build, without optimizations)?<br>&gt;<br>&gt; Mark<br>&gt;<br>&gt;<br>&gt; I do plan on at least taking a look at adding the suggested timers, but<br>&gt; that will likely take me into next week or longer depending on what else I<br>&gt; have going on.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Ben<br>&gt;<br>&gt; On Wed, Oct 5, 2016 at 4:31 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Ah this is all super helpful. I&#39;ll do some more profiling and try to get<br>&gt;&gt; back with some data in the next several days.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Ben<br>&gt;&gt;<br>&gt;&gt; On Wed, Oct 5, 2016 at 4:28 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems<br>&gt;&gt;&gt; maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s.<br>&gt;&gt;&gt; It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement<br>&gt;&gt;&gt; was expected.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The kind of benefit you might expect really depends on the specific code<br>&gt;&gt;&gt; you’ve written. The changes I have in mind attempt to speed up the<br>&gt;&gt;&gt; expression type checker (the thing that does the work of inferring types<br>&gt;&gt;&gt; for a given expression, and the case where there is an explicit type the<br>&gt;&gt;&gt; expression needs to type-check to, ensuring that it does). These<br>&gt;&gt;&gt; expressions include things like array literals and dictionary literals,<br>&gt;&gt;&gt; where we sometimes take a long time to type check.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is there any profiling/tracing you all would recommend to help find<br>&gt;&gt;&gt; problem areas?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you’re looking for problem areas in your particular build, I have a<br>&gt;&gt;&gt; couple suggestions:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. Take a look at the output of -debug-time-function-bodies to see if<br>&gt;&gt;&gt; the same function is getting type checked multiple times, and determine<br>&gt;&gt;&gt; what the cumulative time for those functions is.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For example below is the output I see for a simple test case. Note that<br>&gt;&gt;&gt; the getter/setter that are generated from a property on line 2 of two.swift<br>&gt;&gt;&gt; are type checked twice. Although in this case we type check the individual<br>&gt;&gt;&gt; functions very quickly, if you have enough of this kind of redundant type<br>&gt;&gt;&gt; checking happening, it can add up. This *particular* case is a known bug<br>&gt;&gt;&gt; that we hope to address - the synthesized getters/setters for properties<br>&gt;&gt;&gt; are type checked in each file they are referenced in.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There may be other cases like this that we’re not already aware of, so<br>&gt;&gt;&gt; it’s always good to open a bug if you find something like this.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; swiftc -c main.swift two.swift -module-name test -Xfrontend<br>&gt;&gt;&gt; -debug-time-function-bodies<br>&gt;&gt;&gt; 0.2ms main.swift:2:7 get {}<br>&gt;&gt;&gt; 0.2ms main.swift:2:7 set {}<br>&gt;&gt;&gt; 0.0ms main.swift:1:7 @objc deinit<br>&gt;&gt;&gt; 0.3ms main.swift:1:13 override init()<br>&gt;&gt;&gt; 0.2ms two.swift:2:14 get {}<br>&gt;&gt;&gt; 0.2ms two.swift:2:14 set {}<br>&gt;&gt;&gt; 0.2ms two.swift:2:14 get {}<br>&gt;&gt;&gt; 0.2ms two.swift:2:14 set {}<br>&gt;&gt;&gt; 0.0ms two.swift:1:14 @objc deinit<br>&gt;&gt;&gt; 0.0ms two.swift:1:14 init()<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2. Add a timer for expression type checking and see if that helps narrow<br>&gt;&gt;&gt; down whether there is time being spent type checking expressions that isn’t<br>&gt;&gt;&gt; accounted for in -debug-time-function-bodies. There are a few places that<br>&gt;&gt;&gt; might make sense for this, but I suspect ConstraintSystem::solve()<br>&gt;&gt;&gt; might be the best. This is ultimately called from a variety of places, and<br>&gt;&gt;&gt; would provide the most insight into where time is being spent in the<br>&gt;&gt;&gt; expression type checking. It’s possible something higher up the stack, like<br>&gt;&gt;&gt; TypeChecker::solveForExpression or TypeChecker::typeCheckExpression()<br>&gt;&gt;&gt; might make more sense as well. You can model this on how<br>&gt;&gt;&gt; -debug-time-function-bodies is currently implemented, e.g. look<br>&gt;&gt;&gt; at swift::performTypeChecking for some help on getting started. I’ll<br>&gt;&gt;&gt; probably try to add this timer myself in the next few weeks if you don’t<br>&gt;&gt;&gt; manage to beat me to it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Mark<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t mind building from Swift master, using someone&#39;s preferred<br>&gt;&gt;&gt; profiling tools, etc. I&#39;m not really sure where to start.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Apologies for not starting off with system info: macOS Sierra<br>&gt;&gt;&gt;&gt; (10.12.0), Xcode 8.0 (from the App Store).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also<br>&gt;&gt;&gt;&gt; open a ticket for improving -debug-time-function-bodies if I can confirm<br>&gt;&gt;&gt;&gt; anything.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m<br>&gt;&gt;&gt;&gt;&gt; files). We have a nightly job that compiles the app and calls out function<br>&gt;&gt;&gt;&gt;&gt; bodies (using -debug-time-function-bodies) that are slower than 100ms<br>&gt;&gt;&gt;&gt;&gt; to compile. Since upgrading to Swift 3, the number of trouble function<br>&gt;&gt;&gt;&gt;&gt; bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about that! The<br>&gt;&gt;&gt;&gt;&gt; only issue though is that build time overall increased by ~1 min (amount of<br>&gt;&gt;&gt;&gt;&gt; time to build all targets before automatically merging to master in our<br>&gt;&gt;&gt;&gt;&gt; integration build).<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or<br>&gt;&gt;&gt;&gt;&gt; with one of the toolchain builds from swift.org?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Xcode 8.1 beta 2 includes some type checker performance improvements<br>&gt;&gt;&gt;&gt;&gt; which might have an impact here.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds<br>&gt;&gt;&gt;&gt;&gt; the app using the -debug-time-compilation flag, and using that we&#39;ve found<br>&gt;&gt;&gt;&gt;&gt; that some files take as long as 2-3 seconds to compile. But, there&#39;s no<br>&gt;&gt;&gt;&gt;&gt; targeted output to help us get this down via the<br>&gt;&gt;&gt;&gt;&gt; -debug-time-function-bodies flag (i.e. no function bodies that we can<br>&gt;&gt;&gt;&gt;&gt; refactor to get compile times much faster).<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; One thing to look out for here is that I believe there are some cases<br>&gt;&gt;&gt;&gt;&gt; where -debug-time-function-bodies isn’t reporting type checking time. From<br>&gt;&gt;&gt;&gt;&gt; my (potentially faulty) recollection, things like let bindings with<br>&gt;&gt;&gt;&gt;&gt; literals or closures on the right hand side do not show up in the<br>&gt;&gt;&gt;&gt;&gt; -debug-time-function-bodies output, and depending on the specifics of the<br>&gt;&gt;&gt;&gt;&gt; expression these can sometimes take a long time to type check. When these<br>&gt;&gt;&gt;&gt;&gt; appear within the body of another type declaration they can end up getting<br>&gt;&gt;&gt;&gt;&gt; type checked multiple times during a full project build, and that time can<br>&gt;&gt;&gt;&gt;&gt; add up.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don’t believe there is a bug open for improving<br>&gt;&gt;&gt;&gt;&gt; -debug-time-function-bodies to help diagnose this, but opening a bug would<br>&gt;&gt;&gt;&gt;&gt; be appreciated if you can confirm that this is the case, and of course<br>&gt;&gt;&gt;&gt;&gt; patches to fix it are definitely welcome as well.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Mark<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; We can see that most of the time is spent in &quot;Type checking / Semantic<br>&gt;&gt;&gt;&gt;&gt; analysis&quot; for these problem files, but we don&#39;t currently have any way of<br>&gt;&gt;&gt;&gt;&gt; knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt;&gt;&gt;&gt;&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt;&gt;&gt;&gt;&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt;&gt;&gt;&gt;&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt;&gt;&gt;&gt;&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt;&gt;&gt;&gt;&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt;&gt;&gt;&gt;&gt; generate such reports and file bugs.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; -Ben<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Ben<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Ben<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Ben<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161008/ad6b2578/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d834d5ab9e4fd43f59675ea7641bb24?s=50"></div><header><strong>Reporting/Debugging Slow Swift Compile Time</strong> from <string>Ben Asher</string> &lt;benasher44 at gmail.com&gt;<p>October  9, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;ve opened a few jira tickets:<br></p><p>- https://bugs.swift.org/browse/SR-2901 for this bug (has some numbers on<br>the impact in our project)<br>- https://bugs.swift.org/browse/SR-2902 for adding the expression type<br>checker timer, since it&#39;s looking like I won&#39;t have time to get to in the<br>next 2 weeks<br></p><p>I&#39;ve also opened a PR to increase the number of decimal places logged by<br>-debug-time-function-bodies from 1 to 3, which was useful to determine the<br>impact of the bug in SR-2901 (i.e. functions that less than 0.1ms to parse,<br>but are parsed many times), here: https://github.com/apple/swift/pull/5200.<br></p><p>Thanks again!<br></p><p>Ben<br></p><p>On Sat, Oct 8, 2016 at 10:34 AM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br></p><p>&gt; Okay great I&#39;ll open one soon! And just to clarify, that 2521 number is<br>&gt; counting the generated setters and getters (there are fewer number of<br>&gt; actual lines of &quot;let&quot; and &quot;var&quot; property code).<br>&gt;<br>&gt; In the main target, there are 607 .swift files (guess we can deduce that<br>&gt; those properties are parsed once per file in the target) and 2012 .m files.<br>&gt; The build times I mentioned earlier (~7min) were debug builds after<br>&gt; cleaning only for the main target (not including test targets). Building<br>&gt; the main target after a clean requires building some framework and<br>&gt; extension targets (iOS extensions), but those are built pretty quickly and<br>&gt; are small.<br>&gt;<br>&gt; Ben<br>&gt;<br>&gt; On Sat, Oct 8, 2016 at 12:04 AM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 7, 2016, at 2:35 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello again! I wanted to follow up with some more numbers and feedback. I<br>&gt;&gt; wasn&#39;t able to easily compile a single file from our project from the CLI.<br>&gt;&gt; I started putting together a command with all of the necessary framework<br>&gt;&gt; includes, flags, etc., but I moved on because it was taking awhile,<br>&gt;&gt; becoming a mess, and figured the other suggestions might yield results<br>&gt;&gt; quicker.<br>&gt;&gt;<br>&gt;&gt; Moving on, I took a second look at the -debug-time-function-bodies output<br>&gt;&gt; as Mark suggested, and I found that we have 2521 properties that are parsed<br>&gt;&gt; 607 times each. If we got that down to the ideal case of parsing each one<br>&gt;&gt; of those properties once, that would save us ~1.5 million &quot;parses&quot;. So, is<br>&gt;&gt; there a ticket already for this issue? I didn&#39;t see one when I searched,<br>&gt;&gt; but it does sound like it&#39;s known.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The fact that we type check the bodies of synthesized accessors multiple<br>&gt;&gt; times is something a handful of people are aware of, but I’m not aware of<br>&gt;&gt; any JIRA bug for it so it would be great to open one if you get a chance.<br>&gt;&gt;<br>&gt;&gt; Out of curiosity, how many files are in your project, and how long does a<br>&gt;&gt; clean build take (debug build, without optimizations)?<br>&gt;&gt;<br>&gt;&gt; Mark<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I do plan on at least taking a look at adding the suggested timers, but<br>&gt;&gt; that will likely take me into next week or longer depending on what else I<br>&gt;&gt; have going on.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Ben<br>&gt;&gt;<br>&gt;&gt; On Wed, Oct 5, 2016 at 4:31 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Ah this is all super helpful. I&#39;ll do some more profiling and try to get<br>&gt;&gt;&gt; back with some data in the next several days.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Oct 5, 2016 at 4:28 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Oct 5, 2016, at 3:37 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I just tried with both Xcode 8.1 beta 2 and Xcode 8.0, and 8.1b2 seems<br>&gt;&gt;&gt;&gt; maybe 15s faster (to build our main huge target): 7m28s compared to 7m43s.<br>&gt;&gt;&gt;&gt; It&#39;s some improvement, but I&#39;m not exactly sure what kind of improvement<br>&gt;&gt;&gt;&gt; was expected.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The kind of benefit you might expect really depends on the specific<br>&gt;&gt;&gt;&gt; code you’ve written. The changes I have in mind attempt to speed up the<br>&gt;&gt;&gt;&gt; expression type checker (the thing that does the work of inferring types<br>&gt;&gt;&gt;&gt; for a given expression, and the case where there is an explicit type the<br>&gt;&gt;&gt;&gt; expression needs to type-check to, ensuring that it does). These<br>&gt;&gt;&gt;&gt; expressions include things like array literals and dictionary literals,<br>&gt;&gt;&gt;&gt; where we sometimes take a long time to type check.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is there any profiling/tracing you all would recommend to help find<br>&gt;&gt;&gt;&gt; problem areas?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If you’re looking for problem areas in your particular build, I have a<br>&gt;&gt;&gt;&gt; couple suggestions:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. Take a look at the output of -debug-time-function-bodies to see if<br>&gt;&gt;&gt;&gt; the same function is getting type checked multiple times, and determine<br>&gt;&gt;&gt;&gt; what the cumulative time for those functions is.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For example below is the output I see for a simple test case. Note that<br>&gt;&gt;&gt;&gt; the getter/setter that are generated from a property on line 2 of two.swift<br>&gt;&gt;&gt;&gt; are type checked twice. Although in this case we type check the individual<br>&gt;&gt;&gt;&gt; functions very quickly, if you have enough of this kind of redundant type<br>&gt;&gt;&gt;&gt; checking happening, it can add up. This *particular* case is a known bug<br>&gt;&gt;&gt;&gt; that we hope to address - the synthesized getters/setters for properties<br>&gt;&gt;&gt;&gt; are type checked in each file they are referenced in.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There may be other cases like this that we’re not already aware of, so<br>&gt;&gt;&gt;&gt; it’s always good to open a bug if you find something like this.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; swiftc -c main.swift two.swift -module-name test -Xfrontend<br>&gt;&gt;&gt;&gt; -debug-time-function-bodies<br>&gt;&gt;&gt;&gt; 0.2ms main.swift:2:7 get {}<br>&gt;&gt;&gt;&gt; 0.2ms main.swift:2:7 set {}<br>&gt;&gt;&gt;&gt; 0.0ms main.swift:1:7 @objc deinit<br>&gt;&gt;&gt;&gt; 0.3ms main.swift:1:13 override init()<br>&gt;&gt;&gt;&gt; 0.2ms two.swift:2:14 get {}<br>&gt;&gt;&gt;&gt; 0.2ms two.swift:2:14 set {}<br>&gt;&gt;&gt;&gt; 0.2ms two.swift:2:14 get {}<br>&gt;&gt;&gt;&gt; 0.2ms two.swift:2:14 set {}<br>&gt;&gt;&gt;&gt; 0.0ms two.swift:1:14 @objc deinit<br>&gt;&gt;&gt;&gt; 0.0ms two.swift:1:14 init()<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2. Add a timer for expression type checking and see if that helps<br>&gt;&gt;&gt;&gt; narrow down whether there is time being spent type checking expressions<br>&gt;&gt;&gt;&gt; that isn’t accounted for in -debug-time-function-bodies. There are a few<br>&gt;&gt;&gt;&gt; places that might make sense for this, but I suspect ConstraintSystem::solve()<br>&gt;&gt;&gt;&gt; might be the best. This is ultimately called from a variety of places, and<br>&gt;&gt;&gt;&gt; would provide the most insight into where time is being spent in the<br>&gt;&gt;&gt;&gt; expression type checking. It’s possible something higher up the stack, like<br>&gt;&gt;&gt;&gt; TypeChecker::solveForExpression or TypeChecker::typeCheckExpression()<br>&gt;&gt;&gt;&gt; might make more sense as well. You can model this on how<br>&gt;&gt;&gt;&gt; -debug-time-function-bodies is currently implemented, e.g. look<br>&gt;&gt;&gt;&gt; at swift::performTypeChecking for some help on getting started. I’ll<br>&gt;&gt;&gt;&gt; probably try to add this timer myself in the next few weeks if you don’t<br>&gt;&gt;&gt;&gt; manage to beat me to it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Mark<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t mind building from Swift master, using someone&#39;s preferred<br>&gt;&gt;&gt;&gt; profiling tools, etc. I&#39;m not really sure where to start.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Wed, Oct 5, 2016 at 1:05 PM, Ben Asher &lt;benasher44 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Apologies for not starting off with system info: macOS Sierra<br>&gt;&gt;&gt;&gt;&gt; (10.12.0), Xcode 8.0 (from the App Store).<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I&#39;ll try with Xcode 8.1 beta this afternoon and report back. Ill also<br>&gt;&gt;&gt;&gt;&gt; open a ticket for improving -debug-time-function-bodies if I can confirm<br>&gt;&gt;&gt;&gt;&gt; anything.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Wed, Oct 5, 2016 at 1:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 4, 2016, at 2:38 PM, Ben Asher via swift-dev &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Hello! I work with a large project (~900 .swift files and more .m<br>&gt;&gt;&gt;&gt;&gt;&gt; files). We have a nightly job that compiles the app and calls out function<br>&gt;&gt;&gt;&gt;&gt;&gt; bodies (using -debug-time-function-bodies) that are slower than<br>&gt;&gt;&gt;&gt;&gt;&gt; 100ms to compile. Since upgrading to Swift 3, the number of trouble<br>&gt;&gt;&gt;&gt;&gt;&gt; function bodies has one from &gt; 150 to &lt; 20, so we&#39;re really happy about<br>&gt;&gt;&gt;&gt;&gt;&gt; that! The only issue though is that build time overall increased by ~1 min<br>&gt;&gt;&gt;&gt;&gt;&gt; (amount of time to build all targets before automatically merging to master<br>&gt;&gt;&gt;&gt;&gt;&gt; in our integration build).<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Is this using a particular release of Xcode (8.0 or an 8.1 beta?), or<br>&gt;&gt;&gt;&gt;&gt;&gt; with one of the toolchain builds from swift.org?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Xcode 8.1 beta 2 includes some type checker performance improvements<br>&gt;&gt;&gt;&gt;&gt;&gt; which might have an impact here.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; To dig into this further, we&#39;ve started a new nightly job that builds<br>&gt;&gt;&gt;&gt;&gt;&gt; the app using the -debug-time-compilation flag, and using that we&#39;ve found<br>&gt;&gt;&gt;&gt;&gt;&gt; that some files take as long as 2-3 seconds to compile. But, there&#39;s no<br>&gt;&gt;&gt;&gt;&gt;&gt; targeted output to help us get this down via the<br>&gt;&gt;&gt;&gt;&gt;&gt; -debug-time-function-bodies flag (i.e. no function bodies that we can<br>&gt;&gt;&gt;&gt;&gt;&gt; refactor to get compile times much faster).<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; One thing to look out for here is that I believe there are some cases<br>&gt;&gt;&gt;&gt;&gt;&gt; where -debug-time-function-bodies isn’t reporting type checking time. From<br>&gt;&gt;&gt;&gt;&gt;&gt; my (potentially faulty) recollection, things like let bindings with<br>&gt;&gt;&gt;&gt;&gt;&gt; literals or closures on the right hand side do not show up in the<br>&gt;&gt;&gt;&gt;&gt;&gt; -debug-time-function-bodies output, and depending on the specifics of the<br>&gt;&gt;&gt;&gt;&gt;&gt; expression these can sometimes take a long time to type check. When these<br>&gt;&gt;&gt;&gt;&gt;&gt; appear within the body of another type declaration they can end up getting<br>&gt;&gt;&gt;&gt;&gt;&gt; type checked multiple times during a full project build, and that time can<br>&gt;&gt;&gt;&gt;&gt;&gt; add up.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I don’t believe there is a bug open for improving<br>&gt;&gt;&gt;&gt;&gt;&gt; -debug-time-function-bodies to help diagnose this, but opening a bug would<br>&gt;&gt;&gt;&gt;&gt;&gt; be appreciated if you can confirm that this is the case, and of course<br>&gt;&gt;&gt;&gt;&gt;&gt; patches to fix it are definitely welcome as well.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Mark<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; We can see that most of the time is spent in &quot;Type checking /<br>&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis&quot; for these problem files, but we don&#39;t currently have any<br>&gt;&gt;&gt;&gt;&gt;&gt; way of knowing what that means. It feels like we&#39;ve exhausted the available<br>&gt;&gt;&gt;&gt;&gt;&gt; options at this point (unless there are other flags I&#39;m missing) in terms<br>&gt;&gt;&gt;&gt;&gt;&gt; of existing actionable debugging/profiling/reporting, so now our question<br>&gt;&gt;&gt;&gt;&gt;&gt; is this: what kind of reports would Swift maintainers be interested in<br>&gt;&gt;&gt;&gt;&gt;&gt; seeing in terms of output from profiling tools, etc. to help debug/diagnose<br>&gt;&gt;&gt;&gt;&gt;&gt; these slow compile issues? We&#39;re willing to devote time to tooling to help<br>&gt;&gt;&gt;&gt;&gt;&gt; generate such reports and file bugs.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Ben<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; -Ben<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; -Ben<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Ben<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Ben<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -Ben<br>&gt;<br></p><p><br></p><p>-- <br>-Ben<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161009/ed24e1f6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
