<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[pitch] replace (if/guard) case = with ~=</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>October  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Resolved: `if case 1...10 = myNumber { ... }` is an abomination.<br></p><p>It confuses inexperience developers. At least those few who are <br>aware of its existence. Using the assignment operator for pattern <br>matching adds insult to injury. <br></p><p>I far prefer<br>    `if case .failure(let error) ~= result { ... } `<br>to<br>    `if case .failure(let error) = result {...}`<br></p><p>Though worthy, this isn&#39;t a popular pattern.  A highly unscientific survey of <br>gist reveal:<br></p><p>* Gists using &quot;if case&quot;: 94<br>* Gists that could use &quot;if let&quot; instead of &quot;if case&quot;: Approximately 94-ish<br>* Gists using &quot;guard case&quot; (with significant overlap with &quot;if case&quot;): 54<br>* Gists that could use &quot;guard let&quot; or &quot;guard x != nil&quot; or &quot;guard x == .enumeration&quot; instead: About 54-ish<br>* Standard library: 1 use of &quot;guard case&quot;, 5 uses of &quot;if case&quot;.<br></p><p>Note:<br></p><p>* I love `guard case`/`if case` for `Result` enumerations<br>* I  love`for case let x? in [optionals]`. <br></p><p>I don&#39;t expect changing `=` to `~=` would make a huge difference in adoption <br>but it would satisfy  my inner code critic. Changing it would be breaking<br>but as far as I can tell, it wouldn&#39;t really break *that* *much* *code*<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/b8f736d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[pitch] replace (if/guard) case = with ~=</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>October  3, 2016 at 10:00:00pm</p></header><div class="content"><p>While we’re on the subject, has there been any discussion about adding a<br>pattern matching operator with the polarity reversed?<br></p><p>To me at least it seems far more natural to write, eg., “case x =~<br>somePattern” and to read it as “x matches somePattern” rather than the<br>status quo “somePattern matches x”.<br></p><p>Nevin<br></p><p><br></p><p>On Mon, Oct 3, 2016 at 9:31 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; *Resolved*: `if case 1...10 = myNumber { ... }` is an abomination.<br>&gt;<br>&gt; It confuses inexperience developers. At least those few who are<br>&gt; aware of its existence. Using the assignment operator for pattern<br>&gt; matching adds insult to injury.<br>&gt;<br>&gt; I far prefer<br>&gt;     `if case .failure(let error) ~= result { ... } `<br>&gt; to<br>&gt;     `if case .failure(let error) = result {...}`<br>&gt;<br>&gt; Though worthy, this isn&#39;t a popular pattern.  A highly unscientific survey<br>&gt; of<br>&gt; gist reveal:<br>&gt;<br>&gt; * Gists using &quot;if case&quot;: 94<br>&gt; * Gists that could use &quot;if let&quot; instead of &quot;if case&quot;: Approximately 94-ish<br>&gt; * Gists using &quot;guard case&quot; (with significant overlap with &quot;if case&quot;): 54<br>&gt; * Gists that could use &quot;guard let&quot; or &quot;guard x != nil&quot; or &quot;guard x ==<br>&gt; .enumeration&quot; instead: About 54-ish<br>&gt; * Standard library: 1 use of &quot;guard case&quot;, 5 uses of &quot;if case&quot;.<br>&gt;<br>&gt; *Note*:<br>&gt;<br>&gt; * I love `guard case`/`if case` for `Result` enumerations<br>&gt; * I  love`for case let x? in [optionals]`.<br>&gt;<br>&gt; I don&#39;t expect changing `=` to `~=` would make a huge difference in<br>&gt; adoption<br>&gt; but it would satisfy  my inner code critic. Changing it would be breaking<br>&gt; but as far as I can tell, it wouldn&#39;t really break *that* *much* *code*<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/33237ad9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[pitch] replace (if/guard) case = with ~=</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October  3, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mon, Oct 3, 2016 at 9:31 PM, Nevin Brackett-Rozinsky via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; While we’re on the subject, has there been any discussion about adding a<br>&gt; pattern matching operator with the polarity reversed?<br>&gt;<br>&gt; To me at least it seems far more natural to write, eg., “case x =~<br>&gt; somePattern” and to read it as “x matches somePattern” rather than the<br>&gt; status quo “somePattern matches x”.<br>&gt;<br></p><p>There has. My memory is foggy now, but I do believe this was one of those<br>things about which the core team chimed in to say that they had once<br>seriously considered or even implemented it and then backed it out.<br></p><p><br>Nevin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Oct 3, 2016 at 9:31 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; *Resolved*: `if case 1...10 = myNumber { ... }` is an abomination.<br>&gt;&gt;<br>&gt;&gt; It confuses inexperience developers. At least those few who are<br>&gt;&gt; aware of its existence. Using the assignment operator for pattern<br>&gt;&gt; matching adds insult to injury.<br>&gt;&gt;<br>&gt;&gt; I far prefer<br>&gt;&gt;     `if case .failure(let error) ~= result { ... } `<br>&gt;&gt; to<br>&gt;&gt;     `if case .failure(let error) = result {...}`<br>&gt;&gt;<br>&gt;&gt; Though worthy, this isn&#39;t a popular pattern.  A highly unscientific<br>&gt;&gt; survey of<br>&gt;&gt; gist reveal:<br>&gt;&gt;<br>&gt;&gt; * Gists using &quot;if case&quot;: 94<br>&gt;&gt; * Gists that could use &quot;if let&quot; instead of &quot;if case&quot;: Approximately 94-ish<br>&gt;&gt; * Gists using &quot;guard case&quot; (with significant overlap with &quot;if case&quot;): 54<br>&gt;&gt; * Gists that could use &quot;guard let&quot; or &quot;guard x != nil&quot; or &quot;guard x ==<br>&gt;&gt; .enumeration&quot; instead: About 54-ish<br>&gt;&gt; * Standard library: 1 use of &quot;guard case&quot;, 5 uses of &quot;if case&quot;.<br>&gt;&gt;<br>&gt;&gt; *Note*:<br>&gt;&gt;<br>&gt;&gt; * I love `guard case`/`if case` for `Result` enumerations<br>&gt;&gt; * I  love`for case let x? in [optionals]`.<br>&gt;&gt;<br>&gt;&gt; I don&#39;t expect changing `=` to `~=` would make a huge difference in<br>&gt;&gt; adoption<br>&gt;&gt; but it would satisfy  my inner code critic. Changing it would be breaking<br>&gt;&gt; but as far as I can tell, it wouldn&#39;t really break *that* *much* *code*<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/513664c1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
