<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b81089e81d6bb1e14b5adb746725de1?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Alexis</string> &lt;abeingessner at apple.com&gt;<p>October 23, 2016 at 06:00:00pm</p></header><div class="content"><p>Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br></p><p>Can anyone recall why this is? How hard is it to fix?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>October 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt; <br>&gt; Can anyone recall why this is? How hard is it to fix?<br></p><p>I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br></p><p>What do you think Jordan?<br>Michael<br></p><p>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>October 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 23, 2016, at 16:13, Michael Gottesman &lt;mgottesman at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt; <br>&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt; <br>&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br></p><p>I don&#39;t have it all paged in, but there are three main pieces I remember:<br></p><p>- Private and fileprivate decls can of course conflict across file boundaries, which means it&#39;s possible we wouldn&#39;t be able to rebuild the standard library from textual SIL. I think this is just a hypothetical concern, since we don&#39;t actually have a reason to reuse names.<br></p><p>- Textual SIL again: the mangling for a private decl depends on its file. We could fix this with an attribute that hardcodes manglings, or hardcodes a private discriminator, or something. (We also have a bug today where multiple &#39;private&#39; decls in the same file will conflict in their mangling.)<br></p><p>- The standard library currently builds with -sil-serialize-all (&quot;magic performance mode&quot;) to make everything inlinable. This option currently mucks with linkages at the SIL level in a fairly unprincipled way. This is probably the underlying cause of whatever linking issues you&#39;re seeing, but even if it&#39;s not it would probably get in the way of trying to fix things.<br></p><p>docs/AccessControlInStdlib.rst points to another, similar issue: &lt;rdar://problem/17631278&gt; Figure out how inlined XREFs to private entities work. Our planned answer for this is that inlinable things can&#39;t reference private entities, only internal ones (and even then only those marked as &quot;versioned&quot;). That&#39;s a bit annoying, but does correspond with the notion that a versioned entity is an ABI promise, and the file you declare something in should never be part of the library&#39;s ABI. (There are other answers that could work here, of course.)<br></p><p>Fortunately those last issues are something we need to fix anyway as part of deciding which parts of the standard library should be resilient and which parts are fragile, so maybe we&#39;ll be in a good enough place to start allowing private decls again later this release.<br></p><p>Jordan<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161027/fe410787/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>October 28, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 27, 2016, at 1:44 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 23, 2016, at 16:13, Michael Gottesman &lt;mgottesman at apple.com &lt;mailto:mgottesman at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt;&gt; <br>&gt;&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt; <br>&gt; I don&#39;t have it all paged in, but there are three main pieces I remember:<br>&gt; <br>&gt; - Private and fileprivate decls can of course conflict across file boundaries, which means it&#39;s possible we wouldn&#39;t be able to rebuild the standard library from textual SIL. I think this is just a hypothetical concern, since we don&#39;t actually have a reason to reuse names.<br>&gt; <br>&gt; - Textual SIL again: the mangling for a private decl depends on its file. We could fix this with an attribute that hardcodes manglings, or hardcodes a private discriminator, or something. (We also have a bug today where multiple &#39;private&#39; decls in the same file will conflict in their mangling.)<br>&gt; <br>&gt; - The standard library currently builds with -sil-serialize-all (&quot;magic performance mode&quot;) to make everything inlinable. This option currently mucks with linkages at the SIL level in a fairly unprincipled way.<br></p><p>This was the case (long time ago). But now the SIL linkage is not affected by -sil-serialize-all, just the llvm linkage.<br>But maybe you are referring to another issue.<br></p><p>&gt; This is probably the underlying cause of whatever linking issues you&#39;re seeing, but even if it&#39;s not it would probably get in the way of trying to fix things.<br>&gt; <br>&gt; docs/AccessControlInStdlib.rst points to another, similar issue: &lt;rdar://problem/17631278 &lt;rdar://problem/17631278&gt;&gt; Figure out how inlined XREFs to private entities work. Our planned answer for this is that inlinable things can&#39;t reference private entities, only internal ones (and even then only those marked as &quot;versioned&quot;). That&#39;s a bit annoying, but does correspond with the notion that a versioned entity is an ABI promise, and the file you declare something in should never be part of the library&#39;s ABI. (There are other answers that could work here, of course.)<br>&gt; <br>&gt; Fortunately those last issues are something we need to fix anyway as part of deciding which parts of the standard library should be resilient and which parts are fragile, so maybe we&#39;ll be in a good enough place to start allowing private decls again later this release.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161028/bc0a52ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>October 28, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 28, 2016, at 17:00, Erik Eckstein &lt;eeckstein at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 27, 2016, at 1:44 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 23, 2016, at 16:13, Michael Gottesman &lt;mgottesman at apple.com &lt;mailto:mgottesman at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t have it all paged in, but there are three main pieces I remember:<br>&gt;&gt; <br>&gt;&gt; - Private and fileprivate decls can of course conflict across file boundaries, which means it&#39;s possible we wouldn&#39;t be able to rebuild the standard library from textual SIL. I think this is just a hypothetical concern, since we don&#39;t actually have a reason to reuse names.<br>&gt;&gt; <br>&gt;&gt; - Textual SIL again: the mangling for a private decl depends on its file. We could fix this with an attribute that hardcodes manglings, or hardcodes a private discriminator, or something. (We also have a bug today where multiple &#39;private&#39; decls in the same file will conflict in their mangling.)<br>&gt;&gt; <br>&gt;&gt; - The standard library currently builds with -sil-serialize-all (&quot;magic performance mode&quot;) to make everything inlinable. This option currently mucks with linkages at the SIL level in a fairly unprincipled way.<br>&gt; <br>&gt; This was the case (long time ago). But now the SIL linkage is not affected by -sil-serialize-all, just the llvm linkage.<br>&gt; But maybe you are referring to another issue.<br></p><p>Then I guess it’s the same issue the other way around: we don’t muck with the real linkage enough to make the symbols actually public. Again, being principled about what an inlinable function can and can’t refer to would help here.<br></p><p>&gt; <br>&gt;&gt; This is probably the underlying cause of whatever linking issues you&#39;re seeing, but even if it&#39;s not it would probably get in the way of trying to fix things.<br>&gt;&gt; <br>&gt;&gt; docs/AccessControlInStdlib.rst points to another, similar issue: &lt;rdar://problem/17631278 &lt;rdar://problem/17631278&gt;&gt; Figure out how inlined XREFs to private entities work. Our planned answer for this is that inlinable things can&#39;t reference private entities, only internal ones (and even then only those marked as &quot;versioned&quot;). That&#39;s a bit annoying, but does correspond with the notion that a versioned entity is an ABI promise, and the file you declare something in should never be part of the library&#39;s ABI. (There are other answers that could work here, of course.)<br>&gt;&gt; <br>&gt;&gt; Fortunately those last issues are something we need to fix anyway as part of deciding which parts of the standard library should be resilient and which parts are fragile, so maybe we&#39;ll be in a good enough place to start allowing private decls again later this release.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161028/32c2c6dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>October 28, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 28, 2016, at 5:01 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 28, 2016, at 17:00, Erik Eckstein &lt;eeckstein at apple.com &lt;mailto:eeckstein at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Oct 27, 2016, at 1:44 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 23, 2016, at 16:13, Michael Gottesman &lt;mgottesman at apple.com &lt;mailto:mgottesman at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t have it all paged in, but there are three main pieces I remember:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Private and fileprivate decls can of course conflict across file boundaries, which means it&#39;s possible we wouldn&#39;t be able to rebuild the standard library from textual SIL. I think this is just a hypothetical concern, since we don&#39;t actually have a reason to reuse names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Textual SIL again: the mangling for a private decl depends on its file. We could fix this with an attribute that hardcodes manglings, or hardcodes a private discriminator, or something. (We also have a bug today where multiple &#39;private&#39; decls in the same file will conflict in their mangling.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - The standard library currently builds with -sil-serialize-all (&quot;magic performance mode&quot;) to make everything inlinable. This option currently mucks with linkages at the SIL level in a fairly unprincipled way.<br>&gt;&gt; <br>&gt;&gt; This was the case (long time ago). But now the SIL linkage is not affected by -sil-serialize-all, just the llvm linkage.<br>&gt;&gt; But maybe you are referring to another issue.<br>&gt; <br>&gt; Then I guess it’s the same issue the other way around: we don’t muck with the real linkage enough to make the symbols actually public. Again, being principled about what an inlinable function can and can’t refer to would help here.<br></p><p>Currently the rule is that a fragile function (= inlinable, AFAIK) cannot call a non-public non-fragile function. And with -sil-serialize-all all functions are set to fragile.<br>This is checked in the SILVerifier, which is of course not the right way to do the check (Slava told me he is going to make this a compiler warning instead, or something like this).<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; This is probably the underlying cause of whatever linking issues you&#39;re seeing, but even if it&#39;s not it would probably get in the way of trying to fix things.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; docs/AccessControlInStdlib.rst points to another, similar issue: &lt;rdar://problem/17631278 &lt;rdar://problem/17631278&gt;&gt; Figure out how inlined XREFs to private entities work. Our planned answer for this is that inlinable things can&#39;t reference private entities, only internal ones (and even then only those marked as &quot;versioned&quot;). That&#39;s a bit annoying, but does correspond with the notion that a versioned entity is an ABI promise, and the file you declare something in should never be part of the library&#39;s ABI. (There are other answers that could work here, of course.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fortunately those last issues are something we need to fix anyway as part of deciding which parts of the standard library should be resilient and which parts are fragile, so maybe we&#39;ll be in a good enough place to start allowing private decls again later this release.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161028/47a504ec/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>October 28, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 23, 2016, at 4:13 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt; <br>&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt; <br>&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt; <br>&gt; What do you think Jordan?<br>&gt; Michael<br></p><p>Hi Alexis,<br></p><p>You can build the stdlib without sil-serialize-all now by passing a flag to build-script:<br></p><p>./utils/build-script — --swift-stdlib-enable-resilience<br></p><p>Give that a shot and see if it fixes the issues you’re having with ‘private’.<br></p><p>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161028/7a2beb00/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b81089e81d6bb1e14b5adb746725de1?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Alexis</string> &lt;abeingessner at apple.com&gt;<p>October 28, 2016 at 07:00:00pm</p></header><div class="content"><p>Won&#39;t merging anything relying on this flag break the build? Is this going to become the &quot;new&quot; default soon?<br></p><p>&gt; On Oct 28, 2016, at 6:43 PM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Oct 23, 2016, at 4:13 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt;&gt; <br>&gt;&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt;&gt; <br>&gt;&gt; What do you think Jordan?<br>&gt;&gt; Michael<br>&gt; <br>&gt; Hi Alexis,<br>&gt; <br>&gt; You can build the stdlib without sil-serialize-all now by passing a flag to build-script:<br>&gt; <br>&gt; ./utils/build-script — --swift-stdlib-enable-resilience<br>&gt; <br>&gt; Give that a shot and see if it fixes the issues you’re having with ‘private’.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161028/a95daa11/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>October 28, 2016 at 09:00:00pm</p></header><div class="content"><p>It will become the default, but not yet, so yeah, you shouldn’t merge anything that only builds with this flag set.<br></p><p>Can you share the patch that adds private modifiers along with the linker errors you are seeing? Now would be a good time to sort out these issues.<br></p><p>&gt; On Oct 28, 2016, at 4:16 PM, Alexis Beingessner &lt;abeingessner at apple.com&gt; wrote:<br>&gt; <br>&gt; Won&#39;t merging anything relying on this flag break the build? Is this going to become the &quot;new&quot; default soon?<br>&gt; <br>&gt; On Oct 28, 2016, at 6:43 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 23, 2016, at 4:13 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you think Jordan?<br>&gt;&gt;&gt; Michael<br>&gt;&gt; <br>&gt;&gt; Hi Alexis,<br>&gt;&gt; <br>&gt;&gt; You can build the stdlib without sil-serialize-all now by passing a flag to build-script:<br>&gt;&gt; <br>&gt;&gt; ./utils/build-script — --swift-stdlib-enable-resilience<br>&gt;&gt; <br>&gt;&gt; Give that a shot and see if it fixes the issues you’re having with ‘private’.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161028/eaba17fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b81089e81d6bb1e14b5adb746725de1?s=50"></div><header><strong>Inability to leverage privacy in the stdlib</strong> from <string>Alexis</string> &lt;abeingessner at apple.com&gt;<p>October 29, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 29, 2016, at 12:13 AM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br>&gt; <br>&gt; It will become the default, but not yet, so yeah, you shouldn’t merge anything that only builds with this flag set.<br>&gt; <br>&gt; Can you share the patch that adds private modifiers along with the linker errors you are seeing? Now would be a good time to sort out these issues.<br></p><p>I’m actually having trouble reproducing this now? I just rebased my branches onto master and using private/fileprivate on types, aliases, and functions seems to work perfectly fine (I tried a few things in Array and Dictionary). Did something interesting just get merged?<br></p><p>&gt; <br>&gt;&gt; On Oct 28, 2016, at 4:16 PM, Alexis Beingessner &lt;abeingessner at apple.com &lt;mailto:abeingessner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Won&#39;t merging anything relying on this flag break the build? Is this going to become the &quot;new&quot; default soon?<br>&gt;&gt; <br>&gt;&gt; On Oct 28, 2016, at 6:43 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 23, 2016, at 4:13 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 23, 2016, at 3:30 PM, Alexis Beingessner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dave pointed out to me this week that the build crashes if the stdlib tries to use private/fileprivate. I tried it myself and lo and behold the linker can&#39;t find the private symbols. He couldn&#39;t recall what about the build caused that, though.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Can anyone recall why this is? How hard is it to fix?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am not 100% sure, but if it happens only with the stdlib and has to do with access control, I wouldn&#39;t be surprised if it has to do with -sil-serialize-all and friends. But I may be correct. I think Jordan is the right person to answer this question.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What do you think Jordan?<br>&gt;&gt;&gt;&gt; Michael<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Alexis,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can build the stdlib without sil-serialize-all now by passing a flag to build-script:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ./utils/build-script — --swift-stdlib-enable-resilience<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Give that a shot and see if it fixes the issues you’re having with ‘private’.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161029/490a8dcf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
