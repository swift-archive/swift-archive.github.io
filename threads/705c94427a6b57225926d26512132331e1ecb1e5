<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Swift 4] Cross-cutting concerns and patterns</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>July 30, 2016 at 01:00:00am</p></header><div class="content"><p>I am curious if we could find a way/place to talk about larger cross-cutting syntax issues that may inform the design of several proposals.  In other words, this might be a good time to explicitly look at the forest (vs. the trees) and brainstorm about the wider picture (which can later be referenced for more specific issues).<br></p><p>Here are a few examples of those types of concerns:<br></p><p>• How to order structures which aren’t defined together, without tightly coupling them.  This most obvious example of this are operators and order of operation, but there are other potential features which could draw on similar solutions.  For example, I proposed a feature a while back where we could have factory-style methods which were fully extensible, but it required a defined ordering of subclasses factory methods being called.  This may also affect the design of mix-ins and other advanced features.<br></p><p>• How to disambiguate which implementation is called when it is ambiguous.  Again, this will affect the design of mix-ins, but it may also allow things like calling a specific ancestor class’s implementation or calling the default implementation of a protocol from an implementor.  I believe &#39;structure.P::method’ and &#39;structure.method using P’ were two potential syntax ideas put forward.<br></p><p>• Renaming of an occurrence of something in a specific context.  This was talked about with regards to importing (and renaming certain methods within a file/module to avoid conflicts).  It also came up when talking about conflicting protocols.  For example, you might be able to say ‘var x:Int implements P.y’ to say that this declaration implements the protocol P’s requirement ‘var x:Int&#39; even though it has a different name.  <br></p><p>(and many more)<br></p><p><br>It makes sense to me to consider these very different use-cases together for at least a moment to see if any obvious general syntax shakes loose that wasn’t apparent when considering each separate use-case/proposal in isolation.  I also think there are probably issues where we might say “this syntax is unprecedented in Swift… but we have 10 very different use-cases that it makes sense for, so let’s bring it in”.<br></p><p>In general, I think it would provide better guide posts for proposals (as things like the generics manifesto have).<br></p><p>Thoughts?  What is the best approach to figure out what these cross-cutting concerns might be?<br></p><p>Thanks,<br>Jon<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
