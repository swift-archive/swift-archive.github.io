<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Subsequences and shared indices</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>October 14, 2016 at 02:00:00am</p></header><div class="content"><p>Is it a requirement that collections share indices with its subsequence? Array and ArraySlice do share indices, which is why ArraySlice isn’t zero-based, and I think this is convenient. But String.CharacterView doesn’t seem to share indices with its subsequence (which is String.CharacterView as well). Consider this example:<br></p><p>let foo = &quot;foobar&quot;.characters<br></p><p>let index = foo.index(foo.startIndex, offsetBy: 3)<br>let bar = foo.suffix(from: index)                   // &quot;bar&quot;<br></p><p>foo[index]                                          // &quot;b&quot; :)<br>foo[bar.startIndex]                                 // &quot;f&quot; :(<br></p><p>So does this mean that we can’t assume that collections and their subsequences share their indices (which could be very handy),  or is this just a bug related to String.CharacterView?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161014/b7418797/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Subsequences and shared indices</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 13, 2016 at 05:00:00pm</p></header><div class="content"><p>This is a bug reported multiple times in different forms. My version of it is: SR-1487 &lt;https://bugs.swift.org/browse/SR-1487&gt;. <br></p><p>It remains open because it is not easy to fix with the existing design of String. Apparently core standard library team are working on an overhaul of String to address this and other usability and performance issues.<br></p><p>&gt; On Oct 13, 2016, at 5:12 PM, Tim Vermeulen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is it a requirement that collections share indices with its subsequence? Array and ArraySlice do share indices, which is why ArraySlice isn’t zero-based, and I think this is convenient. But String.CharacterView doesn’t seem to share indices with its subsequence (which is String.CharacterView as well). Consider this example:<br>&gt; <br>&gt; let foo = &quot;foobar&quot;.characters<br>&gt; <br>&gt; let index = foo.index(foo.startIndex, offsetBy: 3)<br>&gt; let bar = foo.suffix(from: index)                   // &quot;bar&quot;<br>&gt; <br>&gt; foo[index]                                          // &quot;b&quot; :)<br>&gt; foo[bar.startIndex]                                 // &quot;f&quot; :(<br>&gt; <br>&gt; So does this mean that we can’t assume that collections and their subsequences share their indices (which could be very handy),  or is this just a bug related to String.CharacterView?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/db6ea04d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Subsequences and shared indices</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>October 14, 2016 at 02:00:00am</p></header><div class="content"><p>Alright. Does this mean that we can otherwise assume that collections share indices with their subsequences? It might be worth documenting, one way or the other.<br></p><p>&gt; On 14 Oct 2016, at 02:40, Hooman Mehr &lt;hooman at mac.com&gt; wrote:<br>&gt; <br>&gt; This is a bug reported multiple times in different forms. My version of it is: SR-1487 &lt;https://bugs.swift.org/browse/SR-1487&gt;. <br>&gt; <br>&gt; It remains open because it is not easy to fix with the existing design of String. Apparently core standard library team are working on an overhaul of String to address this and other usability and performance issues.<br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 5:12 PM, Tim Vermeulen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is it a requirement that collections share indices with its subsequence? Array and ArraySlice do share indices, which is why ArraySlice isn’t zero-based, and I think this is convenient. But String.CharacterView doesn’t seem to share indices with its subsequence (which is String.CharacterView as well). Consider this example:<br>&gt;&gt; <br>&gt;&gt; let foo = &quot;foobar&quot;.characters<br>&gt;&gt; <br>&gt;&gt; let index = foo.index(foo.startIndex, offsetBy: 3)<br>&gt;&gt; let bar = foo.suffix(from: index)                   // &quot;bar&quot;<br>&gt;&gt; <br>&gt;&gt; foo[index]                                          // &quot;b&quot; :)<br>&gt;&gt; foo[bar.startIndex]                                 // &quot;f&quot; :(<br>&gt;&gt; <br>&gt;&gt; So does this mean that we can’t assume that collections and their subsequences share their indices (which could be very handy),  or is this just a bug related to String.CharacterView?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161014/51f7ce8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Subsequences and shared indices</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 13, 2016 at 07:00:00pm</p></header><div class="content"><p>`Slice` family of types (there are many) are well documented to share the indices and inherit the semantics. All collections that have a SubSequence of a Slice type, share indices. Unfortunately, standard library is not well documented in general and collection API have undergone big changes in Swift 3.0, so this may not be very clear now. <br></p><p>The problem with `String.CharacterView` is that its SubSequence is not a `Slice` type.<br></p><p>Try this out:<br></p><p>let subSeq1 = &quot;abc&quot;.characters.prefix(1)<br>let subSeq2 = Array(&quot;abc&quot;.characters).prefix(1)<br></p><p>print(type(of:subSeq1)) // prints CharacterView<br>print(type(of:subSeq2)) // prints ArraySlice&lt;Character&gt;<br></p><p>Converting `String.CharacterView` to Array&lt;Character&gt; is an expensive operation and will kill the performance of string manipulation, but will work as you expect, since Array is properly sliced.<br></p><p>&gt; On Oct 13, 2016, at 5:42 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt; Alright. Does this mean that we can otherwise assume that collections share indices with their subsequences? It might be worth documenting, one way or the other.<br>&gt; <br>&gt;&gt; On 14 Oct 2016, at 02:40, Hooman Mehr &lt;hooman at mac.com &lt;mailto:hooman at mac.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is a bug reported multiple times in different forms. My version of it is: SR-1487 &lt;https://bugs.swift.org/browse/SR-1487&gt;. <br>&gt;&gt; <br>&gt;&gt; It remains open because it is not easy to fix with the existing design of String. Apparently core standard library team are working on an overhaul of String to address this and other usability and performance issues.<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 13, 2016, at 5:12 PM, Tim Vermeulen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is it a requirement that collections share indices with its subsequence? Array and ArraySlice do share indices, which is why ArraySlice isn’t zero-based, and I think this is convenient. But String.CharacterView doesn’t seem to share indices with its subsequence (which is String.CharacterView as well). Consider this example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let foo = &quot;foobar&quot;.characters<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let index = foo.index(foo.startIndex, offsetBy: 3)<br>&gt;&gt;&gt; let bar = foo.suffix(from: index)                   // &quot;bar&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; foo[index]                                          // &quot;b&quot; :)<br>&gt;&gt;&gt; foo[bar.startIndex]                                 // &quot;f&quot; :(<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So does this mean that we can’t assume that collections and their subsequences share their indices (which could be very handy),  or is this just a bug related to String.CharacterView?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/f6f14d4c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
