<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sun Jan 31 2016, Howard Lovatt &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I would suggest two language changes that embrace argument labels as the<br>&gt; norm in Swift:<br>&gt;<br>&gt;   1. All arguments, functions and initialisers, to be labelled as the<br>&gt; default in the language, i.e. no special first argument that is<br>&gt; unlabelled.<br>&gt;   2. An argument with a default value may be called by specifying the<br>&gt; label with no value as well as omitting the value as well as<br>&gt; specifying the value, e.g. in `Array` the drop methods could be `func<br>&gt; drop(first n: Int = 1)` and `func drop(last n: Int = 1)` and could be<br>&gt; called `array.drop(first:)` and `array.drop(last:)` and `array.drop()`<br>&gt; would be an ambiguity error. Thus two functions replace four in<br>&gt; `Array`.<br>&gt;<br>&gt; With these two changes the guidelines could be:<br>&gt;<br>&gt;      &quot;All arguments are labelled, e.g. `moveTo(x: 1.0, y: 0.5)`; unless the<br>&gt; arguments are truely interchangeable and no further clarification is<br>&gt; required, e.g. `max(x1, x2)`. The degenerate case of the exception is<br>&gt; functions with one argument; in which case if no further clarification is<br>&gt; required then no label is required, e.g. `sort(&lt;)`. Clarification via an<br>&gt; argument label is required if the call reads better, e.g.<br>&gt; `array.removeAll(keepCapacity: true)`, or because it is clearer in the case<br>&gt; of overloads, e.g. `array.append(x)` and `array.append(contentsOf:<br>&gt; x)`.&quot;<br></p><p><br>These are neat ideas, but again, we&#39;re not reviewing core language<br>changes in this thread.<br></p><p>&gt; On 1 February 2016 at 10:08, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Sun Jan 31 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;&gt; On Jan 29, 2016, at 10:29 AM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Differentiate related calls whose implementations are distinguished<br>&gt;&gt; &gt;&gt; by their parameters, as you would with initializers, using first<br>&gt;&gt; &gt;&gt; parameter labels.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; …<br>&gt;&gt; &gt;&gt; Prefer external names for the first parameter when the natural<br>&gt;&gt; &gt;&gt; semantic relationship between the parameters is stronger than their<br>&gt;&gt; &gt;&gt; relation to the operation.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; For example, the following calls use labels for the first parameter:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     login(userName: &quot;blah&quot;, password: &quot;...&quot;)<br>&gt;&gt; &gt;&gt;     moveTo(x: 50.0, y: 30.0)<br>&gt;&gt; &gt;&gt;     constructColor(red: 0.2, green: 0.3, blue: 0.1)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This example is contrary to Swift&#39;s normal naming scheme which<br>&gt;&gt; &gt;&gt; integrates the first argument into the function or method name, for<br>&gt;&gt; &gt;&gt; example:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     loginWithUserName(&quot;blah&quot;, password: &quot;...&quot;)<br>&gt;&gt; &gt;&gt;     moveToX(50.0, y: 30.0)<br>&gt;&gt; &gt;&gt;     constructColorWithRed(0.2, green: 0.3, blue: 0.1)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The relationships between (x, y), (username, password), and (red,<br>&gt;&gt; &gt;&gt; green, blue) are strong enough to allow you to make a judgement call<br>&gt;&gt; &gt;&gt; to employ an external label.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; An anecdote in support of Erica’s thinking in the ongoing Battle of the<br>&gt;&gt; First Argument Labels:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I mentioned the ongoing swift-evolution debates to Bret Jackson, one<br>&gt;&gt; &gt; of my Macalester colleagues — awesome developer, 3D / VR / HCI<br>&gt;&gt; &gt; researcher, tons of C++ experience, never seen Swift before — and<br>&gt;&gt; &gt; typed out this example for him:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       moveTo(1.0, y: 0.5)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; …and then this (he nods approvingly):<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       moveTo(x: 1.0, y: 0.5)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; …and then this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       moveToX(1.0, y: 0.5)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; …at which point, before I’d even finished typing it out, he physically<br>&gt;&gt; &gt; recoiled in revulsion, threw hand up in front of his face, and let out<br>&gt;&gt; &gt; a pained “oh please no!!” I wish I had video of him squirming in his<br>&gt;&gt; &gt; chair. It was something to behold.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Thus my N=1 study of Swift newcomers concludes that “moveToX” is<br>&gt;&gt; horrifying.<br>&gt;&gt;<br>&gt;&gt; a. I agree; it&#39;s not me you need to convince.<br>&gt;&gt;<br>&gt;&gt; b. The guidelines working group is reluctant to add special-case<br>&gt;&gt;    guidelines.  It would be better to have one guideline that works for<br>&gt;&gt;    all the cases where first arguments should have a label, including<br>&gt;&gt;    those that have only one argument.  For example, “first arguments<br>&gt;&gt;    that are not direct objects should be labeled when it doesn&#39;t merely<br>&gt;&gt;    repeat type information.”<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
