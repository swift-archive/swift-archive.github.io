<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 13, 2016 at 03:00:00am</p></header><div class="content"><p>It would seem to me that common crypto routines should become part of the core Swift libraries without having to rely on unknown third party libraries or bridging into the C based CommonCrypto lib. <br></p><p>Just some things off the top of my head that we should be able to do easily in pure Swift is AES encryption, digests such as HMAC SHA1, dealing with certificates and keys, support for other encryption algorithms such as RSA. <br></p><p>Am I completely off base for wanting this? These features exist in other languages such as Java and C#. <br></p><p>Thank you,<br></p><p>Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 08:00:00am</p></header><div class="content"><p>+1, totally agree with this. Сrypto routines are very important part of <br>code (when they are used in application). So I believe we need standard, <br>well-tested and supported by Swift team crypto libraries we can rely on.<br></p><p>It is ok to rely on 3rd party libraries in other areas, but IMO it is <br>crucial to have &quot;built-in&quot; crypto functions in standard library(s).<br>Probably not &quot;full set&quot; of algorithms, features, etc but believe that <br>standard base algorithms/features (like MD5/SHA/AES/RSA) must be available.<br></p><p>Is there some information regarding crypto functions for Swift 3.0?<br></p><p>On 13.04.2016 6:45, Travis Beech via swift-evolution wrote:<br>&gt; It would seem to me that common crypto routines should become part of the core Swift libraries without having to rely on unknown third party libraries or bridging into the C based CommonCrypto lib.<br>&gt;<br>&gt; Just some things off the top of my head that we should be able to do easily in pure Swift is AES encryption, digests such as HMAC SHA1, dealing with certificates and keys, support for other encryption algorithms such as RSA.<br>&gt;<br>&gt; Am I completely off base for wanting this? These features exist in other languages such as Java and C#.<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 12, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; It would seem to me that common crypto routines should become part of the core Swift libraries without having to rely on unknown third party libraries or bridging into the C based CommonCrypto lib. <br></p><p>This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version, but I strongly suspect it&#39;ll be considered out of scope for Swift 3.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 09:00:00am</p></header><div class="content"><p>I believe we already have a number of community-developed crypto libs for <br>Swift, the problem is not in the lib itself. The problem, as I see it, is <br>in one _choosen_ (and so, well-tested and supported by main team) that will <br>be brought into Swift. Yes, also don&#39;t think Swift team should create such <br>a new crypto lib from zero, some well-known lib imo will be better solution.<br>The question is - are there any plans in Swift team to provide &quot;built-in&quot; <br>crypto libs for Swift 3.0+ ?<br></p><p>On 13.04.2016 9:06, Brent Royal-Gordon via swift-evolution wrote:<br>&gt;&gt; It would seem to me that common crypto routines should become part of the core Swift libraries without having to rely on unknown third party libraries or bridging into the C based CommonCrypto lib.<br>&gt;<br>&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version, but I strongly suspect it&#39;ll be considered out of scope for Swift 3.<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 13, 2016 at 03:00:00pm</p></header><div class="content"><p>With the focus these days on writing secure applications it seems building this functionality into the language would be pretty high on the list. These are common API&#39;s found in modern languages and it would be nice to not have to use hackish techniques like bridging into CommonCrypto to achieve this. <br></p><p>Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>On Apr 12, 2016, at 11:06 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; It would seem to me that common crypto routines should become part of the core Swift libraries without having to rely on unknown third party libraries or bridging into the C based CommonCrypto lib.<br>&gt; <br>&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version, but I strongly suspect it&#39;ll be considered out of scope for Swift 3.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>April 13, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>So what are developers doing then to make sure their apps are secure? Are they just not adopting Swift, or just relying on the bridging of CommonCrypto to fill the gaps?<br></p><p>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p><br></p><p><br></p><p><br></p><p><br>On 4/13/16, 9:16 AM, &quot;Tino Heth&quot; &lt;2th at gmx.de&gt; wrote:<br></p><p>&gt;&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>&gt;true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>&gt;Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>April 13, 2016 at 01:00:00pm</p></header><div class="content"><p>I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br></p><p>I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality. <br></p><p>-DW<br></p><p>&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>&gt; true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>&gt; _______________________________________________<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/9b8073e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 14, 2016 at 02:00:00am</p></header><div class="content"><p>So what would it take to get a standard set of crypto API&#39;s built into the language?<br></p><p>Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br></p><p>I don&#39;t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br></p><p>I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality.<br></p><p>-DW<br></p><p>On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>true - but sadly, there seems to be either no interest or manpower for a boost-like infrastructure...<br>Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>_______________________________________________<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/3f7c52eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>April 14, 2016 at 02:00:00pm</p></header><div class="content"><p>Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br></p><p>&gt; On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; So what would it take to get a standard set of crypto API&#39;s built into the language?<br>&gt; <br>&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt; <br>&gt; On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br>&gt;&gt; <br>&gt;&gt; I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality. <br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>&gt;&gt;&gt; true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>&gt;&gt;&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/80d5f998/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 14, 2016 at 09:00:00pm</p></header><div class="content"><p>Core libraries would be a great place, I just think this is a huge oversight in the language itself. I don’t think libraries found out on Github should be trusted, I think crypto should be done in an organized effort to ensure that the implementations are proper.<br></p><p>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>From: &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt;<br>Date: Thursday, April 14, 2016 at 2:33 PM<br>To: Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>Cc: David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Crypto routines as part of the core library<br></p><p>Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev&lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br></p><p>On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>So what would it take to get a standard set of crypto API&#39;s built into the language?<br></p><p>Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br></p><p>I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br></p><p>I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality.<br></p><p>-DW<br></p><p>On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>_______________________________________________<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/2449038e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>April 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt; wrote:<br>&gt; <br>&gt; Core libraries would be a great place, I just think this is a huge oversight in the language itself. I don’t think libraries found out on Github should be trusted, I think crypto should be done in an organized effort to ensure that the implementations are proper.<br>&gt; <br></p><p><br>That sounds like a contradiction. “Core libraries would be a great place” and “this is a huge oversight in the language itself”. Could you describe what language-level functionality would be needed here that can’t be adequately addressed by the core libraries? Do you know of any major programming language with language level features for crypto support, as opposed to solving it through a library?<br></p><p>&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt; <br>&gt; From: &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt;<br>&gt; Date: Thursday, April 14, 2016 at 2:33 PM<br>&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>&gt; Cc: David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt; <br>&gt; Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br>&gt; <br>&gt;&gt; On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So what would it take to get a standard set of crypto API&#39;s built into the language?<br>&gt;&gt; <br>&gt;&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -DW<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>&gt;&gt;&gt;&gt; true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>&gt;&gt;&gt;&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/4abc385c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 14, 2016 at 09:00:00pm</p></header><div class="content"><p>It should be provided by Swift, not some unknown developer out on Github, no matter how good his\her credentials are. I see core libraries as part of the language runtime. If you look at other modern languages such as Java, crypto is there out of the box, you don’t have to do anything extra to get support. No extra jars to download, etc. and that’s how it should be with Swift.<br></p><p>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>From: &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt;<br>Date: Thursday, April 14, 2016 at 2:38 PM<br>To: Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>Cc: David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Crypto routines as part of the core library<br></p><p><br>On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt; wrote:<br></p><p>Core libraries would be a great place, I just think this is a huge oversight in the language itself. I don’t think libraries found out on Github should be trusted, I think crypto should be done in an organized effort to ensure that the implementations are proper.<br></p><p><br></p><p>That sounds like a contradiction. “Core libraries would be a great place” and “this is a huge oversight in the language itself”. Could you describe what language-level functionality would be needed here that can’t be adequately addressed by the core libraries? Do you know of any major programming language with language level features for crypto support, as opposed to solving it through a library?<br></p><p>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>From: &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt;<br>Date: Thursday, April 14, 2016 at 2:33 PM<br>To: Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>Cc: David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Crypto routines as part of the core library<br></p><p>Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev&lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br></p><p>On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>So what would it take to get a standard set of crypto API&#39;s built into the language?<br></p><p>Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br></p><p>I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br></p><p>I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality.<br></p><p>-DW<br></p><p>On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>_______________________________________________<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/a79d6be9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>April 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 2:42 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt; wrote:<br>&gt; <br>&gt; It should be provided by Swift, not some unknown developer out on Github, no matter how good his\her credentials are. I see core libraries as part of the language runtime. If you look at other modern languages such as Java, crypto is there out of the box, you don’t have to do anything extra to get support. No extra jars to download, etc. and that’s how it should be with Swift.<br>&gt; <br></p><p>Ah, I think we have a problem with our definition of terms. When I say “language feature” I’m referring to syntax, semantics, and other compiler enhancements that may be necessary. What you’re describing can be solved entirely in the core libraries without direct language or compiler changes. In the case of Java, there is no *language* support, but there library support in the standard included libraries. That is, there is no special syntax or compiler changes to support this, just bundled Java code. This is in contrast to, e.g. regular expressions in scripting language like perl or ruby, where there is actual syntax and semantics that make using them easier, as opposed to other languages that just have them in libraries.<br></p><p>I think having an official sanctioned, Swift-provided (via the core libraries) crypto library makes sense, but again I’m not familiar with the core libraries. Please also ask on swift-corelibs-dev, as they might know better if there’s already efforts underway.<br></p><p><br>&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt; <br>&gt; From: &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt;<br>&gt; Date: Thursday, April 14, 2016 at 2:38 PM<br>&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>&gt; Cc: David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Core libraries would be a great place, I just think this is a huge oversight in the language itself. I don’t think libraries found out on Github should be trusted, I think crypto should be done in an organized effort to ensure that the implementations are proper.<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; That sounds like a contradiction. “Core libraries would be a great place” and “this is a huge oversight in the language itself”. Could you describe what language-level functionality would be needed here that can’t be adequately addressed by the core libraries? Do you know of any major programming language with language level features for crypto support, as opposed to solving it through a library?<br>&gt; <br>&gt;&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; From: &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt;<br>&gt;&gt; Date: Thursday, April 14, 2016 at 2:33 PM<br>&gt;&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>&gt;&gt; Cc: David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;&gt; <br>&gt;&gt; Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So what would it take to get a standard set of crypto API&#39;s built into the language?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>&gt;&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -DW<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>&gt;&gt;&gt;&gt;&gt; true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>&gt;&gt;&gt;&gt;&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/2d03c90e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6484714d340af91813539b51926b50fd?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Travis Beech</string> &lt;tbeech at unwiredrevolution.com&gt;<p>April 14, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks Michael for the input. I realized that after your last response I was indeed mixing terms. I will post up on the swift-corelibs-dev list.<br></p><p>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>From: &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt;<br>Date: Thursday, April 14, 2016 at 2:49 PM<br>To: Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>Cc: David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Crypto routines as part of the core library<br></p><p><br>On Apr 14, 2016, at 2:42 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt; wrote:<br></p><p>It should be provided by Swift, not some unknown developer out on Github, no matter how good his\her credentials are. I see core libraries as part of the language runtime. If you look at other modern languages such as Java, crypto is there out of the box, you don’t have to do anything extra to get support. No extra jars to download, etc. and that’s how it should be with Swift.<br></p><p><br>Ah, I think we have a problem with our definition of terms. When I say “language feature” I’m referring to syntax, semantics, and other compiler enhancements that may be necessary. What you’re describing can be solved entirely in the core libraries without direct language or compiler changes. In the case of Java, there is no *language* support, but there library support in the standard included libraries. That is, there is no special syntax or compiler changes to support this, just bundled Java code. This is in contrast to, e.g. regular expressions in scripting language like perl or ruby, where there is actual syntax and semantics that make using them easier, as opposed to other languages that just have them in libraries.<br></p><p>I think having an official sanctioned, Swift-provided (via the core libraries) crypto library makes sense, but again I’m not familiar with the core libraries. Please also ask on swift-corelibs-dev, as they might know better if there’s already efforts underway.<br></p><p><br>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>From: &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt;<br>Date: Thursday, April 14, 2016 at 2:38 PM<br>To: Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>Cc: David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Crypto routines as part of the core library<br></p><p><br>On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt; wrote:<br></p><p>Core libraries would be a great place, I just think this is a huge oversight in the language itself. I don’t think libraries found out on Github should be trusted, I think crypto should be done in an organized effort to ensure that the implementations are proper.<br></p><p><br></p><p>That sounds like a contradiction. “Core libraries would be a great place” and “this is a huge oversight in the language itself”. Could you describe what language-level functionality would be needed here that can’t be adequately addressed by the core libraries? Do you know of any major programming language with language level features for crypto support, as opposed to solving it through a library?<br></p><p>Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>From: &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&lt;mailto:milseman at apple.com&gt;&gt;<br>Date: Thursday, April 14, 2016 at 2:33 PM<br>To: Travis Beech &lt;tbeech at unwiredrevolution.com&lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>Cc: David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;<br>Subject: Re: [swift-evolution] Crypto routines as part of the core library<br></p><p>Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev&lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br></p><p>On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>So what would it take to get a standard set of crypto API&#39;s built into the language?<br></p><p>Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>Optimizing Operations for Mobile and Distributed Systems<br></p><p>On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com&lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br></p><p>I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br></p><p>I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality.<br></p><p>-DW<br></p><p>On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>_______________________________________________<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/f2180dee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>April 14, 2016 at 02:00:00pm</p></header><div class="content"><p>Great! I will watch that thread as it’s something I’m also interested in knowing more about. Thanks for bringing it up!<br></p><p>&gt; On Apr 14, 2016, at 2:51 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt; wrote:<br>&gt; <br>&gt; Thanks Michael for the input. I realized that after your last response I was indeed mixing terms. I will post up on the swift-corelibs-dev list.<br>&gt; <br>&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt; <br>&gt; From: &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt;<br>&gt; Date: Thursday, April 14, 2016 at 2:49 PM<br>&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>&gt; Cc: David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 14, 2016, at 2:42 PM, Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It should be provided by Swift, not some unknown developer out on Github, no matter how good his\her credentials are. I see core libraries as part of the language runtime. If you look at other modern languages such as Java, crypto is there out of the box, you don’t have to do anything extra to get support. No extra jars to download, etc. and that’s how it should be with Swift.<br>&gt;&gt; <br>&gt; <br>&gt; Ah, I think we have a problem with our definition of terms. When I say “language feature” I’m referring to syntax, semantics, and other compiler enhancements that may be necessary. What you’re describing can be solved entirely in the core libraries without direct language or compiler changes. In the case of Java, there is no *language* support, but there library support in the standard included libraries. That is, there is no special syntax or compiler changes to support this, just bundled Java code. This is in contrast to, e.g. regular expressions in scripting language like perl or ruby, where there is actual syntax and semantics that make using them easier, as opposed to other languages that just have them in libraries.<br>&gt; <br>&gt; I think having an official sanctioned, Swift-provided (via the core libraries) crypto library makes sense, but again I’m not familiar with the core libraries. Please also ask on swift-corelibs-dev, as they might know better if there’s already efforts underway.<br>&gt; <br>&gt; <br>&gt;&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; From: &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt;<br>&gt;&gt; Date: Thursday, April 14, 2016 at 2:38 PM<br>&gt;&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>&gt;&gt; Cc: David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Core libraries would be a great place, I just think this is a huge oversight in the language itself. I don’t think libraries found out on Github should be trusted, I think crypto should be done in an organized effort to ensure that the implementations are proper.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That sounds like a contradiction. “Core libraries would be a great place” and “this is a huge oversight in the language itself”. Could you describe what language-level functionality would be needed here that can’t be adequately addressed by the core libraries? Do you know of any major programming language with language level features for crypto support, as opposed to solving it through a library?<br>&gt;&gt; <br>&gt;&gt;&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209) 535-5357<br>&gt;&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From: &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt; on behalf of Michael Ilseman &lt;milseman at apple.com &lt;mailto:milseman at apple.com&gt;&gt;<br>&gt;&gt;&gt; Date: Thursday, April 14, 2016 at 2:33 PM<br>&gt;&gt;&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com &lt;mailto:tbeech at unwiredrevolution.com&gt;&gt;<br>&gt;&gt;&gt; Cc: David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt;, &quot;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why would it need to be built into the language proper instead of the core libraries? I am not too familiar with the core libraries, but perhaps swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt; is the more appropriate mailing list here?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So what would it take to get a standard set of crypto API&#39;s built into the language?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209) 535-5357<br>&gt;&gt;&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t know if we need a boost-like parent project in order to start building core code to be brought for inclusion.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think success will naturally bring such a project structure - people seeking a curated and integrated set of frameworks to get common functionality. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -DW<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This seems like a great candidate for a library that could be developed in the community and then possibly brought into Corelibs in a future version<br>&gt;&gt;&gt;&gt;&gt;&gt; true — but sadly, there seems to be either no interest or manpower for a boost-like infrastructure…<br>&gt;&gt;&gt;&gt;&gt;&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the stdlib, but none the less, there should be a standard library for encryption/hashing.<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/f9f6020a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d82ae2358637a4680638eb4218c1e64a?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>hitstergtd+swiftevo at gmail.com</string> &lt;hitstergtd+swiftevo at gmail.com&gt;<p>April 14, 2016 at 11:00:00pm</p></header><div class="content"><p>Travis / Michael,<br></p><p>+1 on built-in support for Crypto libraries in swift-corelibs.<br></p><p><br></p><p>On 14 April 2016 at 22:52, Michael Ilseman via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Great! I will watch that thread as it’s something I’m also interested in<br>&gt; knowing more about. Thanks for bringing it up!<br>&gt;<br>&gt; On Apr 14, 2016, at 2:51 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Thanks Michael for the input. I realized that after your last response I was<br>&gt; indeed mixing terms. I will post up on the swift-corelibs-dev list.<br>&gt;<br>&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209)<br>&gt; 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;<br>&gt; From: &lt;milseman at apple.com&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&gt;<br>&gt; Date: Thursday, April 14, 2016 at 2:49 PM<br>&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt; Cc: David Waite &lt;david at alkaline-solutions.com&gt;, &quot;swift-evolution at swift.org&quot;<br>&gt; &lt;swift-evolution at swift.org&gt;<br>&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;<br>&gt;<br>&gt; On Apr 14, 2016, at 2:42 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; It should be provided by Swift, not some unknown developer out on Github, no<br>&gt; matter how good his\her credentials are. I see core libraries as part of the<br>&gt; language runtime. If you look at other modern languages such as Java, crypto<br>&gt; is there out of the box, you don’t have to do anything extra to get support.<br>&gt; No extra jars to download, etc. and that’s how it should be with Swift.<br>&gt;<br>&gt;<br>&gt; Ah, I think we have a problem with our definition of terms. When I say<br>&gt; “language feature” I’m referring to syntax, semantics, and other compiler<br>&gt; enhancements that may be necessary. What you’re describing can be solved<br>&gt; entirely in the core libraries without direct language or compiler changes.<br>&gt; In the case of Java, there is no *language* support, but there library<br>&gt; support in the standard included libraries. That is, there is no special<br>&gt; syntax or compiler changes to support this, just bundled Java code. This is<br>&gt; in contrast to, e.g. regular expressions in scripting language like perl or<br>&gt; ruby, where there is actual syntax and semantics that make using them<br>&gt; easier, as opposed to other languages that just have them in libraries.<br>&gt;<br>&gt; I think having an official sanctioned, Swift-provided (via the core<br>&gt; libraries) crypto library makes sense, but again I’m not familiar with the<br>&gt; core libraries. Please also ask on swift-corelibs-dev, as they might know<br>&gt; better if there’s already efforts underway.<br>&gt;<br>&gt;<br>&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209)<br>&gt; 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;<br>&gt; From: &lt;milseman at apple.com&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&gt;<br>&gt; Date: Thursday, April 14, 2016 at 2:38 PM<br>&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt; Cc: David Waite &lt;david at alkaline-solutions.com&gt;, &quot;swift-evolution at swift.org&quot;<br>&gt; &lt;swift-evolution at swift.org&gt;<br>&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;<br>&gt;<br>&gt; On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Core libraries would be a great place, I just think this is a huge oversight<br>&gt; in the language itself. I don’t think libraries found out on Github should<br>&gt; be trusted, I think crypto should be done in an organized effort to ensure<br>&gt; that the implementations are proper.<br>&gt;<br>&gt;<br>&gt;<br>&gt; That sounds like a contradiction. “Core libraries would be a great place”<br>&gt; and “this is a huge oversight in the language itself”. Could you describe<br>&gt; what language-level functionality would be needed here that can’t be<br>&gt; adequately addressed by the core libraries? Do you know of any major<br>&gt; programming language with language level features for crypto support, as<br>&gt; opposed to solving it through a library?<br>&gt;<br>&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209)<br>&gt; 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;<br>&gt; From: &lt;milseman at apple.com&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&gt;<br>&gt; Date: Thursday, April 14, 2016 at 2:33 PM<br>&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt; Cc: David Waite &lt;david at alkaline-solutions.com&gt;, &quot;swift-evolution at swift.org&quot;<br>&gt; &lt;swift-evolution at swift.org&gt;<br>&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;<br>&gt; Why would it need to be built into the language proper instead of the core<br>&gt; libraries? I am not too familiar with the core libraries, but perhaps<br>&gt; swift-corelibs-dev is the more appropriate mailing list here?<br>&gt;<br>&gt; On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; So what would it take to get a standard set of crypto API&#39;s built into the<br>&gt; language?<br>&gt;<br>&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209)<br>&gt; 535-5357<br>&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;<br>&gt; On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I don’t know if we need a boost-like parent project in order to start<br>&gt; building core code to be brought for inclusion.<br>&gt;<br>&gt; I think success will naturally bring such a project structure - people<br>&gt; seeking a curated and integrated set of frameworks to get common<br>&gt; functionality.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; This seems like a great candidate for a library that could be developed in<br>&gt; the community and then possibly brought into Corelibs in a future version<br>&gt;<br>&gt; true — but sadly, there seems to be either no interest or manpower for a<br>&gt; boost-like infrastructure…<br>&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the<br>&gt; stdlib, but none the less, there should be a standard library for<br>&gt; encryption/hashing.<br>&gt; _______________________________________________<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Crypto routines as part of the core library</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>April 15, 2016 at 08:00:00am</p></header><div class="content"><p>+1 from me also.  <br></p><p>I really want to see the community converge on a set of &quot;official&quot; Swifty libraries / modules for everything that is widely used.  This doesn&#39;t necessarily *need* to be stdlib or corelibs but those are all we have at the moment.  <br></p><p>While their design leaves something to be desired in many cases, the &quot;batteries included&quot; approach of Java and .NET is one thing they got right.  I don&#39;t know Go, from what I have heard this also has a lot to do with the popularity of Go (among other things of course).<br></p><p>If there is an &quot;official&quot; library maintained by the community it saves us all a bunch of time - time spent either writing out own or evaluating libraries written by others.  It also provides the best guarantee of future maintenance we can hope to have.<br></p><p>Matthew<br></p><p>Sent from my iPad<br></p><p>&gt; On Apr 14, 2016, at 5:26 PM, hitstergtd+swiftevo--- via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Travis / Michael,<br>&gt; <br>&gt; +1 on built-in support for Crypto libraries in swift-corelibs.<br>&gt; <br>&gt; <br>&gt; <br>&gt; On 14 April 2016 at 22:52, Michael Ilseman via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Great! I will watch that thread as it’s something I’m also interested in<br>&gt;&gt; knowing more about. Thanks for bringing it up!<br>&gt;&gt; <br>&gt;&gt; On Apr 14, 2016, at 2:51 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Michael for the input. I realized that after your last response I was<br>&gt;&gt; indeed mixing terms. I will post up on the swift-corelibs-dev list.<br>&gt;&gt; <br>&gt;&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209)<br>&gt;&gt; 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; From: &lt;milseman at apple.com&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&gt;<br>&gt;&gt; Date: Thursday, April 14, 2016 at 2:49 PM<br>&gt;&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt;&gt; Cc: David Waite &lt;david at alkaline-solutions.com&gt;, &quot;swift-evolution at swift.org&quot;<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 14, 2016, at 2:42 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It should be provided by Swift, not some unknown developer out on Github, no<br>&gt;&gt; matter how good his\her credentials are. I see core libraries as part of the<br>&gt;&gt; language runtime. If you look at other modern languages such as Java, crypto<br>&gt;&gt; is there out of the box, you don’t have to do anything extra to get support.<br>&gt;&gt; No extra jars to download, etc. and that’s how it should be with Swift.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Ah, I think we have a problem with our definition of terms. When I say<br>&gt;&gt; “language feature” I’m referring to syntax, semantics, and other compiler<br>&gt;&gt; enhancements that may be necessary. What you’re describing can be solved<br>&gt;&gt; entirely in the core libraries without direct language or compiler changes.<br>&gt;&gt; In the case of Java, there is no *language* support, but there library<br>&gt;&gt; support in the standard included libraries. That is, there is no special<br>&gt;&gt; syntax or compiler changes to support this, just bundled Java code. This is<br>&gt;&gt; in contrast to, e.g. regular expressions in scripting language like perl or<br>&gt;&gt; ruby, where there is actual syntax and semantics that make using them<br>&gt;&gt; easier, as opposed to other languages that just have them in libraries.<br>&gt;&gt; <br>&gt;&gt; I think having an official sanctioned, Swift-provided (via the core<br>&gt;&gt; libraries) crypto library makes sense, but again I’m not familiar with the<br>&gt;&gt; core libraries. Please also ask on swift-corelibs-dev, as they might know<br>&gt;&gt; better if there’s already efforts underway.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209)<br>&gt;&gt; 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; From: &lt;milseman at apple.com&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&gt;<br>&gt;&gt; Date: Thursday, April 14, 2016 at 2:38 PM<br>&gt;&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt;&gt; Cc: David Waite &lt;david at alkaline-solutions.com&gt;, &quot;swift-evolution at swift.org&quot;<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 14, 2016, at 2:36 PM, Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Core libraries would be a great place, I just think this is a huge oversight<br>&gt;&gt; in the language itself. I don’t think libraries found out on Github should<br>&gt;&gt; be trusted, I think crypto should be done in an organized effort to ensure<br>&gt;&gt; that the implementations are proper.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That sounds like a contradiction. “Core libraries would be a great place”<br>&gt;&gt; and “this is a huge oversight in the language itself”. Could you describe<br>&gt;&gt; what language-level functionality would be needed here that can’t be<br>&gt;&gt; adequately addressed by the core libraries? Do you know of any major<br>&gt;&gt; programming language with language level features for crypto support, as<br>&gt;&gt; opposed to solving it through a library?<br>&gt;&gt; <br>&gt;&gt; Travis Beech | Principal Developer | Unwired Revolution | c: 1 (209)<br>&gt;&gt; 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; From: &lt;milseman at apple.com&gt; on behalf of Michael Ilseman &lt;milseman at apple.com&gt;<br>&gt;&gt; Date: Thursday, April 14, 2016 at 2:33 PM<br>&gt;&gt; To: Travis Beech &lt;tbeech at unwiredrevolution.com&gt;<br>&gt;&gt; Cc: David Waite &lt;david at alkaline-solutions.com&gt;, &quot;swift-evolution at swift.org&quot;<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; Subject: Re: [swift-evolution] Crypto routines as part of the core library<br>&gt;&gt; <br>&gt;&gt; Why would it need to be built into the language proper instead of the core<br>&gt;&gt; libraries? I am not too familiar with the core libraries, but perhaps<br>&gt;&gt; swift-corelibs-dev is the more appropriate mailing list here?<br>&gt;&gt; <br>&gt;&gt; On Apr 13, 2016, at 7:24 PM, Travis Beech via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So what would it take to get a standard set of crypto API&#39;s built into the<br>&gt;&gt; language?<br>&gt;&gt; <br>&gt;&gt; Travis Beech  |  Principal Developer  |  Unwired Revolution  |  c: 1 (209)<br>&gt;&gt; 535-5357<br>&gt;&gt; Optimizing Operations for Mobile and Distributed Systems<br>&gt;&gt; <br>&gt;&gt; On Apr 13, 2016, at 10:11 AM, David Waite &lt;david at alkaline-solutions.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don’t know if we need a boost-like parent project in order to start<br>&gt;&gt; building core code to be brought for inclusion.<br>&gt;&gt; <br>&gt;&gt; I think success will naturally bring such a project structure - people<br>&gt;&gt; seeking a curated and integrated set of frameworks to get common<br>&gt;&gt; functionality.<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt; On Apr 13, 2016, at 12:16 PM, Tino Heth via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This seems like a great candidate for a library that could be developed in<br>&gt;&gt; the community and then possibly brought into Corelibs in a future version<br>&gt;&gt; <br>&gt;&gt; true — but sadly, there seems to be either no interest or manpower for a<br>&gt;&gt; boost-like infrastructure…<br>&gt;&gt; Like many other fundamental topics, I don&#39;t think crypto belongs to the<br>&gt;&gt; stdlib, but none the less, there should be a standard library for<br>&gt;&gt; encryption/hashing.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
