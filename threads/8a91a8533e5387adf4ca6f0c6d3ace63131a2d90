<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a51efe0c2993455701ed4757862e4b11?s=50"></div><header><strong>Path Swift</strong> from <string>Piero Sabino</string> &lt;piero.sa at icloud.com&gt;<p>December  7, 2015 at 09:00:00pm</p></header><div class="content"><p>My .bashrc is the following:<br># ~/.bashrc: executed by bash(1) for non-login shells.<br># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)<br># for examples<br></p><p># If not running interactively, don&#39;t do anything<br>case $- in<br>*i*) ;;<br>*) return;;<br>esac<br></p><p># don&#39;t put duplicate lines or lines starting with space in the history.<br># See bash(1) for more options<br>HISTCONTROL=ignoreboth<br></p><p># append to the history file, don&#39;t overwrite it<br>shopt -s histappend<br></p><p># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)<br>HISTSIZE=1000<br>HISTFILESIZE=2000<br></p><p># check the window size after each command and, if necessary,<br># update the values of LINES and COLUMNS.<br>shopt -s checkwinsize<br></p><p># If set, the pattern &quot;**&quot; used in a pathname expansion context will<br># match all files and zero or more directories and subdirectories.<br>#shopt -s globstar<br></p><p># make less more friendly for non-text input files, see lesspipe(1)<br>[ -x /usr/bin/lesspipe ] &amp;&amp; eval &quot;$(SHELL=/bin/sh lesspipe)&quot;<br></p><p># set variable identifying the chroot you work in (used in the prompt below)<br>if [ -z &quot;${debian_chroot:-}&quot; ] &amp;&amp; [ -r /etc/debian_chroot ]; then<br>debian_chroot=$(cat /etc/debian_chroot)<br>fi<br></p><p># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)<br>case &quot;$TERM&quot; in<br>xterm-color) color_prompt=yes;;<br>esac<br></p><p># uncomment for a colored prompt, if the terminal has the capability; turned<br># off by default to not distract the user: the focus in a terminal window<br># should be on the output of commands, not on the prompt<br>#force_color_prompt=yes<br></p><p>if [ -n &quot;$force_color_prompt&quot; ]; then<br>if [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; then<br># We have color support; assume it&#39;s compliant with Ecma-48<br># (ISO/IEC-6429). (Lack of such support is extremely rare, and such<br># a case would tend to support setf rather than setaf.)<br>color_prompt=yes<br>else<br>color_prompt=<br>fi<br>fi<br></p><p>if [ &quot;$color_prompt&quot; = yes ]; then<br>PS1=&#39;${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#39;<br>else<br>PS1=&#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &#39;<br>fi<br>unset color_prompt force_color_prompt<br></p><p># If this is an xterm set the title to user at host:dir<br>case &quot;$TERM&quot; in<br>xterm*|rxvt*)<br>PS1=&quot;\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1&quot;<br>;;<br>*)<br>;;<br>esac<br></p><p># enable color support of ls and also add handy aliases<br>if [ -x /usr/bin/dircolors ]; then<br>test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;<br>alias ls=&#39;ls --color=auto&#39;<br>#alias dir=&#39;dir --color=auto&#39;<br>#alias vdir=&#39;vdir --color=auto&#39;<br></p><p>alias grep=&#39;grep --color=auto&#39;<br>alias fgrep=&#39;fgrep --color=auto&#39;<br>alias egrep=&#39;egrep --color=auto&#39;<br>fi<br></p><p># some more ls aliases<br>alias ll=&#39;ls -alF&#39;<br>alias la=&#39;ls -A&#39;<br>alias l=&#39;ls -CF&#39;<br></p><p># Add an &quot;alert&quot; alias for long running commands. Use like so:<br># sleep 10; alert<br>alias alert=&#39;notify-send --urgency=low -i &quot;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&quot; &quot;$(history|tail -n1|sed -e &#39;\&#39;&#39;s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//&#39;\&#39;&#39;)&quot;&#39;<br></p><p># Alias definitions.<br># You may want to put all your additions into a separate file like<br># ~/.bash_aliases, instead of adding them here directly.<br># See /usr/share/doc/bash-doc/examples in the bash-doc package.<br></p><p>if [ -f ~/.bash_aliases ]; then<br>. ~/.bash_aliases<br>fi<br></p><p># enable programmable completion features (you don&#39;t need to enable<br># this, if it&#39;s already enabled in /etc/bash.bashrc and /etc/profile<br># sources /etc/bash.bashrc).<br>if ! shopt -oq posix; then<br>if [ -f /usr/share/bash-completion/bash_completion ]; then<br>. /usr/share/bash-completion/bash_completion<br>elif [ -f /etc/bash_completion ]; then<br>. /etc/bash_completion<br>fi<br>fi<br></p><p>export PATH=/Home/Downloads/swift/usr/bin:&quot;${PATH}&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151207/8a912d90/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Path Swift</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>Can you please stop creating a new thread for every single message? This<br>is making it hard to read the list. Just reply to the last message in<br>the thread instead.<br></p><p>-Kevin<br></p><p>On Mon, Dec 7, 2015, at 01:27 PM, Piero Sabino via swift-dev wrote:<br>&gt; My .bashrc is the following: [snip]<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151207/8a1cf520/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
