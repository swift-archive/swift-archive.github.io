<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  9, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Aug 09 2016, Karl &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 9 Aug 2016, at 21:09, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi Everybody,<br>&gt;&gt; <br>&gt;<br>&gt;&gt; With another round of apologies for taking late action, we propose to<br>&gt;&gt; make some deprecations, moves, and renames.  The background for these<br>&gt;&gt; moves is as follows:<br>&gt;&gt; <br>&gt;&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt;&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt;&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt;&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt;&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt;&gt; code creates similar implications when it comes to certain protocols,<br>&gt;&gt; today.  Especially where these protocols show up in refinement<br>&gt;&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt;&gt; carrying them forward into future libraries.<br>&gt;&gt; <br>&gt;&gt; The proposed changes are as follows:<br>&gt;&gt; <br>&gt;&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;&gt;  This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;&gt;  belong in the standard library.<br>&gt;&gt; <br>&gt;&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;&gt;  will be gone in Swift 4.  These protocols are implementation details<br>&gt;&gt;  of the standard library designed to work around language limitations<br>&gt;&gt;  that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;&gt;  ever touch these; users should always use a corresponding Collection<br>&gt;&gt;  protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt;&gt; <br>&gt;&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;&gt;  message indicating that its design is expected to change.  We know<br>&gt;&gt;  this protocol to be mis-designed<br>&gt;&gt;  (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;&gt;  (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;&gt;  for Swift 3.  If we knew what the new design should look like, we<br>&gt;&gt;  might be able to calculate that the current API is supportable in a<br>&gt;&gt;  forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;&gt;  do not.<br>&gt;&gt; <br>&gt;&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;&gt;  Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;&gt;  TextOutputStream, we should also move Streamable out of the way.<br>&gt;&gt; <br>&gt;&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt;&gt; because it allows existing code to keep working (with warnings).  At<br>&gt;&gt; this late stage, it would be bad to actually break anything.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; Does this include the ContiguousArray deprecation? <br></p><p>Definitely not.<br></p><p>&gt; I’m still seeing performance issues with regular Array (will update<br>&gt; bug soon).<br>&gt;<br>&gt; I don’t mind if it gets deprecated, so long as it isn’t removed before we sort those issues out.<br>&gt;<br>&gt; Otherwise +1<br>&gt;<br>&gt; Karl<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/19ca8ea29768acdbb87dc016d7d9a8e4?s=50"></div><header><strong>[Late Pitch] Deprecations, Moves, and Renames</strong> from <string>Paulo Faria</string> &lt;paulo at zewo.io&gt;<p>August  9, 2016 at 08:00:00pm</p></header><div class="content"><p>+1<br></p><p><br>&gt; On Aug 9, 2016, at 6:57 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Aug 09 2016, Karl &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On 9 Aug 2016, at 21:09, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Everybody,<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; With another round of apologies for taking late action, we propose to<br>&gt;&gt;&gt; make some deprecations, moves, and renames.  The background for these<br>&gt;&gt;&gt; moves is as follows:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;ve always known that when Swift reached ABI stability (now slated for<br>&gt;&gt;&gt; Swift 4), we would be committed to supporting many of the standard<br>&gt;&gt;&gt; library&#39;s design decisions for years to come.  What we only realized<br>&gt;&gt;&gt; very recently is that, although Swift 3.0 is *not* shipping with a<br>&gt;&gt;&gt; stable ABI, the promise that Swift 3.0 code will work with Swift 4.0<br>&gt;&gt;&gt; code creates similar implications when it comes to certain protocols,<br>&gt;&gt;&gt; today.  Especially where these protocols show up in refinement<br>&gt;&gt;&gt; hierarchies, we can&#39;t keep Swift 3 code working in the future without<br>&gt;&gt;&gt; carrying them forward into future libraries.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed changes are as follows:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Move `CustomPlaygroundQuickLookable` to the PlaygroundSupport module.<br>&gt;&gt;&gt; This component is really only useful for playgrounds, and doesn&#39;t<br>&gt;&gt;&gt; belong in the standard library.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Deprecate the Indexable protocols with a message indicating that they<br>&gt;&gt;&gt; will be gone in Swift 4.  These protocols are implementation details<br>&gt;&gt;&gt; of the standard library designed to work around language limitations<br>&gt;&gt;&gt; that we expect to be gone in Swift 4.  There&#39;s no reason for anyone to<br>&gt;&gt;&gt; ever touch these; users should always use a corresponding Collection<br>&gt;&gt;&gt; protocol (e.g. instead of MutableIndexable, use MutableCollection).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Deprecate the ExpressibleByStringInterpolation protocol with a<br>&gt;&gt;&gt; message indicating that its design is expected to change.  We know<br>&gt;&gt;&gt; this protocol to be mis-designed<br>&gt;&gt;&gt; (https://bugs.swift.org/browse/SR-1260) and limited<br>&gt;&gt;&gt; (https://bugs.swift.org/browse/SR-2303), but there&#39;s no time to fix it<br>&gt;&gt;&gt; for Swift 3.  If we knew what the new design should look like, we<br>&gt;&gt;&gt; might be able to calculate that the current API is supportable in a<br>&gt;&gt;&gt; forward-compatible way (as we do for Comparable).  Unfortunately, we<br>&gt;&gt;&gt; do not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Rename Streamable to TextOutputStreamable and add a deprecated<br>&gt;&gt;&gt; Streamable typealias for it.  Now that OutputStream been renamed to<br>&gt;&gt;&gt; TextOutputStream, we should also move Streamable out of the way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Deprecation is being proposed instead of underscoring or renaming<br>&gt;&gt;&gt; because it allows existing code to keep working (with warnings).  At<br>&gt;&gt;&gt; this late stage, it would be bad to actually break anything.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; Does this include the ContiguousArray deprecation? <br>&gt; <br>&gt; Definitely not.<br>&gt; <br>&gt;&gt; I’m still seeing performance issues with regular Array (will update<br>&gt;&gt; bug soon).<br>&gt;&gt; <br>&gt;&gt; I don’t mind if it gets deprecated, so long as it isn’t removed before we sort those issues out.<br>&gt;&gt; <br>&gt;&gt; Otherwise +1<br>&gt;&gt; <br>&gt;&gt; Karl<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/193da1f7/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
