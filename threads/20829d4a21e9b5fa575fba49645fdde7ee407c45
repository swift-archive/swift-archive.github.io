<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Recommended posix_spawnattr_t for NSTask&#39;s implementation</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>I hope to take a crack at implementing some of NSTask this weekend.  What are the recommended posix_spawnattr_t flags that should be set?  Do we also want to take the opportunity to expose the ability to override some of these flags (like POSIX_SPAWN_SETPGROUP) or do we want to avoid tying this with posix_spawn() too closely?<br></p><p>Dan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Recommended posix_spawnattr_t for NSTask&#39;s implementation</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>I would definitely say that posix_spawn is the correct path to implement this; that will keep pretty close to the way the one on darwin works;<br></p><p>Couple of suggestions:<br></p><p>posix_spawnattr_setsigmask should be set to the empty signal set<br></p><p>the attribute flags should probably be POSIX_SPAWN_CLOEXEC_DEFAULT | POSIX_SPAWN_SETSIGMASK | POSIX_SPAWN_SETSIGDEF<br></p><p>You can probably skip QoS since it won’t exist on linux.<br></p><p>There may be some issue with not having libdispatch to use for a source to watch a DISPATCH_PROC_EXIT but this perhaps could be done via a pthread (not certain on exactly how but perhaps it can be done)<br></p><p>It also might be useful in this case to drop down to C similarly as CFXMLInterface - but pick your poison on that one.<br></p><p><br>&gt; On Dec 18, 2015, at 11:08 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I hope to take a crack at implementing some of NSTask this weekend.  What are the recommended posix_spawnattr_t flags that should be set?  Do we also want to take the opportunity to expose the ability to override some of these flags (like POSIX_SPAWN_SETPGROUP) or do we want to avoid tying this with posix_spawn() too closely?<br>&gt; <br>&gt; Dan<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>Recommended posix_spawnattr_t for NSTask&#39;s implementation</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>-Pierre<br></p><p>&gt; On Dec 18, 2015, at 11:14 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I would definitely say that posix_spawn is the correct path to implement this; that will keep pretty close to the way the one on darwin works;<br>&gt; <br>&gt; Couple of suggestions:<br>&gt; <br>&gt; posix_spawnattr_setsigmask should be set to the empty signal set<br>&gt; <br>&gt; the attribute flags should probably be POSIX_SPAWN_CLOEXEC_DEFAULT | POSIX_SPAWN_SETSIGMASK | POSIX_SPAWN_SETSIGDEF<br>&gt; <br>&gt; You can probably skip QoS since it won’t exist on linux.<br>&gt; <br>&gt; There may be some issue with not having libdispatch to use for a source to watch a DISPATCH_PROC_EXIT but this perhaps could be done via a pthread (not certain on exactly how but perhaps it can be done)<br></p><p>No, it can’t that’s the big problem with posix_spawn() on linux, because the new task isn’t a child with this (or maybe it is on linux I don’t know) and there is no equivalent to the EVFILT_PROC which is the kevent backend for the PROC_EXIT dispatch source thing.<br></p><p>This feature is only available through netlink on linux which is restricted to the root user.<br></p><p>It *may* be that posix_spawn()ed things are children on linux and that a SIGCHLD source should be used instead, which means that NSTask would have to multiplex the SIGCHLD + waitpid() and route them back to the right NSTask().<br></p><p><br>&gt; It also might be useful in this case to drop down to C similarly as CFXMLInterface - but pick your poison on that one.<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 11:08 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I hope to take a crack at implementing some of NSTask this weekend.  What are the recommended posix_spawnattr_t flags that should be set?  Do we also want to take the opportunity to expose the ability to override some of these flags (like POSIX_SPAWN_SETPGROUP) or do we want to avoid tying this with posix_spawn() too closely?<br>&gt;&gt; <br>&gt;&gt; Dan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7ba3c93f9350613c243eeb87c602935e?s=50"></div><header><strong>Recommended posix_spawnattr_t for NSTask&#39;s implementation</strong> from <string>David Smith</string> &lt;david_smith at apple.com&gt;<p>December 18, 2015 at 11:00:00am</p></header><div class="content"><p>One issue that we ran into in the ObjC NSTask is setting the current working directory in the child process. We worked around the lack of an API for that by using per-thread working directories, which is kind of awful. I&#39;m not up to date on what the best approach to use for this on Linux would be; it sounds like clone() can do it, but I don&#39;t know if that&#39;s exposed at the posix_spawn level at all.<br></p><p>	David<br></p><p>&gt; On Dec 18, 2015, at 11:08 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I hope to take a crack at implementing some of NSTask this weekend.  What are the recommended posix_spawnattr_t flags that should be set?  Do we also want to take the opportunity to expose the ability to override some of these flags (like POSIX_SPAWN_SETPGROUP) or do we want to avoid tying this with posix_spawn() too closely?<br>&gt; <br>&gt; Dan<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/562c2299436b75df013fb428ddf90ce6?s=50"></div><header><strong>Recommended posix_spawnattr_t for NSTask&#39;s implementation</strong> from <string>Pierre Habouzit</string> &lt;pierre at habouzit.net&gt;<p>December 18, 2015 at 12:00:00pm</p></header><div class="content"><p>FWIW Glibc implements posix_spawn on posix platforms in terms of {,v}fork + execve.<br>So that means that SIGCHLD can be used.<br></p><p>I don’t think linux has per-thread wd, since linux has had atcalls for a very long time, which makes this system interface not useful and only weird (pthread_{,f}chdir).<br></p><p>I don’t think there’s a good way to fix this beside asking for POSIX to have a posix_spawnattr_setwd(attr, const char *); or changing it around the spawn, which of course, is bad and racy<br></p><p>The other alternative is to use a trampoline execv() when -[NSTask currentDirectoryPath] has been set that will just chdir() and exec&#39;s again. it’s not really pretty but does the job. Given that this should be the exception and not the rule, maybe that’s acceptable.<br></p><p><br>-Pierre<br></p><p>&gt; On Dec 18, 2015, at 11:37 AM, David Smith via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; One issue that we ran into in the ObjC NSTask is setting the current working directory in the child process. We worked around the lack of an API for that by using per-thread working directories, which is kind of awful. I&#39;m not up to date on what the best approach to use for this on Linux would be; it sounds like clone() can do it, but I don&#39;t know if that&#39;s exposed at the posix_spawn level at all.<br>&gt; <br>&gt; 	David<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 11:08 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I hope to take a crack at implementing some of NSTask this weekend.  What are the recommended posix_spawnattr_t flags that should be set?  Do we also want to take the opportunity to expose the ability to override some of these flags (like POSIX_SPAWN_SETPGROUP) or do we want to avoid tying this with posix_spawn() too closely?<br>&gt;&gt; <br>&gt;&gt; Dan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Recommended posix_spawnattr_t for NSTask&#39;s implementation</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>I’m assuming that OS X’s method for setting a pthread’s cwd is private API.  Unless a better way to accomplish the same end-goal is in the works, is there any way to expose it?<br></p><p>In regards to Linux, the more I look at this, the less attractive posix_spawn() appears as a way of implementing this on that platform.  I’ll likely have a better idea how to approach this following some prototyping later tonight, but my current line of thinking involves vfork() -&gt; unshare() -&gt; chdir() -&gt; execve().<br></p><p>Dan<br></p><p>&gt; On Dec 18, 2015, at 12:39 PM, Pierre Habouzit &lt;pierre at habouzit.net&gt; wrote:<br>&gt; <br>&gt; FWIW Glibc implements posix_spawn on posix platforms in terms of {,v}fork + execve.<br>&gt; So that means that SIGCHLD can be used.<br>&gt; <br>&gt; I don’t think linux has per-thread wd, since linux has had atcalls for a very long time, which makes this system interface not useful and only weird (pthread_{,f}chdir).<br>&gt; <br>&gt; I don’t think there’s a good way to fix this beside asking for POSIX to have a posix_spawnattr_setwd(attr, const char *); or changing it around the spawn, which of course, is bad and racy<br>&gt; <br>&gt; The other alternative is to use a trampoline execv() when -[NSTask currentDirectoryPath] has been set that will just chdir() and exec&#39;s again. it’s not really pretty but does the job. Given that this should be the exception and not the rule, maybe that’s acceptable.<br>&gt; <br>&gt; <br>&gt; -Pierre<br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 11:37 AM, David Smith via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One issue that we ran into in the ObjC NSTask is setting the current working directory in the child process. We worked around the lack of an API for that by using per-thread working directories, which is kind of awful. I&#39;m not up to date on what the best approach to use for this on Linux would be; it sounds like clone() can do it, but I don&#39;t know if that&#39;s exposed at the posix_spawn level at all.<br>&gt;&gt; <br>&gt;&gt; 	David<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 11:08 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I hope to take a crack at implementing some of NSTask this weekend.  What are the recommended posix_spawnattr_t flags that should be set?  Do we also want to take the opportunity to expose the ability to override some of these flags (like POSIX_SPAWN_SETPGROUP) or do we want to avoid tying this with posix_spawn() too closely?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dan<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
