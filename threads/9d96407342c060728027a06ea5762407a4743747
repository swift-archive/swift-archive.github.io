<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Requiring proactive overrides for default protocol implementations.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 30, 2016 at 06:00:00pm</p></header><div class="content"><p>on Fri Apr 29 2016, Matthew Judge &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I believe the following idea was brought up on the list the last time<br>&gt; this topic came up, but I think it has a number of advantages and gets<br>&gt; rid of the need for a &#39;required&#39; keyword completely. I have<br>&gt; reservations on the &#39;override&#39; keyword as well, but the following idea<br>&gt; would not preclude adding the &#39;override&#39; keyword.<br>&gt;<br>&gt; If an extension adds protocol conformance, only methods implementing<br>&gt; the protocol are allowed in the body.  All methods from the protocol<br>&gt; do not need to be implemented in the extension, so long as the type<br>&gt; conforms overall.<br>&gt;<br>&gt; struct Foo {<br>&gt;    func a() {}<br>&gt; }<br>&gt;<br>&gt; protocol A {<br>&gt;    func a()<br>&gt; }<br>&gt; protocol B {<br>&gt;    func b()<br>&gt; }<br>&gt; protocol C {} <br>&gt;<br>&gt; extension Foo: A { } // retroactive modeling, no error<br>&gt;<br>&gt; extension Foo: B {<br>&gt;    func b() {} // compiles, but &quot;near miss&quot; would not<br>&gt; }<br>&gt;<br>&gt; extension Foo: C {<br>&gt;    func d() {} // error, d() not part of protocol C<br>&gt; }<br>&gt;<br>&gt; Advantages:<br>&gt; - Clarifies intent... If you are implementing a method in an extension<br>&gt; that declares a protocol conformance, it has to satisfy that one of<br>&gt; that protocol&#39;s requirements<br>&gt; - Eliminates &quot;near-miss&quot; mistakes when implementing a function in an<br>&gt; extension that declares protocol conformance, even in protocol has a<br>&gt; default implementation (it would be an error to implement the<br>&gt; non-matching-but-almost func)<br>&gt; - Fully supports retroactive modeling<br>&gt; - No new keywords required<br>&gt;<br>&gt; Disadvantages:<br>&gt; - Source breaking change for any code that currently declares protocol conformance in an extension and implements an unrelated method<br>&gt; - Potential inconsistency with base type declaration (does this rule apply only to extensions or the initial declaration of the type?)<br>&gt; - Does not stop you from accidentally writing a implementation for a<br>&gt; method that already has a default implementation in the protocol<br>&gt; (though nothing here precludes the addition of adding &#39;override&#39; as<br>&gt; well)<br></p><p>If you need d as an implementation detail of the C conformance, this<br>will get annoying.<br></p><p>&gt; Effectively, the only change required to current code would be to modify the above implementation of:<br>&gt;<br>&gt; extension Foo: C {<br>&gt;    func d() {}<br>&gt; }<br>&gt;<br>&gt; To read:<br>&gt;<br>&gt; extension Foo: C {}<br>&gt; extension Foo {<br>&gt;    func d() {}<br>&gt; }<br>&gt;<br>&gt; On Apr 29, 2016, at 11:44, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;&gt; On Apr 29, 2016, at 10:38 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d be keenly interested in something that would improve the<br>&gt;&gt;&gt; experience of conforming a type to a protocol. I think others would<br>&gt;&gt;&gt; as well. A sufficiently sophisticated solution would:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * catch unintentional typos that cause required functions to be incorrectly named<br>&gt;&gt;&gt; * show, ideally prospectively, which required functions have default implementations<br>&gt;&gt;&gt; * clarify (and this is obviously a cherry-on-top scenario) what<br>&gt;&gt;&gt; protocol requirements any particular function helps to satisfy as<br>&gt;&gt;&gt; well as which combination of implementations is used to synthesize<br>&gt;&gt;&gt; a default implementation of another function (e.g. &lt;= synthesized<br>&gt;&gt;&gt; from &lt; and ==; this would help to determine whether it might be<br>&gt;&gt;&gt; more efficient to roll your own override)<br>&gt;&gt;&gt; * support all retroactive modeling scenarios currently supported<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tried to propose a keyword-based solution (less sophisticated<br>&gt;&gt;&gt; than yours) a while back, and I&#39;ve been convinced that the<br>&gt;&gt;&gt; drawbacks in terms of decreased expressiveness in retroactive<br>&gt;&gt;&gt; modeling might be insurmountable. Perhaps it would be worthwhile<br>&gt;&gt;&gt; exploring improvements in tooling and documentation (including<br>&gt;&gt;&gt; annotation of the code itself) in order to address some of these<br>&gt;&gt;&gt; areas?<br>&gt;&gt; <br>&gt;&gt; Yeah, I think this is something that tooling / editors could really help with.  I would love it if when I typed:<br>&gt;&gt; <br>&gt;&gt;   struct Foo: Bar<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt;   extension Foo: Bar<br>&gt;&gt; <br>&gt;&gt; a skeleton with the missing Bar APIs was auto-generated for me to<br>&gt;&gt; fill in.  This would make it much easier to get conformances right,<br>&gt;&gt; and require less typing instead of more.<br>&gt;&gt; <br>&gt;&gt; â€“ Steve<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
