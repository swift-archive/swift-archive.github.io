<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Say you have the following code. There is a property on MyClass (‘y’) which is derived from other data via an instance method; Two-stage initialisation.<br></p><p>class MySuperClass {<br>	init() {}<br>}<br></p><p>class MyClass : MySuperClass {<br></p><p>	let x : Int<br>	var y : String<br></p><p>	init(x: Int) {<br></p><p>		self.x = x<br>		super.init()<br>		y = someInstanceMethod()<br>	}<br>}<br></p><p>The code won’t compile because you call super.init before initialising all properties. The way to work-around this so far is to make the type of ‘y’ an implicitly-unwrapped optional. I don’t think it’s very elegant to have to change the type of ‘y’ in this case - it exposes implementation details and implies that the value may sometimes be nil, which is not the case.<br></p><p>What about if we allowed you to explicitly declare that it’s okay for ‘y’ not to be initialised before calling super.init? Perhaps by assigning it to the underscore:<br></p><p>self.x = x<br>y = _<br>super.init()<br>y = someInstanceMethod()<br></p><p>&#39;y&#39; would still effectively work as an implicitly-unwrapped optional - the value would be initialised to nil, and any attempt to use it before it is initialised would be a fatal runtime error as with an IUO. This also means that it couldn’t be a “let” value.<br></p><p>This change wouldn’t give you any additional safety when using two-stage initialisation; it would simply not require you to change the type of the property when doing so.<br></p><p>Thoughts?<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Is there a particular reason for not using lazy var here?<br></p><p>class MySuperClass {<br>	init() {}<br>}<br></p><p>class MyClass : MySuperClass {<br></p><p>	let x: Int<br>	lazy var y: String = self.someInstanceMethod()<br></p><p>	init(x: Int) {<br>		self.x = x<br>		super.init()<br>	}<br></p><p>	func someInstanceMethod() -&gt; String {<br>		return &quot;Kaboom&quot;<br>	}<br>}<br></p><p><br></p><p>&gt; On Jun 15, 2016, at 2:22 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Say you have the following code. There is a property on MyClass (‘y’) which is derived from other data via an instance method; Two-stage initialisation.<br>&gt; <br>&gt; class MySuperClass {<br>&gt; 	init() {}<br>&gt; }<br>&gt; <br>&gt; class MyClass : MySuperClass {<br>&gt; <br>&gt; 	let x : Int<br>&gt; 	var y : String<br>&gt; <br>&gt; 	init(x: Int) {<br>&gt; <br>&gt; 		self.x = x<br>&gt; 		super.init()<br>&gt; 		y = someInstanceMethod()<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; The code won’t compile because you call super.init before initialising all properties. The way to work-around this so far is to make the type of ‘y’ an implicitly-unwrapped optional. I don’t think it’s very elegant to have to change the type of ‘y’ in this case - it exposes implementation details and implies that the value may sometimes be nil, which is not the case.<br>&gt; <br>&gt; What about if we allowed you to explicitly declare that it’s okay for ‘y’ not to be initialised before calling super.init? Perhaps by assigning it to the underscore:<br>&gt; <br>&gt; self.x = x<br>&gt; y = _<br>&gt; super.init()<br>&gt; y = someInstanceMethod()<br>&gt; <br>&gt; &#39;y&#39; would still effectively work as an implicitly-unwrapped optional - the value would be initialised to nil, and any attempt to use it before it is initialised would be a fatal runtime error as with an IUO. This also means that it couldn’t be a “let” value.<br>&gt; <br>&gt; This change wouldn’t give you any additional safety when using two-stage initialisation; it would simply not require you to change the type of the property when doing so.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Karl<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Maybe there are several initialisers, with different ways of calculating &#39;y&#39; depending on what you give it.<br>  <br></p><p>  <br>Karl<br>    <br>  <br></p><p>  <br>  <br>&gt;   <br>&gt; On Jun 15, 2016 at 2:26 PM,  &lt;Charlie Monroe (mailto:charlie at charliemonroe.net)&gt;  wrote:<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;  Is there a particular reason for not using lazy var here?  <br>&gt;<br>&gt; class MySuperClass {  <br>&gt;  init() {}  <br>&gt; }  <br>&gt;<br>&gt; class MyClass : MySuperClass {  <br>&gt;<br>&gt;  let x: Int  <br>&gt;  lazy var y: String = self.someInstanceMethod()  <br>&gt;<br>&gt;  init(x: Int) {  <br>&gt;  self.x = x  <br>&gt;  super.init()  <br>&gt;  }  <br>&gt;<br>&gt;  func someInstanceMethod() -&gt;  String {  <br>&gt;  return &quot;Kaboom&quot;  <br>&gt;  }  <br>&gt; }  <br>&gt;<br>&gt;<br>&gt;<br>&gt; &gt;  On Jun 15, 2016, at 2:22 PM, Karl via swift-evolution  &lt;swift-evolution at swift.org (mailto:swift-evolution at swift.org)&gt;  wrote:  <br>&gt; &gt;   <br>&gt; &gt;  Say you have the following code. There is a property on MyClass (‘y’) which is derived from other data via an instance method; Two-stage initialisation.  <br>&gt; &gt;   <br>&gt; &gt;  class MySuperClass {  <br>&gt; &gt;  init() {}  <br>&gt; &gt;  }  <br>&gt; &gt;   <br>&gt; &gt;  class MyClass : MySuperClass {  <br>&gt; &gt;   <br>&gt; &gt;  let x : Int  <br>&gt; &gt;  var y : String  <br>&gt; &gt;   <br>&gt; &gt;  init(x: Int) {  <br>&gt; &gt;   <br>&gt; &gt;  self.x = x  <br>&gt; &gt;  super.init()  <br>&gt; &gt;  y = someInstanceMethod()  <br>&gt; &gt;  }  <br>&gt; &gt;  }  <br>&gt; &gt;   <br>&gt; &gt;  The code won’t compile because you call super.init before initialising all properties. The way to work-around this so far is to make the type of ‘y’ an implicitly-unwrapped optional. I don’t think it’s very elegant to have to change the type of ‘y’ in this case - it exposes implementation details and implies that the value may sometimes be nil, which is not the case.  <br>&gt; &gt;   <br>&gt; &gt;  What about if we allowed you to explicitly declare that it’s okay for ‘y’ not to be initialised before calling super.init? Perhaps by assigning it to the underscore:  <br>&gt; &gt;   <br>&gt; &gt;  self.x = x  <br>&gt; &gt;  y = _  <br>&gt; &gt;  super.init()  <br>&gt; &gt;  y = someInstanceMethod()  <br>&gt; &gt;   <br>&gt; &gt;  &#39;y&#39; would still effectively work as an implicitly-unwrapped optional - the value would be initialised to nil, and any attempt to use it before it is initialised would be a fatal runtime error as with an IUO. This also means that it couldn’t be a “let” value.  <br>&gt; &gt;   <br>&gt; &gt;  This change wouldn’t give you any additional safety when using two-stage initialisation; it would simply not require you to change the type of the property when doing so.  <br>&gt; &gt;   <br>&gt; &gt;  Thoughts?  <br>&gt; &gt;   <br>&gt; &gt;  Karl  <br>&gt; &gt;  _______________________________________________  <br>&gt; &gt;  swift-evolution mailing list  <br>&gt; &gt;   swift-evolution at swift.org (mailto:swift-evolution at swift.org)   <br>&gt; &gt;   https://lists.swift.org/mailman/listinfo/swift-evolution   <br>&gt;<br>&gt;          <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/2e1ee1b1/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 03:00:00pm</p></header><div class="content"><p>I believe there was(was?) already a suggestion to introduce special methods <br>that could be called from initializers. IMO this is a better solution to <br>the problem as you really should not call &#39;usual&#39; instance method until the <br>instance is fully instantiated(super.init() called in your case):<br></p><p>class MyClass : MySuperClass {<br></p><p>	let x : Int<br>	let y : String  //let!<br></p><p>	initfunc calcY(somePatam: Int) -&gt; String {<br>		return ....<br>	}<br></p><p>	init(x: Int) {<br>		self.x = x<br>		self.y = assignY(5)<br>		super.init()<br>	}<br>}<br></p><p>On 15.06.2016 15:22, Karl via swift-evolution wrote:<br>&gt; Say you have the following code. There is a property on MyClass (‘y’)<br>&gt; which is derived from other data via an instance method; Two-stage<br>&gt; initialisation.<br>&gt;<br>&gt; class MySuperClass { init() {} }<br>&gt;<br>&gt; class MyClass : MySuperClass {<br>&gt;<br>&gt; let x : Int var y : String<br>&gt;<br>&gt; init(x: Int) {<br>&gt;<br>&gt; self.x = x super.init() y = someInstanceMethod() } }<br>&gt;<br>&gt; The code won’t compile because you call super.init before initialising<br>&gt; all properties. The way to work-around this so far is to make the type<br>&gt; of ‘y’ an implicitly-unwrapped optional. I don’t think it’s very elegant<br>&gt; to have to change the type of ‘y’ in this case - it exposes<br>&gt; implementation details and implies that the value may sometimes be nil,<br>&gt; which is not the case.<br>&gt;<br>&gt; What about if we allowed you to explicitly declare that it’s okay for<br>&gt; ‘y’ not to be initialised before calling super.init? Perhaps by<br>&gt; assigning it to the underscore:<br>&gt;<br>&gt; self.x = x y = _ super.init() y = someInstanceMethod()<br>&gt;<br>&gt; &#39;y&#39; would still effectively work as an implicitly-unwrapped optional -<br>&gt; the value would be initialised to nil, and any attempt to use it before<br>&gt; it is initialised would be a fatal runtime error as with an IUO. This<br>&gt; also means that it couldn’t be a “let” value.<br>&gt;<br>&gt; This change wouldn’t give you any additional safety when using two-stage<br>&gt; initialisation; it would simply not require you to change the type of<br>&gt; the property when doing so.<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; Karl _______________________________________________ swift-evolution<br>&gt; mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
