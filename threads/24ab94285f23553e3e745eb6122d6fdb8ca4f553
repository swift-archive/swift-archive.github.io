<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>I often call methods that return an optional collection. I then iterate over it. The problem is, it&#39;s a bit cumbersome to write:<br></p><p>     if let container = someOptionalContainer<br>    {<br>        for item in container<br>        {<br>        }<br>    }<br></p><p>I wish I could just write <br></p><p>    for item in someOptionalContainer<br>    {<br>    }<br></p><p>such that if the optional is nil, it just skips the iteration altogether.<br></p><p>Is there a syntax for that (especially in Swift 3)?<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>How about &quot;for item in someOptionalContainer ?? []&quot;  ?<br></p><p>On Thu, Jul 28, 2016 at 2:55 PM, Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I often call methods that return an optional collection. I then iterate<br>&gt; over it. The problem is, it&#39;s a bit cumbersome to write:<br>&gt;<br>&gt;      if let container = someOptionalContainer<br>&gt;     {<br>&gt;         for item in container<br>&gt;         {<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; I wish I could just write<br>&gt;<br>&gt;     for item in someOptionalContainer<br>&gt;     {<br>&gt;     }<br>&gt;<br>&gt; such that if the optional is nil, it just skips the iteration altogether.<br>&gt;<br>&gt; Is there a syntax for that (especially in Swift 3)?<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160728/d36c551e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>Yeah, I suppose that works. Feels a bit clunky, like the language lacks specific support for this (in that it provides specific support for so many other common constructs). But I guess I can make do with that.<br></p><p>I suppose there&#39;s a bit of a performance hit, in that constructing an empty array and iterating over it is more expensive than a simple nil check, but that&#39;s unlikely to cause issues in practice.<br></p><p>Thanks.<br></p><p>&gt; On Jul 28, 2016, at 14:56 , Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; How about &quot;for item in someOptionalContainer ?? []&quot;  ?<br>&gt; <br>&gt; On Thu, Jul 28, 2016 at 2:55 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; I often call methods that return an optional collection. I then iterate over it. The problem is, it&#39;s a bit cumbersome to write:<br>&gt; <br>&gt;      if let container = someOptionalContainer<br>&gt;     {<br>&gt;         for item in container<br>&gt;         {<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; I wish I could just write<br>&gt; <br>&gt;     for item in someOptionalContainer<br>&gt;     {<br>&gt;     }<br>&gt; <br>&gt; such that if the optional is nil, it just skips the iteration altogether.<br>&gt; <br>&gt; Is there a syntax for that (especially in Swift 3)?<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 28, 2016 at 09:00:00pm</p></header><div class="content"><p>You should test it out — I&#39;d guess there&#39;s a good chance it gets optimized<br>out.<br>On Thu, Jul 28, 2016 at 2:58 PM Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br></p><p>&gt; Yeah, I suppose that works. Feels a bit clunky, like the language lacks<br>&gt; specific support for this (in that it provides specific support for so many<br>&gt; other common constructs). But I guess I can make do with that.<br>&gt;<br>&gt; I suppose there&#39;s a bit of a performance hit, in that constructing an<br>&gt; empty array and iterating over it is more expensive than a simple nil<br>&gt; check, but that&#39;s unlikely to cause issues in practice.<br>&gt;<br>&gt; Thanks.<br>&gt;<br>&gt; &gt; On Jul 28, 2016, at 14:56 , Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; How about &quot;for item in someOptionalContainer ?? []&quot;  ?<br>&gt; &gt;<br>&gt; &gt; On Thu, Jul 28, 2016 at 2:55 PM, Rick Mann via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt; I often call methods that return an optional collection. I then iterate<br>&gt; over it. The problem is, it&#39;s a bit cumbersome to write:<br>&gt; &gt;<br>&gt; &gt;      if let container = someOptionalContainer<br>&gt; &gt;     {<br>&gt; &gt;         for item in container<br>&gt; &gt;         {<br>&gt; &gt;         }<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; I wish I could just write<br>&gt; &gt;<br>&gt; &gt;     for item in someOptionalContainer<br>&gt; &gt;     {<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; such that if the optional is nil, it just skips the iteration altogether.<br>&gt; &gt;<br>&gt; &gt; Is there a syntax for that (especially in Swift 3)?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Rick Mann<br>&gt; &gt; rmann at latencyzero.com<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160728/d82a0689/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 28, 2016 at 03:00:00pm</p></header><div class="content"><p>The nil check and creating an empty array have very similar performance, in my naïve testing. <br></p><p>Saagar Jha<br></p><p><br></p><p>&gt; On Jul 28, 2016, at 14:59, Jacob Bandes-Storch via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; You should test it out — I&#39;d guess there&#39;s a good chance it gets optimized out.<br>&gt; On Thu, Jul 28, 2016 at 2:58 PM Rick Mann &lt;rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;&gt; wrote:<br>&gt; Yeah, I suppose that works. Feels a bit clunky, like the language lacks specific support for this (in that it provides specific support for so many other common constructs). But I guess I can make do with that.<br>&gt; <br>&gt; I suppose there&#39;s a bit of a performance hit, in that constructing an empty array and iterating over it is more expensive than a simple nil check, but that&#39;s unlikely to cause issues in practice.<br>&gt; <br>&gt; Thanks.<br>&gt; <br>&gt; &gt; On Jul 28, 2016, at 14:56 , Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; How about &quot;for item in someOptionalContainer ?? []&quot;  ?<br>&gt; &gt;<br>&gt; &gt; On Thu, Jul 28, 2016 at 2:55 PM, Rick Mann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt; I often call methods that return an optional collection. I then iterate over it. The problem is, it&#39;s a bit cumbersome to write:<br>&gt; &gt;<br>&gt; &gt;      if let container = someOptionalContainer<br>&gt; &gt;     {<br>&gt; &gt;         for item in container<br>&gt; &gt;         {<br>&gt; &gt;         }<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; I wish I could just write<br>&gt; &gt;<br>&gt; &gt;     for item in someOptionalContainer<br>&gt; &gt;     {<br>&gt; &gt;     }<br>&gt; &gt;<br>&gt; &gt; such that if the optional is nil, it just skips the iteration altogether.<br>&gt; &gt;<br>&gt; &gt; Is there a syntax for that (especially in Swift 3)?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Rick Mann<br>&gt; &gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; &gt;<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160728/e1ad0fc3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July 29, 2016 at 08:00:00am</p></header><div class="content"><p>You can try container?.forEach(), like<br></p><p>let bb:[String:Int]? = [&quot;aa&quot;:1, &quot;bb&quot;:2, &quot;cc&quot;:3]<br></p><p>bb?.forEach { print($0) }<br></p><p>/*<br></p><p>(&quot;aa&quot;, 1)<br></p><p>(&quot;bb&quot;, 2)<br></p><p>(&quot;cc&quot;, 3)<br></p><p>*/<br></p><p><br>Zhaoxin<br></p><p>On Fri, Jul 29, 2016 at 6:14 AM, Saagar Jha via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; The nil check and creating an empty array have very similar performance,<br>&gt; in my naïve testing.<br>&gt;<br>&gt; Saagar Jha<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 28, 2016, at 14:59, Jacob Bandes-Storch via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; You should test it out — I&#39;d guess there&#39;s a good chance it gets optimized<br>&gt; out.<br>&gt; On Thu, Jul 28, 2016 at 2:58 PM Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br>&gt;<br>&gt;&gt; Yeah, I suppose that works. Feels a bit clunky, like the language lacks<br>&gt;&gt; specific support for this (in that it provides specific support for so many<br>&gt;&gt; other common constructs). But I guess I can make do with that.<br>&gt;&gt;<br>&gt;&gt; I suppose there&#39;s a bit of a performance hit, in that constructing an<br>&gt;&gt; empty array and iterating over it is more expensive than a simple nil<br>&gt;&gt; check, but that&#39;s unlikely to cause issues in practice.<br>&gt;&gt;<br>&gt;&gt; Thanks.<br>&gt;&gt;<br>&gt;&gt; &gt; On Jul 28, 2016, at 14:56 , Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; How about &quot;for item in someOptionalContainer ?? []&quot;  ?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Thu, Jul 28, 2016 at 2:55 PM, Rick Mann via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt; I often call methods that return an optional collection. I then iterate<br>&gt;&gt; over it. The problem is, it&#39;s a bit cumbersome to write:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;      if let container = someOptionalContainer<br>&gt;&gt; &gt;     {<br>&gt;&gt; &gt;         for item in container<br>&gt;&gt; &gt;         {<br>&gt;&gt; &gt;         }<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I wish I could just write<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     for item in someOptionalContainer<br>&gt;&gt; &gt;     {<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; such that if the optional is nil, it just skips the iteration<br>&gt;&gt; altogether.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Is there a syntax for that (especially in Swift 3)?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Rick Mann<br>&gt;&gt; &gt; rmann at latencyzero.com<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; &gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160729/5922f4c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fb6430f693fc6d384b0734bb59092bf?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Kerry Hazelgren</string> &lt;hazelgren at me.com&gt;<p>July 28, 2016 at 11:00:00pm</p></header><div class="content"><p>Like Rick, I had also wondered about a simple way to do this. Perhaps this is a question for swift-evolution, but wouldn’t it be desirable if Swift supported:<br></p><p> for item in someOptionalContainer?<br> {<br> }<br></p><p>which seems more natural and intuitive that the alternatives that have been suggested.<br></p><p>Kerry<br></p><p>&gt; On Jul 28, 2016, at 5:18 PM, Zhao Xin via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; You can try container?.forEach(), like<br>&gt; <br>&gt; let bb:[String:Int]? = [&quot;aa&quot;:1, &quot;bb&quot;:2, &quot;cc&quot;:3]<br>&gt; bb?.forEach { print($0) }<br>&gt; /* <br>&gt; (&quot;aa&quot;, 1)<br>&gt; (&quot;bb&quot;, 2)<br>&gt; (&quot;cc&quot;, 3)<br>&gt; */<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Fri, Jul 29, 2016 at 6:14 AM, Saagar Jha via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; The nil check and creating an empty array have very similar performance, in my naïve testing. <br>&gt; <br>&gt; Saagar Jha<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 28, 2016, at 14:59, Jacob Bandes-Storch via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You should test it out — I&#39;d guess there&#39;s a good chance it gets optimized out.<br>&gt;&gt; On Thu, Jul 28, 2016 at 2:58 PM Rick Mann &lt;rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;&gt; wrote:<br>&gt;&gt; Yeah, I suppose that works. Feels a bit clunky, like the language lacks specific support for this (in that it provides specific support for so many other common constructs). But I guess I can make do with that.<br>&gt;&gt; <br>&gt;&gt; I suppose there&#39;s a bit of a performance hit, in that constructing an empty array and iterating over it is more expensive than a simple nil check, but that&#39;s unlikely to cause issues in practice.<br>&gt;&gt; <br>&gt;&gt; Thanks.<br>&gt;&gt; <br>&gt;&gt; &gt; On Jul 28, 2016, at 14:56 , Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; How about &quot;for item in someOptionalContainer ?? []&quot;  ?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Thu, Jul 28, 2016 at 2:55 PM, Rick Mann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt; I often call methods that return an optional collection. I then iterate over it. The problem is, it&#39;s a bit cumbersome to write:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;      if let container = someOptionalContainer<br>&gt;&gt; &gt;     {<br>&gt;&gt; &gt;         for item in container<br>&gt;&gt; &gt;         {<br>&gt;&gt; &gt;         }<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I wish I could just write<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     for item in someOptionalContainer<br>&gt;&gt; &gt;     {<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; such that if the optional is nil, it just skips the iteration altogether.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Is there a syntax for that (especially in Swift 3)?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Rick Mann<br>&gt;&gt; &gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Rick Mann<br>&gt;&gt; rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160728/981fe9c7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Compact iteration of optional collection?</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>July 29, 2016 at 08:00:00am</p></header><div class="content"><p>On 28 Jul 2016, at 22:55, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; I often call methods that return an optional collection.<br></p><p>Why do these methods return an optional collection rather an empty collection? Back in the day Cocoa code used to work that way because constructing empty collections was expensive.  These days I avoid optionality unless that optionality is signalling something relevant.  So I never write code like this:<br></p><p>    if let container = someOptionalContainer {<br>        for item in container {<br>            [do stuff with item]<br>        }<br>    }<br></p><p>it’s always this:<br></p><p>    for item in container {<br>        [do stuff with item]<br>    }<br></p><p>or this:<br></p><p>    if let container = someOptionalContainer {<br>        for item in container {<br>            [do stuff with item]<br>        }<br>    } else {<br>        [do other stuff]<br>    }<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
