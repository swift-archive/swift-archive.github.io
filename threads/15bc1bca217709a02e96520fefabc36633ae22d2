<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>on Fri Jan 29 2016, Alex Migicovsky &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 29, 2016, at 8:33 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Jan 28 2016, Alex Migicovsky<br>&gt;<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 27, 2016, at 3:33 PM, Jordan Rose via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 26, 2016, at 18:06, Dany St-Amant via swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit<br>&gt;&gt;&gt;&gt;&gt;&gt; :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt;&gt;&gt;&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt;&gt;&gt;&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt;&gt;&gt;&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt;&gt;&gt;&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How about expect()? Should not have much string attached to it. Only thing coming to mind is the <br>&gt;&gt;&gt;&gt;&gt; TCL extension used for automation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That&#39;s not bad, but to me &quot;expect&quot; seems more open-ended than<br>&gt;&gt;&gt;&gt; &quot;require&quot; or &quot;precondition&quot;, i.e. &quot;if it isn&#39;t true, then what?&quot;. I<br>&gt;&gt;&gt;&gt; don&#39;t assume that it&#39;s going to be fatal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (It even feels a little like an optimization hint to me, like<br>&gt;&gt;&gt;&gt; &quot;expect(self.dynamicType === BaseClass.self)&quot;. It could still be a<br>&gt;&gt;&gt;&gt; subclass, but the compiler would know what the common case is.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Someone I spoke with had a good idea about this IMO. They recommended<br>&gt;&gt;&gt; we have debugAssert and releaseAssert (or debugRequire and<br>&gt;&gt;&gt; releaseRequire). I think this makes the semantics obvious and has<br>&gt;&gt;&gt; consistent terminology between the functions. There’s no question at<br>&gt;&gt;&gt; the call site what was intended.<br>&gt;&gt; <br>&gt;&gt; Here&#39;s the problem with that suggestion: these things really have<br>&gt;&gt; completely different purposes; we don&#39;t want them to lose the semantic<br>&gt;&gt; distinction that &quot;this is a sanity check (assert)&quot; and &quot;this is checking<br>&gt;&gt; whether my client is breaking his contract (precondition).”  <br>&gt;<br>&gt; I think that naming convention works fine as long as you think about<br>&gt; the behavior as tied to how the module that contains that code is<br>&gt; compiled, right? If you use debugAssert in a module that compiles as<br>&gt; debug, then that assert will be checked. If you use releaseAssert, it<br>&gt; will be checked in both release and debug. Maybe I’m missing something<br>&gt; here though...<br>&gt;<br>&gt; One thing I’d really like to improve about the current naming is<br>&gt; making it obvious at the call site what the behavior of the function<br>&gt; is. I find that with the current names it’s just a memorization<br>&gt; game—and I’m not good at memorization :-)<br></p><p>You&#39;re not supposed to think about the behavior when you use it.  You&#39;re<br>supposed to ask, &quot;am I checking to make sure that I haven&#39;t messed up<br>(e.g. broken invariants), or that my client hasn&#39;t messed up<br>(precondition violation)?&quot;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>January 30, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 3:03 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jan 29 2016, Alex Migicovsky &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 29, 2016, at 8:33 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Thu Jan 28 2016, Alex Migicovsky<br>&gt;&gt; <br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 27, 2016, at 3:33 PM, Jordan Rose via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 26, 2016, at 18:06, Dany St-Amant via swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Le 26 janv. 2016 à 19:39, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; a écrit<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Tue Jan 26 2016, Charles Kissinger &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I agree with all of the small criticisms mentioned below by Radoslaw<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; except for the renaming of precondition() to require(). I think it is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; an improvement that it describes an action now, just like assert().<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Interestingly, I was the one that insisted on that change, as I felt<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “precondition” was too much of a term-of-art and “require” would be more<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; accessible, but I am now regretting that decision.  This function is not<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; conceptually an action; like “assert,” it&#39;s a declarative statement, and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “precondition” conveyed that aspect much better, IMO.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; How about expect()? Should not have much string attached to it. Only thing coming to mind is the <br>&gt;&gt;&gt;&gt;&gt;&gt; TCL extension used for automation.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That&#39;s not bad, but to me &quot;expect&quot; seems more open-ended than<br>&gt;&gt;&gt;&gt;&gt; &quot;require&quot; or &quot;precondition&quot;, i.e. &quot;if it isn&#39;t true, then what?&quot;. I<br>&gt;&gt;&gt;&gt;&gt; don&#39;t assume that it&#39;s going to be fatal.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; (It even feels a little like an optimization hint to me, like<br>&gt;&gt;&gt;&gt;&gt; &quot;expect(self.dynamicType === BaseClass.self)&quot;. It could still be a<br>&gt;&gt;&gt;&gt;&gt; subclass, but the compiler would know what the common case is.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Someone I spoke with had a good idea about this IMO. They recommended<br>&gt;&gt;&gt;&gt; we have debugAssert and releaseAssert (or debugRequire and<br>&gt;&gt;&gt;&gt; releaseRequire). I think this makes the semantics obvious and has<br>&gt;&gt;&gt;&gt; consistent terminology between the functions. There’s no question at<br>&gt;&gt;&gt;&gt; the call site what was intended.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here&#39;s the problem with that suggestion: these things really have<br>&gt;&gt;&gt; completely different purposes; we don&#39;t want them to lose the semantic<br>&gt;&gt;&gt; distinction that &quot;this is a sanity check (assert)&quot; and &quot;this is checking<br>&gt;&gt;&gt; whether my client is breaking his contract (precondition).”  <br>&gt;&gt; <br>&gt;&gt; I think that naming convention works fine as long as you think about<br>&gt;&gt; the behavior as tied to how the module that contains that code is<br>&gt;&gt; compiled, right? If you use debugAssert in a module that compiles as<br>&gt;&gt; debug, then that assert will be checked. If you use releaseAssert, it<br>&gt;&gt; will be checked in both release and debug. Maybe I’m missing something<br>&gt;&gt; here though...<br>&gt;&gt; <br>&gt;&gt; One thing I’d really like to improve about the current naming is<br>&gt;&gt; making it obvious at the call site what the behavior of the function<br>&gt;&gt; is. I find that with the current names it’s just a memorization<br>&gt;&gt; game—and I’m not good at memorization :-)<br>&gt; <br>&gt; You&#39;re not supposed to think about the behavior when you use it.  You&#39;re<br>&gt; supposed to ask, &quot;am I checking to make sure that I haven&#39;t messed up<br>&gt; (e.g. broken invariants), or that my client hasn&#39;t messed up<br>&gt; (precondition violation)?”<br></p><p>If that’s really the intended axis `precondition` is better than `require` or similar.<br></p><p>Another outlook on asserts is essentially that you should classify each potential assertion on two axes:<br></p><p>- semantic importance of checked invariant (e.g. “expected” vs “requirement”)<br>- performance impact of check (e.g. negligible, moderate overhead, or materially-slower (e.g. O(n) -&gt; O(n^2))<br></p><p>…and then use a suitably-“strong” strength-of-assertion for that setting.<br></p><p>I think at least a few of us have been interpreting the two assertion types along these lines—in spite of the name!—whence the focus on the “what is included in which build types?” behavior.<br></p><p>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/727c77cb/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
