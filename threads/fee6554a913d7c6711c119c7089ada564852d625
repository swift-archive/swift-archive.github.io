<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fd221d082a59b14bd305d6fb3866e08?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Coen Wessels</string> &lt;c.dewessels at gmail.com&gt;<p>December  7, 2015 at 02:00:00pm</p></header><div class="content"><p>Since the linux port is available everybody is implementing their own HTTP<br>server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift.<br>I think introducing a default http web server protocol(swift protocol) in<br>the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot<br>of fragmentation in interfaces.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/fee6d625/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/afb1af7924cbadd912a8b5b2f1308bba?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>John Siracusa</string> &lt;siracusa at gmail.com&gt;<p>December  7, 2015 at 10:00:00am</p></header><div class="content"><p>The very first thing I considered writing in Swift is an implementation of<br>Plack (http://plackperl.org/). It seems like every language benefits from<br>having something like this (Rack in Ruby, WSGI in Python, etc.), even if<br>only to insulate web applications from the web server implementation. I&#39;m<br>not sure if a language benefits from having 20 things like this, at least<br>in the long run…<br></p><p>-John<br></p><p><br>On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Since the linux port is available everybody is implementing their own HTTP<br>&gt; server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift.<br>&gt; I think introducing a default http web server protocol(swift protocol) in<br>&gt; the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot<br>&gt; of fragmentation in interfaces.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/10677f0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc2018ce0c170425a51033a54850a538?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Lukas Stabe</string> &lt;ahti333 at gmail.com&gt;<p>December  7, 2015 at 05:00:00pm</p></header><div class="content"><p>The [Nest project](https://github.com/nestproject/Nest &lt;https://github.com/nestproject/Nest&gt;) seems to aim to be something like this.<br></p><p>While I agree that a Rack/WSGI/Plack equivalent would be benificial to have, I don’t think it fits the current goals of the stdlib (providing basic data structures and algorithms) for now.<br></p><p>Lukas<br></p><p>&gt; On 07 Dec 2015, at 16:27, John Siracusa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The very first thing I considered writing in Swift is an implementation of Plack (http://plackperl.org/ &lt;http://plackperl.org/&gt;). It seems like every language benefits from having something like this (Rack in Ruby, WSGI in Python, etc.), even if only to insulate web applications from the web server implementation. I&#39;m not sure if a language benefits from having 20 things like this, at least in the long run…<br>&gt; <br>&gt; -John<br>&gt; <br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift &lt;https://github.com/search?utf8=%E2%9C%93&amp;q=http+language%3Aswift&gt;. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/d00a4b0a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0ab9e40f73106b42eaa9724c02b6ad8?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Simon Pilkington</string> &lt;simonmpilkington at icloud.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>I agree that things like this are seperate to the stdlib but I think it would be preferable that they be controlled as part the Swift project. If you look at Java EE and their JSR specs, they are authoritative because they are part of the platform and not a loosely coupled side project. This is not to say they can’t or shouldn’t start out as side projects but I think there should be some process for bringing them in to be defined as part the Swift project.<br></p><p>&gt; On 7 Dec 2015, at 8:24 AM, Lukas Stabe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The [Nest project](https://github.com/nestproject/Nest &lt;https://github.com/nestproject/Nest&gt;) seems to aim to be something like this.<br>&gt; <br>&gt; While I agree that a Rack/WSGI/Plack equivalent would be benificial to have, I don’t think it fits the current goals of the stdlib (providing basic data structures and algorithms) for now.<br>&gt; <br>&gt; Lukas<br>&gt; <br>&gt;&gt; On 07 Dec 2015, at 16:27, John Siracusa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The very first thing I considered writing in Swift is an implementation of Plack (http://plackperl.org/ &lt;http://plackperl.org/&gt;). It seems like every language benefits from having something like this (Rack in Ruby, WSGI in Python, etc.), even if only to insulate web applications from the web server implementation. I&#39;m not sure if a language benefits from having 20 things like this, at least in the long run…<br>&gt;&gt; <br>&gt;&gt; -John<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift &lt;https://github.com/search?utf8=%E2%9C%93&amp;q=http+language%3Aswift&gt;. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/f12aa7fa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  8, 2015 at 01:00:00am</p></header><div class="content"><p>I would suggest against implementing HTTP protocol directly unless you are willing to tackle complexities like TLS, HTTP/2 and even supporting other languages directly. We can implement the FastCGI protocol and let the user piece together the final website using a purpose-built Web server software that implements all above like nginx.<br></p><p>FastCGI is a mature protocol so it is safe and stable to track (while HTTP is receiving quick development in both HTTP/2 and TLS layers), has the benefit of being able to be executed on a separate machine from the Web server so vulnerability can be isolated and would be a natural fit for load balancing, and is widely used in hosting other languages like PHP, Python and Perl.<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 8, 2015, at 00:24, Lukas Stabe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The [Nest project](https://github.com/nestproject/Nest) seems to aim to be something like this.<br>&gt; <br>&gt; While I agree that a Rack/WSGI/Plack equivalent would be benificial to have, I don’t think it fits the current goals of the stdlib (providing basic data structures and algorithms) for now.<br>&gt; <br>&gt; Lukas<br>&gt; <br>&gt;&gt; On 07 Dec 2015, at 16:27, John Siracusa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The very first thing I considered writing in Swift is an implementation of Plack (http://plackperl.org/). It seems like every language benefits from having something like this (Rack in Ruby, WSGI in Python, etc.), even if only to insulate web applications from the web server implementation. I&#39;m not sure if a language benefits from having 20 things like this, at least in the long run…<br>&gt;&gt; <br>&gt;&gt; -John<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/7488fa57/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff38f1fb583cc22cccd57a30fc9804e0?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Simon Pilkington</string> &lt;simonmpilkington at me.com&gt;<p>December  7, 2015 at 09:00:00am</p></header><div class="content"><p>I agree that things like this are seperate to the stdlib but I think it would be preferable that they be controlled as part the Swift project. If you look at Java EE and their JSR specs, they are authoritative because they are part of the platform and not a loosely coupled side project. This is not to say they can’t or shouldn’t start out as side projects but I think there should be some process for bringing them in to be defined as part the Swift project.<br></p><p><br>&gt; On 7 Dec 2015, at 8:24 AM, Lukas Stabe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The [Nest project](https://github.com/nestproject/Nest &lt;https://github.com/nestproject/Nest&gt;) seems to aim to be something like this.<br>&gt; <br>&gt; While I agree that a Rack/WSGI/Plack equivalent would be benificial to have, I don’t think it fits the current goals of the stdlib (providing basic data structures and algorithms) for now.<br>&gt; <br>&gt; Lukas<br>&gt; <br>&gt;&gt; On 07 Dec 2015, at 16:27, John Siracusa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The very first thing I considered writing in Swift is an implementation of Plack (http://plackperl.org/ &lt;http://plackperl.org/&gt;). It seems like every language benefits from having something like this (Rack in Ruby, WSGI in Python, etc.), even if only to insulate web applications from the web server implementation. I&#39;m not sure if a language benefits from having 20 things like this, at least in the long run…<br>&gt;&gt; <br>&gt;&gt; -John<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift &lt;https://github.com/search?utf8=%E2%9C%93&amp;q=http+language%3Aswift&gt;. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/c40dc89e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December  7, 2015 at 01:00:00pm</p></header><div class="content"><p>I wouldn&#39;t hold up J2EE and associated JSR specs for associated utilities as an example of success.<br></p><p>J2EE’s history is largely one of failed standardization efforts: specs that suffered from being designed in a vacuum, being designed by committee, or being unable to keep up with evolving insights, needs, and expectations.<br></p><p>The most successful API standardization JSRs have tended to be ones that abstracted third-party projects that already developed and honed _outside_ the JSR process. The spectacular failure of Entity Beans and their wholesale replacement by Hibernate is a prime example, but not the only one.<br></p><p>The core team’s phase 3 goals sound right to me: achieve core stability before expanding the domain of what is “core.”<br></p><p>There are still important problems and gaps with the language’s semantics to be solved.<br></p><p>Cheers,<br></p><p>Paul<br></p><p><br>&gt; On Dec 7, 2015, at 11:16 AM, Simon Pilkington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that things like this are seperate to the stdlib but I think it would be preferable that they be controlled as part the Swift project. If you look at Java EE and their JSR specs, they are authoritative because they are part of the platform and not a loosely coupled side project. This is not to say they can’t or shouldn’t start out as side projects but I think there should be some process for bringing them in to be defined as part the Swift project.<br>&gt; <br>&gt; <br>&gt;&gt; On 7 Dec 2015, at 8:24 AM, Lukas Stabe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The [Nest project](https://github.com/nestproject/Nest &lt;https://github.com/nestproject/Nest&gt;) seems to aim to be something like this.<br>&gt;&gt; <br>&gt;&gt; While I agree that a Rack/WSGI/Plack equivalent would be benificial to have, I don’t think it fits the current goals of the stdlib (providing basic data structures and algorithms) for now.<br>&gt;&gt; <br>&gt;&gt; Lukas<br>&gt;&gt; <br>&gt;&gt;&gt; On 07 Dec 2015, at 16:27, John Siracusa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The very first thing I considered writing in Swift is an implementation of Plack (http://plackperl.org/ &lt;http://plackperl.org/&gt;). It seems like every language benefits from having something like this (Rack in Ruby, WSGI in Python, etc.), even if only to insulate web applications from the web server implementation. I&#39;m not sure if a language benefits from having 20 things like this, at least in the long run…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -John<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift &lt;https://github.com/search?utf8=%E2%9C%93&amp;q=http+language%3Aswift&gt;. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/9b21bd09/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff38f1fb583cc22cccd57a30fc9804e0?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Simon Pilkington</string> &lt;simonmpilkington at me.com&gt;<p>December  7, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On 7 Dec 2015, at 11:09 AM, Paul Cantrell &lt;cantrell at pobox.com&gt; wrote:<br>&gt; <br>&gt; I wouldn&#39;t hold up J2EE and associated JSR specs for associated utilities as an example of success.<br>&gt; <br>&gt; J2EE’s history is largely one of failed standardization efforts: specs that suffered from being designed in a vacuum, being designed by committee, or being unable to keep up with evolving insights, needs, and expectations.<br></p><p>I completely agree, particularly on the specifics. I definitely wasn’t trying to hold the JSR specs as the gold standard of what should be done but rather highlighting that there are advantages - particularly in some large enterprise - for such formalisation.<br></p><p>&gt; <br>&gt; The most successful API standardization JSRs have tended to be ones that abstracted third-party projects that already developed and honed _outside_ the JSR process. The spectacular failure of Entity Beans and their wholesale replacement by Hibernate is a prime example, but not the only one.<br></p><p>True and that is really how such a process would ideally work - as an example, JSR 330 taking a lot of a dependency injection work that projects such as Spring had baked externally and (mostly successfully) formalising it more broadly.<br></p><p>&gt; <br>&gt; The core team’s phase 3 goals sound right to me: achieve core stability before expanding the domain of what is “core.”<br>&gt; <br>&gt; There are still important problems and gaps with the language’s semantics to be solved.<br></p><p>Absolutely and I think https://github.com/apple/swift-evolution#out-of-scope &lt;https://github.com/apple/swift-evolution#out-of-scope&gt; now strikes the correct balance between short term focus and long term evolution.<br></p><p>Cheers,<br>Simon<br></p><p>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Paul<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 7, 2015, at 11:16 AM, Simon Pilkington via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that things like this are seperate to the stdlib but I think it would be preferable that they be controlled as part the Swift project. If you look at Java EE and their JSR specs, they are authoritative because they are part of the platform and not a loosely coupled side project. This is not to say they can’t or shouldn’t start out as side projects but I think there should be some process for bringing them in to be defined as part the Swift project.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Dec 2015, at 8:24 AM, Lukas Stabe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The [Nest project](https://github.com/nestproject/Nest &lt;https://github.com/nestproject/Nest&gt;) seems to aim to be something like this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I agree that a Rack/WSGI/Plack equivalent would be benificial to have, I don’t think it fits the current goals of the stdlib (providing basic data structures and algorithms) for now.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Lukas<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 07 Dec 2015, at 16:27, John Siracusa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The very first thing I considered writing in Swift is an implementation of Plack (http://plackperl.org/ &lt;http://plackperl.org/&gt;). It seems like every language benefits from having something like this (Rack in Ruby, WSGI in Python, etc.), even if only to insulate web applications from the web server implementation. I&#39;m not sure if a language benefits from having 20 things like this, at least in the long run…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -John<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Dec 7, 2015 at 9:08 AM, Coen Wessels via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift &lt;https://github.com/search?utf8=%E2%9C%93&amp;q=http+language%3Aswift&gt;. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/583d9ba8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  7, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; Since the linux port is available everybody is implementing their own HTTP server framework https://github.com/search?utf8=✓&amp;q=http+language%3Aswift. I think introducing a default http web server protocol(swift protocol) in the stdlib, something like rack(ruby) or plug(elixir), would prevent a lot of fragmentation in interfaces.<br></p><p>This kind of thing seems to be out of scope for the core Swift project, just as the request for a common logging system was.<br></p><p>(However, I took a crack at this problem a few months ago, and managed to get something running on GCDWebServer: https://github.com/brentdax/WebResponder)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc2018ce0c170425a51033a54850a538?s=50"></div><header><strong>HTTP webserver protocol&#39;s</strong> from <string>Lukas Stabe</string> &lt;ahti333 at gmail.com&gt;<p>December  8, 2015 at 05:00:00am</p></header><div class="content"><p>&gt; This kind of thing seems to be out of scope for the core Swift project, just as the request for a common logging system was.<br>Indeed it is. have a look at the [&quot;Out of scope”-section of the Swift 3.0 development goals](https://github.com/apple/swift-evolution#out-of-scope &lt;https://github.com/apple/swift-evolution#out-of-scope&gt;). it states, among others:<br></p><p>&gt; 	• Major new Library Functionality: The Swift Standard Library is focused on providing core &quot;language&quot; functionality as well as common datastructures. The &quot;corelibs&quot; projects are focused on providing existing Foundation functionality in a portable way. Major new libraries (e.g. a new Logging subsystem) are best developed as independent projects on GitHub (or elsewhere) and organized with the Swift Package Manager. Beyond Swift 3 we may consider standardizing popular packages or expanding the scope of the project. We will consider minor extensions to the existing feature set.<br></p><p><br>- Lukas<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/610cc58f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
