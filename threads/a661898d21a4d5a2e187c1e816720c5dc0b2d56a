<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Swift3][Linux][URLSession]: Core dump when trying to make simple HTTP request</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 27, 2016 at 03:00:00pm</p></header><div class="content"><p>Pasting a reply on behalf of Matt Wright (cc&#39;d):<br></p><p>&gt; On Oct 27, 2016, at 1:57 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; From: Steven Harms via swift-users &lt;swift-users at swift.org&gt;<br>&gt; Subject: [Swift3][Linux][URLSession]: Core dump when trying to make simple HTTP request<br>...&lt;schnipp 40&gt;...<br>&gt; Date: October 27, 2016 at 5:01:58 AM PDT<br>&gt; To: swift-users at swift.org<br>&gt; Reply-To: Steven Harms &lt;sgharms at stevengharms.com&gt;<br>&gt; <br>&gt; <br>&gt; Hello Swift,<br>&gt; <br>&gt; I&#39;ve been trying out Swift as a general utility language on the server (replacing Ruby or Node). I&#39;m trying to write a simple image retriever via HTTP as a learning project.<br>&gt; <br>&gt; Inspired by this [gist][], I&#39;ve written the following:<br>&gt; <br>&gt; let queue = DispatchQueue.global(qos: .background)<br>&gt; <br>&gt; let sessionConfiguration = URLSessionConfiguration.default<br>&gt; let session = URLSession(configuration: sessionConfiguration)<br>&gt; <br>&gt; print(&quot;staring sync&quot;)<br>&gt; queue.async(execute: {<br>&gt;     print(&quot;&gt;&gt;&gt; [\(queue.label)]: At the queue start&quot;)<br>&gt;     print(&quot;x&quot;)<br>&gt;     let task = session.dataTask(with: URL(string: &quot;http://google.com&quot;)!, completionHandler: {<br>&gt;         (data, response, error) in<br>&gt;         print(&quot;Task ran!&quot;)<br>&gt;     })<br>&gt;     print(&quot;y&quot;)<br>&gt;     task.resume()<br>&gt;     print(&quot;z&quot;)<br>&gt; })<br>&gt; print(&quot;ending sync&quot;)<br>&gt; <br>&gt; With output:<br>&gt; <br>&gt; staring sync<br>&gt; ending sync<br>&gt; <br>&gt; or...<br>&gt; <br>&gt; staring sync<br>&gt; ending sync<br>&gt; &gt;&gt;&gt; [com.apple.root.background-qos]: At the queue start<br>&gt; x<br>&gt; y<br>&gt; y<br>&gt; z<br>&gt; <br>&gt; Whoa.<br>&gt; <br>&gt; At this point I&#39;m going to have to confess that I need some help clarifying my model.<br>&gt; <br>&gt; 1. How did point &quot;y&quot; get fired twice? Or how did it happen not at all?<br></p><p>The double-fire is something I can’t immediately come up with an<br>explanation. It might be specific to the Linux dispatch<br>implementation, which I’m not well versed on but it’s very strange<br>that it would print twice. Not firing at all is likely because his<br>snippet of code exited before the work was run on another thread. The<br>“main” thread here either has to wait for the session work to finish<br>explicitly, or call dispatch_main() to cede control of the main thread<br>to the system (and subsequently exit out of the tool somewhere else).<br></p><p>&gt; 2. How did my callback for dataTask *never* fire? Even if the connection task *failed* the handler<br>ought have fired, no?<br></p><p>Likely similar to (1), though if URLSession uses runloops (Linux?)<br>then it could also be because the runloop was never run anywhere. On<br>Darwin I’d suspect the runloop for URLSession wasn’t running, I don’t<br>know how it works on Linux.<br></p><p>&gt; 3. I didn&#39;t want to bring this whole queue business into the<br>&gt; picture, but it appears that without it the program exits before the<br>&gt; handler has a chance to fire.<br></p><p>Probably similar to the issues in (1) and (2). If the snippet exits after running then a lot of this<br>asynchronously scheduled work will never happen.<br></p><p>&gt; 4. Changing to a queue.sync from queue.async consistently produces the output I expect, but does<br>not fire my completionHandler still.<br></p><p>This forces the queue.sync to run in-line (on the current thread) but<br>the snippet will then likely still exit before anything happens to<br>cause the URLSession to finish.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/45dfb57f85e0233b013388436140a922?s=50"></div><header><strong>[Swift3][Linux][URLSession]: Core dump when trying to make simple HTTP request</strong> from <string>Steven Harms</string> &lt;sgharms at stevengharms.com&gt;<p>October 29, 2016 at 12:00:00pm</p></header><div class="content"><p>All,<br></p><p>Thanks for all your help thus far. I&#39;ll have some time this weekend to try<br>things out but wanted to let you know that I&#39;m only using Linux-native<br>tools: vim, swift binary from the command line.<br></p><p>To this end: meaningful error messages, friendly API documentation,<br>comparability to Python / Node / Ruby for interacting with the web etc. are<br>all the things I&#39;m investigating. Apparently a task that&#39;s come up is<br>friendliness around coding around the asynchrony model ;)<br></p><p>Thanks for the suggestions, I&#39;ll work through them soon and report back.<br></p><p>On Thu, Oct 27, 2016 at 6:32 PM, Dave Abrahams via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Pasting a reply on behalf of Matt Wright (cc&#39;d):<br>&gt;<br>&gt; &gt; On Oct 27, 2016, at 1:57 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; From: Steven Harms via swift-users &lt;swift-users at swift.org&gt;<br>&gt; &gt; Subject: [Swift3][Linux][URLSession]: Core dump when trying to make<br>&gt; simple HTTP request<br>&gt; ...&lt;schnipp 40&gt;...<br>&gt; &gt; Date: October 27, 2016 at 5:01:58 AM PDT<br>&gt; &gt; To: swift-users at swift.org<br>&gt; &gt; Reply-To: Steven Harms &lt;sgharms at stevengharms.com&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Hello Swift,<br>&gt; &gt;<br>&gt; &gt; I&#39;ve been trying out Swift as a general utility language on the server<br>&gt; (replacing Ruby or Node). I&#39;m trying to write a simple image retriever via<br>&gt; HTTP as a learning project.<br>&gt; &gt;<br>&gt; &gt; Inspired by this [gist][], I&#39;ve written the following:<br>&gt; &gt;<br>&gt; &gt; let queue = DispatchQueue.global(qos: .background)<br>&gt; &gt;<br>&gt; &gt; let sessionConfiguration = URLSessionConfiguration.default<br>&gt; &gt; let session = URLSession(configuration: sessionConfiguration)<br>&gt; &gt;<br>&gt; &gt; print(&quot;staring sync&quot;)<br>&gt; &gt; queue.async(execute: {<br>&gt; &gt;     print(&quot;&gt;&gt;&gt; [\(queue.label)]: At the queue start&quot;)<br>&gt; &gt;     print(&quot;x&quot;)<br>&gt; &gt;     let task = session.dataTask(with: URL(string: &quot;http://google.com&quot;)!,<br>&gt; completionHandler: {<br>&gt; &gt;         (data, response, error) in<br>&gt; &gt;         print(&quot;Task ran!&quot;)<br>&gt; &gt;     })<br>&gt; &gt;     print(&quot;y&quot;)<br>&gt; &gt;     task.resume()<br>&gt; &gt;     print(&quot;z&quot;)<br>&gt; &gt; })<br>&gt; &gt; print(&quot;ending sync&quot;)<br>&gt; &gt;<br>&gt; &gt; With output:<br>&gt; &gt;<br>&gt; &gt; staring sync<br>&gt; &gt; ending sync<br>&gt; &gt;<br>&gt; &gt; or...<br>&gt; &gt;<br>&gt; &gt; staring sync<br>&gt; &gt; ending sync<br>&gt; &gt; &gt;&gt;&gt; [com.apple.root.background-qos]: At the queue start<br>&gt; &gt; x<br>&gt; &gt; y<br>&gt; &gt; y<br>&gt; &gt; z<br>&gt; &gt;<br>&gt; &gt; Whoa.<br>&gt; &gt;<br>&gt; &gt; At this point I&#39;m going to have to confess that I need some help<br>&gt; clarifying my model.<br>&gt; &gt;<br>&gt; &gt; 1. How did point &quot;y&quot; get fired twice? Or how did it happen not at all?<br>&gt;<br>&gt; The double-fire is something I can’t immediately come up with an<br>&gt; explanation. It might be specific to the Linux dispatch<br>&gt; implementation, which I’m not well versed on but it’s very strange<br>&gt; that it would print twice. Not firing at all is likely because his<br>&gt; snippet of code exited before the work was run on another thread. The<br>&gt; “main” thread here either has to wait for the session work to finish<br>&gt; explicitly, or call dispatch_main() to cede control of the main thread<br>&gt; to the system (and subsequently exit out of the tool somewhere else).<br>&gt;<br>&gt; &gt; 2. How did my callback for dataTask *never* fire? Even if the connection<br>&gt; task *failed* the handler<br>&gt; ought have fired, no?<br>&gt;<br>&gt; Likely similar to (1), though if URLSession uses runloops (Linux?)<br>&gt; then it could also be because the runloop was never run anywhere. On<br>&gt; Darwin I’d suspect the runloop for URLSession wasn’t running, I don’t<br>&gt; know how it works on Linux.<br>&gt;<br>&gt; &gt; 3. I didn&#39;t want to bring this whole queue business into the<br>&gt; &gt; picture, but it appears that without it the program exits before the<br>&gt; &gt; handler has a chance to fire.<br>&gt;<br>&gt; Probably similar to the issues in (1) and (2). If the snippet exits after<br>&gt; running then a lot of this<br>&gt; asynchronously scheduled work will never happen.<br>&gt;<br>&gt; &gt; 4. Changing to a queue.sync from queue.async consistently produces the<br>&gt; output I expect, but does<br>&gt; not fire my completionHandler still.<br>&gt;<br>&gt; This forces the queue.sync to run in-line (on the current thread) but<br>&gt; the snippet will then likely still exit before anything happens to<br>&gt; cause the URLSession to finish.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161029/aff9a863/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
