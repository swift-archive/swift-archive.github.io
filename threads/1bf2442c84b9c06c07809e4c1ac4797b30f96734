<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0b7bdc0c491a18e4aad6ae6004c3601?s=50"></div><header><strong>Changing postfix &quot;self&quot; to something clearer like &quot;type&quot;</strong> from <string>Ethan Diamond</string> &lt;edgewood7558 at gmail.com&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>+1 that I find .self confusing. This would only apply for classes,<br>structs, protocols and enums, right? What about this:<br></p><p>ClassType.class<br></p><p>StructType.struct<br></p><p>ProtocolType.protocol<br></p><p>EnumType.enum<br></p><p>None of those are likely to be used as actual properties anywhere.<br>They would be pretty safe keywords to reserve.<br></p><p>&gt;* On Dec 15, 2015, at 1:24 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>*&gt; &gt;* &quot;.self&quot; was chosen for a few reasons:<br>*&gt; &gt;* - The obvious choice was &quot;.class&quot;, given precedent in<br>Objective-C and Java, but not all types are classes.<br>*&gt;* - &#39;type&#39; is a very common property name, so we have tried very<br>hard to avoid taking it as a general keyword.<br>*&gt;* - &#39;type&#39; also always implies going up a level. &quot;obj.dynamicType&quot;<br>gives you back the type of &#39;obj&#39;, so wouldn&#39;t &quot;SomeClass.type&quot; give<br>you back the metaclass<br>&lt;http://sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html<br>&lt;http://sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html&gt;&gt;?<br>(Alternately, &quot;SomeType.staticType&#39; not being the same as<br>&#39;SomeType.dynamicType&quot; seems weird.)<br>*&gt;* - &#39;self&#39; is already a keyword.<br>*&gt;* - &quot;.self&quot; actually works in Objective-C as well.<br>*&gt;* - &quot;.self&quot; currently also applies to instances, doing exactly what<br>you think it does. This is nearly useless. In theory you could use it<br>to unwrap one level of optionality (&quot;doubleOpt?.self&quot;) but that<br>doesn&#39;t actually work today.<br>*&gt; &gt;* I read &quot;SomeType.self&quot; as &quot;SomeType itself, rather than an<br>instance of it (or associated type)&quot;.<br>*&gt; &gt;* (And before someone brings it up, we chose not to just allow<br>&quot;SomeType&quot; on its own because &quot;let x = SomeType&quot; is a likely typo for<br>&quot;let x: SomeType&quot;.)<br>*&gt; &gt;* I think coming up with a clearer name is possible here, but<br>there&#39;s plenty to consider. Still, certainly a reasonable thing to<br>bring up.<br>*&gt; &gt;* Best,<br>*&gt;* Jordan<br>*&gt; &gt;&gt;* On Dec 15, 2015, at 8:42 , Brandon Knope via swift-evolution<br>&lt;swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;mailto:swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt; wrote:<br>*&gt;&gt; &gt;&gt;* Doh! staticType is the obvious choice!<br>*&gt;&gt; &gt;&gt;* I agree that adding more keywords can be bad, but in this case<br>I think the clarity outweighs any downside:<br>*&gt;&gt; &gt;&gt;* SomeType.staticType<br>*&gt;&gt;* SomeType.self<br>*&gt;&gt; &gt;&gt;* To me (and I&#39;m sure many others) one is vastly more obvious<br>and easier to understand.<br>*&gt;&gt; &gt;&gt;* I still don&#39;t really understand what SomeType.self is trying<br>to convey upon first glance<br>*&gt;&gt; &gt;&gt;* Brandon<br>*&gt;&gt; &gt;&gt;* Sent from my iPad<br>*&gt;&gt; &gt;&gt;* On Dec 15, 2015, at 11:34 AM, Dennis Lysenko &lt;dennis.s.lysenko<br>at gmail.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;mailto:dennis.s.lysenko at gmail.com<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt; wrote:<br>*&gt;&gt; &gt;&gt;&gt;* +1. Side effects can be eliminated through code migration if<br>a suitable property name is chosen. Perhaps `staticType` to continue<br>in the vein of `dynamicType`?<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Main detractor is that creating more keywords isn&#39;t<br>necessarily a good thing.<br>*&gt;&gt;&gt; &gt;&gt;&gt;* On Tue, Dec 15, 2015 at 11:19 AM Brandon Knope via<br>swift-evolution &lt;swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;mailto:swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt; wrote:<br>*&gt;&gt;&gt;* One area of swift that is really not clear to me is when you<br>want to use the type of a class, struct, enum, etc as a value.<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Metatyping is explained here:<br>https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022&gt;<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022&gt;&gt;<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Example:<br>*&gt;&gt;&gt;* let metatype: SomeClass.Type = SomeClass.self<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Is there a reason why this isn&#39;t SomeClass.type? Everywhere<br>in the document this is explained as returning the type yet it&#39;s using<br>a postfix self to access the type.<br>*&gt;&gt;&gt; &gt;&gt;&gt;* I propose changing the postfix self to something more<br>obvious like &quot;type&quot;<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Going back to the example:<br>*&gt;&gt;&gt;* let metatype: SomeClass.Type = SomeClass.type<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Several reasons why I think this is better:<br>*&gt;&gt;&gt;* 1. Postfix self is not obvious as an option as you never see a<br>postfix self anywhere else<br>*&gt;&gt;&gt;* 2. &quot;self&quot; does not clearly explain that the type is being returned<br>*&gt;&gt;&gt;* 3. ObjC programmers are familiar with accessing the class type<br>by sending the &quot;class&quot; method to the class type. In this case it needs<br>to work on structs and enums, so a &quot;type&quot; method would make more<br>sense.<br>*&gt;&gt;&gt;* 4. Instances have a dynamicType method. For consistency,<br>classes, structs, etc., should have a type method<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Any other suggestions would be welcome.<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Brandon<br>*&gt;&gt;&gt; &gt;&gt;&gt;* Sent from my iPad<br>*&gt;&gt;&gt; &gt;&gt;&gt;* _______________________________________________<br>*&gt;&gt;&gt;* swift-evolution mailing list<br>*&gt;&gt;&gt;* swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;mailto:swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>*&gt;&gt;&gt;* https://lists.swift.org/mailman/listinfo/swift-evolution<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>*&gt;&gt;*  _______________________________________________<br>*&gt;&gt;* swift-evolution mailing list<br>*&gt;&gt;* swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;mailto:swift-evolution at swift.org<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>*&gt;&gt;* https://lists.swift.org/mailman/listinfo/swift-evolution<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;*<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/1bf26734/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Changing postfix &quot;self&quot; to something clearer like &quot;type&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  7, 2016 at 05:00:00pm</p></header><div class="content"><p>What do you do for tuples, function types, generic parameters, and protocol compositions?<br></p><p>I&#39;m being a bit facetious, but I do want to note that we went through a fair amount of bikeshedding ourselves; if there&#39;s an &quot;obvious&quot; answer, there&#39;s probably a reason we didn&#39;t pick it.<br></p><p>Best,<br>Jordan<br></p><p>&gt; On Jan 7, 2016, at 12:22, Ethan Diamond via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 that I find .self confusing. This would only apply for classes, structs, protocols and enums, right? What about this: <br>&gt; ClassType.class<br>&gt; StructType.struct<br>&gt; ProtocolType.protocol<br>&gt; EnumType.enum<br>&gt; None of those are likely to be used as actual properties anywhere. They would be pretty safe keywords to reserve.<br>&gt; &gt; On Dec 15, 2015, at 1:24 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; &quot;.self&quot; was chosen for a few reasons:<br>&gt; &gt; <br>&gt; &gt; - The obvious choice was &quot;.class&quot;, given precedent in Objective-C and Java, but not all types are classes.<br>&gt; &gt; - &#39;type&#39; is a very common property name, so we have tried very hard to avoid taking it as a general keyword.<br>&gt; &gt; - &#39;type&#39; also always implies going up a level. &quot;obj.dynamicType&quot; gives you back the type of &#39;obj&#39;, so wouldn&#39;t &quot;SomeClass.type&quot; give you back the metaclass &lt;http://sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html &lt;http://sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html&gt;&gt;? (Alternately, &quot;SomeType.staticType&#39; not being the same as &#39;SomeType.dynamicType&quot; seems weird.)<br>&gt; &gt; - &#39;self&#39; is already a keyword.<br>&gt; &gt; - &quot;.self&quot; actually works in Objective-C as well.<br>&gt; &gt; - &quot;.self&quot; currently also applies to instances, doing exactly what you think it does. This is nearly useless. In theory you could use it to unwrap one level of optionality (&quot;doubleOpt?.self&quot;) but that doesn&#39;t actually work today.<br>&gt; &gt; <br>&gt; &gt; I read &quot;SomeType.self&quot; as &quot;SomeType itself, rather than an instance of it (or associated type)&quot;.<br>&gt; &gt; <br>&gt; &gt; (And before someone brings it up, we chose not to just allow &quot;SomeType&quot; on its own because &quot;let x = SomeType&quot; is a likely typo for &quot;let x: SomeType&quot;.)<br>&gt; &gt; <br>&gt; &gt; I think coming up with a clearer name is possible here, but there&#39;s plenty to consider. Still, certainly a reasonable thing to bring up.<br>&gt; &gt; <br>&gt; &gt; Best,<br>&gt; &gt; Jordan<br>&gt; &gt; <br>&gt; &gt;&gt; On Dec 15, 2015, at 8:42 , Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;mailto:swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Doh! staticType is the obvious choice!<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I agree that adding more keywords can be bad, but in this case I think the clarity outweighs any downside:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; SomeType.staticType<br>&gt; &gt;&gt; SomeType.self <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; To me (and I&#39;m sure many others) one is vastly more obvious and easier to understand. <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I still don&#39;t really understand what SomeType.self is trying to convey upon first glance<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Brandon <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Sent from my iPad<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; On Dec 15, 2015, at 11:34 AM, Dennis Lysenko &lt;dennis.s.lysenko at gmail.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;mailto:dennis.s.lysenko at gmail.com &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; +1. Side effects can be eliminated through code migration if a suitable property name is chosen. Perhaps `staticType` to continue in the vein of `dynamicType`? <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Main detractor is that creating more keywords isn&#39;t necessarily a good thing.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:19 AM Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;mailto:swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; One area of swift that is really not clear to me is when you want to use the type of a class, struct, enum, etc as a value. <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Metatyping is explained here: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022 &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-XID_1022&gt;&gt;<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Example: <br>&gt; &gt;&gt;&gt; let metatype: SomeClass.Type = SomeClass.self<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Is there a reason why this isn&#39;t SomeClass.type? Everywhere in the document this is explained as returning the type yet it&#39;s using a postfix self to access the type. <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; I propose changing the postfix self to something more obvious like &quot;type&quot;<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Going back to the example:<br>&gt; &gt;&gt;&gt; let metatype: SomeClass.Type = SomeClass.type<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Several reasons why I think this is better:<br>&gt; &gt;&gt;&gt; 1. Postfix self is not obvious as an option as you never see a postfix self anywhere else <br>&gt; &gt;&gt;&gt; 2. &quot;self&quot; does not clearly explain that the type is being returned <br>&gt; &gt;&gt;&gt; 3. ObjC programmers are familiar with accessing the class type by sending the &quot;class&quot; method to the class type. In this case it needs to work on structs and enums, so a &quot;type&quot; method would make more sense. <br>&gt; &gt;&gt;&gt; 4. Instances have a dynamicType method. For consistency, classes, structs, etc., should have a type method<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Any other suggestions would be welcome. <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Brandon <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Sent from my iPad<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;mailto:swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;  _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;mailto:swift-evolution at swift.org &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/273e2e03/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
