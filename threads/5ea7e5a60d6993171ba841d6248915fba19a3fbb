<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0101: Reconfiguring sizeof and related functions into a unified MemoryLayout struct</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 13, 2016 at 04:00:00pm</p></header><div class="content"><p>on Wed Jul 13 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jul 12, 2016, at 4:53 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;<br>&gt; I think grouping these into a type is a sensible approach, but I don&#39;t<br>&gt; like that it allows the creation of meaningless MemoryLayout<br>&gt; instances. The simplest fix would be to make `MemoryLayout` an empty<br>&gt; enum instead of an empty struct. This would convey that no<br>&gt; MemoryLayout instances do or can exist.<br></p><p>+1.<br></p><p>&gt; However, I&#39;m also not really a fan of the way this<br>&gt; reads. `MemoryLayout&lt;Int&gt;` is an unnatural way to access this<br>&gt; functionality, quite different from how generics are typically<br>&gt; used. The heavy use of type members, with instance behavior as a<br>&gt; complete afterthought, is very unusual. If we are serious about use<br>&gt; sites being the most important thing, we ought to be concerned about<br>&gt; these use sites.<br></p><p>This design is specifically optimized to make use-sites clear and<br>noise-free.<br></p><p>The fact that using the type as a generic parameter very clearly states<br>that we&#39;re asking about the size of the type, and not the metatype, also<br>helps.<br></p><p>Lastly, any other design is more verbose, requiring &quot;.self&quot; on the<br>passed metatype.<br></p><p>&gt; I would prefer to see an instance-centric version of this design, with use sites along the lines of:<br>&gt;<br>&gt; 	MemoryLayout(of: Int.self).size<br>&gt; 	let buffer = UnsafeRawPointer.allocate(bytes: MemoryLayout(of: Int.self).stride * count)<br></p><p>I don&#39;t think that objectively reads better than:<br></p><p> 	let buffer = UnsafeRawPointer.allocate(bytes: MemoryLayout&lt;Int&gt;.stride * count)<br></p><p>I can understand your preference for it as a matter of taste, but I<br>think the second one is just as understandable and much less<br>noisy... thus clearer.<br></p><p>&gt; If the problem is that it would sometimes misbehave—for instance, when<br>&gt; someone tries to construct a MemoryLayout instance from a `type(of:)`<br>&gt; call—then we should make it behave correctly, or at least consider it<br>&gt; a bug to be fixed eventually.<br>&gt;<br>&gt; (Incidentally, I notice that the ABI documentation lists the size,<br>&gt; alignment, and stride as part of the type&#39;s value witness<br>&gt; table. &lt;https://github.com/apple/swift/blob/master/docs/ABI.rst#common-metadata-layout&gt;<br>&gt; Would it make sense to think of this as exposing the value witness<br>&gt; table as a user-visible type? <br></p><p>Definitely not.<br></p><p>&gt; How might that be different from what&#39;s being proposed here?)<br></p><p>This is stable, documented API; the value witness table is not. :-)<br></p><p>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;<br>&gt; Yes. We need to lock this down.<br>&gt;<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; See my comment above about how it reads.<br>&gt;<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; Well, it *is* more coherent and less magical than the C family.<br>&gt;<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; Quick reading, but I&#39;ve chimed in during previous discussions (though not in this latest round—family duties have kept me from my mail client).<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0101: Reconfiguring sizeof and related functions into a unified MemoryLayout struct</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 18, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 13, 2016, at 5:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Jul 13 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I think grouping these into a type is a sensible approach, but I don&#39;t<br>&gt;&gt; like that it allows the creation of meaningless MemoryLayout<br>&gt;&gt; instances. The simplest fix would be to make `MemoryLayout` an empty<br>&gt;&gt; enum instead of an empty struct. This would convey that no<br>&gt;&gt; MemoryLayout instances do or can exist.<br>&gt; <br>&gt; +1.<br></p><p>+1 as well.<br></p><p>/// Accesses the memory layout of `T` through its<br>/// `size`, `stride`, and `alignment` properties<br>public enum MemoryLayout {<br>    /// Returns the contiguous memory footprint of `T`.<br>    ///<br>    /// Does not include any dynamically-allocated or &quot;remote&quot;<br>    /// storage. In particular, `MemoryLayout.size`, when<br>    /// `T` is a class type, is the same regardless of how many<br>    /// stored properties `T` has.<br>    public static var size: Int { return _sizeof(T.self) }<br>    <br>    /// For instances of `T` in an `Array`, returns the number of<br>    /// bytes from the start of one instance to the start of the<br>    /// next. This is the same as the number of bytes moved when an<br>    /// `UnsafePointer` is incremented. `T` may have a lower minimal<br>    /// alignment that trades runtime performance for space<br>    /// efficiency. The result is always positive.<br>    public static var stride: Int { return _strideof(T.self) }<br>    <br>    /// Returns the default memory alignment of `T`.<br>    public static var alignment: Int { return _alignof(T.self) }<br>}<br></p><p><br>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/d708fc3a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0101: Reconfiguring sizeof and related functions into a unified MemoryLayout struct</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 18, 2016 at 11:00:00am</p></header><div class="content"><p>On Mon, Jul 18, 2016 at 10:57 AM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 13, 2016, at 5:39 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Wed Jul 13 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think grouping these into a type is a sensible approach, but I don&#39;t<br>&gt; like that<br>&gt; * it allows the creation of meaningless MemoryLayoutinstances*. The<br>&gt; simplest fix would be to make `MemoryLayout` an empty<br>&gt; enum instead of an empty struct. This would convey that no<br>&gt; MemoryLayout instances do or can exist.<br>&gt;<br>&gt;<br>&gt; +1.<br>&gt;<br>&gt;<br>&gt; +1 as well.<br>&gt;<br></p><p>I must be missing something. How would one create MemoryLayout instances<br>without a public initializer? Why would it matter if stdlib could formally<br>do so internally, given the plethora of much less harmless things that<br>stdlib can do internally?<br></p><p>/// Accesses the memory layout of `T` through its<br>&gt;<br>&gt; /// `size`, `stride`, and `alignment` properties<br>&gt; public enum MemoryLayout {<br>&gt;     /// Returns the contiguous memory footprint of `T`.<br>&gt;     ///<br>&gt;     /// Does not include any dynamically-allocated or &quot;remote&quot;<br>&gt;     /// storage. In particular, `MemoryLayout.size`, when<br>&gt;     /// `T` is a class type, is the same regardless of how many<br>&gt;     /// stored properties `T` has.<br>&gt;     public static var size: Int { return _sizeof(T.self) }<br>&gt;<br>&gt;     /// For instances of `T` in an `Array`, returns the number of<br>&gt;     /// bytes from the start of one instance to the start of the<br>&gt;     /// next. This is the same as the number of bytes moved when an<br>&gt;     /// `UnsafePointer` is incremented. `T` may have a lower minimal<br>&gt;     /// alignment that trades runtime performance for space<br>&gt;     /// efficiency. The result is always positive.<br>&gt;     public static var stride: Int { return _strideof(T.self) }<br>&gt;<br>&gt;     /// Returns the default memory alignment of `T`.<br>&gt;     public static var alignment: Int { return _alignof(T.self) }<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/98c6224b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0101: Reconfiguring sizeof and related functions into a unified MemoryLayout struct</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July 18, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 18, 2016, at 8:57 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Jul 13, 2016, at 5:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Wed Jul 13 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I think grouping these into a type is a sensible approach, but I don&#39;t<br>&gt;&gt;&gt; like that it allows the creation of meaningless MemoryLayout<br>&gt;&gt;&gt; instances. The simplest fix would be to make `MemoryLayout` an empty<br>&gt;&gt;&gt; enum instead of an empty struct. This would convey that no<br>&gt;&gt;&gt; MemoryLayout instances do or can exist.<br>&gt;&gt; <br>&gt;&gt; +1.<br>&gt; <br>&gt; +1 as well.<br></p><p>If MemoryLayout were not a generic type, its instances would not necessarily be meaningless; it could be used to lay out memory in a size + alignment-safe way.<br></p><p>You would need to restructure most of the API you&#39;ve been talking about, though.<br></p><p>John.<br></p><p>&gt; <br>&gt; /// Accesses the memory layout of `T` through its<br>&gt; /// `size`, `stride`, and `alignment` properties<br>&gt; public enum MemoryLayout {<br>&gt;     /// Returns the contiguous memory footprint of `T`.<br>&gt;     ///<br>&gt;     /// Does not include any dynamically-allocated or &quot;remote&quot;<br>&gt;     /// storage. In particular, `MemoryLayout.size`, when<br>&gt;     /// `T` is a class type, is the same regardless of how many<br>&gt;     /// stored properties `T` has.<br>&gt;     public static var size: Int { return _sizeof(T.self) }<br>&gt;     <br>&gt;     /// For instances of `T` in an `Array`, returns the number of<br>&gt;     /// bytes from the start of one instance to the start of the<br>&gt;     /// next. This is the same as the number of bytes moved when an<br>&gt;     /// `UnsafePointer` is incremented. `T` may have a lower minimal<br>&gt;     /// alignment that trades runtime performance for space<br>&gt;     /// efficiency. The result is always positive.<br>&gt;     public static var stride: Int { return _strideof(T.self) }<br>&gt;     <br>&gt;     /// Returns the default memory alignment of `T`.<br>&gt;     public static var alignment: Int { return _alignof(T.self) }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/a6600558/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
