<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a35bc5332e96bdfea1f10fd80b77c98c?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Martin Crossley</string> &lt;martin at crossleys.biz&gt;<p>January 17, 2016 at 11:00:00am</p></header><div class="content"><p>I’m going to apologise if this has already been proposed a million times before, but I can’t find a way to search the list. I’m a novice here guys :)<br></p><p>I propose adding a read-only ‘count’ property to enum types, that returns the number of cases; modelled on the API for arrays types.<br></p><p>This has been discussed previously in user communities (e.g. see http://stackoverflow.com/questions/27094878/how-do-i-get-the-count-of-a-swift-enum &lt;http://stackoverflow.com/questions/27094878/how-do-i-get-the-count-of-a-swift-enum&gt;) but it seems to me the proposed solutions are a little complex and inelegant.<br></p><p>To answer the question “what problem does this solve?”, I’m thinking of a situation like this - granted, this is a bit artificial, but imagine if there were a very large number of states…)<br></p><p>enum Tristate: Int {<br>    case High = 0<br>    case Low<br>    case Off<br>    mutating func next() {<br>        let nextState = (self.rawValue + 1) % Tristate.count<br>        self = Tristate(rawValue: nextState)!<br>    }<br>}<br></p><p>thanks, Martin<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160117/fc201f18/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 17, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; I propose adding a read-only ‘count’ property to enum types, that returns the number of cases; modelled on the API for arrays types.<br></p><p>Most discussions of this start with a `count` proposal, proceed to an `allValues` array or something of the sort, and then fizzle out before anyone actually writes a formal proposal. Feel free to break that pattern.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27cba2e668c6c6fb1f1d4669b1474397?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Arthur Ariel Sabintsev</string> &lt;arthur at sabintsev.com&gt;<p>January 20, 2016 at 01:00:00am</p></header><div class="content"><p>Why does it fizzle out? I&#39;ve seen many posts on the web from developers<br>looking for a way to return an array of all values from a Swift enum. The<br>only decent solution I&#39;ve seen work for enums that have Integer-type raw<br>values, a la Nate Cook: http://stackoverflow.com/a/27094913/814861<br></p><p>What I always found interesting was how enums play with Switch statements.<br>As Switch statements need to be exhaustive, they have the ability to check<br>to see if all cases of the enum have been explicitly declared (or<br>implicitly via the &#39;default&#39; case). This makes me think that extending<br>there should be a trivial way to add this functionality to enums.<br></p><p>On Sun, Jan 17, 2016 at 7:07 AM Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I propose adding a read-only ‘count’ property to enum types, that<br>&gt; returns the number of cases; modelled on the API for arrays types.<br>&gt;<br>&gt; Most discussions of this start with a `count` proposal, proceed to an<br>&gt; `allValues` array or something of the sort, and then fizzle out before<br>&gt; anyone actually writes a formal proposal. Feel free to break that pattern.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Best,<br></p><p>Arthur / Sabintsev.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/c746d8b0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January 19, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Why does it fizzle out?<br></p><p>Well, there&#39;s now a concrete proposal in the thread &quot;Pre-proposal: CaseEnumerable protocol (derived collection of enum cases)&quot;, so it seems like we&#39;ve broken this pattern.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27cba2e668c6c6fb1f1d4669b1474397?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Arthur Ariel Sabintsev</string> &lt;arthur at sabintsev.com&gt;<p>January 20, 2016 at 01:00:00am</p></header><div class="content"><p>Woohoo! Thanks for the update - will take a look in there now!<br></p><p>On Tue, Jan 19, 2016 at 8:29 PM Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>wrote:<br></p><p>&gt; &gt; Why does it fizzle out?<br>&gt;<br>&gt; Well, there&#39;s now a concrete proposal in the thread &quot;Pre-proposal:<br>&gt; CaseEnumerable protocol (derived collection of enum cases)&quot;, so it seems<br>&gt; like we&#39;ve broken this pattern.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; --<br>Best,<br></p><p>Arthur / Sabintsev.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/f4d39789/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 19, 2016 at 05:00:00pm</p></header><div class="content"><p>You can see the latest proposal draft at<br>https://github.com/jtbandes/swift-evolution/blob/case-enumerable/proposals/0000-derived-collection-of-enum-cases.md<br></p><p>And the discussion in this thread:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006876.html<br></p><p>Jacob Bandes-Storch<br></p><p>On Tue, Jan 19, 2016 at 5:29 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; Why does it fizzle out?<br>&gt;<br>&gt; Well, there&#39;s now a concrete proposal in the thread &quot;Pre-proposal:<br>&gt; CaseEnumerable protocol (derived collection of enum cases)&quot;, so it seems<br>&gt; like we&#39;ve broken this pattern.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/ae26646e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27cba2e668c6c6fb1f1d4669b1474397?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Arthur Ariel Sabintsev</string> &lt;arthur at sabintsev.com&gt;<p>January 20, 2016 at 01:00:00am</p></header><div class="content"><p>+1 from me as well. Proposed solution works very well. I&#39;d personally<br>prefer some convenience methods on enum to directly return array/count, but<br>the solution proposed is more &#39;Swift&#39;y.<br></p><p>On Tue, Jan 19, 2016 at 8:33 PM Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; You can see the latest proposal draft at<br>&gt; https://github.com/jtbandes/swift-evolution/blob/case-enumerable/proposals/0000-derived-collection-of-enum-cases.md<br>&gt;<br>&gt; And the discussion in this thread:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006876.html<br>&gt;<br>&gt; Jacob Bandes-Storch<br>&gt;<br>&gt; On Tue, Jan 19, 2016 at 5:29 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; Why does it fizzle out?<br>&gt;&gt;<br>&gt;&gt; Well, there&#39;s now a concrete proposal in the thread &quot;Pre-proposal:<br>&gt;&gt; CaseEnumerable protocol (derived collection of enum cases)&quot;, so it seems<br>&gt;&gt; like we&#39;ve broken this pattern.<br>&gt;&gt;<br>&gt;<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>Best,<br></p><p>Arthur / Sabintsev.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/d532c324/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a35bc5332e96bdfea1f10fd80b77c98c?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>Martin Crossley</string> &lt;martin at crossleys.biz&gt;<p>January 20, 2016 at 04:00:00pm</p></header><div class="content"><p>Excellent news!<br></p><p>Sent from my iPhone<br></p><p>&gt; On 20 Jan 2016, at 02:43, Arthur Ariel Sabintsev &lt;arthur at sabintsev.com&gt; wrote:<br>&gt; <br>&gt; +1 from me as well. Proposed solution works very well. I&#39;d personally prefer some convenience methods on enum to directly return array/count, but the solution proposed is more &#39;Swift&#39;y.<br>&gt; <br>&gt;&gt; On Tue, Jan 19, 2016 at 8:33 PM Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt; You can see the latest proposal draft at https://github.com/jtbandes/swift-evolution/blob/case-enumerable/proposals/0000-derived-collection-of-enum-cases.md<br>&gt;&gt; <br>&gt;&gt; And the discussion in this thread: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006876.html<br>&gt;&gt; <br>&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jan 19, 2016 at 5:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; &gt; Why does it fizzle out?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, there&#39;s now a concrete proposal in the thread &quot;Pre-proposal: CaseEnumerable protocol (derived collection of enum cases)&quot;, so it seems like we&#39;ve broken this pattern.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Best,<br>&gt; <br>&gt; Arthur / Sabintsev.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/50f0444c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Draft Proposal: count property for enum types</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 20, 2016 at 08:00:00am</p></header><div class="content"><p>Just a quick note regarding case names... Using string interpolation already does that *if* your enum does *not* conform to CustomStringConvertible. If Swift had a way &quot;undo&quot; protocol conformance, we&#39;d get that for free. Something like:<br>&quot;\(MyEnum.foo without CustomStringConvertible)&quot; or &quot;\(MyEnum.foo as !CustomStringConvertible)&quot;<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 20, 2016, at 07:47, Martin Crossley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Excellent news!<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 20 Jan 2016, at 02:43, Arthur Ariel Sabintsev &lt;arthur at sabintsev.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 from me as well. Proposed solution works very well. I&#39;d personally prefer some convenience methods on enum to directly return array/count, but the solution proposed is more &#39;Swift&#39;y.<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jan 19, 2016 at 8:33 PM Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt; You can see the latest proposal draft at https://github.com/jtbandes/swift-evolution/blob/case-enumerable/proposals/0000-derived-collection-of-enum-cases.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And the discussion in this thread: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006876.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob Bandes-Storch<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jan 19, 2016 at 5:29 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Why does it fizzle out?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Well, there&#39;s now a concrete proposal in the thread &quot;Pre-proposal: CaseEnumerable protocol (derived collection of enum cases)&quot;, so it seems like we&#39;ve broken this pattern.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Best,<br>&gt;&gt; <br>&gt;&gt; Arthur / Sabintsev.com<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160120/f7255428/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
