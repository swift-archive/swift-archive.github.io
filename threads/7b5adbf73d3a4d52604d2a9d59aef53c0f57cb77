<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 15, 2015 at 10:00:00pm</p></header><div class="content"><p>Would be great to have a ?= syntax.<br></p><p>So if<br></p><p>var a: [String]? is nil then<br></p><p>a ?= []<br></p><p>will set it with a new array but if it already has a value then it won&#39;t do<br>anything :)/<br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/7b5acb77/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/57885cfd0c4b4db16653e76d9e6f0266?s=50"></div><header><strong>Optional Setting</strong> from <string>Johan Jensen</string> &lt;jj at johanjensen.dk&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>There’s already<br></p><p>a = a ?? []<br></p><p>which is a shorthand for<br></p><p>a = a ? a : []<br></p><p>For some reason I find it slightly weird to see ?= but that might just be<br>because I’m not used to seeing it.<br></p><p>On Tue, Dec 15, 2015 at 11:53 PM, James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Would be great to have a ?= syntax.<br>&gt;<br>&gt; So if<br>&gt;<br>&gt; var a: [String]? is nil then<br>&gt;<br>&gt; a ?= []<br>&gt;<br>&gt; will set it with a new array but if it already has a value then it won&#39;t<br>&gt; do anything :)/<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/88954747/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>I filed this as rdar://22469833. It was marked as a duplicate of<br>rdar://19833281.<br></p><p>Jacob Bandes-Storch<br></p><p>On Tue, Dec 15, 2015 at 2:53 PM, James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Would be great to have a ?= syntax.<br>&gt;<br>&gt; So if<br>&gt;<br>&gt; var a: [String]? is nil then<br>&gt;<br>&gt; a ?= []<br>&gt;<br>&gt; will set it with a new array but if it already has a value then it won&#39;t<br>&gt; do anything :)/<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/6bf80658/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>And also http://www.openradar.me/radar?id=4518774854123520<br></p><p>Jacob<br></p><p>On Tue, Dec 15, 2015 at 3:00 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; I filed this as rdar://22469833. It was marked as a duplicate of<br>&gt; rdar://19833281.<br>&gt;<br>&gt; Jacob Bandes-Storch<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 2:53 PM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Would be great to have a ?= syntax.<br>&gt;&gt;<br>&gt;&gt; So if<br>&gt;&gt;<br>&gt;&gt; var a: [String]? is nil then<br>&gt;&gt;<br>&gt;&gt; a ?= []<br>&gt;&gt;<br>&gt;&gt; will set it with a new array but if it already has a value then it won&#39;t<br>&gt;&gt; do anything :)/<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/db07b65b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ebf471a3ae8df42a84f93a7efbbdbd0?s=50"></div><header><strong>Optional Setting</strong> from <string>Ash Furrow</string> &lt;ash at ashfurrow.com&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>Good idea – I miss the ||= conditional assignment operator from Ruby. <br></p><p>Ash<br></p><p><br>&gt; On Dec 15, 2015, at 5:53 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Would be great to have a ?= syntax.<br>&gt; <br>&gt; So if<br>&gt; <br>&gt; var a: [String]? is nil then<br>&gt; <br>&gt; a ?= [] <br>&gt; <br>&gt; will set it with a new array but if it already has a value then it won&#39;t do anything :)/<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/ceda4201/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>Me too :) so handy!<br></p><p>On Tue, Dec 15, 2015 at 11:03 PM, Ash Furrow via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Good idea – I miss the ||= conditional assignment operator from Ruby.<br>&gt;<br>&gt; Ash<br>&gt;<br>&gt;<br>&gt; On Dec 15, 2015, at 5:53 PM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Would be great to have a ?= syntax.<br>&gt;<br>&gt; So if<br>&gt;<br>&gt; var a: [String]? is nil then<br>&gt;<br>&gt; a ?= []<br>&gt;<br>&gt; will set it with a new array but if it already has a value then it won&#39;t<br>&gt; do anything :)/<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/ceeaf0ea/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/caa7226ca750e974668243476ffbafd5?s=50"></div><header><strong>Optional Setting</strong> from <string>Greg Titus</string> &lt;greg at omnigroup.com&gt;<p>December 15, 2015 at 02:00:00pm</p></header><div class="content"><p>I think that the existing syntax for “??” handles this need fairly well without requiring an additional assignment operator:<br></p><p>	a = a ?? []<br></p><p>- Greg<br></p><p>&gt; On Dec 15, 2015, at 2:53 PM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Would be great to have a ?= syntax.<br>&gt; <br>&gt; So if<br>&gt; <br>&gt; var a: [String]? is nil then<br>&gt; <br>&gt; a ?= [] <br>&gt; <br>&gt; will set it with a new array but if it already has a value then it won&#39;t do anything :)/<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/11aa62bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Optional Setting</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; I think that the existing syntax for “??” handles this need fairly well without requiring an additional assignment operator:<br>&gt; <br>&gt; 	a = a ?? []<br></p><p>When the variable is `a`, sure. When it’s `scoreboardViewController.selectedScoreboard`, not so much.<br></p><p>+1 from me, though I prefer the `??=` spelling to match the `??` operator more closely.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>One possible caveat is with custom setters.<br></p><p>If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>setter/willSet/didSet, or does it see the nil and short-circuit?<br></p><p>This can be implemented today:<br></p><p>    func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs == nil {<br>lhs = rhs() } }<br></p><p>However, the use of &quot;inout&quot; will always cause the didSets to be triggered<br>at the call site, when just using if-statements instead wouldn&#39;t have done<br>so.<br></p><p>Jacob<br></p><p>On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I think that the existing syntax for “??” handles this need fairly well<br>&gt; without requiring an additional assignment operator:<br>&gt; &gt;<br>&gt; &gt;       a = a ?? []<br>&gt;<br>&gt; When the variable is `a`, sure. When it’s<br>&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;<br>&gt; +1 from me, though I prefer the `??=` spelling to match the `??` operator<br>&gt; more closely.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/4e858fc6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>If it has a value already the nit wouldn&#39;t call anything as it technically<br>hasn&#39;t been set. Only if it already has a value does it try and set<br>something in which case the didSet is called :)<br></p><p>On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; One possible caveat is with custom setters.<br>&gt;<br>&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;<br>&gt; This can be implemented today:<br>&gt;<br>&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs == nil {<br>&gt; lhs = rhs() } }<br>&gt;<br>&gt; However, the use of &quot;inout&quot; will always cause the didSets to be triggered<br>&gt; at the call site, when just using if-statements instead wouldn&#39;t have done<br>&gt; so.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly well<br>&gt;&gt; without requiring an additional assignment operator:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;<br>&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;<br>&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??` operator<br>&gt;&gt; more closely.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/670130e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>I agree that would be nice. Just pointing out that it&#39;s nontrivial. If you<br>implement this custom operator today, you get different behavior.<br></p><p>Jacob<br></p><p>On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br></p><p>&gt; If it has a value already the nit wouldn&#39;t call anything as it technically<br>&gt; hasn&#39;t been set. Only if it already has a value does it try and set<br>&gt; something in which case the didSet is called :)<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;<br>&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;<br>&gt;&gt; This can be implemented today:<br>&gt;&gt;<br>&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs == nil {<br>&gt;&gt; lhs = rhs() } }<br>&gt;&gt;<br>&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be triggered<br>&gt;&gt; at the call site, when just using if-statements instead wouldn&#39;t have done<br>&gt;&gt; so.<br>&gt;&gt;<br>&gt;&gt; Jacob<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly<br>&gt;&gt;&gt; well without requiring an additional assignment operator:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/7f004960/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>:) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be short<br>circuited so didSet, willSet isn&#39;t called when there is a value already.<br>that would be awesome.<br></p><p>Could the willSet, didSet behaviour  be tied to the = behaviour ?  in your<br>example above the operation ultimately cascades into a = operation.<br></p><p>Same with operations such as *= or /= ultimately it has to do a = operation<br>to set the new calculated value.<br></p><p>On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If you<br>&gt; implement this custom operator today, you get different behavior.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it<br>&gt;&gt; technically hasn&#39;t been set. Only if it already has a value does it try and<br>&gt;&gt; set something in which case the didSet is called :)<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs == nil<br>&gt;&gt;&gt; { lhs = rhs() } }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be<br>&gt;&gt;&gt; triggered at the call site, when just using if-statements instead wouldn&#39;t<br>&gt;&gt;&gt; have done so.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly<br>&gt;&gt;&gt;&gt; well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/d1b58752/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Optional Setting</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>It&#39;s possible that @_transparent &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; is handled early enough in the compiler that we actually would get this behavior. I&#39;m not sure, though.<br></p><p>+1 from me whether or not didSet is always called, though. &quot;a = a ?? b&quot; always calls didSet anyway.<br></p><p>Jordan<br></p><p>P.S. There&#39;s nothing particularly useful in the Radar, except that together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br></p><p>&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be short circuited so didSet, willSet isn&#39;t called when there is a value already. that would be awesome.<br>&gt; <br>&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in your example above the operation ultimately cascades into a = operation. <br>&gt; <br>&gt; Same with operations such as *= or /= ultimately it has to do a = operation to set the new calculated value.<br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If you implement this custom operator today, you get different behavior.<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com &lt;mailto:james at supmenow.com&gt;&gt; wrote:<br>&gt; If it has a value already the nit wouldn&#39;t call anything as it technically hasn&#39;t been set. Only if it already has a value does it try and set something in which case the didSet is called :)<br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; One possible caveat is with custom setters.<br>&gt; <br>&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt; <br>&gt; This can be implemented today:<br>&gt; <br>&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs == nil { lhs = rhs() } }<br>&gt; <br>&gt; However, the use of &quot;inout&quot; will always cause the didSets to be triggered at the call site, when just using if-statements instead wouldn&#39;t have done so.<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; I think that the existing syntax for “??” handles this need fairly well without requiring an additional assignment operator:<br>&gt; &gt;<br>&gt; &gt;       a = a ?? []<br>&gt; <br>&gt; When the variable is `a`, sure. When it’s `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt; <br>&gt; +1 from me, though I prefer the `??=` spelling to match the `??` operator more closely.<br>&gt; <br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698 &lt;tel:%2B44%207523%20279%20698&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/dfd5ad04/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Optional Setting</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 15, 2015 at 06:00:00pm</p></header><div class="content"><p>+1 on ??= for consistency with ??<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 15, 2015, at 6:12 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s possible that @_transparent is handled early enough in the compiler that we actually would get this behavior. I&#39;m not sure, though.<br>&gt; <br>&gt; +1 from me whether or not didSet is always called, though. &quot;a = a ?? b&quot; always calls didSet anyway.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; P.S. There&#39;s nothing particularly useful in the Radar, except that together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br>&gt; <br>&gt;&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be short circuited so didSet, willSet isn&#39;t called when there is a value already. that would be awesome.<br>&gt;&gt; <br>&gt;&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in your example above the operation ultimately cascades into a = operation. <br>&gt;&gt; <br>&gt;&gt; Same with operations such as *= or /= ultimately it has to do a = operation to set the new calculated value.<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If you implement this custom operator today, you get different behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;&gt;&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it technically hasn&#39;t been set. Only if it already has a value does it try and set something in which case the didSet is called :)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs == nil { lhs = rhs() } }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be triggered at the call site, when just using if-statements instead wouldn&#39;t have done so.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??` operator more closely.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/f28669b9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>Would there be any caveats in introducing something like this, given the<br>raciness of the operator? I guess it&#39;s not really a big deal — the other<br>compound assignment operators (+=, -=, etc.) have the same problem.<br></p><p>I&#39;m not hearing much argument; sounds like many are in favor. I&#39;d be happy<br>to flesh out my radar into a &quot;??=&quot; proposal this evening, or someone else<br>can do it if they&#39;d like.<br></p><p>Jacob<br></p><p>On Tue, Dec 15, 2015 at 4:12 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; It&#39;s possible that @_transparent<br>&gt; &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; is<br>&gt; handled early enough in the compiler that we actually would get this<br>&gt; behavior. I&#39;m not sure, though.<br>&gt;<br>&gt; +1 from me whether or not didSet is always called, though. &quot;a = a ?? b&quot;<br>&gt; always calls didSet anyway.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; P.S. There&#39;s nothing particularly useful in the Radar, except that<br>&gt; together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and<br>&gt; &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br>&gt;<br>&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be<br>&gt; short circuited so didSet, willSet isn&#39;t called when there is a value<br>&gt; already. that would be awesome.<br>&gt;<br>&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in your<br>&gt; example above the operation ultimately cascades into a = operation.<br>&gt;<br>&gt; Same with operations such as *= or /= ultimately it has to do a =<br>&gt; operation to set the new calculated value.<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;  wrote:<br>&gt;<br>&gt;&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If<br>&gt;&gt; you implement this custom operator today, you get different behavior.<br>&gt;&gt;<br>&gt;&gt; Jacob<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it<br>&gt;&gt;&gt; technically hasn&#39;t been set. Only if it already has a value does it try and<br>&gt;&gt;&gt; set something in which case the didSet is called :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via swift-evolution<br>&gt;&gt;&gt;  &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt;&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs ==<br>&gt;&gt;&gt;&gt; nil { lhs = rhs() } }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be<br>&gt;&gt;&gt;&gt; triggered at the call site, when just using if-statements instead wouldn&#39;t<br>&gt;&gt;&gt;&gt; have done so.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;&gt;&gt;  &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly<br>&gt;&gt;&gt;&gt;&gt; well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/c777fcb6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 16, 2015 at 12:00:00am</p></header><div class="content"><p>Cool would be happy for you to do it :)  if you time, almost night here so<br>:) but happy for you to quote me in the proposal.<br></p><p><br></p><p>On Wed, Dec 16, 2015 at 12:17 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; Would there be any caveats in introducing something like this, given the<br>&gt; raciness of the operator? I guess it&#39;s not really a big deal — the other<br>&gt; compound assignment operators (+=, -=, etc.) have the same problem.<br>&gt;<br>&gt; I&#39;m not hearing much argument; sounds like many are in favor. I&#39;d be happy<br>&gt; to flesh out my radar into a &quot;??=&quot; proposal this evening, or someone else<br>&gt; can do it if they&#39;d like.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Tue, Dec 15, 2015 at 4:12 PM, Jordan Rose &lt;jordan_rose at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; It&#39;s possible that @_transparent<br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; is<br>&gt;&gt; handled early enough in the compiler that we actually would get this<br>&gt;&gt; behavior. I&#39;m not sure, though.<br>&gt;&gt;<br>&gt;&gt; +1 from me whether or not didSet is always called, though. &quot;a = a ?? b&quot;<br>&gt;&gt; always calls didSet anyway.<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt; P.S. There&#39;s nothing particularly useful in the Radar, except that<br>&gt;&gt; together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and<br>&gt;&gt; &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br>&gt;&gt;<br>&gt;&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be<br>&gt;&gt; short circuited so didSet, willSet isn&#39;t called when there is a value<br>&gt;&gt; already. that would be awesome.<br>&gt;&gt;<br>&gt;&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in<br>&gt;&gt; your example above the operation ultimately cascades into a = operation.<br>&gt;&gt;<br>&gt;&gt; Same with operations such as *= or /= ultimately it has to do a =<br>&gt;&gt; operation to set the new calculated value.<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com<br>&gt;&gt; &gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If<br>&gt;&gt;&gt; you implement this custom operator today, you get different behavior.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it<br>&gt;&gt;&gt;&gt; technically hasn&#39;t been set. Only if it already has a value does it try and<br>&gt;&gt;&gt;&gt; set something in which case the didSet is called :)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via<br>&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt;&gt;&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs ==<br>&gt;&gt;&gt;&gt;&gt; nil { lhs = rhs() } }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be<br>&gt;&gt;&gt;&gt;&gt; triggered at the call site, when just using if-statements instead wouldn&#39;t<br>&gt;&gt;&gt;&gt;&gt; have done so.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;  &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly<br>&gt;&gt;&gt;&gt;&gt;&gt; well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt;&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt;&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/10e98b18/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 16, 2015 at 12:00:00am</p></header><div class="content"><p>On second thoughts, I&#39;m preparing one :)<br></p><p>On Wed, Dec 16, 2015 at 12:24 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br></p><p>&gt; Cool would be happy for you to do it :)  if you time, almost night here so<br>&gt; :) but happy for you to quote me in the proposal.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 12:17 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Would there be any caveats in introducing something like this, given the<br>&gt;&gt; raciness of the operator? I guess it&#39;s not really a big deal — the other<br>&gt;&gt; compound assignment operators (+=, -=, etc.) have the same problem.<br>&gt;&gt;<br>&gt;&gt; I&#39;m not hearing much argument; sounds like many are in favor. I&#39;d be<br>&gt;&gt; happy to flesh out my radar into a &quot;??=&quot; proposal this evening, or someone<br>&gt;&gt; else can do it if they&#39;d like.<br>&gt;&gt;<br>&gt;&gt; Jacob<br>&gt;&gt;<br>&gt;&gt; On Tue, Dec 15, 2015 at 4:12 PM, Jordan Rose &lt;jordan_rose at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; It&#39;s possible that @_transparent<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; is<br>&gt;&gt;&gt; handled early enough in the compiler that we actually would get this<br>&gt;&gt;&gt; behavior. I&#39;m not sure, though.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; +1 from me whether or not didSet is always called, though. &quot;a = a ?? b&quot;<br>&gt;&gt;&gt; always calls didSet anyway.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; P.S. There&#39;s nothing particularly useful in the Radar, except that<br>&gt;&gt;&gt; together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and<br>&gt;&gt;&gt; &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be<br>&gt;&gt;&gt; short circuited so didSet, willSet isn&#39;t called when there is a value<br>&gt;&gt;&gt; already. that would be awesome.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in<br>&gt;&gt;&gt; your example above the operation ultimately cascades into a = operation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Same with operations such as *= or /= ultimately it has to do a =<br>&gt;&gt;&gt; operation to set the new calculated value.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;<br>&gt;&gt;&gt; jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If<br>&gt;&gt;&gt;&gt; you implement this custom operator today, you get different behavior.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it<br>&gt;&gt;&gt;&gt;&gt; technically hasn&#39;t been set. Only if it already has a value does it try and<br>&gt;&gt;&gt;&gt;&gt; set something in which case the didSet is called :)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via<br>&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt;&gt;&gt;&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs ==<br>&gt;&gt;&gt;&gt;&gt;&gt; nil { lhs = rhs() } }<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be<br>&gt;&gt;&gt;&gt;&gt;&gt; triggered at the call site, when just using if-statements instead wouldn&#39;t<br>&gt;&gt;&gt;&gt;&gt;&gt; have done so.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need fairly<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br></p><p><br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/f7de55e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 16, 2015 at 12:00:00am</p></header><div class="content"><p>Can you guys give me tips on how to improve this PR<br>https://github.com/apple/swift-evolution/pull/63 first time writing a<br>proposal or anything to do with a language. Let me know if there are points<br>I missed.<br></p><p>On Wed, Dec 16, 2015 at 12:26 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br></p><p>&gt; On second thoughts, I&#39;m preparing one :)<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 12:24 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Cool would be happy for you to do it :)  if you time, almost night here<br>&gt;&gt; so :) but happy for you to quote me in the proposal.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 12:17 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com<br>&gt;&gt; &gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Would there be any caveats in introducing something like this, given the<br>&gt;&gt;&gt; raciness of the operator? I guess it&#39;s not really a big deal — the other<br>&gt;&gt;&gt; compound assignment operators (+=, -=, etc.) have the same problem.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m not hearing much argument; sounds like many are in favor. I&#39;d be<br>&gt;&gt;&gt; happy to flesh out my radar into a &quot;??=&quot; proposal this evening, or someone<br>&gt;&gt;&gt; else can do it if they&#39;d like.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Tue, Dec 15, 2015 at 4:12 PM, Jordan Rose &lt;jordan_rose at apple.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It&#39;s possible that @_transparent<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; is<br>&gt;&gt;&gt;&gt; handled early enough in the compiler that we actually would get this<br>&gt;&gt;&gt;&gt; behavior. I&#39;m not sure, though.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; +1 from me whether or not didSet is always called, though. &quot;a = a ?? b&quot;<br>&gt;&gt;&gt;&gt; always calls didSet anyway.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; P.S. There&#39;s nothing particularly useful in the Radar, except that<br>&gt;&gt;&gt;&gt; together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and<br>&gt;&gt;&gt;&gt; &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be<br>&gt;&gt;&gt;&gt; short circuited so didSet, willSet isn&#39;t called when there is a value<br>&gt;&gt;&gt;&gt; already. that would be awesome.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in<br>&gt;&gt;&gt;&gt; your example above the operation ultimately cascades into a = operation.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Same with operations such as *= or /= ultimately it has to do a =<br>&gt;&gt;&gt;&gt; operation to set the new calculated value.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;<br>&gt;&gt;&gt;&gt; jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial. If<br>&gt;&gt;&gt;&gt;&gt; you implement this custom operator today, you get different behavior.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it<br>&gt;&gt;&gt;&gt;&gt;&gt; technically hasn&#39;t been set. Only if it already has a value does it try and<br>&gt;&gt;&gt;&gt;&gt;&gt; set something in which case the didSet is called :)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs ==<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; nil { lhs = rhs() } }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; triggered at the call site, when just using if-statements instead wouldn&#39;t<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; have done so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; fairly well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br></p><p><br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/559c671a/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Optional Setting</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 16, 2015 at 01:00:00am</p></header><div class="content"><p>I tend towards -1 for multiple reasons:<br></p><p>   - It has little value for local variables. In most cases you want to use<br>   the value you assign to a local variable and assigning it to an optional<br>   variable would require a subsequent unwrapping. In most cases where local<br>   variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a<br>   non-optional value iff z is non-optional.<br></p><p>   - It seems to be a rare use case that you set a value of an optional<br>   property which is currently nil and without also using that value directly<br>   within the same context. Quickly checking my Swift apps reveals only very<br>   little such use cases.<br></p><p>   - The remaining cases could expressed like &quot;object.property =<br>   object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>   While it is true that variable and property name could be very long,<br>   this is an unlikely case of an already rare case which decreases the value<br>   of the proposed assignment operator even further.<br></p><p>   - Most important though is that such an optional assignment operator<br>   would work differently from all other assignment operators. The right<br>   operand would never be executed if the variable being assigned is already<br>   non-nil. This will likely be unexpected for a lot of developers who expect<br>   similar behavior like in all other assignments.<br></p><p><br>On Wed, Dec 16, 2015 at 1:39 AM, James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Can you guys give me tips on how to improve this PR<br>&gt; https://github.com/apple/swift-evolution/pull/63 first time writing a<br>&gt; proposal or anything to do with a language. Let me know if there are points<br>&gt; I missed.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 12:26 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; On second thoughts, I&#39;m preparing one :)<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 12:24 AM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Cool would be happy for you to do it :)  if you time, almost night here<br>&gt;&gt;&gt; so :) but happy for you to quote me in the proposal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 12:17 AM, Jacob Bandes-Storch &lt;<br>&gt;&gt;&gt; jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Would there be any caveats in introducing something like this, given<br>&gt;&gt;&gt;&gt; the raciness of the operator? I guess it&#39;s not really a big deal — the<br>&gt;&gt;&gt;&gt; other compound assignment operators (+=, -=, etc.) have the same problem.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;m not hearing much argument; sounds like many are in favor. I&#39;d be<br>&gt;&gt;&gt;&gt; happy to flesh out my radar into a &quot;??=&quot; proposal this evening, or someone<br>&gt;&gt;&gt;&gt; else can do it if they&#39;d like.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 4:12 PM, Jordan Rose &lt;jordan_rose at apple.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It&#39;s possible that @_transparent<br>&gt;&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/TransparentAttr.rst&gt; is<br>&gt;&gt;&gt;&gt;&gt; handled early enough in the compiler that we actually would get this<br>&gt;&gt;&gt;&gt;&gt; behavior. I&#39;m not sure, though.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; +1 from me whether or not didSet is always called, though. &quot;a = a ??<br>&gt;&gt;&gt;&gt;&gt; b&quot; always calls didSet anyway.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; P.S. There&#39;s nothing particularly useful in the Radar, except that<br>&gt;&gt;&gt;&gt;&gt; together with the dups there are three suggested spellings: &quot;=?&quot;, &quot;?=&quot;, and<br>&gt;&gt;&gt;&gt;&gt; &quot;??=&quot;. My vote is with Brent for &quot;??=&quot;.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Dec 15, 2015, at 15:26 , James Campbell via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; :) Wasn&#39;t expecting it to be trivial. but yeah if it could somehow be<br>&gt;&gt;&gt;&gt;&gt; short circuited so didSet, willSet isn&#39;t called when there is a value<br>&gt;&gt;&gt;&gt;&gt; already. that would be awesome.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Could the willSet, didSet behaviour  be tied to the = behaviour ?  in<br>&gt;&gt;&gt;&gt;&gt; your example above the operation ultimately cascades into a = operation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Same with operations such as *= or /= ultimately it has to do a =<br>&gt;&gt;&gt;&gt;&gt; operation to set the new calculated value.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:23 PM, Jacob Bandes-Storch &lt;<br>&gt;&gt;&gt;&gt;&gt; jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I agree that would be nice. Just pointing out that it&#39;s nontrivial.<br>&gt;&gt;&gt;&gt;&gt;&gt; If you implement this custom operator today, you get different behavior.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:21 PM, James Campbell &lt;james at supmenow.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If it has a value already the nit wouldn&#39;t call anything as it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; technically hasn&#39;t been set. Only if it already has a value does it try and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; set something in which case the didSet is called :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 11:16 PM, Jacob Bandes-Storch via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; One possible caveat is with custom setters.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If &quot;a&quot; already has a value, does &quot;a ??= b&quot; call the custom<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; setter/willSet/didSet, or does it see the nil and short-circuit?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This can be implemented today:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     func ??=(inout lhs: T?, @autoclosure rhs: () -&gt; T?) { if lhs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; == nil { lhs = rhs() } }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; However, the use of &quot;inout&quot; will always cause the didSets to be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; triggered at the call site, when just using if-statements instead wouldn&#39;t<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; have done so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Dec 15, 2015 at 3:10 PM, Brent Royal-Gordon via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I think that the existing syntax for “??” handles this need<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; fairly well without requiring an additional assignment operator:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;       a = a ?? []<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; When the variable is `a`, sure. When it’s<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +1 from me, though I prefer the `??=` spelling to match the `??`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; operator more closely.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/92199104/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 15, 2015 at 07:00:00pm</p></header><div class="content"><p>On Tue, Dec 15, 2015 at 4:58 PM, Marc Knaup &lt;marc at knaup.koeln&gt; wrote:<br></p><p>&gt; I tend towards -1 for multiple reasons:<br>&gt;<br>&gt;    - It has little value for local variables. In most cases you want to<br>&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;    creates a non-optional value iff z is non-optional.<br>&gt;<br>&gt; Consider using it multiple times with the same variable<br></p><p>    var value = someInitialValue<br>    value ??= fallback1<br>    value ??= fallback2<br></p><p>Of course, this could also be &quot;let value = someInitialValue ?? falback1 ??<br>fallback2&quot;, which isn&#39;t necessarily more readable, but arguably better<br>because it uses let.<br></p><p><br>&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;    property which is currently nil and without also using that value directly<br>&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;    little such use cases.<br>&gt;<br>&gt; I think you&#39;re right that this is one of the most common cases. Without<br>this proposal:<br></p><p>    if self.property == nil { self.property = newValue [possibly optional] }<br>    if let value = self.property {<br>        // ...<br>    }<br></p><p>or<br></p><p>    let value: T<br>    if let v = self.property { value = v }<br>    else { value = newValue [non-optional]; self.property = value }<br>    // ...<br></p><p>With this proposal:<br></p><p>    self.property ??= newValue<br>    if let value = self.property {<br>        // ...<br>    }<br></p><p>I think the second is cleaner, but the difference isn&#39;t huge. You could<br>also have ??= return the new value, so you can embed it in a larger<br>expression/optional-binding, but that&#39;s not consistent with any of the<br>other compound assignment operators.<br></p><p>&gt;<br>&gt;    - Most important though is that such an optional assignment operator<br>&gt;    would work differently from all other assignment operators. The right<br>&gt;    operand would never be executed if the variable being assigned is already<br>&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;    similar behavior like in all other assignments.<br>&gt;<br>&gt; I disagree that this would be unexpected. It&#39;s consistent with how ??, &amp;&amp;,<br>and || work. (And now that ++ and -- are going away, it likely matters even<br>less.)<br></p><p>Anecdotally, I introduced this operator about 4 months ago to a codebase<br>with ~16,500 lines of Swift. It&#39;s been used 4 times.<br></p><p>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/87878089/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Optional Setting</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 16, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I tend towards -1 for multiple reasons:<br>&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt; <br>&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt; <br>&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt; <br>&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>I think these are all very good points. Seems like the only really practical use would be restricted to:<br>object.property ??= val<br></p><p>Instead of:<br>object.property = object.property ?? val<br></p><p>Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/79997120/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Optional Setting</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 16, 2015 at 07:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt; <br>&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt; <br>&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt; <br>&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt; object.property ??= val<br>&gt; <br>&gt; Instead of:<br>&gt; object.property = object.property ?? val<br>&gt; <br>&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br></p><p>After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br></p><p>    messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br></p><p>(Those are effectively real world variable names). <br></p><p>I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br></p><p>    messagesViewController.chatTitleName ??= “Default”<br></p><p>clears it up fairly well.<br></p><p>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/d1eb1ed2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Optional Setting</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>I&#39;m still uncertain whether that would solve the issue at the right<br>location.<br></p><p>How do you end up in such a situation where this is actually necessary?<br>Why do I not end up in such situations?<br>I&#39;d like to understand where the discrepancy comes from.<br></p><p>I.e. where do you define chatTitleName? Where else do you set chatTitleName?<br>Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br></p><p>On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I tend towards -1 for multiple reasons:<br>&gt;<br>&gt;    - It has little value for local variables. In most cases you want to<br>&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;    creates a non-optional value iff z is non-optional.<br>&gt;<br>&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;    property which is currently nil and without also using that value directly<br>&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;    little such use cases.<br>&gt;<br>&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;    While it is true that variable and property name could be very long,<br>&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;    of the proposed assignment operator even further.<br>&gt;<br>&gt;    - Most important though is that such an optional assignment operator<br>&gt;    would work differently from all other assignment operators. The right<br>&gt;    operand would never be executed if the variable being assigned is already<br>&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;    similar behavior like in all other assignments.<br>&gt;<br>&gt; I think these are all very good points. Seems like the only really<br>&gt; practical use would be restricted to:<br>&gt; object.property ??= val<br>&gt;<br>&gt; Instead of:<br>&gt; object.property = object.property ?? val<br>&gt;<br>&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator<br>&gt; is much more versatile as it can also be used to return a non-optional<br>&gt; value.<br>&gt;<br>&gt;<br>&gt; After perusing our Swift code it turns out that we use the long form (a =<br>&gt; a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;<br>&gt;     messagesViewController.chatTitleName =<br>&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;<br>&gt; (Those are effectively real world variable names).<br>&gt;<br>&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt; duplication and the proposed form..<br>&gt;<br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;<br>&gt; clears it up fairly well.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5dfd2d3c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Optional Setting</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>December 16, 2015 at 10:00:00am</p></header><div class="content"><p>While I used `||=` in Ruby all the time, where everything can be `nil`,<br>I&#39;ve found that Swift&#39;s Optional model is different enough that I&#39;ve never<br>really desired a `??=`, so I&#39;m a -1 for the proposal, as I see it<br>encouraging the use of optionals where a non-optional would be preferred.<br></p><p>With the `chatTitleName` example, I&#39;d probably make `&quot;Default&quot;` the default<br>argument on initialization (and make it so `chatTitleName` is not<br>optional), or I&#39;d move the `chatTitleName ?? &quot;Default&quot;` into the<br>presentation logic.<br></p><p>Stephen<br></p><p>On Wed, Dec 16, 2015 at 9:28 AM, Marc Knaup via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m still uncertain whether that would solve the issue at the right<br>&gt; location.<br>&gt;<br>&gt; How do you end up in such a situation where this is actually necessary?<br>&gt; Why do I not end up in such situations?<br>&gt; I&#39;d like to understand where the discrepancy comes from.<br>&gt;<br>&gt; I.e. where do you define chatTitleName? Where else do you set<br>&gt; chatTitleName?<br>&gt; Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;<br>&gt;&gt;    - It has little value for local variables. In most cases you want to<br>&gt;&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;&gt;    creates a non-optional value iff z is non-optional.<br>&gt;&gt;<br>&gt;&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;&gt;    property which is currently nil and without also using that value directly<br>&gt;&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;&gt;    little such use cases.<br>&gt;&gt;<br>&gt;&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;    While it is true that variable and property name could be very long,<br>&gt;&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;&gt;    of the proposed assignment operator even further.<br>&gt;&gt;<br>&gt;&gt;    - Most important though is that such an optional assignment operator<br>&gt;&gt;    would work differently from all other assignment operators. The right<br>&gt;&gt;    operand would never be executed if the variable being assigned is already<br>&gt;&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;&gt;    similar behavior like in all other assignments.<br>&gt;&gt;<br>&gt;&gt; I think these are all very good points. Seems like the only really<br>&gt;&gt; practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt;<br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;<br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ??<br>&gt;&gt; operator is much more versatile as it can also be used to return a<br>&gt;&gt; non-optional value.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; After perusing our Swift code it turns out that we use the long form (a =<br>&gt;&gt; a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt;&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt;<br>&gt;&gt;     messagesViewController.chatTitleName =<br>&gt;&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt;<br>&gt;&gt; (Those are effectively real world variable names).<br>&gt;&gt;<br>&gt;&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt;&gt; duplication and the proposed form..<br>&gt;&gt;<br>&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt;<br>&gt;&gt; clears it up fairly well.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/17de30f5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Optional Setting</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 16, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 8:03 AM, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; While I used `||=` in Ruby all the time, where everything can be `nil`, I&#39;ve found that Swift&#39;s Optional model is different enough that I&#39;ve never really desired a `??=`, so I&#39;m a -1 for the proposal, as I see it encouraging the use of optionals where a non-optional would be preferred.<br>&gt; <br>&gt; With the `chatTitleName` example, I&#39;d probably make `&quot;Default&quot;` the default argument on initialization (and make it so `chatTitleName` is not optional), or I&#39;d move the `chatTitleName ?? &quot;Default&quot;` into the presentation logic.<br>&gt; <br></p><p>Well I was using real variable names but the example was contrived; I should have made that clearer.  Also, I didn’t mean to sound like I was in clear support of this addition. I was really just putting it into context with regard to variables names where we’ve used “??”. <br></p><p>In reality my vote is.. ±0<br></p><p>&gt; Stephen<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 9:28 AM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m still uncertain whether that would solve the issue at the right location.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt;&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt; <br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt; <br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>&gt; <br>&gt; After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br>&gt; <br>&gt;     messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br>&gt; <br>&gt; (Those are effectively real world variable names). <br>&gt; <br>&gt; I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br>&gt; <br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt; <br>&gt; clears it up fairly well.<br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/14490616/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85ade213ef182c4a30916753b3c82b1e?s=50"></div><header><strong>Optional Setting</strong> from <string>Ian Ynda-Hummel</string> &lt;ianynda at gmail.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>It seems to be that the object property case (which is the most common use<br>of ||= I&#39;ve seen with Ruby) is mostly solved by the fact that Swift allows<br>you to specify default (or lazy loaded!) values on variable declaration.<br></p><p>    class MessagesViewController: UIViewController {<br>        var chatTitleName = &quot;Default&quot;<br>    }<br></p><p>As for the case Jacob mentioned above:<br></p><p>    var value = someInitialValue<br>    value ??= fallback1<br>    value ??= fallback2<br></p><p>It seems like that can be written as:<br></p><p>    var value = someInitialValue<br>        ?? fallback1<br>        ?? fallback2<br></p><p>Which doesn&#39;t seem appreciably different to me, though I am curious what<br>others think about the style. That said, I can imagine more complex cases<br>where it might seem appropriate. Say:<br></p><p>    var value = someInitialValue<br></p><p>    var something<br>    ...do some processing<br></p><p>    value ??= something<br>    guard value else { return }<br></p><p>    var somethingElse<br>    ...do some processing<br></p><p>    value ??= somethingElse<br>    guard value else { return }<br></p><p>But that can also be rewritten as something like:<br></p><p>    var value = someInitialValue<br>        ?? {<br>            var something<br>            ...do some processing<br>            return something<br>        }()<br>        ?? {<br>            var somethingElse<br>            ...do some processing<br>            return somethingElse<br>        }()<br></p><p>Again, curious what people think about the style.<br></p><p>On Wed, Dec 16, 2015 at 9:28 AM Marc Knaup via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m still uncertain whether that would solve the issue at the right<br>&gt; location.<br>&gt;<br>&gt; How do you end up in such a situation where this is actually necessary?<br>&gt; Why do I not end up in such situations?<br>&gt; I&#39;d like to understand where the discrepancy comes from.<br>&gt;<br>&gt; I.e. where do you define chatTitleName? Where else do you set<br>&gt; chatTitleName?<br>&gt; Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;<br>&gt;&gt;    - It has little value for local variables. In most cases you want to<br>&gt;&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;&gt;    creates a non-optional value iff z is non-optional.<br>&gt;&gt;<br>&gt;&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;&gt;    property which is currently nil and without also using that value directly<br>&gt;&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;&gt;    little such use cases.<br>&gt;&gt;<br>&gt;&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;    While it is true that variable and property name could be very long,<br>&gt;&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;&gt;    of the proposed assignment operator even further.<br>&gt;&gt;<br>&gt;&gt;    - Most important though is that such an optional assignment operator<br>&gt;&gt;    would work differently from all other assignment operators. The right<br>&gt;&gt;    operand would never be executed if the variable being assigned is already<br>&gt;&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;&gt;    similar behavior like in all other assignments.<br>&gt;&gt;<br>&gt;&gt; I think these are all very good points. Seems like the only really<br>&gt;&gt; practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt;<br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;<br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ??<br>&gt;&gt; operator is much more versatile as it can also be used to return a<br>&gt;&gt; non-optional value.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; After perusing our Swift code it turns out that we use the long form (a =<br>&gt;&gt; a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt;&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt;<br>&gt;&gt;     messagesViewController.chatTitleName =<br>&gt;&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt;<br>&gt;&gt; (Those are effectively real world variable names).<br>&gt;&gt;<br>&gt;&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt;&gt; duplication and the proposed form..<br>&gt;&gt;<br>&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt;<br>&gt;&gt; clears it up fairly well.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/907c0d85/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Optional Setting</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>-1: a big point of ?? operator is the fact that it strips an optional<br>Also it&#39;s really unclear whether didSet is triggered in the &quot;do nothing&quot;<br>case.<br>On Wed, Dec 16, 2015 at 18:07 Ian Ynda-Hummel via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It seems to be that the object property case (which is the most common use<br>&gt; of ||= I&#39;ve seen with Ruby) is mostly solved by the fact that Swift allows<br>&gt; you to specify default (or lazy loaded!) values on variable declaration.<br>&gt;<br>&gt;     class MessagesViewController: UIViewController {<br>&gt;         var chatTitleName = &quot;Default&quot;<br>&gt;     }<br>&gt;<br>&gt; As for the case Jacob mentioned above:<br>&gt;<br>&gt;     var value = someInitialValue<br>&gt;     value ??= fallback1<br>&gt;     value ??= fallback2<br>&gt;<br>&gt; It seems like that can be written as:<br>&gt;<br>&gt;     var value = someInitialValue<br>&gt;         ?? fallback1<br>&gt;         ?? fallback2<br>&gt;<br>&gt; Which doesn&#39;t seem appreciably different to me, though I am curious what<br>&gt; others think about the style. That said, I can imagine more complex cases<br>&gt; where it might seem appropriate. Say:<br>&gt;<br>&gt;     var value = someInitialValue<br>&gt;<br>&gt;     var something<br>&gt;     ...do some processing<br>&gt;<br>&gt;     value ??= something<br>&gt;     guard value else { return }<br>&gt;<br>&gt;     var somethingElse<br>&gt;     ...do some processing<br>&gt;<br>&gt;     value ??= somethingElse<br>&gt;     guard value else { return }<br>&gt;<br>&gt; But that can also be rewritten as something like:<br>&gt;<br>&gt;     var value = someInitialValue<br>&gt;         ?? {<br>&gt;             var something<br>&gt;             ...do some processing<br>&gt;             return something<br>&gt;         }()<br>&gt;         ?? {<br>&gt;             var somethingElse<br>&gt;             ...do some processing<br>&gt;             return somethingElse<br>&gt;         }()<br>&gt;<br>&gt; Again, curious what people think about the style.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 9:28 AM Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;m still uncertain whether that would solve the issue at the right<br>&gt;&gt; location.<br>&gt;&gt;<br>&gt;&gt; How do you end up in such a situation where this is actually necessary?<br>&gt;&gt; Why do I not end up in such situations?<br>&gt;&gt; I&#39;d like to understand where the discrepancy comes from.<br>&gt;&gt;<br>&gt;&gt; I.e. where do you define chatTitleName? Where else do you set<br>&gt;&gt; chatTitleName?<br>&gt;&gt; Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - It has little value for local variables. In most cases you want to<br>&gt;&gt;&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;&gt;&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;&gt;&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;&gt;&gt;    creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;&gt;&gt;    property which is currently nil and without also using that value directly<br>&gt;&gt;&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;&gt;&gt;    little such use cases.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;&gt;&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt;    While it is true that variable and property name could be very long,<br>&gt;&gt;&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;&gt;&gt;    of the proposed assignment operator even further.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - Most important though is that such an optional assignment operator<br>&gt;&gt;&gt;    would work differently from all other assignment operators. The right<br>&gt;&gt;&gt;    operand would never be executed if the variable being assigned is already<br>&gt;&gt;&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;&gt;&gt;    similar behavior like in all other assignments.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think these are all very good points. Seems like the only really<br>&gt;&gt;&gt; practical use would be restricted to:<br>&gt;&gt;&gt; object.property ??= val<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Instead of:<br>&gt;&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ??<br>&gt;&gt;&gt; operator is much more versatile as it can also be used to return a<br>&gt;&gt;&gt; non-optional value.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; After perusing our Swift code it turns out that we use the long form (a<br>&gt;&gt;&gt; = a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt;&gt;&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     messagesViewController.chatTitleName =<br>&gt;&gt;&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (Those are effectively real world variable names).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt;&gt;&gt; duplication and the proposed form..<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; clears it up fairly well.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/40745ed0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Optional Setting</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 16, 2015 at 09:00:00am</p></header><div class="content"><p>An Optional cannot be stripped from a property which is likely to be the most common use for it.  I am pretty ambivalent about this proposal but don’t think the inability to strip a level of Optional is a sound argument against it.<br></p><p>&gt; On Dec 16, 2015, at 9:19 AM, ilya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1: a big point of ?? operator is the fact that it strips an optional <br>&gt; Also it&#39;s really unclear whether didSet is triggered in the &quot;do nothing&quot; case. <br>&gt; On Wed, Dec 16, 2015 at 18:07 Ian Ynda-Hummel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; It seems to be that the object property case (which is the most common use of ||= I&#39;ve seen with Ruby) is mostly solved by the fact that Swift allows you to specify default (or lazy loaded!) values on variable declaration.<br>&gt; <br>&gt;     class MessagesViewController: UIViewController {<br>&gt;         var chatTitleName = &quot;Default&quot;<br>&gt;     }<br>&gt; <br>&gt; As for the case Jacob mentioned above:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;     value ??= fallback1<br>&gt;     value ??= fallback2<br>&gt; <br>&gt; It seems like that can be written as:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;         ?? fallback1<br>&gt;         ?? fallback2<br>&gt; <br>&gt; Which doesn&#39;t seem appreciably different to me, though I am curious what others think about the style. That said, I can imagine more complex cases where it might seem appropriate. Say:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt; <br>&gt;     var something<br>&gt;     ...do some processing<br>&gt; <br>&gt;     value ??= something<br>&gt;     guard value else { return }<br>&gt; <br>&gt;     var somethingElse<br>&gt;     ...do some processing<br>&gt; <br>&gt;     value ??= somethingElse<br>&gt;     guard value else { return }<br>&gt; <br>&gt; But that can also be rewritten as something like:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;         ?? {<br>&gt;             var something<br>&gt;             ...do some processing<br>&gt;             return something<br>&gt;         }()<br>&gt;         ?? {<br>&gt;             var somethingElse<br>&gt;             ...do some processing<br>&gt;             return somethingElse<br>&gt;         }()<br>&gt; <br>&gt; Again, curious what people think about the style.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 9:28 AM Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m still uncertain whether that would solve the issue at the right location.<br>&gt; <br>&gt; How do you end up in such a situation where this is actually necessary?<br>&gt; Why do I not end up in such situations?<br>&gt; I&#39;d like to understand where the discrepancy comes from.<br>&gt; <br>&gt; I.e. where do you define chatTitleName? Where else do you set chatTitleName?<br>&gt; Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt;&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt; <br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt; <br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>&gt; <br>&gt; After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br>&gt; <br>&gt;     messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br>&gt; <br>&gt; (Those are effectively real world variable names). <br>&gt; <br>&gt; I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br>&gt; <br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt; <br>&gt; clears it up fairly well.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/3560bc06/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Optional Setting</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 16, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 8:19 AM, ilya &lt;ilya.nikokoshev at gmail.com&gt; wrote:<br>&gt; <br>&gt; -1: a big point of ?? operator is the fact that it strips an optional <br>&gt; Also it&#39;s really unclear whether didSet is triggered in the &quot;do nothing&quot; case. <br></p><p>It seems the appropriate thing to do in the “do nothing” case is… nothing. <br></p><p>&gt; On Wed, Dec 16, 2015 at 18:07 Ian Ynda-Hummel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; It seems to be that the object property case (which is the most common use of ||= I&#39;ve seen with Ruby) is mostly solved by the fact that Swift allows you to specify default (or lazy loaded!) values on variable declaration.<br>&gt; <br>&gt;     class MessagesViewController: UIViewController {<br>&gt;         var chatTitleName = &quot;Default&quot;<br>&gt;     }<br>&gt; <br>&gt; As for the case Jacob mentioned above:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;     value ??= fallback1<br>&gt;     value ??= fallback2<br>&gt; <br>&gt; It seems like that can be written as:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;         ?? fallback1<br>&gt;         ?? fallback2<br>&gt; <br>&gt; Which doesn&#39;t seem appreciably different to me, though I am curious what others think about the style. That said, I can imagine more complex cases where it might seem appropriate. Say:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt; <br>&gt;     var something<br>&gt;     ...do some processing<br>&gt; <br>&gt;     value ??= something<br>&gt;     guard value else { return }<br>&gt; <br>&gt;     var somethingElse<br>&gt;     ...do some processing<br>&gt; <br>&gt;     value ??= somethingElse<br>&gt;     guard value else { return }<br>&gt; <br>&gt; But that can also be rewritten as something like:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;         ?? {<br>&gt;             var something<br>&gt;             ...do some processing<br>&gt;             return something<br>&gt;         }()<br>&gt;         ?? {<br>&gt;             var somethingElse<br>&gt;             ...do some processing<br>&gt;             return somethingElse<br>&gt;         }()<br>&gt; <br>&gt; Again, curious what people think about the style.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 9:28 AM Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m still uncertain whether that would solve the issue at the right location.<br>&gt; <br>&gt; How do you end up in such a situation where this is actually necessary?<br>&gt; Why do I not end up in such situations?<br>&gt; I&#39;d like to understand where the discrepancy comes from.<br>&gt; <br>&gt; I.e. where do you define chatTitleName? Where else do you set chatTitleName?<br>&gt; Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt;&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt; <br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt; <br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>&gt; <br>&gt; After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br>&gt; <br>&gt;     messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br>&gt; <br>&gt; (Those are effectively real world variable names). <br>&gt; <br>&gt; I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br>&gt; <br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt; <br>&gt; clears it up fairly well.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5e1fdb7b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Optional Setting</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 16, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 8:07 AM, Ian Ynda-Hummel &lt;ianynda at gmail.com&gt; wrote:<br>&gt; <br>&gt; It seems to be that the object property case (which is the most common use of ||= I&#39;ve seen with Ruby) is mostly solved by the fact that Swift allows you to specify default (or lazy loaded!) values on variable declaration.<br>&gt; <br>&gt;     class MessagesViewController: UIViewController {<br>&gt;         var chatTitleName = &quot;Default&quot;<br>&gt;     }<br>&gt; <br></p><p>Haha again sorry, I used real names, but a completely contrived example of length.<br></p><p>&gt; As for the case Jacob mentioned above:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;     value ??= fallback1<br>&gt;     value ??= fallback2<br>&gt; <br>&gt; It seems like that can be written as:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;         ?? fallback1<br>&gt;         ?? fallback2<br>&gt; <br>&gt; Which doesn&#39;t seem appreciably different to me, though I am curious what others think about the style. That said, I can imagine more complex cases where it might seem appropriate. Say:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt; <br>&gt;     var something<br>&gt;     ...do some processing<br>&gt; <br>&gt;     value ??= something<br>&gt;     guard value else { return }<br>&gt; <br>&gt;     var somethingElse<br>&gt;     ...do some processing<br>&gt; <br>&gt;     value ??= somethingElse<br>&gt;     guard value else { return }<br>&gt; <br>&gt; But that can also be rewritten as something like:<br>&gt; <br>&gt;     var value = someInitialValue<br>&gt;         ?? {<br>&gt;             var something<br>&gt;             ...do some processing<br>&gt;             return something<br>&gt;         }()<br>&gt;         ?? {<br>&gt;             var somethingElse<br>&gt;             ...do some processing<br>&gt;             return somethingElse<br>&gt;         }()<br>&gt; <br></p><p>I realize you are not endorsing either of these styles but the form using “??” smacks of trying to cram as much code as possible into the fewest characters.  As we know that isn’t a goal of swift.  Even, if the “??=“ existed I would probably rework this code into it’s long form with normal if statements for clarity.<br></p><p>&gt; Again, curious what people think about the style.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 9:28 AM Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m still uncertain whether that would solve the issue at the right location.<br>&gt; <br>&gt; How do you end up in such a situation where this is actually necessary?<br>&gt; Why do I not end up in such situations?<br>&gt; I&#39;d like to understand where the discrepancy comes from.<br>&gt; <br>&gt; I.e. where do you define chatTitleName? Where else do you set chatTitleName?<br>&gt; Why isn&#39;t it initially set to &quot;Default&quot; an then overwritten on-demand?<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 3:22 PM, Kevin Wooten &lt;kdubb at me.com &lt;mailto:kdubb at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt;&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt; <br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt; <br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>&gt; <br>&gt; After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br>&gt; <br>&gt;     messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br>&gt; <br>&gt; (Those are effectively real world variable names). <br>&gt; <br>&gt; I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br>&gt; <br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt; <br>&gt; clears it up fairly well.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/0ce073c4/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Optional Setting</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 16, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 6:22 AM, Kevin Wooten via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt;&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt; <br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt; <br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>&gt; <br>&gt; After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br>&gt; <br>&gt;     messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br>&gt; <br>&gt; (Those are effectively real world variable names). <br>&gt; <br>&gt; I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br>&gt; <br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt; <br>&gt; clears it up fairly well.<br></p><p>A few points:<br></p><p>1. I&#39;ve always thought we needed something like this; glad to see it discussed<br></p><p>2. This is also applicable to dictionaries:<br></p><p>  messagesViewController.titleNames[&quot;chat&quot;] ??= &quot;Default&quot;<br></p><p>3. I think it may be time for a formal proposal :-)<br></p><p>4. One way the community can help us to evaluate it would be to create the API in an extension in your own code, actually apply it in your project, and evaluate what it does for readability.<br></p><p>Thanks,<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/4eee0bfb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 16, 2015 at 04:00:00pm</p></header><div class="content"><p>I&#39;ve started a formal proposal here:<br></p><p>https://github.com/apple/swift-evolution/pull/63<br></p><p>On Wed, Dec 16, 2015 at 4:48 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 16, 2015, at 6:22 AM, Kevin Wooten via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I tend towards -1 for multiple reasons:<br>&gt;<br>&gt;    - It has little value for local variables. In most cases you want to<br>&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;    creates a non-optional value iff z is non-optional.<br>&gt;<br>&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;    property which is currently nil and without also using that value directly<br>&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;    little such use cases.<br>&gt;<br>&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;    While it is true that variable and property name could be very long,<br>&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;    of the proposed assignment operator even further.<br>&gt;<br>&gt;    - Most important though is that such an optional assignment operator<br>&gt;    would work differently from all other assignment operators. The right<br>&gt;    operand would never be executed if the variable being assigned is already<br>&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;    similar behavior like in all other assignments.<br>&gt;<br>&gt; I think these are all very good points. Seems like the only really<br>&gt; practical use would be restricted to:<br>&gt; object.property ??= val<br>&gt;<br>&gt; Instead of:<br>&gt; object.property = object.property ?? val<br>&gt;<br>&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator<br>&gt; is much more versatile as it can also be used to return a non-optional<br>&gt; value.<br>&gt;<br>&gt;<br>&gt; After perusing our Swift code it turns out that we use the long form (a =<br>&gt; a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;<br>&gt;     messagesViewController.chatTitleName =<br>&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;<br>&gt; (Those are effectively real world variable names).<br>&gt;<br>&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt; duplication and the proposed form..<br>&gt;<br>&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;<br>&gt; clears it up fairly well.<br>&gt;<br>&gt;<br>&gt; A few points:<br>&gt;<br>&gt; 1. I&#39;ve always thought we needed something like this; glad to see it<br>&gt; discussed<br>&gt;<br>&gt; 2. This is also applicable to dictionaries:<br>&gt;<br>&gt;   messagesViewController.titleNames[&quot;chat&quot;] ??= &quot;Default&quot;<br>&gt;<br>&gt; 3. I think it may be time for a formal proposal :-)<br>&gt;<br>&gt; 4. One way the community can help us to evaluate it would be to create the<br>&gt; API in an extension in your own code, actually apply it in your project,<br>&gt; and evaluate what it does for readability.<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/53e66aee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Optional Setting</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>December 16, 2015 at 09:00:00pm</p></header><div class="content"><p>I think it would be worth mentioning in the proposal the threading<br>implications of this operator. The trickyness comes from the fact that<br>suddenly that expression is performing a call to both the getter *and* the<br>setter, so even if those 2 were to be protected via locks, there&#39;s still<br>the possibility of race-conditions. Someone else mentioned this is of<br>course also the case with operators such as ++ (which I believe Lattner was<br>in favor of stripping from the language)<br></p><p>Not saying that this operator shouldn&#39;t exist for this reason, but I do<br>think it&#39;s important to realize the complexity it brings to add an operator<br>that does more than is immediately obvious, since that&#39;s often times a<br>recipe for any developer making this sort of mistake.<br>I would lean towards -1, but I do acknowledge that in some circumstances it<br>can simplify some code.<br></p><p>On Wed, Dec 16, 2015 at 8:50 AM James Campbell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;ve started a formal proposal here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/pull/63<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 4:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 6:22 AM, Kevin Wooten via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;<br>&gt;&gt;    - It has little value for local variables. In most cases you want to<br>&gt;&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;&gt;    creates a non-optional value iff z is non-optional.<br>&gt;&gt;<br>&gt;&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;&gt;    property which is currently nil and without also using that value directly<br>&gt;&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;&gt;    little such use cases.<br>&gt;&gt;<br>&gt;&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;    While it is true that variable and property name could be very long,<br>&gt;&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;&gt;    of the proposed assignment operator even further.<br>&gt;&gt;<br>&gt;&gt;    - Most important though is that such an optional assignment operator<br>&gt;&gt;    would work differently from all other assignment operators. The right<br>&gt;&gt;    operand would never be executed if the variable being assigned is already<br>&gt;&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;&gt;    similar behavior like in all other assignments.<br>&gt;&gt;<br>&gt;&gt; I think these are all very good points. Seems like the only really<br>&gt;&gt; practical use would be restricted to:<br>&gt;&gt; object.property ??= val<br>&gt;&gt;<br>&gt;&gt; Instead of:<br>&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;<br>&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ??<br>&gt;&gt; operator is much more versatile as it can also be used to return a<br>&gt;&gt; non-optional value.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; After perusing our Swift code it turns out that we use the long form (a =<br>&gt;&gt; a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt;&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt;<br>&gt;&gt;     messagesViewController.chatTitleName =<br>&gt;&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt;<br>&gt;&gt; (Those are effectively real world variable names).<br>&gt;&gt;<br>&gt;&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt;&gt; duplication and the proposed form..<br>&gt;&gt;<br>&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt;<br>&gt;&gt; clears it up fairly well.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; A few points:<br>&gt;&gt;<br>&gt;&gt; 1. I&#39;ve always thought we needed something like this; glad to see it<br>&gt;&gt; discussed<br>&gt;&gt;<br>&gt;&gt; 2. This is also applicable to dictionaries:<br>&gt;&gt;<br>&gt;&gt;   messagesViewController.titleNames[&quot;chat&quot;] ??= &quot;Default&quot;<br>&gt;&gt;<br>&gt;&gt; 3. I think it may be time for a formal proposal :-)<br>&gt;&gt;<br>&gt;&gt; 4. One way the community can help us to evaluate it would be to create<br>&gt;&gt; the API in an extension in your own code, actually apply it in your<br>&gt;&gt; project, and evaluate what it does for readability.<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt;<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/4bc48f87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d47baf3a0f80c9fd13ece9c4b87c7fce?s=50"></div><header><strong>Optional Setting</strong> from <string>Marc Knaup</string> &lt;marc at knaup.koeln&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>The threading issue affects all operators like +=, -=, *= etc. and they are<br>not going to be removed.<br>I don&#39;t think ??= would be any different in this case.<br></p><p>On Wed, Dec 16, 2015 at 10:58 PM, Javier Soto via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think it would be worth mentioning in the proposal the threading<br>&gt; implications of this operator. The trickyness comes from the fact that<br>&gt; suddenly that expression is performing a call to both the getter *and* the<br>&gt; setter, so even if those 2 were to be protected via locks, there&#39;s still<br>&gt; the possibility of race-conditions. Someone else mentioned this is of<br>&gt; course also the case with operators such as ++ (which I believe Lattner was<br>&gt; in favor of stripping from the language)<br>&gt;<br>&gt; Not saying that this operator shouldn&#39;t exist for this reason, but I do<br>&gt; think it&#39;s important to realize the complexity it brings to add an operator<br>&gt; that does more than is immediately obvious, since that&#39;s often times a<br>&gt; recipe for any developer making this sort of mistake.<br>&gt; I would lean towards -1, but I do acknowledge that in some circumstances<br>&gt; it can simplify some code.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 8:50 AM James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;ve started a formal proposal here:<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/63<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 4:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 16, 2015, at 6:22 AM, Kevin Wooten via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - It has little value for local variables. In most cases you want to<br>&gt;&gt;&gt;    use the value you assign to a local variable and assigning it to an<br>&gt;&gt;&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;&gt;&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;&gt;&gt;    creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - It seems to be a rare use case that you set a value of an optional<br>&gt;&gt;&gt;    property which is currently nil and without also using that value directly<br>&gt;&gt;&gt;    within the same context. Quickly checking my Swift apps reveals only very<br>&gt;&gt;&gt;    little such use cases.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;&gt;&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt;    While it is true that variable and property name could be very long,<br>&gt;&gt;&gt;    this is an unlikely case of an already rare case which decreases the value<br>&gt;&gt;&gt;    of the proposed assignment operator even further.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - Most important though is that such an optional assignment operator<br>&gt;&gt;&gt;    would work differently from all other assignment operators. The right<br>&gt;&gt;&gt;    operand would never be executed if the variable being assigned is already<br>&gt;&gt;&gt;    non-nil. This will likely be unexpected for a lot of developers who expect<br>&gt;&gt;&gt;    similar behavior like in all other assignments.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think these are all very good points. Seems like the only really<br>&gt;&gt;&gt; practical use would be restricted to:<br>&gt;&gt;&gt; object.property ??= val<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Instead of:<br>&gt;&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ??<br>&gt;&gt;&gt; operator is much more versatile as it can also be used to return a<br>&gt;&gt;&gt; non-optional value.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; After perusing our Swift code it turns out that we use the long form (a<br>&gt;&gt;&gt; = a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt;&gt;&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     messagesViewController.chatTitleName =<br>&gt;&gt;&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (Those are effectively real world variable names).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt;&gt;&gt; duplication and the proposed form..<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; clears it up fairly well.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; A few points:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. I&#39;ve always thought we needed something like this; glad to see it<br>&gt;&gt;&gt; discussed<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2. This is also applicable to dictionaries:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;   messagesViewController.titleNames[&quot;chat&quot;] ??= &quot;Default&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3. I think it may be time for a formal proposal :-)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4. One way the community can help us to evaluate it would be to create<br>&gt;&gt;&gt; the API in an extension in your own code, actually apply it in your<br>&gt;&gt;&gt; project, and evaluate what it does for readability.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; Javier Soto<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/1c605365/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Optional Setting</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 16, 2015 at 02:00:00pm</p></header><div class="content"><p>I agree it wouldn&#39;t/shouldn&#39;t be different. But it&#39;s worth mentioning in<br>the proposal.<br></p><p>Jacob Bandes-Storch<br></p><p>On Wed, Dec 16, 2015 at 2:04 PM, Marc Knaup via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The threading issue affects all operators like +=, -=, *= etc. and they<br>&gt; are not going to be removed.<br>&gt; I don&#39;t think ??= would be any different in this case.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 10:58 PM, Javier Soto via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I think it would be worth mentioning in the proposal the threading<br>&gt;&gt; implications of this operator. The trickyness comes from the fact that<br>&gt;&gt; suddenly that expression is performing a call to both the getter *and* the<br>&gt;&gt; setter, so even if those 2 were to be protected via locks, there&#39;s still<br>&gt;&gt; the possibility of race-conditions. Someone else mentioned this is of<br>&gt;&gt; course also the case with operators such as ++ (which I believe Lattner was<br>&gt;&gt; in favor of stripping from the language)<br>&gt;&gt;<br>&gt;&gt; Not saying that this operator shouldn&#39;t exist for this reason, but I do<br>&gt;&gt; think it&#39;s important to realize the complexity it brings to add an operator<br>&gt;&gt; that does more than is immediately obvious, since that&#39;s often times a<br>&gt;&gt; recipe for any developer making this sort of mistake.<br>&gt;&gt; I would lean towards -1, but I do acknowledge that in some circumstances<br>&gt;&gt; it can simplify some code.<br>&gt;&gt;<br>&gt;&gt; On Wed, Dec 16, 2015 at 8:50 AM James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; I&#39;ve started a formal proposal here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/pull/63<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Dec 16, 2015 at 4:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 6:22 AM, Kevin Wooten via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    - It has little value for local variables. In most cases you want<br>&gt;&gt;&gt;&gt;    to use the value you assign to a local variable and assigning it to an<br>&gt;&gt;&gt;&gt;    optional variable would require a subsequent unwrapping. In most cases<br>&gt;&gt;&gt;&gt;    where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it<br>&gt;&gt;&gt;&gt;    creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    - It seems to be a rare use case that you set a value of an<br>&gt;&gt;&gt;&gt;    optional property which is currently nil and without also using that value<br>&gt;&gt;&gt;&gt;    directly within the same context. Quickly checking my Swift apps reveals<br>&gt;&gt;&gt;&gt;    only very little such use cases.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    - The remaining cases could expressed like &quot;object.property =<br>&gt;&gt;&gt;&gt;    object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt;&gt;    While it is true that variable and property name could be very<br>&gt;&gt;&gt;&gt;    long, this is an unlikely case of an already rare case which decreases the<br>&gt;&gt;&gt;&gt;    value of the proposed assignment operator even further.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    - Most important though is that such an optional assignment<br>&gt;&gt;&gt;&gt;    operator would work differently from all other assignment operators. The<br>&gt;&gt;&gt;&gt;    right operand would never be executed if the variable being assigned is<br>&gt;&gt;&gt;&gt;    already non-nil. This will likely be unexpected for a lot of developers who<br>&gt;&gt;&gt;&gt;    expect similar behavior like in all other assignments.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think these are all very good points. Seems like the only really<br>&gt;&gt;&gt;&gt; practical use would be restricted to:<br>&gt;&gt;&gt;&gt; object.property ??= val<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Instead of:<br>&gt;&gt;&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ??<br>&gt;&gt;&gt;&gt; operator is much more versatile as it can also be used to return a<br>&gt;&gt;&gt;&gt; non-optional value.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; After perusing our Swift code it turns out that we use the long form (a<br>&gt;&gt;&gt;&gt; = a ?? def) quite a bit.  As it was previously mentioned it, when the<br>&gt;&gt;&gt;&gt; variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     messagesViewController.chatTitleName =<br>&gt;&gt;&gt;&gt;  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; (Those are effectively real world variable names).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I think quite a bit of the clarity of this statement is lost by the<br>&gt;&gt;&gt;&gt; duplication and the proposed form..<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; clears it up fairly well.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; A few points:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. I&#39;ve always thought we needed something like this; glad to see it<br>&gt;&gt;&gt;&gt; discussed<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2. This is also applicable to dictionaries:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;   messagesViewController.titleNames[&quot;chat&quot;] ??= &quot;Default&quot;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 3. I think it may be time for a formal proposal :-)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 4. One way the community can help us to evaluate it would be to create<br>&gt;&gt;&gt;&gt; the API in an extension in your own code, actually apply it in your<br>&gt;&gt;&gt;&gt; project, and evaluate what it does for readability.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Javier Soto<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/de53bb44/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Optional Setting</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 16, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 2:07 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree it wouldn&#39;t/shouldn&#39;t be different. But it&#39;s worth mentioning in the proposal.<br></p><p>Seems like a distraction to me, FWIW.<br></p><p>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 2:04 PM, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; The threading issue affects all operators like +=, -=, *= etc. and they are not going to be removed.<br>&gt; I don&#39;t think ??= would be any different in this case.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 10:58 PM, Javier Soto via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think it would be worth mentioning in the proposal the threading implications of this operator. The trickyness comes from the fact that suddenly that expression is performing a call to both the getter *and* the setter, so even if those 2 were to be protected via locks, there&#39;s still the possibility of race-conditions. Someone else mentioned this is of course also the case with operators such as ++ (which I believe Lattner was in favor of stripping from the language)<br>&gt; <br>&gt; Not saying that this operator shouldn&#39;t exist for this reason, but I do think it&#39;s important to realize the complexity it brings to add an operator that does more than is immediately obvious, since that&#39;s often times a recipe for any developer making this sort of mistake.<br>&gt; I would lean towards -1, but I do acknowledge that in some circumstances it can simplify some code.<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 8:50 AM James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;ve started a formal proposal here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/pull/63 &lt;https://github.com/apple/swift-evolution/pull/63&gt;<br>&gt; <br>&gt; On Wed, Dec 16, 2015 at 4:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 16, 2015, at 6:22 AM, Kevin Wooten via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 16, 2015, at 4:12 AM, Al Skipp via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 16 Dec 2015, at 00:58, Marc Knaup via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I tend towards -1 for multiple reasons:<br>&gt;&gt;&gt;&gt; It has little value for local variables. In most cases you want to use the value you assign to a local variable and assigning it to an optional variable would require a subsequent unwrapping. In most cases where local variables are involved &quot;var x = y ?? z&quot; is satisfying as it creates a non-optional value iff z is non-optional.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It seems to be a rare use case that you set a value of an optional property which is currently nil and without also using that value directly within the same context. Quickly checking my Swift apps reveals only very little such use cases.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The remaining cases could expressed like &quot;object.property = object.property ?? …&quot; or using &quot;if object.property == nil { … }&quot;.<br>&gt;&gt;&gt;&gt; While it is true that variable and property name could be very long, this is an unlikely case of an already rare case which decreases the value of the proposed assignment operator even further.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Most important though is that such an optional assignment operator would work differently from all other assignment operators. The right operand would never be executed if the variable being assigned is already non-nil. This will likely be unexpected for a lot of developers who expect similar behavior like in all other assignments.<br>&gt;&gt;&gt; I think these are all very good points. Seems like the only really practical use would be restricted to:<br>&gt;&gt;&gt; object.property ??= val<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Instead of:<br>&gt;&gt;&gt; object.property = object.property ?? val<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is it worth it for that one scenario? As Marc pointed out, the ?? operator is much more versatile as it can also be used to return a non-optional value.<br>&gt;&gt; <br>&gt;&gt; After perusing our Swift code it turns out that we use the long form (a = a ?? def) quite a bit.  As it was previously mentioned it, when the variables is named “a” it’s clearly not an issue, but this is…<br>&gt;&gt; <br>&gt;&gt;     messagesViewController.chatTitleName =  messagesViewController.chatTitleName ?? “Default”<br>&gt;&gt; <br>&gt;&gt; (Those are effectively real world variable names). <br>&gt;&gt; <br>&gt;&gt; I think quite a bit of the clarity of this statement is lost by the duplication and the proposed form..<br>&gt;&gt; <br>&gt;&gt;     messagesViewController.chatTitleName ??= “Default”<br>&gt;&gt; <br>&gt;&gt; clears it up fairly well.<br>&gt; <br>&gt; A few points:<br>&gt; <br>&gt; 1. I&#39;ve always thought we needed something like this; glad to see it discussed<br>&gt; <br>&gt; 2. This is also applicable to dictionaries:<br>&gt; <br>&gt;   messagesViewController.titleNames[&quot;chat&quot;] ??= &quot;Default&quot;<br>&gt; <br>&gt; 3. I think it may be time for a formal proposal :-)<br>&gt; <br>&gt; 4. One way the community can help us to evaluate it would be to create the API in an extension in your own code, actually apply it in your project, and evaluate what it does for readability.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698 &lt;tel:%2B44%207523%20279%20698&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -- <br>&gt; Javier Soto  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/1d630ad8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Optional Setting</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>Yes the ??= is a better syntax.<br></p><p>On Tue, Dec 15, 2015 at 11:10 PM, Brent Royal-Gordon &lt;brent at architechies.com<br>&gt; wrote:<br></p><p>&gt; &gt; I think that the existing syntax for “??” handles this need fairly well<br>&gt; without requiring an additional assignment operator:<br>&gt; &gt;<br>&gt; &gt;       a = a ?? []<br>&gt;<br>&gt; When the variable is `a`, sure. When it’s<br>&gt; `scoreboardViewController.selectedScoreboard`, not so much.<br>&gt;<br>&gt; +1 from me, though I prefer the `??=` spelling to match the `??` operator<br>&gt; more closely.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/d6e3c1b3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
