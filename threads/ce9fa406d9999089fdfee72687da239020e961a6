<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Pitch][stdlib] Command Line Option Parsing &amp; Help</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>August 17, 2016 at 01:00:00am</p></header><div class="content"><p>I want to pitch a command line parsing addition to the standard library and get feedback before I polish up a full proposal.<br></p><p>Swift is being positioned to fill numerous functions, including as a local scripting language. I think that’s great but having tried to use it for that purpose there are a number of holes that need to be filled. Parsing command arguments (and printing help / doing shell autocompletion) is enough of a common task that I think it deserves to be part of the standard library… not to mention the huge PITA that it becomes to attempt to use a third-party library from a shell script.<br></p><p>I’m especially interested in Dimitri or Robert’s opinions on whether this kind of thing meets the standard library bar.<br></p><p><br>I’m looking toward some protocols that describe commands and their options, including short and long form (-/--), --opt=value, etc. Type-safe using enums that can convert from raw values, automatic printing of error &amp; usage info when invalid options are passed. I’d also like to support loading localized descriptions for the help text from a bundle for i8n support (subject to what support exists in Swift’s Foundation).<br></p><p><br>If we can fill some of these holes it would make using swift scripts and command line utilities a much nicer experience.<br></p><p><br>Russ<br></p><p><br></p><p>Eventually I’d like to build up several components:<br></p><p>* Arguments - parse command line args, print command help, support shell auto-complete<br>* Terminal - Psuedo-terminal support, line discipline control, ANSI colors &amp; other escape codes/commands, progress bars and other nice things for output<br>* TerminalEditor - a swift interface to ncurses, term box, or some similar cross-platform lib for doing command-line editing<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b04cad4cec3d0229248b366373bf4e62?s=50"></div><header><strong>[Pitch][stdlib] Command Line Option Parsing &amp; Help</strong> from <string>Will Field-Thompson</string> &lt;will.a.ft at gmail.com&gt;<p>August 17, 2016 at 04:00:00pm</p></header><div class="content"><p>I think it would be great to have something like this (at least the<br>&quot;Arguments&quot; component) as part of the standard distribution — maybe as a<br>corelib rather than as part of the standard library. Seeing as this is<br>certainly not in scope for phase 1 of Swift 4, maybe it would be better to<br>start this as an external library with the aim of having it brought into<br>corelibs at some point in the future?<br></p><p>Also probably worth taking a look at existing libraries like &lt;<br>https://github.com/jatoben/CommandLine&gt;, &lt;<br>https://github.com/nomothetis/OptionKit&gt;, and &lt;<br>https://github.com/marcoconti83/targone&gt; to see what other people have<br>tried.<br></p><p>Will<br></p><p><br>On Wed, Aug 17, 2016 at 4:20 AM Russ Bishop via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I want to pitch a command line parsing addition to the standard library<br>&gt; and get feedback before I polish up a full proposal.<br>&gt;<br>&gt; Swift is being positioned to fill numerous functions, including as a local<br>&gt; scripting language. I think that’s great but having tried to use it for<br>&gt; that purpose there are a number of holes that need to be filled. Parsing<br>&gt; command arguments (and printing help / doing shell autocompletion) is<br>&gt; enough of a common task that I think it deserves to be part of the standard<br>&gt; library… not to mention the huge PITA that it becomes to attempt to use a<br>&gt; third-party library from a shell script.<br>&gt;<br>&gt; I’m especially interested in Dimitri or Robert’s opinions on whether this<br>&gt; kind of thing meets the standard library bar.<br>&gt;<br>&gt;<br>&gt; I’m looking toward some protocols that describe commands and their<br>&gt; options, including short and long form (-/--), --opt=value, etc. Type-safe<br>&gt; using enums that can convert from raw values, automatic printing of error &amp;<br>&gt; usage info when invalid options are passed. I’d also like to support<br>&gt; loading localized descriptions for the help text from a bundle for i8n<br>&gt; support (subject to what support exists in Swift’s Foundation).<br>&gt;<br>&gt;<br>&gt; If we can fill some of these holes it would make using swift scripts and<br>&gt; command line utilities a much nicer experience.<br>&gt;<br>&gt;<br>&gt; Russ<br>&gt;<br>&gt;<br>&gt;<br>&gt; Eventually I’d like to build up several components:<br>&gt;<br>&gt; * Arguments - parse command line args, print command help, support shell<br>&gt; auto-complete<br>&gt; * Terminal - Psuedo-terminal support, line discipline control, ANSI colors<br>&gt; &amp; other escape codes/commands, progress bars and other nice things for<br>&gt; output<br>&gt; * TerminalEditor - a swift interface to ncurses, term box, or some similar<br>&gt; cross-platform lib for doing command-line editing<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160817/4fdf5c03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch][stdlib] Command Line Option Parsing &amp; Help</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August 17, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Aug 17, 2016, at 9:41 AM, Will Field-Thompson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think it would be great to have something like this (at least the &quot;Arguments&quot; component) as part of the standard distribution — maybe as a corelib rather than as part of the standard library. Seeing as this is certainly not in scope for phase 1 of Swift 4, maybe it would be better to start this as an external library with the aim of having it brought into corelibs at some point in the future?<br></p><p>I agree.  I’d love to see this happen some day (and this is part of the rationale for moving Process.arguments to CommandLine.arguments), but it is out of scope for Swift4s1, and we don’t have a process for large scale new library functionality like this (yet).<br></p><p>When/if we do, I suspect it will highly prize libraries that already have a proven track record of wide use in the Swift community.  As such, I’d recommend building this functionality as a SwiftPM package in the meantime, or extending one of the ones that already exist.<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Pitch][stdlib] Command Line Option Parsing &amp; Help</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>August 17, 2016 at 10:00:00pm</p></header><div class="content"><p>If we introduce a new API to parse command-line arguments now, we&#39;re committing to support it for a very long time. It seems to me that this is the kind of thing that could evolve with the language, so I&#39;m not really in favor of fixing an implementation now.<br></p><p>Imagine this hypothetical scenario:<br></p><p>Swift 3 adds a program argument parser in the standard library;<br>Swift 4 implements an awesome feature that makes it possible to make a much better program argument parser;<br>Someone else implements that better argument parser that 99.9% of the Swift community prefers over the standard one;<br>We&#39;re stuck supporting the old and ugly parser as the standard library is part of the ABI, even though almost nobody uses it anymore.<br></p><p>To me, because of the not particularly low risk of deprecation, this should be left to third-party packages for now.<br></p><p>Félix<br></p><p>&gt; Le 17 août 2016 à 01:20:05, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I want to pitch a command line parsing addition to the standard library and get feedback before I polish up a full proposal.<br>&gt; <br>&gt; Swift is being positioned to fill numerous functions, including as a local scripting language. I think that’s great but having tried to use it for that purpose there are a number of holes that need to be filled. Parsing command arguments (and printing help / doing shell autocompletion) is enough of a common task that I think it deserves to be part of the standard library… not to mention the huge PITA that it becomes to attempt to use a third-party library from a shell script.<br>&gt; <br>&gt; I’m especially interested in Dimitri or Robert’s opinions on whether this kind of thing meets the standard library bar.<br>&gt; <br>&gt; <br>&gt; I’m looking toward some protocols that describe commands and their options, including short and long form (-/--), --opt=value, etc. Type-safe using enums that can convert from raw values, automatic printing of error &amp; usage info when invalid options are passed. I’d also like to support loading localized descriptions for the help text from a bundle for i8n support (subject to what support exists in Swift’s Foundation).<br>&gt; <br>&gt; <br>&gt; If we can fill some of these holes it would make using swift scripts and command line utilities a much nicer experience.<br>&gt; <br>&gt; <br>&gt; Russ<br>&gt; <br>&gt; <br>&gt; <br>&gt; Eventually I’d like to build up several components:<br>&gt; <br>&gt; * Arguments - parse command line args, print command help, support shell auto-complete<br>&gt; * Terminal - Psuedo-terminal support, line discipline control, ANSI colors &amp; other escape codes/commands, progress bars and other nice things for output<br>&gt; * TerminalEditor - a swift interface to ncurses, term box, or some similar cross-platform lib for doing command-line editing<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160817/8df0cd39/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
