<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Idea] Pin down IteratorProtocol&#39;s mutation semantics</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 29, 2016 at 03:00:00pm</p></header><div class="content"><p>on Fri Apr 29 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; IteratorProtocol imposes some strange limitations and preconditions<br>&gt; which basically boil down to &quot;this protocol is fundamentally mutating,<br>&gt; but we don&#39;t want to promise whether you&#39;re going to get value or<br>&gt; reference semantics, so don&#39;t do anything that might behave<br>&gt; differently depending on that, and by the way we can&#39;t possibly<br>&gt; enforce that in the type system, so good luck finding any mistakes<br>&gt; yourself&quot;. <br></p><p>Actually we could possibly enforce reference semantics.  I have asked<br>some optimizer folks around here to look into whether it would be<br>feasible to put a “: class” constraint on IteratorProtocol without<br>hurting performance, but I&#39;m not sure when they&#39;ll be able to get to it.<br>If someone in the community would like to do some experiments, that<br>would be great.<br></p><p>&gt; As far as I can tell, this is because some iterators *must* provide<br>&gt; reference semantics (e.g. when reading from a socket), while others<br>&gt; can be implemented perhaps more efficiently with a value type.<br></p><p>It&#39;s all speculation until we see what the optimizer can do (and can be<br>trained to do).  I believe we already are promoting some class instances<br>to the stack, but I could be wrong.<br></p><p>&gt; How bad would it be to force all iterators to provide reference<br>&gt; semantics by making IteratorProtocol a class protocol? Particularly if<br>&gt; we assume that iterators could generally be made `final`?<br>&gt;<br>&gt; Alternatively, how valuable is it to specify that you can&#39;t use an<br>&gt; iterator in a way that would expose whether it is a reference or a<br>&gt; value type? <br></p><p>Well, that&#39;s not a problem specific to iterators at all.  The general<br>problem is that:<br></p><p>* Reference semantics and value semantics are fundamentally different.<br></p><p>* We have no way to declare in the language that something has value or<br>  reference semantics.  It&#39;s possible to write classes whose instances<br>  have value semantics (make it final and don&#39;t provide any mutating<br>  methods or writable properties) and structs that have reference<br>  semantics (just make it delegate mutations and comparison to a<br>  contained class instance), and we haven&#39;t outlawed doing so.<br></p><p>I suppose we could *almost* constrain something to having reference<br>semantics by making it a class protocol with a mutating member, except<br>for this error: <br></p><p>  &#39;mutating&#39; isn&#39;t valid on methods in classes or class-bound protocols.  <br></p><p>…well, there is this horrible workaround:<br></p><p>  protocol HasMutatingMethod { mutating func f() }<br>  protocol HasReferenceSemantics : class, HasMutatingMethod {}<br></p><p>Although the semantic requirements on f ought to be enough:<br></p><p>  protocol HasReferenceSemantics : class {<br>    /// Updates `self` to its next state or whatever. &lt;====<br>    func f()<br>  }<br></p><p>I&#39;m sure the standard library is full of generic code that doesn&#39;t<br>actually work with reference types; I know of several specific<br>instances.<br></p><p>I used to think that we should have a language feature that allows us to<br>declare value semantics, but I am coming around to the idea that we<br>ought to simply require structs and enums to have value semantics (and<br>mutable classes, reference semantics—parenthesized because it just<br>happens naturally).  I believe we could give some really great<br>diagnostics for mistakes in this area, both in the compiler and in a<br>separate static analyzer, and that we could generate correct default<br>implementations of == and &lt; for almost everything.<br></p><p>&gt; The only iterators I can think of which would *need* to be reference<br>&gt; types are ones which draw elements from an outside source; for those,<br>&gt; it&#39;s unsurprising that copying doesn&#39;t &quot;work&quot;. Are there cases I&#39;m not<br>&gt; thinking of?<br>&gt;<br>&gt; Or have I totally misread the situation in some way?<br></p><p>Not at all, except perhaps for thinking that the general problem is<br>about iterators.  Still, it might be possbile as noted above to solve it<br>for iterators.<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
