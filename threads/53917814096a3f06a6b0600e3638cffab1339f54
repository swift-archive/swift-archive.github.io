<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>Hello all,<br></p><p>Considering what I do with Swift, I recently posted a pull request that adds a flag to the frontend that would disable all implicit optional conversions by making them errors.  From my perspective, implicit conversions are convenient, but they allow certain strange behaviors (https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72 &lt;https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72&gt;) to show up.  For the community, the question is threefold:<br></p><p>1) Would anything break if this were applied?<br>2) Would it be appropriate to expand the flag by allowing all implicit conversions to be disabled?<br>3) If you remain unconvinced it should be an error, would implicit conversion warnings be more appropriate?<br></p><p>Thanks,<br></p><p>~Robert Widmann (CodaFi)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/53919f54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  9, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 11:20 AM, Developer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello all,<br>&gt; <br>&gt; Considering what I do with Swift, I recently posted a pull request that adds a flag to the frontend that would disable all implicit optional conversions by making them errors.  From my perspective, implicit conversions are convenient, but they allow certain strange behaviors (https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72 &lt;https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72&gt;) to show up.  For the community, the question is threefold:<br>&gt; <br>&gt; 1) Would anything break if this were applied?<br>&gt; 2) Would it be appropriate to expand the flag by allowing all implicit conversions to be disabled?<br>&gt; 3) If you remain unconvinced it should be an error, would implicit conversion warnings be more appropriate?<br></p><p>Hi Robert,<br></p><p>The rules for implicit conversions are optionals need to be re-evaluated, I expect this to happen for Swift 3 (after Swift 2.2 is out of the door).  Once that is done, we can talk about a proposal like this.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/4387d909/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>December  9, 2015 at 06:00:00pm</p></header><div class="content"><p>OK, so Optional conversions need to be re-evaluated, but what about passing a flag disabling all implicit conversions entirely?<br></p><p>&gt; On Dec 9, 2015, at 5:47 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 11:20 AM, Developer via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello all,<br>&gt;&gt; <br>&gt;&gt; Considering what I do with Swift, I recently posted a pull request that adds a flag to the frontend that would disable all implicit optional conversions by making them errors.  From my perspective, implicit conversions are convenient, but they allow certain strange behaviors (https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72 &lt;https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72&gt;) to show up.  For the community, the question is threefold:<br>&gt;&gt; <br>&gt;&gt; 1) Would anything break if this were applied?<br>&gt;&gt; 2) Would it be appropriate to expand the flag by allowing all implicit conversions to be disabled?<br>&gt;&gt; 3) If you remain unconvinced it should be an error, would implicit conversion warnings be more appropriate?<br>&gt; <br>&gt; Hi Robert,<br>&gt; <br>&gt; The rules for implicit conversions are optionals need to be re-evaluated, I expect this to happen for Swift 3 (after Swift 2.2 is out of the door).  Once that is done, we can talk about a proposal like this.<br>&gt; <br>&gt; -Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/0f544543/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  9, 2015 at 03:00:00pm</p></header><div class="content"><p>On Dec 9, 2015, at 3:01 PM, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; OK, so Optional conversions need to be re-evaluated, but what about passing a flag disabling all implicit conversions entirely?<br></p><p>I don’t like the idea of having different incompatible dialects, and behavior changing modes.  That said, I’m personally not opposed to providing functionality that would enable people to use a reduced subsets of the language, and have the compiler enforce it.  For example, I don’t have a problem with someone saying they never want to use the x!, as!, try! family and have the compiler tell them if they do.<br></p><p>To relate this to your question, I’d be fine with functionality that causes the compiler to produce an error when code requires an implicit conversion, but I wouldn’t want them to be just “disabled”, because I think this could change the interpretation of valid swift code (in admittedly weird cases).<br></p><p>In terms of how to express this, I’m not in love with modal compiler flags :-).  I’d much rather this sort of requirement be specified as a pragma-like construct that applies to an arbitrary scope (e.g. class or function body) or a whole file.  This keeps the code self describing.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 5:47 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 11:20 AM, Developer via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Considering what I do with Swift, I recently posted a pull request that adds a flag to the frontend that would disable all implicit optional conversions by making them errors.  From my perspective, implicit conversions are convenient, but they allow certain strange behaviors (https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72 &lt;https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72&gt;) to show up.  For the community, the question is threefold:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) Would anything break if this were applied?<br>&gt;&gt;&gt; 2) Would it be appropriate to expand the flag by allowing all implicit conversions to be disabled?<br>&gt;&gt;&gt; 3) If you remain unconvinced it should be an error, would implicit conversion warnings be more appropriate?<br>&gt;&gt; <br>&gt;&gt; Hi Robert,<br>&gt;&gt; <br>&gt;&gt; The rules for implicit conversions are optionals need to be re-evaluated, I expect this to happen for Swift 3 (after Swift 2.2 is out of the door).  Once that is done, we can talk about a proposal like this.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/e06ada38/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>December  9, 2015 at 06:00:00pm</p></header><div class="content"><p>Oh, definitely.  So, how about a `-Wconversion`-style thing that you can `-Werror` with to get the same effect?  I think this kind of thing satisfies your requirements; It doesn’t create new dialects, is flippable per-file, and doesn’t change the interpretation of valid swift unless the author fully intends to do so.<br></p><p><br>&gt; On Dec 9, 2015, at 6:10 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Dec 9, 2015, at 3:01 PM, Developer &lt;devteam.codafi at gmail.com &lt;mailto:devteam.codafi at gmail.com&gt;&gt; wrote:<br>&gt;&gt; OK, so Optional conversions need to be re-evaluated, but what about passing a flag disabling all implicit conversions entirely?<br>&gt; <br>&gt; I don’t like the idea of having different incompatible dialects, and behavior changing modes.  That said, I’m personally not opposed to providing functionality that would enable people to use a reduced subsets of the language, and have the compiler enforce it.  For example, I don’t have a problem with someone saying they never want to use the x!, as!, try! family and have the compiler tell them if they do.<br>&gt; <br>&gt; To relate this to your question, I’d be fine with functionality that causes the compiler to produce an error when code requires an implicit conversion, but I wouldn’t want them to be just “disabled”, because I think this could change the interpretation of valid swift code (in admittedly weird cases).<br>&gt; <br>&gt; In terms of how to express this, I’m not in love with modal compiler flags :-).  I’d much rather this sort of requirement be specified as a pragma-like construct that applies to an arbitrary scope (e.g. class or function body) or a whole file.  This keeps the code self describing.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 9, 2015, at 5:47 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 9, 2015, at 11:20 AM, Developer via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Considering what I do with Swift, I recently posted a pull request that adds a flag to the frontend that would disable all implicit optional conversions by making them errors.  From my perspective, implicit conversions are convenient, but they allow certain strange behaviors (https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72 &lt;https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72&gt;) to show up.  For the community, the question is threefold:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1) Would anything break if this were applied?<br>&gt;&gt;&gt;&gt; 2) Would it be appropriate to expand the flag by allowing all implicit conversions to be disabled?<br>&gt;&gt;&gt;&gt; 3) If you remain unconvinced it should be an error, would implicit conversion warnings be more appropriate?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Robert,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The rules for implicit conversions are optionals need to be re-evaluated, I expect this to happen for Swift 3 (after Swift 2.2 is out of the door).  Once that is done, we can talk about a proposal like this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/c8894bd2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  9, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 9, 2015, at 3:18 PM, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Oh, definitely.  So, how about a `-Wconversion`-style thing that you can `-Werror` with to get the same effect?  I think this kind of thing satisfies your requirements; It doesn’t create new dialects, is flippable per-file, and doesn’t change the interpretation of valid swift unless the author fully intends to do so.<br></p><p>I’m saying that I’d prefer this to be something “inside” the source file.  If the -W flags were specifiable inside the source file, that would be fine with me in principle, it still needs a concrete design of course.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; <br>&gt;&gt; On Dec 9, 2015, at 6:10 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Dec 9, 2015, at 3:01 PM, Developer &lt;devteam.codafi at gmail.com &lt;mailto:devteam.codafi at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; OK, so Optional conversions need to be re-evaluated, but what about passing a flag disabling all implicit conversions entirely?<br>&gt;&gt; <br>&gt;&gt; I don’t like the idea of having different incompatible dialects, and behavior changing modes.  That said, I’m personally not opposed to providing functionality that would enable people to use a reduced subsets of the language, and have the compiler enforce it.  For example, I don’t have a problem with someone saying they never want to use the x!, as!, try! family and have the compiler tell them if they do.<br>&gt;&gt; <br>&gt;&gt; To relate this to your question, I’d be fine with functionality that causes the compiler to produce an error when code requires an implicit conversion, but I wouldn’t want them to be just “disabled”, because I think this could change the interpretation of valid swift code (in admittedly weird cases).<br>&gt;&gt; <br>&gt;&gt; In terms of how to express this, I’m not in love with modal compiler flags :-).  I’d much rather this sort of requirement be specified as a pragma-like construct that applies to an arbitrary scope (e.g. class or function body) or a whole file.  This keeps the code self describing.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 9, 2015, at 5:47 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 9, 2015, at 11:20 AM, Developer via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello all,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Considering what I do with Swift, I recently posted a pull request that adds a flag to the frontend that would disable all implicit optional conversions by making them errors.  From my perspective, implicit conversions are convenient, but they allow certain strange behaviors (https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72 &lt;https://github.com/typelift/Swiftz/blob/master/SwiftzTests/EitherSpec.swift#L72&gt;) to show up.  For the community, the question is threefold:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1) Would anything break if this were applied?<br>&gt;&gt;&gt;&gt;&gt; 2) Would it be appropriate to expand the flag by allowing all implicit conversions to be disabled?<br>&gt;&gt;&gt;&gt;&gt; 3) If you remain unconvinced it should be an error, would implicit conversion warnings be more appropriate?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Robert,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The rules for implicit conversions are optionals need to be re-evaluated, I expect this to happen for Swift 3 (after Swift 2.2 is out of the door).  Once that is done, we can talk about a proposal like this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/b147bbee/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Proposal: Add Flags to Disable [Optional] Conversions</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>December 11, 2015 at 08:00:00am</p></header><div class="content"><p>Yes!<br></p><p>&gt; On Dec 9, 2015, at 3:10 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don’t like the idea of having different incompatible dialects, and behavior changing modes.  That said, I’m personally not opposed to providing functionality that would enable people to use a reduced subsets of the language, and have the compiler enforce it.  For example, I don’t have a problem with someone saying they never want to use the x!, as!, try! family and have the compiler tell them if they do.<br>&gt; <br>&gt; In terms of how to express this, I’m not in love with modal compiler flags :-).  I’d much rather this sort of requirement be specified as a pragma-like construct that applies to an arbitrary scope (e.g. class or function body) or a whole file.  This keeps the code self describing.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
