<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Rename `x.dynamicType` to `x.Self`</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 14, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed Apr 13 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It&#39;s been pitched before, but I don&#39;t think we&#39;ve had a dedicated<br>&gt; thread to this idea. Erica has proposed making `Self` generally<br>&gt; available within methods in types to refer to the dynamic type of the<br>&gt; current receiver. One could think of `Self` as a special associated<br>&gt; type member that exists in every type for this purpose. This also<br>&gt; happens to be what you get when ask for the `dynamicType` member of a<br>&gt; value. We could unify these concepts and get rid of the clunky<br>&gt; `dynamicType` keyword, replacing it with `x.Self`.<br>&gt;<br>&gt; There&#39;s another benefit to this syntax change. Looking to the future,<br>&gt; one of the many features Doug pitched in his generics manifesto was to<br>&gt; generalize protocol existentials, lifting our current restrictions on<br>&gt; protocols &quot;with Self or associated types&quot; and allowing them to be used<br>&gt; as dynamic types in addition to static generic constraints. Once you<br>&gt; do this, you often want to &quot;open&quot; the type of the existential, so that<br>&gt; you can refer to its Self and associated types in the types of other<br>&gt; values. I think a natural way would be to let you directly use Self<br>&gt; and associated type members of existentials as types themselves, for<br>&gt; example:<br>&gt;<br>&gt; 	let a: Equatable = /*...*/<br>&gt; 	let b: Equatable = /*...*/<br>&gt;<br>&gt; 	// This is not allowed, since Equatable requires two values<br>&gt; with the same static type, but<br>&gt; 	// a and b may have different dynamic types.<br>&gt; 	a == b <br>&gt;<br>&gt; 	// However, we can dynamically cast one to the other&#39;s dynamic<br>&gt; type:<br>&gt; 	if let bAsA = b as? a.Self {<br>&gt; 		return a == bAsA<br>&gt; 	}<br></p><p>This doesn&#39;t entirely work, I think:<br></p><p>     class Z : Equatable {} // ...<br>     class A : Z {}<br>     class B : Z {}<br></p><p>     let a: Equatable = A()<br>     let b: Equatable = B()<br>     if let bAsA = b as? a.Self { ... } // test fails.<br></p><p>Of course, one could decide we don&#39;t care about classes conforming to<br>protocols with Self requirements.<br></p><p>&gt; 	let x: RangeReplaceableCollection = /*...*/<br>&gt; 	let y: Collection = /*...*/<br>&gt;<br>&gt; 	// If y has the same dynamic Element type as x, append it to x<br>&gt; 	var z: x.Self = x<br>&gt; 	if let yAsX = y as? Any&lt;Collection where Element == x.Element&gt;<br></p><p>I don&#39;t think x.Element can work.  Do you mean x.Self.Element?<br></p><p>&gt; <br>&gt; { z.append(yAsX) }<br>&gt;<br>&gt; `x.Self` then becomes just the first step in this direction.<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Rename `x.dynamicType` to `x.Self`</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 14, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 12:29 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Apr 13 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It&#39;s been pitched before, but I don&#39;t think we&#39;ve had a dedicated<br>&gt;&gt; thread to this idea. Erica has proposed making `Self` generally<br>&gt;&gt; available within methods in types to refer to the dynamic type of the<br>&gt;&gt; current receiver. One could think of `Self` as a special associated<br>&gt;&gt; type member that exists in every type for this purpose. This also<br>&gt;&gt; happens to be what you get when ask for the `dynamicType` member of a<br>&gt;&gt; value. We could unify these concepts and get rid of the clunky<br>&gt;&gt; `dynamicType` keyword, replacing it with `x.Self`.<br>&gt;&gt; <br>&gt;&gt; There&#39;s another benefit to this syntax change. Looking to the future,<br>&gt;&gt; one of the many features Doug pitched in his generics manifesto was to<br>&gt;&gt; generalize protocol existentials, lifting our current restrictions on<br>&gt;&gt; protocols &quot;with Self or associated types&quot; and allowing them to be used<br>&gt;&gt; as dynamic types in addition to static generic constraints. Once you<br>&gt;&gt; do this, you often want to &quot;open&quot; the type of the existential, so that<br>&gt;&gt; you can refer to its Self and associated types in the types of other<br>&gt;&gt; values. I think a natural way would be to let you directly use Self<br>&gt;&gt; and associated type members of existentials as types themselves, for<br>&gt;&gt; example:<br>&gt;&gt; <br>&gt;&gt; 	let a: Equatable = /*...*/<br>&gt;&gt; 	let b: Equatable = /*...*/<br>&gt;&gt; <br>&gt;&gt; 	// This is not allowed, since Equatable requires two values<br>&gt;&gt; with the same static type, but<br>&gt;&gt; 	// a and b may have different dynamic types.<br>&gt;&gt; 	a == b <br>&gt;&gt; <br>&gt;&gt; 	// However, we can dynamically cast one to the other&#39;s dynamic<br>&gt;&gt; type:<br>&gt;&gt; 	if let bAsA = b as? a.Self {<br>&gt;&gt; 		return a == bAsA<br>&gt;&gt; 	}<br>&gt; <br>&gt; This doesn&#39;t entirely work, I think:<br>&gt; <br>&gt;     class Z : Equatable {} // ...<br>&gt;     class A : Z {}<br>&gt;     class B : Z {}<br>&gt; <br>&gt;     let a: Equatable = A()<br>&gt;     let b: Equatable = B()<br>&gt;     if let bAsA = b as? a.Self { ... } // test fails.<br>&gt; <br>&gt; Of course, one could decide we don&#39;t care about classes conforming to<br>&gt; protocols with Self requirements.<br></p><p>I don&#39;t see the problem. B is-an A, so equating an A to a B is equating an A to an A (from the conformance&#39;s perspective, Self == A). A() == B() works by the same principle.<br></p><p>&gt; <br>&gt;&gt; 	let x: RangeReplaceableCollection = /*...*/<br>&gt;&gt; 	let y: Collection = /*...*/<br>&gt;&gt; <br>&gt;&gt; 	// If y has the same dynamic Element type as x, append it to x<br>&gt;&gt; 	var z: x.Self = x<br>&gt;&gt; 	if let yAsX = y as? Any&lt;Collection where Element == x.Element&gt;<br>&gt; <br>&gt; I don&#39;t think x.Element can work.  Do you mean x.Self.Element?<br></p><p>TBD, when we get there, but requiring `x.Self.Element` doesn&#39;t seem necessary to me.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Rename `x.dynamicType` to `x.Self`</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 12:29 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Apr 13 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It&#39;s been pitched before, but I don&#39;t think we&#39;ve had a dedicated<br>&gt;&gt; thread to this idea. Erica has proposed making `Self` generally<br>&gt;&gt; available within methods in types to refer to the dynamic type of the<br>&gt;&gt; current receiver. One could think of `Self` as a special associated<br>&gt;&gt; type member that exists in every type for this purpose. This also<br>&gt;&gt; happens to be what you get when ask for the `dynamicType` member of a<br>&gt;&gt; value. We could unify these concepts and get rid of the clunky<br>&gt;&gt; `dynamicType` keyword, replacing it with `x.Self`.<br>&gt;&gt; <br>&gt;&gt; There&#39;s another benefit to this syntax change. Looking to the future,<br>&gt;&gt; one of the many features Doug pitched in his generics manifesto was to<br>&gt;&gt; generalize protocol existentials, lifting our current restrictions on<br>&gt;&gt; protocols &quot;with Self or associated types&quot; and allowing them to be used<br>&gt;&gt; as dynamic types in addition to static generic constraints. Once you<br>&gt;&gt; do this, you often want to &quot;open&quot; the type of the existential, so that<br>&gt;&gt; you can refer to its Self and associated types in the types of other<br>&gt;&gt; values. I think a natural way would be to let you directly use Self<br>&gt;&gt; and associated type members of existentials as types themselves, for<br>&gt;&gt; example:<br>&gt;&gt; <br>&gt;&gt; 	let a: Equatable = /*...*/<br>&gt;&gt; 	let b: Equatable = /*...*/<br>&gt;&gt; <br>&gt;&gt; 	// This is not allowed, since Equatable requires two values<br>&gt;&gt; with the same static type, but<br>&gt;&gt; 	// a and b may have different dynamic types.<br>&gt;&gt; 	a == b <br>&gt;&gt; <br>&gt;&gt; 	// However, we can dynamically cast one to the other&#39;s dynamic<br>&gt;&gt; type:<br>&gt;&gt; 	if let bAsA = b as? a.Self {<br>&gt;&gt; 		return a == bAsA<br>&gt;&gt; 	}<br>&gt; <br>&gt; This doesn&#39;t entirely work, I think:<br>&gt; <br>&gt;     class Z : Equatable {} // ...<br>&gt;     class A : Z {}<br>&gt;     class B : Z {}<br>&gt; <br>&gt;     let a: Equatable = A()<br>&gt;     let b: Equatable = B()<br>&gt;     if let bAsA = b as? a.Self { ... } // test fails.<br>&gt; <br>&gt; Of course, one could decide we don&#39;t care about classes conforming to<br>&gt; protocols with Self requirements.<br></p><p>I see, I misread in my previous response. You&#39;re right this wouldn&#39;t necessarily just work. This is far from the only subtle issue with existentials containing subclasses, though; unfortunately there are two levels of dynamic type at play, and we&#39;re pretty inconsistent about keeping them, well, consistent. One approach here might be to try to always store the upper bound class as the existential-dynamic-type of the existential wrapper.<br></p><p>-Joe<br></p><p>&gt;&gt; 	let x: RangeReplaceableCollection = /*...*/<br>&gt;&gt; 	let y: Collection = /*...*/<br>&gt;&gt; <br>&gt;&gt; 	// If y has the same dynamic Element type as x, append it to x<br>&gt;&gt; 	var z: x.Self = x<br>&gt;&gt; 	if let yAsX = y as? Any&lt;Collection where Element == x.Element&gt;<br>&gt; <br>&gt; I don&#39;t think x.Element can work.  Do you mean x.Self.Element?<br>&gt; <br>&gt;&gt; <br>&gt;&gt; { z.append(yAsX) }<br>&gt;&gt; <br>&gt;&gt; `x.Self` then becomes just the first step in this direction.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
