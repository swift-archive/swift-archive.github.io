<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Add &quot;maybe&quot; keyword / Explicit Support for Ternary Logic</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January  7, 2016 at 06:00:00pm</p></header><div class="content"><p>Does anyone else occasionally do stuff like this?<br>typealias Tern = Bool?<br>let maybe:Tern = nil<br></p><p>Personally, I’ve only needed it a couple times, but it seems like it could be useful. Maybe Tern should be its own enum instead of a typealias. <br>Either way, aesthetically speaking, it’d be nice to have “maybe” be colored the same as “true” and “false”.<br></p><p>I’m not sure if there’s a generally agreed-upon ternary truth-table, especially for code like:<br>	if maybe == true {<br>		…<br>	} else {<br>		…<br>	}<br></p><p>(Come to think of it, didn’t someone suggest abandoning:<br>	if something == something_else {<br>		…<br>	} else {<br>		…<br>	}<br>in favor of:<br>	switch (something == something_else) {<br>	case true: …<br>	case false: …<br>	}<br>If so, that’d clean up the syntax since switches have to be exhaustive anyway… If a comparison results in a Tern you need to have a maybe case, if it results in a Bool you don’t.<br></p><p><br></p><p>Anyway, thoughts?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Add &quot;maybe&quot; keyword / Explicit Support for Ternary Logic</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>January  7, 2016 at 07:00:00pm</p></header><div class="content"><p>I’m not sure I understand what you intend to do here.  If you mean to introduce a non-determinism type, that’s what the list monad is for.  If you want true trivalent logic, then the type Tern you describe is precisely the type that it corresponds to.<br></p><p><br>&gt; On Jan 7, 2016, at 7:03 PM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Does anyone else occasionally do stuff like this?<br>&gt; typealias Tern = Bool?<br>&gt; let maybe:Tern = nil<br>&gt; <br>&gt; Personally, I’ve only needed it a couple times, but it seems like it could be useful. Maybe Tern should be its own enum instead of a typealias. <br>&gt; Either way, aesthetically speaking, it’d be nice to have “maybe” be colored the same as “true” and “false”.<br>&gt; <br>&gt; I’m not sure if there’s a generally agreed-upon ternary truth-table, especially for code like:<br>&gt; 	if maybe == true {<br>&gt; 		…<br>&gt; 	} else {<br>&gt; 		…<br>&gt; 	}<br>&gt; <br>&gt; (Come to think of it, didn’t someone suggest abandoning:<br>&gt; 	if something == something_else {<br>&gt; 		…<br>&gt; 	} else {<br>&gt; 		…<br>&gt; 	}<br>&gt; in favor of:<br>&gt; 	switch (something == something_else) {<br>&gt; 	case true: …<br>&gt; 	case false: …<br>&gt; 	}<br>&gt; If so, that’d clean up the syntax since switches have to be exhaustive anyway… If a comparison results in a Tern you need to have a maybe case, if it results in a Bool you don’t.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Anyway, thoughts?<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Add &quot;maybe&quot; keyword / Explicit Support for Ternary Logic</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January  7, 2016 at 06:00:00pm</p></header><div class="content"><p>Oh! I hadn’t considered a non-deterministic option. That’s interesting…<br></p><p>To answer your question, though, I was referring to a trivalent type. Mostly I just think it’d be nice to have the keyword coloring for “maybe”.<br></p><p>&gt; On Jan 7, 2016, at 18:10, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’m not sure I understand what you intend to do here.  If you mean to introduce a non-determinism type, that’s what the list monad is for.  If you want true trivalent logic, then the type Tern you describe is precisely the type that it corresponds to.<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 7, 2016, at 7:03 PM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Does anyone else occasionally do stuff like this?<br>&gt;&gt; typealias Tern = Bool?<br>&gt;&gt; let maybe:Tern = nil<br>&gt;&gt; <br>&gt;&gt; Personally, I’ve only needed it a couple times, but it seems like it could be useful. Maybe Tern should be its own enum instead of a typealias. <br>&gt;&gt; Either way, aesthetically speaking, it’d be nice to have “maybe” be colored the same as “true” and “false”.<br>&gt;&gt; <br>&gt;&gt; I’m not sure if there’s a generally agreed-upon ternary truth-table, especially for code like:<br>&gt;&gt; 	if maybe == true {<br>&gt;&gt; 		…<br>&gt;&gt; 	} else {<br>&gt;&gt; 		…<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; (Come to think of it, didn’t someone suggest abandoning:<br>&gt;&gt; 	if something == something_else {<br>&gt;&gt; 		…<br>&gt;&gt; 	} else {<br>&gt;&gt; 		…<br>&gt;&gt; 	}<br>&gt;&gt; in favor of:<br>&gt;&gt; 	switch (something == something_else) {<br>&gt;&gt; 	case true: …<br>&gt;&gt; 	case false: …<br>&gt;&gt; 	}<br>&gt;&gt; If so, that’d clean up the syntax since switches have to be exhaustive anyway… If a comparison results in a Tern you need to have a maybe case, if it results in a Bool you don’t.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Anyway, thoughts?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
