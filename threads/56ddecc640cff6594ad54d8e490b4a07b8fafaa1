<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>How to specify system header dependencies</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>December 14, 2015 at 11:00:00am</p></header><div class="content"><p>Hello,<br></p><p>I have a project that has a dependency on the asl.h system header.<br></p><p>This header is present on all Apple platforms. When building with Xcode, this dependency is specified in the bridging header, allowing the C API provided by asl.h to be exposed to Swift.<br></p><p>As far as I can tell, there&#39;s no way to specify a bridging header using the Swift Package Manager or to otherwise specify a C API to expose to Swift.<br></p><p>Am I mistaken? Am I just missing something? Or is SPM only intended to be used to build something in &quot;pure Swift&quot;?<br></p><p>Thanks,<br>Evan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>How to specify system header dependencies</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 14, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 8:15 AM, Evan Maloney via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I have a project that has a dependency on the asl.h system header.<br>&gt; <br>&gt; This header is present on all Apple platforms. When building with Xcode, this dependency is specified in the bridging header, allowing the C API provided by asl.h to be exposed to Swift.<br></p><p>For now, the only way to do this is with the &quot;system modules&quot; feature (and a hard coded path): https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md<br></p><p>&gt; As far as I can tell, there&#39;s no way to specify a bridging header using the Swift Package Manager or to otherwise specify a C API to expose to Swift.<br>&gt; <br>&gt; Am I mistaken? Am I just missing something? Or is SPM only intended to be used to build something in &quot;pure Swift&quot;?<br></p><p>You are correct, but it isn&#39;t about &quot;intention&quot;, this is just stuff which isn&#39;t supported *yet*.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Thanks,<br>&gt; Evan<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>How to specify system header dependencies</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>December 14, 2015 at 11:00:00am</p></header><div class="content"><p>Thanks for the tip, Daniel. I&#39;ll give that a try.<br></p><p>Very excited that SPM was included in the Swift release. It&#39;s going to solve a real pain point for developers.<br></p><p><br></p><p>&gt; On Dec 14, 2015, at 11:28 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 8:15 AM, Evan Maloney via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I have a project that has a dependency on the asl.h system header.<br>&gt;&gt; <br>&gt;&gt; This header is present on all Apple platforms. When building with Xcode, this dependency is specified in the bridging header, allowing the C API provided by asl.h to be exposed to Swift.<br>&gt; <br>&gt; For now, the only way to do this is with the &quot;system modules&quot; feature (and a hard coded path): https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md<br>&gt; <br>&gt;&gt; As far as I can tell, there&#39;s no way to specify a bridging header using the Swift Package Manager or to otherwise specify a C API to expose to Swift.<br>&gt;&gt; <br>&gt;&gt; Am I mistaken? Am I just missing something? Or is SPM only intended to be used to build something in &quot;pure Swift&quot;?<br>&gt; <br>&gt; You are correct, but it isn&#39;t about &quot;intention&quot;, this is just stuff which isn&#39;t supported *yet*.<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Evan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>How to specify system header dependencies</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>December 15, 2015 at 01:00:00am</p></header><div class="content"><p>Hi Daniel,<br></p><p>Just wanted to give you an update: I was able to declare a stub package for the Apple System Log&#39;s C headers and expose them to Swift. I&#39;m happy to report that I&#39;m now able to compile against asl.h successfully and can call the API from Swift.<br></p><p>The package declaration for ASL is here -- perhaps other people might find it helpful:<br></p><p>https://github.com/emaloney/AppleSystemLogSwiftPackage<br></p><p>As you&#39;ll notice in the module map, I&#39;m hard-coding the path to a specific version of the Mac OS X SDK:<br></p><p>https://github.com/emaloney/AppleSystemLogSwiftPackage/blob/master/module.modulemap<br></p><p>That&#39;s definitely not great in the long-run; do you know if there&#39;s a better way to do it?<br></p><p>I would love to help push this tool forward; I was wondering if you or anyone else at Apple could shed some light on what might be in active development with SPM and where you&#39;re looking for community involvement?<br></p><p>In particular I&#39;d be interested in looking at adding iOS, tvOS and watchOS support, as I&#39;ve noticed there doesn&#39;t seem to be a way to specify a platform other than OS X, which is built by default.<br></p><p>E.<br></p><p><br></p><p>&gt; On Dec 14, 2015, at 11:37 AM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Thanks for the tip, Daniel. I&#39;ll give that a try.<br>&gt; <br>&gt; Very excited that SPM was included in the Swift release. It&#39;s going to solve a real pain point for developers.<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 11:28 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 14, 2015, at 8:15 AM, Evan Maloney via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have a project that has a dependency on the asl.h system header.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This header is present on all Apple platforms. When building with Xcode, this dependency is specified in the bridging header, allowing the C API provided by asl.h to be exposed to Swift.<br>&gt;&gt; <br>&gt;&gt; For now, the only way to do this is with the &quot;system modules&quot; feature (and a hard coded path): https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md<br>&gt;&gt; <br>&gt;&gt;&gt; As far as I can tell, there&#39;s no way to specify a bridging header using the Swift Package Manager or to otherwise specify a C API to expose to Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am I mistaken? Am I just missing something? Or is SPM only intended to be used to build something in &quot;pure Swift&quot;?<br>&gt;&gt; <br>&gt;&gt; You are correct, but it isn&#39;t about &quot;intention&quot;, this is just stuff which isn&#39;t supported *yet*.<br>&gt;&gt; <br>&gt;&gt; - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Evan<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>How to specify system header dependencies</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 14, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 10:45 PM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Hi Daniel,<br>&gt; <br>&gt; Just wanted to give you an update: I was able to declare a stub package for the Apple System Log&#39;s C headers and expose them to Swift. I&#39;m happy to report that I&#39;m now able to compile against asl.h successfully and can call the API from Swift.<br>&gt; <br>&gt; The package declaration for ASL is here -- perhaps other people might find it helpful:<br>&gt; <br>&gt; https://github.com/emaloney/AppleSystemLogSwiftPackage<br>&gt; <br>&gt; As you&#39;ll notice in the module map, I&#39;m hard-coding the path to a specific version of the Mac OS X SDK:<br>&gt; <br>&gt; https://github.com/emaloney/AppleSystemLogSwiftPackage/blob/master/module.modulemap<br>&gt; <br>&gt; That&#39;s definitely not great in the long-run; do you know if there&#39;s a better way to do it?<br></p><p>Not yet, we still need a design for this.<br></p><p>&gt; I would love to help push this tool forward; I was wondering if you or anyone else at Apple could shed some light on what might be in active development with SPM and where you&#39;re looking for community involvement?<br></p><p>Our current proposals are a good indication of what Max and I are working on (Tests and C source integration, respectively).<br></p><p>Currently we could use help with screening and triaging the bugs in the Package Manager component on bugs.swift.org, and then trying to either get fixes for them (if they are just bugs), or trying to sort out what the overarching problems are and how to address them.<br></p><p>&gt; In particular I&#39;d be interested in looking at adding iOS, tvOS and watchOS support, as I&#39;ve noticed there doesn&#39;t seem to be a way to specify a platform other than OS X, which is built by default.<br></p><p>Cool!<br></p><p>Are you talking about apps for those platforms, or just being able to build libraries targeting them that could then be integrated into apps?<br></p><p>Tackling full on apps is a big project because of all the other pieces that are necessary (support for resources, support for real frameworks, support for different product types, etc.). Tackling just being able to build libraries targeting those platforms should be more tractable though. There are a varies things we will need for that. In no particular order:<br>1. A design for the command line workflow for specify the deployment platform.<br>2. An implementation of the internal platform specific configuration &quot;stuff&quot; (i.e., how are we going to organize platform specific code in swiftpm itself).<br>3. A design for how we would add platform specific attributes for targets. There is a straw man included in the Swift based manifest proposal (https://github.com/apple/swift-package-manager/blob/master/Documentation/Internals/SwiftBasedManifestFormat.md) for declaring conditional dependencies. I&#39;m not sure how quickly we would need this to do useful things.<br>4. .... <br></p><p>If you are interested in the app side, then it will be a long road, but the best place to start is tackle an individual feature (like support for resources) and come up with a design that integrates and works with what is already there.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; E.<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Dec 14, 2015, at 11:37 AM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for the tip, Daniel. I&#39;ll give that a try.<br>&gt;&gt; <br>&gt;&gt; Very excited that SPM was included in the Swift release. It&#39;s going to solve a real pain point for developers.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 14, 2015, at 11:28 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 14, 2015, at 8:15 AM, Evan Maloney via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have a project that has a dependency on the asl.h system header.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This header is present on all Apple platforms. When building with Xcode, this dependency is specified in the bridging header, allowing the C API provided by asl.h to be exposed to Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For now, the only way to do this is with the &quot;system modules&quot; feature (and a hard coded path): https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As far as I can tell, there&#39;s no way to specify a bridging header using the Swift Package Manager or to otherwise specify a C API to expose to Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am I mistaken? Am I just missing something? Or is SPM only intended to be used to build something in &quot;pure Swift&quot;?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You are correct, but it isn&#39;t about &quot;intention&quot;, this is just stuff which isn&#39;t supported *yet*.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Evan<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>How to specify system header dependencies</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>December 15, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 1:58 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; Currently we could use help with screening and triaging the bugs in the Package Manager component on bugs.swift.org &lt;http://bugs.swift.org/&gt;, and then trying to either get fixes for them (if they are just bugs), or trying to sort out what the overarching problems are and how to address them.<br></p><p>I&#39;ll start taking a look.<br></p><p>&gt;&gt; In particular I&#39;d be interested in looking at adding iOS, tvOS and watchOS support, as I&#39;ve noticed there doesn&#39;t seem to be a way to specify a platform other than OS X, which is built by default.<br>&gt; <br>&gt; Cool!<br>&gt; <br>&gt; Are you talking about apps for those platforms, or just being able to build libraries targeting them that could then be integrated into apps?<br>&gt; <br>&gt; [...]<br></p><p>I&#39;m just talking about libraries.<br></p><p>&gt; Tackling just being able to build libraries targeting those platforms should be more tractable though. There are a varies things we will need for that. In no particular order:<br>&gt; 1. A design for the command line workflow for specify the deployment platform.<br></p><p>I suppose both platform and architecture are required if we expect to be able to build libraries that can run in a simulator.<br></p><p>&gt; 2. An implementation of the internal platform specific configuration &quot;stuff&quot; (i.e., how are we going to organize platform specific code in swiftpm itself).<br>&gt; 3. A design for how we would add platform specific attributes for targets. There is a straw man included in the Swift based manifest proposal (https://github.com/apple/swift-package-manager/blob/master/Documentation/Internals/SwiftBasedManifestFormat.md &lt;https://github.com/apple/swift-package-manager/blob/master/Documentation/Internals/SwiftBasedManifestFormat.md&gt;) for declaring conditional dependencies. I&#39;m not sure how quickly we would need this to do useful things.<br></p><p>Plenty to dig into. Thanks for this.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20151215/0472dff4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
