<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0066: Standardize function type	argument syntax to require parentheses</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 27, 2016 at 08:00:00am</p></header><div class="content"><p>I am strictly against requiring parentheses in closure expressions. Parentheses are visual clutter if not really needed and for a closure expression there is no need for parentheses as the parameter list is already nicely bracketed by `{ ... in`.<br></p><p>Actually I would argue that parentheses around parameter lists in closure expressions should be prohibited for that reason.<br></p><p><br></p><p>I&#39;m not fond of requiring parentheses around single non-tuple parameters in type declarations either but I could probably grudgingly live with that change.<br></p><p>But keep away from closure expressions, please! There is nothing ambiguous there.<br></p><p><br></p><p>-Thorsten<br></p><p><br></p><p><br>Am 27. April 2016 um 00:07 schrieb David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt;:<br></p><p><br></p><p><br>On Apr 26, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p><br></p><p><br>On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br>What is your evaluation of the proposal?<br></p><p>I reluctantly agree with the proposal with the following caveat: I do not agree with the rationale to support being able to choose to omit the () for the parameter list of the closure declaration.<br></p><p><br>I see no cohesive argument that says that the parens should be required in some cases but not in others when talking about parameter lists.<br></p><p><br>I believe the proposal should be amended that the following should be the only allowable forms:<br></p><p><br>Hi David,<br></p><p><br>To be clear, this proposal is not about changing closure expressions, it was just a FAQ, and the section at the end is simply my personal opinion.  Changing closure expression syntax would be a separate proposal.<br></p><p><br>My argument is changing the parameter list in one context but not the other is only solving one of the potentially ambiguous use cases instead of the general case. My opinion is they should be changed as the same time if they are going to be changed at all.<br></p><p><br>-David<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/cf1a9580/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 27, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; But keep away from closure expressions, please! There is nothing ambiguous<br> &gt; there.<br></p><p>Really?<br></p><p>func z1(block: (Int,Int) -&gt; Void) {<br>     block(1,2)<br>}<br></p><p>z1 { x, y in print(x,y)} //<br>z1 { x in print(x.0, x.1)} // ???<br>z1 { (x, y) in print(x, y)} //<br></p><p>func z2(block: ((Int,Int)) -&gt; Void) {<br>     block((1,2))<br>}<br></p><p>z2 { x, y in print(x,y)} // ???<br>z2 { x in print(x.0, x.1)}<br>z2 { (x, y) in print(x, y)} // ???<br>//z2 { ((x, y)) in print(x, y)}  // compilation error<br></p><p>// this will compile, but<br>runtime error<br>let ft : (Int,Int) -&gt; Void = { x in print(x)} // hm..<br>ft(1, 2)<br></p><p>On 27.04.2016 11:53, Thorsten Seitz via swift-evolution wrote:<br>&gt; I am strictly against requiring parentheses in closure expressions.<br>&gt; Parentheses are visual clutter if not really needed and for a closure<br>&gt; expression there is no need for parentheses as the parameter list is<br>&gt; already nicely bracketed by `{ ... in`.<br>&gt; Actually I would argue that parentheses around parameter lists in closure<br>&gt; expressions should be prohibited for that reason.<br>&gt;<br>&gt; I&#39;m not fond of requiring parentheses around single non-tuple parameters in<br>&gt; type declarations either but I could probably grudgingly live with that change.<br>&gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt; there.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt;<br>&gt; Am 27. April 2016 um 00:07 schrieb David Owens II via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Apr 26, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com<br>&gt;&gt;&gt; &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; *What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; *<br>&gt;&gt;&gt;&gt; I reluctantly agree with the proposal with the following caveat: I do<br>&gt;&gt;&gt;&gt; not agree with the rationale to support being able to choose to<br>&gt;&gt;&gt;&gt; omit the () for the parameter list of the closure declaration.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I see no cohesive argument that says that the parens should be required<br>&gt;&gt;&gt;&gt; in some cases but not in others when talking about parameter lists.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I believe the proposal should be amended that the following should be<br>&gt;&gt;&gt;&gt; the only allowable forms:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To be clear, this proposal is not about changing closure expressions, it<br>&gt;&gt;&gt; was just a FAQ, and the section at the end is simply my personal<br>&gt;&gt;&gt; opinion.  Changing closure expression syntax would be a separate proposal.<br>&gt;&gt;<br>&gt;&gt; My argument is changing the parameter list in one context but not the<br>&gt;&gt; other is only solving one of the potentially ambiguous use cases instead<br>&gt;&gt; of the general case. My opinion is they should be changed as the same<br>&gt;&gt; time if they are going to be changed at all.<br>&gt;&gt;<br>&gt;&gt; -David<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 27, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Am 27.04.2016 um 14:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; &gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt; &gt; there.<br>&gt; <br>&gt; Really?<br></p><p>Ok, you got me there :-)<br>I have to clarify: no ambiguity if parentheses would be prohibited around parameter lists in closure expressions like I suggested. <br>Furthermore the current implementation seems to do some auto-(un)splatting which should go away.<br></p><p>&gt; <br>&gt; func z1(block: (Int,Int) -&gt; Void) {<br>&gt;    block(1,2)<br>&gt; }<br>&gt; <br>&gt; z1 { x, y in print(x,y)} //<br></p><p>(Int, Int) is a parameter list, so this is ok<br></p><p>&gt; z1 { x in print(x.0, x.1)} // ???<br></p><p>This should not work IMO as the type is (Int, Int) -&gt; Void where (Int, Int) is a parameter list and not a tuple.<br>Seems to be tuple unsplatting at work here.<br></p><p>&gt; z1 { (x, y) in print(x, y)} //<br></p><p>This should not work for the given definition of z1 as (x, y) is a tuple.<br></p><p>&gt; func z2(block: ((Int,Int)) -&gt; Void) {<br>&gt;    block((1,2))<br>&gt; }<br>&gt; <br>&gt; z2 { x, y in print(x,y)} // ???<br></p><p>This should not work IMO (tuple splatting at work here)<br></p><p>&gt; z2 { x in print(x.0, x.1)}<br></p><p>Fine, as x is a tuple.<br></p><p>&gt; z2 { (x, y) in print(x, y)} // ???<br></p><p>Fine, as (x, y) is a tuple. This raises another issue, though: this is using pattern matching without having to write `let` or `case let`. That’s probably a good thing and I’d rather like to get rid of `let` for bindings in pattern matching in other places.<br></p><p>&gt; //z2 { ((x, y)) in print(x, y)}  // compilation error<br></p><p>This should not work IMO as parentheses should not be allowed around argument lists in closure expressions.<br></p><p>&gt; <br>&gt; // this will compile, but<br>&gt; runtime error<br>&gt; let ft : (Int,Int) -&gt; Void = { x in print(x)} // hm..<br>&gt; ft(1, 2)<br></p><p>There is no runtime error in my playground.<br>The result printed is (1, 2)<br></p><p>This should not work IMO as the type is (Int, Int) -&gt; Void where (Int, Int) is a parameter list and not a tuple.<br>You would have to write<br>let ft : (Int,Int) -&gt; Void = { x, y in print(x, y) } // 1 2<br>or<br>let ft : ((Int,Int)) -&gt; Void = { x in print(x) } // (1, 2)<br></p><p><br>To rehash:<br></p><p>Rules for function type definitions:<br>- parentheses are required around argument lists of more than one argument, i.e. (Int, Int) -&gt; Void (same as in SE-0066)<br>- parentheses are required around argument lists with a single tuple argument, i.e. ((Int, Int)) -&gt; Void (same as in SE-0066)<br>- parentheses are prohibited around single non-tuple arguments, i.e. Int -&gt; Void (different from SE-0066)<br></p><p>Rule for argument lists in closure expressions:<br>- parentheses are prohibited around the argument list (as it is clearly enclosed by `{ … in`, therefore parentheses can only be used for tuples (different from current state)<br></p><p>This would result in nice unambiguous code without unnecessary parentheses.<br></p><p>-Thorsten<br></p><p><br>&gt; <br>&gt; On 27.04.2016 11:53, Thorsten Seitz via swift-evolution wrote:<br>&gt;&gt; I am strictly against requiring parentheses in closure expressions.<br>&gt;&gt; Parentheses are visual clutter if not really needed and for a closure<br>&gt;&gt; expression there is no need for parentheses as the parameter list is<br>&gt;&gt; already nicely bracketed by `{ ... in`.<br>&gt;&gt; Actually I would argue that parentheses around parameter lists in closure<br>&gt;&gt; expressions should be prohibited for that reason.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not fond of requiring parentheses around single non-tuple parameters in<br>&gt;&gt; type declarations either but I could probably grudgingly live with that change.<br>&gt;&gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt;&gt; there.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Am 27. April 2016 um 00:07 schrieb David Owens II via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 26, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com<br>&gt;&gt;&gt;&gt; &lt;mailto:clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; *What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; *<br>&gt;&gt;&gt;&gt;&gt; I reluctantly agree with the proposal with the following caveat: I do<br>&gt;&gt;&gt;&gt;&gt; not agree with the rationale to support being able to choose to<br>&gt;&gt;&gt;&gt;&gt; omit the () for the parameter list of the closure declaration.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I see no cohesive argument that says that the parens should be required<br>&gt;&gt;&gt;&gt;&gt; in some cases but not in others when talking about parameter lists.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I believe the proposal should be amended that the following should be<br>&gt;&gt;&gt;&gt;&gt; the only allowable forms:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To be clear, this proposal is not about changing closure expressions, it<br>&gt;&gt;&gt;&gt; was just a FAQ, and the section at the end is simply my personal<br>&gt;&gt;&gt;&gt; opinion.  Changing closure expression syntax would be a separate proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My argument is changing the parameter list in one context but not the<br>&gt;&gt;&gt; other is only solving one of the potentially ambiguous use cases instead<br>&gt;&gt;&gt; of the general case. My opinion is they should be changed as the same<br>&gt;&gt;&gt; time if they are going to be changed at all.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -David<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/060a0d16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>April 27, 2016 at 03:00:00pm</p></header><div class="content"><p>You forgot that parentheses are required for labeled closures with type information:<br></p><p>x.sorted { (x: Int, y: Int) in x &gt; y }<br></p><p>You&#39;d have to handle that case as well.<br></p><p><br>x.sorted { x: Int, y: Int in x &gt; y }<br></p><p>I think the above leads to potentially ambiguous parsing constructs. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Apr 27, 2016, at 1:18 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Am 27.04.2016 um 14:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; &gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt;&gt; &gt; there.<br>&gt;&gt; <br>&gt;&gt; Really?<br>&gt; <br>&gt; Ok, you got me there :-)<br>&gt; I have to clarify: no ambiguity if parentheses would be prohibited around parameter lists in closure expressions like I suggested. <br>&gt; Furthermore the current implementation seems to do some auto-(un)splatting which should go away.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; func z1(block: (Int,Int) -&gt; Void) {<br>&gt;&gt;    block(1,2)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; z1 { x, y in print(x,y)} //<br>&gt; <br>&gt; (Int, Int) is a parameter list, so this is ok<br>&gt; <br>&gt;&gt; z1 { x in print(x.0, x.1)} // ???<br>&gt; <br>&gt; This should not work IMO as the type is (Int, Int) -&gt; Void where (Int, Int) is a parameter list and not a tuple.<br>&gt; Seems to be tuple unsplatting at work here.<br>&gt; <br>&gt;&gt; z1 { (x, y) in print(x, y)} //<br>&gt; <br>&gt; This should not work for the given definition of z1 as (x, y) is a tuple.<br>&gt; <br>&gt;&gt; func z2(block: ((Int,Int)) -&gt; Void) {<br>&gt;&gt;    block((1,2))<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; z2 { x, y in print(x,y)} // ???<br>&gt; <br>&gt; This should not work IMO (tuple splatting at work here)<br>&gt; <br>&gt;&gt; z2 { x in print(x.0, x.1)}<br>&gt; <br>&gt; Fine, as x is a tuple.<br>&gt; <br>&gt;&gt; z2 { (x, y) in print(x, y)} // ???<br>&gt; <br>&gt; Fine, as (x, y) is a tuple. This raises another issue, though: this is using pattern matching without having to write `let` or `case let`. That’s probably a good thing and I’d rather like to get rid of `let` for bindings in pattern matching in other places.<br>&gt; <br>&gt;&gt; //z2 { ((x, y)) in print(x, y)}  // compilation error<br>&gt; <br>&gt; This should not work IMO as parentheses should not be allowed around argument lists in closure expressions.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; // this will compile, but<br>&gt;&gt; runtime error<br>&gt;&gt; let ft : (Int,Int) -&gt; Void = { x in print(x)} // hm..<br>&gt;&gt; ft(1, 2)<br>&gt; <br>&gt; There is no runtime error in my playground.<br>&gt; The result printed is (1, 2)<br>&gt; <br>&gt; This should not work IMO as the type is (Int, Int) -&gt; Void where (Int, Int) is a parameter list and not a tuple.<br>&gt; You would have to write<br>&gt; let ft : (Int,Int) -&gt; Void = { x, y in print(x, y) } // 1 2<br>&gt; or<br>&gt; let ft : ((Int,Int)) -&gt; Void = { x in print(x) } // (1, 2)<br>&gt; <br>&gt; <br>&gt; To rehash:<br>&gt; <br>&gt; Rules for function type definitions:<br>&gt; - parentheses are required around argument lists of more than one argument, i.e. (Int, Int) -&gt; Void (same as in SE-0066)<br>&gt; - parentheses are required around argument lists with a single tuple argument, i.e. ((Int, Int)) -&gt; Void (same as in SE-0066)<br>&gt; - parentheses are prohibited around single non-tuple arguments, i.e. Int -&gt; Void (different from SE-0066)<br>&gt; <br>&gt; Rule for argument lists in closure expressions:<br>&gt; - parentheses are prohibited around the argument list (as it is clearly enclosed by `{ … in`, therefore parentheses can only be used for tuples (different from current state)<br>&gt; <br>&gt; This would result in nice unambiguous code without unnecessary parentheses.<br>&gt; <br>&gt; -Thorsten<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 27.04.2016 11:53, Thorsten Seitz via swift-evolution wrote:<br>&gt;&gt;&gt; I am strictly against requiring parentheses in closure expressions.<br>&gt;&gt;&gt; Parentheses are visual clutter if not really needed and for a closure<br>&gt;&gt;&gt; expression there is no need for parentheses as the parameter list is<br>&gt;&gt;&gt; already nicely bracketed by `{ ... in`.<br>&gt;&gt;&gt; Actually I would argue that parentheses around parameter lists in closure<br>&gt;&gt;&gt; expressions should be prohibited for that reason.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not fond of requiring parentheses around single non-tuple parameters in<br>&gt;&gt;&gt; type declarations either but I could probably grudgingly live with that change.<br>&gt;&gt;&gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt;&gt;&gt; there.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 27. April 2016 um 00:07 schrieb David Owens II via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 26, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; *What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt; *<br>&gt;&gt;&gt;&gt;&gt;&gt; I reluctantly agree with the proposal with the following caveat: I do<br>&gt;&gt;&gt;&gt;&gt;&gt; not agree with the rationale to support being able to choose to<br>&gt;&gt;&gt;&gt;&gt;&gt; omit the () for the parameter list of the closure declaration.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I see no cohesive argument that says that the parens should be required<br>&gt;&gt;&gt;&gt;&gt;&gt; in some cases but not in others when talking about parameter lists.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I believe the proposal should be amended that the following should be<br>&gt;&gt;&gt;&gt;&gt;&gt; the only allowable forms:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To be clear, this proposal is not about changing closure expressions, it<br>&gt;&gt;&gt;&gt;&gt; was just a FAQ, and the section at the end is simply my personal<br>&gt;&gt;&gt;&gt;&gt; opinion.  Changing closure expression syntax would be a separate proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My argument is changing the parameter list in one context but not the<br>&gt;&gt;&gt;&gt; other is only solving one of the potentially ambiguous use cases instead<br>&gt;&gt;&gt;&gt; of the general case. My opinion is they should be changed as the same<br>&gt;&gt;&gt;&gt; time if they are going to be changed at all.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -David<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/782ba6f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 28, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Am 28.04.2016 um 00:38 schrieb David Owens II &lt;david at owensd.io&gt;:<br>&gt; <br>&gt; You forgot that parentheses are required for labeled closures with type information:<br>&gt; <br>&gt; x.sorted { (x: Int, y: Int) in x &gt; y }<br>&gt; <br>&gt; You&#39;d have to handle that case as well.<br></p><p>That’s a single tuple argument.<br></p><p><br>&gt; x.sorted { x: Int, y: Int in x &gt; y }<br></p><p>And that’s an argument list with two arguments.<br></p><p><br>&gt; I think the above leads to potentially ambiguous parsing constructs. <br></p><p>Why? The `in` should be unambiguously ending the argument list without parsing issues, shouldn’t it?<br></p><p>-Thorsten<br></p><p><br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Apr 27, 2016, at 1:18 PM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Am 27.04.2016 um 14:16 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt;&gt;&gt; &gt; there.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Really?<br>&gt;&gt; <br>&gt;&gt; Ok, you got me there :-)<br>&gt;&gt; I have to clarify: no ambiguity if parentheses would be prohibited around parameter lists in closure expressions like I suggested. <br>&gt;&gt; Furthermore the current implementation seems to do some auto-(un)splatting which should go away.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func z1(block: (Int,Int) -&gt; Void) {<br>&gt;&gt;&gt;    block(1,2)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; z1 { x, y in print(x,y)} //<br>&gt;&gt; <br>&gt;&gt; (Int, Int) is a parameter list, so this is ok<br>&gt;&gt; <br>&gt;&gt;&gt; z1 { x in print(x.0, x.1)} // ???<br>&gt;&gt; <br>&gt;&gt; This should not work IMO as the type is (Int, Int) -&gt; Void where (Int, Int) is a parameter list and not a tuple.<br>&gt;&gt; Seems to be tuple unsplatting at work here.<br>&gt;&gt; <br>&gt;&gt;&gt; z1 { (x, y) in print(x, y)} //<br>&gt;&gt; <br>&gt;&gt; This should not work for the given definition of z1 as (x, y) is a tuple.<br>&gt;&gt; <br>&gt;&gt;&gt; func z2(block: ((Int,Int)) -&gt; Void) {<br>&gt;&gt;&gt;    block((1,2))<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; z2 { x, y in print(x,y)} // ???<br>&gt;&gt; <br>&gt;&gt; This should not work IMO (tuple splatting at work here)<br>&gt;&gt; <br>&gt;&gt;&gt; z2 { x in print(x.0, x.1)}<br>&gt;&gt; <br>&gt;&gt; Fine, as x is a tuple.<br>&gt;&gt; <br>&gt;&gt;&gt; z2 { (x, y) in print(x, y)} // ???<br>&gt;&gt; <br>&gt;&gt; Fine, as (x, y) is a tuple. This raises another issue, though: this is using pattern matching without having to write `let` or `case let`. That’s probably a good thing and I’d rather like to get rid of `let` for bindings in pattern matching in other places.<br>&gt;&gt; <br>&gt;&gt;&gt; //z2 { ((x, y)) in print(x, y)}  // compilation error<br>&gt;&gt; <br>&gt;&gt; This should not work IMO as parentheses should not be allowed around argument lists in closure expressions.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // this will compile, but<br>&gt;&gt;&gt; runtime error<br>&gt;&gt;&gt; let ft : (Int,Int) -&gt; Void = { x in print(x)} // hm..<br>&gt;&gt;&gt; ft(1, 2)<br>&gt;&gt; <br>&gt;&gt; There is no runtime error in my playground.<br>&gt;&gt; The result printed is (1, 2)<br>&gt;&gt; <br>&gt;&gt; This should not work IMO as the type is (Int, Int) -&gt; Void where (Int, Int) is a parameter list and not a tuple.<br>&gt;&gt; You would have to write<br>&gt;&gt; let ft : (Int,Int) -&gt; Void = { x, y in print(x, y) } // 1 2<br>&gt;&gt; or<br>&gt;&gt; let ft : ((Int,Int)) -&gt; Void = { x in print(x) } // (1, 2)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; To rehash:<br>&gt;&gt; <br>&gt;&gt; Rules for function type definitions:<br>&gt;&gt; - parentheses are required around argument lists of more than one argument, i.e. (Int, Int) -&gt; Void (same as in SE-0066)<br>&gt;&gt; - parentheses are required around argument lists with a single tuple argument, i.e. ((Int, Int)) -&gt; Void (same as in SE-0066)<br>&gt;&gt; - parentheses are prohibited around single non-tuple arguments, i.e. Int -&gt; Void (different from SE-0066)<br>&gt;&gt; <br>&gt;&gt; Rule for argument lists in closure expressions:<br>&gt;&gt; - parentheses are prohibited around the argument list (as it is clearly enclosed by `{ … in`, therefore parentheses can only be used for tuples (different from current state)<br>&gt;&gt; <br>&gt;&gt; This would result in nice unambiguous code without unnecessary parentheses.<br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 27.04.2016 11:53, Thorsten Seitz via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; I am strictly against requiring parentheses in closure expressions.<br>&gt;&gt;&gt;&gt; Parentheses are visual clutter if not really needed and for a closure<br>&gt;&gt;&gt;&gt; expression there is no need for parentheses as the parameter list is<br>&gt;&gt;&gt;&gt; already nicely bracketed by `{ ... in`.<br>&gt;&gt;&gt;&gt; Actually I would argue that parentheses around parameter lists in closure<br>&gt;&gt;&gt;&gt; expressions should be prohibited for that reason.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not fond of requiring parentheses around single non-tuple parameters in<br>&gt;&gt;&gt;&gt; type declarations either but I could probably grudgingly live with that change.<br>&gt;&gt;&gt;&gt; But keep away from closure expressions, please! There is nothing ambiguous<br>&gt;&gt;&gt;&gt; there.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Thorsten<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 27. April 2016 um 00:07 schrieb David Owens II via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Apr 26, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; *What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; *<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I reluctantly agree with the proposal with the following caveat: I do<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; not agree with the rationale to support being able to choose to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; omit the () for the parameter list of the closure declaration.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I see no cohesive argument that says that the parens should be required<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; in some cases but not in others when talking about parameter lists.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I believe the proposal should be amended that the following should be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; the only allowable forms:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi David,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; To be clear, this proposal is not about changing closure expressions, it<br>&gt;&gt;&gt;&gt;&gt;&gt; was just a FAQ, and the section at the end is simply my personal<br>&gt;&gt;&gt;&gt;&gt;&gt; opinion.  Changing closure expression syntax would be a separate proposal.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My argument is changing the parameter list in one context but not the<br>&gt;&gt;&gt;&gt;&gt; other is only solving one of the potentially ambiguous use cases instead<br>&gt;&gt;&gt;&gt;&gt; of the general case. My opinion is they should be changed as the same<br>&gt;&gt;&gt;&gt;&gt; time if they are going to be changed at all.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -David<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/568fa9bf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
