<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>In Objective-C, I liked that fast enumeration over an NSArray that was nil and one that was empty could be handled with the exact same code:<br></p><p>NSArray *strings = nil;<br>for (NSString *string in strings) {<br>    …<br>}<br></p><p>In Swift, an Optional&lt;SequenceType&gt; can’t be used this way:<br></p><p>let array: [AnyObject]? = nil<br>for object in array { // Compiler error: Value of optional type &#39;[AnyObject]?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>    …<br>}<br></p><p>I know this is a very minor thing and it can be worked around easily by code like this:<br></p><p>for object in array ?? [] {<br>    …<br>}<br></p><p>… or what I would consider the proper way:<br></p><p>if let array = array {<br>    for object in array {<br>        …<br>    }<br>}<br></p><p>Handling a sequence that is empty or one that is nil is often the same, at least in my experience. Granted, this points to an API that could be improved to return empty sequences instead of nil in many cases, but that is not always in one’s control. For example in AppKit, NSView’s subviews property is declared as [NSView], while NSWindow’s childWindows property is [NSWindow]?, an optional Array.<br></p><p><br>Although I’m not sure this justifies adding a special syntax to Swift, I thought I post this here to see what others think.<br>I’m proposing a feature that allows iterating over an Optional&lt;SequenceType&gt; if it is not nil, while doing nothing when it is nil. I think that this should be separate from the normal for loop (my first Swift code sample above with the compiler error), but a specialized syntax instead, like the following:<br></p><p>let array: [AnyObject]? = nil<br>for object in? array { // Note the “in?”<br>    …<br>}<br></p><p>With this specialized syntax, you’d be able to see at a glance whether you’re dealing with an Optional or not. The first Swift code sample in this message would still be a compiler error because it uses “for … in”, but Xcode could show a fix-it that points to the “for … in?” syntax.<br>This syntax would not interfere with other proposals discussed on this list, like adding a mandatory ? to identifiers to Optionals (although this does not imply endorsement on my part).<br></p><p>Also, this is not a proposal to make the Optional type conform to SequenceType as was also discussed previously. If that were to be implemented, my proposal would be pointless, but you’d lose the distinction between iterating over an Optional&lt;SequenceType&gt; and a SequenceType. Therefore, I’d prefer a specialized syntax to make a clear distinction between iterating over a SequenceType and an Optional&lt;SequenceType&gt;.<br></p><p>Cheers,<br></p><p>Marco<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/2d4fe0d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 16, 2015 at 10:00:00am</p></header><div class="content"><p>On Dec 16, 2015, at 6:17 AM, Marco Masser via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; In Swift, an Optional&lt;SequenceType&gt; can’t be used this way:<br>&gt; <br>&gt; let array: [AnyObject]? = nil<br>&gt; for object in array { // Compiler error: Value of optional type &#39;[AnyObject]?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt;     …<br>&gt; }<br></p><p>This topic has come up in internal discussions several times.  We’ve discussed adding new features to for/in loop to handle it, having something like “in?” as you suggest:<br></p><p>&gt; let array: [AnyObject]? = nil<br>&gt; for object in? array { // Note the “in?”<br>&gt;     …<br>&gt; }<br></p><p>etc.  However, the discussion kept coming back to the fact that we have a pretty trivial way to express this already:<br></p><p>&gt; I know this is a very minor thing and it can be worked around easily by code like this:<br>&gt; <br>&gt; for object in array ?? [] {<br>&gt;     …<br>&gt; }<br></p><p>Thus this isn’t really solving a big problem, and making the language more complex isn’t worth it.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/e157b259/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>December 16, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 10:51 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Dec 16, 2015, at 6:17 AM, Marco Masser via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; In Swift, an Optional&lt;SequenceType&gt; can’t be used this way:<br>&gt;&gt; <br>&gt;&gt; let array: [AnyObject]? = nil<br>&gt;&gt; for object in array { // Compiler error: Value of optional type &#39;[AnyObject]?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt;&gt;     …<br>&gt;&gt; }<br>&gt; <br>&gt; This topic has come up in internal discussions several times.  We’ve discussed adding new features to for/in loop to handle it, having something like “in?” as you suggest:<br>&gt; <br>&gt;&gt; let array: [AnyObject]? = nil<br>&gt;&gt; for object in? array { // Note the “in?”<br>&gt;&gt;     …<br>&gt;&gt; }<br>&gt; <br>&gt; etc.  However, the discussion kept coming back to the fact that we have a pretty trivial way to express this already:<br>&gt; <br>&gt;&gt; I know this is a very minor thing and it can be worked around easily by code like this:<br>&gt;&gt; <br>&gt;&gt; for object in array ?? [] {<br>&gt;&gt;     …<br>&gt;&gt; }<br>&gt; <br>&gt; Thus this isn’t really solving a big problem, and making the language more complex isn’t worth it.<br></p><p>FWIW, the above only works when &quot;array&quot; is an array or set.  In a generic context you might not even know how to construct an empty one.<br></p><p>a?.forEach { object in ... }<br></p><p>is the generic version I think.<br></p><p>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5632ea7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; FWIW, the above only works when &quot;array&quot; is an array or set.  In a generic<br>&gt; context you might not even know how to construct an empty one.<br>&gt;<br>Right. And for types that don&#39;t conform to ArrayLiteralConvertible or<br>DictionaryLiteralConvertible, there&#39;s no chance to do a shortcut like that.<br></p><p>a?.forEach { object in ... }<br>&gt;<br>&gt; is the generic version I think.<br>&gt;<br></p><p>Unfortunately, this prevents break/continue from being very readable in the<br>&quot;loop&quot; body (IMHO) and doesn&#39;t allow a return out of the enclosing function<br>at all. But yeah, at least that works on any Optional&lt;SequenceType&gt;.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/532e6040/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; This topic has come up in internal discussions several times.  We’ve<br>&gt; discussed adding new features to for/in loop to handle it, having something<br>&gt; like “in?” as you suggest:<br>&gt;<br></p><p>Glad to hear I didn&#39;t miss anything obvious!<br></p><p><br>etc.  However, the discussion kept coming back to the fact that we have a<br>&gt; pretty trivial way to express this already:<br>&gt;<br>&gt; I know this is a very minor thing and it can be worked around easily by<br>&gt; code like this:<br>&gt;<br>&gt; for object in array ?? [] {<br>&gt;     …<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Thus this isn’t really solving a big problem, and making the language more<br>&gt; complex isn’t worth it.<br>&gt;<br></p><p> I suspected as much. Thanks for taking the time to look over it!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/ee504cf8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 16, 2015 at 12:00:00pm</p></header><div class="content"><p>This is such a minor thing, but I’ve often wished for “for … in? …” and I like that syntax.<br></p><p>I do this a lot:<br></p><p>    for object in array ?? [] {<br></p><p>…and it does impair readability a bit at times.<br></p><p>P<br></p><p>&gt; On Dec 16, 2015, at 8:17 AM, Marco Masser via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In Objective-C, I liked that fast enumeration over an NSArray that was nil and one that was empty could be handled with the exact same code:<br>&gt; <br>&gt; NSArray *strings = nil;<br>&gt; for (NSString *string in strings) {<br>&gt;     …<br>&gt; }<br>&gt; <br>&gt; In Swift, an Optional&lt;SequenceType&gt; can’t be used this way:<br>&gt; <br>&gt; let array: [AnyObject]? = nil<br>&gt; for object in array { // Compiler error: Value of optional type &#39;[AnyObject]?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt;     …<br>&gt; }<br>&gt; <br>&gt; I know this is a very minor thing and it can be worked around easily by code like this:<br>&gt; <br>&gt; for object in array ?? [] {<br>&gt;     …<br>&gt; }<br>&gt; <br>&gt; … or what I would consider the proper way:<br>&gt; <br>&gt; if let array = array {<br>&gt;     for object in array {<br>&gt;         …<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Handling a sequence that is empty or one that is nil is often the same, at least in my experience. Granted, this points to an API that could be improved to return empty sequences instead of nil in many cases, but that is not always in one’s control. For example in AppKit, NSView’s subviews property is declared as [NSView], while NSWindow’s childWindows property is [NSWindow]?, an optional Array.<br>&gt; <br>&gt; <br>&gt; Although I’m not sure this justifies adding a special syntax to Swift, I thought I post this here to see what others think.<br>&gt; I’m proposing a feature that allows iterating over an Optional&lt;SequenceType&gt; if it is not nil, while doing nothing when it is nil. I think that this should be separate from the normal for loop (my first Swift code sample above with the compiler error), but a specialized syntax instead, like the following:<br>&gt; <br>&gt; let array: [AnyObject]? = nil<br>&gt; for object in? array { // Note the “in?”<br>&gt;     …<br>&gt; }<br>&gt; <br>&gt; With this specialized syntax, you’d be able to see at a glance whether you’re dealing with an Optional or not. The first Swift code sample in this message would still be a compiler error because it uses “for … in”, but Xcode could show a fix-it that points to the “for … in?” syntax.<br>&gt; This syntax would not interfere with other proposals discussed on this list, like adding a mandatory ? to identifiers to Optionals (although this does not imply endorsement on my part).<br>&gt; <br>&gt; Also, this is not a proposal to make the Optional type conform to SequenceType as was also discussed previously. If that were to be implemented, my proposal would be pointless, but you’d lose the distinction between iterating over an Optional&lt;SequenceType&gt; and a SequenceType. Therefore, I’d prefer a specialized syntax to make a clear distinction between iterating over a SequenceType and an Optional&lt;SequenceType&gt;.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Marco<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/247618ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is such a minor thing, but I’ve often wished for “for … in? …” and I like that syntax.<br>&gt; <br>&gt; I do this a lot:<br>&gt; <br>&gt;     for object in array ?? [] {<br>&gt; <br>&gt; …and it does impair readability a bit at times.<br></p><p><br>Does it? It seems fairly understandable to me even though I have never seen it before.<br></p><p>I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br></p><p>- there was some sort of error in retrieving the elements<br>- there were no qualifying elements found.<br></p><p>In the first case, I think it would be more appropriate to handle the error separately to trying to iterate the results (e.g. guard). In the second case, the API is wrong. If there were no qualifying elements, the API should have returned an empty array rather than nil. The very slight clunkiness of the above serves to remind you that you need to change the API that returns the array (assuming you control it).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 18, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I do this a lot:<br>&gt;&gt; <br>&gt;&gt;    for object in array ?? [] {<br>&gt;&gt; <br>&gt;&gt; …and it does impair readability a bit at times.<br>&gt; <br>&gt; Does it? It seems fairly understandable to me even though I have never seen it before.<br></p><p>Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br></p><p>&gt; I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br>&gt; <br>&gt; - there was some sort of error in retrieving the elements<br>&gt; - there were no qualifying elements found.<br></p><p>You’re forgetting the third case, the most common one: things not populated / initialized yet. In that case, we often just want to leave a UI blank, for example, and doing nothing is the right behavior.<br></p><p>Doing nothing is the right behavior in a lot of cases, and since Swift provides optional sugar for “do nothing if nil” in other cases:<br></p><p>    foo?.bar = baz<br>    if let foo = bar { }<br></p><p>…it makes sense to provide it in for loops too.<br></p><p>True, “do nothing” is not the right behavior in all cases. Thus the `for…in` / `for … in?` distinction.<br></p><p>&gt; In the second case, the API is wrong.<br></p><p>Then a lot of APIs are wrong! NSURLComponents, for example:<br></p><p>        for item in urlComponents.queryItems ?? []<br>            { queryDict[item.name] = item.value }<br></p><p>But then I don’t think NSURLComponents is making a mistake: it distinguishes “no query string” from “empty query string”, but for the purposes of the loop here, there upshot in both cases is “no query items.”<br></p><p>True, ?? [] is minor noise — but given the clarity and low impact on existing code of a `for … in?` counterpart to `for … in`, it’s worth at least considering that option.<br></p><p>Cheers,<br></p><p>Paul<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/aa0d196e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>Personally, I’m -1 for the proposal. I see this as a solution to a very minor, fairly rare, and not generalizable problem.<br></p><p>Perhaps more importantly: the syntax is confusing to my eyes. `for object in? array` doesn’t immediately convey its semantics to me. It suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br></p><p>In the vast majority of cases, arrays shouldn’t be optional in the first place. It’s rare that there’s a semantic difference between “empty array” and “no array”.<br></p><p>&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br></p><p>That is a good point, albeit one that’s more broad than that — I dislike how `as?` often forces me to add additional parentheses — and not strong enough to warrant an introduction of a new `in?` construct IMHO.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 21:56, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com &lt;mailto:jeremy.j.pereira at googlemail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do this a lot:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    for object in array ?? [] {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …and it does impair readability a bit at times.<br>&gt;&gt; <br>&gt;&gt; Does it? It seems fairly understandable to me even though I have never seen it before.<br>&gt; <br>&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt; <br>&gt;&gt; I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br>&gt;&gt; <br>&gt;&gt; - there was some sort of error in retrieving the elements<br>&gt;&gt; - there were no qualifying elements found.<br>&gt; <br>&gt; You’re forgetting the third case, the most common one: things not populated / initialized yet. In that case, we often just want to leave a UI blank, for example, and doing nothing is the right behavior.<br>&gt; <br>&gt; Doing nothing is the right behavior in a lot of cases, and since Swift provides optional sugar for “do nothing if nil” in other cases:<br>&gt; <br>&gt;     foo?.bar = baz<br>&gt;     if let foo = bar { }<br>&gt; <br>&gt; …it makes sense to provide it in for loops too.<br>&gt; <br>&gt; True, “do nothing” is not the right behavior in all cases. Thus the `for…in` / `for … in?` distinction.<br>&gt; <br>&gt;&gt; In the second case, the API is wrong.<br>&gt; <br>&gt; Then a lot of APIs are wrong! NSURLComponents, for example:<br>&gt; <br>&gt;         for item in urlComponents.queryItems ?? []<br>&gt;             { queryDict[item.name] = item.value }<br>&gt; <br>&gt; But then I don’t think NSURLComponents is making a mistake: it distinguishes “no query string” from “empty query string”, but for the purposes of the loop here, there upshot in both cases is “no query items.”<br>&gt; <br>&gt; True, ?? [] is minor noise — but given the clarity and low impact on existing code of a `for … in?` counterpart to `for … in`, it’s worth at least considering that option.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Paul<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/4c10419d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>December 18, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; `for object in? array` … suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br></p><p><br>That’s a really good point.<br></p><p>P<br></p><p><br>&gt; On Dec 18, 2015, at 3:06 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt; Personally, I’m -1 for the proposal. I see this as a solution to a very minor, fairly rare, and not generalizable problem.<br>&gt; <br>&gt; Perhaps more importantly: the syntax is confusing to my eyes. `for object in? array` doesn’t immediately convey its semantics to me. It suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt; <br>&gt; In the vast majority of cases, arrays shouldn’t be optional in the first place. It’s rare that there’s a semantic difference between “empty array” and “no array”.<br>&gt; <br>&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt; <br>&gt; That is a good point, albeit one that’s more broad than that — I dislike how `as?` often forces me to add additional parentheses — and not strong enough to warrant an introduction of a new `in?` construct IMHO.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 21:56, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com &lt;mailto:jeremy.j.pereira at googlemail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do this a lot:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    for object in array ?? [] {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; …and it does impair readability a bit at times.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does it? It seems fairly understandable to me even though I have never seen it before.<br>&gt;&gt; <br>&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt; <br>&gt;&gt;&gt; I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - there was some sort of error in retrieving the elements<br>&gt;&gt;&gt; - there were no qualifying elements found.<br>&gt;&gt; <br>&gt;&gt; You’re forgetting the third case, the most common one: things not populated / initialized yet. In that case, we often just want to leave a UI blank, for example, and doing nothing is the right behavior.<br>&gt;&gt; <br>&gt;&gt; Doing nothing is the right behavior in a lot of cases, and since Swift provides optional sugar for “do nothing if nil” in other cases:<br>&gt;&gt; <br>&gt;&gt;     foo?.bar = baz<br>&gt;&gt;     if let foo = bar { }<br>&gt;&gt; <br>&gt;&gt; …it makes sense to provide it in for loops too.<br>&gt;&gt; <br>&gt;&gt; True, “do nothing” is not the right behavior in all cases. Thus the `for…in` / `for … in?` distinction.<br>&gt;&gt; <br>&gt;&gt;&gt; In the second case, the API is wrong.<br>&gt;&gt; <br>&gt;&gt; Then a lot of APIs are wrong! NSURLComponents, for example:<br>&gt;&gt; <br>&gt;&gt;         for item in urlComponents.queryItems ?? []<br>&gt;&gt;             { queryDict[item.name] = item.value }<br>&gt;&gt; <br>&gt;&gt; But then I don’t think NSURLComponents is making a mistake: it distinguishes “no query string” from “empty query string”, but for the purposes of the loop here, there upshot in both cases is “no query items.”<br>&gt;&gt; <br>&gt;&gt; True, ?? [] is minor noise — but given the clarity and low impact on existing code of a `for … in?` counterpart to `for … in`, it’s worth at least considering that option.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/67ee390c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>How about `for? object in array` instead?<br></p><p>On Fri, Dec 18, 2015 at 1:13 PM, Paul Cantrell via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; `for object in? array` … suggests that there’s something optional about<br>&gt; checking for inclusion, not about the array itself. It could easily be<br>&gt; interpreted as “iterate for all non-nil elements of array (where array:<br>&gt; [T?])” — a use case arguably more common than this.<br>&gt;<br>&gt;<br>&gt; That’s a really good point.<br>&gt;<br>&gt; P<br>&gt;<br>&gt;<br>&gt; On Dec 18, 2015, at 3:06 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Personally, I’m -1 for the proposal. I see this as a solution to a very<br>&gt; minor, fairly rare, and not generalizable problem.<br>&gt;<br>&gt; Perhaps more importantly: the syntax is confusing to my eyes. `for object<br>&gt; in? array` doesn’t immediately convey its semantics to me. It suggests that<br>&gt; there’s something optional about checking for inclusion, not about the<br>&gt; array itself. It could easily be interpreted as “iterate for all non-nil<br>&gt; elements of array (where array: [T?])” — a use case arguably more common<br>&gt; than this.<br>&gt;<br>&gt; In the vast majority of cases, arrays shouldn’t be optional in the first<br>&gt; place. It’s rare that there’s a semantic difference between “empty array”<br>&gt; and “no array”.<br>&gt;<br>&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax<br>&gt; itself, which is perfectly clear; it’s having that dangling off the end of<br>&gt; some longer expression. In real-world context, it does become additional<br>&gt; noise.<br>&gt;<br>&gt;<br>&gt; That is a good point, albeit one that’s more broad than that — I dislike<br>&gt; how `as?` often forces me to add additional parentheses — and not strong<br>&gt; enough to warrant an introduction of a new `in?` construct IMHO.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt; On 18 Dec 2015, at 21:56, Paul Cantrell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;<br>&gt; jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I do this a lot:<br>&gt;<br>&gt;    for object in array ?? [] {<br>&gt;<br>&gt; …and it does impair readability a bit at times.<br>&gt;<br>&gt;<br>&gt; Does it? It seems fairly understandable to me even though I have never<br>&gt; seen it before.<br>&gt;<br>&gt;<br>&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax<br>&gt; itself, which is perfectly clear; it’s having that dangling off the end of<br>&gt; some longer expression. In real-world context, it does become additional<br>&gt; noise.<br>&gt;<br>&gt; I think there is a good reason for keeping this construct a bit “clunky”.<br>&gt; Generally APIs give you a nil array for one of two reasons:<br>&gt;<br>&gt; - there was some sort of error in retrieving the elements<br>&gt; - there were no qualifying elements found.<br>&gt;<br>&gt;<br>&gt; You’re forgetting the third case, the most common one: things not<br>&gt; populated / initialized yet. In that case, we often just want to leave a UI<br>&gt; blank, for example, and doing nothing is the right behavior.<br>&gt;<br>&gt; Doing nothing is the right behavior in a *lot* of cases, and since Swift<br>&gt; provides optional sugar for “do nothing if nil” in other cases:<br>&gt;<br>&gt;     foo?.bar = baz<br>&gt;     if let foo = bar { }<br>&gt;<br>&gt; …it makes sense to provide it in for loops too.<br>&gt;<br>&gt; True, “do nothing” is not the right behavior in all cases. Thus the<br>&gt; `for…in` / `for … in?` distinction.<br>&gt;<br>&gt; In the second case, the API is wrong.<br>&gt;<br>&gt;<br>&gt; Then a lot of APIs are wrong! NSURLComponents, for example:<br>&gt;<br>&gt;         for item in urlComponents.queryItems ?? []<br>&gt;             { queryDict[item.name] = item.value }<br>&gt;<br>&gt; But then I don’t think NSURLComponents is making a mistake: it<br>&gt; distinguishes “no query string” from “empty query string”, but for the<br>&gt; purposes of the loop here, there upshot in both cases is “no query items.”<br>&gt;<br>&gt; True, ?? [] is minor noise — but given the clarity and low impact on<br>&gt; existing code of a `for … in?` counterpart to `for … in`, it’s worth at<br>&gt; least considering that option.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; Paul<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/baf12912/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 10:00:00pm</p></header><div class="content"><p>That’s… definitely an improvement as far as ambiguity is concerned, but I still don’t believe it passes the usefulness threshold, and I don’t really like the precedent of having a `for?`…<br></p><p>PS. FWIW, I like the spirit of the proposal, just not this solution. I’m all for “expressivity enhancements” — little things that helps me write cleaner code and express my intention better. But this doesn’t seem worth the trouble of extending the language.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 22:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; How about `for? object in array` instead?<br>&gt; <br>&gt; On Fri, Dec 18, 2015 at 1:13 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; `for object in? array` … suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt; <br>&gt; <br>&gt; That’s a really good point.<br>&gt; <br>&gt; P<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 3:06 PM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Personally, I’m -1 for the proposal. I see this as a solution to a very minor, fairly rare, and not generalizable problem.<br>&gt;&gt; <br>&gt;&gt; Perhaps more importantly: the syntax is confusing to my eyes. `for object in? array` doesn’t immediately convey its semantics to me. It suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt;&gt; <br>&gt;&gt; In the vast majority of cases, arrays shouldn’t be optional in the first place. It’s rare that there’s a semantic difference between “empty array” and “no array”.<br>&gt;&gt; <br>&gt;&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt; <br>&gt;&gt; That is a good point, albeit one that’s more broad than that — I dislike how `as?` often forces me to add additional parentheses — and not strong enough to warrant an introduction of a new `in?` construct IMHO.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 21:56, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com &lt;mailto:jeremy.j.pereira at googlemail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I do this a lot:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    for object in array ?? [] {<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; …and it does impair readability a bit at times.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does it? It seems fairly understandable to me even though I have never seen it before.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - there was some sort of error in retrieving the elements<br>&gt;&gt;&gt;&gt; - there were no qualifying elements found.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You’re forgetting the third case, the most common one: things not populated / initialized yet. In that case, we often just want to leave a UI blank, for example, and doing nothing is the right behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Doing nothing is the right behavior in a lot of cases, and since Swift provides optional sugar for “do nothing if nil” in other cases:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     foo?.bar = baz<br>&gt;&gt;&gt;     if let foo = bar { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …it makes sense to provide it in for loops too.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; True, “do nothing” is not the right behavior in all cases. Thus the `for…in` / `for … in?` distinction.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In the second case, the API is wrong.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Then a lot of APIs are wrong! NSURLComponents, for example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         for item in urlComponents.queryItems ?? []<br>&gt;&gt;&gt;             { queryDict[item.name] = item.value }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But then I don’t think NSURLComponents is making a mistake: it distinguishes “no query string” from “empty query string”, but for the purposes of the loop here, there upshot in both cases is “no query items.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; True, ?? [] is minor noise — but given the clarity and low impact on existing code of a `for … in?` counterpart to `for … in`, it’s worth at least considering that option.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Paul<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/7e7d8699/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>December 20, 2015 at 06:00:00pm</p></header><div class="content"><p>I have to admit that Radek’s comment about “for … in? …” meaning an iteration over a SequenceType containing Optional Values is valid.<br></p><p>But I think “for? … in …” is worse because it separates the “?” from the thing that is the Optional thing. Consider:<br></p><p>for? x in array { … }<br></p><p>vs.<br></p><p>for x in? array { … }<br></p><p>If any of these two is about iterating over an Optional&lt;SequenceType&gt;, it’s the second one – at least to me. The first one reads much more like the “x” could be optional.<br></p><p>Marco<br></p><p><br>&gt; On 2015-12-18, at 22:24, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That’s… definitely an improvement as far as ambiguity is concerned, but I still don’t believe it passes the usefulness threshold, and I don’t really like the precedent of having a `for?`…<br>&gt; <br>&gt; PS. FWIW, I like the spirit of the proposal, just not this solution. I’m all for “expressivity enhancements” — little things that helps me write cleaner code and express my intention better. But this doesn’t seem worth the trouble of extending the language.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 22:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How about `for? object in array` instead?<br>&gt;&gt; <br>&gt;&gt; On Fri, Dec 18, 2015 at 1:13 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; `for object in? array` … suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That’s a really good point.<br>&gt;&gt; <br>&gt;&gt; P<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 3:06 PM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Personally, I’m -1 for the proposal. I see this as a solution to a very minor, fairly rare, and not generalizable problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps more importantly: the syntax is confusing to my eyes. `for object in? array` doesn’t immediately convey its semantics to me. It suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the vast majority of cases, arrays shouldn’t be optional in the first place. It’s rare that there’s a semantic difference between “empty array” and “no array”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That is a good point, albeit one that’s more broad than that — I dislike how `as?` often forces me to add additional parentheses — and not strong enough to warrant an introduction of a new `in?` construct IMHO.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:56, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com &lt;mailto:jeremy.j.pereira at googlemail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I do this a lot:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    for object in array ?? [] {<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; …and it does impair readability a bit at times.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Does it? It seems fairly understandable to me even though I have never seen it before.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - there was some sort of error in retrieving the elements<br>&gt;&gt;&gt;&gt;&gt; - there were no qualifying elements found.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You’re forgetting the third case, the most common one: things not populated / initialized yet. In that case, we often just want to leave a UI blank, for example, and doing nothing is the right behavior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Doing nothing is the right behavior in a lot of cases, and since Swift provides optional sugar for “do nothing if nil” in other cases:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     foo?.bar = baz<br>&gt;&gt;&gt;&gt;     if let foo = bar { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; …it makes sense to provide it in for loops too.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; True, “do nothing” is not the right behavior in all cases. Thus the `for…in` / `for … in?` distinction.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In the second case, the API is wrong.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Then a lot of APIs are wrong! NSURLComponents, for example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         for item in urlComponents.queryItems ?? []<br>&gt;&gt;&gt;&gt;             { queryDict[item.name] = item.value }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But then I don’t think NSURLComponents is making a mistake: it distinguishes “no query string” from “empty query string”, but for the purposes of the loop here, there upshot in both cases is “no query items.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; True, ?? [] is minor noise — but given the clarity and low impact on existing code of a `for … in?` counterpart to `for … in`, it’s worth at least considering that option.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Paul<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/a0d83d1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>January  2, 2016 at 11:00:00pm</p></header><div class="content"><p>The syntax could be<br>for x in array? {<br></p><p>}<br></p><p>It wouldn&#39;t necessarily be consistent with <br></p><p>if let foo = foo {<br></p><p>}<br></p><p>But as I&#39;ve mentioned in another thread regarding the if let syntax and variable shadowing, it would probably make more sense to new users if the if let syntax was the following.<br></p><p>if let foo = foo? {<br></p><p>}<br></p><p>The ? is always used to conditionally unwrap optionals. It strikes me as odd that they are not used to unwrap them in control flow statements. <br></p><p>i.e. Why should <br></p><p>array?.forEach<br></p><p>be any different than,<br></p><p>for x in array?<br></p><p><br>Tyler<br></p><p>&gt; On Dec 20, 2015, at 12:15 PM, Marco Masser via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I have to admit that Radek’s comment about “for … in? …” meaning an iteration over a SequenceType containing Optional Values is valid.<br>&gt; <br>&gt; But I think “for? … in …” is worse because it separates the “?” from the thing that is the Optional thing. Consider:<br>&gt; <br>&gt; for? x in array { … }<br>&gt; <br>&gt; vs.<br>&gt; <br>&gt; for x in? array { … }<br>&gt; <br>&gt; If any of these two is about iterating over an Optional&lt;SequenceType&gt;, it’s the second one – at least to me. The first one reads much more like the “x” could be optional.<br>&gt; <br>&gt; Marco<br>&gt; <br>&gt; <br>&gt;&gt; On 2015-12-18, at 22:24, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That’s… definitely an improvement as far as ambiguity is concerned, but I still don’t believe it passes the usefulness threshold, and I don’t really like the precedent of having a `for?`…<br>&gt;&gt; <br>&gt;&gt; PS. FWIW, I like the spirit of the proposal, just not this solution. I’m all for “expressivity enhancements” — little things that helps me write cleaner code and express my intention better. But this doesn’t seem worth the trouble of extending the language.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 Dec 2015, at 22:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How about `for? object in array` instead?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 18, 2015 at 1:13 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; `for object in? array` … suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That’s a really good point.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; P<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 18, 2015, at 3:06 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Personally, I’m -1 for the proposal. I see this as a solution to a very minor, fairly rare, and not generalizable problem.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Perhaps more importantly: the syntax is confusing to my eyes. `for object in? array` doesn’t immediately convey its semantics to me. It suggests that there’s something optional about checking for inclusion, not about the array itself. It could easily be interpreted as “iterate for all non-nil elements of array (where array: [T?])” — a use case arguably more common than this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In the vast majority of cases, arrays shouldn’t be optional in the first place. It’s rare that there’s a semantic difference between “empty array” and “no array”.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That is a good point, albeit one that’s more broad than that — I dislike how `as?` often forces me to add additional parentheses — and not strong enough to warrant an introduction of a new `in?` construct IMHO.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 18 Dec 2015, at 21:56, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 17, 2015, at 4:08 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 16 Dec 2015, at 19:52, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I do this a lot:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    for object in array ?? [] {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; …and it does impair readability a bit at times.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Does it? It seems fairly understandable to me even though I have never seen it before.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sure, in that example it’s quite simple. It’s not the “?? []” syntax itself, which is perfectly clear; it’s having that dangling off the end of some longer expression. In real-world context, it does become additional noise.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think there is a good reason for keeping this construct a bit “clunky”. Generally APIs give you a nil array for one of two reasons:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - there was some sort of error in retrieving the elements<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - there were no qualifying elements found.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You’re forgetting the third case, the most common one: things not populated / initialized yet. In that case, we often just want to leave a UI blank, for example, and doing nothing is the right behavior.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Doing nothing is the right behavior in a lot of cases, and since Swift provides optional sugar for “do nothing if nil” in other cases:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     foo?.bar = baz<br>&gt;&gt;&gt;&gt;&gt;&gt;     if let foo = bar { }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; …it makes sense to provide it in for loops too.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; True, “do nothing” is not the right behavior in all cases. Thus the `for…in` / `for … in?` distinction.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; In the second case, the API is wrong.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Then a lot of APIs are wrong! NSURLComponents, for example:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;         for item in urlComponents.queryItems ?? []<br>&gt;&gt;&gt;&gt;&gt;&gt;             { queryDict[item.name] = item.value }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But then I don’t think NSURLComponents is making a mistake: it distinguishes “no query string” from “empty query string”, but for the purposes of the loop here, there upshot in both cases is “no query items.”<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; True, ?? [] is minor noise — but given the clarity and low impact on existing code of a `for … in?` counterpart to `for … in`, it’s worth at least considering that option.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Paul<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160102/71d3b4b6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>December 18, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 16, 2015, at 6:17 AM, Marco Masser via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In Objective-C, I liked that fast enumeration over an NSArray that was nil and one that was empty could be handled with the exact same code:<br>&gt; <br>&gt; NSArray *strings = nil;<br>&gt; for (NSString *string in strings) {<br>&gt;     …<br>&gt; }<br></p><p>One thing we&#39;ve discussed is adding attributes to import nil values of NSArray and such as empty arrays in Swift, rather than optionals of arrays. Would this solve your problem? Where are these optional arrays coming from in the first place, is it imported Cocoa APIs?<br></p><p>&gt; Handling a sequence that is empty or one that is nil is often the same, at least in my experience. Granted, this points to an API that could be improved to return empty sequences instead of nil in many cases, but that is not always in one’s control. For example in AppKit, NSView’s subviews property is declared as [NSView], while NSWindow’s childWindows property is [NSWindow]?, an optional Array.<br></p><p>Yeah, exactly. We want to be able to fix this.<br></p><p>&gt; Also, this is not a proposal to make the Optional type conform to SequenceType as was also discussed previously. If that were to be implemented, my proposal would be pointless, but you’d lose the distinction between iterating over an Optional&lt;SequenceType&gt; and a SequenceType. Therefore, I’d prefer a specialized syntax to make a clear distinction between iterating over a SequenceType and an Optional&lt;SequenceType&gt;.<br></p><p>Actually it depends on how the conformance was defined. If Optional&lt;T&gt; was a sequence iff T is a sequence, then yes it supersedes your proposal. Another way to imagine Optional&lt;T&gt; as a sequence is to make it a zero- or one-element sequence, depending on if it is None or Some, respectively. I&#39;m not sure which, if either, is more useful.<br></p><p>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Marco<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/803f9c0e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>December 20, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt;&gt; In Objective-C, I liked that fast enumeration over an NSArray that was nil and one that was empty could be handled with the exact same code:<br>&gt;&gt; <br>&gt;&gt; NSArray *strings = nil;<br>&gt;&gt; for (NSString *string in strings) {<br>&gt;&gt;     …<br>&gt;&gt; }<br>&gt; <br>&gt; One thing we&#39;ve discussed is adding attributes to import nil values of NSArray and such as empty arrays in Swift, rather than optionals of arrays. Would this solve your problem? Where are these optional arrays coming from in the first place, is it imported Cocoa APIs?<br></p><p>Yes, mostly. But I still can imagine cases where it makes sense to have an API that returns an Optional Array but the caller doesn’t care about it being nil vs. it being empty – not that I have a practical example.<br></p><p>Importing an Objective-C API’s NSArray nil value as an empty array in Swift sounds nice!<br></p><p><br>&gt;&gt; Also, this is not a proposal to make the Optional type conform to SequenceType as was also discussed previously. If that were to be implemented, my proposal would be pointless, but you’d lose the distinction between iterating over an Optional&lt;SequenceType&gt; and a SequenceType. Therefore, I’d prefer a specialized syntax to make a clear distinction between iterating over a SequenceType and an Optional&lt;SequenceType&gt;.<br>&gt; <br>&gt; Actually it depends on how the conformance was defined. If Optional&lt;T&gt; was a sequence iff T is a sequence, then yes it supersedes your proposal. Another way to imagine Optional&lt;T&gt; as a sequence is to make it a zero- or one-element sequence, depending on if it is None or Some, respectively. I&#39;m not sure which, if either, is more useful.<br></p><p>I have to admit that I didn’t closely follow the discussion about Optionals being sequences of zero or one element and therefore don’t know all of the arguments for and against that – just enough that it would supersede my proposal.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151220/e2984d97/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
