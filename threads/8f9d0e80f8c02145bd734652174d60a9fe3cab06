<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pre-proposal/Idea] Auto-generate Type-Erased Wrappers</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  4, 2016 at 11:00:00pm</p></header><div class="content"><p>One of the things that threw me when starting with Swift was the inability to use many protocols as types, e.g- being unable to declare: [SequenceType], instead having to do: [AnySequence]<br></p><p>And I guess it got me wondering; why can’t we just have these be auto-generated and used where we would expect a protocol to fit? Writing type-erased wrappers currently involves a lot of boilerplate, especially for a type with a lot of methods and/or properties, so automating this would be very useful.<br></p><p>For me there are two good options:<br></p><p>Autogenerate for All Types: As it says; every protocol would have an identically named type-erasure (with the same visibility etc.) that Swift would just swap in where appropriate. For example:<br></p><p>	protocol Foo { … }<br>	let myArray:[Foo]	// Array of type-erased wrappers of Foo<br></p><p>Autogenerate by Attribute: Same basic idea, except that an attribute would be required to specify which protocols get automatic type-erasure like so:<br></p><p>	@autoErasure protocol Foo { … }<br>	let myArray:[Foo]	// Array of type-erased wrappers of Foo<br></p><p><br>I’m curious for people’s thoughts on the matter. I know that I for one am tired of defining type-erased wrappers that are just a heap of boiler-plate to properly wrap an instance. It’s also something I’ve seen people doing wrong (and done wrong myself), for example by using closures to invoke methods on an instance; this is a much more elegant looking solution but very quickly bloats the size of the type-erased wrapper compared to more correct boxing method (though for single method protocols it may be fine). It seems like something that would be good to take out of the hands of developers who mostly don’t want to have to define these in the first place, though of course the capability to defining customised versions would remain if anyone actually needs it.<br></p><p>I’m particularly curious about other features in discussion or that are upcoming that may affect this, as I’m sure I’ll have missed some. Anything that might render this obsolete (or less necessary)? Also whether anyone thinks it could be a bad idea to essentially hide the type-erasure.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/8f9dab06/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Pre-proposal/Idea] Auto-generate Type-Erased Wrappers</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>April  4, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Apr 4, 2016, at 3:07 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; One of the things that threw me when starting with Swift was the inability to use many protocols as types, e.g- being unable to declare: [SequenceType], instead having to do: [AnySequence]<br>&gt; <br>&gt; And I guess it got me wondering; why can’t we just have these be auto-generated and used where we would expect a protocol to fit? Writing type-erased wrappers currently involves a lot of boilerplate, especially for a type with a lot of methods and/or properties, so automating this would be very useful.<br>&gt; <br>&gt; For me there are two good options:<br>&gt; <br>&gt; Autogenerate for All Types: As it says; every protocol would have an identically named type-erasure (with the same visibility etc.) that Swift would just swap in where appropriate. For example:<br>&gt; <br>&gt; 	protocol Foo { … }<br>&gt; 	let myArray:[Foo]	// Array of type-erased wrappers of Foo<br></p><p>The only reason you can’t use [Foo] is due to associated type or Self requirements so what type is Foo’s associated type(s) here? <br></p><p><br>&gt; <br>&gt; <br>&gt; I’m particularly curious about other features in discussion or that are upcoming that may affect this, as I’m sure I’ll have missed some. Anything that might render this obsolete (or less necessary)? Also whether anyone thinks it could be a bad idea to essentially hide the type-erasure.<br>&gt; <br></p><p>The Completing Generics manifesto discusses this in the context of Existential types. If that were supported, then the compiler would just treat the associated types as Any. It also discusses allowing you to create types ala protocol&lt;SequenceType where Element == String&gt;<br></p><p><br>Russ<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/ddd83403/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
