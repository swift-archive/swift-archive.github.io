<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c9c44262e8b58b758a3876b9d29c095?s=50"></div><header><strong>Implementing a few statistics functions in Swift</strong> from <string>Georgios Moschovitis</string> &lt;george.moschovitis at icloud.com&gt;<p>October  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Hey everyone,<br></p><p>I would like to implement a few statistics functions in Swift (e.g. variance, standardDeviation, etc) that are computed over a collection.<br></p><p>I am aware of this library:<br></p><p>https://github.com/evgenyneu/SigmaSwiftStatistics &lt;https://github.com/evgenyneu/SigmaSwiftStatistics&gt;<br></p><p>My problem is that it only supports Doubles and Arrays. Also the API doesn‚Äôt look very ‚Äòswifty&#39; to me.<br></p><p>I am wondering how would someone implement such functionality in a more generic way: to allow usage of multiple collections (even custom, e.g. a RingBuffer) and multiple value types (e.g. Decimal, Double). Extra points for being &#39;swifty&#39;.<br></p><p>Thanks in advance for any ideas.<br></p><p>-g.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161008/2c7d7bdb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Implementing a few statistics functions in Swift</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>October 10, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 8, 2016, at 11:29 AM, Georgios Moschovitis via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey everyone,<br>&gt; <br>&gt; I would like to implement a few statistics functions in Swift (e.g. variance, standardDeviation, etc) that are computed over a collection.<br>&gt; <br>&gt; I am aware of this library:<br>&gt; <br>&gt; https://github.com/evgenyneu/SigmaSwiftStatistics &lt;https://github.com/evgenyneu/SigmaSwiftStatistics&gt;<br>&gt; <br>&gt; My problem is that it only supports Doubles and Arrays. Also the API doesn‚Äôt look very ‚Äòswifty&#39; to me.<br>&gt; <br></p><p>You might find this library to be more Swifty: https://github.com/harlanhaskins/Probably<br></p><p>It‚Äôs not as generic as possible nor has all the features you might need, but the author is very responsive to feedback.<br></p><p><br>&gt; I am wondering how would someone implement such functionality in a more generic way: to allow usage of multiple collections (even custom, e.g. a RingBuffer) and multiple value types (e.g. Decimal, Double). Extra points for being &#39;swifty&#39;.<br>&gt; <br>&gt; Thanks in advance for any ideas.<br>&gt; <br>&gt; -g.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/f33e9c40/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Implementing a few statistics functions in Swift</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>October 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Oh yeah, I&#39;d love contributions and feedback! I&#39;m essentially implementing this as I learn things in stats 101 so it&#39;s probably woefully inadequate. üòÖ<br></p><p>-- Harlan<br></p><p>&gt; On Oct 10, 2016, at 1:04 PM, Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 8, 2016, at 11:29 AM, Georgios Moschovitis via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey everyone,<br>&gt;&gt; <br>&gt;&gt; I would like to implement a few statistics functions in Swift (e.g. variance, standardDeviation, etc) that are computed over a collection.<br>&gt;&gt; <br>&gt;&gt; I am aware of this library:<br>&gt;&gt; <br>&gt;&gt; https://github.com/evgenyneu/SigmaSwiftStatistics<br>&gt;&gt; <br>&gt;&gt; My problem is that it only supports Doubles and Arrays. Also the API doesn‚Äôt look very ‚Äòswifty&#39; to me.<br>&gt;&gt; <br>&gt; <br>&gt; You might find this library to be more Swifty: https://github.com/harlanhaskins/Probably<br>&gt; <br>&gt; It‚Äôs not as generic as possible nor has all the features you might need, but the author is very responsive to feedback.<br>&gt; <br>&gt; <br>&gt;&gt; I am wondering how would someone implement such functionality in a more generic way: to allow usage of multiple collections (even custom, e.g. a RingBuffer) and multiple value types (e.g. Decimal, Double). Extra points for being &#39;swifty&#39;.<br>&gt;&gt; <br>&gt;&gt; Thanks in advance for any ideas.<br>&gt;&gt; <br>&gt;&gt; -g.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/a4575f4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Implementing a few statistics functions in Swift</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>October 10, 2016 at 04:00:00pm</p></header><div class="content"><p>I rolled my own (rather simple) statistics struct. It had been using Double<br>and Array, but I just went back and made it work generically with<br>FloatingPoint and Sequence. Here‚Äôs what it looks like:<br></p><p>struct Statistic&lt;Number: FloatingPoint&gt; {<br>    private var ssqDev: Number = 0<br>    private(set) var count: Number = 0<br>    private(set) var average: Number = 0<br>    private(set) var maximum: Number = Number.infinity<br>    private(set) var minimum: Number = -Number.infinity<br></p><p>    var variance: Number { return ssqDev / (count - 1) }<br>    var standardDeviation: Number { return sqrt(variance) }<br></p><p>    init() {}<br></p><p>    init&lt;T: Sequence&gt; (values: T) where T.Iterator.Element == Number {<br>        addValues(values)<br>    }<br></p><p>    mutating func addValues&lt;T: Sequence&gt; (_ vals: T) where<br>T.Iterator.Element == Number {<br>        for val in vals { addValue(val) }<br>    }<br></p><p>    mutating func addValue(_ value: Number) {<br>        count += 1 as Number<br>        let diff = value - average<br>        let frac = diff / count<br>        average += frac<br>        ssqDev += diff * (diff - frac)<br>        minimum = min(minimum, value)<br>        maximum = max(maximum, value)<br>    }<br>}<br></p><p><br>(Sorry for the lack of syntax highlighting‚ÄîGmail strips the formatting when<br>I paste it.)<br></p><p>Some notes:<br></p><p>‚Ä¢ The approach is to look at each data point once and keep the statistics<br>correct for the numbers seen so far. This saves memory if the values are<br>being computed or fetched, since you don‚Äôt need to store them. However it<br>also means that the median cannot be found.<br></p><p>‚Ä¢ The calculation to update ‚Äúaverage‚Äù and ‚ÄússqDev‚Äù is simplified from the<br>online-algorithm<br>&lt;https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm&gt;<br>found on Wikipedia. (‚ÄússqDev‚Äù stores the sum of squared deviations from the<br>mean, which is just the sample variance times the count.)<br></p><p>‚Ä¢ If you want to ignore NaN‚Äôs, just add ‚Äúif value.isNaN { return }‚Äù at the<br>top of ‚ÄúaddValue‚Äù.<br></p><p>‚Ä¢ The ‚Äúas Number‚Äù coercion shouldn‚Äôt be necessary, but I was getting an<br>‚Äúambiguous use of +=‚Äù error without it.<br></p><p>‚Ä¢ All occurrences of ‚Äúcount‚Äù were originally ‚Äún‚Äù, which was private, and I<br>had a computed ‚Äúcount‚Äù that just returned Int(n). But when I switched from<br>‚ÄúDouble‚Äù to ‚ÄúNumber: FloatingPoint‚Äù I lost the ability to write ‚ÄúInt(n)‚Äù.<br></p><p><br>Nevin<br></p><p><br></p><p>On Mon, Oct 10, 2016 at 1:13 PM, Harlan Haskins via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Oh yeah, I&#39;d love contributions and feedback! I&#39;m essentially implementing<br>&gt; this as I learn things in stats 101 so it&#39;s probably woefully inadequate. üòÖ<br>&gt;<br>&gt; -- Harlan<br>&gt;<br>&gt; On Oct 10, 2016, at 1:04 PM, Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Oct 8, 2016, at 11:29 AM, Georgios Moschovitis via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hey everyone,<br>&gt;<br>&gt; I would like to implement a few statistics functions in Swift (e.g.<br>&gt; variance, standardDeviation, etc) that are computed over a collection.<br>&gt;<br>&gt; I am aware of this library:<br>&gt;<br>&gt; https://github.com/evgenyneu/SigmaSwiftStatistics<br>&gt;<br>&gt; My problem is that it only supports Doubles and Arrays. Also the API<br>&gt; doesn‚Äôt look very ‚Äòswifty&#39; to me.<br>&gt;<br>&gt;<br>&gt; You might find this library to be more Swifty: https://github.com/<br>&gt; harlanhaskins/Probably<br>&gt;<br>&gt; It‚Äôs not as generic as possible nor has all the features you might need,<br>&gt; but the author is very responsive to feedback.<br>&gt;<br>&gt;<br>&gt; I am wondering how would someone implement such functionality in a more<br>&gt; generic way: to allow usage of multiple collections (even custom, e.g. a<br>&gt; RingBuffer) and multiple value types (e.g. Decimal, Double). Extra points<br>&gt; for being &#39;swifty&#39;.<br>&gt;<br>&gt; Thanks in advance for any ideas.<br>&gt;<br>&gt; -g.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/a9a430fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Implementing a few statistics functions in Swift</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>October 10, 2016 at 10:00:00pm</p></header><div class="content"><p>‚Ä¶and of course I typoed the minus sign when switching things over. That<br>should be:<br></p><p>    private(set) var minimum: Number = Number.infinity<br>    private(set) var maximum: Number = -Number.infinity<br></p><p>Nevin<br></p><p><br>On Mon, Oct 10, 2016 at 4:02 PM, Nevin Brackett-Rozinsky &lt;<br>nevin.brackettrozinsky at gmail.com&gt; wrote:<br></p><p>&gt; I rolled my own (rather simple) statistics struct. It had been using<br>&gt; Double and Array, but I just went back and made it work generically with<br>&gt; FloatingPoint and Sequence. Here‚Äôs what it looks like:<br>&gt;<br>&gt; struct Statistic&lt;Number: FloatingPoint&gt; {<br>&gt;     private var ssqDev: Number = 0<br>&gt;     private(set) var count: Number = 0<br>&gt;     private(set) var average: Number = 0<br>&gt;     private(set) var maximum: Number = Number.infinity<br>&gt;     private(set) var minimum: Number = -Number.infinity<br>&gt;<br>&gt;     var variance: Number { return ssqDev / (count - 1) }<br>&gt;     var standardDeviation: Number { return sqrt(variance) }<br>&gt;<br>&gt;     init() {}<br>&gt;<br>&gt;     init&lt;T: Sequence&gt; (values: T) where T.Iterator.Element == Number {<br>&gt;         addValues(values)<br>&gt;     }<br>&gt;<br>&gt;     mutating func addValues&lt;T: Sequence&gt; (_ vals: T) where<br>&gt; T.Iterator.Element == Number {<br>&gt;         for val in vals { addValue(val) }<br>&gt;     }<br>&gt;<br>&gt;     mutating func addValue(_ value: Number) {<br>&gt;         count += 1 as Number<br>&gt;         let diff = value - average<br>&gt;         let frac = diff / count<br>&gt;         average += frac<br>&gt;         ssqDev += diff * (diff - frac)<br>&gt;         minimum = min(minimum, value)<br>&gt;         maximum = max(maximum, value)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; (Sorry for the lack of syntax highlighting‚ÄîGmail strips the formatting<br>&gt; when I paste it.)<br>&gt;<br>&gt; Some notes:<br>&gt;<br>&gt; ‚Ä¢ The approach is to look at each data point once and keep the statistics<br>&gt; correct for the numbers seen so far. This saves memory if the values are<br>&gt; being computed or fetched, since you don‚Äôt need to store them. However it<br>&gt; also means that the median cannot be found.<br>&gt;<br>&gt; ‚Ä¢ The calculation to update ‚Äúaverage‚Äù and ‚ÄússqDev‚Äù is simplified from the<br>&gt; online-algorithm<br>&gt; &lt;https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm&gt;<br>&gt; found on Wikipedia. (‚ÄússqDev‚Äù stores the sum of squared deviations from the<br>&gt; mean, which is just the sample variance times the count.)<br>&gt;<br>&gt; ‚Ä¢ If you want to ignore NaN‚Äôs, just add ‚Äúif value.isNaN { return }‚Äù at the<br>&gt; top of ‚ÄúaddValue‚Äù.<br>&gt;<br>&gt; ‚Ä¢ The ‚Äúas Number‚Äù coercion shouldn‚Äôt be necessary, but I was getting an<br>&gt; ‚Äúambiguous use of +=‚Äù error without it.<br>&gt;<br>&gt; ‚Ä¢ All occurrences of ‚Äúcount‚Äù were originally ‚Äún‚Äù, which was private, and I<br>&gt; had a computed ‚Äúcount‚Äù that just returned Int(n). But when I switched from<br>&gt; ‚ÄúDouble‚Äù to ‚ÄúNumber: FloatingPoint‚Äù I lost the ability to write ‚ÄúInt(n)‚Äù.<br>&gt;<br>&gt;<br>&gt; Nevin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mon, Oct 10, 2016 at 1:13 PM, Harlan Haskins via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Oh yeah, I&#39;d love contributions and feedback! I&#39;m essentially<br>&gt;&gt; implementing this as I learn things in stats 101 so it&#39;s probably woefully<br>&gt;&gt; inadequate. üòÖ<br>&gt;&gt;<br>&gt;&gt; -- Harlan<br>&gt;&gt;<br>&gt;&gt; On Oct 10, 2016, at 1:04 PM, Michael Ilseman &lt;milseman at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 8, 2016, at 11:29 AM, Georgios Moschovitis via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hey everyone,<br>&gt;&gt;<br>&gt;&gt; I would like to implement a few statistics functions in Swift (e.g.<br>&gt;&gt; variance, standardDeviation, etc) that are computed over a collection.<br>&gt;&gt;<br>&gt;&gt; I am aware of this library:<br>&gt;&gt;<br>&gt;&gt; https://github.com/evgenyneu/SigmaSwiftStatistics<br>&gt;&gt;<br>&gt;&gt; My problem is that it only supports Doubles and Arrays. Also the API<br>&gt;&gt; doesn‚Äôt look very ‚Äòswifty&#39; to me.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; You might find this library to be more Swifty: https://github.com/har<br>&gt;&gt; lanhaskins/Probably<br>&gt;&gt;<br>&gt;&gt; It‚Äôs not as generic as possible nor has all the features you might need,<br>&gt;&gt; but the author is very responsive to feedback.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I am wondering how would someone implement such functionality in a more<br>&gt;&gt; generic way: to allow usage of multiple collections (even custom, e.g. a<br>&gt;&gt; RingBuffer) and multiple value types (e.g. Decimal, Double). Extra points<br>&gt;&gt; for being &#39;swifty&#39;.<br>&gt;&gt;<br>&gt;&gt; Thanks in advance for any ideas.<br>&gt;&gt;<br>&gt;&gt; -g.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161010/148a33f6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
