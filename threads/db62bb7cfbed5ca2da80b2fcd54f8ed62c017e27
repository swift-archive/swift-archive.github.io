<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pre-proposal] Replace [Foo] With CollectionType</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 27, 2016 at 01:00:00pm</p></header><div class="content"><p>On May 24, 2016, at 9:35 PM<br></p><p>on Tue May 24 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; , Austin Zheng<br>&gt; &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;<br>&gt;     On Tue, May 24, 2016 at 4:24 PM, Brent Royal-Gordon<br>&gt;     &lt;brent at architechies.com&gt; wrote:<br>&gt;<br>&gt;     &gt; I’m not sure what you mean about introducing type unsafely.<br>&gt;<br>&gt;         What I mean is that once you do this:<br>&gt;<br>&gt;         let x: AnyCollection&lt;Character&gt; = myArrayOfCharacters<br>&gt;         let y: AnyCollection&lt;Character&gt; = myString.characters<br>&gt;<br>&gt;         Both `x` and `y` have indices of type `Any&lt;Comparable&gt;`, and will now<br>&gt;         accept each others&#39; indices:<br>&gt;<br>&gt;         for i in x.indices {<br>&gt;         print(y[i]) // Oops!<br>&gt;         }<br>&gt;<br>&gt;         If this rule:<br>&gt;<br>&gt;         &gt; The generalized existentials proposal goes out of its way to be<br>&gt;         explicit about the fact that only type safe operations would be visible<br>&gt;         through the existential.<br>&gt;<br>&gt;         Is trying to say that this isn&#39;t the case because APIs using the<br>&gt;         collection&#39;s `Index` are not exposed on an `AnyCollection`, well, then<br>&gt;         I&#39;m not sure what `AnyCollection` is actually supposed to be used for.<br>&gt;<br>&gt;     If there&#39;s any way that the rules that I&#39;ve proposed can be relaxed without<br>&gt;     sacrificing type safety, I would love to hear it. I think the difference in<br>&gt;     &#39;power&#39; in this regard between a function that uses generic types and a<br>&gt;     function that uses existentials is something inherent to how each works,<br>&gt;     though.<br>&gt;<br>&gt; The primary difference is the freedom to accept an index which is invalid and<br>&gt; call fatalError when you get it. We don&#39;t want existentials to do something<br>&gt; that. But with user-defined types we have the flexibility to do that if we<br>&gt; decide it is the right design.<br></p><p>I&#39;m not sure I agree that Existentials shouldn&#39;t do that.  The amount of<br>boilerplate one needs to construct a user-defined simulation of an<br>existential in these cases can be prohibitive.  Why shouldn&#39;t the<br>compiler handle it for us?<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pre-proposal] Replace [Foo] With CollectionType</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 27, 2016 at 04:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 27, 2016, at 3:43 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On May 24, 2016, at 9:35 PM<br>&gt; <br>&gt; on Tue May 24 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; , Austin Zheng<br>&gt;&gt; &lt;austinzheng at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    On Tue, May 24, 2016 at 4:24 PM, Brent Royal-Gordon<br>&gt;&gt;    &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I’m not sure what you mean about introducing type unsafely.<br>&gt;&gt; <br>&gt;&gt;        What I mean is that once you do this:<br>&gt;&gt; <br>&gt;&gt;        let x: AnyCollection&lt;Character&gt; = myArrayOfCharacters<br>&gt;&gt;        let y: AnyCollection&lt;Character&gt; = myString.characters<br>&gt;&gt; <br>&gt;&gt;        Both `x` and `y` have indices of type `Any&lt;Comparable&gt;`, and will now<br>&gt;&gt;        accept each others&#39; indices:<br>&gt;&gt; <br>&gt;&gt;        for i in x.indices {<br>&gt;&gt;        print(y[i]) // Oops!<br>&gt;&gt;        }<br>&gt;&gt; <br>&gt;&gt;        If this rule:<br>&gt;&gt; <br>&gt;&gt;&gt; The generalized existentials proposal goes out of its way to be<br>&gt;&gt;        explicit about the fact that only type safe operations would be visible<br>&gt;&gt;        through the existential.<br>&gt;&gt; <br>&gt;&gt;        Is trying to say that this isn&#39;t the case because APIs using the<br>&gt;&gt;        collection&#39;s `Index` are not exposed on an `AnyCollection`, well, then<br>&gt;&gt;        I&#39;m not sure what `AnyCollection` is actually supposed to be used for.<br>&gt;&gt; <br>&gt;&gt;    If there&#39;s any way that the rules that I&#39;ve proposed can be relaxed without<br>&gt;&gt;    sacrificing type safety, I would love to hear it. I think the difference in<br>&gt;&gt;    &#39;power&#39; in this regard between a function that uses generic types and a<br>&gt;&gt;    function that uses existentials is something inherent to how each works,<br>&gt;&gt;    though.<br>&gt;&gt; <br>&gt;&gt; The primary difference is the freedom to accept an index which is invalid and<br>&gt;&gt; call fatalError when you get it. We don&#39;t want existentials to do something<br>&gt;&gt; that. But with user-defined types we have the flexibility to do that if we<br>&gt;&gt; decide it is the right design.<br>&gt; <br>&gt; I&#39;m not sure I agree that Existentials shouldn&#39;t do that.  The amount of<br>&gt; boilerplate one needs to construct a user-defined simulation of an<br>&gt; existential in these cases can be prohibitive.  Why shouldn&#39;t the<br>&gt; compiler handle it for us?<br></p><p>I know it involves a lot of boilerplate that is better avoided and can be prohibitive and steer one away from designs that might otherwise be useful.<br></p><p>But the behavior of AnyCollection (specifically AnyIndex) involves custom logic that decides where and how to introduce the potential for fatalError.  I definitely don&#39;t want the compiler doing this without an explicit request of some kind.  Existentials should at least be safe by default.  If we *really* need a way to introduce unsafe existentials it should be opt-in (I have no idea what that might look like).  But I&#39;m not sure it&#39;s worth introducing a feature like that just to make it easier to create types with an unsafe interface.<br></p><p>But why would you want the unsafe behavior of AnyCollection when we could have a safe &#39;typealias AnyCollection&lt;T&gt; = Collection where .Element == T&#39;?  You would be able to safely use indexes received from the collection to index back into it.  Usage that would cause a runtime crash can be caught at compile time.  The only thing you wouldn&#39;t be able to do is take an index received from one collection and use with another.  Is there a specific use case the current design supports that the safer existential would not?<br></p><p>-Matthew<br></p><p>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
