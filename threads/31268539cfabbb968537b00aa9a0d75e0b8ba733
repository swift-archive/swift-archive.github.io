<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0027 Expose code unit initializers on String</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 15, 2016 at 08:00:00am</p></header><div class="content"><p>on Thu Feb 11 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0027 &quot;Expose code unit initializers on String&quot; begins<br>&gt; now and runs through February 16, 2016. The proposal is available<br>&gt; here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md<br>&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the<br>&gt; direction of Swift. When writing your review, here are some questions<br>&gt; you might want to answer in your review:<br>&gt;<br>&gt; What is your evaluation of the proposal?<br></p><p>I support the intent of the proposal but am -1 on the specific proposal<br>as offered.<br></p><p>First, in the presentation, there are several things that make it hard<br>to evaluate:<br></p><p>1. The &quot;decode&quot; function signature is so wide that it can&#39;t be read<br>   without scrolling at<br>   https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md<br></p><p>2. The proposal doesn&#39;t show any usage of the proposed APIs, so it<br>   is hard to understand what effect these APIs would have on real<br>   code.  There are some examples of uses in<br>   https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>   but I have to dig for them.<br></p><p>3. The description of the “Detailed Design” doesn&#39;t show any examples<br>   either, so I have to imagine what “backporting the Swift 3.0 versions<br>   of the CString constructors, then making them generic over their<br>   input and codec” means.<br></p><p>Next, when I look at *uses* that I can find (in the tests), I don&#39;t find<br>them to be clear.<br></p><p>  String(validatingCodeUnits: result, as: UTF8.self)<br></p><p>What does “validatingCodeUnits” mean?  Clearly we&#39;re going to do some<br>checking.  Is there a repair?  Is the initializer failable?  <br></p><p>In this change, for example:<br>https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units#diff-d39ec2c4819c950aeef95f899f53b104R79<br>I find the old code much clearer than the new code (I&#39;m not sure why<br>_decode starts with an underscore here; isn&#39;t it part of your proposed<br>public API?)<br></p><p>Lastly, I am very concerned about the “Alternatives Considered” section,<br>where, of one alternative, it says:<br></p><p>      This might be the better long-term solution from the perspective<br>      of API maintenance, but in the meantime this proposal has a fairly<br>      low impact.<br></p><p>We can&#39;t accept changes into the standard library “in the meantime,”<br>with the expectation that something more comprehensive will make them<br>obsolete.  Even though we&#39;ve had migration tools, we never operated that<br>way in the past, and as we head toward API and ABI stability it is even<br>more true today.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br></p><p>Yes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?  <br></p><p>W.r.t. direction, the fact that we have a major String overhaul planned<br>means that tackling this one corner of the API is probably not entirely<br>appropriate.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br></p><p>between quick reading and in-depth study.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Review] SE-0027 Expose code unit initializers on String</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>February 15, 2016 at 12:00:00pm</p></header><div class="content"><p>See responses inline.<br></p><p>Aside: omgomgomg I got Dave Abrahams to respond to a proposal of mine<br></p><p>Excitedly,<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p>On Mon, Feb 15, 2016, at 11:48 AM, Dave Abrahams via swift-evolution<br>wrote:<br>&gt; <br>&gt; on Thu Feb 11 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of SE-0027 &quot;Expose code unit initializers on String&quot; begins<br>&gt; &gt; now and runs through February 16, 2016. The proposal is available<br>&gt; &gt; here:<br>&gt; &gt;<br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; &gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; &gt; review manager. When replying, please try to keep the proposal link at<br>&gt; &gt; the top of the message:<br>&gt; &gt;<br>&gt; &gt; Proposal link:<br>&gt; &gt;<br>&gt; &gt; https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md<br>&gt; &gt; Reply text<br>&gt; &gt;<br>&gt; &gt; Other replies<br>&gt; &gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt; through constructive criticism and, eventually, determine the<br>&gt; &gt; direction of Swift. When writing your review, here are some questions<br>&gt; &gt; you might want to answer in your review:<br>&gt; &gt;<br>&gt; &gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; I support the intent of the proposal but am -1 on the specific proposal<br>&gt; as offered.<br>&gt; <br>&gt; First, in the presentation, there are several things that make it hard<br>&gt; to evaluate:<br>&gt; <br>&gt; 1. The &quot;decode&quot; function signature is so wide that it can&#39;t be read<br>&gt;    without scrolling at<br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md<br>&gt; <br>&gt; 2. The proposal doesn&#39;t show any usage of the proposed APIs, so it<br>&gt;    is hard to understand what effect these APIs would have on real<br>&gt;    code.  There are some examples of uses in<br>&gt;    https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units<br>&gt;    but I have to dig for them.<br>&gt; <br>&gt; 3. The description of the “Detailed Design” doesn&#39;t show any examples<br>&gt;    either, so I have to imagine what “backporting the Swift 3.0 versions<br>&gt;    of the CString constructors, then making them generic over their<br>&gt;    input and codec” means.<br></p><p>The notes are appreciated. I&#39;ll take care to add examples and fix<br>formatting. The proposal was always intended to be paired with the PR to<br>the stdlib, and that lack of clarity did not come up during the proposal<br>vetting stage.<br></p><p>&gt; <br>&gt; Next, when I look at *uses* that I can find (in the tests), I don&#39;t find<br>&gt; them to be clear.<br>&gt; <br>&gt;   String(validatingCodeUnits: result, as: UTF8.self)<br>&gt; <br>&gt; What does “validatingCodeUnits” mean?  Clearly we&#39;re going to do some<br>&gt; checking.  Is there a repair?  Is the initializer failable?  <br></p><p>I&#39;m open to suggestions. The names as they are were lifted from the<br>changes to the CString APIs made on swift-3-api-guidelines.<br></p><p>&quot;repairingCodeUnits&quot; implies to me that there is something already wrong<br>with them. I&#39;m also not sure as to the point of the initializer being<br>failable; many domain initializers in the stdlib don&#39;t indicate that<br>they can fail directly in the name.<br></p><p>&gt; <br>&gt; In this change, for example:<br>&gt; https://github.com/apple/swift/compare/master...zwaldowski:string-from-code-units#diff-d39ec2c4819c950aeef95f899f53b104R79<br>&gt; I find the old code much clearer than the new code (I&#39;m not sure why<br>&gt; _decode starts with an underscore here; isn&#39;t it part of your proposed<br>&gt; public API?)<br></p><p>The PR is ahead of the proposal here. It was pointed out in the review<br>thread up to this point that that that &quot;primitive&quot; isn&#39;t truly needed;<br>the initializers on String should be the API used by all.<br></p><p>The ugliness in this instance is transitional; it stems from bridging<br>the old-style constructor to the new-style one. The old signature&#39;s<br>return type is awkward in that it returns the extra hadError flag<br>regardless of whether decoding failed, which is discarded almost<br>universally by clients in the stdlib.<br></p><p>I intend to revert the change to `fromCStringRepairingIllFormedUTF8`, or<br>elide `_decode` into it instead.<br></p><p>&gt; <br>&gt; Lastly, I am very concerned about the “Alternatives Considered” section,<br>&gt; where, of one alternative, it says:<br>&gt; <br>&gt;       This might be the better long-term solution from the perspective<br>&gt;       of API maintenance, but in the meantime this proposal has a fairly<br>&gt;       low impact.<br>&gt; <br>&gt; We can&#39;t accept changes into the standard library “in the meantime,”<br>&gt; with the expectation that something more comprehensive will make them<br>&gt; obsolete.  Even though we&#39;ve had migration tools, we never operated that<br>&gt; way in the past, and as we head toward API and ABI stability it is even<br>&gt; more true today.<br></p><p>I understand the sentiment here, but I don&#39;t think &quot;wait for the next<br>rewrite of String&quot; is a good solution to a problem that the stdlib<br>already resolves. See below.<br></p><p>&gt; <br>&gt; &gt; Is the problem being addressed significant enough to warrant a change<br>&gt; &gt; to Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt; &gt; Does this proposal fit well with the feel and direction of Swift?  <br>&gt; <br>&gt; W.r.t. direction, the fact that we have a major String overhaul planned<br>&gt; means that tackling this one corner of the API is probably not entirely<br>&gt; appropriate.<br></p><p>&quot;Corner&quot; is an unfair characterization; users of Swift want to implement<br>things to the level of safety and performance bar set by the stdlib, but<br>we are currently at a disadvantage. No better example can be found but<br>in corelibs-foundation:<br>https://github.com/apple/swift-corelibs-foundation/blob/546dc8e16c3c34ca50f5752c6d0f39c3524f5f0a/Foundation/NSString.swift#L305.<br>Is it not a deficiency of the stdlib when code has to resort to<br>non-public methods? The stdlib (i.e., the parts touched by the PR) and<br>corelibs-foundation would have to move in lockstep to adopt a<br>replacement, so the existing underscored versions are as good as public<br>API.<br></p><p>I understand, and 100% encourage, the reticence around new API. However,<br>we&#39;ve created a worse problem by encouraging slow, buggy, custom<br>versions of behavior that already exists in the stdlib, or implying that<br>the underscored API should be used because we haven&#39;t managed something<br>better yet. :/<br></p><p>&gt; <br>&gt; &gt; How much effort did you put into your review? A glance, a quick<br>&gt; &gt; reading, or an in-depth study?<br>&gt; <br>&gt; between quick reading and in-depth study.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
