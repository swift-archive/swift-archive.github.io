<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Generic factory method and type inference</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>March 17, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello there!<br></p><p>I have the following class with a generic factory method:<br></p><p>final class Something&lt;T&gt; {<br>    <br>    let value: T<br>    <br>    init(initial: T) {<br>        value = initial<br>    }<br>    <br>}<br></p><p>extension Something {<br>    <br>    class func zip&lt;A, B&gt;(a: A, _ b: B) -&gt; Something&lt;(A, B)&gt; {<br>        let initial = (a, b)<br>        return Something&lt;(A, B)&gt;(initial: initial)<br>    }<br>    <br>}<br></p><p>How come I can’t call zip without explicitly specifying return type?<br></p><p>// ERROR: Cannot invoke `zip` with an argument list of type `(Int, Int)`<br>let y = Something.zip(1, 2)<br></p><p>// OK: Works but it’s unacceptable to require this on caller&#39;s side<br>let x = Something&lt;(Int, Int)&gt;.zip(1, 2)<br></p><p>Thank you for your time!<br></p><p>R+<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160317/24d6cda3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Generic factory method and type inference</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 17, 2016 at 08:00:00am</p></header><div class="content"><p>On Thu, Mar 17, 2016 at 6:58 AM, Rudolf Adamkovič &lt;swift-users at swift.org&gt; wrote:<br>&gt; How come I can’t call zip without explicitly specifying return type?<br>&gt;<br>&gt; // ERROR: Cannot invoke `zip` with an argument list of type `(Int, Int)`<br>&gt; let y = Something.zip(1, 2)<br></p><p>The compiler can&#39;t infer T from your call.  T and (A, B) are three<br>separate type parameters.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Generic factory method and type inference</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 17, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; final class Something&lt;T&gt; {<br>&gt;     <br>&gt;     let value: T<br>&gt;     <br>&gt;     init(initial: T) {<br>&gt;         value = initial<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; extension Something {<br>&gt;     <br>&gt;     class func zip&lt;A, B&gt;(a: A, _ b: B) -&gt; Something&lt;(A, B)&gt; {<br>&gt;         let initial = (a, b)<br>&gt;         return Something&lt;(A, B)&gt;(initial: initial)<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; How come I can’t call zip without explicitly specifying return type?<br>&gt; <br>&gt; // ERROR: Cannot invoke `zip` with an argument list of type `(Int, Int)`<br>&gt; let y = Something.zip(1, 2)<br>&gt; <br>&gt; // OK: Works but it’s unacceptable to require this on caller&#39;s side<br>&gt; let x = Something&lt;(Int, Int)&gt;.zip(1, 2)<br></p><p>The reason you&#39;re seeing this is that there&#39;s nothing in this call:<br></p><p>	let y = Something.zip(1, 2)<br></p><p>That tells Swift what `T` should be. The return type of the `zip` method is not connected to T; you can actually put any random type in the angle brackets after Something:<br></p><p>	let y = Something&lt;UICollectionViewDelegateFlowLayout&gt;.zip(1, 2)<br></p><p>Unfortunately, Swift doesn&#39;t currently have the features needed to properly connect `T` to the return type. If the language were more sophisticated, you could say something like this:<br></p><p>	extension&lt;A, B&gt; Something where T == (A, B) {<br>	    class func zip(a: A, _ b: B) -&gt; Something {<br>	        let initial = (a, b)<br>	        return Something(initial: initial)<br>	    }<br>	}<br></p><p>But for now, you&#39;ll have to make do with this horrible hack, which works by meaninglessly reusing the T type parameter:<br></p><p>	extension Something {<br>	    class func zip&lt;B&gt;(a: T, _ b: B) -&gt; Something&lt;(T, B)&gt; {<br>	        let initial = (a, b)<br>	        return Something&lt;(T, B)&gt;(initial: initial)<br>	    }<br>	}<br></p><p>Hope this helps,<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Generic factory method and type inference</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>March 17, 2016 at 05:00:00pm</p></header><div class="content"><p>Thanks for all the information. This was a cross-post from Stack Overflow:<br></p><p>http://stackoverflow.com/questions/36061561/generic-factory-method-and-type-inference &lt;http://stackoverflow.com/questions/36061561/generic-factory-method-and-type-inference&gt;<br></p><p>If you are a Stack Overflow user, you can copy the answer there and I will accept it as correct.<br></p><p>Either way, thanks for the explanation!<br></p><p>R+<br></p><p>&gt; On 17 Mar 2016, at 16:51, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; final class Something&lt;T&gt; {<br>&gt;&gt; <br>&gt;&gt;    let value: T<br>&gt;&gt; <br>&gt;&gt;    init(initial: T) {<br>&gt;&gt;        value = initial<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension Something {<br>&gt;&gt; <br>&gt;&gt;    class func zip&lt;A, B&gt;(a: A, _ b: B) -&gt; Something&lt;(A, B)&gt; {<br>&gt;&gt;        let initial = (a, b)<br>&gt;&gt;        return Something&lt;(A, B)&gt;(initial: initial)<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; How come I can’t call zip without explicitly specifying return type?<br>&gt;&gt; <br>&gt;&gt; // ERROR: Cannot invoke `zip` with an argument list of type `(Int, Int)`<br>&gt;&gt; let y = Something.zip(1, 2)<br>&gt;&gt; <br>&gt;&gt; // OK: Works but it’s unacceptable to require this on caller&#39;s side<br>&gt;&gt; let x = Something&lt;(Int, Int)&gt;.zip(1, 2)<br>&gt; <br>&gt; The reason you&#39;re seeing this is that there&#39;s nothing in this call:<br>&gt; <br>&gt; 	let y = Something.zip(1, 2)<br>&gt; <br>&gt; That tells Swift what `T` should be. The return type of the `zip` method is not connected to T; you can actually put any random type in the angle brackets after Something:<br>&gt; <br>&gt; 	let y = Something&lt;UICollectionViewDelegateFlowLayout&gt;.zip(1, 2)<br>&gt; <br>&gt; Unfortunately, Swift doesn&#39;t currently have the features needed to properly connect `T` to the return type. If the language were more sophisticated, you could say something like this:<br>&gt; <br>&gt; 	extension&lt;A, B&gt; Something where T == (A, B) {<br>&gt; 	    class func zip(a: A, _ b: B) -&gt; Something {<br>&gt; 	        let initial = (a, b)<br>&gt; 	        return Something(initial: initial)<br>&gt; 	    }<br>&gt; 	}<br>&gt; <br>&gt; But for now, you&#39;ll have to make do with this horrible hack, which works by meaninglessly reusing the T type parameter:<br>&gt; <br>&gt; 	extension Something {<br>&gt; 	    class func zip&lt;B&gt;(a: T, _ b: B) -&gt; Something&lt;(T, B)&gt; {<br>&gt; 	        let initial = (a, b)<br>&gt; 	        return Something&lt;(T, B)&gt;(initial: initial)<br>&gt; 	    }<br>&gt; 	}<br>&gt; <br>&gt; Hope this helps,<br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160317/ad3346f7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Generic factory method and type inference</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 17, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mar 17, 2016, at 6:58 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; How come I can’t call zip without explicitly specifying return type?<br>&gt; <br>&gt; // ERROR: Cannot invoke `zip` with an argument list of type `(Int, Int)`<br>&gt; let y = Something.zip(1, 2)<br>&gt; <br>&gt; // OK: Works but it’s unacceptable to require this on caller&#39;s side<br>&gt; let x = Something&lt;(Int, Int)&gt;.zip(1, 2)<br>&gt; <br>&gt; Thank you for your time!<br></p><p>I know that your root problem was already answered, but FYI swift master makes it much more clear what is wrong:<br></p><p>test.swift:1:19: error: generic parameter &#39;T&#39; could not be inferred<br>let y = Something.zip(1, 2)<br>                  ^<br>test.swift:1:13: note: &#39;T&#39; declared as parameter to type &#39;Something&#39;<br>final class Something&lt;T&gt; {<br>            ^<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160317/81ea44b9/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
