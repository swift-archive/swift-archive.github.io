<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Proposal] Custom operators</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>April  4, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Антон Жилин via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; <br>&gt; Swift 2.2 is out, and I restart discussion on syntax for custom operators.<br>&gt; I insist that this time we should focus less on linguistic aspects.<br></p><p><br>I have a few thoughts and a question regarding precedence:<br></p><p>1.  I strongly agree that the numeric precedence system is not great. From<br>    a implementation point of view, the way to specify them in your proposal<br>    essentially gave all visible operators a partial order, in which we can<br>    draw a directed gragh with operators being the nodes and their relation<br>    being arcs. A part of the graph might look like: &#39;^&#39; --&gt; &#39;*&#39; --&gt; &#39;+&#39;, the<br>    nodes being the math operators. We can tell &#39;*&#39; has a higher precedence<br>    than &#39;+&#39;, &#39;^&#39; has a higher precedence than &#39;*&#39; and &#39;+&#39;, by follwing the<br>    arcs. If one operator is not reachable from another, and vice versa, then<br>    composing these two is illegal. We need to teach the compiler this concept.<br></p><p>2.  Currently, it&#39;s not possible to specify precedence for pre- and postfix<br>    operators. Chris Lattner has mentioned that the<br>    following result is not desirable:<br></p><p>        ∆x + y<br></p><p>    … where ∆ has a lower precendence than + while it&#39;s required to have no<br>    space between ∆ and the operand. My understanding is that if spaces were<br>    to be allowed here, parsing such expression without ambiguity is a<br>    non-trivial challenge. So, will it be possible to specify precedence for<br>    pre/postfix operators under your proposal?<br></p><p>3.  It may be a good exercise to work out how would each of the builtin<br>    operators would be defined with this change and mention it (not the entire<br>    definition, but the fact that it&#39;s possible, or reasons why it produces<br>    any difference) in the proposal.<br></p><p>- Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/49f329a0267f5a1773a77017882a82a8?s=50"></div><header><strong>[Proposal] Custom operators</strong> from <string>Rainer Brockerhoff</string> &lt;rainer at brockerhoff.net&gt;<p>April  6, 2016 at 09:00:00am</p></header><div class="content"><p>On 4/4/16 15:21, Daniel Duan via swift-evolution wrote:<br>&gt;&gt; Антон Жилин via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;&gt;<br>&gt;&gt; Swift 2.2 is out, and I restart discussion on syntax for custom operators.<br>&gt;&gt; I insist that this time we should focus less on linguistic aspects.<br>&gt; ...[snip]<br>&gt; <br>&gt; 3.  It may be a good exercise to work out how would each of the builtin<br>&gt;     operators would be defined with this change and mention it (not the entire<br>&gt;     definition, but the fact that it&#39;s possible, or reasons why it produces<br>&gt;     any difference) in the proposal.<br></p><p>Quoting the book:<br>“Swift’s operator precedences and associativity rules are simpler and<br>more predictable than those found in C and Objective-C. ”<br>Excerpt From: Apple Inc. “The Swift Programming Language (Swift 2.2<br>Prerelease).” iBooks.<br></p><p>A word of caution. I&#39;ve been programming since 1969 (and this does<br>include languages like PL/I and B6700 ALGOL, for instance). For the past<br>35 years or so, mostly C and Objective-C. Nevertheless I&#39;ve been bitten<br>far too often by misremembering operator precedences — and I refuse to<br>tack the rules up on my wall, or print them upside down on my t-shirt.<br></p><p>With advancing experience, as complexity increases and available neurons<br>decrease, I find myself _always_ using parentheses, or even intermediate<br>variables. It looks unwieldy but it&#39;s easier to reason about and to<br>debug. Why should I have to remember what `a &amp;&amp; b || c` means in<br>practice in a particular language?<br></p><p>With newly-declared operators (especially not newly-declared by ME!) the<br>potential for confusion becomes ever-higher.<br></p><p>I caution against proposals that allow excess flexibility in defining<br>operator precedence. Even the existing numerical precedence values can<br>be abused, and expanding them by using some sort of tree, or (say)<br>floating-point values, is just a &quot;foolish consistency&quot;.<br></p><p>I&#39;d say, have the established precedence groups defined by name, and<br>allow adding new operators to only some of these groups. Inside those,<br>group by associativity - perhaps the few right-associative types should<br>not allow any new operators to be added.<br></p><p>All IMHO of course.<br>-- <br>Rainer Brockerhoff  &lt;rainer at brockerhoff.net&gt;<br>Belo Horizonte, Brazil<br>&quot;In the affairs of others even fools are wise<br>In their own business even sages err.&quot;<br>http://brockerhoff.net/blog/<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
