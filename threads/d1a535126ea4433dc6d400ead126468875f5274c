<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 27, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi, everyone. This isn&#39;t exactly a language feature, but it&#39;s something that would benefit from the idea pool and bikeshedding that happens on the list. Simply put, what&#39;s the name of this feature?<br></p><p>#if os(OSX)<br>#if swift(&gt;=3.0)<br>#if DEBUG<br></p><p>And what&#39;s this command-line option? (not that most people are invoking Swift on the command line)<br></p><p>swift -DDEBUG main.swift<br></p><p>---<br></p><p>The Swift Programming Language book &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/compiler-control-statement&gt; and the compiler diagnostics aren&#39;t quite consistent here:<br></p><p>#if: &quot;configuration block&quot; (compiler), &quot;build configuration statement&quot; (book)<br>(the condition): &quot;build configuration expression&quot; (compiler), &quot;build configuration&quot; (book)<br>os(…) and arch(…): &quot;target configuration expression&quot; (compiler), &quot;platform testing function&quot; (book)<br>swift(&gt;=…): &quot;version requirement&quot; (compiler), (not yet in book)<br></p><p>-D flag: &quot;specifies one or more build configuration options&quot;<br></p><p>On top of this, there&#39;s another problem: the term &quot;build configuration&quot; has long been used by Xcode to refer to &quot;Debug&quot;, &quot;Release&quot;, etc—a different mode of compilation that manifests itself as different build settings. Having two different concepts with the same name is never a great idea, and Xcode&#39;s feature definitely has seniority here.<br></p><p>---<br></p><p>Some things to keep in mind for this feature:<br></p><p>- All conditions are (currently) compile-time conditions.<br>- Code in the non-compiled block still has to parse…except if the predicate is &quot;swift(&gt;=…)&quot;, for obvious reasons.<br>- All conditions are boolean-valued predicates; the ones set on the command line are options (present or absent), not macros.<br></p><p>Here&#39;s my proposed names to get the discussion started:<br></p><p>- &quot;Conditional Compilation Block&quot; for the whole construct (from the #if to the #endif and everything in between).<br>- &quot;Conditional Compilation Directive&quot; for the #if line (and #elseif line). Not sure if the #endif line applies.<br>- &quot;Conditional Compilation Expression&quot; for the condition of a #if.<br>- &quot;Platform Compilation Features&quot; for all the function-like predicates (including &quot;swift(&gt;=…)&quot;, even though that&#39;s special.<br>- &quot;Custom Compilation Features&quot; for all the user-defined options.<br>- &quot;marks a custom compilation feature as present&quot; as the --help text for -D.<br></p><p>…but I&#39;d be happy if someone comes up with something better. (And I&#39;d like feedback on if any of these names are problematic in some other way.)<br></p><p>Thanks, all,<br>Jordan<br></p><p>P.S. Since this is only changing diagnostics and the book, I don&#39;t think it needs to go through the full evolution process, but someone else from the core team can correct me.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/d1a5274c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecb50a99bf3b4cc0249312945dce7115?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Ben Langmuir</string> &lt;blangmuir at apple.com&gt;<p>January 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 27, 2016, at 5:18 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, everyone. This isn&#39;t exactly a language feature, but it&#39;s something that would benefit from the idea pool and bikeshedding that happens on the list. Simply put, what&#39;s the name of this feature?<br>&gt; <br>&gt; #if os(OSX)<br>&gt; #if swift(&gt;=3.0)<br>&gt; #if DEBUG<br>&gt; <br>&gt; And what&#39;s this command-line option? (not that most people are invoking Swift on the command line)<br>&gt; <br>&gt; swift -DDEBUG main.swift<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; The Swift Programming Language book &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/compiler-control-statement&gt; and the compiler diagnostics aren&#39;t quite consistent here:<br>&gt; <br>&gt; #if: &quot;configuration block&quot; (compiler), &quot;build configuration statement&quot; (book)<br>&gt; (the condition): &quot;build configuration expression&quot; (compiler), &quot;build configuration&quot; (book)<br>&gt; os(…) and arch(…): &quot;target configuration expression&quot; (compiler), &quot;platform testing function&quot; (book)<br>&gt; swift(&gt;=…): &quot;version requirement&quot; (compiler), (not yet in book)<br>&gt; <br>&gt; -D flag: &quot;specifies one or more build configuration options&quot;<br>&gt; <br>&gt; On top of this, there&#39;s another problem: the term &quot;build configuration&quot; has long been used by Xcode to refer to &quot;Debug&quot;, &quot;Release&quot;, etc—a different mode of compilation that manifests itself as different build settings. Having two different concepts with the same name is never a great idea, and Xcode&#39;s feature definitely has seniority here.<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Some things to keep in mind for this feature:<br>&gt; <br>&gt; - All conditions are (currently) compile-time conditions.<br>&gt; - Code in the non-compiled block still has to parse…except if the predicate is &quot;swift(&gt;=…)&quot;, for obvious reasons.<br>&gt; - All conditions are boolean-valued predicates; the ones set on the command line are options (present or absent), not macros.<br>&gt; <br>&gt; Here&#39;s my proposed names to get the discussion started:<br>&gt; <br>&gt; - &quot;Conditional Compilation Block&quot; for the whole construct (from the #if to the #endif and everything in between).<br>&gt; - &quot;Conditional Compilation Directive&quot; for the #if line (and #elseif line). Not sure if the #endif line applies.<br>&gt; - &quot;Conditional Compilation Expression&quot; for the condition of a #if.<br>&gt; - &quot;Platform Compilation Features&quot; for all the function-like predicates (including &quot;swift(&gt;=…)&quot;, even though that&#39;s special.<br></p><p>I don’t love the name “Features” , but I don’t have an obviously better suggestion off hand.<br></p><p>Why do you want to combine the version requirement with the other predicates?  I would think the special behaviour was worth calling out.<br></p><p>&gt; - &quot;Custom Compilation Features&quot; for all the user-defined options.<br>&gt; - &quot;marks a custom compilation feature as present&quot; as the --help text for -D.<br>&gt; <br>&gt; …but I&#39;d be happy if someone comes up with something better. (And I&#39;d like feedback on if any of these names are problematic in some other way.)<br></p><p>+1 overall, this seems like a nice cleanup.<br></p><p>&gt; <br>&gt; Thanks, all,<br>&gt; Jordan<br>&gt; <br>&gt; P.S. Since this is only changing diagnostics and the book, I don&#39;t think it needs to go through the full evolution process, but someone else from the core team can correct me.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/2c0c4d62/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 28, 2016 at 10:00:00am</p></header><div class="content"><p>I&#39;m used to the name &quot;directive&quot; from C preprocessor nomenclature, but I<br>think it would best be used for all of #available, #selector, and #line, in<br>addition to #if/#else/#endif.<br></p><p>Maybe &quot;#if&quot; is a &quot;conditional directive&quot;, and &quot;os(...) &amp;&amp; swift(...)&quot; is<br>simply its condition.<br></p><p>-D  &quot;Defines&quot; something (a flag). Perhaps it &quot;defines a flag such that the<br>&#39;#if flag&#39; condition is true&quot;.<br></p><p>On Wed, Jan 27, 2016 at 5:18 PM, Jordan Rose via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi, everyone. This isn&#39;t *exactly* a language feature, but it&#39;s something<br>&gt; that would benefit from the idea pool and bikeshedding that happens on the<br>&gt; list. Simply put, what&#39;s the name of this feature?<br>&gt;<br>&gt; #if os(OSX)<br>&gt; #if swift(&gt;=3.0)<br>&gt; #if DEBUG<br>&gt;<br>&gt;<br>&gt; And what&#39;s this command-line option? (not that most people are invoking<br>&gt; Swift on the command line)<br>&gt;<br>&gt; swift -DDEBUG main.swift<br>&gt;<br>&gt;<br>&gt; ---<br>&gt;<br>&gt; The Swift Programming Language book<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/compiler-control-statement&gt; and<br>&gt; the compiler diagnostics aren&#39;t quite consistent here:<br>&gt;<br>&gt; #if: &quot;configuration block&quot; (compiler), &quot;build configuration statement&quot;<br>&gt; (book)<br>&gt; (the condition): &quot;build configuration expression&quot; (compiler), &quot;build<br>&gt; configuration&quot; (book)<br>&gt; os(…) and arch(…): &quot;target configuration expression&quot; (compiler), &quot;platform<br>&gt; testing function&quot; (book)<br>&gt; swift(&gt;=…): &quot;version requirement&quot; (compiler), (not yet in book)<br>&gt;<br>&gt; -D flag: &quot;specifies one or more build configuration options&quot;<br>&gt;<br>&gt;<br>&gt; On top of this, there&#39;s another problem: the term &quot;build configuration&quot;<br>&gt; has long been used by Xcode to refer to &quot;Debug&quot;, &quot;Release&quot;, etc—a different<br>&gt; mode of compilation that manifests itself as different build settings.<br>&gt; Having two different concepts with the same name is never a great idea, and<br>&gt; Xcode&#39;s feature definitely has seniority here.<br>&gt;<br>&gt; ---<br>&gt;<br>&gt; Some things to keep in mind for this feature:<br>&gt;<br>&gt; - All conditions are (currently) compile-time conditions.<br>&gt; - Code in the non-compiled block still has to parse…except if the<br>&gt; predicate is &quot;swift(&gt;=…)&quot;, for obvious reasons.<br>&gt; - All conditions are boolean-valued predicates; the ones set on the<br>&gt; command line are options (present or absent), not macros.<br>&gt;<br>&gt; Here&#39;s my proposed names to get the discussion started:<br>&gt;<br>&gt; - &quot;Conditional Compilation Block&quot; for the whole construct (from the #if to<br>&gt; the #endif and everything in between).<br>&gt; - &quot;Conditional Compilation Directive&quot; for the #if line (and #elseif line).<br>&gt; Not sure if the #endif line applies.<br>&gt; - &quot;Conditional Compilation Expression&quot; for the condition of a #if.<br>&gt; - &quot;Platform Compilation Features&quot; for all the function-like predicates<br>&gt; (including &quot;swift(&gt;=…)&quot;, even though that&#39;s special.<br>&gt; - &quot;Custom Compilation Features&quot; for all the user-defined options.<br>&gt; - &quot;marks a custom compilation feature as present&quot; as the --help text for<br>&gt; -D.<br>&gt;<br>&gt; …but I&#39;d be happy if someone comes up with something better. (And I&#39;d like<br>&gt; feedback on if any of these names are problematic in some other way.)<br>&gt;<br>&gt; Thanks, all,<br>&gt; Jordan<br>&gt;<br>&gt; P.S. Since this is only changing diagnostics and the book, I don&#39;t think<br>&gt; it needs to go through the full evolution process, but someone else from<br>&gt; the core team can correct me.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/fb4eca62/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 28, 2016 at 10:00:00am</p></header><div class="content"><p>Hm. I wasn&#39;t considering #available and #selector to be &quot;directives&quot; because they don&#39;t &quot;direct&quot; the compiler to do anything; they&#39;re &quot;just&quot; expressions with special effects. The existing &quot;#line&quot; would be a directive, though.<br></p><p>Jordan<br></p><p>&gt; On Jan 28, 2016, at 10:45, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m used to the name &quot;directive&quot; from C preprocessor nomenclature, but I think it would best be used for all of #available, #selector, and #line, in addition to #if/#else/#endif.<br>&gt; <br>&gt; Maybe &quot;#if&quot; is a &quot;conditional directive&quot;, and &quot;os(...) &amp;&amp; swift(...)&quot; is simply its condition.<br>&gt; <br>&gt; -D  &quot;Defines&quot; something (a flag). Perhaps it &quot;defines a flag such that the &#39;#if flag&#39; condition is true&quot;.<br>&gt; <br>&gt; On Wed, Jan 27, 2016 at 5:18 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi, everyone. This isn&#39;t exactly a language feature, but it&#39;s something that would benefit from the idea pool and bikeshedding that happens on the list. Simply put, what&#39;s the name of this feature?<br>&gt; <br>&gt; #if os(OSX)<br>&gt; #if swift(&gt;=3.0)<br>&gt; #if DEBUG<br>&gt; <br>&gt; And what&#39;s this command-line option? (not that most people are invoking Swift on the command line)<br>&gt; <br>&gt; swift -DDEBUG main.swift<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; The Swift Programming Language book &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/compiler-control-statement&gt; and the compiler diagnostics aren&#39;t quite consistent here:<br>&gt; <br>&gt; #if: &quot;configuration block&quot; (compiler), &quot;build configuration statement&quot; (book)<br>&gt; (the condition): &quot;build configuration expression&quot; (compiler), &quot;build configuration&quot; (book)<br>&gt; os(…) and arch(…): &quot;target configuration expression&quot; (compiler), &quot;platform testing function&quot; (book)<br>&gt; swift(&gt;=…): &quot;version requirement&quot; (compiler), (not yet in book)<br>&gt; <br>&gt; -D flag: &quot;specifies one or more build configuration options&quot;<br>&gt; <br>&gt; On top of this, there&#39;s another problem: the term &quot;build configuration&quot; has long been used by Xcode to refer to &quot;Debug&quot;, &quot;Release&quot;, etc—a different mode of compilation that manifests itself as different build settings. Having two different concepts with the same name is never a great idea, and Xcode&#39;s feature definitely has seniority here.<br>&gt; <br>&gt; ---<br>&gt; <br>&gt; Some things to keep in mind for this feature:<br>&gt; <br>&gt; - All conditions are (currently) compile-time conditions.<br>&gt; - Code in the non-compiled block still has to parse…except if the predicate is &quot;swift(&gt;=…)&quot;, for obvious reasons.<br>&gt; - All conditions are boolean-valued predicates; the ones set on the command line are options (present or absent), not macros.<br>&gt; <br>&gt; Here&#39;s my proposed names to get the discussion started:<br>&gt; <br>&gt; - &quot;Conditional Compilation Block&quot; for the whole construct (from the #if to the #endif and everything in between).<br>&gt; - &quot;Conditional Compilation Directive&quot; for the #if line (and #elseif line). Not sure if the #endif line applies.<br>&gt; - &quot;Conditional Compilation Expression&quot; for the condition of a #if.<br>&gt; - &quot;Platform Compilation Features&quot; for all the function-like predicates (including &quot;swift(&gt;=…)&quot;, even though that&#39;s special.<br>&gt; - &quot;Custom Compilation Features&quot; for all the user-defined options.<br>&gt; - &quot;marks a custom compilation feature as present&quot; as the --help text for -D.<br>&gt; <br>&gt; …but I&#39;d be happy if someone comes up with something better. (And I&#39;d like feedback on if any of these names are problematic in some other way.)<br>&gt; <br>&gt; Thanks, all,<br>&gt; Jordan<br>&gt; <br>&gt; P.S. Since this is only changing diagnostics and the book, I don&#39;t think it needs to go through the full evolution process, but someone else from the core team can correct me.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/ef05e546/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 28, 2016 at 11:00:00am</p></header><div class="content"><p>How about &quot;hashtags&quot;? ;-)<br></p><p>On Thu, Jan 28, 2016 at 10:49 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; Hm. I wasn&#39;t considering #available and #selector to be &quot;directives&quot;<br>&gt; because they don&#39;t &quot;direct&quot; the compiler to do anything; they&#39;re &quot;just&quot;<br>&gt; expressions with special effects. The existing &quot;#line&quot; would be a<br>&gt; directive, though.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On Jan 28, 2016, at 10:45, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;<br>&gt; I&#39;m used to the name &quot;directive&quot; from C preprocessor nomenclature, but I<br>&gt; think it would best be used for all of #available, #selector, and #line, in<br>&gt; addition to #if/#else/#endif.<br>&gt;<br>&gt; Maybe &quot;#if&quot; is a &quot;conditional directive&quot;, and &quot;os(...) &amp;&amp; swift(...)&quot; is<br>&gt; simply its condition.<br>&gt;<br>&gt; -D  &quot;Defines&quot; something (a flag). Perhaps it &quot;defines a flag such that the<br>&gt; &#39;#if flag&#39; condition is true&quot;.<br>&gt;<br>&gt; On Wed, Jan 27, 2016 at 5:18 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi, everyone. This isn&#39;t *exactly* a language feature, but it&#39;s<br>&gt;&gt; something that would benefit from the idea pool and bikeshedding that<br>&gt;&gt; happens on the list. Simply put, what&#39;s the name of this feature?<br>&gt;&gt;<br>&gt;&gt; #if os(OSX)<br>&gt;&gt; #if swift(&gt;=3.0)<br>&gt;&gt; #if DEBUG<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And what&#39;s this command-line option? (not that most people are invoking<br>&gt;&gt; Swift on the command line)<br>&gt;&gt;<br>&gt;&gt; swift -DDEBUG main.swift<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ---<br>&gt;&gt;<br>&gt;&gt; The Swift Programming Language book<br>&gt;&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/compiler-control-statement&gt; and<br>&gt;&gt; the compiler diagnostics aren&#39;t quite consistent here:<br>&gt;&gt;<br>&gt;&gt; #if: &quot;configuration block&quot; (compiler), &quot;build configuration statement&quot;<br>&gt;&gt; (book)<br>&gt;&gt; (the condition): &quot;build configuration expression&quot; (compiler), &quot;build<br>&gt;&gt; configuration&quot; (book)<br>&gt;&gt; os(…) and arch(…): &quot;target configuration expression&quot; (compiler),<br>&gt;&gt; &quot;platform testing function&quot; (book)<br>&gt;&gt; swift(&gt;=…): &quot;version requirement&quot; (compiler), (not yet in book)<br>&gt;&gt;<br>&gt;&gt; -D flag: &quot;specifies one or more build configuration options&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On top of this, there&#39;s another problem: the term &quot;build configuration&quot;<br>&gt;&gt; has long been used by Xcode to refer to &quot;Debug&quot;, &quot;Release&quot;, etc—a different<br>&gt;&gt; mode of compilation that manifests itself as different build settings.<br>&gt;&gt; Having two different concepts with the same name is never a great idea, and<br>&gt;&gt; Xcode&#39;s feature definitely has seniority here.<br>&gt;&gt;<br>&gt;&gt; ---<br>&gt;&gt;<br>&gt;&gt; Some things to keep in mind for this feature:<br>&gt;&gt;<br>&gt;&gt; - All conditions are (currently) compile-time conditions.<br>&gt;&gt; - Code in the non-compiled block still has to parse…except if the<br>&gt;&gt; predicate is &quot;swift(&gt;=…)&quot;, for obvious reasons.<br>&gt;&gt; - All conditions are boolean-valued predicates; the ones set on the<br>&gt;&gt; command line are options (present or absent), not macros.<br>&gt;&gt;<br>&gt;&gt; Here&#39;s my proposed names to get the discussion started:<br>&gt;&gt;<br>&gt;&gt; - &quot;Conditional Compilation Block&quot; for the whole construct (from the #if<br>&gt;&gt; to the #endif and everything in between).<br>&gt;&gt; - &quot;Conditional Compilation Directive&quot; for the #if line (and #elseif<br>&gt;&gt; line). Not sure if the #endif line applies.<br>&gt;&gt; - &quot;Conditional Compilation Expression&quot; for the condition of a #if.<br>&gt;&gt; - &quot;Platform Compilation Features&quot; for all the function-like predicates<br>&gt;&gt; (including &quot;swift(&gt;=…)&quot;, even though that&#39;s special.<br>&gt;&gt; - &quot;Custom Compilation Features&quot; for all the user-defined options.<br>&gt;&gt; - &quot;marks a custom compilation feature as present&quot; as the --help text for<br>&gt;&gt; -D.<br>&gt;&gt;<br>&gt;&gt; …but I&#39;d be happy if someone comes up with something better. (And I&#39;d<br>&gt;&gt; like feedback on if any of these names are problematic in some other way.)<br>&gt;&gt;<br>&gt;&gt; Thanks, all,<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt; P.S. Since this is only changing diagnostics and the book, I don&#39;t think<br>&gt;&gt; it needs to go through the full evolution process, but someone else from<br>&gt;&gt; the core team can correct me.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/96ec9e61/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 28, 2016 at 11:00:00am</p></header><div class="content"><p>Renaming this seems like a good idea.<br></p><p>On Wed, Jan 27, 2016, at 05:18 PM, Jordan Rose via swift-evolution wrote:<br>&gt; - &quot;Custom Compilation Features&quot; for all the user-defined options.<br>&gt; - &quot;marks a custom compilation feature as present&quot; as the --help text<br>&gt;   for -D.<br>&gt;<br>&gt; …but I&#39;d be happy if someone comes up with something better. (And<br>&gt; I&#39;d like feedback on if any of these names are problematic in some<br>&gt; other way.)<br></p><p>How about &quot;Conditional Compilation Flags&quot; for the user-defined options?<br>The term &quot;flag&quot; implies boolean, and also connotes the presence of the<br>flag as being the true value. The help text can then say &quot;marks a<br>conditional compilation flag as true&quot;. The boolean nature of the flag<br>also makes the syntax `#if SomeFlag` make more sense, because we&#39;re used<br>to if conditions being boolean values.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160128/d799235b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Renaming &quot;Build Configuration&quot;</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; On Jan 28, 2016, at 11:08, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Renaming this seems like a good idea.<br>&gt;  <br>&gt; On Wed, Jan 27, 2016, at 05:18 PM, Jordan Rose via swift-evolution wrote:<br>&gt;&gt; - &quot;Custom Compilation Features&quot; for all the user-defined options.<br>&gt;&gt; - &quot;marks a custom compilation feature as present&quot; as the --help text for -D.<br>&gt;&gt;  <br>&gt;&gt; …but I&#39;d be happy if someone comes up with something better. (And I&#39;d like feedback on if any of these names are problematic in some other way.)<br>&gt;  <br>&gt; How about &quot;Conditional Compilation Flags&quot; for the user-defined options? The term &quot;flag&quot; implies boolean, and also connotes the presence of the flag as being the true value. The help text can then say &quot;marks a conditional compilation flag as true&quot;. The boolean nature of the flag also makes the syntax `#if SomeFlag` make more sense, because we&#39;re used to if conditions being boolean values.<br>&gt;  <br></p><p>Closing the loop: I implemented this in https://github.com/apple/swift/commit/c90511a74e94a06f1199ecd3f8d004cbfa70410d, taking Kevin&#39;s suggestion of &quot;flags&quot; for the user-set options. Jack L from Apple convinced me to avoid the word &quot;feature&quot; as well, since the platform conditions refer to mutually exclusive environments (&quot;os(OSX)&quot; vs. &quot;os(iOS)&quot;), while &quot;features&quot; can usually be mixed.<br></p><p>Jordan<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
